
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4fffe8 prev 0x56097d4f7788 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d5000e0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56097d500170 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56097d5001e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56097d5002a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56097d500370 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56097d5004e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56097d500420 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56097d500590 <col:24>
| `-OptimizeNoneAttr 0x56097d5005e8 <col:34>
|-CXXMethodDecl 0x56097d500630 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56097d5008e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56097d5006e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56097d500758 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56097d5007d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56097d5009a0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56097d5009d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56097d500a40 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56097d500ac8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56097d500de8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56097d500b80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56097d500bf8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56097d500c70 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56097d500cf0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56097d500f00 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56097d508878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56097d508878
| `-ParmVarDecl 0x56097d508988 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56097d508a28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56097d508a28
| `-ParmVarDecl 0x56097d508b38 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56097d5e4688 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4f3000 prev 0x56097d4f2d80 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56097d4f30f8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56097d4f3188 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56097d4f31e8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56097d4f32d8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56097d4f33d8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56097d4f35a8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56097d4f3458 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56097d4f34d0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56097d4f3738 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56097d4f3670 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56097d4f37e0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56097d4f3918 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56097d4f3850 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56097d4f3ab8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56097d4f39f8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56097d4f3c58 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56097d4f3b98 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56097d4f3d00 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56097d4f3e00 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56097d4f3ee0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f3de0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56097d4f3dc0 <col:26> 'int' 1
| `-EnumConstantDecl 0x56097d4f3e90 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56097d4f3ef8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4f3e70 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56097d4f3e50 <col:44> 'int' 2
|-CXXMethodDecl 0x56097d4f4040 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56097d4f3f28 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56097d4f3fa8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56097d4f4198 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56097d4f4108 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56097d4f43d8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56097d4f4258 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56097d4f42d0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56097d4f4488 <col:20>
| `-OptimizeNoneAttr 0x56097d4f44e0 <col:30>
|-CXXMethodDecl 0x56097d4f45e8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56097d4f4520 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56097d4f4690 <col:20>
| `-OptimizeNoneAttr 0x56097d4f46e8 <col:30>
|-CXXMethodDecl 0x56097d4f4738 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56097d4f4800 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56097d4f4918 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56097d4f49a0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56097d4f4a28 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56097d4f4ab0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56097d4f4b38 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56097d4f4bc8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56097d4f4c88 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56097d4f4d10 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56097d4f4d98 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56097d4f4e20 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56097d4f4ea8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56097d4f4f30 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56097d4f4fc0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56097d4f5080 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56097d4f5110 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56097d4f5260 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56097d4f51c8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56097d4f53f0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56097d4f5320 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56097d4f56a0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56097d4f54a8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56097d4f5528 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56097d4f55a8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56097d4f5758 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56097d4f5860 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56097d4f5af0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f5840 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d4f5820 <col:33> 'int' 0
| |-EnumConstantDecl 0x56097d4f58f0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56097d4f5b08 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f58d0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56097d4f58b0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56097d4f5980 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56097d4f5b20 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f5960 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56097d4f5940 <col:38> 'int' 90
| |-EnumConstantDecl 0x56097d4f5a10 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56097d4f5b38 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f59f0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56097d4f59d0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56097d4f5aa0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56097d4f5b50 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4f5a80 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56097d4f5a60 <col:32> 'int' 2000
|-CXXMethodDecl 0x56097d4f5b90 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56097d4f5fd0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56097d4f5e40 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56097d4f5eb8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4f60a0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56097d4f6220 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56097d4f6150 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4f6428 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56097d4f62d8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56097d4f6350 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4f6528 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56097d4f65c8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56097d4f6690 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f6720 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56097d4f6950 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4f6700 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56097d4f66e0 <col:36> 'int' EnumConstant 0x56097d4f6690 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f6770 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f67c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f6810 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f6860 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56097d4f68b0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56097d4f6900 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56097d4f6a38 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56097d4f6978 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56097d4f6b00 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56097d4f6bc0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56097d4f6c80 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56097d4f6d40 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56097d4f6e58 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56097d4f6f20 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56097d4f70a0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56097d4f6fd0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56097d4f71c8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56097d4f73c8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56097d4f7278 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56097d4f72f8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56097d504d18 <col:54, line:127:5>
|   |-ParenExpr 0x56097d504bc8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56097d504b98 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56097d504888 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56097d504860 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56097d504848 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56097d504830 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56097d504800 <col:31> 'Router *' lvalue ->_router 0x56097d5026e0
|   |   |         `-CXXThisExpr 0x56097d5047f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56097d5048e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d5048c8 <col:48> 'int' 0
|   |   `-CallExpr 0x56097d504af8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56097d504ae0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d504ac0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d504b38 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d504958 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56097d504b50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d504978 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56097d504b68 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d5049b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56097d504b80 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d504aa8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d504a90 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d504a48 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56097d504c60 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56097d504bf8 <col:9> 'Router *' lvalue ->_router 0x56097d5026e0
|   | | `-CXXThisExpr 0x56097d504be8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56097d504c48 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56097d504c28 <col:19> 'Router *' lvalue ParmVar 0x56097d4f7278 'r' 'Router *'
|   `-BinaryOperator 0x56097d504cf8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56097d504c90 <col:9> 'int' lvalue ->_eindex 0x56097d502748
|     | `-CXXThisExpr 0x56097d504c80 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56097d504ce0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56097d504cc0 <col:19> 'int' lvalue ParmVar 0x56097d4f72f8 'eindex' 'int'
|-CXXMethodDecl 0x56097d4f7550 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56097d4f7488 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56097d4f7620 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56097d4f76e8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56097d4f7788 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56097d4f79d8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56097d4f7850 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56097d4f78d0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56097d4f7a88 <col:20>
| `-OptimizeNoneAttr 0x56097d4f7ae0 <col:30>
|-CXXMethodDecl 0x56097d4f7be8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56097d4f7b20 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56097d4f7c90 <col:20>
| `-OptimizeNoneAttr 0x56097d4f7ce8 <col:30>
|-CXXMethodDecl 0x56097d4f7db8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56097d4f7d28 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56097d4f7e60 <col:20>
| `-OptimizeNoneAttr 0x56097d4f7eb8 <col:30>
|-CXXMethodDecl 0x56097d4f8048 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56097d4f7ef0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56097d4f7f70 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56097d4f81d8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56097d4f8110 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56097d4f8328 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56097d4f8298 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56097d4f8478 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56097d4f83e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56097d4f85c8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56097d4f8538 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56097d4f8888 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56097d4f8680 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56097d4f8700 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56097d4f87a8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56097d4f8960 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56097d4f8a20 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56097d4f8cf0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56097d4f8ba0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56097d4f8c18 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4f8e18 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56097d4f8ff0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56097d4f8ed0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56097d4f8f50 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56097d4f91d8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56097d4f90b8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56097d4f9138 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56097d4f9548 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56097d4f9298 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56097d4f9310 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56097d4f9390 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56097d504300 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d5042e0 <col:106> 'int' 0
| `-ParmVarDecl 0x56097d4f9408 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d504338 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d504318 <col:126> 'int' 0
|-CXXMethodDecl 0x56097d4f98e8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56097d4f9618 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56097d4f96b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56097d4f9730 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56097d4f97a8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d504370 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d504350 <col:114> 'int' 0
|-CXXMethodDecl 0x56097d4f9c78 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56097d4f99c0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56097d4f9a38 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56097d4f9ab8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56097d504388 <col:96> 'int' 0
| `-ParmVarDecl 0x56097d4f9b30 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d5043c8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d5043a8 <col:116> 'int' 0
|-CXXMethodDecl 0x56097d4f9ff8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56097d4f9d48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56097d4f9dc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4f9e40 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56097d504400 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d5043e0 <col:109> 'int' 0
| `-ParmVarDecl 0x56097d4f9eb8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d504438 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d504418 <col:129> 'int' 0
|-CXXMethodDecl 0x56097d4fa378 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56097d4fa0c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56097d4fa140 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4fa1c0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56097d4fa238 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d504470 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d504450 <col:117> 'int' 0
|-CXXMethodDecl 0x56097d4fa708 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56097d4fa450 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fa4c8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4fa548 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56097d504488 <col:99> 'int' 0
| `-ParmVarDecl 0x56097d4fa5c0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56097d5044c8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56097d5044a8 <col:119> 'int' 0
|-CXXMethodDecl 0x56097d4fab28 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56097d4fa7d8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56097d4fa858 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56097d4fa8d0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4fa950 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56097d504500 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d5044e0 <col:108> 'int' 0
| `-ParmVarDecl 0x56097d4fa9d0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56097d504538 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56097d504518 <col:141> 'int' 0
|-CXXMethodDecl 0x56097d4faf48 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56097d4fac00 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56097d4fac80 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56097d4facf8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4fad78 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56097d4fadf8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56097d504550 <col:121> 'int' 0
|-CXXMethodDecl 0x56097d4fb378 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56097d4fb028 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56097d4fb0a8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56097d4fb120 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d4fb1a0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56097d504570 <col:98> 'int' 0
| `-ParmVarDecl 0x56097d4fb220 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56097d504590 <col:123> 'int' 0
|-CXXMethodDecl 0x56097d4fb640 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56097d4fb450 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56097d4fb4d0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56097d4fb550 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56097d5045b0 <col:80> 'int' 0
|-EnumDecl 0x56097d4fb6f8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56097d4fb800 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56097d4fba90 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4fb7e0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56097d4fb7c0 <col:42> 'int' 1
| |-EnumConstantDecl 0x56097d4fb890 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56097d4fbaa8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4fb870 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56097d4fb850 <col:40> 'int' 2
| |-EnumConstantDecl 0x56097d4fb920 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56097d4fbac0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4fb900 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56097d4fb8e0 <col:44> 'int' 4
| |-EnumConstantDecl 0x56097d4fb9b0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56097d4fbad8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4fb990 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56097d4fb970 <col:36> 'int' 7
| `-EnumConstantDecl 0x56097d4fba40 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56097d4fbaf0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4fba20 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56097d4fba00 <col:34> 'int' 6
|-CXXMethodDecl 0x56097d4fbda8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56097d4fbb18 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56097d4fbbb8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56097d4fbc38 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56097d4fbcb0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56097d504668 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56097d504650 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56097d504638 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56097d504618 <col:98, col:105> 'String' (CXXTemporary 0x56097d504618)
|           `-CXXTemporaryObjectExpr 0x56097d5045e0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56097d4fc048 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56097d4fbe78 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56097d4fbef0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56097d4fbf68 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56097d504718 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56097d504700 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56097d5046e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56097d5046c8 <col:94, col:101> 'String' (CXXTemporary 0x56097d5046c8)
| |         `-CXXTemporaryObjectExpr 0x56097d504690 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56097d504f00 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56097d504e78 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56097d504e48 <col:9> '<bound member function type>' ->add_task_handlers 0x56097d4fbda8
|     | `-CXXThisExpr 0x56097d504e38 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56097d504eb8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56097d504db8 <col:27> 'Task *' lvalue ParmVar 0x56097d4fbe78 'task' 'Task *'
|     |-ImplicitCastExpr 0x56097d504ed0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56097d504dd8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56097d4fbef0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56097d504ee8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56097d504df8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56097d4fba40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56097d504e18 <col:62> 'const String' lvalue ParmVar 0x56097d4fbf68 'prefix' 'const String &'
|-CXXMethodDecl 0x56097d4fc258 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56097d4fc110 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56097d4fc188 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56097d5047c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56097d5047b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56097d504798 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56097d504778 <col:70, col:77> 'String' (CXXTemporary 0x56097d504778)
| |         `-CXXTemporaryObjectExpr 0x56097d504740 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56097d5050d8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56097d505050 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56097d505020 <col:9> '<bound member function type>' ->add_task_handlers 0x56097d4fbda8
|     | `-CXXThisExpr 0x56097d505010 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56097d505090 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56097d504f90 <col:27> 'Task *' lvalue ParmVar 0x56097d4fc110 'task' 'Task *'
|     |-ImplicitCastExpr 0x56097d5050a8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56097d504fb0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56097d5050c0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56097d504fd0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56097d4fba40 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56097d504ff0 <col:57> 'const String' lvalue ParmVar 0x56097d4fc188 'prefix' 'const String &'
|-CXXMethodDecl 0x56097d4fc538 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56097d4fc320 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fc3a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fc418 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56097d4fc7e8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56097d4fc608 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fc688 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fc708 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56097d4fcad8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56097d4fc8b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fc938 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fc9b0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56097d4fcd88 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56097d4fcba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fcc28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fcca8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56097d4fd038 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56097d4fce58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fced8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fcf58 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56097d4fd2e8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56097d4fd108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fd188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fd200 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56097d4fd598 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56097d4fd3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fd438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fd4b8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56097d4fd8a8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56097d4fd6c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fd740 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fd7c0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56097d4fdb88 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56097d4fd978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fd9f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fdaa0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56097d4fde68 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56097d4fdc58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fdcd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fdd80 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56097d4fe0d0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56097d4fdf38 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56097d4fdfb8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56097d4fe030 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56097d4fe378 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56097d4fe1a0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56097d4fe220 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56097d4fe298 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56097d4fe628 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56097d4fe448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fe4c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fe548 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56097d4fe8d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56097d4fe6f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fe778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fe7f0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56097d4feb88 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56097d4fe9a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fea28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4feaa0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56097d4fee58 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56097d4fec58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fecd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56097d4fed78 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56097d4ff188 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56097d4fef28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56097d4fefa8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56097d4ff020 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56097d4ff098 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56097d5047e0 <col:93> 'bool' false
|-CXXMethodDecl 0x56097d4ff370 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56097d4ff258 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56097d4ff2d8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56097d4ff548 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56097d4ff430 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56097d4ff4b0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56097d4ff828 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56097d4ff608 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56097d4ff680 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56097d4ff700 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56097d4ff778 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4ffb18 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56097d4ff8f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56097d4ff970 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56097d4ff9f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56097d4ffa68 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56097d4ffd50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56097d4ffbf0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56097d4ffc70 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56097d4fff38 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56097d4ffe18 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56097d4ffe98 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56097d4fffe8 prev 0x56097d4f7788 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56097d5000e0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56097d500170 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56097d5001e8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56097d5002a8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56097d500370 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56097d5004e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56097d500420 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56097d500590 <col:24>
| | `-OptimizeNoneAttr 0x56097d5005e8 <col:34>
| |-CXXMethodDecl 0x56097d500630 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56097d5008e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56097d5006e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56097d500758 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56097d5007d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56097d5009a0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56097d5009d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56097d500a40 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56097d500ac8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56097d500de8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56097d500b80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56097d500bf8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56097d500c70 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56097d500cf0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56097d500f00 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56097d508878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56097d508878
| | `-ParmVarDecl 0x56097d508988 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56097d508a28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56097d508a28
| | `-ParmVarDecl 0x56097d508b38 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56097d5e4688 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56097d500f78 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56097d501018 <col:38> "" ""
|-CXXMethodDecl 0x56097d5010a8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56097d501148 <col:44> "" ""
|-AccessSpecDecl 0x56097d5011b8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56097d5011e0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56097d5012e0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56097d501330 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d5012c0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56097d5012a0 <col:27> 'int' 4
|-FieldDecl 0x56097d5013e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56097d501598 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56097d501650 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56097d5026e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56097d502748 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56097d502898 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56097d5027d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56097d502a48 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56097d502958 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56097d502c28 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56097d502b08 <col:20> col:23 'int'
| `-ParmVarDecl 0x56097d502b88 <col:25> col:28 'int'
|-CXXMethodDecl 0x56097d502ed0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56097d502cf0 <col:23> col:26 'int'
| |-ParmVarDecl 0x56097d502d70 <col:28> col:31 'int'
| `-ParmVarDecl 0x56097d502de8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56097d502f88 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56097d503050 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56097d5030a0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56097d5030f0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56097d5032d0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56097d503180 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56097d5031f8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d503578 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56097d503398 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56097d503418 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56097d503490 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56097d503798 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56097d503648 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56097d5036c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56097d503ad0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56097d503858 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56097d5038d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56097d503950 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56097d5039d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x56097d503cb8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56097d503ba0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56097d503c20 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56097d503e08 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56097d503d78 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56097d504188 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56097d503ec8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56097d503f48 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56097d503fc0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56097d504040 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56097d5042a0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class EtherEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ether _ethh
       108 |     uint8_t [6] ether_dhost
       114 |     uint8_t [6] ether_shost
       120 |     uint16_t ether_type
           | [sizeof=128, dsize=122, align=8,
           |  nvsize=122, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d50b9e8 prev 0x56097d4b9a50 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x56097d50bda8 <line:21:18>
|-CXXRecordDecl 0x56097d50bae0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x56097d50bc48 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x56097d50bcf8 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x56097d50bd58 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x56097d5e41e0 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56097d5e4618 <col:8>
|-CXXConstructorDecl 0x56097d5e42e8 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x56097d5e42e8
| `-ParmVarDecl 0x56097d5e43f8 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x56097d5e4498 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x56097d5e4498
  `-ParmVarDecl 0x56097d5e45a8 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d50e000 <../elements/ethernet/etherencap.hh:49:1, line:69:1> line:49:7 class EtherEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56097d50e158 <col:1, col:7> col:7 implicit referenced class EtherEncap
|-AccessSpecDecl 0x56097d50e1e8 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x56097d50e270 <line:51:5, col:16> col:5 EtherEncap 'void ()'
|-CXXDestructorDecl 0x56097d50e360 <line:52:5, col:17> col:5 ~EtherEncap 'void ()' noexcept-unevaluated 0x56097d50e360
| `-Overrides: [ 0x56097d4f32d8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x56097d50e490 <line:54:5, col:59> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56097d4f4738 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56097d50f308 <col:36, col:59>
|   `-ReturnStmt 0x56097d50f2f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x56097d50f2e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56097d50f2b8 <col:45> 'const char [11]' lvalue "EtherEncap"
|-CXXMethodDecl 0x56097d50e558 <line:55:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x56097d4f4800 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56097d50f368 <col:36, col:56>
|   `-ReturnStmt 0x56097d50f358 <col:38, col:45>
|     `-ImplicitCastExpr 0x56097d50f340 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56097d50f320 <col:45> 'const char []' lvalue Var 0x56097d4f4ab0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56097d50e830 <line:57:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56097d4f5fd0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56097d50e6e0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x56097d50e758 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x56097d50e900 <line:58:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x56097d4f8a20 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x56097d50f3a0 <col:39, col:54>
|   `-ReturnStmt 0x56097d50f390 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x56097d50f380 <col:48> 'bool' true
|-CXXMethodDecl 0x56097d50e9c0 <line:59:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x56097d4f60a0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56097d50eb00 <line:61:5, col:30> col:13 smaction 'Packet *(Packet *)'
| `-ParmVarDecl 0x56097d50ea70 <col:22, col:29> col:30 'Packet *'
|-CXXMethodDecl 0x56097d50ecd0 <line:62:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x56097d4f35a8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x56097d50ebc0 <col:15> col:18 'int'
| `-ParmVarDecl 0x56097d50ec38 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x56097d50ee28 <line:63:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x56097d4f3738 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x56097d50ed98 <col:18> col:21 'int'
|-AccessSpecDecl 0x56097d50eed0 <line:65:3, col:10> col:3 private
|-FieldDecl 0x56097d50ef08 <line:67:5, col:17> col:17 _ethh 'click_ether'
|-CXXConstructorDecl 0x56097d50ef88 <line:49:7> col:7 implicit EtherEncap 'void (const EtherEncap &)' inline default_delete noexcept-unevaluated 0x56097d50ef88
| `-ParmVarDecl 0x56097d50f098 <col:7> col:7 'const EtherEncap &'
`-CXXMethodDecl 0x56097d50f138 <col:7> col:7 implicit operator= 'EtherEncap &(const EtherEncap &)' inline default_delete noexcept-unevaluated 0x56097d50f138
  `-ParmVarDecl 0x56097d50f248 <col:7> col:7 'const EtherEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherEncap = type { %class.Element.base, %struct.click_ether, [6 x i8] }
  NonVirtualBaseLLVMType:%class.EtherEncap.base = type { %class.Element.base, %struct.click_ether }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d2c6c80 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56097d2c6d98 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56097d2c6e38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56097d2c6e98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56097d2c6ef8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56097d2c6fa8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d2c72b0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d2c73c8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56097d2c7470 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56097d2c74d8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56097d2c7568 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56097d2cd600 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56097d2cda38 <col:12>
|-CXXConstructorDecl 0x56097d2cd708 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d2cd818 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56097d2c7470 'data' 'const char *'
| | `-ImplicitCastExpr 0x56097d2cffc0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56097d2cff90 <col:12> 'const char *const' lvalue .data 0x56097d2c7470
| |     `-DeclRefExpr 0x56097d2cff70 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56097d2c74d8 'length' 'int'
| | `-ImplicitCastExpr 0x56097d2d0050 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56097d2d0020 <col:12> 'const int' lvalue .length 0x56097d2c74d8
| |     `-DeclRefExpr 0x56097d2d0000 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56097d2c7568 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56097d2d00e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56097d2d00b0 <col:12> 'String::memo_t *const' lvalue .memo 0x56097d2c7568
| |     `-DeclRefExpr 0x56097d2d0090 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| `-CompoundStmt 0x56097d2d0138 <col:12>
|-CXXConstructorDecl 0x56097d2cd8b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56097d2cd8b8
| `-ParmVarDecl 0x56097d2cd9c8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56097d2d2f20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56097d2de938 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d2dea48 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56097d2def60 <col:12>
|   |-BinaryOperator 0x56097d2ded78 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56097d2ded30 <col:12> 'const char *' lvalue ->data 0x56097d2c7470
|   | | `-CXXThisExpr 0x56097d2ded20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56097d2ded60 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56097d2decf0 <col:12> 'const char *const' lvalue .data 0x56097d2c7470
|   |     `-DeclRefExpr 0x56097d2decd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56097d2dee40 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56097d2dedf8 <col:12> 'int' lvalue ->length 0x56097d2c74d8
|   | | `-CXXThisExpr 0x56097d2dede8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56097d2dee28 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56097d2dedb8 <col:12> 'const int' lvalue .length 0x56097d2c74d8
|   |     `-DeclRefExpr 0x56097d2ded98 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56097d2def08 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56097d2deec0 <col:12> 'String::memo_t *' lvalue ->memo 0x56097d2c7568
|   | | `-CXXThisExpr 0x56097d2deeb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56097d2deef0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56097d2dee80 <col:12> 'String::memo_t *const' lvalue .memo 0x56097d2c7568
|   |     `-DeclRefExpr 0x56097d2dee60 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56097d2def50 <col:12>
|     `-UnaryOperator 0x56097d2def38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d2def28 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56097d2deab8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56097d2deab8
  `-ParmVarDecl 0x56097d2debc8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d2be1f0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56097d2be308 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56097d2be398 <col:16, col:22> col:16 public
|-TypedefDecl 0x56097d2be3d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56097cf91dc0 'const char *'
|   `-QualType 0x56097cf91311 'const char' const
|     `-BuiltinType 0x56097cf91310 'char'
|-TypedefDecl 0x56097d2be460 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56097d2be430 'String::const_iterator' sugar
|   |-Typedef 0x56097d2be3d8 'const_iterator'
|   `-PointerType 0x56097cf91dc0 'const char *'
|     `-QualType 0x56097cf91311 'const char' const
|       `-BuiltinType 0x56097cf91310 'char'
|-TypedefDecl 0x56097d2be5d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56097d2be540 'int (String::*)() const'
|   |-RecordType 0x56097d2be280 'String'
|   | `-CXXRecord 0x56097d2be1f0 'String'
|   `-ParenType 0x56097d2be4e0 'int () const' sugar
|     `-FunctionProtoType 0x56097d292070 'int () const' const cdecl
|       `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d2be638 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56097d0e6c70 'int64_t' sugar
|   |-Typedef 0x56097cffa2d0 'int64_t'
|   `-TypedefType 0x56097cfd34d0 '__int64_t' sugar
|     |-Typedef 0x56097cfd30a8 '__int64_t'
|     `-BuiltinType 0x56097cf91390 'long'
|-TypedefDecl 0x56097d2be6a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56097d0e6b90 'uint64_t' sugar
|   |-Typedef 0x56097cffa470 'uint64_t'
|   `-TypedefType 0x56097cfd3560 '__uint64_t' sugar
|     |-Typedef 0x56097cfd3118 '__uint64_t'
|     `-BuiltinType 0x56097cf91430 'unsigned long'
|-TypedefDecl 0x56097d2be730 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56097d2be700 'String::intmax_t' sugar
|   |-Typedef 0x56097d2be638 'intmax_t'
|   `-TypedefType 0x56097d0e6c70 'int64_t' sugar
|     |-Typedef 0x56097cffa2d0 'int64_t'
|     `-TypedefType 0x56097cfd34d0 '__int64_t' sugar
|       |-Typedef 0x56097cfd30a8 '__int64_t'
|       `-BuiltinType 0x56097cf91390 'long'
|-TypedefDecl 0x56097d2be7c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56097d2be790 'String::uintmax_t' sugar
|   |-Typedef 0x56097d2be6a0 'uintmax_t'
|   `-TypedefType 0x56097d0e6b90 'uint64_t' sugar
|     |-Typedef 0x56097cffa470 'uint64_t'
|     `-TypedefType 0x56097cfd3560 '__uint64_t' sugar
|       |-Typedef 0x56097cfd3118 '__uint64_t'
|       `-BuiltinType 0x56097cf91430 'unsigned long'
|-CXXConstructorDecl 0x56097d2be880 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56097d2bea28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56097d2be968 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56097d2bebd8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56097d2beb18 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56097d2bed30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56097d2beca0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56097d2bef48 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56097d2bedf8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56097d2bee78 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56097d2bf168 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56097d2bf018 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56097d2bf098 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56097d2bf388 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56097d2bf238 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56097d2bf2b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56097d2bf5a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56097d2bf458 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56097d2bf4d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56097d2bf738 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56097d2bf670 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56097d2bf8b8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56097d2bf7f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56097d2bfa48 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56097d2bf980 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56097d2bfba0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56097d2bfb10 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56097d2bfcf8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56097d2bfc68 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56097d2bfe50 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56097d2bfdc0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56097d2bffd8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56097d2bff18 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56097d2c0168 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56097d2c00a0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56097d2c02f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56097d2c0230 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56097d2c0488 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56097d2c03c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56097d2c0580 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56097d2c06a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56097d2c0828 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56097d2c0760 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56097d2c0978 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56097d2c08e8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56097d2c0a30 <col:63> "" ""
|-CXXMethodDecl 0x56097d2c0b78 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56097d2c0ab8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56097d2c0d88 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56097d2c0c38 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56097d2c0cb8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56097d2c0fa8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56097d2c0e50 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56097d2c0ed0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56097d2c1288 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56097d2c1068 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56097d2c10e8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56097d2cd0d0 <col:55> 'int' 10
| `-ParmVarDecl 0x56097d2c1160 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56097d2cd0f0 <col:76> 'bool' true
|-CXXMethodDecl 0x56097d2c1568 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56097d2c1350 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56097d2c13d0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56097d2cd100 <col:56> 'int' 10
| `-ParmVarDecl 0x56097d2c1448 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56097d2cd120 <col:77> 'bool' true
|-CXXMethodDecl 0x56097d2c1670 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56097d2c1738 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56097d2c1800 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56097d2c18a0 <col:20>
| `-OptimizeNoneAttr 0x56097d2c18f8 <col:30>
|-CXXConversionDecl 0x56097d2c19e8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56097d2c1ab8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56097d2c1b78 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56097d2c1c68 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56097d2c1d28 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56097d2c1ea8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56097d2c1de0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56097d2c1ff8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56097d2c1f68 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56097d2c20e8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56097d2c21a8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56097d2c23f8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56097d2c2260 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56097d2c22e0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56097d2c2658 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56097d2c24c0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56097d2c2540 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56097d2c2728 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d2c2938 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56097d2c27e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56097d2c2860 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56097d2c2b58 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56097d2c2a00 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56097d2c2a80 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56097d2c2ce8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56097d2c2c20 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56097d2c2dd8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56097d2c2f48 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56097d2c2e88 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56097d2c3158 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56097d2c3008 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56097d2c3088 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56097d2c3370 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56097d2c3218 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56097d2c3290 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56097d2c3500 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56097d2c3430 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56097d2c3720 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56097d2c35c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56097d2c3640 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56097d2c3870 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56097d2c37e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56097d2c3a48 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56097d2c3930 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56097d2c39b0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56097d2c3b98 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56097d2c3b08 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56097d2c3db0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56097d2c3c50 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56097d2c3cd0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56097d2cd130 <col:39> 'int' 0
|-CXXMethodDecl 0x56097d2c3fd0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56097d2c3e70 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56097d2c3ef0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56097d2cd150 <col:48> 'int' 0
|-CXXMethodDecl 0x56097d2c41b0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56097d2c4090 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56097d2c4110 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56097d2cd170 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56097d2c4280 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56097d2c4340 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56097d2c4400 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56097d2c44c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56097d2c4580 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56097d2c4728 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56097d2c4630 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56097d2c48a8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56097d2c47e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56097d2c4a80 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56097d2c4968 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56097d2c4bf8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56097d2c4b38 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56097d2c4d40 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56097d2c4cb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56097d2c4e90 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56097d2c4e00 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56097d2c5068 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56097d2c4f50 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56097d2c4fd0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56097d2c5248 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56097d2c5130 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56097d2c51b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56097d2c5398 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56097d2c5308 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56097d2c55a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56097d2c5458 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56097d2c54d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56097d2c5708 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56097d2c5670 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56097d2c5860 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56097d2c57c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56097d2c5908 <col:57> "" ""
|-CXXMethodDecl 0x56097d2c5a18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56097d2c5988 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56097d2c5b68 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56097d2c5ad8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56097d2c5ce8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56097d2c5c20 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56097d2c5db0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56097d2c5e70 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56097d2c5f30 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56097d2c5fd0 <col:49> "" ""
|-CXXMethodDecl 0x56097d2c6060 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56097d2c6120 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56097d2c6210 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56097d2c62d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56097d2c6398 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56097d2c6458 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56097d2c6550 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56097d2c6618 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56097d2c66e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56097d2c68b8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56097d2c6798 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56097d2c6818 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56097d2c6ae0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56097d2c6980 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56097d2c6a00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56097d2c6bf0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56097d2c6c58 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56097d2c6c80 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56097d2c6d98 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56097d2c6e38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56097d2c6e98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56097d2c6ef8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56097d2c6fa8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56097d2c7010 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56097d2c7248 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56097d2c7298 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d2c7228 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56097d2c7138 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56097d2c70e0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56097d2c7120 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56097d2c7100 <col:32> 'int' 8
|-CXXRecordDecl 0x56097d2c72b0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56097d2c73c8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56097d2c7470 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56097d2c74d8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56097d2c7568 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56097d2cd600 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56097d2cda38 <col:12>
| |-CXXConstructorDecl 0x56097d2cd708 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56097d2cd818 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56097d2c7470 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56097d2cffc0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56097d2cff90 <col:12> 'const char *const' lvalue .data 0x56097d2c7470
| | |     `-DeclRefExpr 0x56097d2cff70 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56097d2c74d8 'length' 'int'
| | | `-ImplicitCastExpr 0x56097d2d0050 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56097d2d0020 <col:12> 'const int' lvalue .length 0x56097d2c74d8
| | |     `-DeclRefExpr 0x56097d2d0000 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56097d2c7568 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56097d2d00e0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56097d2d00b0 <col:12> 'String::memo_t *const' lvalue .memo 0x56097d2c7568
| | |     `-DeclRefExpr 0x56097d2d0090 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2cd818 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56097d2d0138 <col:12>
| |-CXXConstructorDecl 0x56097d2cd8b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56097d2cd8b8
| | `-ParmVarDecl 0x56097d2cd9c8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56097d2d2f20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56097d2de938 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56097d2dea48 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56097d2def60 <col:12>
| |   |-BinaryOperator 0x56097d2ded78 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56097d2ded30 <col:12> 'const char *' lvalue ->data 0x56097d2c7470
| |   | | `-CXXThisExpr 0x56097d2ded20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56097d2ded60 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56097d2decf0 <col:12> 'const char *const' lvalue .data 0x56097d2c7470
| |   |     `-DeclRefExpr 0x56097d2decd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56097d2dee40 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56097d2dedf8 <col:12> 'int' lvalue ->length 0x56097d2c74d8
| |   | | `-CXXThisExpr 0x56097d2dede8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56097d2dee28 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56097d2dedb8 <col:12> 'const int' lvalue .length 0x56097d2c74d8
| |   |     `-DeclRefExpr 0x56097d2ded98 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56097d2def08 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56097d2deec0 <col:12> 'String::memo_t *' lvalue ->memo 0x56097d2c7568
| |   | | `-CXXThisExpr 0x56097d2deeb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56097d2deef0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56097d2dee80 <col:12> 'String::memo_t *const' lvalue .memo 0x56097d2c7568
| |   |     `-DeclRefExpr 0x56097d2dee60 <col:12> 'const String::rep_t' lvalue ParmVar 0x56097d2dea48 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56097d2def50 <col:12>
| |     `-UnaryOperator 0x56097d2def38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56097d2def28 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56097d2deab8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56097d2deab8
|   `-ParmVarDecl 0x56097d2debc8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56097d2c75e0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56097d2c7828 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56097d2c7648 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56097d2c76c8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56097d2c7740 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56097d2cd5c0 <col:79, line:261:5>
|   |-BinaryOperator 0x56097d2cd238 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56097d2cd1d0 <col:2, col:5> 'const char *' lvalue .data 0x56097d2c7470
|   | | `-MemberExpr 0x56097d2cd1a0 <col:2> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|   | |   `-CXXThisExpr 0x56097d2cd190 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56097d2cd220 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56097d2cd200 <col:12> 'const char *' lvalue ParmVar 0x56097d2c7648 'data' 'const char *'
|   |-BinaryOperator 0x56097d2cd300 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56097d2cd298 <col:2, col:5> 'int' lvalue .length 0x56097d2c74d8
|   | | `-MemberExpr 0x56097d2cd268 <col:2> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|   | |   `-CXXThisExpr 0x56097d2cd258 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56097d2cd2e8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56097d2cd2c8 <col:14> 'int' lvalue ParmVar 0x56097d2c76c8 'length' 'int'
|   `-IfStmt 0x56097d2cd5a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56097d2cd420 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56097d2cd408 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56097d2cd3e8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56097d2cd3c8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56097d2cd360 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|     |       | `-MemberExpr 0x56097d2cd330 <col:7> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|     |       |   `-CXXThisExpr 0x56097d2cd320 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56097d2cd3b0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56097d2cd390 <col:17> 'String::memo_t *' lvalue ParmVar 0x56097d2c7740 'memo' 'String::memo_t *'
|     `-CallExpr 0x56097d2cd580 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56097d2cd568 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56097d2cd470 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56097d2b6258 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56097d2cd4d8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56097d2c6e38
|         `-ImplicitCastExpr 0x56097d2cd4c0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56097d2cd4a0 <col:27> 'String::memo_t *' lvalue ParmVar 0x56097d2c7740 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56097d2c7ad8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56097d2c78f8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56097d2c7978 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56097d2c79f0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56097d2c75e0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56097d2cda48 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56097d2cdbd8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56097d2cdb40 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56097d2cdab0 <col:2> '<bound member function type>' ->assign_memo 0x56097d2c7828
|     | `-ImplicitCastExpr 0x56097d2cdb78 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56097d2cdaa0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56097d2cdb90 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56097d2cdae0 <col:14> 'const char *' lvalue ParmVar 0x56097d2c78f8 'data' 'const char *'
|     |-ImplicitCastExpr 0x56097d2cdba8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56097d2cdb00 <col:20> 'int' lvalue ParmVar 0x56097d2c7978 'length' 'int'
|     `-ImplicitCastExpr 0x56097d2cdbc0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56097d2cdb20 <col:28> 'String::memo_t *' lvalue ParmVar 0x56097d2c79f0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56097d2c7c68 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56097d2c7ba8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56097d2cde30 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56097d2cddb0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56097d2cdc00 <col:2> '<bound member function type>' ->assign_memo 0x56097d2c7828
|     | `-CXXThisExpr 0x56097d2cdbf0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56097d2cdde8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56097d2cdc80 <col:14, col:19> 'const char *' lvalue .data 0x56097d2c7470
|     |   `-MemberExpr 0x56097d2cdc50 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56097d2c75e0
|     |     `-DeclRefExpr 0x56097d2cdc30 <col:14> 'const String' lvalue ParmVar 0x56097d2c7ba8 'x' 'const String &'
|     |-ImplicitCastExpr 0x56097d2cde00 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56097d2cdd00 <col:25, col:30> 'int' lvalue .length 0x56097d2c74d8
|     |   `-MemberExpr 0x56097d2cdcd0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56097d2c75e0
|     |     `-DeclRefExpr 0x56097d2cdcb0 <col:25> 'const String' lvalue ParmVar 0x56097d2c7ba8 'x' 'const String &'
|     `-ImplicitCastExpr 0x56097d2cde18 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56097d2cdd80 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|         `-MemberExpr 0x56097d2cdd50 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56097d2c75e0
|           `-DeclRefExpr 0x56097d2cdd30 <col:38> 'const String' lvalue ParmVar 0x56097d2c7ba8 'x' 'const String &'
|-CXXMethodDecl 0x56097d2c7d30 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56097d2ce7f0 <col:31, line:278:5>
|   `-IfStmt 0x56097d2ce7d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56097d2cded0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56097d2cdeb8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56097d2cde88 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|     |     `-MemberExpr 0x56097d2cde58 <col:6> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|     |       `-CXXThisExpr 0x56097d2cde48 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56097d2ce7b0 <col:15, line:277:2>
|       |-ParenExpr 0x56097d2ce380 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56097d2ce350 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56097d2cdfe0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56097d2cdfc8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56097d2cdfb0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56097d2cdf70 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56097d2c6e38
|       |   |       `-ImplicitCastExpr 0x56097d2cdf58 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56097d2cdf28 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|       |   |           `-MemberExpr 0x56097d2cdef8 <col:27> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|       |   |             `-CXXThisExpr 0x56097d2cdee8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56097d2ce040 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56097d2ce020 <col:54> 'int' 0
|       |   `-CallExpr 0x56097d2ce2b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56097d2ce298 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56097d2ce218 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56097d2ce2f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56097d2ce128 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56097d2ce308 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56097d2ce158 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56097d2ce320 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56097d2ce190 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56097d2ce338 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56097d2ce200 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56097d2ce1e8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56097d2ce1b0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56097d2ce6d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x56097d2ce590 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56097d2ce578 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56097d2ce4f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56097d2b76a0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56097d2ce4c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56097d2c6e38
|       | |   `-ImplicitCastExpr 0x56097d2ce4a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56097d2ce478 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|       | |       `-MemberExpr 0x56097d2ce448 <col:40> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|       | |         `-CXXThisExpr 0x56097d2ce438 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56097d2ce690 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56097d2ce678 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56097d2ce5b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56097d2cc510 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56097d2ce6b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56097d2ce618 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|       |       `-MemberExpr 0x56097d2ce5e8 <col:15> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|       |         `-CXXThisExpr 0x56097d2ce5d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56097d2ce790 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56097d2ce728 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56097d2c7568
|         | `-MemberExpr 0x56097d2ce6f8 <col:6> 'String::rep_t' lvalue ->_r 0x56097d2c75e0
|         |   `-CXXThisExpr 0x56097d2ce6e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56097d2ce778 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56097d2ce758 <col:16> 'int' 0
|-CXXMethodDecl 0x56097d2c7fc8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56097d2c7de8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56097d2c7e68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56097d2c7ee0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56097d2c80a0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56097d2c82f0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56097d2c8158 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56097d2c81d8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56097d2c8250 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56097d2c84d8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56097d2c83c0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56097d2c8440 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56097d2c85d8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56097d2ce8c8 <col:41, line:286:5>
|   `-ReturnStmt 0x56097d2ce8b8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56097d2ce888 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56097d2ce850 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56097d2ce838 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56097d2ce818 <col:46> 'int' 1
|-CXXMethodDecl 0x56097d2c8878 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56097d2c8690 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56097d2c8710 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56097d2c8790 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56097d2cc510 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56097d2c8940 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56097d2cc5e0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56097d2cc7b0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56097d2cc698 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56097d2cc718 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56097d2cc870 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56097d2cc938 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56097d2cca38 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56097d2ccab0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56097d2ccb28 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56097d2ccb90 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56097d2ccc90 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56097d2ccce0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d2ccc70 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56097d2ccc50 <col:22> 'int' 14
|-CXXMethodDecl 0x56097d2ccef8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56097d2ccd10 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56097d2ccd90 <col:38> col:41 'int'
| `-ParmVarDecl 0x56097d2cce10 <col:43> col:46 'int'
|-FriendDecl 0x56097d2cd000 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56097d2cd090 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56097d391180 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56097d391358 prev 0x56097d391180 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56097d3913e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56097d391410 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d5505b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56097d550560 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56097d550540 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56097d391628 'type'
|     `-SubstTemplateTypeParmType 0x56097d3915f0 'String' sugar
|       |-TemplateTypeParmType 0x56097d281a90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d281a40 'T'
|       `-RecordType 0x56097d2be280 'String'
|         `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d550668 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56097d550630 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56097d550610 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56097d5505b0 'type'
|     `-ElaboratedType 0x56097d550560 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56097d550540 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56097d391628 'type'
|         `-SubstTemplateTypeParmType 0x56097d3915f0 'String' sugar
|           |-TemplateTypeParmType 0x56097d281a90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56097d281a40 'T'
|           `-RecordType 0x56097d2be280 'String'
|             `-CXXRecord 0x56097d2be1f0 'String'
|-CXXMethodDecl 0x56097d5507e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56097d5506f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56097d5508d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56097d5509b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56097d5509b8
|-CXXMethodDecl 0x56097d550c88 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56097d550b90 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56097d550ec8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56097d550d40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d550db8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d551098 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56097d550f88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d551000 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d5511f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56097d5512c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56097d551518 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56097d551388 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56097d551400 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d551778 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56097d5515e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56097d551660 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d551938 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56097d551848 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d551af8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56097d551a00 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d551bb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56097d551c60 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56097d551e98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56097d551d10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d551d88 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56097d552138 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56097d552040 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56097d552200 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56097d552250 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56097d5522a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56097d4f5c40 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56097d38fbe8 prev 0x56097d4f5c40 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56097d3910f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56097d3910a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56097d391080 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56097d390f30 'type'
|     `-SubstTemplateTypeParmType 0x56097d390dc0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56097d257840 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56097d2577e8 'F'
|       `-RecordType 0x56097d390a20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56097d390940 'typed_array_memory'
|-FieldDecl 0x56097d5522f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56097d552340 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56097d552378 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|   |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56097d28ed58 'T'
|   `-RecordType 0x56097d2be280 'String'
|     `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d552408 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56097d5523d0 'String &'
|   `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-RecordType 0x56097d2be280 'String'
|       `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d552498 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56097d552460 'const String &'
|   `-QualType 0x56097d38fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-RecordType 0x56097d2be280 'String'
|         `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d552528 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56097d5524f0 'String *'
|   `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-RecordType 0x56097d2be280 'String'
|       `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d5525b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56097d552580 'const String *'
|   `-QualType 0x56097d38fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-RecordType 0x56097d2be280 'String'
|         `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d553210 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56097d5531c0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56097d5531a0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56097d5530d8 'type'
|     `-LValueReferenceType 0x56097d5530a0 'const String &'
|       `-QualType 0x56097d552e41 'const String' const
|         `-SubstTemplateTypeParmType 0x56097d552e40 'String' sugar
|           |-TemplateTypeParmType 0x56097d261790 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56097d261738 'T'
|           `-RecordType 0x56097d2be280 'String'
|             `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d553278 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56097d552460 'const String &'
|   `-QualType 0x56097d38fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-RecordType 0x56097d2be280 'String'
|         `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d5532d0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d553338 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56097d5524f0 'String *'
|   `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-RecordType 0x56097d2be280 'String'
|       `-CXXRecord 0x56097d2be1f0 'String'
|-TypedefDecl 0x56097d5533a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56097d552580 'const String *'
|   `-QualType 0x56097d38fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x56097d38fc80 'String' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-RecordType 0x56097d2be280 'String'
|         `-CXXRecord 0x56097d2be1f0 'String'
|-EnumDecl 0x56097d5533f8 <line:134:5> col:5
| `-EnumConstantDecl 0x56097d5534f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56097d5534d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56097d290438 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56097d290410 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56097d2903f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56097d553578 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56097d553808 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d553630 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d5536d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56097d553a98 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56097d553980 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56097d553d58 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56097d553c40 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56097d554070 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56097d553f50 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56097d554380 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56097d554260 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56097d554670 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d5544b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d554530 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56097d554798 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56097d554848 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d5548a0 <col:30> Inherited
|-CXXMethodDecl 0x56097d5548e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56097d554998 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d5549f0 <col:30> Inherited
|-CXXMethodDecl 0x56097d554ab8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56097d554b68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d554bc0 <col:30> Inherited
|-CXXMethodDecl 0x56097d554c08 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56097d554cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d554d10 <col:30> Inherited
|-CXXMethodDecl 0x56097d554d58 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56097d554e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d554e60 <col:30> Inherited
|-CXXMethodDecl 0x56097d554ea8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56097d554f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d554fb0 <col:30> Inherited
|-CXXMethodDecl 0x56097d554fd8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56097d555088 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56097d555138 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56097d5552f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d5551e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d555260 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56097d555448 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56097d5553b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d5555f8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56097d555500 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56097d5556b0 <col:20>
| `-OptimizeNoneAttr 0x56097d555708 <col:30>
|-CXXMethodDecl 0x56097d555828 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56097d555730 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56097d5558e0 <col:20>
| `-OptimizeNoneAttr 0x56097d555938 <col:30>
|-CXXMethodDecl 0x56097d5559f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56097d555960 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d555b38 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56097d555aa8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d555c68 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56097d555d68 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56097d555e38 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56097d555f08 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56097d556048 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56097d555fb8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d556190 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56097d556100 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d5562d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56097d556248 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56097d556390 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56097d556490 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56097d556400 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56097d556548 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56097d556608 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56097d556708 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56097d556888 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56097d5567c8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56097d557048 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56097d556940 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56097d556fa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56097d556ea8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56097d557160 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56097d5572b0 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56097d557220 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56097d557368 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56097d5575b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d557428 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56097d5574a0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56097d557748 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56097d557688 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56097d557958 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56097d557810 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56097d557888 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56097d557a18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56097d557c78 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56097d557b80 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56097d557d48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56097d557d48

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d5d37b8 prev 0x56097d564388 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56097d5d38b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56097d5d3940 <col:22, col:28> col:22 public
|-EnumDecl 0x56097d5d3968 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56097d5d3a88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3a68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56097d5d3a50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56097d5d3a30 <col:14> 'int' 999
| |-EnumConstantDecl 0x56097d5d3b30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3b10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56097d5d3af8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56097d5d3ad8 <col:14> 'int' 1
| |-EnumConstantDecl 0x56097d5d3bc0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3ba0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56097d5d3b80 <col:17> 'int' 0
| |-EnumConstantDecl 0x56097d5d3c50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3c30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56097d5d3c10 <col:13> 'int' 1
| |-EnumConstantDecl 0x56097d5d3ce0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3cc0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56097d5d3ca0 <col:16> 'int' 2
| |-EnumConstantDecl 0x56097d5d3d70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3d50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56097d5d3d30 <col:13> 'int' 3
| |-EnumConstantDecl 0x56097d5d3e00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3de0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56097d5d3dc0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56097d5d3e90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3e70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56097d5d3e50 <col:14> 'int' 5
| |-EnumConstantDecl 0x56097d5d3f20 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56097d5d3f00 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56097d5d3ee0 <col:12> 'int' 6
| `-EnumConstantDecl 0x56097d5d3fb0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56097d5d3f90 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56097d5d3f70 <col:13> 'int' 7
|-VarDecl 0x56097d5d4020 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56097d5d40a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56097d5d4130 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56097d5d41b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56097d5d4240 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56097d5d42c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56097d5d4350 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56097d5d43d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56097d5d4460 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56097d5d44e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56097d5d4570 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56097d5d4670 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56097d5d9968 '_nerrors' 'int'
| | `-IntegerLiteral 0x56097d5da0f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x56097d5da168 <col:16, line:129:5>
|-CXXDestructorDecl 0x56097d5d4760 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56097d5da178 <col:29, line:132:5>
|-CXXMethodDecl 0x56097d5d4918 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56097d5d4850 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d5d49e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56097d5d4ac8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56097d5da1d0 <col:44, line:161:5>
|   `-ReturnStmt 0x56097d5da1c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56097d5da1a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56097d5da188 <col:9> 'ErrorHandler *' lvalue Var 0x56097d5d99c8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56097d5d4c08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56097d5d4b78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56097d5d4cd0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56097d5da230 <col:43, line:173:5>
|   `-ReturnStmt 0x56097d5da220 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56097d5da208 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56097d5da1e8 <col:9> 'ErrorHandler *' lvalue Var 0x56097d5d9a40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56097d5d4d88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56097d5d4e08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56097d5d4f18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56097d5d4e88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5068 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56097d5d4fd8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d51c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56097d5d5128 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5318 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x56097d5d5280 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5470 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56097d5d53d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5680 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56097d5d5528 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d55a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5858 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56097d5d5740 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d57c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5a78 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56097d5d5918 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d5998 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5c58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56097d5d5b38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d5bb8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5e38 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56097d5d5d18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d5d98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d5fc0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56097d5d5ef8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56097d5d6190 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56097d5d6078 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56097d5d60f0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56097d5da488 <col:57, line:234:5>
|   `-ReturnStmt 0x56097d5da478 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56097d5da460 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56097d5da408 <col:9, col:41> 'int'
|         |-MemberExpr 0x56097d5da3d8 <col:9> '<bound member function type>' ->xmessage 0x56097d5d5fc0
|         | `-CXXThisExpr 0x56097d5da3c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56097d5da448 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56097d5da430 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56097d5da3a8 <col:18, col:40> 'String' (CXXTemporary 0x56097d5da3a8)
|               `-CallExpr 0x56097d5da370 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56097d5da358 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56097d5da2d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56097d5d8198 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56097d5da2f0 <col:31> 'const String' lvalue ParmVar 0x56097d5d60f0 'str' 'const String &'
|                 `-DeclRefExpr 0x56097d5da310 <col:36> 'const String' lvalue ParmVar 0x56097d5d6078 'anno' 'const String &'
|-CXXMethodDecl 0x56097d5d6470 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56097d5d6250 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56097d5d62d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56097d5d6348 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56097d5da718 <col:68, line:243:5>
|   `-ReturnStmt 0x56097d5da708 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56097d5da6f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56097d5da690 <col:9, col:41> 'int'
|         |-MemberExpr 0x56097d5da660 <col:9> '<bound member function type>' ->xmessage 0x56097d5d6190
|         | `-CXXThisExpr 0x56097d5da650 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56097d5da528 <col:18> 'const String' lvalue ParmVar 0x56097d5d6250 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56097d5da6d8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56097d5da6c0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56097d5da630 <col:24, col:40> 'String' (CXXTemporary 0x56097d5da630)
|               `-CXXMemberCallExpr 0x56097d5da5c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56097d5da558 <col:24> '<bound member function type>' ->vformat 0x56097d5d7660
|                 | `-CXXThisExpr 0x56097d5da548 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56097d5da5f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56097d5da588 <col:32> 'const char *' lvalue ParmVar 0x56097d5d62d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56097d5da610 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56097d5da5a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56097d5d6348 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56097d5d6710 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56097d5d6538 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56097d5d65b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56097d5d6628 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56097d5daa58 <col:23, line:254:5>
|   `-ReturnStmt 0x56097d5daa48 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56097d5daa30 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56097d5da9d0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56097d5da9a0 <col:9> '<bound member function type>' ->xmessage 0x56097d5d6190
|         | `-CXXThisExpr 0x56097d5da990 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56097d5daa18 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56097d5daa00 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56097d5da950 <col:18, col:65> 'String' (CXXTemporary 0x56097d5da950)
|         |     `-CallExpr 0x56097d5da8e8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56097d5da8d0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56097d5da7b8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56097d5d8198 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56097d5da7d8 <col:31> 'const String' lvalue ParmVar 0x56097d5d65b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56097d5da930 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56097d5da918 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56097d5da8b0 <col:37, col:64> 'String' (CXXTemporary 0x56097d5da8b0)
|         |             `-CallExpr 0x56097d5da880 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56097d5da868 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56097d5da7f8 <col:37> 'String (const String &)' lvalue CXXMethod 0x56097d5d87e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56097d5da818 <col:56> 'const String' lvalue ParmVar 0x56097d5d6538 'landmark' 'const String &'
|         `-DeclRefExpr 0x56097d5da970 <col:68> 'const String' lvalue ParmVar 0x56097d5d6628 'str' 'const String &'
|-CXXMethodDecl 0x56097d5d6a90 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56097d5d67d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56097d5d6850 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56097d5d68d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56097d5d6948 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56097d5dad10 <col:34, line:267:5>
|   `-ReturnStmt 0x56097d5dad00 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56097d5dace8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56097d5dac80 <col:9, col:51> 'int'
|         |-MemberExpr 0x56097d5dac50 <col:9> '<bound member function type>' ->xmessage 0x56097d5d6710
|         | `-CXXThisExpr 0x56097d5dac40 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56097d5daaf8 <col:18> 'const String' lvalue ParmVar 0x56097d5d67d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56097d5dab18 <col:28> 'const String' lvalue ParmVar 0x56097d5d6850 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56097d5dacd0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56097d5dacb8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56097d5dac20 <col:34, col:50> 'String' (CXXTemporary 0x56097d5dac20)
|               `-CXXMemberCallExpr 0x56097d5dabb8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56097d5dab48 <col:34> '<bound member function type>' ->vformat 0x56097d5d7660
|                 | `-CXXThisExpr 0x56097d5dab38 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56097d5dabe8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56097d5dab78 <col:42> 'const char *' lvalue ParmVar 0x56097d5d68d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56097d5dac00 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56097d5dab98 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56097d5d6948 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56097d5d6ba0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56097d5dad90 <col:25, line:288:5>
|   `-ReturnStmt 0x56097d5dad80 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56097d5dad68 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56097d5dad38 <col:9> 'const int' lvalue ->_nerrors 0x56097d5d9968
|         `-CXXThisExpr 0x56097d5dad28 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56097d5d6db0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56097d5d6c58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56097d5d6cd8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d70a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56097d5d6e90 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56097d5d6f10 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56097d5d6f88 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56097d5d7240 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56097d5d7178 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d7488 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56097d5d7300 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56097d5d7378 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56097d5daff0 <col:58, line:357:5>
|   `-ReturnStmt 0x56097d5dafe0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56097d5dafc8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56097d5daf98 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56097d5daf80 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56097d5daf60 <col:9, col:29> 'String' (CXXTemporary 0x56097d5daf60)
|             `-CallExpr 0x56097d5daef0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56097d5daed8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56097d5dae58 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56097d5d70a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56097d5dadf8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56097d5daf28 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56097d5dae18 <col:21> 'const char *' lvalue ParmVar 0x56097d5d7300 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56097d5daf40 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56097d5dae38 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56097d5d7378 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56097d5d7660 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56097d5d7550 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56097d5d75c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56097d5d77b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56097d5d7728 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56097d5d7900 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56097d5d7870 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56097d5d7ba0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56097d5d79b8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56097d5d7a38 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56097d5d7ab0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56097d5d7d00 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56097d5d7c70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56097d5db108 <col:37, line:441:5>
|   `-IfStmt 0x56097d5db0f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56097d5db078 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56097d5db048 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56097d5db008 <col:6> 'int' lvalue ParmVar 0x56097d5d7c70 'level' 'int'
|     | `-ImplicitCastExpr 0x56097d5db060 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56097d5db028 <col:15> 'ErrorHandler::Level' EnumConstant 0x56097d5d3d70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56097d5db0d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56097d5db0a8 <col:8> 'int' lvalue ->_nerrors 0x56097d5d9968
|         `-CXXThisExpr 0x56097d5db098 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56097d5d7dc8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56097d5db1a0 <col:26, line:448:5>
|   `-BinaryOperator 0x56097d5db180 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56097d5db130 <col:2> 'int' lvalue ->_nerrors 0x56097d5d9968
|     | `-CXXThisExpr 0x56097d5db120 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56097d5db160 <col:13> 'int' 0
|-CXXMethodDecl 0x56097d5d7f90 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56097d5d7e80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56097d5d7ef8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56097d5d8198 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56097d5d8050 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56097d5d80c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56097d5d8448 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56097d5d8258 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56097d5d82d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56097d5d8358 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56097d5d8500 <col:59> 0 0
|-CXXMethodDecl 0x56097d5d8698 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56097d5d8578 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56097d5d85f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56097d5db810 <col:70, line:534:5>
|   |-DeclStmt 0x56097d5db310 <line:528:2, col:20>
|   | |-VarDecl 0x56097d5db1c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56097d5db230 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56097d5db268 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56097d5db2d0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56097d5db3e0 <line:529:2, col:23>
|   | `-VarDecl 0x56097d5db340 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56097d5db3c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56097d5db3a8 <col:18> 'const char *' lvalue ParmVar 0x56097d5d8578 'begin' 'const char *'
|   |-DoStmt 0x56097d5db7a8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56097d5db6d8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56097d5db6c0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56097d5db6a0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56097d5db3f8 <col:6> 'const char *' lvalue Var 0x56097d5db340 'x' 'const char *'
|   | |     `-CallExpr 0x56097d5db5f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56097d5db5d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56097d5db590 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56097d5d9e40 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56097d5db658 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56097d5db640 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56097d5db4b0 <col:20, col:27> 'String' (CXXTemporary 0x56097d5db4b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56097d5db478 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56097d5db670 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56097d5db4d0 <col:30> 'const char *' lvalue Var 0x56097d5db340 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56097d5db688 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56097d5db4f0 <col:33> 'const char *' lvalue ParmVar 0x56097d5d85f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x56097d5db530 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56097d5db510 <col:39> 'String' lvalue Var 0x56097d5db1c8 'name' 'String'
|   | |       |-UnaryOperator 0x56097d5db568 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56097d5db548 <col:46> 'String' lvalue Var 0x56097d5db268 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56097d5db580 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56097d5db790 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56097d5db778 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56097d5db758 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56097d5db728 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|   |         `-ImplicitCastExpr 0x56097d5db710 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56097d5db6f0 <col:11> 'String' lvalue Var 0x56097d5db1c8 'name' 'String'
|   `-ReturnStmt 0x56097d5db800 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56097d5db7e8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56097d5db7c8 <col:9> 'const char *' lvalue Var 0x56097d5db340 'x' 'const char *'
|-CXXMethodDecl 0x56097d5d87e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56097d5d8758 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56097d5dbe18 <col:55, line:550:5>
|   `-IfStmt 0x56097d5dbdf0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56097d5dba50 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56097d5dba38 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56097d5dba20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56097d5dba00 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56097d5db9d0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|     | |       `-DeclRefExpr 0x56097d5db870 <col:6> 'const String' lvalue ParmVar 0x56097d5d8758 'x' 'const String &'
|     | `-BinaryOperator 0x56097d5db9b0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56097d5db980 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56097d5db930 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56097d5db918 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56097d5db8d0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56097d2db220 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56097d5db890 <col:11> 'const String' lvalue ParmVar 0x56097d5d8758 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56097d5db8b0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56097d5db998 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56097d5db968 <col:19> 'char' 123
|     |-ReturnStmt 0x56097d5dbac0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56097d5dba90 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56097d5dba70 <col:13> 'const String' lvalue ParmVar 0x56097d5d8758 'x' 'const String &'
|     `-IfStmt 0x56097d5dbdc8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56097d5dbb58 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56097d5dbb40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56097d5dbb20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56097d5dbaf0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |       `-DeclRefExpr 0x56097d5dbad0 <col:11> 'const String' lvalue ParmVar 0x56097d5d8758 'x' 'const String &'
|       |-ReturnStmt 0x56097d5dbce0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56097d5dbcc8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56097d5dbc98 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56097d5dbc80 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56097d5dbc60 <col:13, col:29> 'String' (CXXTemporary 0x56097d5dbc60)
|       |         `-CallExpr 0x56097d5dbc10 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56097d5dbbf8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56097d5dbb70 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56097d5d7f90 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56097d5dbc40 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56097d5dbb90 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56097d5dbbb0 <col:28> 'const String' lvalue ParmVar 0x56097d5d8758 'x' 'const String &'
|       `-ReturnStmt 0x56097d5dbdb8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56097d5dbda0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56097d5dbd70 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56097d5dbd58 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56097d5dbd38 <col:13, col:20> 'String' (CXXTemporary 0x56097d5dbd38)
|                 `-CXXTemporaryObjectExpr 0x56097d5dbd00 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56097d5d89b0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56097d5d88a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56097d5d8918 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56097d5da0e8 <col:71> 'bool' false
|-CXXRecordDecl 0x56097d5d8a60 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56097d5d8d58 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56097d5d8cf0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56097d5d8c90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56097d5d8c50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56097d2be280 'String'
|       | `-CXXRecord 0x56097d2be1f0 'String'
|       |-BuiltinType 0x56097cf91370 'int'
|       `-DecayedType 0x56097d5653d0 '__va_list_tag *' sugar
|         |-TypedefType 0x56097d5653a0 'va_list' sugar
|         | |-Typedef 0x56097d1af330 'va_list'
|         | `-TypedefType 0x56097d1af2e0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56097d0e6f28 '__gnuc_va_list'
|         |   `-TypedefType 0x56097d0e6e90 '__builtin_va_list' sugar
|         |     |-Typedef 0x56097cfd2bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56097cfd2b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56097cf920c0 '__va_list_tag'
|         |         `-CXXRecord 0x56097cf92028 '__va_list_tag'
|         `-PointerType 0x56097d1b4bd0 '__va_list_tag *'
|           `-RecordType 0x56097cf920c0 '__va_list_tag'
|             `-CXXRecord 0x56097cf92028 '__va_list_tag'
|-EnumDecl 0x56097d5d8db0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56097d5d8eb0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9410 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d8e90 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56097d5d8e70 <col:16> 'int' 1
| |-EnumConstantDecl 0x56097d5d8f40 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9428 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d8f20 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56097d5d8f00 <col:21> 'int' 2
| |-EnumConstantDecl 0x56097d5d8fd0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9440 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d8fb0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56097d5d8f90 <col:22> 'int' 4
| |-EnumConstantDecl 0x56097d5d9060 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9458 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d9040 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56097d5d9020 <col:17> 'int' 8
| |-EnumConstantDecl 0x56097d5d90f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9470 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d90d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56097d5d90b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56097d5d9180 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d9488 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d9160 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56097d5d9140 <col:19> 'int' 32
| |-EnumConstantDecl 0x56097d5d9210 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d94a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d91f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56097d5d91d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56097d5d92a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d94b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d9280 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56097d5d9260 <col:14> 'int' 128
| |-EnumConstantDecl 0x56097d5d9330 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56097d5d94d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5d9310 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56097d5d92f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x56097d5d93c0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56097d5d94e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d5d93a0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56097d5d9380 <col:12> 'int' 1024
|-CXXMethodDecl 0x56097d5d96f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56097d5d9510 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56097d5d95b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56097d5d9880 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56097d5d97b8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56097d5d9928 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56097d5d9968 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56097d5d99c8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56097d5d9a40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56097d5d9e40 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56097d5d9ab8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56097d5d9b38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56097d5d9bb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56097d5d9c30 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56097d5d9ca8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56097d5d9d20 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56097d5d9f68 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56097d5d9f68
| `-ParmVarDecl 0x56097d5da078 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56097d5dc178 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56097d5dc178
  `-ParmVarDecl 0x56097d5dc288 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d564418 prev 0x56097d51b0d8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d564510 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56097d5645a0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56097d5646d8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56097d5645d8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56097d565b00 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d565ae0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56097d565678 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56097d565b90 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56097d565b50 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56097d5645d8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56097d5656e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56097d565c10 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d565bd0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56097d565740 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56097d565c50 <col:54> 'bool' false
| `-CompoundStmt 0x56097d565d58 <col:61, line:38:5>
|   `-BinaryOperator 0x56097d565d38 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56097d565cd0 <col:9> 'const Element *' lvalue ->_context 0x56097d565618
|     | `-CXXThisExpr 0x56097d565cc0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56097d565d20 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56097d565d00 <col:20> 'int' 0
|-CXXConstructorDecl 0x56097d5648e8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d564798 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56097d564810 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56097d565b38 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d565b18 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56097d565618 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56097d565db0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56097d565d70 <col:20> 'const Element *' lvalue ParmVar 0x56097d564798 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56097d565678 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56097d565e30 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56097d565df0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56097d564810 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56097d5656e0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56097d565eb0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56097d565e70 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56097d565740 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56097d565ef0 <col:73> 'bool' false
| `-CompoundStmt 0x56097d565f68 <col:80, line:46:5>
|-CXXMethodDecl 0x56097d564a18 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56097d565fe0 <col:36, line:51:5>
|   `-ReturnStmt 0x56097d565fd0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56097d565fb8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56097d565f88 <col:16> 'const Element *const' lvalue ->_context 0x56097d565618
|         `-CXXThisExpr 0x56097d565f78 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56097d564b08 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56097d566060 <col:32, line:57:5>
|   `-ReturnStmt 0x56097d566050 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56097d566038 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56097d566008 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56097d565678
|         `-CXXThisExpr 0x56097d565ff8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56097d564bc8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56097d564d50 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56097d564c80 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56097d564ea0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56097d564e10 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56097d564ff0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56097d564f60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56097d5651f8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56097d5650a8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56097d565120 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56097d565528 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56097d5652b8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56097d565338 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56097d565400 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56097d5655e0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56097d565618 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56097d565678 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56097d5656e0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56097d565740 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56097d565790 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56097d565790
| `-ParmVarDecl 0x56097d5658a8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56097d565948 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56097d565948
| `-ParmVarDecl 0x56097d565a58 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56097d5e53f0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56097d58b9d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56097d58bba8 prev 0x56097d58b9d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56097d58bc38 <col:46, col:52> col:46 public
|-TypedefDecl 0x56097d58bc60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d599080 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56097d599030 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56097d58c110 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56097d58c010 'type'
|     `-TemplateSpecializationType 0x56097d58bfa0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56097d58be80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56097d58be60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56097d58be40 <col:24> 'unsigned long' 4
|       `-RecordType 0x56097d58bf80 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56097d58bea0 'char_array'
|-TypedefDecl 0x56097d599138 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56097d599100 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56097d5990e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56097d599080 'type'
|     `-ElaboratedType 0x56097d599030 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56097d58c110 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56097d58c010 'type'
|         `-TemplateSpecializationType 0x56097d58bfa0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56097d58be80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56097d58be60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56097d58be40 <col:24> 'unsigned long' 4
|           `-RecordType 0x56097d58bf80 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56097d58bea0 'char_array'
|-CXXMethodDecl 0x56097d5992b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56097d5991c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56097d5993a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56097d599488 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56097d599758 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56097d599660 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56097d599998 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56097d599810 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d599888 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d599b68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56097d599a58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d599ad0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d599cc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56097d599d98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56097d599fe8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56097d599e58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56097d599ed0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d59a248 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56097d59a0b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56097d59a130 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d59a408 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56097d59a318 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d59a5c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56097d59a4d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d59a680 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56097d59a730 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56097d59a968 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56097d59a7e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56097d59a858 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56097d59ac08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56097d59ab10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56097d59acd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56097d59ad20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56097d59ad70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56097d58a3d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56097d58a5e8 prev 0x56097d58a3d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56097d58b940 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56097d58b8f0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56097d58b8d0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56097d58b780 'type'
|     `-SubstTemplateTypeParmType 0x56097d58b5a0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56097d2570c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d257068 'T'
|       `-RecordType 0x56097d58b0f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56097d58b008 'sized_array_memory'
|-FieldDecl 0x56097d59adc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56097d59ae10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56097d59ae48 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|   |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56097d28ed58 'T'
|   `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59aed8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56097d59aea0 'int &'
|   `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59af98 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56097d59af60 'const int &'
|   `-QualType 0x56097d58a681 'const int' const
|     `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59b028 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56097d59aff0 'int *'
|   `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59b0b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56097d59b080 'const int *'
|   `-QualType 0x56097d58a681 'const int' const
|     `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59bca0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56097d59bc50 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56097d59bc30 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56097d59bbc0 'type'
|     `-SubstTemplateTypeParmType 0x56097d59b980 'int' sugar
|       |-TemplateTypeParmType 0x56097d261ec0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d261e70 'T'
|       `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59bd08 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56097d59af60 'const int &'
|   `-QualType 0x56097d58a681 'const int' const
|     `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59bd60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59bdc8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56097d59aff0 'int *'
|   `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|     |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56097d28ed58 'T'
|     `-BuiltinType 0x56097cf91370 'int'
|-TypedefDecl 0x56097d59be30 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56097d59b080 'const int *'
|   `-QualType 0x56097d58a681 'const int' const
|     `-SubstTemplateTypeParmType 0x56097d58a680 'int' sugar
|       |-TemplateTypeParmType 0x56097d28edb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56097d28ed58 'T'
|       `-BuiltinType 0x56097cf91370 'int'
|-EnumDecl 0x56097d59be88 <line:134:5> col:5
| `-EnumConstantDecl 0x56097d59bf80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56097d59bf60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56097d290438 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56097d290410 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56097d2903f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56097d59c008 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56097d59c258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d59c0c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d59c160 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56097d59c518 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56097d59c400 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56097d59c7d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56097d59c6c0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56097d59cb20 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56097d59ca00 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56097d59ce30 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56097d59cd10 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56097d59d120 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d59cf68 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d59cfe0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56097d59d248 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56097d59d328 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59d380 <col:30> Inherited
|-CXXMethodDecl 0x56097d59d3c8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56097d59d478 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59d4d0 <col:30> Inherited
|-CXXMethodDecl 0x56097d59d598 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56097d59d648 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59d6a0 <col:30> Inherited
|-CXXMethodDecl 0x56097d59d6e8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56097d59d798 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59d7f0 <col:30> Inherited
|-CXXMethodDecl 0x56097d59d838 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56097d59d8e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59d940 <col:30> Inherited
|-CXXMethodDecl 0x56097d59d988 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56097d59da38 <col:20> Inherited
| `-OptimizeNoneAttr 0x56097d59da90 <col:30> Inherited
|-CXXMethodDecl 0x56097d59dab8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56097d59db68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56097d59dc18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56097d59ddd8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d59dcc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56097d59dd40 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56097d59df28 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56097d59de98 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d59e0d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56097d59dfe0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56097d59e190 <col:20>
| `-OptimizeNoneAttr 0x56097d59e1e8 <col:30>
|-CXXMethodDecl 0x56097d59e308 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56097d59e210 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56097d59e3c0 <col:20>
| `-OptimizeNoneAttr 0x56097d59e418 <col:30>
|-CXXMethodDecl 0x56097d59e4d0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56097d59e440 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d59e618 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56097d59e588 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d59e748 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56097d59e878 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56097d59e948 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56097d59ea18 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56097d59eb58 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56097d59eac8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d59eca0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56097d59ec10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56097d59ede8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56097d59ed58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56097d59eea0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56097d59efa0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56097d59ef10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56097d59f058 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56097d59f118 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56097d59f218 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56097d59f398 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56097d59f2d8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56097d59fb58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56097d59f450 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56097d59fab8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56097d59f9b8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56097d59fc38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56097d59fd88 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56097d59fcf8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56097d59fe40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56097d5a0088 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56097d59ff00 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56097d59ff78 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56097d5a0248 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56097d5a0158 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56097d5a0498 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56097d5a0310 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56097d5a0388 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56097d5a0558 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56097d5a17a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56097d5a16b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56097d5a1878 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d588548 prev 0x56097d56e310 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56097d588640 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56097d588730 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56097d5b2250 <col:16, line:828:9>
|-CXXDestructorDecl 0x56097d588820 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56097d5b2260 <col:25, line:830:9>
|-CXXMethodDecl 0x56097d588920 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56097d5889d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56097d588a78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56097d588a78
| `-ParmVarDecl 0x56097d588b88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56097d589348 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56097d589348
  `-ParmVarDecl 0x56097d589458 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d56e148 prev 0x56097d51b168 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56097d56e280 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56097d56e310 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56097d56e3c0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56097d56e4c8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56097d56e3f8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56097d5a2e38 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56097d5a2e18 <col:31> 'int' 0
|-CXXConstructorDecl 0x56097d56e7e8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56097d56e660 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56097d56e6d8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56097d5a2e70 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56097d5a2e50 <col:59> 'int' 0
|-CXXConstructorDecl 0x56097d56e9c0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d56e8b0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56097d56e928 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56097d5a2ea8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56097d5a2e88 <col:55> 'int' 0
|-CXXConstructorDecl 0x56097d56ed78 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56097d56eb60 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56097d56ebd8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56097d56ec50 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56097d5a2ee0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56097d5a2ec0 <col:31> 'int' 0
|-CXXConstructorDecl 0x56097d56ef38 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56097d56ee78 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56097d56f030 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56097d56f1e8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56097d56f120 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56097d56f2d8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56097d5a3290 <col:24, line:291:5>
|   `-ReturnStmt 0x56097d5a3280 <line:290:9, col:79>
|     `-BinaryOperator 0x56097d5a3260 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56097d5a3138 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56097d5a3090 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56097d5a3070 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56097d5a2f68 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56097d5a2f50 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56097d5a2f38 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56097d5a2f08 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56097d58a370
|       | |   |       `-CXXThisExpr 0x56097d5a2ef8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56097d5a3058 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56097d5a3040 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56097d5a3008 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56097d5a2fd8 <col:28, col:35> '<bound member function type>' ->size 0x56097d554fd8
|       | |           `-ImplicitCastExpr 0x56097d5a3028 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56097d5a2fc0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56097d5a2f90 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56097d58a370
|       | |                 `-CXXThisExpr 0x56097d5a2f80 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56097d5a3120 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56097d5a3108 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56097d5a30f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56097d5a30c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56097d5a19c0
|       |         `-CXXThisExpr 0x56097d5a30b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56097d5a3240 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56097d5a3228 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56097d5a3210 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56097d5a31d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56097d5a31b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56097d5a3168 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56097d5a1a70
|         |     |   `-CXXThisExpr 0x56097d5a3158 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56097d5a3198 <col:73> 'int' 0
|         `-IntegerLiteral 0x56097d5a31f0 <col:79> 'int' 0
|-CXXMethodDecl 0x56097d56f398 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56097d5a3468 <col:32, line:296:5>
|   `-ReturnStmt 0x56097d5a3458 <line:295:9, col:49>
|     `-BinaryOperator 0x56097d5a3438 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56097d5a3318 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56097d5a3300 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56097d5a32e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56097d5a32b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56097d5a19c0
|       |       `-CXXThisExpr 0x56097d5a32a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56097d5a3418 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56097d5a3400 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56097d5a33e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56097d5a33a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56097d5a3390 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56097d5a3340 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56097d5a1a70
|         |     |   `-CXXThisExpr 0x56097d5a3330 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56097d5a3370 <col:43> 'int' 0
|         `-IntegerLiteral 0x56097d5a33c8 <col:49> 'int' 0
|-CXXMethodDecl 0x56097d56f488 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56097d5a3678 <col:19, line:306:5>
|   |-IfStmt 0x56097d5a3598 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56097d5a34d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56097d5a34c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56097d5a3490 <col:13> 'Vector<String> *' lvalue ->_conf 0x56097d58a370
|   | |     `-CXXThisExpr 0x56097d5a3480 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56097d5a3578 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56097d5a3548 <col:13, col:20> '<bound member function type>' ->clear 0x56097d557a18
|   |     `-ImplicitCastExpr 0x56097d5a3530 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56097d5a3500 <col:13> 'Vector<String> *' lvalue ->_conf 0x56097d58a370
|   |         `-CXXThisExpr 0x56097d5a34f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56097d5a3620 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56097d5a35f0 <col:9, col:16> '<bound member function type>' .clear 0x56097d5a0558
|   |   `-MemberExpr 0x56097d5a35c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56097d5a1960
|   |     `-CXXThisExpr 0x56097d5a35b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56097d5a3668 <line:305:9, col:17>
|     `-UnaryOperator 0x56097d5a3650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a3640 <col:17> 'Args *' this
|-CXXMethodDecl 0x56097d56f708 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56097d56f610 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56097d56f888 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56097d56f7c0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56097d56fc08 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56097d56f930 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56097d56fb68 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56097d56f9d8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56097d56fa50 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56097d5a39a0 <col:67, line:327:5>
|     |-WhileStmt 0x56097d5a3950 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56097d5a3768 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56097d5a36e0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56097d51ab00 0x56097d4b0bb8 0x56097d2f9f78 0x56097d2f9c50 0x56097d2eb430 0x56097d2eb0e0 0x56097d2ea9d0 0x56097d2bd340 0x56097d249800
|     | | |-DeclRefExpr 0x56097d5a36a0 <col:16> 'Iter' lvalue ParmVar 0x56097d56f9d8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56097d5a36c0 <col:25> 'Iter' lvalue ParmVar 0x56097d56fa50 'end' 'Iter'
|     | `-CompoundStmt 0x56097d5a3930 <col:30, line:325:9>
|     |   |-CallExpr 0x56097d5a38d0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56097d5a37b0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56097d5a38a0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56097d5a3830 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|     |   |   `-DeclRefExpr 0x56097d5a3810 <col:24> 'Iter' lvalue ParmVar 0x56097d56f9d8 'begin' 'Iter'
|     |   `-UnaryOperator 0x56097d5a3918 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56097d5a38f8 <col:15> 'Iter' lvalue ParmVar 0x56097d56f9d8 'begin' 'Iter'
|     `-ReturnStmt 0x56097d5a3990 <line:326:9, col:17>
|       `-UnaryOperator 0x56097d5a3978 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a3968 <col:17> 'Args *' this
|-CXXMethodDecl 0x56097d56fd10 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56097d56fc80 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56097d56fe58 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56097d56fdc8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56097d56ff20 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56097d5a3a80 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56097d5a3a20 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56097d5a39d0 <col:9> '<bound member function type>' ->reset_from 0x56097d5a1de8
|   | | `-CXXThisExpr 0x56097d5a39c0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56097d5a3a00 <col:20> 'int' 0
|   `-ReturnStmt 0x56097d5a3a70 <line:352:9, col:17>
|     `-UnaryOperator 0x56097d5a3a58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a3a48 <col:17> 'Args *' this
|-VarDecl 0x56097d56ffd8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56097d570040 <col:38> 'int' 1
|-VarDecl 0x56097d5700d0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56097d570138 <col:39> 'int' 2
|-VarDecl 0x56097d5701c8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56097d570230 <col:39> 'int' 4
|-VarDecl 0x56097d5702c0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56097d570328 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56097d5706a8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56097d5703a0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d570608 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56097d570450 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5704f8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a3bd8 <col:43, line:371:5>
|     `-ReturnStmt 0x56097d5a3bc8 <line:370:9, col:34>
|       `-CallExpr 0x56097d5a3b90 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a3ab0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a3b30 <col:21> 'const char *' lvalue ParmVar 0x56097d570450 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a3b50 <col:30> 'int' 0
|         `-DeclRefExpr 0x56097d5a3b70 <col:33> 'T' lvalue ParmVar 0x56097d5704f8 'x' 'T &'
|-FunctionTemplateDecl 0x56097d5709d8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56097d570710 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d570938 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56097d5707c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d570868 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a3d28 <col:45, line:375:5>
|     `-ReturnStmt 0x56097d5a3d18 <line:374:9, col:42>
|       `-CallExpr 0x56097d5a3ce0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a3c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a3c80 <col:21> 'const char *' lvalue ParmVar 0x56097d5707c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a3ca0 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56097d5a3cc0 <col:41> 'T' lvalue ParmVar 0x56097d570868 'x' 'T &'
|-FunctionTemplateDecl 0x56097d570d08 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56097d570a40 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d570c68 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56097d570af0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d570b98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a3e78 <col:45, line:379:5>
|     `-ReturnStmt 0x56097d5a3e68 <line:378:9, col:43>
|       `-CallExpr 0x56097d5a3e30 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a3d50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a3dd0 <col:21> 'const char *' lvalue ParmVar 0x56097d570af0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a3df0 <col:30> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         `-DeclRefExpr 0x56097d5a3e10 <col:42> 'T' lvalue ParmVar 0x56097d570b98 'x' 'T &'
|-FunctionTemplateDecl 0x56097d571038 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56097d570d70 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56097d570f98 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56097d570e20 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56097d570ec8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56097d5a4078 <col:46, line:383:5>
| |   `-ReturnStmt 0x56097d5a4068 <line:382:9, col:55>
| |     `-CallExpr 0x56097d5a4030 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56097d5a3ea0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56097d5a3f20 <col:21> 'const char *' lvalue ParmVar 0x56097d570e20 'keyword' 'const char *'
| |       |-BinaryOperator 0x56097d5a3ff0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56097d5a3fa0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56097d5a3f80 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56097d5a3fd8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56097d5a3fb8 <col:42> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56097d5a4010 <col:54> 'T' lvalue ParmVar 0x56097d570ec8 'x' 'T &'
| `-CXXMethodDecl 0x56097d5e5868 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x56097d5e5680 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56097d5e5758 <col:40, col:43> col:43 x 'unsigned short &'
|-FunctionTemplateDecl 0x56097d571438 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56097d5710a0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d571398 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56097d571150 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5711d0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56097d571278 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a41b8 <col:54, line:388:5>
|     |-CallExpr 0x56097d5a4140 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a4090 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56097d5a40d0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a40e0 <col:30> 'const char *' lvalue ParmVar 0x56097d571150 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a4100 <col:39> 'int' lvalue ParmVar 0x56097d5711d0 'flags' 'int'
|     | `-DeclRefExpr 0x56097d5a4120 <col:46> 'T' lvalue ParmVar 0x56097d571278 'x' 'T &'
|     `-ReturnStmt 0x56097d5a41a8 <line:387:9, col:17>
|       `-UnaryOperator 0x56097d5a4190 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a4180 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d5718e8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56097d5714a8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d571528 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56097d571848 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56097d5715e8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d571688 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56097d571728 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a4328 <col:74, line:403:5>
|     `-ReturnStmt 0x56097d5a4318 <line:402:9, col:56>
|       `-CallExpr 0x56097d5a42d8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a41e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a4258 <col:28> 'const char *' lvalue ParmVar 0x56097d5715e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a4278 <col:37> 'int' 0
|         |-DeclRefExpr 0x56097d5a4298 <col:40> 'T' lvalue ParmVar 0x56097d571688 'x' 'T &'
|         `-DeclRefExpr 0x56097d5a42b8 <col:43> 'const V' lvalue ParmVar 0x56097d571728 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56097d571d58 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56097d571958 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d5719d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56097d571cb8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56097d571a98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d571b38 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56097d571bd8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a4490 <col:76, line:407:5>
|     `-ReturnStmt 0x56097d5a4480 <line:406:9, col:65>
|       `-CallExpr 0x56097d5a4440 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a4350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a43c0 <col:28> 'const char *' lvalue ParmVar 0x56097d571a98 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a43e0 <col:37> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         |-DeclRefExpr 0x56097d5a4400 <col:49> 'T' lvalue ParmVar 0x56097d571b38 'x' 'T &'
|         `-DeclRefExpr 0x56097d5a4420 <col:52> 'const V' lvalue ParmVar 0x56097d571bd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56097d5722a8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56097d571dc8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d571e48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56097d572208 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56097d571f08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d571f88 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56097d572028 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56097d5720c8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a45f8 <col:85, line:412:5>
|     |-CallExpr 0x56097d5a4578 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a44a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56097d5a44e8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a44f8 <col:37> 'const char *' lvalue ParmVar 0x56097d571f08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a4518 <col:46> 'int' lvalue ParmVar 0x56097d571f88 'flags' 'int'
|     | |-DeclRefExpr 0x56097d5a4538 <col:53> 'T' lvalue ParmVar 0x56097d572028 'x' 'T &'
|     | `-DeclRefExpr 0x56097d5a4558 <col:56> 'const V' lvalue ParmVar 0x56097d5720c8 'default_value' 'const V &'
|     `-ReturnStmt 0x56097d5a45e8 <line:411:9, col:17>
|       `-UnaryOperator 0x56097d5a45d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a45c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d572738 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56097d572320 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d572398 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d572698 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d572458 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5724d0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56097d572578 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a4778 <col:53, line:425:5>
|     `-ReturnStmt 0x56097d5a4768 <line:424:9, col:42>
|       `-CallExpr 0x56097d5a4728 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a4628 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a46a8 <col:21> 'const char *' lvalue ParmVar 0x56097d572458 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a46c8 <col:30> 'int' 0
|         |-DeclRefExpr 0x56097d5a46e8 <col:33> 'P' lvalue ParmVar 0x56097d5724d0 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a4708 <col:41> 'T' lvalue ParmVar 0x56097d572578 'x' 'T &'
|-FunctionTemplateDecl 0x56097d572b88 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56097d5727a8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d572828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d572ae8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d5728e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d572960 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56097d572a08 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a48f0 <col:55, line:429:5>
|     `-ReturnStmt 0x56097d5a48e0 <line:428:9, col:50>
|       `-CallExpr 0x56097d5a48a0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a47a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a4820 <col:21> 'const char *' lvalue ParmVar 0x56097d5728e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a4840 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56097d5a4860 <col:41> 'P' lvalue ParmVar 0x56097d572960 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a4880 <col:49> 'T' lvalue ParmVar 0x56097d572a08 'x' 'T &'
|-FunctionTemplateDecl 0x56097d572fd8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56097d572bf8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d572c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d572f38 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d572d38 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d572db0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56097d572e58 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a4a68 <col:55, line:433:5>
|     `-ReturnStmt 0x56097d5a4a58 <line:432:9, col:51>
|       `-CallExpr 0x56097d5a4a18 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a4918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a4998 <col:21> 'const char *' lvalue ParmVar 0x56097d572d38 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a49b8 <col:30> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         |-DeclRefExpr 0x56097d5a49d8 <col:42> 'P' lvalue ParmVar 0x56097d572db0 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a49f8 <col:50> 'T' lvalue ParmVar 0x56097d572e58 'x' 'T &'
|-FunctionTemplateDecl 0x56097d573428 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56097d573048 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d5730c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x56097d573388 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x56097d573188 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56097d573200 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x56097d5732a8 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x56097d5a4c90 <col:56, line:437:5>
| |   `-ReturnStmt 0x56097d5a4c80 <line:436:9, col:63>
| |     `-CallExpr 0x56097d5a4c40 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56097d5a4a90 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56097d5a4b10 <col:21> 'const char *' lvalue ParmVar 0x56097d573188 'keyword' 'const char *'
| |       |-BinaryOperator 0x56097d5a4be0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56097d5a4b90 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56097d5a4b70 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56097d5a4bc8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56097d5a4ba8 <col:42> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x56097d5a4c00 <col:54> 'P' lvalue ParmVar 0x56097d573200 'parser' 'P'
| |       `-DeclRefExpr 0x56097d5a4c20 <col:62> 'T' lvalue ParmVar 0x56097d5732a8 'x' 'T &'
| `-CXXMethodDecl 0x56097d5e6338 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x56097d5e6078 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x56097d5e6118 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x56097d5e6218 <col:50, col:53> col:53 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x56097d573958 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56097d573498 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d573518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d5738b8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56097d5735d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d573658 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56097d5736d0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56097d573778 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a4df8 <col:64, line:442:5>
|     |-CallExpr 0x56097d5a4d78 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a4ca8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56097d5a4ce8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a4cf8 <col:30> 'const char *' lvalue ParmVar 0x56097d5735d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a4d18 <col:39> 'int' lvalue ParmVar 0x56097d573658 'flags' 'int'
|     | |-DeclRefExpr 0x56097d5a4d38 <col:46> 'P' lvalue ParmVar 0x56097d5736d0 'parser' 'P'
|     | `-DeclRefExpr 0x56097d5a4d58 <col:54> 'T' lvalue ParmVar 0x56097d573778 'x' 'T &'
|     `-ReturnStmt 0x56097d5a4de8 <line:441:9, col:17>
|       `-UnaryOperator 0x56097d5a4dd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a4dc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d5775d0 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56097d5739d0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d573a48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56097d573ac8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56097d577530 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56097d573b90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d573c08 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56097d573ca8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56097d573d78 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a4f90 <col:84, line:458:5>
|     `-ReturnStmt 0x56097d5a4f80 <line:457:9, col:64>
|       `-CallExpr 0x56097d5a4f38 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a4e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a4e98 <col:28> 'const char *' lvalue ParmVar 0x56097d573b90 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a4eb8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56097d5a4ed8 <col:40> 'P' lvalue ParmVar 0x56097d573c08 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a4ef8 <col:48> 'T' lvalue ParmVar 0x56097d573ca8 'x' 'T &'
|         `-DeclRefExpr 0x56097d5a4f18 <col:51> 'const V' lvalue ParmVar 0x56097d573d78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56097d577b58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56097d577648 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d5776c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56097d577748 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56097d577ab8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56097d577810 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d577888 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56097d577928 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56097d5779c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a5120 <col:86, line:462:5>
|     `-ReturnStmt 0x56097d5a5110 <line:461:9, col:73>
|       `-CallExpr 0x56097d5a50c8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a4fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5028 <col:28> 'const char *' lvalue ParmVar 0x56097d577810 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a5048 <col:37> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         |-DeclRefExpr 0x56097d5a5068 <col:49> 'P' lvalue ParmVar 0x56097d577888 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a5088 <col:57> 'T' lvalue ParmVar 0x56097d577928 'x' 'T &'
|         `-DeclRefExpr 0x56097d5a50a8 <col:60> 'const V' lvalue ParmVar 0x56097d5779c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56097d5781b8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56097d577bd0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d577c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56097d577cc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56097d578118 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56097d577d90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d577e10 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56097d577e88 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56097d577f28 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56097d577fc8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56097d5a52b0 <col:95, line:467:5>
|     |-CallExpr 0x56097d5a5228 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a5138 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56097d5a5178 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a5188 <col:37> 'const char *' lvalue ParmVar 0x56097d577d90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a51a8 <col:46> 'int' lvalue ParmVar 0x56097d577e10 'flags' 'int'
|     | |-DeclRefExpr 0x56097d5a51c8 <col:53> 'P' lvalue ParmVar 0x56097d577e88 'parser' 'P'
|     | |-DeclRefExpr 0x56097d5a51e8 <col:61> 'T' lvalue ParmVar 0x56097d577f28 'x' 'T &'
|     | `-DeclRefExpr 0x56097d5a5208 <col:64> 'const V' lvalue ParmVar 0x56097d577fc8 'default_value' 'const V &'
|     `-ReturnStmt 0x56097d5a52a0 <line:466:9, col:17>
|       `-UnaryOperator 0x56097d5a5288 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a5278 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d578798 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56097d578238 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d5782b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d578338 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d5786f8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d578400 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d578478 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56097d578518 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56097d5785b8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56097d5a5458 <col:63, line:481:5>
|     `-ReturnStmt 0x56097d5a5448 <line:480:9, col:47>
|       `-CallExpr 0x56097d5a5400 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a52e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5360 <col:21> 'const char *' lvalue ParmVar 0x56097d578400 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a5380 <col:30> 'int' 0
|         |-DeclRefExpr 0x56097d5a53a0 <col:33> 'P' lvalue ParmVar 0x56097d578478 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a53c0 <col:41> 'T1' lvalue ParmVar 0x56097d578518 'x1' 'T1 &'
|         `-DeclRefExpr 0x56097d5a53e0 <col:45> 'T2' lvalue ParmVar 0x56097d5785b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56097d578d18 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56097d578810 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d578888 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d578908 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d578c78 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d5789d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d578a48 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56097d578ae8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56097d578b88 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56097d5a55f8 <col:65, line:485:5>
|     `-ReturnStmt 0x56097d5a55e8 <line:484:9, col:55>
|       `-CallExpr 0x56097d5a55a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5500 <col:21> 'const char *' lvalue ParmVar 0x56097d5789d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a5520 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56097d5a5540 <col:41> 'P' lvalue ParmVar 0x56097d578a48 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a5560 <col:49> 'T1' lvalue ParmVar 0x56097d578ae8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56097d5a5580 <col:53> 'T2' lvalue ParmVar 0x56097d578b88 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56097d579298 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56097d578d90 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d578e08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d578e88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d5791f8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d578f50 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d578fc8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56097d579068 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56097d579108 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56097d5a5798 <col:65, line:489:5>
|     `-ReturnStmt 0x56097d5a5788 <line:488:9, col:56>
|       `-CallExpr 0x56097d5a5740 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5620 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a56a0 <col:21> 'const char *' lvalue ParmVar 0x56097d578f50 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a56c0 <col:30> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         |-DeclRefExpr 0x56097d5a56e0 <col:42> 'P' lvalue ParmVar 0x56097d578fc8 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a5700 <col:50> 'T1' lvalue ParmVar 0x56097d579068 'x1' 'T1 &'
|         `-DeclRefExpr 0x56097d5a5720 <col:54> 'T2' lvalue ParmVar 0x56097d579108 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56097d579818 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56097d579310 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d579388 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d579408 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d579778 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d5794d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d579548 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56097d5795e8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56097d579688 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56097d5a59e8 <col:66, line:493:5>
|     `-ReturnStmt 0x56097d5a59d8 <line:492:9, col:68>
|       `-CallExpr 0x56097d5a5990 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a57c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5840 <col:21> 'const char *' lvalue ParmVar 0x56097d5794d0 'keyword' 'const char *'
|         |-BinaryOperator 0x56097d5a5910 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56097d5a58c0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56097d5a58a0 <col:30> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56097d5a58f8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56097d5a58d8 <col:42> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56097d5a5930 <col:54> 'P' lvalue ParmVar 0x56097d579548 'parser' 'P'
|         |-DeclRefExpr 0x56097d5a5950 <col:62> 'T1' lvalue ParmVar 0x56097d5795e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56097d5a5970 <col:66> 'T2' lvalue ParmVar 0x56097d579688 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56097d579e78 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56097d579890 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d579908 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d579988 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d579dd8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d579a50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d579ad0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56097d579b48 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56097d579be8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56097d579c88 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56097d5a5b78 <col:74, line:498:5>
|     |-CallExpr 0x56097d5a5af0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a5a00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56097d5a5a40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a5a50 <col:30> 'const char *' lvalue ParmVar 0x56097d579a50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a5a70 <col:39> 'int' lvalue ParmVar 0x56097d579ad0 'flags' 'int'
|     | |-DeclRefExpr 0x56097d5a5a90 <col:46> 'P' lvalue ParmVar 0x56097d579b48 'parser' 'P'
|     | |-DeclRefExpr 0x56097d5a5ab0 <col:54> 'T1' lvalue ParmVar 0x56097d579be8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56097d5a5ad0 <col:58> 'T2' lvalue ParmVar 0x56097d579c88 'x2' 'T2 &'
|     `-ReturnStmt 0x56097d5a5b68 <line:497:9, col:17>
|       `-UnaryOperator 0x56097d5a5b50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a5b40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d57a1d8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56097d579ef8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57a138 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56097d579fb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57a028 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a5cc0 <col:52, line:509:5>
|     `-ReturnStmt 0x56097d5a5cb0 <line:508:9, col:44>
|       `-CallExpr 0x56097d5a5c78 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5ba8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5c18 <col:26> 'const char *' lvalue ParmVar 0x56097d579fb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a5c38 <col:35> 'int' 0
|         `-DeclRefExpr 0x56097d5a5c58 <col:38> 'P' lvalue ParmVar 0x56097d57a028 'parser' 'P'
|-FunctionTemplateDecl 0x56097d57a4d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56097d57a240 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57a438 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56097d57a2f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57a368 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a5e00 <col:54, line:513:5>
|     `-ReturnStmt 0x56097d5a5df0 <line:512:9, col:52>
|       `-CallExpr 0x56097d5a5db8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5ce8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5d58 <col:26> 'const char *' lvalue ParmVar 0x56097d57a2f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a5d78 <col:35> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56097d5a5d98 <col:46> 'P' lvalue ParmVar 0x56097d57a368 'parser' 'P'
|-FunctionTemplateDecl 0x56097d57a7d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56097d57a540 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57a738 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56097d57a5f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57a668 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a5f40 <col:54, line:517:5>
|     `-ReturnStmt 0x56097d5a5f30 <line:516:9, col:53>
|       `-CallExpr 0x56097d5a5ef8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5e98 <col:26> 'const char *' lvalue ParmVar 0x56097d57a5f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a5eb8 <col:35> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int'
|         `-DeclRefExpr 0x56097d5a5ed8 <col:47> 'P' lvalue ParmVar 0x56097d57a668 'parser' 'P'
|-FunctionTemplateDecl 0x56097d57aad8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56097d57a840 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57aa38 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56097d57a8f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57a968 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a6130 <col:55, line:521:5>
|     `-ReturnStmt 0x56097d5a6120 <line:520:9, col:65>
|       `-CallExpr 0x56097d5a60e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a5f68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a5fd8 <col:26> 'const char *' lvalue ParmVar 0x56097d57a8f0 'keyword' 'const char *'
|         |-BinaryOperator 0x56097d5a60a8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56097d5a6058 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56097d5a6038 <col:35> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56097d5a6090 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56097d5a6070 <col:47> 'const int' lvalue Var 0x56097d5700d0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56097d5a60c8 <col:59> 'P' lvalue ParmVar 0x56097d57a968 'parser' 'P'
|-FunctionTemplateDecl 0x56097d57aea8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56097d57ab40 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57ae08 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56097d57abf0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57ac70 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57ace8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a6270 <col:63, line:526:5>
|     |-CallExpr 0x56097d5a61f8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a6148 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56097d5a6188 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a6198 <col:35> 'const char *' lvalue ParmVar 0x56097d57abf0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56097d5a61b8 <col:44> 'int' lvalue ParmVar 0x56097d57ac70 'flags' 'int'
|     | `-DeclRefExpr 0x56097d5a61d8 <col:51> 'P' lvalue ParmVar 0x56097d57ace8 'parser' 'P'
|     `-ReturnStmt 0x56097d5a6260 <line:525:9, col:17>
|       `-UnaryOperator 0x56097d5a6248 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a6238 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d57b2f8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56097d57af18 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57af98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57b258 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d57b058 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57b0d0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57b178 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a63c8 <col:58, line:541:5>
|     `-ReturnStmt 0x56097d5a63b8 <line:540:9, col:39>
|       `-CallExpr 0x56097d5a6380 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a62a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6320 <col:21> 'const char *' lvalue ParmVar 0x56097d57b058 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a6340 <col:30> 'P' lvalue ParmVar 0x56097d57b0d0 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a6360 <col:38> 'T' lvalue ParmVar 0x56097d57b178 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57b748 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56097d57b368 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57b3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57b6a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d57b4a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57b520 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57b5c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a6500 <col:60, line:545:5>
|     `-ReturnStmt 0x56097d5a64f0 <line:544:9, col:41>
|       `-CallExpr 0x56097d5a64b8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a63f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6458 <col:23> 'const char *' lvalue ParmVar 0x56097d57b4a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a6478 <col:32> 'P' lvalue ParmVar 0x56097d57b520 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a6498 <col:40> 'T' lvalue ParmVar 0x56097d57b5c8 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57bb98 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56097d57b7b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57b838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57baf8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d57b8f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57b970 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57ba18 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a6638 <col:60, line:549:5>
|     `-ReturnStmt 0x56097d5a6628 <line:548:9, col:41>
|       `-CallExpr 0x56097d5a65f0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6590 <col:23> 'const char *' lvalue ParmVar 0x56097d57b8f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a65b0 <col:32> 'P' lvalue ParmVar 0x56097d57b970 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a65d0 <col:40> 'T' lvalue ParmVar 0x56097d57ba18 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57bfe8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56097d57bc08 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57bc88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57bf48 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d57bd48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57bdc0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57be68 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a6770 <col:61, line:553:5>
|     `-ReturnStmt 0x56097d5a6760 <line:552:9, col:42>
|       `-CallExpr 0x56097d5a6728 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a66c8 <col:24> 'const char *' lvalue ParmVar 0x56097d57bd48 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a66e8 <col:33> 'P' lvalue ParmVar 0x56097d57bdc0 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a6708 <col:41> 'T' lvalue ParmVar 0x56097d57be68 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57c4c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56097d57c058 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57c0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57c428 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56097d57c198 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57c218 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57c290 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57c338 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a68e8 <col:69, line:557:5>
|     `-ReturnStmt 0x56097d5a68d8 <line:556:9, col:46>
|       `-CallExpr 0x56097d5a6898 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6798 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6818 <col:21> 'const char *' lvalue ParmVar 0x56097d57c198 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a6838 <col:30> 'int' lvalue ParmVar 0x56097d57c218 'flags' 'int'
|         |-DeclRefExpr 0x56097d5a6858 <col:37> 'P' lvalue ParmVar 0x56097d57c290 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a6878 <col:45> 'T' lvalue ParmVar 0x56097d57c338 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57c7d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56097d57c540 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57c738 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56097d57c5f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57c668 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a6a28 <col:56, line:571:5>
|     `-ReturnStmt 0x56097d5a6a18 <line:570:9, col:48>
|       `-CallExpr 0x56097d5a69e0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6980 <col:30> 'const char *' lvalue ParmVar 0x56097d57c5f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a69a0 <col:39> 'int' 0
|         `-DeclRefExpr 0x56097d5a69c0 <col:42> 'P' lvalue ParmVar 0x56097d57c668 'parser' 'P'
|-FunctionTemplateDecl 0x56097d57cb68 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56097d57c840 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d57cac8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56097d57c8f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57c970 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57c9e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56097d5a6bf8 <col:67, line:576:5>
|     |-CallExpr 0x56097d5a6b80 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a6a40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56097d5a6a80 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a6a90 <col:39> 'const char *' lvalue ParmVar 0x56097d57c8f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x56097d5a6b40 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56097d5a6af0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56097d5a6ab0 <col:48> 'int' lvalue ParmVar 0x56097d57c970 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56097d5a6b28 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56097d5a6b08 <col:56> 'const int' lvalue Var 0x56097d5702c0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56097d5a6b60 <col:68> 'P' lvalue ParmVar 0x56097d57c9e8 'parser' 'P'
|     `-ReturnStmt 0x56097d5a6be8 <line:575:9, col:17>
|       `-UnaryOperator 0x56097d5a6bd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a6bc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d57cfb8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56097d57cbd8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57cc58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57cf18 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56097d57cd18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57cd90 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57ce38 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a6d68 <col:62, line:592:5>
|     `-ReturnStmt 0x56097d5a6d58 <line:591:9, col:51>
|       `-CallExpr 0x56097d5a6d18 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6c28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a6c98 <col:30> 'const char *' lvalue ParmVar 0x56097d57cd18 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a6cb8 <col:39> 'int' 0
|         |-DeclRefExpr 0x56097d5a6cd8 <col:42> 'P' lvalue ParmVar 0x56097d57cd90 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a6cf8 <col:50> 'T' lvalue ParmVar 0x56097d57ce38 'x' 'T &'
|-FunctionTemplateDecl 0x56097d57d498 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56097d57d028 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57d0a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57d3f8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56097d57d168 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57d1e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57d260 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57d308 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a6f60 <col:73, line:597:5>
|     |-CallExpr 0x56097d5a6ee0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a6d80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56097d5a6dc0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a6dd0 <col:39> 'const char *' lvalue ParmVar 0x56097d57d168 'keyword' 'const char *'
|     | |-BinaryOperator 0x56097d5a6e80 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56097d5a6e30 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56097d5a6df0 <col:48> 'int' lvalue ParmVar 0x56097d57d1e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56097d5a6e68 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56097d5a6e48 <col:56> 'const int' lvalue Var 0x56097d5702c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56097d5a6ea0 <col:68> 'P' lvalue ParmVar 0x56097d57d260 'parser' 'P'
|     | `-DeclRefExpr 0x56097d5a6ec0 <col:76> 'T' lvalue ParmVar 0x56097d57d308 'x' 'T &'
|     `-ReturnStmt 0x56097d5a6f50 <line:596:9, col:17>
|       `-UnaryOperator 0x56097d5a6f38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a6f28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d57da48 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56097d57d510 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57d588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57d9a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56097d57d648 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57d6c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57d880 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56097d5a70d0 <col:65, line:614:5>
|     `-ReturnStmt 0x56097d5a70c0 <line:613:9, col:46>
|       `-CallExpr 0x56097d5a7080 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a6f90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a7000 <col:25> 'const char *' lvalue ParmVar 0x56097d57d648 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a7020 <col:34> 'int' 0
|         |-DeclRefExpr 0x56097d5a7040 <col:37> 'P' lvalue ParmVar 0x56097d57d6c0 'parser' 'P'
|         `-DeclRefExpr 0x56097d5a7060 <col:45> 'Vector<T>' lvalue ParmVar 0x56097d57d880 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56097d57de78 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56097d57dab8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d57ddd8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56097d57db70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57dcc0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56097d5a72f0 <col:55, line:618:5>
|     `-ReturnStmt 0x56097d5a72e0 <line:617:9, col:55>
|       `-CallExpr 0x56097d5a72a0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a70f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a7168 <col:25> 'const char *' lvalue ParmVar 0x56097d57db70 'keyword' 'const char *'
|         |-IntegerLiteral 0x56097d5a7188 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56097d5a7260 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56097d5a7280 <col:54> 'Vector<T>' lvalue ParmVar 0x56097d57dcc0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56097d57e448 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56097d57dee0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57df58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57e3a8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56097d57e018 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57e098 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57e110 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56097d57e260 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56097d5a74e8 <col:76, line:623:5>
|     |-CallExpr 0x56097d5a7468 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56097d5a7308 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56097d5a7348 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56097d5a7358 <col:34> 'const char *' lvalue ParmVar 0x56097d57e018 'keyword' 'const char *'
|     | |-BinaryOperator 0x56097d5a7408 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56097d5a73b8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56097d5a7378 <col:43> 'int' lvalue ParmVar 0x56097d57e098 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56097d5a73f0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56097d5a73d0 <col:51> 'const int' lvalue Var 0x56097d5702c0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56097d5a7428 <col:63> 'P' lvalue ParmVar 0x56097d57e110 'parser' 'P'
|     | `-DeclRefExpr 0x56097d5a7448 <col:71> 'Vector<T>' lvalue ParmVar 0x56097d57e260 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56097d5a74d8 <line:622:9, col:17>
|       `-UnaryOperator 0x56097d5a74c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a74b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d57e988 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56097d57e4c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d57e538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d57e8e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56097d57e5f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d57e678 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56097d57e7c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56097d5a7750 <col:66, line:627:5>
|     `-ReturnStmt 0x56097d5a7740 <line:626:9, col:59>
|       `-CallExpr 0x56097d5a7700 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56097d5a7518 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56097d5a7588 <col:25> 'const char *' lvalue ParmVar 0x56097d57e5f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56097d5a75a8 <col:34> 'int' lvalue ParmVar 0x56097d57e678 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56097d5a76c0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56097d5a76e0 <col:58> 'Vector<T>' lvalue ParmVar 0x56097d57e7c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56097d57ea18 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56097d5a77d0 <col:25, line:633:5>
|   `-ReturnStmt 0x56097d5a77c0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56097d5a77a8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56097d5a7778 <col:16> 'const bool' lvalue ->_status 0x56097d58a1d8
|         `-CXXThisExpr 0x56097d5a7768 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56097d57eb98 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56097d57ead0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56097d5a78b8 <col:27, line:639:5>
|   |-BinaryOperator 0x56097d5a7860 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56097d5a77e8 <col:9> 'bool' lvalue ParmVar 0x56097d57ead0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56097d5a7848 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56097d5a7818 <col:13> 'bool' lvalue ->_status 0x56097d58a1d8
|   |     `-CXXThisExpr 0x56097d5a7808 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56097d5a78a8 <line:638:9, col:17>
|     `-UnaryOperator 0x56097d5a7890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a7880 <col:17> 'Args *' this
|-CXXMethodDecl 0x56097d57ed18 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56097d57ec58 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56097d5a79a8 <col:39, line:644:5>
|   |-BinaryOperator 0x56097d5a7950 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56097d5a78d8 <col:9> 'bool' lvalue ParmVar 0x56097d57ec58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56097d5a7938 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56097d5a7908 <col:13> 'const bool' lvalue ->_status 0x56097d58a1d8
|   |     `-CXXThisExpr 0x56097d5a78f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56097d5a7998 <line:643:9, col:17>
|     `-UnaryOperator 0x56097d5a7980 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a7970 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56097d57ede0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56097d5a7a50 <col:30, line:651:5>
|   `-ReturnStmt 0x56097d5a7a40 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56097d5a7a28 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56097d5a79f8 <col:16> 'bool' lvalue ->_read_status 0x56097d565740
|         `-ImplicitCastExpr 0x56097d5a79d8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56097d5a79c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56097d57ef28 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56097d57ee98 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56097d5a7b58 <col:32, line:658:5>
|   |-BinaryOperator 0x56097d5a7b00 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56097d5a7a68 <col:9> 'bool' lvalue ParmVar 0x56097d57ee98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56097d5a7ae8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56097d5a7ab8 <col:13> 'bool' lvalue ->_read_status 0x56097d565740
|   |     `-ImplicitCastExpr 0x56097d5a7a98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56097d5a7a88 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56097d5a7b48 <line:657:9, col:17>
|     `-UnaryOperator 0x56097d5a7b30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a7b20 <col:17> 'Args *' this
|-CXXMethodDecl 0x56097d57f078 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56097d57efe8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56097d5a7c68 <col:44, line:663:5>
|   |-BinaryOperator 0x56097d5a7c10 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56097d5a7b78 <col:9> 'bool' lvalue ParmVar 0x56097d57efe8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56097d5a7bf8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56097d5a7bc8 <col:13> 'bool' lvalue ->_read_status 0x56097d565740
|   |     `-ImplicitCastExpr 0x56097d5a7ba8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56097d5a7b98 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56097d5a7c58 <line:662:9, col:17>
|     `-UnaryOperator 0x56097d5a7c40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d5a7c30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56097d57f140 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56097d57f208 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56097d57f2d0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56097d57f398 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56097d585028 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56097d57f438 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d584f88 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56097d584e90 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a8020 <col:19, line:706:5>
|     `-IfStmt 0x56097d5a7ff8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56097d5a7d68 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56097d5a7f28 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56097d5a7ef8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56097d5a7eb8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56097d5a7dc0 <col:42> '<bound member function type>' ->simple_slot 0x56097d5a2aa0
|       |     | `-CXXThisExpr 0x56097d5a7db0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56097d5a7e58 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56097d5a7e10 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56097d2fea18
|       |     | `-DeclRefExpr 0x56097d5a7df0 <col:55> 'T' lvalue ParmVar 0x56097d584e90 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56097d5a7e98 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56097d5a7fe8 <line:705:13, col:34>
|         `-CallExpr 0x56097d5a7fc0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56097d5a7f48 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56097d5a7fa0 <col:33> 'T' lvalue ParmVar 0x56097d584e90 'x' 'T &'
|-FunctionTemplateDecl 0x56097d5852f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56097d585088 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d585258 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56097d585168 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56097d5a8400 <col:31, line:717:5>
|     |-DeclStmt 0x56097d5a8160 <line:713:9, col:23>
|     | `-VarDecl 0x56097d5a8048 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56097d5a8138 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56097d5a80c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56097d5a8118 <col:21> 'T' lvalue ParmVar 0x56097d585168 'x' 'T &'
|     |-IfStmt 0x56097d5a83b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56097d5a8258 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56097d5a8390 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56097d5a8330 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56097d5a82c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|     |   | `-DeclRefExpr 0x56097d5a82a0 <col:14> 'T *' lvalue Var 0x56097d5a8048 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56097d5a8370 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56097d5a83e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x56097d5a83c8 <col:16> 'T *' lvalue Var 0x56097d5a8048 's' 'T *'
|-FunctionTemplateDecl 0x56097d585708 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56097d585358 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d5853d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56097d585668 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56097d5854b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56097d585558 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56097d5a8710 <col:37, line:726:5>
|     |-IfStmt 0x56097d5a86a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56097d5a86c0 <line:723:13, col:26>
|     | | `-VarDecl 0x56097d5a8468 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56097d5a8558 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56097d5a84e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56097d5a8538 <col:25> 'T' lvalue ParmVar 0x56097d5854b8 'x' 'T &'
|     | |-DeclRefExpr 0x56097d5a8580 <col:16> 'T *' lvalue Var 0x56097d5a8468 's' 'T *'
|     | `-BinaryOperator 0x56097d5a8680 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56097d5a8630 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56097d5a85c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|     |   | `-DeclRefExpr 0x56097d5a85a0 <col:14> 'T *' lvalue Var 0x56097d5a8468 's' 'T *'
|     |   `-DeclRefExpr 0x56097d5a8660 <col:18> 'const V' lvalue ParmVar 0x56097d585558 'value' 'const V &'
|     `-ReturnStmt 0x56097d5a8700 <line:725:9, col:17>
|       `-UnaryOperator 0x56097d5a86e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56097d5a86d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56097d585b08 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56097d585770 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56097d585a68 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56097d585820 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5858a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56097d585948 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56097d5a9530 <col:65, line:737:5>
|     |-DeclStmt 0x56097d5a87a8 <line:732:9, col:26>
|     | `-VarDecl 0x56097d5a8740 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56097d5a94f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56097d5a9518 <line:733:13, col:58>
|       | `-VarDecl 0x56097d5a87d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56097d5a89b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56097d5a8980 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56097d5a8968 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56097d5a8948 <col:26, col:58> 'String' (CXXTemporary 0x56097d5a8948)
|       |           `-CXXMemberCallExpr 0x56097d5a88d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56097d5a8848 <col:26> '<bound member function type>' ->find 0x56097d5a20b8
|       |             | `-CXXThisExpr 0x56097d5a8838 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56097d5a8910 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5a8878 <col:31> 'const char *' lvalue ParmVar 0x56097d585820 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56097d5a8928 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5a8898 <col:40> 'int' lvalue ParmVar 0x56097d5858a0 'flags' 'int'
|       |             `-DeclRefExpr 0x56097d5a88b8 <col:47> 'Args::Slot *' lvalue Var 0x56097d5a8740 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56097d5a8a68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56097d5a8a50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56097d5a8a30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56097d5a8a00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |       `-ImplicitCastExpr 0x56097d5a89e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56097d5a89c8 <col:20> 'String' lvalue Var 0x56097d5a87d0 'str' 'String'
|       `-CompoundStmt 0x56097d5a94d8 <col:61, line:736:9>
|         |-DeclStmt 0x56097d5a8f20 <line:734:13, col:76>
|         | `-VarDecl 0x56097d5a8ab8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56097d5a8ef0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56097d5a8e60 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56097d5a8ea8 <col:60> 'T' lvalue ParmVar 0x56097d585948 'variable' 'T &'
|         |     `-UnaryOperator 0x56097d5a8ed8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56097d5a8ec8 <col:71> 'Args *' this
|         `-CallExpr 0x56097d5a94a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56097d5a8f48 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|           | `-CXXThisExpr 0x56097d5a8f38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56097d5a9468 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56097d5a8f78 <col:23> 'T *' lvalue Var 0x56097d5a8ab8 's' 'T *'
|           | `-CallExpr 0x56097d5a9428 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56097d5a9200 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56097d5a9300 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56097d5a9320 <col:86> 'String' lvalue Var 0x56097d5a87d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56097d5a93d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56097d5a9360 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|           |   | `-DeclRefExpr 0x56097d5a9340 <col:92> 'T *' lvalue Var 0x56097d5a8ab8 's' 'T *'
|           |   `-UnaryOperator 0x56097d5a9410 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56097d5a9400 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56097d5a9488 <col:103> 'Args::Slot *' lvalue Var 0x56097d5a8740 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d586058 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56097d585b78 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d585bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56097d585fb8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56097d585cb8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d585d38 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56097d585dd8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56097d585e78 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56097d5acc90 <col:88, line:745:5>
|     |-DeclStmt 0x56097d5a95c8 <line:741:9, col:26>
|     | `-VarDecl 0x56097d5a9560 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56097d5ac0a0 <line:742:9, col:55>
|     | `-VarDecl 0x56097d5a95f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56097d5ac088 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56097d5ac058 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56097d5ac040 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56097d5ac020 <col:22, col:54> 'String' (CXXTemporary 0x56097d5ac020)
|     |           `-CXXMemberCallExpr 0x56097d5abfb0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56097d5a9668 <col:22> '<bound member function type>' ->find 0x56097d5a20b8
|     |             | `-CXXThisExpr 0x56097d5a9658 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56097d5abfe8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56097d5abf50 <col:27> 'const char *' lvalue ParmVar 0x56097d585cb8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56097d5ac000 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56097d5abf70 <col:36> 'int' lvalue ParmVar 0x56097d585d38 'flags' 'int'
|     |             `-DeclRefExpr 0x56097d5abf90 <col:43> 'Args::Slot *' lvalue Var 0x56097d5a9560 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56097d5ac480 <line:743:9, col:72>
|     | `-VarDecl 0x56097d5ac0f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56097d5ac450 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56097d5ac3c0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56097d5ac408 <col:56> 'T' lvalue ParmVar 0x56097d585dd8 'variable' 'T &'
|     |     `-UnaryOperator 0x56097d5ac438 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56097d5ac428 <col:67> 'Args *' this
|     `-CallExpr 0x56097d5acc60 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56097d5ac4a8 <col:9> '<bound member function type>' ->postparse 0x56097d5a22c8
|       | `-CXXThisExpr 0x56097d5ac498 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56097d5acc20 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56097d5ac4d8 <col:19> 'T *' lvalue Var 0x56097d5ac0f8 's' 'T *'
|       | `-ParenExpr 0x56097d5acc00 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56097d5acbd0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56097d5acbb8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56097d5acba0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56097d5acb80 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56097d5acb50 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |     |       `-ImplicitCastExpr 0x56097d5acb38 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56097d5ac4f8 <col:25> 'String' lvalue Var 0x56097d5a95f0 'str' 'String'
|       |     |-CallExpr 0x56097d5ac9a8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56097d5ac780 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56097d5ac880 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56097d5ac8a0 <col:89> 'String' lvalue Var 0x56097d5a95f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56097d5ac950 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56097d5ac8e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|       |     | | `-DeclRefExpr 0x56097d5ac8c0 <col:95> 'T *' lvalue Var 0x56097d5ac0f8 's' 'T *'
|       |     | `-UnaryOperator 0x56097d5ac990 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56097d5ac980 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56097d5acb18 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56097d5acaf8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56097d5acac8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56097d5aca78 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56097d5aca08 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|       |         | | `-DeclRefExpr 0x56097d5ac9e8 <col:109> 'T *' lvalue Var 0x56097d5ac0f8 's' 'T *'
|       |         | `-DeclRefExpr 0x56097d5acaa8 <col:113> 'const V' lvalue ParmVar 0x56097d585e78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56097d5acae8 <col:120> 'bool' true
|       `-DeclRefExpr 0x56097d5acc40 <col:128> 'Args::Slot *' lvalue Var 0x56097d5a9560 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d586588 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56097d5860d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d586148 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d5864e8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56097d586208 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d586288 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56097d586300 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56097d5863a8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56097d5ad888 <col:75, line:754:5>
|     |-DeclStmt 0x56097d5acd38 <line:749:9, col:26>
|     | `-VarDecl 0x56097d5accd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56097d5ad850 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56097d5ad870 <line:750:13, col:58>
|       | `-VarDecl 0x56097d5acd60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56097d5acf40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56097d5acf10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56097d5acef8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56097d5aced8 <col:26, col:58> 'String' (CXXTemporary 0x56097d5aced8)
|       |           `-CXXMemberCallExpr 0x56097d5ace68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56097d5acdd8 <col:26> '<bound member function type>' ->find 0x56097d5a20b8
|       |             | `-CXXThisExpr 0x56097d5acdc8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56097d5acea0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5ace08 <col:31> 'const char *' lvalue ParmVar 0x56097d586208 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56097d5aceb8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5ace28 <col:40> 'int' lvalue ParmVar 0x56097d586288 'flags' 'int'
|       |             `-DeclRefExpr 0x56097d5ace48 <col:47> 'Args::Slot *' lvalue Var 0x56097d5accd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56097d5acff8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56097d5acfe0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56097d5acfc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56097d5acf90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |       `-ImplicitCastExpr 0x56097d5acf78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56097d5acf58 <col:20> 'String' lvalue Var 0x56097d5acd60 'str' 'String'
|       `-CompoundStmt 0x56097d5ad830 <col:61, line:753:9>
|         |-DeclStmt 0x56097d5ad3d0 <line:751:13, col:63>
|         | `-VarDecl 0x56097d5ad048 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56097d5ad3a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56097d5ad310 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56097d5ad358 <col:47> 'T' lvalue ParmVar 0x56097d5863a8 'variable' 'T &'
|         |     `-UnaryOperator 0x56097d5ad388 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56097d5ad378 <col:58> 'Args *' this
|         `-CallExpr 0x56097d5ad800 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56097d5ad3f8 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|           | `-CXXThisExpr 0x56097d5ad3e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56097d5ad7c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56097d5ad428 <col:23> 'T *' lvalue Var 0x56097d5ad048 's' 'T *'
|           | `-CallExpr 0x56097d5ad780 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56097d5ad610 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56097d5ad658 <col:56> 'P' lvalue ParmVar 0x56097d586300 'parser' 'P'
|           |   |-DeclRefExpr 0x56097d5ad678 <col:64> 'String' lvalue Var 0x56097d5acd60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56097d5ad728 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56097d5ad6b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|           |   | `-DeclRefExpr 0x56097d5ad698 <col:70> 'T *' lvalue Var 0x56097d5ad048 's' 'T *'
|           |   `-UnaryOperator 0x56097d5ad768 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56097d5ad758 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56097d5ad7e0 <col:81> 'Args::Slot *' lvalue Var 0x56097d5accd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d586be8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56097d586600 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56097d586678 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56097d5866f8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56097d586b48 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56097d5867c0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d586840 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56097d5868b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56097d586958 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56097d5869f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56097d5ae618 <col:98, line:762:5>
|     |-DeclStmt 0x56097d5ad920 <line:758:9, col:26>
|     | `-VarDecl 0x56097d5ad8b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56097d5adb40 <line:759:9, col:55>
|     | `-VarDecl 0x56097d5ad948 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56097d5adb28 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56097d5adaf8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56097d5adae0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56097d5adac0 <col:22, col:54> 'String' (CXXTemporary 0x56097d5adac0)
|     |           `-CXXMemberCallExpr 0x56097d5ada50 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56097d5ad9c0 <col:22> '<bound member function type>' ->find 0x56097d5a20b8
|     |             | `-CXXThisExpr 0x56097d5ad9b0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56097d5ada88 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56097d5ad9f0 <col:27> 'const char *' lvalue ParmVar 0x56097d5867c0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56097d5adaa0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56097d5ada10 <col:36> 'int' lvalue ParmVar 0x56097d586840 'flags' 'int'
|     |             `-DeclRefExpr 0x56097d5ada30 <col:43> 'Args::Slot *' lvalue Var 0x56097d5ad8b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56097d5adf60 <line:760:9, col:59>
|     | `-VarDecl 0x56097d5adb98 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56097d5adf30 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56097d5adea0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56097d5adee8 <col:43> 'T' lvalue ParmVar 0x56097d586958 'variable' 'T &'
|     |     `-UnaryOperator 0x56097d5adf18 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56097d5adf08 <col:54> 'Args *' this
|     `-CallExpr 0x56097d5ae5e8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56097d5adf88 <col:9> '<bound member function type>' ->postparse 0x56097d5a22c8
|       | `-CXXThisExpr 0x56097d5adf78 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56097d5ae5a8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56097d5adfb8 <col:19> 'T *' lvalue Var 0x56097d5adb98 's' 'T *'
|       | `-ParenExpr 0x56097d5ae588 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56097d5ae558 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56097d5ae540 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56097d5ae528 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56097d5ae508 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56097d5ae4d8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |     |       `-ImplicitCastExpr 0x56097d5ae4c0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56097d5adfd8 <col:25> 'String' lvalue Var 0x56097d5ad948 'str' 'String'
|       |     |-CallExpr 0x56097d5ae330 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56097d5ae1c0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56097d5ae208 <col:59> 'P' lvalue ParmVar 0x56097d5868b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56097d5ae228 <col:67> 'String' lvalue Var 0x56097d5ad948 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56097d5ae2d8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56097d5ae268 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|       |     | | `-DeclRefExpr 0x56097d5ae248 <col:73> 'T *' lvalue Var 0x56097d5adb98 's' 'T *'
|       |     | `-UnaryOperator 0x56097d5ae318 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56097d5ae308 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56097d5ae4a0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56097d5ae480 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56097d5ae450 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56097d5ae400 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56097d5ae390 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|       |         | | `-DeclRefExpr 0x56097d5ae370 <col:87> 'T *' lvalue Var 0x56097d5adb98 's' 'T *'
|       |         | `-DeclRefExpr 0x56097d5ae430 <col:91> 'const V' lvalue ParmVar 0x56097d5869f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56097d5ae470 <col:98> 'bool' true
|       `-DeclRefExpr 0x56097d5ae5c8 <col:106> 'Args::Slot *' lvalue Var 0x56097d5ad8b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d587258 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56097d586c68 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d586ce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56097d586d68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56097d5871b8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56097d586e30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d586eb0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56097d586f28 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56097d586fc8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56097d587068 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56097d5af5f8 <col:60, line:773:5>
|     |-DeclStmt 0x56097d5ae6c0 <line:767:9, col:26>
|     | `-VarDecl 0x56097d5ae658 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56097d5af5c0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56097d5af5e0 <line:768:13, col:58>
|       | `-VarDecl 0x56097d5ae6e8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56097d5ae8c8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56097d5ae898 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56097d5ae880 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56097d5ae860 <col:26, col:58> 'String' (CXXTemporary 0x56097d5ae860)
|       |           `-CXXMemberCallExpr 0x56097d5ae7f0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56097d5ae760 <col:26> '<bound member function type>' ->find 0x56097d5a20b8
|       |             | `-CXXThisExpr 0x56097d5ae750 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56097d5ae828 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5ae790 <col:31> 'const char *' lvalue ParmVar 0x56097d586e30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56097d5ae840 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5ae7b0 <col:40> 'int' lvalue ParmVar 0x56097d586eb0 'flags' 'int'
|       |             `-DeclRefExpr 0x56097d5ae7d0 <col:47> 'Args::Slot *' lvalue Var 0x56097d5ae658 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56097d5ae980 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56097d5ae968 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56097d5ae948 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56097d5ae918 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |       `-ImplicitCastExpr 0x56097d5ae900 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56097d5ae8e0 <col:20> 'String' lvalue Var 0x56097d5ae6e8 'str' 'String'
|       `-CompoundStmt 0x56097d5af598 <col:61, line:772:9>
|         |-DeclStmt 0x56097d5aecc0 <line:769:13, col:66>
|         | `-VarDecl 0x56097d5ae9d8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56097d5aec90 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56097d5aec00 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56097d5aec48 <col:49> 'T1' lvalue ParmVar 0x56097d586fc8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56097d5aec78 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56097d5aec68 <col:61> 'Args *' this
|         |-DeclStmt 0x56097d5af030 <line:770:13, col:66>
|         | `-VarDecl 0x56097d5aed48 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56097d5af000 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56097d5aef70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56097d5aefb8 <col:49> 'T2' lvalue ParmVar 0x56097d587068 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56097d5aefe8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56097d5aefd8 <col:61> 'Args *' this
|         `-CallExpr 0x56097d5af568 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56097d5af058 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|           | `-CXXThisExpr 0x56097d5af048 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56097d5af528 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56097d5af0c8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56097d5af088 <col:23> 'T1 *' lvalue Var 0x56097d5ae9d8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56097d5af0a8 <col:29> 'T2 *' lvalue Var 0x56097d5aed48 's2' 'T2 *'
|           | `-CallExpr 0x56097d5af4e0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56097d5af2b0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56097d5af2f8 <col:63> 'P' lvalue ParmVar 0x56097d586f28 'parser' 'P'
|           |   |-DeclRefExpr 0x56097d5af318 <col:71> 'String' lvalue Var 0x56097d5ae6e8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56097d5af3c8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56097d5af358 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|           |   | `-DeclRefExpr 0x56097d5af338 <col:77> 'T1 *' lvalue Var 0x56097d5ae9d8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56097d5af488 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56097d5af418 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|           |   | `-DeclRefExpr 0x56097d5af3f8 <col:82> 'T2 *' lvalue Var 0x56097d5aed48 's2' 'T2 *'
|           |   `-UnaryOperator 0x56097d5af4c8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56097d5af4b8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56097d5af548 <col:94> 'Args::Slot *' lvalue Var 0x56097d5ae658 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d587648 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56097d5872d8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d5875a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56097d587390 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d587410 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56097d587488 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56097d5afb10 <col:67, line:780:5>
|     |-DeclStmt 0x56097d5af690 <line:777:9, col:26>
|     | `-VarDecl 0x56097d5af628 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56097d5afad8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56097d5afaf8 <line:778:13, col:58>
|       | `-VarDecl 0x56097d5af6b8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56097d5af898 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56097d5af868 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56097d5af850 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56097d5af830 <col:26, col:58> 'String' (CXXTemporary 0x56097d5af830)
|       |           `-CXXMemberCallExpr 0x56097d5af7c0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56097d5af730 <col:26> '<bound member function type>' ->find 0x56097d5a20b8
|       |             | `-CXXThisExpr 0x56097d5af720 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56097d5af7f8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5af760 <col:31> 'const char *' lvalue ParmVar 0x56097d587390 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56097d5af810 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56097d5af780 <col:40> 'int' lvalue ParmVar 0x56097d587410 'flags' 'int'
|       |             `-DeclRefExpr 0x56097d5af7a0 <col:47> 'Args::Slot *' lvalue Var 0x56097d5af628 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56097d5af950 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56097d5af938 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56097d5af918 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56097d5af8e8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|       |       `-ImplicitCastExpr 0x56097d5af8d0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56097d5af8b0 <col:20> 'String' lvalue Var 0x56097d5af6b8 'str' 'String'
|       `-CallExpr 0x56097d5afaa8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56097d5af978 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|         | `-CXXThisExpr 0x56097d5af968 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56097d5afa58 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56097d5af9c8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56097d5af9a8 <col:23> 'P' lvalue ParmVar 0x56097d587488 'parser' 'P'
|         | |-DeclRefExpr 0x56097d5afa10 <col:36> 'String' lvalue Var 0x56097d5af6b8 'str' 'String'
|         | `-UnaryOperator 0x56097d5afa40 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56097d5afa30 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56097d5afa88 <col:49> 'Args::Slot *' lvalue Var 0x56097d5af628 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56097d5879e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56097d5876b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56097d587948 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56097d587770 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5877f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56097d587868 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56097d5b0480 <col:71, line:792:5>
|     |-DeclStmt 0x56097d5afba8 <line:784:9, col:26>
|     | `-VarDecl 0x56097d5afb40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56097d5afc78 <line:785:9, col:29>
|     | `-VarDecl 0x56097d5afbd8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56097d5afc60 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56097d5afc40 <col:28> 'int' 1
|     |-WhileStmt 0x56097d5b0330 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56097d5b0350 <line:786:16, col:61>
|     | | `-VarDecl 0x56097d5afca0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56097d5afe80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56097d5afe50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56097d5afe38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56097d5afe18 <col:29, col:61> 'String' (CXXTemporary 0x56097d5afe18)
|     | |           `-CXXMemberCallExpr 0x56097d5afda8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56097d5afd18 <col:29> '<bound member function type>' ->find 0x56097d5a20b8
|     | |             | `-CXXThisExpr 0x56097d5afd08 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56097d5afde0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5afd48 <col:34> 'const char *' lvalue ParmVar 0x56097d587770 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56097d5afdf8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5afd68 <col:43> 'int' lvalue ParmVar 0x56097d5877f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x56097d5afd88 <col:50> 'Args::Slot *' lvalue Var 0x56097d5afb40 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56097d5aff38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56097d5aff20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56097d5aff00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56097d5afed0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|     | |       `-ImplicitCastExpr 0x56097d5afeb8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56097d5afe98 <col:23> 'String' lvalue Var 0x56097d5afca0 'str' 'String'
|     | `-CompoundStmt 0x56097d5b0308 <col:64, line:790:9>
|     |   |-CallExpr 0x56097d5b0090 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56097d5aff60 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|     |   | | `-CXXThisExpr 0x56097d5aff50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56097d5b0040 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56097d5affb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56097d5aff90 <col:23> 'P' lvalue ParmVar 0x56097d587868 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56097d5afff8 <col:36> 'String' lvalue Var 0x56097d5afca0 'str' 'String'
|     |   | | `-UnaryOperator 0x56097d5b0028 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56097d5b0018 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56097d5b0070 <col:49> 'Args::Slot *' lvalue Var 0x56097d5afb40 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56097d5b0228 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56097d5b00c0 <col:13> 'int' lvalue Var 0x56097d5afbd8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56097d5b0210 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56097d5b01f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56097d5b0158 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56097d5b0138 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56097d5b0120 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56097d5b00e0 <col:28> 'int' lvalue Var 0x56097d5afbd8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56097d5b0100 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56097d5b01d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56097d5b01a8 <col:49> 'bool' lvalue ->_read_status 0x56097d565740
|     |   |         `-ImplicitCastExpr 0x56097d5b0188 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56097d5b0178 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56097d5b02d8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56097d5b0248 <col:13> 'int' lvalue ParmVar 0x56097d5877f0 'flags' 'int'
|     |     `-UnaryOperator 0x56097d5b02c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56097d5b02a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56097d5b0288 <col:23> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56097d5b0460 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56097d5b0398 <col:9> 'bool' lvalue ->_read_status 0x56097d565740
|       | `-ImplicitCastExpr 0x56097d5b0378 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56097d5b0368 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56097d5b0440 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56097d5b0420 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56097d5b0408 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56097d5b03c8 <col:25> 'int' lvalue Var 0x56097d5afbd8 'read_status' 'int'
|           `-IntegerLiteral 0x56097d5b03e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56097d587ec8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56097d587a58 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d587ad8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d587e28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56097d587b98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d587c18 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56097d587c90 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56097d587d38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56097d5b1410 <col:84, line:805:5>
|     |-DeclStmt 0x56097d5b0528 <line:796:9, col:26>
|     | `-VarDecl 0x56097d5b04c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56097d5b05f8 <line:797:9, col:29>
|     | `-VarDecl 0x56097d5b0558 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56097d5b05e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56097d5b05c0 <col:28> 'int' 1
|     |-DeclStmt 0x56097d5b0930 <line:798:9, col:71>
|     | `-VarDecl 0x56097d5b0648 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56097d5b0900 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56097d5b0870 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56097d5b08b8 <col:55> 'T' lvalue ParmVar 0x56097d587d38 'variable' 'T &'
|     |     `-UnaryOperator 0x56097d5b08e8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56097d5b08d8 <col:66> 'Args *' this
|     |-WhileStmt 0x56097d5b12c0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56097d5b12e0 <line:799:16, col:61>
|     | | `-VarDecl 0x56097d5b0958 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56097d5b0b38 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56097d5b0b08 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56097d5b0af0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56097d5b0ad0 <col:29, col:61> 'String' (CXXTemporary 0x56097d5b0ad0)
|     | |           `-CXXMemberCallExpr 0x56097d5b0a60 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56097d5b09d0 <col:29> '<bound member function type>' ->find 0x56097d5a20b8
|     | |             | `-CXXThisExpr 0x56097d5b09c0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56097d5b0a98 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5b0a00 <col:34> 'const char *' lvalue ParmVar 0x56097d587b98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56097d5b0ab0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5b0a20 <col:43> 'int' lvalue ParmVar 0x56097d587c18 'flags' 'int'
|     | |             `-DeclRefExpr 0x56097d5b0a40 <col:50> 'Args::Slot *' lvalue Var 0x56097d5b04c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56097d5b0bf0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56097d5b0bd8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56097d5b0bb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56097d5b0b88 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|     | |       `-ImplicitCastExpr 0x56097d5b0b70 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56097d5b0b50 <col:23> 'String' lvalue Var 0x56097d5b0958 'str' 'String'
|     | `-CompoundStmt 0x56097d5b1298 <col:64, line:803:9>
|     |   |-CallExpr 0x56097d5b1020 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56097d5b0c18 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|     |   | | `-CXXThisExpr 0x56097d5b0c08 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56097d5b0fe0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56097d5b0c48 <col:23> 'T *' lvalue Var 0x56097d5b0648 's' 'T *'
|     |   | | `-CallExpr 0x56097d5b0fa0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56097d5b0e30 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56097d5b0e78 <col:56> 'P' lvalue ParmVar 0x56097d587c90 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56097d5b0e98 <col:64> 'String' lvalue Var 0x56097d5b0958 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56097d5b0f48 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56097d5b0ed8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|     |   | |   | `-DeclRefExpr 0x56097d5b0eb8 <col:70> 'T *' lvalue Var 0x56097d5b0648 's' 'T *'
|     |   | |   `-UnaryOperator 0x56097d5b0f88 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56097d5b0f78 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56097d5b1000 <col:81> 'Args::Slot *' lvalue Var 0x56097d5b04c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56097d5b11b8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56097d5b1050 <col:13> 'int' lvalue Var 0x56097d5b0558 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56097d5b11a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56097d5b1180 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56097d5b10e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56097d5b10c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56097d5b10b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56097d5b1070 <col:28> 'int' lvalue Var 0x56097d5b0558 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56097d5b1090 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56097d5b1168 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56097d5b1138 <col:49> 'bool' lvalue ->_read_status 0x56097d565740
|     |   |         `-ImplicitCastExpr 0x56097d5b1118 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56097d5b1108 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56097d5b1268 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56097d5b11d8 <col:13> 'int' lvalue ParmVar 0x56097d587c18 'flags' 'int'
|     |     `-UnaryOperator 0x56097d5b1250 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56097d5b1238 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56097d5b1218 <col:23> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56097d5b13f0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56097d5b1328 <col:9> 'bool' lvalue ->_read_status 0x56097d565740
|       | `-ImplicitCastExpr 0x56097d5b1308 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56097d5b12f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56097d5b13d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56097d5b13b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56097d5b1398 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56097d5b1358 <col:25> 'int' lvalue Var 0x56097d5b0558 'read_status' 'int'
|           `-IntegerLiteral 0x56097d5b1378 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56097d5884a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56097d587f40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56097d587fb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56097d588408 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56097d588078 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56097d5880f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56097d588170 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56097d5882c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56097d5b2218 <col:87, line:821:5>
|     |-DeclStmt 0x56097d5b14c0 <line:809:9, col:26>
|     | `-VarDecl 0x56097d5b1458 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56097d5b1590 <line:810:9, col:29>
|     | `-VarDecl 0x56097d5b14f0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56097d5b1578 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56097d5b1558 <col:28> 'int' 1
|     |-DeclStmt 0x56097d5b17d8 <line:811:9, col:38>
|     | `-VarDecl 0x56097d5b16c0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56097d5b17b0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56097d5b1738 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56097d5b1790 <col:29> 'Vector<T>' lvalue ParmVar 0x56097d5882c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56097d5b20c8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56097d5b20e8 <line:812:16, col:61>
|     | | `-VarDecl 0x56097d5b1800 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56097d5b19e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56097d5b19b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56097d5b1998 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56097d5b1978 <col:29, col:61> 'String' (CXXTemporary 0x56097d5b1978)
|     | |           `-CXXMemberCallExpr 0x56097d5b1908 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56097d5b1878 <col:29> '<bound member function type>' ->find 0x56097d5a20b8
|     | |             | `-CXXThisExpr 0x56097d5b1868 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56097d5b1940 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5b18a8 <col:34> 'const char *' lvalue ParmVar 0x56097d588078 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56097d5b1958 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56097d5b18c8 <col:43> 'int' lvalue ParmVar 0x56097d5880f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x56097d5b18e8 <col:50> 'Args::Slot *' lvalue Var 0x56097d5b1458 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56097d5b1a98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56097d5b1a80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56097d5b1a60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56097d5b1a30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56097d2c19e8
|     | |       `-ImplicitCastExpr 0x56097d5b1a18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56097d5b19f8 <col:23> 'String' lvalue Var 0x56097d5b1800 'str' 'String'
|     | `-CompoundStmt 0x56097d5b2090 <col:64, line:819:9>
|     |   |-DeclStmt 0x56097d5b1b58 <line:813:13, col:23>
|     |   | `-VarDecl 0x56097d5b1ac0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56097d5b1b38 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56097d5b1cd8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56097d5b1b80 <col:13> '<bound member function type>' ->postparse 0x56097d5a22c8
|     |   | | `-CXXThisExpr 0x56097d5b1b70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56097d5b1c80 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56097d5b1bd0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56097d5b1bb0 <col:23> 'P' lvalue ParmVar 0x56097d588170 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56097d5b1c18 <col:36> 'String' lvalue Var 0x56097d5b1800 'str' 'String'
|     |   | | |-DeclRefExpr 0x56097d5b1c38 <col:41> 'T' lvalue Var 0x56097d5b1ac0 'sx' 'T'
|     |   | | `-UnaryOperator 0x56097d5b1c68 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56097d5b1c58 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56097d5b1cb8 <col:53> 'Args::Slot *' lvalue Var 0x56097d5b1458 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56097d5b1e30 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56097d5b1d68 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56097d5b1d38 <col:17> 'bool' lvalue ->_read_status 0x56097d565740
|     |   | |   `-ImplicitCastExpr 0x56097d5b1d18 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56097d5b1d08 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56097d5b1e08 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56097d5b1da0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56097d5b1d80 <col:17> 'Vector<T> *' lvalue Var 0x56097d5b16c0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56097d5b1de8 <col:30> 'T' lvalue Var 0x56097d5b1ac0 'sx' 'T'
|     |   |-BinaryOperator 0x56097d5b1fb0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56097d5b1e48 <col:13> 'int' lvalue Var 0x56097d5b14f0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56097d5b1f98 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56097d5b1f78 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56097d5b1ee0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56097d5b1ec0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56097d5b1ea8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56097d5b1e68 <col:28> 'int' lvalue Var 0x56097d5b14f0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56097d5b1e88 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56097d5b1f60 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56097d5b1f30 <col:49> 'bool' lvalue ->_read_status 0x56097d565740
|     |   |         `-ImplicitCastExpr 0x56097d5b1f10 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56097d5b1f00 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56097d5b2060 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56097d5b1fd0 <col:13> 'int' lvalue ParmVar 0x56097d5880f8 'flags' 'int'
|     |     `-UnaryOperator 0x56097d5b2048 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56097d5b2030 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56097d5b2010 <col:23> 'const int' lvalue Var 0x56097d56ffd8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56097d5b21f8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56097d5b2130 <col:9> 'bool' lvalue ->_read_status 0x56097d565740
|       | `-ImplicitCastExpr 0x56097d5b2110 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56097d5b2100 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56097d5b21d8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56097d5b21b8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56097d5b21a0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56097d5b2160 <col:25> 'int' lvalue Var 0x56097d5b14f0 'read_status' 'int'
|           `-IntegerLiteral 0x56097d5b2180 <col:40> 'int' 1
|-AccessSpecDecl 0x56097d588520 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56097d588548 prev 0x56097d56e310 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56097d588640 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56097d588730 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56097d5b2250 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56097d588820 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56097d5b2260 <col:25, line:830:9>
| |-CXXMethodDecl 0x56097d588920 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56097d5889d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56097d588a78 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56097d588a78
| | `-ParmVarDecl 0x56097d588b88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56097d589348 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56097d589348
|   `-ParmVarDecl 0x56097d589458 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56097d588bf8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56097d588d58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56097d588f50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56097d588e00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56097d588e78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56097d5b2440 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56097d589208 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56097d5b22b0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56097d5b2270 <col:20> 'void *' lvalue ParmVar 0x56097d588e00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56097d589270 '_slot' 'char *'
| | | `-CXXNewExpr 0x56097d5b2338 <col:32, col:45> 'char *' array Function 0x56097d0e4678 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56097d5b2320 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56097d5b22f0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56097d588e78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56097d5892d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56097d5b2400 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56097d5b23c0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56097d588e78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56097d5b24c0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56097d589050 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56097d588820 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56097d5b2548 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56097d5b2528 <line:840:13, col:22> 'void' array Function 0x56097d0e49d8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56097d5b2510 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56097d5b24e0 <col:22> 'char *' lvalue ->_slot 0x56097d589270
| |         `-CXXThisExpr 0x56097d5b24d0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56097d589150 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56097d588920 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56097d5b2738 <col:22, line:844:9>
| |   `-CallExpr 0x56097d5b26a0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56097d5b2688 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56097d5b2668 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56097d1f0438 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56097d5b26d8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56097d5b25b8 <col:20> 'void *' lvalue ->_ptr 0x56097d589208
| |     |   `-CXXThisExpr 0x56097d5b25a8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56097d5b2708 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56097d5b26f0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56097d5b25f8 <col:26> 'char *' lvalue ->_slot 0x56097d589270
| |     |     `-CXXThisExpr 0x56097d5b25e8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56097d5b2720 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56097d5b2638 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56097d5892d0
| |         `-CXXThisExpr 0x56097d5b2628 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56097d589208 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56097d589270 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56097d5892d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56097d5894c8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56097d5894c8
| | `-ParmVarDecl 0x56097d5895d8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56097d589678 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56097d589678
|   `-ParmVarDecl 0x56097d589788 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56097d589928 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56097d5897f8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56097d589898 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56097d589bc0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56097d589db8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56097d589c88 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56097d589f38 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56097d5b2770 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56097d5b2750 <col:20> 'T *' lvalue ParmVar 0x56097d589c88 'ptr' 'T *'
|   | `-CompoundStmt 0x56097d5b27c0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56097d589e88 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56097d588920 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56097d5b2970 <col:22, line:857:9>
|   |   `-CallExpr 0x56097d5b2940 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56097d5b27d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56097d2a8b68 0x56097d252e98
|   |     |-CXXOperatorCallExpr 0x56097d5b28d0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56097d5b2860 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56097d4b5d38 0x56097d4b5958 0x56097d4b5588 0x56097d4b51a8 0x56097d4b4dc8 0x56097d4b49f8
|   |     | `-MemberExpr 0x56097d5b2830 <col:29> 'T *' lvalue ->_ptr 0x56097d589f38
|   |     |   `-CXXThisExpr 0x56097d5b2820 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56097d5b2910 <col:35> 'T' lvalue ->_slot 0x56097d589f98
|   |       `-CXXThisExpr 0x56097d5b2900 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56097d589f38 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56097d589f98 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56097d58a000 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56097d58a100 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56097d58a150 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d58a0e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56097d58a0c0 <col:31> 'int' 48
|-FieldDecl 0x56097d58a178 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56097d58a1d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56097d58a238 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56097d58a370 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56097d5a1960 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56097d5a19c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56097d5a1a70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56097d5a1c98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56097d5a1ba0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56097d5a1de8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56097d5a1d58 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56097d5a20b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56097d5a1ea8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56097d5a1f28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56097d5a1fd0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56097d5a22c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56097d5a2180 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56097d5a21f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56097d5a2398 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56097d5a24e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56097d5a2450 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56097d5a2878 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56097d5a25a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56097d5a2628 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56097d5a26d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56097d5a2788 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56097d5a2aa0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56097d5a2950 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56097d5a29c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56097d5a2db8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56097d5a2b50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56097d5a2d18 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56097d5a2c28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d51b298 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d51b3b8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x56097d51b448 <col:25, col:31> col:25 public
|-TypedefDecl 0x56097d51b480 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x56097cf912d0 'void'
|-CXXConstructorDecl 0x56097d51b5c8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x56097d51b4f0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x56097d51c850 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x56097d51c180 'flags_' 'int'
| | `-ImplicitCastExpr 0x56097d51c8f0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56097d51c8b0 <col:45> 'int' lvalue ParmVar 0x56097d51b4f0 'flags' 'int'
| `-CompoundStmt 0x56097d51c938 <col:52, col:53>
|-CXXMethodDecl 0x56097d51b888 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x56097d51b688 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56097d51b728 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x56097d51b7a0 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56097d51c870 <col:88> 'const ArgContext' lvalue Var 0x56097d51b230 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56097d51cb18 <col:100, line:210:5>
|   `-ReturnStmt 0x56097d51cb08 <line:209:9, col:46>
|     `-CallExpr 0x56097d51cab0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x56097d51ca98 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56097d51ca50 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x56097d51c448 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x56097d51c9b0 <col:22> 'const String' lvalue ParmVar 0x56097d51b688 'str' 'const String &'
|       |-DeclRefExpr 0x56097d51c9d0 <col:27> 'EtherAddress' lvalue ParmVar 0x56097d51b728 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x56097d51c9f0 <col:34> 'const ArgContext' lvalue ParmVar 0x56097d51b7a0 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x56097d51caf0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x56097d51ca20 <col:40> 'int' lvalue ->flags_ 0x56097d51c180
|           `-CXXThisExpr 0x56097d51ca10 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x56097d51bb28 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x56097d51b950 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x56097d51b9d0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x56097d51ba48 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56097d51c890 <col:89> 'const ArgContext' lvalue Var 0x56097d51b230 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56097d51ccf0 <col:101, line:213:5>
|   `-ReturnStmt 0x56097d51cce0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x56097d51cca8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x56097d51cc78 <col:9> '<bound member function type>' ->parse 0x56097d51b888
|       | `-CXXThisExpr 0x56097d51cc68 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x56097d51cb98 <col:15> 'const String' lvalue ParmVar 0x56097d51b950 'str' 'const String &'
|       |-UnaryOperator 0x56097d51cc30 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x56097d51cc00 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x56097d51cbe8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x56097d51cbb8 <col:54> 'unsigned char *' lvalue ParmVar 0x56097d51b9d0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x56097d51cc48 <col:62> 'const ArgContext' lvalue ParmVar 0x56097d51ba48 'args' 'const ArgContext &'
|-CXXMethodDecl 0x56097d51bde8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x56097d51bbf0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x56097d51bc68 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x56097d51bd08 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x56097d51ced8 <col:82, line:216:5>
|   `-ReturnStmt 0x56097d51cec8 <line:215:9, col:53>
|     `-CallExpr 0x56097d51ce70 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x56097d51ce58 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56097d51ce10 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x56097d51c778 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x56097d51cd70 <col:29> 'const String' lvalue ParmVar 0x56097d51bbf0 'str' 'const String &'
|       |-DeclRefExpr 0x56097d51cd90 <col:34> 'EtherAddress' lvalue ParmVar 0x56097d51bc68 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x56097d51cdb0 <col:41> 'Args' lvalue ParmVar 0x56097d51bd08 'args' 'Args &'
|       `-ImplicitCastExpr 0x56097d51ceb0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x56097d51cde0 <col:47> 'int' lvalue ->flags_ 0x56097d51c180
|           `-CXXThisExpr 0x56097d51cdd0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x56097d51c088 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x56097d51beb0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x56097d51bf30 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x56097d51bfa8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x56097d51d0b0 <col:83, line:219:5>
|   `-ReturnStmt 0x56097d51d0a0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x56097d51d068 <col:9, col:73> 'bool'
|       |-MemberExpr 0x56097d51d038 <col:9> '<bound member function type>' ->direct_parse 0x56097d51bde8
|       | `-CXXThisExpr 0x56097d51d028 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x56097d51cf58 <col:22> 'const String' lvalue ParmVar 0x56097d51beb0 'str' 'const String &'
|       |-UnaryOperator 0x56097d51cff0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x56097d51cfc0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x56097d51cfa8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x56097d51cf78 <col:61> 'unsigned char *' lvalue ParmVar 0x56097d51bf30 'value' 'unsigned char *'
|       `-DeclRefExpr 0x56097d51d008 <col:69> 'Args' lvalue ParmVar 0x56097d51bfa8 'args' 'Args &'
|-AccessSpecDecl 0x56097d51c140 <line:220:3, col:10> col:3 private
|-FieldDecl 0x56097d51c180 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x56097d51c448 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x56097d51c1e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56097d51c258 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x56097d51c2d0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x56097d51c350 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x56097d51c778 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x56097d51c518 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x56097d51c590 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x56097d51c608 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x56097d51c688 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x56097d5e5ac8 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x56097d5e5ac8
| `-ParmVarDecl 0x56097d5e5bd8 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x56097d5e5c78 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d5e5d88 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x56097d51c180 'flags_' 'int'
| | `-ImplicitCastExpr 0x56097d5e65e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56097d5e65a0 <col:7> 'int' xvalue .flags_ 0x56097d51c180
| |     `-CXXStaticCastExpr 0x56097d5e6570 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x56097d5e6540 <col:7> 'EtherAddressArg' lvalue ParmVar 0x56097d5e5d88 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x56097d5e6630 <col:7>
`-CXXDestructorDecl 0x56097d5e5e50 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d2b1890 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d2b19a8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56097d2b1a38 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56097d2b1b08 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56097d2b1bf0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d2b1e08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56097d2b1cb0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b1fb8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56097d2b1ec0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56097d2b2100 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56097d2b2070 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56097d2b2248 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56097d2b21b8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b2390 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56097d2b2300 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b2458 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56097d2b25a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56097d2b2510 <col:28> col:31 'int'
|-CXXMethodDecl 0x56097d2b2668 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56097d2b27b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56097d2b2720 <col:28> col:31 'int'
|-CXXMethodDecl 0x56097d2b2928 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56097d2b2868 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b2a70 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56097d2b29e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b2b38 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56097d2b2cf8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56097d2b2be8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56097d2b2c60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b2f48 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56097d2b2db8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d2b2e30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56097d2b2ff8 <col:86> "" ""
|-CXXMethodDecl 0x56097d2b3268 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56097d2b30d8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56097d2b3150 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b3418 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56097d2b3328 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56097d2b35c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56097d2b34d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56097d2b3898 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56097d2b3680 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56097d2b36f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56097d2b3770 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b3b78 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56097d2b3960 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56097d2b39d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d2b3a50 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56097d2b3c30 <col:115> "" ""
|-AccessSpecDecl 0x56097d2b3ca0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56097d2b3cd8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d2b51f0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56097d2b51f0
| `-ParmVarDecl 0x56097d2b52f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56097d2b5398 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56097d2b5398
| `-ParmVarDecl 0x56097d2b54a8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56097d2eaad8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56097d4dcaf0 <col:7>
|-CXXConstructorDecl 0x56097d2eabb0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56097d2eabb0
| `-ParmVarDecl 0x56097d2eacc8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56097d2ead38 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56097d2ead38
| `-ParmVarDecl 0x56097d2eae48 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56097d4df4f0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4cb698 prev 0x56097d4c08a0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d4cb790 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56097d4cb880 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56097d4cb9a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56097d4cbb28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56097d4cbca8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56097d4cbe28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56097d4dcc58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56097d4dd4c8 <col:11>
|-CXXDestructorDecl 0x56097d4dcd30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56097d4dce68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56097d4dce68
| `-ParmVarDecl 0x56097d4dcf78 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56097d4dd018 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56097d4dd018
| `-ParmVarDecl 0x56097d4dd128 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56097d4dfee8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d4dfff8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56097d4e0278 <col:11>
|   `-ReturnStmt 0x56097d4e0268 <col:11>
|     `-UnaryOperator 0x56097d4e0250 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56097d4e0240 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56097d4e0068 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56097d4e0068
  `-ParmVarDecl 0x56097d4e0178 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4cbe90 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d4cbfa8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56097d4cc048 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56097d4cc0b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56097d4cc118 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56097d4cc180 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56097d4cc1e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56097d4cc2a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56097d4cc300 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56097d4cc360 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56097d4dcb68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56097d4cc048 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56097d4dd4d8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56097d4dd530 <col:12>
|-CXXConstructorDecl 0x56097d4dd198 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56097d4dd198
| `-ParmVarDecl 0x56097d4dd2a8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56097d4dd348 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56097d4dd348
| `-ParmVarDecl 0x56097d4dd458 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56097d4df5d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4b9fb0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56097d4ba0c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56097d4ba158 <col:16, col:22> col:16 public
|-EnumDecl 0x56097d4ba180 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56097d4ba280 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56097d4ba360 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4ba260 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56097d4ba240 <col:21> 'int' 28
| `-EnumConstantDecl 0x56097d4ba310 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56097d4ba378 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4ba2f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56097d4ba2d0 <col:22> 'int' 64
|-CXXMethodDecl 0x56097d4ba6b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56097d4ba3a0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d4ba420 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56097d4ba498 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d4ba510 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4ba778 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56097d4ba978 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56097d4ba7f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56097d4ba868 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4baa28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bab88 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56097d4baa98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4bac30 <col:72> warn_unused_result ""
|-TypedefDecl 0x56097d4baf90 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56097d4baf20 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56097d4baec0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56097d4bae80 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56097cf912d0 'void'
|       |-PointerType 0x56097d23a130 'unsigned char *'
|       | `-BuiltinType 0x56097cf913d0 'unsigned char'
|       |-TypedefType 0x56097d0366c0 'size_t' sugar
|       | |-Typedef 0x56097d001b20 'size_t'
|       | `-BuiltinType 0x56097cf91430 'unsigned long'
|       `-PointerType 0x56097cf91ad0 'void *'
|         `-BuiltinType 0x56097cf912d0 'void'
|-CXXMethodDecl 0x56097d4bb408 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56097d4bb000 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56097d4bb078 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d4bb110 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56097d4bb190 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56097d4d5b00 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56097d4d5ae8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56097d4d5ab0 <col:58> 'int' 0
| |-ParmVarDecl 0x56097d4bb210 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56097d4d5b28 <col:76> 'int' 0
| |-ParmVarDecl 0x56097d4bb290 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56097d4d5b48 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56097d4bb4d8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bb558 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56097d4bb618 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56097d4bb6b8 <col:20>
| `-OptimizeNoneAttr 0x56097d4bb710 <col:30>
|-CXXMethodDecl 0x56097d4bb788 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56097d4bb828 <col:20>
| `-OptimizeNoneAttr 0x56097d4bb880 <col:30>
|-CXXMethodDecl 0x56097d4bb8f8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56097d4bb998 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bba48 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56097d4bbae8 <col:20>
| |-OptimizeNoneAttr 0x56097d4bbb40 <col:30>
| `-WarnUnusedResultAttr 0x56097d4bbb68 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bbbc0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56097d4bbc60 <col:20>
| `-OptimizeNoneAttr 0x56097d4bbcb8 <col:30>
|-CXXMethodDecl 0x56097d4bbd08 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56097d4bbda8 <col:20>
| `-OptimizeNoneAttr 0x56097d4bbe00 <col:30>
|-CXXMethodDecl 0x56097d4bbe48 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56097d4bbee8 <col:20>
| `-OptimizeNoneAttr 0x56097d4bbf40 <col:30>
|-CXXMethodDecl 0x56097d4bbf88 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4bc048 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4bc110 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4bc1d8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4bc298 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4bc3b8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56097d4d5c10 <col:54, line:99:5>
|   `-ReturnStmt 0x56097d4d5c00 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56097d4d5be8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56097d4d5bb8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56097d4cc698
|         `-CXXThisExpr 0x56097d4d5ba8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56097d4bc558 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56097d4bc468 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56097d4d5cc0 <col:67, line:103:5>
|   `-BinaryOperator 0x56097d4d5ca0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56097d4d5c38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56097d4cc698
|     | `-CXXThisExpr 0x56097d4d5c28 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56097d4d5c88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4d5c68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56097d4bc468 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56097d4bc650 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56097d4d5d40 <col:33, line:107:5>
|   `-ReturnStmt 0x56097d4d5d30 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56097d4d5d18 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56097d4d5ce8 <col:16> 'void *' lvalue ->_destructor_argument 0x56097d4cc700
|         `-CXXThisExpr 0x56097d4d5cd8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56097d4bc710 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56097d4d6370 <col:25, line:113:5>
|   |-ParenExpr 0x56097d4d60b8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56097d4d6088 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d5df8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56097d4d5dd0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56097d4d5d98 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56097d4d5d68 <col:24> '<bound member function type>' ->shared 0x56097d4bb788
|   |   |       `-ImplicitCastExpr 0x56097d4d5db8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56097d4d5d58 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56097d4d5e58 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d5e38 <col:42> 'int' 0
|   |   `-CallExpr 0x56097d4d5fe8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d5fd0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d5fb0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d6028 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d5ec8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56097d4d6040 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d5ef0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d6058 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d5f28 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56097d4d6070 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d5f98 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d5f80 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d5f48 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56097d4d62b8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56097d4d60e8 <col:2> 'unsigned char *' lvalue ->_head 0x56097d4cc4a0
|   | | `-CXXThisExpr 0x56097d4d60d8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56097d4d62a0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56097d4d6280 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56097d4d6128 <col:10> 'unsigned char *' lvalue ->_data 0x56097d4cc508
|   |     | `-CXXThisExpr 0x56097d4d6118 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56097d4d6268 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56097d4d6248 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56097d4d6168 <col:18> 'unsigned char *' lvalue ->_tail 0x56097d4cc570
|   |         | `-CXXThisExpr 0x56097d4d6158 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56097d4d6230 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56097d4d6210 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56097d4d61a8 <col:26> 'unsigned char *' lvalue ->_end 0x56097d4cc5d8
|   |             | `-CXXThisExpr 0x56097d4d6198 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56097d4d61f8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56097d4d61d8 <col:33> 'int' 0
|   `-BinaryOperator 0x56097d4d6350 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56097d4d62e8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56097d4cc698
|     | `-CXXThisExpr 0x56097d4d62d8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56097d4d6338 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56097d4d6318 <col:16> 'int' 0
|-CXXMethodDecl 0x56097d4bc850 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56097d4bc7c0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4bc8f8 <col:20>
| |-OptimizeNoneAttr 0x56097d4bc950 <col:30>
| `-WarnUnusedResultAttr 0x56097d4bc978 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bca48 <line:152:5, col:120> col:56 used push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56097d4bc9b8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4bcaf0 <col:20>
| |-OptimizeNoneAttr 0x56097d4bcb48 <col:30>
| `-WarnUnusedResultAttr 0x56097d4bcb70 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bcca8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56097d4bcbb0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4bcd50 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bce50 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56097d4bcdc0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4bcef8 <col:20>
| `-OptimizeNoneAttr 0x56097d4bcf50 <col:30>
|-CXXMethodDecl 0x56097d4bd018 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56097d4bcf88 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4bd0c0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bd1c0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56097d4bd130 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56097d4bd268 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bd368 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56097d4bd2d8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4bd410 <col:20>
| `-OptimizeNoneAttr 0x56097d4bd468 <col:30>
|-CXXMethodDecl 0x56097d4bd5f8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56097d4bd4a8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56097d4bd520 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56097d4d5b68 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56097d4bd6a8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56097d4bd8a8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56097d4bd720 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56097d4bd798 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4bdab8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56097d4bd968 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56097d4bd9e0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4bdcc8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56097d4bdb78 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56097d4bdbf8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56097d4d5b78 <col:39> 'int' 0
|-CXXMethodDecl 0x56097d4bdd98 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56097d4bde60 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4bdf28 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56097d4bdfe8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4be0b0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56097d4be1f8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56097d4be168 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56097d4be3c8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56097d4be2b8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56097d4be330 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4be498 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56097d4be558 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56097d4be5f8 <col:20>
| `-OptimizeNoneAttr 0x56097d4be650 <col:30>
|-CXXMethodDecl 0x56097d4be6a0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56097d4be740 <col:20>
| `-OptimizeNoneAttr 0x56097d4be798 <col:30>
|-CXXMethodDecl 0x56097d4be7e8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56097d4be8a8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4be970 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56097d4bea10 <col:20>
| `-OptimizeNoneAttr 0x56097d4bea68 <col:30>
|-CXXMethodDecl 0x56097d4bebb8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56097d4beaa8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56097d4beb20 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4bed08 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56097d4bec78 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4bede0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56097d4beea0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56097d4bef40 <col:20>
| `-OptimizeNoneAttr 0x56097d4bef98 <col:30>
|-CXXMethodDecl 0x56097d4befe8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56097d4bf088 <col:20>
| `-OptimizeNoneAttr 0x56097d4bf0e0 <col:30>
|-CXXMethodDecl 0x56097d4bf130 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56097d4bf1f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56097d4bf298 <col:20>
| `-OptimizeNoneAttr 0x56097d4bf2f0 <col:30>
|-CXXMethodDecl 0x56097d4bf338 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56097d4bf458 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56097d4bf5c8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56097d4bf508 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56097d4bf6b8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56097d4bf758 <col:20>
| `-OptimizeNoneAttr 0x56097d4bf7b0 <col:30>
|-CXXMethodDecl 0x56097d4bf800 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56097d4bf8c0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56097d4bfaf8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56097d4bf970 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56097d4bf9e8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4bfba8 <col:20>
| `-OptimizeNoneAttr 0x56097d4bfc00 <col:30>
|-CXXMethodDecl 0x56097d4bfca8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56097d4bfd48 <col:20>
| `-OptimizeNoneAttr 0x56097d4bfda0 <col:30>
|-CXXMethodDecl 0x56097d4bfdf0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56097d4bfe90 <col:20>
| `-OptimizeNoneAttr 0x56097d4bfee8 <col:30>
|-CXXMethodDecl 0x56097d4bff30 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56097d4bffd0 <col:20>
| `-OptimizeNoneAttr 0x56097d4c0028 <col:30>
|-CXXMethodDecl 0x56097d4c0128 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56097d4c0060 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56097d4c01d0 <col:20>
| `-OptimizeNoneAttr 0x56097d4c0228 <col:30>
|-CXXMethodDecl 0x56097d4c03e8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56097d4c0260 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56097d4c02d8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4c0498 <col:20>
| `-OptimizeNoneAttr 0x56097d4c04f0 <col:30>
|-CXXMethodDecl 0x56097d4c0598 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56097d4c06b8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56097d4c07d8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56097d4c0878 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56097d4c08a0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56097d4c09c8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56097d4c0a68 <col:20>
| `-OptimizeNoneAttr 0x56097d4c0ac0 <col:30>
|-CXXMethodDecl 0x56097d4c0b68 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56097d4c0c08 <col:20>
| `-OptimizeNoneAttr 0x56097d4c0c60 <col:30>
|-AccessSpecDecl 0x56097d4c0c88 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56097d4c0cb0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56097d4c0db0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56097d4c0e00 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4c0d90 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56097d4c0d70 <col:14> 'int' 48
|-CXXMethodDecl 0x56097d4c0e68 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56097d4c0f08 <col:20>
| `-OptimizeNoneAttr 0x56097d4c0f60 <col:30>
|-CXXMethodDecl 0x56097d4c0fd8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56097d4c1078 <col:20>
| `-OptimizeNoneAttr 0x56097d4c10d0 <col:30>
|-CXXMethodDecl 0x56097d4c1198 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56097d4c1108 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56097d4c1338 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56097d4c14d8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56097d4c13e8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56097d4c1580 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56097d4c1680 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1a30 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c1660 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d4c1640 <col:9> 'int' 0
| |-EnumConstantDecl 0x56097d4c1710 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1a48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c16f0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56097d4c16d0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56097d4c17a0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1a60 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c1780 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56097d4c1760 <col:14> 'int' 2
| |-EnumConstantDecl 0x56097d4c1830 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1a78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c1810 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56097d4c17f0 <col:14> 'int' 3
| |-EnumConstantDecl 0x56097d4c18c0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1a90 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c18a0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56097d4c1880 <col:13> 'int' 4
| |-EnumConstantDecl 0x56097d4c1950 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56097d4c1aa8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c1930 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56097d4c1910 <col:13> 'int' 5
| `-EnumConstantDecl 0x56097d4c19e0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56097d4c1ac0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4c19c0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56097d4c19a0 <col:14> 'int' 6
|-CXXMethodDecl 0x56097d4c1b28 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56097d4c1bc8 <col:20>
| `-OptimizeNoneAttr 0x56097d4c1c20 <col:30>
|-CXXMethodDecl 0x56097d4c1d18 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56097d4c1c58 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56097d4c1dc0 <col:20>
| `-OptimizeNoneAttr 0x56097d4c1e18 <col:30>
|-CXXMethodDecl 0x56097d4c1e88 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56097d4c1fb0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56097d4c2128 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56097d4c2060 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56097d4c21f0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56097d4c22b8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56097d4c23f8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56097d4c2368 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56097d4c24a0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56097d4c25a0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56097d4c27a0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c2580 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d4c2560 <col:23> 'int' 0
| |-EnumConstantDecl 0x56097d4c2630 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56097d4c27b8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c2610 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56097d4c25f0 <col:45> 'int' 4
| |-EnumConstantDecl 0x56097d4c26c0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56097d4c27d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c26a0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d4c2680 <col:24> 'int' 0
| `-EnumConstantDecl 0x56097d4c2750 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56097d4c27e8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4c2730 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56097d4c2710 <col:47> 'int' 16
|-CXXMethodDecl 0x56097d4c2848 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56097d4c29b8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56097d4c28f8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56097d4c2a60 <col:20>
| `-OptimizeNoneAttr 0x56097d4c2ab8 <col:30>
|-CXXMethodDecl 0x56097d4c2b08 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56097d4d6490 <col:18, col:36>
|   `-ReturnStmt 0x56097d4d6480 <col:20, col:33>
|     `-ImplicitCastExpr 0x56097d4d6468 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56097d4d6448 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56097d4d6418 <col:27> '<bound member function type>' ->xanno 0x56097d4c0b68
|           `-CXXThisExpr 0x56097d4d6408 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56097d4c2c00 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56097d4d65a0 <col:30, col:48>
|   `-ReturnStmt 0x56097d4d6590 <col:32, col:45>
|     `-ImplicitCastExpr 0x56097d4d6578 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56097d4d6558 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56097d4d6528 <col:39> '<bound member function type>' ->xanno 0x56097d4c09c8
|           `-CXXThisExpr 0x56097d4d6518 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56097d4c2ce8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56097d4d6738 <col:24, col:50>
|   `-ReturnStmt 0x56097d4d6728 <col:26, col:47>
|     `-UnaryOperator 0x56097d4d6710 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56097d4d66f0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56097d4d66d8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56097d4d6688 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56097d4cb9a8
|         |   `-CXXMemberCallExpr 0x56097d4d6668 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56097d4d6638 <col:34> '<bound member function type>' ->xanno 0x56097d4c0b68
|         |       `-CXXThisExpr 0x56097d4d6628 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56097d4d66b8 <col:46> 'int' 0
|-CXXMethodDecl 0x56097d4c2df0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56097d4d6908 <col:36, col:62>
|   `-ReturnStmt 0x56097d4d68f8 <col:38, col:59>
|     `-UnaryOperator 0x56097d4d68e0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56097d4d68c0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56097d4d68a8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56097d4d6820 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56097d4cb9a8
|         |   `-CXXMemberCallExpr 0x56097d4d6800 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56097d4d67d0 <col:46> '<bound member function type>' ->xanno 0x56097d4c09c8
|         |       `-CXXThisExpr 0x56097d4d67c0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56097d4d6850 <col:58> 'int' 0
|-CXXMethodDecl 0x56097d4c2f08 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56097d4d6aa0 <col:26, col:53>
|   `-ReturnStmt 0x56097d4d6a90 <col:28, col:50>
|     `-UnaryOperator 0x56097d4d6a78 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56097d4d6a58 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56097d4d6a40 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56097d4d69f0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56097d4cbca8
|         |   `-CXXMemberCallExpr 0x56097d4d69d0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56097d4d69a0 <col:36> '<bound member function type>' ->xanno 0x56097d4c0b68
|         |       `-CXXThisExpr 0x56097d4d6990 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56097d4d6a20 <col:49> 'int' 0
|-CXXMethodDecl 0x56097d4c3028 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56097d4d6c78 <col:38, col:65>
|   `-ReturnStmt 0x56097d4d6c68 <col:40, col:62>
|     `-UnaryOperator 0x56097d4d6c50 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56097d4d6c30 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56097d4d6c18 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56097d4d6b88 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56097d4cbca8
|         |   `-CXXMemberCallExpr 0x56097d4d6b68 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56097d4d6b38 <col:48> '<bound member function type>' ->xanno 0x56097d4c09c8
|         |       `-CXXThisExpr 0x56097d4d6b28 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56097d4d6bb8 <col:61> 'int' 0
|-CXXMethodDecl 0x56097d4c31d8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56097d4c30e0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56097d4d7348 <col:34, line:463:5>
|   |-ParenExpr 0x56097d4d7190 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56097d4d7160 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d6dc8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d6d98 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d6ce8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d6cd0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d6c90 <col:23> 'int' lvalue ParmVar 0x56097d4c30e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d6cb0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d6d78 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d6d48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d6d08 <col:33> 'int' lvalue ParmVar 0x56097d4c30e0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56097d4d6d60 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56097d4d6d28 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56097d4d6e28 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d6e08 <col:56> 'int' 0
|   |   `-CallExpr 0x56097d4d70c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d70a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d7088 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d7100 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d6f18 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56097d4d7118 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d6f48 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d7130 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d6f80 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56097d4d7148 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d7070 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d7058 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d7018 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56097d4d7338 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56097d4d7320 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56097d4d7300 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56097d4d72d0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56097d4d7280 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56097d4cb9a8
|         |   `-CXXMemberCallExpr 0x56097d4d7260 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56097d4d7230 <col:9> '<bound member function type>' ->xanno 0x56097d4c09c8
|         |       `-CXXThisExpr 0x56097d4d7220 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56097d4d72e8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56097d4d72b0 <col:21> 'int' lvalue ParmVar 0x56097d4c30e0 'i' 'int'
|-CXXMethodDecl 0x56097d4c3428 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56097d4c3298 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56097d4c3310 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56097d4d79d8 <col:40, line:472:5>
|   |-ParenExpr 0x56097d4d77f0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56097d4d77c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d74a0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d7470 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d73c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d73a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d7368 <col:23> 'int' lvalue ParmVar 0x56097d4c3298 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d7388 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d7450 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d7420 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d73e0 <col:33> 'int' lvalue ParmVar 0x56097d4c3298 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56097d4d7438 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56097d4d7400 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56097d4d7500 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d74e0 <col:56> 'int' 0
|   |   `-CallExpr 0x56097d4d7720 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d7708 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d76e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d7760 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d7570 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56097d4d7778 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d75a0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d7790 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d75d8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56097d4d77a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d76d0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d76b8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d7678 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56097d4d79b8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56097d4d7960 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56097d4d7930 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56097d4d78e0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56097d4cb9a8
|     | |   `-CXXMemberCallExpr 0x56097d4d78c0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56097d4d7890 <col:2> '<bound member function type>' ->xanno 0x56097d4c0b68
|     | |       `-CXXThisExpr 0x56097d4d7880 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56097d4d7948 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56097d4d7910 <col:14> 'int' lvalue ParmVar 0x56097d4c3298 'i' 'int'
|     `-ImplicitCastExpr 0x56097d4d79a0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4d7980 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56097d4c3310 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56097d4c35e8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56097d4c34f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56097d4d8158 <col:36, line:485:5>
|   |-ParenExpr 0x56097d4d7ec0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4d7e90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d7b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d7b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d7a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d7a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d79f8 <col:23> 'int' lvalue ParmVar 0x56097d4c34f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d7a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d7b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d7b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d7a70 <col:33> 'int' lvalue ParmVar 0x56097d4c34f0 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d7ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d7ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d7a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d7ab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56097d4d7bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d7bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4d7df0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d7dd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d7db8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d7e30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d7c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56097d4d7e48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d7c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d7e60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d7cb0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56097d4d7e78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d7da0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d7d88 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d7d48 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56097d4d8148 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56097d4d8130 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56097d4d8118 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4d80e8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56097d4d8088 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4d8058 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4d7fd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4d7fb0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4d7f80 <col:61> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4d7f70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4d8070 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4d8000 <col:74> 'int' lvalue ParmVar 0x56097d4c34f0 'i' 'int'
|-CXXMethodDecl 0x56097d4c3838 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56097d4c36a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56097d4c3720 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56097d4d88a8 <col:42, line:500:5>
|   |-ParenExpr 0x56097d4d8640 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4d8610 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d82f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d82c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d81d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d81b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d8178 <col:23> 'int' lvalue ParmVar 0x56097d4c36a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d8198 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d82a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d8288 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d81f0 <col:33> 'int' lvalue ParmVar 0x56097d4c36a8 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d8268 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d8250 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d8210 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d8230 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56097d4d8350 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d8330 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4d8570 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d8558 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d8538 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d85b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d83c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56097d4d85c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d83f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d85e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d8430 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56097d4d85f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d8520 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d8508 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d84c8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56097d4d8888 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56097d4d8838 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56097d4d8808 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56097d4d87b0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56097d4d8780 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56097d4d8730 <col:48, col:57> 'char [48]' lvalue ->c 0x56097d4cb880
|     |     |   `-CXXMemberCallExpr 0x56097d4d8710 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56097d4d86e0 <col:48> '<bound member function type>' ->xanno 0x56097d4c0b68
|     |     |       `-CXXThisExpr 0x56097d4d86d0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56097d4d8798 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56097d4d8760 <col:61> 'int' lvalue ParmVar 0x56097d4c36a8 'i' 'int'
|     `-ImplicitCastExpr 0x56097d4d8870 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4d8850 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56097d4c3720 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56097d4c39f8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56097d4c3900 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56097d4d9008 <col:35, line:513:5>
|   |-ParenExpr 0x56097d4d8d18 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4d8ce8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d8a40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d8a10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d8920 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d8908 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d88c8 <col:23> 'int' lvalue ParmVar 0x56097d4c3900 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d88e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d89f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d89d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d8940 <col:33> 'int' lvalue ParmVar 0x56097d4c3900 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d89b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d89a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d8960 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d8980 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56097d4d8aa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d8a80 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4d8c48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d8c30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d8c10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d8c88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d8b10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56097d4d8ca0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d8b48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d8cb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d8b80 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56097d4d8cd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d8bf8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d8be0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d8ba0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56097d4d8ff8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56097d4d8fe0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56097d4d8fc8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4d8f98 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56097d4d8f10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4d8ee0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4d8e90 <col:60, col:69> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4d8e70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4d8e40 <col:60> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4d8e30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4d8ef8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4d8ec0 <col:73> 'int' lvalue ParmVar 0x56097d4c3900 'i' 'int'
|-CXXMethodDecl 0x56097d4c3c48 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56097d4c3ab8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56097d4c3b30 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56097d4d9728 <col:41, line:528:5>
|   |-ParenExpr 0x56097d4d94b0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4d9480 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d91a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d9170 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d9080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d9068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d9028 <col:23> 'int' lvalue ParmVar 0x56097d4c3ab8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d9048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d9150 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d9138 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d90a0 <col:33> 'int' lvalue ParmVar 0x56097d4c3ab8 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d9118 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d9100 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d90c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d90e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56097d4d9200 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d91e0 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4d93e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d93c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d93a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d9420 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d9270 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56097d4d9438 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d92a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d9450 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d92e0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56097d4d9468 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d9390 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d9378 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d9338 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56097d4d9708 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56097d4d96b8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56097d4d9688 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56097d4d9630 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56097d4d95f0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56097d4d95a0 <col:47, col:56> 'char [48]' lvalue ->c 0x56097d4cb880
|     |     |   `-CXXMemberCallExpr 0x56097d4d9580 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56097d4d9550 <col:47> '<bound member function type>' ->xanno 0x56097d4c0b68
|     |     |       `-CXXThisExpr 0x56097d4d9540 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56097d4d9608 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56097d4d95d0 <col:60> 'int' lvalue ParmVar 0x56097d4c3ab8 'i' 'int'
|     `-ImplicitCastExpr 0x56097d4d96f0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4d96d0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56097d4c3b30 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56097d4c3e08 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56097d4c3d10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56097d4d9df8 <col:36, line:541:5>
|   |-ParenExpr 0x56097d4d9b98 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4d9b68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d98c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d9890 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d97a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d9788 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d9748 <col:23> 'int' lvalue ParmVar 0x56097d4c3d10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d9768 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d9870 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d9858 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d97c0 <col:33> 'int' lvalue ParmVar 0x56097d4c3d10 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d9838 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d9820 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d97e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d9800 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56097d4d9920 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d9900 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4d9ac8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4d9ab0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4d9a90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4d9b08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d9990 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56097d4d9b20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4d99c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4d9b38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4d9a00 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56097d4d9b50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4d9a78 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4d9a60 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4d9a20 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56097d4d9de8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56097d4d9dd0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56097d4d9db8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4d9d88 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56097d4d9d30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4d9d00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4d9cb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4d9c90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4d9c60 <col:61> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4d9c50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4d9d18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4d9ce0 <col:74> 'int' lvalue ParmVar 0x56097d4c3d10 'i' 'int'
|-CXXMethodDecl 0x56097d4c3fd8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56097d4c3ec8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56097d4c3f40 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56097d4c4088 <col:20>
| `-OptimizeNoneAttr 0x56097d4c40e0 <col:30>
|-CXXMethodDecl 0x56097d4c4218 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56097d4c4120 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56097d4da4c8 <col:35, line:562:5>
|   |-ParenExpr 0x56097d4da268 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4da238 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4d9f90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4d9f60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4d9e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4d9e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4d9e18 <col:23> 'int' lvalue ParmVar 0x56097d4c4120 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4d9e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4d9f40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4d9f28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4d9e90 <col:33> 'int' lvalue ParmVar 0x56097d4c4120 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4d9f08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4d9ef0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4d9eb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4d9ed0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56097d4d9ff0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4d9fd0 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4da198 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4da180 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4da160 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4da1d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4da060 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56097d4da1f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4da098 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4da208 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4da0d0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56097d4da220 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4da148 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4da130 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4da0f0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56097d4da4b8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56097d4da4a0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56097d4da488 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4da458 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56097d4da400 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4da3d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4da380 <col:60, col:69> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4da360 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4da330 <col:60> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4da320 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4da3e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4da3b0 <col:73> 'int' lvalue ParmVar 0x56097d4c4120 'i' 'int'
|-CXXMethodDecl 0x56097d4c4428 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56097d4c42d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56097d4c4350 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56097d4daba8 <col:41, line:577:5>
|   |-ParenExpr 0x56097d4da938 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4da908 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4da660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4da630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4da540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4da528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4da4e8 <col:23> 'int' lvalue ParmVar 0x56097d4c42d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4da508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4da610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4da5f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4da560 <col:33> 'int' lvalue ParmVar 0x56097d4c42d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4da5d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4da5c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4da580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4da5a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56097d4da6c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4da6a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4da868 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4da850 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4da830 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4da8a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4da730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56097d4da8c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4da768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4da8d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4da7a0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56097d4da8f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4da818 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4da800 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4da7c0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56097d4dab88 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56097d4dab38 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56097d4dab08 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56097d4daaa8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56097d4daa78 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56097d4daa28 <col:47, col:56> 'char [48]' lvalue ->c 0x56097d4cb880
|     |     |   `-CXXMemberCallExpr 0x56097d4daa08 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56097d4da9d8 <col:47> '<bound member function type>' ->xanno 0x56097d4c0b68
|     |     |       `-CXXThisExpr 0x56097d4da9c8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56097d4daa90 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56097d4daa58 <col:60> 'int' lvalue ParmVar 0x56097d4c42d8 'i' 'int'
|     `-ImplicitCastExpr 0x56097d4dab70 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4dab50 <col:65> 'int32_t':'int' lvalue ParmVar 0x56097d4c4350 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56097d4c45e8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56097d4c44f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56097d4db2d8 <col:36, line:591:5>
|   |-ParenExpr 0x56097d4db018 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4dafe8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4dad40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4dad10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4dac20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4dac08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4dabc8 <col:23> 'int' lvalue ParmVar 0x56097d4c44f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4dabe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4dacf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4dacd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4dac40 <col:33> 'int' lvalue ParmVar 0x56097d4c44f0 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4dacb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4daca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4dac60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4dac80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56097d4dada0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4dad80 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4daf48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4daf30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4daf10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4daf88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dae10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56097d4dafa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dae48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4dafb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4dae80 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56097d4dafd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4daef8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4daee0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4daea0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56097d4db2c8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56097d4db2b0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56097d4db298 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4db268 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56097d4db1e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4db1b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4db160 <col:61, col:70> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4db140 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4db110 <col:61> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4db100 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4db1c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4db190 <col:74> 'int' lvalue ParmVar 0x56097d4c44f0 'i' 'int'
|-CXXMethodDecl 0x56097d4c4838 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56097d4c46a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56097d4c4720 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56097d4db9b8 <col:42, line:606:5>
|   |-ParenExpr 0x56097d4db748 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56097d4db718 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4db470 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4db440 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4db350 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4db338 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4db2f8 <col:23> 'int' lvalue ParmVar 0x56097d4c46a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4db318 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4db420 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56097d4db408 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4db370 <col:33> 'int' lvalue ParmVar 0x56097d4c46a8 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4db3e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4db3d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4db390 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56097d4db3b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56097d4db4d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4db4b0 <col:60> 'int' 0
|   |   `-CallExpr 0x56097d4db678 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56097d4db660 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4db640 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4db6b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4db540 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56097d4db6d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4db578 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4db6e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4db5b0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56097d4db700 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4db628 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4db610 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4db5d0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56097d4db998 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56097d4db948 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56097d4db918 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56097d4db8b8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56097d4db888 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56097d4db838 <col:48, col:57> 'char [48]' lvalue ->c 0x56097d4cb880
|     |     |   `-CXXMemberCallExpr 0x56097d4db818 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56097d4db7e8 <col:48> '<bound member function type>' ->xanno 0x56097d4c0b68
|     |     |       `-CXXThisExpr 0x56097d4db7d8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56097d4db8a0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56097d4db868 <col:61> 'int' lvalue ParmVar 0x56097d4c46a8 'i' 'int'
|     `-ImplicitCastExpr 0x56097d4db980 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56097d4db960 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56097d4c4720 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56097d4c49d0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56097d4c4900 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56097d4dc228 <col:33, line:620:5>
|   |-ParenExpr 0x56097d4dbfa0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56097d4dbf70 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4dbbc0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4dbb90 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4dba30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4dba18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4db9d8 <col:23> 'int' lvalue ParmVar 0x56097d4c4900 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4db9f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4dbb70 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56097d4dbb58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4dba50 <col:33> 'int' lvalue ParmVar 0x56097d4c4900 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4dbb38 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4dbb20 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4dba70 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56097d4dbaf8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56097d4dbae0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56097d4dbaa8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56097d4dbc20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4dbc00 <col:79> 'int' 0
|   |   `-CallExpr 0x56097d4dbed0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56097d4dbeb8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4dbe98 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4dbf10 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dbd08 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56097d4dbf28 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dbd50 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4dbf40 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4dbd88 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56097d4dbf58 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4dbe80 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4dbe68 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4dbe28 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56097d4dc218 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56097d4dc200 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56097d4dc1e8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56097d4dc1b8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56097d4dc130 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56097d4dc100 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56097d4dc0b0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56097d4cb880
|             |   `-CXXMemberCallExpr 0x56097d4dc090 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56097d4dc060 <col:67> '<bound member function type>' ->xanno 0x56097d4c09c8
|             |       `-CXXThisExpr 0x56097d4dc050 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56097d4dc118 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56097d4dc0e0 <col:80> 'int' lvalue ParmVar 0x56097d4c4900 'i' 'int'
|-CXXMethodDecl 0x56097d4c4be8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56097d4c4a90 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56097d4c4b10 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56097d4dca50 <col:45, line:635:5>
|   |-ParenExpr 0x56097d4dc798 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56097d4dc768 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56097d4dc430 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56097d4dc400 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56097d4dc2a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56097d4dc288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56097d4dc248 <col:23> 'int' lvalue ParmVar 0x56097d4c4a90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56097d4dc268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56097d4dc3e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56097d4dc3c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56097d4dc2c0 <col:33> 'int' lvalue ParmVar 0x56097d4c4a90 'i' 'int'
|   |   |     `-BinaryOperator 0x56097d4dc3a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56097d4dc390 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56097d4dc2e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56097d4c0db0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56097d4dc368 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56097d4dc350 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56097d4dc318 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56097d4dc490 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56097d4dc470 <col:79> 'int' 0
|   |   `-CallExpr 0x56097d4dc6c8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56097d4dc6b0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56097d4dc690 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56097d02d4d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56097d4dc708 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dc500 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56097d4dc720 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56097d4dc548 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56097d4dc738 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56097d4dc580 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56097d4dc750 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56097d4dc678 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56097d4dc660 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56097d4dc618 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56097d4dca30 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56097d4dc998 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56097d4dc968 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56097d4dc908 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56097d4dc8d8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56097d4dc888 <col:54, col:63> 'char [48]' lvalue ->c 0x56097d4cb880
|     |     |   `-CXXMemberCallExpr 0x56097d4dc868 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56097d4dc838 <col:54> '<bound member function type>' ->xanno 0x56097d4c0b68
|     |     |       `-CXXThisExpr 0x56097d4dc828 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56097d4dc8f0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56097d4dc8b8 <col:67> 'int' lvalue ParmVar 0x56097d4c4a90 'i' 'int'
|     `-CXXConstCastExpr 0x56097d4dca00 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56097d4dc9e8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56097d4dc9b0 <col:91> 'const void *' lvalue ParmVar 0x56097d4c4b10 'x' 'const void *'
|-CXXMethodDecl 0x56097d4c4cb8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56097d4dcad8 <col:34, line:640:5>
|   `-ReturnStmt 0x56097d4dcac8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56097d4dcab0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56097d4dca80 <col:16> 'Packet *' lvalue ->_data_packet 0x56097d4cc438
|         `-CXXThisExpr 0x56097d4dca70 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56097d4c4df8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56097d4c4d68 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56097d4d5b98 <col:46> 'bool' true
|-CXXMethodDecl 0x56097d4c4f78 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56097d4c4eb0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56097d4c5020 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56097d4c57d0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56097d4c5120 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5840 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5100 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56097d4c50e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56097d4ba280 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56097d4c51b0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5858 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5190 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56097d4c5170 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56097d4ba310 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56097d4c5240 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5870 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5220 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d4c5200 <col:21> 'int' 0
| |-EnumConstantDecl 0x56097d4c52d0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5888 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c52b0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56097d4c5290 <col:19> 'int' 16
| |-EnumConstantDecl 0x56097d4c5360 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c58a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5340 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56097d4c5320 <col:21> 'int' 16
| |-EnumConstantDecl 0x56097d4c53f0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c58b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c53d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56097d4c53b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56097d4c5480 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c58d0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5460 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56097d4c5440 <col:19> 'int' EnumConstant 0x56097d4c52d0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56097d4c5510 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c58e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c54f0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56097d4c54d0 <col:19> 'int' EnumConstant 0x56097d4c53f0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56097d4c55e0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5900 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c55c0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56097d4c55a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56097d4c5560 <col:23> 'int' EnumConstant 0x56097d4c5510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56097d4c5580 <col:40> 'int' 2
| |-EnumConstantDecl 0x56097d4c56b0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56097d4c5918 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d4c5690 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56097d4c5670 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56097d4c5630 <col:23> 'int' EnumConstant 0x56097d4c5510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56097d4c5650 <col:40> 'int' 4
| `-EnumConstantDecl 0x56097d4c5780 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56097d4c5930 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56097d4c5760 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56097d4c5740 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56097d4c5700 <col:23> 'int' EnumConstant 0x56097d4c5510 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56097d4c5720 <col:40> 'int' 8
|-CXXMethodDecl 0x56097d4c5970 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56097d4c5a10 <col:68> "" ""
|-CXXMethodDecl 0x56097d4c5aa8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56097d4c5b48 <col:45> "" ""
|-CXXMethodDecl 0x56097d4c5be0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56097d4c5c80 <col:57> "" ""
|-CXXMethodDecl 0x56097d4c5d18 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56097d4c5db8 <col:45> "" ""
|-CXXMethodDecl 0x56097d4c5e50 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56097d4c5ef0 <col:57> "" ""
|-CXXMethodDecl 0x56097d4c5f80 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56097d4c6020 <col:51> "" ""
|-CXXMethodDecl 0x56097d4c60b0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56097d4c6150 <col:63> "" ""
|-CXXMethodDecl 0x56097d4c61e0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56097d4c6280 <col:53> "" ""
|-CXXMethodDecl 0x56097d4c6310 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56097d4c63b0 <col:65> "" ""
|-CXXMethodDecl 0x56097d4c64c8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56097d4c6438 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56097d4c6570 <col:61> "" ""
|-CXXMethodDecl 0x56097d4c6708 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56097d4c65f8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56097d4c6670 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56097d4c67b8 <col:67> "" ""
|-CXXMethodDecl 0x56097d4c68d0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56097d4c6840 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56097d4c6978 <col:63> "" ""
|-CXXMethodDecl 0x56097d4c6b10 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56097d4c6a00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56097d4c6a78 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56097d4c6bc0 <col:69> "" ""
|-CXXMethodDecl 0x56097d4c6cd8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56097d4c6c48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56097d4c6d80 <col:63> "" ""
|-CXXMethodDecl 0x56097d4c9458 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56097d4c9348 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56097d4c93c0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56097d4c9508 <col:69> "" ""
|-CXXMethodDecl 0x56097d4c9620 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56097d4c9590 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56097d4c96c8 <col:62> "" ""
|-CXXMethodDecl 0x56097d4c9860 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56097d4c9750 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56097d4c97c8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56097d4c9910 <col:68> "" ""
|-CXXMethodDecl 0x56097d4c9a28 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56097d4c9998 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56097d4c9ad0 <col:63> "" ""
|-CXXMethodDecl 0x56097d4c9c68 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56097d4c9b58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56097d4c9bd0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56097d4c9d18 <col:69> "" ""
|-CXXMethodDecl 0x56097d4c9da8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56097d4c9e48 <col:64> "" ""
|-CXXMethodDecl 0x56097d4c9ed8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56097d4c9f78 <col:52> "" ""
|-CXXMethodDecl 0x56097d4ca008 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56097d4ca0a8 <col:67> "" ""
|-CXXMethodDecl 0x56097d4ca138 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56097d4ca1d8 <col:55> "" ""
|-CXXMethodDecl 0x56097d4ca2f0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56097d4ca260 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56097d4ca398 <col:58> "" ""
|-CXXMethodDecl 0x56097d4ca530 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56097d4ca420 <col:33> col:36 'int'
| |-ParmVarDecl 0x56097d4ca498 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56097d4ca5e0 <col:62> "" ""
|-CXXMethodDecl 0x56097d4ca6f8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56097d4ca668 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56097d4ca7a0 <col:58> "" ""
|-CXXMethodDecl 0x56097d4ca938 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56097d4ca828 <col:33> col:36 'int'
| |-ParmVarDecl 0x56097d4ca8a0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56097d4ca9e8 <col:62> "" ""
|-CXXMethodDecl 0x56097d4cab00 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56097d4caa70 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56097d4caba8 <col:60> "" ""
|-CXXMethodDecl 0x56097d4cad40 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56097d4cac30 <col:34> col:37 'int'
| |-ParmVarDecl 0x56097d4caca8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56097d4cadf0 <col:64> "" ""
|-CXXMethodDecl 0x56097d4caf08 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56097d4cae78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56097d4cafb0 <col:58> "" ""
|-CXXMethodDecl 0x56097d4cb148 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56097d4cb038 <col:33> col:36 'int'
| |-ParmVarDecl 0x56097d4cb0b0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56097d4cb1f8 <col:62> "" ""
|-CXXMethodDecl 0x56097d4cb310 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56097d4cb280 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56097d4cb3b8 <col:59> "" ""
|-CXXMethodDecl 0x56097d4cb550 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56097d4cb440 <col:33> col:36 'int'
| |-ParmVarDecl 0x56097d4cb4b8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56097d4cb600 <col:63> "" ""
|-AccessSpecDecl 0x56097d4cb670 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56097d4cb698 prev 0x56097d4c08a0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56097d4cb790 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56097d4cb880 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56097d4cb9a8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56097d4cbb28 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56097d4cbca8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56097d4cbe28 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56097d4dcc58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56097d4dd4c8 <col:11>
| |-CXXDestructorDecl 0x56097d4dcd30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56097d4dce68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56097d4dce68
| | `-ParmVarDecl 0x56097d4dcf78 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56097d4dd018 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56097d4dd018
| | `-ParmVarDecl 0x56097d4dd128 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56097d4dfee8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56097d4dfff8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56097d4e0278 <col:11>
| |   `-ReturnStmt 0x56097d4e0268 <col:11>
| |     `-UnaryOperator 0x56097d4e0250 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56097d4e0240 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56097d4e0068 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56097d4e0068
|   `-ParmVarDecl 0x56097d4e0178 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56097d4cbe90 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56097d4cbfa8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56097d4cc048 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56097d4cc0b0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56097d4cc118 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56097d4cc180 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56097d4cc1e0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56097d4cc2a0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56097d4cc300 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56097d4cc360 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56097d4dcb68 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56097d4cc048 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56097d4dd4d8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56097d4dd530 <col:12>
| |-CXXConstructorDecl 0x56097d4dd198 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56097d4dd198
| | `-ParmVarDecl 0x56097d4dd2a8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56097d4dd348 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56097d4dd348
| | `-ParmVarDecl 0x56097d4dd458 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56097d4df5d0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56097d4cc3d8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56097d4cc438 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56097d4cc4a0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56097d4cc508 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56097d4cc570 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56097d4cc5d8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56097d4cc638 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56097d4cc698 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56097d4cc700 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56097d4cc788 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56097d4cc3d8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56097d4dcb00 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56097d4cc638 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56097d4dd540 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56097d4dd5a0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56097d4cc928 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56097d4cc868 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56097d4cca20 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56097d4ccc08 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56097d4ccb10 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56097d4cced8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56097d4cccc0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d4ccd38 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56097d4ccdb0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4cd0f8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56097d4ccfa8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56097d4cd020 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56097d4d56d8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56097d4cd1b8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56097d4cd230 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56097d4cd2a8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56097d4d5830 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56097d4d57a0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4d5978 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56097d4d58e8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56097d4d5a70 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d4dd640 prev 0x56097d4b9f00 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x56097d4dd778 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x56097d4dd808 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x56097d4dd8b0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x56097d4dd950 <col:20>
| `-OptimizeNoneAttr 0x56097d4dd9a8 <col:30>
|-CXXMethodDecl 0x56097d4dd9f8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x56097d4dda98 <col:20>
| `-OptimizeNoneAttr 0x56097d4ddaf0 <col:30>
|-CXXMethodDecl 0x56097d4ddb40 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4ddc08 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4ddcd0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4ddde8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x56097d4ddeb0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x56097d4ddf50 <col:20>
| `-OptimizeNoneAttr 0x56097d4ddfa8 <col:30>
|-CXXMethodDecl 0x56097d4de018 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x56097d4de0b8 <col:20>
| `-OptimizeNoneAttr 0x56097d4de110 <col:30>
|-CXXMethodDecl 0x56097d4de1b8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x56097d4de258 <col:20>
| `-OptimizeNoneAttr 0x56097d4de2b0 <col:30>
|-CXXMethodDecl 0x56097d4de300 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x56097d4de418 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x56097d4de538 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x56097d4de658 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x56097d4de720 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x56097d4de7c0 <col:62> "" ""
|-AccessSpecDecl 0x56097d4de830 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x56097d4de890 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x56097d4df488 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x56097d4df6b0 <col:29, col:31>
|-CXXMethodDecl 0x56097d4de958 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x56097d4dea98 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x56097d4dea08 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x56097d4deb90 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x56097d4df6c0 <col:23, col:25>
|-CXXMethodDecl 0x56097d4ded48 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x56097d4dec80 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x56097d4df018 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56097d4dee00 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56097d4dee78 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56097d4deef0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56097d4df1a8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x56097d4df0e0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x56097d4df2a0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x56097d4df308 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x56097d4df308
  `-ParmVarDecl 0x56097d4df418 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d50f3b8 prev 0x56097d4f2f50 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x56097d510e28 <line:148:18>
|-CXXRecordDecl 0x56097d50f4b0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x56097d50f540 <col:22, col:28> col:22 public
|-TypedefDecl 0x56097d50f578 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x56097d0e66e0 'uninitialized_type'
|   `-CXXRecord 0x56097d0e6648 'uninitialized_type'
|-CXXConstructorDecl 0x56097d50f608 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x56097d511128 <col:27, line:16:5>
|   `-BinaryOperator 0x56097d511108 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x56097d510f10 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x56097d510ef8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56097d510ea8 <col:2> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|     | |   `-CXXThisExpr 0x56097d510e98 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x56097d510ed8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x56097d5110f0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x56097d5110d0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x56097d510fa8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x56097d510f90 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x56097d510f40 <col:13> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|         | |   `-CXXThisExpr 0x56097d510f30 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x56097d510f70 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x56097d5110b8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x56097d511098 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x56097d511040 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x56097d511028 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x56097d510fd8 <col:24> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|             | |   `-CXXThisExpr 0x56097d510fc8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x56097d511008 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x56097d511080 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x56097d511060 <col:35> 'int' 0
|-CXXConstructorDecl 0x56097d50f758 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x56097d50f6c8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x56097d5112f0 <col:61, line:24:5>
|   `-CallExpr 0x56097d511240 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x56097d511228 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56097d511208 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56097d1f0438 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x56097d511290 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x56097d511278 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x56097d511198 <col:9> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|     |     `-CXXThisExpr 0x56097d511188 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x56097d5112c0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x56097d5112a8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x56097d5111c8 <col:16> 'const unsigned char *' lvalue ParmVar 0x56097d50f6c8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x56097d5112d8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x56097d5111e8 <col:22> 'int' 6
|-CXXConstructorDecl 0x56097d50f8a8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x56097d50f818 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x56097d511360 <col:59, line:29:5>
|   `-CStyleCastExpr 0x56097d511338 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x56097d511308 <col:9> 'const uninitialized_type' lvalue ParmVar 0x56097d50f818 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x56097d50f9a8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x56097d511aa8 <col:42, line:34:5>
|   `-ReturnStmt 0x56097d511a98 <line:33:2, col:28>
|     `-ExprWithCleanups 0x56097d511a80 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x56097d511a50 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56097d511888 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x56097d511800 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x56097d5116f0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x56097d5116d8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x56097d511388 <col:22> 'int' 65535
|-CXXMethodDecl 0x56097d50fa68 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x56097d50fb08 <col:59> "" ""
|-TypedefDecl 0x56097d50fc88 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x56097d50fc00 'bool (EtherAddress::*)() const'
|   |-RecordType 0x56097d4f2fe0 'EtherAddress'
|   | `-CXXRecord 0x56097d50f3b8 'EtherAddress'
|   `-ParenType 0x56097d50fba0 'bool () const' sugar
|     `-FunctionProtoType 0x56097d039400 'bool () const' const cdecl
|       `-BuiltinType 0x56097cf912f0 'bool'
|-CXXConversionDecl 0x56097d50fdc8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x56097d511e88 <col:51, line:43:5>
|   `-ReturnStmt 0x56097d511e78 <line:42:2, col:70>
|     `-ConditionalOperator 0x56097d511e48 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x56097d511d70 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x56097d511c88 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x56097d511c40 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x56097d511c28 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x56097d511b70 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x56097d511b58 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x56097d511ad0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       | | |     |   `-CXXThisExpr 0x56097d511ac0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x56097d511b00 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x56097d511c70 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x56097d511c58 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x56097d511c08 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x56097d511bf0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x56097d511ba0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       | |       |   `-CXXThisExpr 0x56097d511b90 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x56097d511bd0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x56097d511d58 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x56097d511d40 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x56097d511d20 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x56097d511d08 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x56097d511cb8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       |       |   `-CXXThisExpr 0x56097d511ca8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x56097d511ce8 <col:39> 'int' 2
|       |-UnaryOperator 0x56097d511df8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x56097d511dc8 <col:45, col:59> 'bool () const' CXXMethod 0x56097d50fe98 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x56097d511e30 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x56097d511e10 <col:70> 'int' 0
|-CXXMethodDecl 0x56097d50fe98 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x56097d512048 <col:34, line:51:5>
|   `-ReturnStmt 0x56097d512038 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x56097d512020 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x56097d512000 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x56097d511fe8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56097d511fd0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56097d511f90 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x56097d511f50 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x56097d511f20 <col:9> '<bound member function type>' ->data 0x56097d510330
|         |     |   `-CXXThisExpr 0x56097d511f10 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x56097d511f70 <col:16> 'int' 0
|         `-IntegerLiteral 0x56097d511fb0 <col:21> 'int' 1
|-CXXMethodDecl 0x56097d50ff58 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x56097d512208 <col:34, line:59:5>
|   `-ReturnStmt 0x56097d5121f8 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x56097d5121e0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x56097d5121c0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x56097d5121a8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56097d512190 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56097d512150 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x56097d512110 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x56097d5120e0 <col:9> '<bound member function type>' ->data 0x56097d510330
|         |     |   `-CXXThisExpr 0x56097d5120d0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x56097d512130 <col:16> 'int' 0
|         `-IntegerLiteral 0x56097d512170 <col:21> 'int' 2
|-CXXMethodDecl 0x56097d510018 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x56097d512508 <col:38, line:66:5>
|   `-ReturnStmt 0x56097d5124f8 <line:65:2, col:43>
|     `-BinaryOperator 0x56097d5124d8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x56097d512498 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x56097d5123b0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x56097d512368 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x56097d512350 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x56097d512298 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x56097d512280 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x56097d512230 <col:9> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       | | |     |   `-CXXThisExpr 0x56097d512220 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x56097d512260 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x56097d512398 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x56097d512380 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x56097d512330 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x56097d512318 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x56097d5122c8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       | |       |   `-CXXThisExpr 0x56097d5122b8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x56097d5122f8 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x56097d512480 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x56097d512468 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x56097d512448 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x56097d512430 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x56097d5123e0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       |       |   `-CXXThisExpr 0x56097d5123d0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x56097d512410 <col:37> 'int' 2
|       `-IntegerLiteral 0x56097d5124b8 <col:43> 'int' 196605
|-CXXMethodDecl 0x56097d510198 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x56097d5100d0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x56097d512658 <col:64, line:75:5>
|   `-ReturnStmt 0x56097d512648 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x56097d512628 <col:9, col:68> 'bool'
|       `-MemberExpr 0x56097d5125f8 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x56097d510018
|         `-CXXReinterpretCastExpr 0x56097d512568 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x56097d512550 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x56097d512520 <col:48> 'const unsigned char *' lvalue ParmVar 0x56097d5100d0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x56097d510268 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x56097d5190a0 <col:34, line:80:5>
|   `-ReturnStmt 0x56097d519090 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x56097d519060 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x56097d5126c8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x56097d512680 <col:43> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|           `-CXXThisExpr 0x56097d512670 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x56097d510330 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x56097d519168 <col:46, line:85:5>
|   `-ReturnStmt 0x56097d519158 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x56097d519128 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x56097d519110 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x56097d5190c8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|           `-CXXThisExpr 0x56097d5190b8 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x56097d510478 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x56097d5191e8 <col:42, line:91:5>
|   `-ReturnStmt 0x56097d5191d8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x56097d5191c0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x56097d519190 <col:9> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|         `-CXXThisExpr 0x56097d519180 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x56097d510568 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x56097d5195f8 <col:36, line:97:5>
|   `-ReturnStmt 0x56097d5195e8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x56097d5195c8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x56097d519448 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x56097d519428 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x56097d519410 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x56097d5193f8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x56097d519278 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x56097d519260 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x56097d519210 <col:10> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       |   |     |   `-CXXThisExpr 0x56097d519200 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x56097d519240 <col:16> 'int' 2
|       |   `-ParenExpr 0x56097d5193d8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x56097d5193b8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x56097d519370 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x56097d519358 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x56097d519340 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x56097d519310 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x56097d5192f8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x56097d5192a8 <col:31> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|       |       |       |   `-CXXThisExpr 0x56097d519298 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x56097d5192d8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x56097d519398 <col:43> 'int' 16
|       `-ParenExpr 0x56097d5195a8 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x56097d519588 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x56097d519540 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x56097d519528 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x56097d519510 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x56097d5194e0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x56097d5194c8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x56097d519478 <col:18> 'uint16_t const[3]' lvalue ->_data 0x56097d510c28
|           |       |   `-CXXThisExpr 0x56097d519468 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x56097d5194a8 <col:24> 'int' 0
|           `-IntegerLiteral 0x56097d519568 <col:30> 'int' 9
|-CXXMethodDecl 0x56097d510628 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x56097d519708 <col:35, line:111:5>
|   `-ReturnStmt 0x56097d5196f8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x56097d5196e0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x56097d5196b0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56097d519698 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56097d519678 <col:9, col:22> 'String' (CXXTemporary 0x56097d519678)
|             `-CXXMemberCallExpr 0x56097d519650 <col:9, col:22> 'String'
|               `-MemberExpr 0x56097d519620 <col:9> '<bound member function type>' ->unparse_dash 0x56097d5107a8
|                 `-CXXThisExpr 0x56097d519610 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x56097d5106e8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x56097d5107a8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x56097d510868 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x56097d510908 <col:44> "" ""
|-CXXConversionDecl 0x56097d5109a8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x56097d510a50 <col:51> "" ""
|-TypedefDecl 0x56097d510b08 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x56097d510ad0 'const EtherAddress &'
|   `-QualType 0x56097d4f2fe1 'const EtherAddress' const
|     `-RecordType 0x56097d4f2fe0 'EtherAddress'
|       `-CXXRecord 0x56097d50f3b8 'EtherAddress'
|-AccessSpecDecl 0x56097d510b60 <line:140:2, col:9> col:2 private
|-FieldDecl 0x56097d510c28 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x56097d510d78 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x56097d510c88 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56097d5199b0 <col:30, line:146:5>
|   `-BinaryOperator 0x56097d519990 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x56097d519798 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x56097d519780 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56097d519730 <col:2> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|     | |   `-CXXThisExpr 0x56097d519720 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x56097d519760 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x56097d519978 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x56097d519958 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x56097d519830 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x56097d519818 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x56097d5197c8 <col:13> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|         | |   `-CXXThisExpr 0x56097d5197b8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x56097d5197f8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x56097d519940 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x56097d519920 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x56097d5198c8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x56097d5198b0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x56097d519860 <col:24> 'uint16_t [3]' lvalue ->_data 0x56097d510c28
|             | |   `-CXXThisExpr 0x56097d519850 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x56097d519890 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x56097d519908 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x56097d5198e8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x56097d510c88 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x56097d5113a8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x56097d5113a8
| `-ParmVarDecl 0x56097d5114b8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x56097d511558 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d511668 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x56097d510c28 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x56097d5119f0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x56097d511978 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x56097d511930 <col:7> 'uint16_t [3]' xvalue ._data 0x56097d510c28
| |   |   `-CXXStaticCastExpr 0x56097d511900 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x56097d5118d0 <col:7> 'EtherAddress' lvalue ParmVar 0x56097d511668 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x56097d5119d8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x56097d5119b8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x56097d5119a0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x56097d511978 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x56097d511930 <col:7> 'uint16_t [3]' xvalue ._data 0x56097d510c28
| |       |     `-CXXStaticCastExpr 0x56097d511900 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x56097d5118d0 <col:7> 'EtherAddress' lvalue ParmVar 0x56097d511668 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x56097d511990 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x56097d511a40 <col:7>
`-CXXDestructorDecl 0x56097d511720 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d5bdfc0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56097d5be0d8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56097d5be168 <col:16, col:22> col:16 public
|-EnumDecl 0x56097d5be190 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56097d5be290 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56097d5be4e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5be270 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56097d5be250 <col:21> 'int' 0
| |-EnumConstantDecl 0x56097d5be320 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56097d5be4f8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5be300 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56097d5be2e0 <col:24> 'int' 22
| |-EnumConstantDecl 0x56097d5be3b0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56097d5be510 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5be390 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56097d5be370 <col:24> 'int' 34
| |-EnumConstantDecl 0x56097d5be440 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56097d5be528 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56097d5be420 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56097d5be400 <col:25> 'int' 95
| `-EnumConstantDecl 0x56097d5be490 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56097d5bff40 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56097d5c0378 <col:7>
|-CXXConstructorDecl 0x56097d5c0048 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56097d5c0048
| `-ParmVarDecl 0x56097d5c0158 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56097d5c01f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d5c0308 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56097d62d010 <col:7>
`-CXXDestructorDecl 0x56097d5c2478 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56097d5be558 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56097d5be6b8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56097d5be748 <col:32, col:38> col:32 public
|-TypedefDecl 0x56097d5be780 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56097d0e69d0 'uint32_t' sugar
|   |-Typedef 0x56097cffa408 'uint32_t'
|   `-TypedefType 0x56097cfd3440 '__uint32_t' sugar
|     |-Typedef 0x56097cfd3038 '__uint32_t'
|     `-BuiltinType 0x56097cf91410 'unsigned int'
|-CXXConstructorDecl 0x56097d5be8c8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56097d5be7f0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56097d5bfe48 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56097d5c0388 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56097d5bf700 'base' 'int'
| | `-ImplicitCastExpr 0x56097d5bfee8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56097d5bfea8 <col:16> 'int' lvalue ParmVar 0x56097d5be7f0 'b' 'int'
| `-CompoundStmt 0x56097d5c03f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x56097d5bee60 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56097d5be990 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56097d5bea10 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56097d5bea88 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56097d5beb08 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56097d5bebc8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56097d5bec48 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56097d5bf2b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56097d5bef30 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56097d5bf218 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56097d5befd8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56097d5bf078 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56097d5bf0f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56097d5bfe68 <col:82> 'const ArgContext' lvalue Var 0x56097d5b2998 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56097d5c1328 <col:94, line:1067:5>
| |   |-DeclStmt 0x56097d5c0588 <line:1054:9, col:64>
| |   | `-VarDecl 0x56097d5c0418 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56097d5c0540 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56097d5c07a8 <line:1055:9, col:91>
| |   | `-VarDecl 0x56097d5c05b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56097d5c0780 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56097d5c0760 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56097d5c0710 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56097d5c06f0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56097d5c0698 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56097d5c0648 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56097d5c0678 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56097d5c06d8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56097d5c06b8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56097d5c0740 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56097d5c0908 <line:1056:9, col:27>
| |   | `-VarDecl 0x56097d5c08a0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56097d5c0d58 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56097d5c0c88 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56097d5c0c00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56097d51ab00 0x56097d4b0bb8 0x56097d2f9f78 0x56097d2f9c50 0x56097d2eb430 0x56097d2eb0e0 0x56097d2ea9d0 0x56097d2bd340 0x56097d249800
| |   | | |-CallExpr 0x56097d5c0b40 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56097d5c0930 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56097d5c09e0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56097d5c09b0 <col:19, col:23> '<bound member function type>' .begin 0x56097d2da638
| |   | | | |   `-DeclRefExpr 0x56097d5c0990 <col:19> 'const String' lvalue ParmVar 0x56097d5befd8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56097d5c0a50 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56097d5c0a20 <col:32, col:36> '<bound member function type>' .end 0x56097d2da850
| |   | | | |   `-DeclRefExpr 0x56097d5c0a00 <col:32> 'const String' lvalue ParmVar 0x56097d5befd8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56097d5c0a70 <col:43> 'const bool' lvalue Var 0x56097d5c0418 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56097d5c0ad8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56097d5c0ab8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56097d5c0b00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56097d5c08a0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56097d5c0b20 <col:73> 'const int' lvalue Var 0x56097d5c05b8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56097d5c0be0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56097d5c0bb0 <col:16, col:20> '<bound member function type>' .end 0x56097d2da850
| |   | |     `-DeclRefExpr 0x56097d5c0b90 <col:16> 'const String' lvalue ParmVar 0x56097d5befd8 'str' 'const String &'
| |   | `-BinaryOperator 0x56097d5c0d38 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56097d5c0cd0 <col:13> 'int' lvalue ->status 0x56097d5bf768
| |   |   | `-CXXThisExpr 0x56097d5c0cc0 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56097d5c0d20 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56097d5c0d00 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be320 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56097d5c0fa8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56097d5c0e90 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56097d5c0e78 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56097d5c0e60 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56097d5c0d80 <col:13> 'int' lvalue ->status 0x56097d5bf768
| |   | | |     `-CXXThisExpr 0x56097d5c0d70 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56097d5c0e40 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56097d5c0e10 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56097d5c0dc0 <col:23> 'int' lvalue ->status 0x56097d5bf768
| |   | |   |   `-CXXThisExpr 0x56097d5c0db0 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56097d5c0e28 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56097d5c0df0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56097d5c0f88 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56097d5c0f28 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56097d5c0ed0 <col:13, col:18> '<bound member function type>' .error 0x56097d564d50
| |   |   | | `-DeclRefExpr 0x56097d5c0eb0 <col:13> 'const ArgContext' lvalue ParmVar 0x56097d5bf0f0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56097d5c0f50 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56097d5c0f00 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56097d5c0f78 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56097d5c0f68 <col:20> 'bool' false
| |   |-DeclStmt 0x56097d5c1178 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56097d5c1120 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56097d5c10b0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56097d5c12d8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56097d5c1190 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56097d27d7c8
| |   | |-DeclRefExpr 0x56097d5c11d8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56097d5c08a0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56097d5c12a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56097d5c1220 <col:64> 'V' lvalue ParmVar 0x56097d5bf078 'result' 'V &'
| |   `-ReturnStmt 0x56097d5c1318 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56097d5c1308 <col:16> 'bool' true
| `-CXXMethodDecl 0x56097d630b88 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x56097d630960 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x56097d630a38 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x56097d630aa0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x56097d63a990 <col:94, line:1067:5>
|     |-DeclStmt 0x56097d631398 <line:1054:9, col:64>
|     | `-VarDecl 0x56097d6311b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x56097d631328 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x56097d6312f8 <col:36, col:55> 'const bool' lvalue Var 0x56097d268830 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x56097d631578 <line:1055:9, col:91>
|     | `-VarDecl 0x56097d6313b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56097d6314f8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x56097d6314e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x56097d6314c0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x56097d6314a0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x56097d631480 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x56097d631448 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x56097d631428 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56097d5c0678 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x56097d631468 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56097d5c06b8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56097d5c0740 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56097d631710 <line:1056:9, col:27>
|     | `-VarDecl 0x56097d6316a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x56097d631ba0 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x56097d631b48 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x56097d631a00 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x56097d6319d0 <col:13> '<bound member function type>' ->parse 0x56097d5bee60
|     | | | | `-CXXThisExpr 0x56097d6319c0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x56097d631860 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56097d631830 <col:19, col:23> '<bound member function type>' .begin 0x56097d2da638
|     | | | |   `-DeclRefExpr 0x56097d631810 <col:19> 'const String' lvalue ParmVar 0x56097d630960 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56097d6318d0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56097d6318a0 <col:32, col:36> '<bound member function type>' .end 0x56097d2da850
|     | | | |   `-DeclRefExpr 0x56097d631880 <col:32> 'const String' lvalue ParmVar 0x56097d630960 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x56097d631a70 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x56097d631a50 <col:43> 'const bool' lvalue Var 0x56097d6311b8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x56097d631958 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x56097d631940 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x56097d631920 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x56097d631a88 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x56097d631980 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x56097d6316a8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x56097d631ac0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x56097d631aa0 <col:73> 'const int' lvalue Var 0x56097d6313b0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x56097d631b28 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56097d631af8 <col:16, col:20> '<bound member function type>' .end 0x56097d2da850
|     | |     `-DeclRefExpr 0x56097d631ad8 <col:16> 'const String' lvalue ParmVar 0x56097d630960 'str' 'const String &'
|     | `-BinaryOperator 0x56097d631b80 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56097d5c0cd0 <col:13> 'int' lvalue ->status 0x56097d5bf768
|     |   | `-CXXThisExpr 0x56097d5c0cc0 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56097d631b68 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56097d5c0d00 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be320 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56097d631d18 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56097d631c38 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56097d631c20 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56097d631c08 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56097d5c0d80 <col:13> 'int' lvalue ->status 0x56097d5bf768
|     | | |     `-CXXThisExpr 0x56097d5c0d70 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56097d631be8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56097d631bb8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56097d5c0dc0 <col:23> 'int' lvalue ->status 0x56097d5bf768
|     | |   |   `-CXXThisExpr 0x56097d5c0db0 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56097d631bd0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56097d5c0df0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56097d631cf8 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56097d631ca8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56097d631c78 <col:13, col:18> '<bound member function type>' .error 0x56097d564d50
|     |   | | `-DeclRefExpr 0x56097d631c58 <col:13> 'const ArgContext' lvalue ParmVar 0x56097d630aa0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56097d631cd0 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56097d5c0f00 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56097d631ce8 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56097d5c0f68 <col:20> 'bool' false
|     |-DeclStmt 0x56097d632258 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56097d632200 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x56097d6321b0 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x56097d632190 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x56097d632120 'type'
|     |       `-ElaboratedType 0x56097d6320d0 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x56097d6320b0 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x56097d268988 'unsigned_type'
|     |           `-BuiltinType 0x56097cf913f0 'unsigned short'
|     |-CallExpr 0x56097d63a920 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x56097d63a908 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56097d63a888 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x56097d63a768 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x56097d27d7c8 'extract_integer')
|     | |-ImplicitCastExpr 0x56097d63a968 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x56097d63a950 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x56097d6322b8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x56097d6316a8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x56097d63a3f8 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x56097d632338 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x56097d630a38 'result' 'unsigned short &'
|     `-ReturnStmt 0x56097d63a980 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56097d5c1308 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56097d5bf678 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56097d5bf328 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56097d5bf5d8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56097d5bf3d8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56097d5bf478 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56097d5bf4f0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56097d5bfe88 <col:71> 'const ArgContext' lvalue Var 0x56097d5b2998 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56097d5c1a98 <col:83, line:1083:5>
| |   |-DeclStmt 0x56097d5c13f0 <line:1071:9, col:12>
| |   | `-VarDecl 0x56097d5c1388 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56097d5c1a70 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56097d5c1680 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56097d5c1508 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56097d5c14d0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56097d5c1418 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56097d5c1470 <col:31> 'const String' lvalue ParmVar 0x56097d5bf3d8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56097d5c1490 <col:36> 'V' lvalue Var 0x56097d5c1388 'x' 'V'
| |     | |   `-DeclRefExpr 0x56097d5c14b0 <col:39> 'const ArgContext' lvalue ParmVar 0x56097d5bf4f0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56097d5c1660 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56097d5c1640 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56097d5c1628 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56097d5c1610 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56097d5c1530 <col:17> 'int' lvalue ->status 0x56097d5bf768
| |     |     |     `-CXXThisExpr 0x56097d5c1520 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56097d5c15f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56097d5c15c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56097d5c1570 <col:27> 'int' lvalue ->status 0x56097d5bf768
| |     |       |   `-CXXThisExpr 0x56097d5c1560 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56097d5c15d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56097d5c15a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56097d5c16b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56097d5c16a0 <col:20> 'bool' false
| |     `-IfStmt 0x56097d5c1a48 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56097d5c1750 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56097d5c1720 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56097d5c16d0 <col:18> 'int' lvalue ->status 0x56097d5bf768
| |       | |   `-CXXThisExpr 0x56097d5c16c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56097d5c1738 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56097d5c1700 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56097d5c1988 <col:42, line:1079:9>
| |       | |-CallExpr 0x56097d5c1930 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56097d5c1780 <line:1076:13> '<bound member function type>' ->range_error 0x56097d5bfd78
| |       | | | `-CXXThisExpr 0x56097d5c1770 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56097d5c17b0 <col:25> 'const ArgContext' lvalue ParmVar 0x56097d5bf4f0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56097d5c1890 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56097d5c1908 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56097d5c18e8 <col:43> 'V' lvalue Var 0x56097d5c1388 'x' 'V'
| |       | `-ReturnStmt 0x56097d5c1978 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56097d5c1968 <col:20> 'bool' false
| |       `-CompoundStmt 0x56097d5c1a28 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56097d5c19e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56097d5c19a8 <col:13> 'V' lvalue ParmVar 0x56097d5bf478 'result' 'V &'
| |         | `-DeclRefExpr 0x56097d5c19c8 <col:22> 'V' lvalue Var 0x56097d5c1388 'x' 'V'
| |         `-ReturnStmt 0x56097d5c1a18 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56097d5c1a08 <col:20> 'bool' true
| `-CXXMethodDecl 0x56097d630548 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x56097d6302e0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x56097d6303b8 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x56097d630420 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x56097d631198 <col:83, line:1083:5>
|     |-DeclStmt 0x56097d6307d0 <line:1071:9, col:12>
|     | `-VarDecl 0x56097d630768 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x56097d631170 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x56097d630e00 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x56097d630d28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x56097d630cf0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x56097d630ca8 <col:14> '<bound member function type>' ->parse_saturating 0x56097d630b88
|       | |   | `-CXXThisExpr 0x56097d630c98 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x56097d630840 <col:31> 'const String' lvalue ParmVar 0x56097d6302e0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x56097d630860 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x56097d630768 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x56097d630880 <col:39> 'const ArgContext' lvalue ParmVar 0x56097d630420 'args' 'const ArgContext &'
|       | `-ParenExpr 0x56097d630de0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x56097d630dc0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x56097d630da8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x56097d630d90 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56097d5c1530 <col:17> 'int' lvalue ->status 0x56097d5bf768
|       |     |     `-CXXThisExpr 0x56097d5c1520 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x56097d630d70 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x56097d630d40 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56097d5c1570 <col:27> 'int' lvalue ->status 0x56097d5bf768
|       |       |   `-CXXThisExpr 0x56097d5c1560 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x56097d630d58 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56097d5c15a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x56097d630e20 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56097d5c16a0 <col:20> 'bool' false
|       `-IfStmt 0x56097d631148 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x56097d630e60 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x56097d630e30 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56097d5c16d0 <col:18> 'int' lvalue ->status 0x56097d5bf768
|         | |   `-CXXThisExpr 0x56097d5c16c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x56097d630e48 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56097d5c1700 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56097d5be3b0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x56097d631080 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x56097d630ff0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56097d5c1780 <line:1076:13> '<bound member function type>' ->range_error 0x56097d5bfd78
|         | | | `-CXXThisExpr 0x56097d5c1770 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x56097d630e80 <col:25> 'const ArgContext' lvalue ParmVar 0x56097d630420 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x56097d631058 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x56097d631028 <col:31, col:50> 'const bool' lvalue Var 0x56097d268830 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x56097d630fc8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x56097d630fb0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x56097d630f98 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x56097d630f78 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x56097d630768 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x56097d631070 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56097d5c1968 <col:20> 'bool' false
|         `-CompoundStmt 0x56097d631128 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x56097d6310f8 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x56097d6310a0 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x56097d6303b8 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x56097d6310e0 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x56097d6310c0 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x56097d630768 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x56097d631118 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56097d5c1a08 <col:20> 'bool' true
|-FieldDecl 0x56097d5bf700 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56097d5bf768 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56097d5bf7b8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56097d5bfa70 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56097d5bf7f8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56097d5bf878 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56097d5bf8f0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56097d5bf970 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56097d5bfd78 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56097d5bfb40 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56097d5bfbb8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56097d5bfc50 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56097d5c22f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56097d5c22f8
| `-ParmVarDecl 0x56097d5c2408 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56097d5c2588 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d5c2698 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56097d62d020 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56097d62cff0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56097d62cfc0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56097d62cf90 <col:7> 'IntArg' lvalue ParmVar 0x56097d5c2698 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56097d5bf700 'base' 'int'
| | `-ImplicitCastExpr 0x56097d62d118 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56097d62d0e8 <col:7> 'int' xvalue .base 0x56097d5bf700
| |     `-CXXStaticCastExpr 0x56097d62d0b8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56097d62d088 <col:7> 'IntArg' lvalue ParmVar 0x56097d5c2698 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56097d5bf768 'status' 'int'
| | `-ImplicitCastExpr 0x56097d62d1e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56097d62d1b8 <col:7> 'int' xvalue .status 0x56097d5bf768
| |     `-CXXStaticCastExpr 0x56097d62d188 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x56097d62d158 <col:7> 'IntArg' lvalue ParmVar 0x56097d5c2698 '' 'IntArg &&'
| `-CompoundStmt 0x56097d62d240 <col:7>
`-CXXDestructorDecl 0x56097d62c180 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56097d5c6230 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x56097d5c6488 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56097d62c0a8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56097d62c620 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56097d62c600 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56097d62c690 <col:19>
|-CXXConstructorDecl 0x56097d62c288 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x56097d62c288
| `-ParmVarDecl 0x56097d62c398 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x56097d62c438 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56097d62c548 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56097d62d250 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56097d62cf70 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56097d62cf40 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x56097d62cf10 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x56097d62c548 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x56097d62d2c0 <col:19>
`-CXXDestructorDecl 0x56097d62c6d0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
