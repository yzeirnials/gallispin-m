
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336c7ce8 prev 0x555e336bf528 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e336c7de0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x555e336c7e70 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x555e336c7ee8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x555e336c7fa8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x555e336c8070 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x555e336c81e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x555e336c8120 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x555e336c8290 <col:24>
| `-OptimizeNoneAttr 0x555e336c82e8 <col:34>
|-CXXMethodDecl 0x555e336c8330 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x555e336c85e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x555e336c83e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555e336c8458 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x555e336c84d8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x555e336c86a0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x555e336c86d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x555e336c8740 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x555e336c87c8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x555e336c8ae8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x555e336c8880 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555e336c88f8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x555e336c8970 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x555e336c89f0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x555e336c8c00 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x555e336cf520 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555e336cf520
| `-ParmVarDecl 0x555e336cf638 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x555e336cf6d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555e336cf6d8
| `-ParmVarDecl 0x555e336cf7e8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x555e336d3c38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336b74f0 prev 0x555e336b7290 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e336b75e8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x555e336b7678 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x555e336b76d8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x555e336b77c8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x555e336b78c8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x555e336b7a98 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x555e336b7948 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x555e336b79c0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x555e336b7c28 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x555e336b7b60 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x555e336b7cd0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x555e336b7e08 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x555e336b7d40 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x555e336b7fa8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x555e336b7ee8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x555e336b8148 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x555e336b8088 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x555e336b81f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x555e336b82f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x555e336b83d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336b82d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x555e336b82b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x555e336b8380 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x555e336b83e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e336b8360 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x555e336b8340 <col:44> 'int' 2
|-CXXMethodDecl 0x555e336b8530 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x555e336b8418 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x555e336b8498 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x555e336b8688 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x555e336b85f8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x555e336b8898 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x555e336b8748 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x555e336b87c0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x555e336b8948 <col:20>
| `-OptimizeNoneAttr 0x555e336b89a0 <col:30>
|-CXXMethodDecl 0x555e336b8aa8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x555e336b89e0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x555e336b8b50 <col:20>
| `-OptimizeNoneAttr 0x555e336b8ba8 <col:30>
|-CXXMethodDecl 0x555e336b8bf8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x555e336b8cc0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x555e336b8d80 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x555e336b8e08 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x555e336b8e90 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x555e336b8f18 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x555e336b8fa0 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x555e336b9030 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x555e336b90f0 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x555e336b9178 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x555e336b9200 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x555e336b9288 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x555e336b9310 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x555e336b9398 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x555e336b9428 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x555e336b94e8 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x555e336b9578 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x555e336b96c8 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x555e336b9630 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x555e336b9850 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x555e336b9788 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x555e336b9af0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x555e336b9908 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x555e336b9988 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x555e336b9a08 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x555e336b9ba8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x555e336b9cb0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555e336b9f40 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336b9c90 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x555e336b9c70 <col:33> 'int' 0
| |-EnumConstantDecl 0x555e336b9d40 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555e336b9f58 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336b9d20 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x555e336b9d00 <col:32> 'int' 20
| |-EnumConstantDecl 0x555e336b9dd0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555e336b9f70 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336b9db0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x555e336b9d90 <col:38> 'int' 90
| |-EnumConstantDecl 0x555e336b9e60 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555e336b9f88 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336b9e40 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x555e336b9e20 <col:35> 'int' 100
| `-EnumConstantDecl 0x555e336b9ef0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x555e336b9fa0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e336b9ed0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x555e336b9eb0 <col:32> 'int' 2000
|-CXXMethodDecl 0x555e336bda90 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x555e336bdda0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555e336bdc10 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x555e336bdc88 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e336bde70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x555e336bdff0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x555e336bdf20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e336be1f8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555e336be0a8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x555e336be120 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e336be2f8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x555e336be398 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x555e336be460 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be4f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x555e336be720 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336be4d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x555e336be4b0 <col:36> 'int' EnumConstant 0x555e336be460 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be540 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be590 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be5e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be630 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555e336be680 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x555e336be6d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x555e336be808 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x555e336be748 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x555e336be8d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x555e336be990 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x555e336bea50 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x555e336beb10 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x555e336bebf8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x555e336becc0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x555e336bee40 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x555e336bed70 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x555e336bef68 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x555e336bf168 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x555e336bf018 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x555e336bf098 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x555e336cb9b8 <col:54, line:127:5>
|   |-ParenExpr 0x555e336cb868 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x555e336cb838 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x555e336cb520 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555e336cb4f8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x555e336cb4e0 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x555e336cb4c8 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x555e336cb498 <col:31> 'Router *' lvalue ->_router 0x555e336c93b0
|   |   |         `-CXXThisExpr 0x555e336cb488 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555e336cb580 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336cb560 <col:48> 'int' 0
|   |   `-CallExpr 0x555e336cb798 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x555e336cb780 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e336cb760 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336cb7d8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336cb5f0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x555e336cb7f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336cb610 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x555e336cb808 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e336cb648 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x555e336cb820 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e336cb748 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e336cb730 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e336cb6e8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x555e336cb900 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x555e336cb898 <col:9> 'Router *' lvalue ->_router 0x555e336c93b0
|   | | `-CXXThisExpr 0x555e336cb888 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x555e336cb8e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e336cb8c8 <col:19> 'Router *' lvalue ParmVar 0x555e336bf018 'r' 'Router *'
|   `-BinaryOperator 0x555e336cb998 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x555e336cb930 <col:9> 'int' lvalue ->_eindex 0x555e336c9418
|     | `-CXXThisExpr 0x555e336cb920 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x555e336cb980 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555e336cb960 <col:19> 'int' lvalue ParmVar 0x555e336bf098 'eindex' 'int'
|-CXXMethodDecl 0x555e336bf2f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x555e336bf228 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x555e336bf3c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x555e336bf488 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x555e336bf528 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x555e336bf778 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x555e336bf5f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x555e336bf670 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x555e336bf828 <col:20>
| `-OptimizeNoneAttr 0x555e336bf880 <col:30>
|-CXXMethodDecl 0x555e336bf988 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555e336bf8c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x555e336bfa30 <col:20>
| `-OptimizeNoneAttr 0x555e336bfa88 <col:30>
|-CXXMethodDecl 0x555e336bfb58 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555e336bfac8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x555e336bfc00 <col:20>
| `-OptimizeNoneAttr 0x555e336bfc58 <col:30>
|-CXXMethodDecl 0x555e336bfde8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x555e336bfc90 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x555e336bfd10 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x555e336bff78 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555e336bfeb0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555e336c00c8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555e336c0038 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555e336c0218 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555e336c0188 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555e336c0368 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555e336c02d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555e336c0628 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x555e336c0420 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x555e336c04a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x555e336c0548 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x555e336c0700 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x555e336c07c0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x555e336c0a90 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555e336c0940 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x555e336c09b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x555e336c0bb8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x555e336c0d90 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x555e336c0c70 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x555e336c0cf0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x555e336c0f78 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x555e336c0e58 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x555e336c0ed8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x555e336c12e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555e336c1038 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555e336c10b0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555e336c1130 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555e336caf98 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555e336caf78 <col:106> 'int' 0
| `-ParmVarDecl 0x555e336c11a8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cafd0 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cafb0 <col:126> 'int' 0
|-CXXMethodDecl 0x555e336c1668 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555e336c13b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555e336c1430 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555e336c14b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x555e336c1528 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cb008 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cafe8 <col:114> 'int' 0
|-CXXMethodDecl 0x555e336c19f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555e336c1740 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x555e336c17b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555e336c1838 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x555e336cb020 <col:96> 'int' 0
| `-ParmVarDecl 0x555e336c18b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cb060 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cb040 <col:116> 'int' 0
|-CXXMethodDecl 0x555e336c1d78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555e336c1ac8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555e336c1b40 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c1bc0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555e336cb098 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555e336cb078 <col:109> 'int' 0
| `-ParmVarDecl 0x555e336c1c38 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cb0d0 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cb0b0 <col:129> 'int' 0
|-CXXMethodDecl 0x555e336c20f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555e336c1e48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555e336c1ec0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c1f40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x555e336c1fb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cb108 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cb0e8 <col:117> 'int' 0
|-CXXMethodDecl 0x555e336c2488 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555e336c21d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c2248 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c22c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x555e336cb120 <col:99> 'int' 0
| `-ParmVarDecl 0x555e336c2340 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555e336cb160 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555e336cb140 <col:119> 'int' 0
|-CXXMethodDecl 0x555e336c28a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x555e336c2558 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555e336c25d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555e336c2650 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c26d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555e336cb198 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555e336cb178 <col:108> 'int' 0
| `-ParmVarDecl 0x555e336c2750 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x555e336cb1d0 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x555e336cb1b0 <col:141> 'int' 0
|-CXXMethodDecl 0x555e336c2cc8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555e336c2980 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555e336c2a00 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555e336c2a78 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c2af8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x555e336c2b78 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555e336cb1e8 <col:121> 'int' 0
|-CXXMethodDecl 0x555e336c30f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555e336c2da8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x555e336c2e28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x555e336c2ea0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c2f20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x555e336cb208 <col:98> 'int' 0
| `-ParmVarDecl 0x555e336c2fa0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555e336cb228 <col:123> 'int' 0
|-CXXMethodDecl 0x555e336c33c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x555e336c31d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555e336c3250 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x555e336c32d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x555e336cb248 <col:80> 'int' 0
|-EnumDecl 0x555e336c3478 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x555e336c3580 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555e336c3810 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336c3560 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x555e336c3540 <col:42> 'int' 1
| |-EnumConstantDecl 0x555e336c3610 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555e336c3828 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336c35f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x555e336c35d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x555e336c36a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555e336c3840 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336c3680 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x555e336c3660 <col:44> 'int' 4
| |-EnumConstantDecl 0x555e336c3730 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555e336c3858 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336c3710 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x555e336c36f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x555e336c37c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x555e336c3870 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e336c37a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x555e336c3780 <col:34> 'int' 6
|-CXXMethodDecl 0x555e336c3b28 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x555e336c3898 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x555e336c3938 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x555e336c39b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x555e336c3a30 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x555e336cb300 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x555e336cb2e8 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x555e336cb2d0 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x555e336cb2b0 <col:98, col:105> 'String' (CXXTemporary 0x555e336cb2b0)
|           `-CXXTemporaryObjectExpr 0x555e336cb278 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x555e336c3dc8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x555e336c3bf8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555e336c3c70 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x555e336c3ce8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555e336cb3b0 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555e336cb398 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555e336cb380 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555e336cb360 <col:94, col:101> 'String' (CXXTemporary 0x555e336cb360)
| |         `-CXXTemporaryObjectExpr 0x555e336cb328 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x555e336cbba0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x555e336cbb18 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x555e336cbae8 <col:9> '<bound member function type>' ->add_task_handlers 0x555e336c3b28
|     | `-CXXThisExpr 0x555e336cbad8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555e336cbb58 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555e336cba58 <col:27> 'Task *' lvalue ParmVar 0x555e336c3bf8 'task' 'Task *'
|     |-ImplicitCastExpr 0x555e336cbb70 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x555e336cba78 <col:33> 'NotifierSignal *' lvalue ParmVar 0x555e336c3c70 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x555e336cbb88 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555e336cba98 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555e336c37c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555e336cbab8 <col:62> 'const String' lvalue ParmVar 0x555e336c3ce8 'prefix' 'const String &'
|-CXXMethodDecl 0x555e336c3fd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x555e336c3e90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555e336c3f08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555e336cb460 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555e336cb448 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555e336cb430 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555e336cb410 <col:70, col:77> 'String' (CXXTemporary 0x555e336cb410)
| |         `-CXXTemporaryObjectExpr 0x555e336cb3d8 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x555e336cbd78 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x555e336cbcf0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x555e336cbcc0 <col:9> '<bound member function type>' ->add_task_handlers 0x555e336c3b28
|     | `-CXXThisExpr 0x555e336cbcb0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555e336cbd30 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555e336cbc30 <col:27> 'Task *' lvalue ParmVar 0x555e336c3e90 'task' 'Task *'
|     |-ImplicitCastExpr 0x555e336cbd48 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x555e336cbc50 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x555e336cbd60 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555e336cbc70 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555e336c37c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555e336cbc90 <col:57> 'const String' lvalue ParmVar 0x555e336c3f08 'prefix' 'const String &'
|-CXXMethodDecl 0x555e336c42b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x555e336c40a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c4120 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4198 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x555e336c4568 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x555e336c4388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c4408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4488 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x555e336c4858 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555e336c4638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c46b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4730 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x555e336c4b08 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x555e336c4928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c49a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4a28 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x555e336c4db8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x555e336c4bd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c4c58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4cd8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x555e336c5068 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x555e336c4e88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c4f08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c4f80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x555e336c5318 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x555e336c5138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c51b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c5238 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x555e336c55c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x555e336c53e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c5468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c54e8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x555e336c5878 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x555e336c5698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c5718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c5798 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x555e336c5b88 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x555e336c5948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c59c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c5aa0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x555e336c5df0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555e336c5c58 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555e336c5cd8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555e336c5d50 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x555e336c6098 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x555e336c5ec0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555e336c5f40 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555e336c5fb8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x555e336c6348 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x555e336c6168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c61e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c6268 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x555e336c65f8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x555e336c6418 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c6498 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c6510 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x555e336c68a8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x555e336c66c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c6748 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c67c0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x555e336c6b58 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x555e336c6978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c69f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555e336c6a70 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x555e336c6e88 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x555e336c6c28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555e336c6ca8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x555e336c6d20 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x555e336c6d98 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e336cb478 <col:93> 'bool' false
|-CXXMethodDecl 0x555e336c7070 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555e336c6f58 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x555e336c6fd8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x555e336c7248 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555e336c7130 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x555e336c71b0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x555e336c7528 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555e336c7308 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x555e336c7380 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x555e336c7400 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x555e336c7478 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x555e336c7818 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555e336c75f8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x555e336c7670 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x555e336c76f0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x555e336c7768 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x555e336c7a50 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x555e336c78f0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x555e336c7970 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x555e336c7c38 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x555e336c7b18 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x555e336c7b98 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x555e336c7ce8 prev 0x555e336bf528 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555e336c7de0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x555e336c7e70 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x555e336c7ee8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x555e336c7fa8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x555e336c8070 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x555e336c81e8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x555e336c8120 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x555e336c8290 <col:24>
| | `-OptimizeNoneAttr 0x555e336c82e8 <col:34>
| |-CXXMethodDecl 0x555e336c8330 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x555e336c85e8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x555e336c83e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555e336c8458 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x555e336c84d8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x555e336c86a0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x555e336c86d8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x555e336c8740 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x555e336c87c8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x555e336c8ae8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x555e336c8880 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555e336c88f8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x555e336c8970 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x555e336c89f0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x555e336c8c00 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x555e336cf520 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555e336cf520
| | `-ParmVarDecl 0x555e336cf638 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x555e336cf6d8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555e336cf6d8
| | `-ParmVarDecl 0x555e336cf7e8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x555e336d3c38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555e336c8c78 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x555e336c8d18 <col:38> "" ""
|-CXXMethodDecl 0x555e336c8da8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x555e336c8e48 <col:44> "" ""
|-AccessSpecDecl 0x555e336c8eb8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x555e336c8ee0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x555e336c8fe0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x555e336c9030 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e336c8fc0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x555e336c8fa0 <col:27> 'int' 4
|-FieldDecl 0x555e336c90e8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x555e336c9298 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x555e336c9350 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x555e336c93b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x555e336c9418 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x555e336c9568 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x555e336c94a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x555e336c9718 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x555e336c9628 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x555e336c98f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x555e336c97d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x555e336c9858 <col:25> col:28 'int'
|-CXXMethodDecl 0x555e336c9ba0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x555e336c99c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x555e336c9a40 <col:28> col:31 'int'
| `-ParmVarDecl 0x555e336c9ab8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x555e336c9c58 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x555e336c9d20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x555e336c9d70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x555e336c9dc0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x555e336c9fa0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x555e336c9e50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x555e336c9ec8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e336ca248 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x555e336ca068 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x555e336ca0e8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x555e336ca160 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x555e336ca468 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x555e336ca318 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x555e336ca398 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x555e336ca7a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x555e336ca528 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x555e336ca5a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x555e336ca620 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x555e336ca6a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x555e336ca988 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555e336ca870 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x555e336ca8f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x555e336caad8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x555e336caa48 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x555e336cae58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x555e336cab98 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x555e336cac18 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x555e336cac90 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x555e336cad10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x555e336caf38 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class VLANEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint16_t _vlan_tci
       110 |   _Bool _use_anno
       112 |   int _native_vlan
       116 |   uint16_t _ethertype
           | [sizeof=120, dsize=118, align=8,
           |  nvsize=118, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336d2688 <../elements/ethernet/vlanencap.hh:58:1, line:81:1> line:58:7 class VLANEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x555e336d27e8 <col:1, col:7> col:7 implicit referenced class VLANEncap
|-AccessSpecDecl 0x555e336d2878 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x555e336d2900 <line:60:5, col:15> col:5 VLANEncap 'void ()'
|-CXXDestructorDecl 0x555e336d29f0 <line:61:5, col:16> col:5 ~VLANEncap 'void ()' noexcept-unevaluated 0x555e336d29f0
| `-Overrides: [ 0x555e336b77c8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x555e336d2b20 <line:63:5, col:58> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x555e336b8bf8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x555e336d3a18 <col:36, col:58>
|   `-ReturnStmt 0x555e336d3a08 <col:38, col:45>
|     `-ImplicitCastExpr 0x555e336d39f0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x555e336d39c8 <col:45> 'const char [10]' lvalue "VLANEncap"
|-CXXMethodDecl 0x555e336d2be8 <line:64:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x555e336b8cc0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x555e336d3a78 <col:36, col:56>
|   `-ReturnStmt 0x555e336d3a68 <col:38, col:45>
|     `-ImplicitCastExpr 0x555e336d3a50 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x555e336d3a30 <col:45> 'const char []' lvalue Var 0x555e336b8f18 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x555e336d2ca8 <line:65:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x555e336bde70 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x555e336d2f80 <line:67:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x555e336bdda0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x555e336d2e30 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x555e336d2ea8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x555e336d30d0 <line:69:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x555e336b7e08 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x555e336d3040 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x555e336d3178 <line:71:3, col:10> col:3 private
|-FieldDecl 0x555e336d31b0 <line:73:5, col:14> col:14 _vlan_tci 'uint16_t':'unsigned short'
|-FieldDecl 0x555e336d3210 <line:74:5, col:10> col:10 _use_anno 'bool'
|-FieldDecl 0x555e336d3278 <line:75:5, col:9> col:9 _native_vlan 'int'
|-FieldDecl 0x555e336d32d8 <line:76:5, col:14> col:14 _ethertype 'uint16_t':'unsigned short'
|-EnumDecl 0x555e336d3328 <line:78:5, col:33> col:5
| |-EnumConstantDecl 0x555e336d33f0 <col:12> col:12 h_config 'VLANEncap::(anonymous enum at ../elements/ethernet/vlanencap.hh:78:5)'
| `-EnumConstantDecl 0x555e336d3440 <col:22> col:22 h_vlan_tci 'VLANEncap::(anonymous enum at ../elements/ethernet/vlanencap.hh:78:5)'
|-CXXMethodDecl 0x555e336d35b8 <line:79:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555e336d34a0 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x555e336d3520 <col:44, col:50> col:50 user_data 'void *'
|-CXXConstructorDecl 0x555e336d3698 <line:58:7> col:7 implicit VLANEncap 'void (const VLANEncap &)' inline default_delete noexcept-unevaluated 0x555e336d3698
| `-ParmVarDecl 0x555e336d37a8 <col:7> col:7 'const VLANEncap &'
`-CXXMethodDecl 0x555e336d3848 <col:7> col:7 implicit operator= 'VLANEncap &(const VLANEncap &)' inline default_delete noexcept-unevaluated 0x555e336d3848
  `-ParmVarDecl 0x555e336d3958 <col:7> col:7 'const VLANEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.VLANEncap = type <{ %class.Element.base, i16, i8, i8, i32, i16, [2 x i8] }>
  NonVirtualBaseLLVMType:%class.VLANEncap.base = type <{ %class.Element.base, i16, i8, i8, i32, i16 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e333a5470 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x555e333a5588 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x555e333a5628 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x555e333a5688 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x555e333a56e8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x555e333a5798 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e333a5aa0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e333a5bb8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x555e333a5c60 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x555e333a5cc8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x555e333a5d58 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x555e333abc50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555e333ac088 <col:12>
|-CXXConstructorDecl 0x555e333abd58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555e333abe68 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555e333a5c60 'data' 'const char *'
| | `-ImplicitCastExpr 0x555e333ae610 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x555e333ae5e0 <col:12> 'const char *const' lvalue .data 0x555e333a5c60
| |     `-DeclRefExpr 0x555e333ae5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555e333a5cc8 'length' 'int'
| | `-ImplicitCastExpr 0x555e333ae6a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555e333ae670 <col:12> 'const int' lvalue .length 0x555e333a5cc8
| |     `-DeclRefExpr 0x555e333ae650 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555e333a5d58 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x555e333ae730 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x555e333ae700 <col:12> 'String::memo_t *const' lvalue .memo 0x555e333a5d58
| |     `-DeclRefExpr 0x555e333ae6e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| `-CompoundStmt 0x555e333ae788 <col:12>
|-CXXConstructorDecl 0x555e333abf08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e333abf08
| `-ParmVarDecl 0x555e333ac018 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x555e333b1500 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555e333bcf38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555e333bd048 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x555e333bd560 <col:12>
|   |-BinaryOperator 0x555e333bd378 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555e333bd330 <col:12> 'const char *' lvalue ->data 0x555e333a5c60
|   | | `-CXXThisExpr 0x555e333bd320 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555e333bd360 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x555e333bd2f0 <col:12> 'const char *const' lvalue .data 0x555e333a5c60
|   |     `-DeclRefExpr 0x555e333bd2d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555e333bd440 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x555e333bd3f8 <col:12> 'int' lvalue ->length 0x555e333a5cc8
|   | | `-CXXThisExpr 0x555e333bd3e8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555e333bd428 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x555e333bd3b8 <col:12> 'const int' lvalue .length 0x555e333a5cc8
|   |     `-DeclRefExpr 0x555e333bd398 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555e333bd508 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x555e333bd4c0 <col:12> 'String::memo_t *' lvalue ->memo 0x555e333a5d58
|   | | `-CXXThisExpr 0x555e333bd4b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555e333bd4f0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x555e333bd480 <col:12> 'String::memo_t *const' lvalue .memo 0x555e333a5d58
|   |     `-DeclRefExpr 0x555e333bd460 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
|   `-ReturnStmt 0x555e333bd550 <col:12>
|     `-UnaryOperator 0x555e333bd538 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e333bd528 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x555e333bd0b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e333bd0b8
  `-ParmVarDecl 0x555e333bd1c8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e3339c950 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e3339ca68 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x555e3339caf8 <col:16, col:22> col:16 public
|-TypedefDecl 0x555e3339cb38 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555e33070dc0 'const char *'
|   `-QualType 0x555e33070311 'const char' const
|     `-BuiltinType 0x555e33070310 'char'
|-TypedefDecl 0x555e3339cbc0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x555e3339cb90 'String::const_iterator' sugar
|   |-Typedef 0x555e3339cb38 'const_iterator'
|   `-PointerType 0x555e33070dc0 'const char *'
|     `-QualType 0x555e33070311 'const char' const
|       `-BuiltinType 0x555e33070310 'char'
|-TypedefDecl 0x555e3339cd30 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x555e3339cca0 'int (String::*)() const'
|   |-RecordType 0x555e3339c9e0 'String'
|   | `-CXXRecord 0x555e3339c950 'String'
|   `-ParenType 0x555e3339cc40 'int () const' sugar
|     `-FunctionProtoType 0x555e33371820 'int () const' const cdecl
|       `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e3339cd98 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x555e331c6250 'int64_t' sugar
|   |-Typedef 0x555e330d92d0 'int64_t'
|   `-TypedefType 0x555e330b24d0 '__int64_t' sugar
|     |-Typedef 0x555e330b20a8 '__int64_t'
|     `-BuiltinType 0x555e33070390 'long'
|-TypedefDecl 0x555e3339ce00 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x555e331c6170 'uint64_t' sugar
|   |-Typedef 0x555e330d9470 'uint64_t'
|   `-TypedefType 0x555e330b2560 '__uint64_t' sugar
|     |-Typedef 0x555e330b2118 '__uint64_t'
|     `-BuiltinType 0x555e33070430 'unsigned long'
|-TypedefDecl 0x555e3339ce90 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x555e3339ce60 'String::intmax_t' sugar
|   |-Typedef 0x555e3339cd98 'intmax_t'
|   `-TypedefType 0x555e331c6250 'int64_t' sugar
|     |-Typedef 0x555e330d92d0 'int64_t'
|     `-TypedefType 0x555e330b24d0 '__int64_t' sugar
|       |-Typedef 0x555e330b20a8 '__int64_t'
|       `-BuiltinType 0x555e33070390 'long'
|-TypedefDecl 0x555e3339cf20 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x555e3339cef0 'String::uintmax_t' sugar
|   |-Typedef 0x555e3339ce00 'uintmax_t'
|   `-TypedefType 0x555e331c6170 'uint64_t' sugar
|     |-Typedef 0x555e330d9470 'uint64_t'
|     `-TypedefType 0x555e330b2560 '__uint64_t' sugar
|       |-Typedef 0x555e330b2118 '__uint64_t'
|       `-BuiltinType 0x555e33070430 'unsigned long'
|-CXXConstructorDecl 0x555e3339cfe0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x555e3339d188 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x555e3339d0c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x555e3339d338 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x555e3339d278 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x555e3339d490 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x555e3339d400 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x555e3339d6a8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x555e3339d558 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x555e3339d5d8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x555e3339d8c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x555e3339d778 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x555e3339d7f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x555e3339dae8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555e3339d998 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x555e3339da18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x555e3339dd08 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x555e3339dbb8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x555e3339dc38 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x555e3339de98 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x555e3339ddd0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x555e3339e018 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x555e3339df58 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x555e3339e1a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x555e3339e0e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x555e3339e300 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x555e3339e270 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x555e3339e458 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x555e3339e3c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x555e3339e5b0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x555e3339e520 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x555e3339e738 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x555e3339e678 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x555e3339e8c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x555e3339e800 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x555e3339ea58 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x555e3339e990 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x555e3339ebe8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x555e3339eb20 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x555e3339ece0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x555e3339ee08 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x555e3339ef88 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x555e3339eec0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x555e3339f0d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x555e3339f048 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x555e3339f180 <col:63> "" ""
|-CXXMethodDecl 0x555e3339f2c8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x555e3339f208 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x555e3339f4d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x555e3339f388 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x555e3339f408 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x555e3339f748 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x555e3339f5a0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x555e3339f670 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x555e3339fa28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x555e3339f808 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x555e3339f888 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x555e333ab720 <col:55> 'int' 10
| `-ParmVarDecl 0x555e3339f900 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e333ab740 <col:76> 'bool' true
|-CXXMethodDecl 0x555e3339fd08 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x555e3339faf0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x555e3339fb70 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x555e333ab750 <col:56> 'int' 10
| `-ParmVarDecl 0x555e3339fbe8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e333ab770 <col:77> 'bool' true
|-CXXMethodDecl 0x555e3339fe10 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x555e3339fed8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x555e3339ffa0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x555e333a0040 <col:20>
| `-OptimizeNoneAttr 0x555e333a0098 <col:30>
|-CXXConversionDecl 0x555e333a0188 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x555e333a0258 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x555e333a0318 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x555e333a0408 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555e333a04c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555e333a0648 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x555e333a0580 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x555e333a0798 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x555e333a0708 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x555e333a0888 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x555e333a0948 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x555e333a0b98 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x555e333a0a00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x555e333a0a80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x555e333a0df8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x555e333a0c60 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x555e333a0ce0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x555e333a0ec8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x555e333a10d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x555e333a0f80 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x555e333a1000 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x555e333a12f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x555e333a11a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x555e333a1220 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x555e333a1488 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x555e333a13c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x555e333a1578 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x555e333a16e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x555e333a1628 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555e333a18f8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x555e333a17a8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555e333a1828 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555e333a1b10 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x555e333a19b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x555e333a1a30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x555e333a1ca0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x555e333a1bd0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555e333a1ec0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x555e333a1d60 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x555e333a1de0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555e333a2010 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x555e333a1f80 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x555e333a21e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x555e333a20d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555e333a2150 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x555e333a2338 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x555e333a22a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x555e333a2550 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x555e333a23f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x555e333a2470 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x555e333ab780 <col:39> 'int' 0
|-CXXMethodDecl 0x555e333a2770 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x555e333a2610 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x555e333a2690 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x555e333ab7a0 <col:48> 'int' 0
|-CXXMethodDecl 0x555e333a2950 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x555e333a2830 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x555e333a28b0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x555e333ab7c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x555e333a2a20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x555e333a2ae0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x555e333a2ba0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x555e333a2c60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x555e333a2d20 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x555e333a2ec8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x555e333a2dd0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x555e333a3048 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x555e333a2f80 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x555e333a31c8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x555e333a3108 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x555e333a3348 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x555e333a3280 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x555e333a3490 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x555e333a3400 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555e333a3680 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x555e333a3550 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x555e333a3858 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x555e333a3740 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555e333a37c0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555e333a3a38 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555e333a3920 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x555e333a39a0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x555e333a3b88 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x555e333a3af8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x555e333a3d98 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x555e333a3c48 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x555e333a3cc8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x555e333a3ef8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x555e333a3e60 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555e333a4050 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x555e333a3fb8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x555e333a40f8 <col:57> "" ""
|-CXXMethodDecl 0x555e333a4208 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x555e333a4178 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x555e333a4358 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x555e333a42c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x555e333a44d8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x555e333a4410 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x555e333a45a0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x555e333a4660 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x555e333a4720 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x555e333a47c0 <col:49> "" ""
|-CXXMethodDecl 0x555e333a4850 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x555e333a4910 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x555e333a4a00 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x555e333a4ac8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x555e333a4b88 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x555e333a4c48 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x555e333a4d40 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x555e333a4e08 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x555e333a4ed0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x555e333a50a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x555e333a4f88 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x555e333a5008 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x555e333a52d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x555e333a5170 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x555e333a51f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x555e333a53e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x555e333a5448 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x555e333a5470 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x555e333a5588 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x555e333a5628 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x555e333a5688 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x555e333a56e8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x555e333a5798 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x555e333a5800 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x555e333a5a38 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x555e333a5a88 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e333a5a18 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x555e333a5928 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x555e333a58d0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x555e333a5910 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x555e333a58f0 <col:32> 'int' 8
|-CXXRecordDecl 0x555e333a5aa0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555e333a5bb8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x555e333a5c60 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x555e333a5cc8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x555e333a5d58 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x555e333abc50 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555e333ac088 <col:12>
| |-CXXConstructorDecl 0x555e333abd58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555e333abe68 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555e333a5c60 'data' 'const char *'
| | | `-ImplicitCastExpr 0x555e333ae610 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x555e333ae5e0 <col:12> 'const char *const' lvalue .data 0x555e333a5c60
| | |     `-DeclRefExpr 0x555e333ae5c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555e333a5cc8 'length' 'int'
| | | `-ImplicitCastExpr 0x555e333ae6a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555e333ae670 <col:12> 'const int' lvalue .length 0x555e333a5cc8
| | |     `-DeclRefExpr 0x555e333ae650 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555e333a5d58 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x555e333ae730 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x555e333ae700 <col:12> 'String::memo_t *const' lvalue .memo 0x555e333a5d58
| | |     `-DeclRefExpr 0x555e333ae6e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333abe68 '' 'const String::rep_t &'
| | `-CompoundStmt 0x555e333ae788 <col:12>
| |-CXXConstructorDecl 0x555e333abf08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e333abf08
| | `-ParmVarDecl 0x555e333ac018 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x555e333b1500 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x555e333bcf38 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555e333bd048 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x555e333bd560 <col:12>
| |   |-BinaryOperator 0x555e333bd378 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x555e333bd330 <col:12> 'const char *' lvalue ->data 0x555e333a5c60
| |   | | `-CXXThisExpr 0x555e333bd320 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555e333bd360 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x555e333bd2f0 <col:12> 'const char *const' lvalue .data 0x555e333a5c60
| |   |     `-DeclRefExpr 0x555e333bd2d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555e333bd440 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x555e333bd3f8 <col:12> 'int' lvalue ->length 0x555e333a5cc8
| |   | | `-CXXThisExpr 0x555e333bd3e8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555e333bd428 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x555e333bd3b8 <col:12> 'const int' lvalue .length 0x555e333a5cc8
| |   |     `-DeclRefExpr 0x555e333bd398 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555e333bd508 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x555e333bd4c0 <col:12> 'String::memo_t *' lvalue ->memo 0x555e333a5d58
| |   | | `-CXXThisExpr 0x555e333bd4b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555e333bd4f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x555e333bd480 <col:12> 'String::memo_t *const' lvalue .memo 0x555e333a5d58
| |   |     `-DeclRefExpr 0x555e333bd460 <col:12> 'const String::rep_t' lvalue ParmVar 0x555e333bd048 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x555e333bd550 <col:12>
| |     `-UnaryOperator 0x555e333bd538 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555e333bd528 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x555e333bd0b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e333bd0b8
|   `-ParmVarDecl 0x555e333bd1c8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x555e333a5dd0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x555e333a6018 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x555e333a5e38 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x555e333a5eb8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x555e333a5f30 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x555e333abc10 <col:79, line:261:5>
|   |-BinaryOperator 0x555e333ab888 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555e333ab820 <col:2, col:5> 'const char *' lvalue .data 0x555e333a5c60
|   | | `-MemberExpr 0x555e333ab7f0 <col:2> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|   | |   `-CXXThisExpr 0x555e333ab7e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555e333ab870 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e333ab850 <col:12> 'const char *' lvalue ParmVar 0x555e333a5e38 'data' 'const char *'
|   |-BinaryOperator 0x555e333ab950 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x555e333ab8e8 <col:2, col:5> 'int' lvalue .length 0x555e333a5cc8
|   | | `-MemberExpr 0x555e333ab8b8 <col:2> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|   | |   `-CXXThisExpr 0x555e333ab8a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555e333ab938 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555e333ab918 <col:14> 'int' lvalue ParmVar 0x555e333a5eb8 'length' 'int'
|   `-IfStmt 0x555e333abbf8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x555e333aba70 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555e333aba58 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x555e333aba38 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x555e333aba18 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x555e333ab9b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|     |       | `-MemberExpr 0x555e333ab980 <col:7> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|     |       |   `-CXXThisExpr 0x555e333ab970 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x555e333aba00 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x555e333ab9e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x555e333a5f30 'memo' 'String::memo_t *'
|     `-CallExpr 0x555e333abbd0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x555e333abbb8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555e333abac0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x555e33396a10 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x555e333abb28 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555e333a5628
|         `-ImplicitCastExpr 0x555e333abb10 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555e333abaf0 <col:27> 'String::memo_t *' lvalue ParmVar 0x555e333a5f30 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x555e333a62c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x555e333a60e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x555e333a6168 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x555e333a61e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x555e333a5dd0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x555e333ac098 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x555e333ac228 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x555e333ac190 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x555e333ac100 <col:2> '<bound member function type>' ->assign_memo 0x555e333a6018
|     | `-ImplicitCastExpr 0x555e333ac1c8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x555e333ac0f0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x555e333ac1e0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x555e333ac130 <col:14> 'const char *' lvalue ParmVar 0x555e333a60e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x555e333ac1f8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x555e333ac150 <col:20> 'int' lvalue ParmVar 0x555e333a6168 'length' 'int'
|     `-ImplicitCastExpr 0x555e333ac210 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555e333ac170 <col:28> 'String::memo_t *' lvalue ParmVar 0x555e333a61e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x555e333a6458 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x555e333a6398 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x555e333ac480 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x555e333ac400 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x555e333ac250 <col:2> '<bound member function type>' ->assign_memo 0x555e333a6018
|     | `-CXXThisExpr 0x555e333ac240 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x555e333ac438 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x555e333ac2d0 <col:14, col:19> 'const char *' lvalue .data 0x555e333a5c60
|     |   `-MemberExpr 0x555e333ac2a0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x555e333a5dd0
|     |     `-DeclRefExpr 0x555e333ac280 <col:14> 'const String' lvalue ParmVar 0x555e333a6398 'x' 'const String &'
|     |-ImplicitCastExpr 0x555e333ac450 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x555e333ac350 <col:25, col:30> 'int' lvalue .length 0x555e333a5cc8
|     |   `-MemberExpr 0x555e333ac320 <col:25, col:27> 'String::rep_t' lvalue ._r 0x555e333a5dd0
|     |     `-DeclRefExpr 0x555e333ac300 <col:25> 'const String' lvalue ParmVar 0x555e333a6398 'x' 'const String &'
|     `-ImplicitCastExpr 0x555e333ac468 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x555e333ac3d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|         `-MemberExpr 0x555e333ac3a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x555e333a5dd0
|           `-DeclRefExpr 0x555e333ac380 <col:38> 'const String' lvalue ParmVar 0x555e333a6398 'x' 'const String &'
|-CXXMethodDecl 0x555e333a6520 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x555e333ace40 <col:31, line:278:5>
|   `-IfStmt 0x555e333ace28 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x555e333ac520 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555e333ac508 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x555e333ac4d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|     |     `-MemberExpr 0x555e333ac4a8 <col:6> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|     |       `-CXXThisExpr 0x555e333ac498 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x555e333ace00 <col:15, line:277:2>
|       |-ParenExpr 0x555e333ac9d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x555e333ac9a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x555e333ac630 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x555e333ac618 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x555e333ac600 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x555e333ac5c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555e333a5628
|       |   |       `-ImplicitCastExpr 0x555e333ac5a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x555e333ac578 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|       |   |           `-MemberExpr 0x555e333ac548 <col:27> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|       |   |             `-CXXThisExpr 0x555e333ac538 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x555e333ac690 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x555e333ac670 <col:54> 'int' 0
|       |   `-CallExpr 0x555e333ac900 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x555e333ac8e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x555e333ac868 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x555e333ac940 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555e333ac778 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x555e333ac958 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555e333ac7a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x555e333ac970 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x555e333ac7e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x555e333ac988 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x555e333ac850 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x555e333ac838 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x555e333ac800 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x555e333acd20 <line:274:6, line:275:22>
|       | |-CallExpr 0x555e333acbe0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x555e333acbc8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555e333acb40 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x555e33397e50 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x555e333acb10 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555e333a5628
|       | |   `-ImplicitCastExpr 0x555e333acaf8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x555e333acac8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|       | |       `-MemberExpr 0x555e333aca98 <col:40> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|       | |         `-CXXThisExpr 0x555e333aca88 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x555e333acce0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x555e333accc8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555e333acc08 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x555e333a71f8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x555e333acd08 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x555e333acc68 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|       |       `-MemberExpr 0x555e333acc38 <col:15> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|       |         `-CXXThisExpr 0x555e333acc28 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x555e333acde0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x555e333acd78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555e333a5d58
|         | `-MemberExpr 0x555e333acd48 <col:6> 'String::rep_t' lvalue ->_r 0x555e333a5dd0
|         |   `-CXXThisExpr 0x555e333acd38 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x555e333acdc8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x555e333acda8 <col:16> 'int' 0
|-CXXMethodDecl 0x555e333a67b8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x555e333a65d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555e333a6658 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555e333a66d0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x555e333a6890 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x555e333a6ae0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x555e333a6948 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555e333a69c8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555e333a6a40 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x555e333a6cc8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x555e333a6bb0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x555e333a6c30 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x555e333a6dc8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x555e333acf18 <col:41, line:286:5>
|   `-ReturnStmt 0x555e333acf08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x555e333aced8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x555e333acea0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x555e333ace88 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x555e333ace68 <col:46> 'int' 1
|-CXXMethodDecl 0x555e333a7068 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x555e333a6e80 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x555e333a6f00 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x555e333a6f80 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x555e333a71f8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x555e333a7130 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x555e333a72c8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x555e333a7498 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x555e333a7380 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555e333a7400 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x555e333a7558 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x555e333aaf80 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x555e333ab088 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x555e333ab100 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x555e333ab178 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x555e333ab1e0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x555e333ab2e0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x555e333ab330 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e333ab2c0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x555e333ab2a0 <col:22> 'int' 14
|-CXXMethodDecl 0x555e333ab548 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x555e333ab360 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x555e333ab3e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x555e333ab460 <col:43> col:46 'int'
|-FriendDecl 0x555e333ab650 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x555e333ab6e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e333eef20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x555e333ef0f8 prev 0x555e333eef20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555e333ef188 <col:46, col:52> col:46 public
|-TypedefDecl 0x555e333ef1b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e333f12b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x555e333f1260 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x555e333f1240 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x555e333ef3c8 'type'
|     `-SubstTemplateTypeParmType 0x555e333ef390 'String' sugar
|       |-TemplateTypeParmType 0x555e333614d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e33361480 'T'
|       `-RecordType 0x555e3339c9e0 'String'
|         `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f1368 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x555e333f1330 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x555e333f1310 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555e333f12b0 'type'
|     `-ElaboratedType 0x555e333f1260 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x555e333f1240 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x555e333ef3c8 'type'
|         `-SubstTemplateTypeParmType 0x555e333ef390 'String' sugar
|           |-TemplateTypeParmType 0x555e333614d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555e33361480 'T'
|           `-RecordType 0x555e3339c9e0 'String'
|             `-CXXRecord 0x555e3339c950 'String'
|-CXXMethodDecl 0x555e333f14e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x555e333f13f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x555e333f15d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555e333f16b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x555e333f16b8
|-CXXMethodDecl 0x555e333f1988 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555e333f1890 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x555e333f1bc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555e333f1a40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e333f1ab8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f1d98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555e333f1c88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e333f1d00 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f1ef8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555e333f1fc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555e333f2218 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555e333f2088 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555e333f2100 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f2478 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x555e333f22e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555e333f2360 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f2638 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555e333f2548 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f27f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555e333f2700 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f28b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555e333f2960 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555e333f2b98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555e333f2a10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e333f2a88 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555e333f2e38 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555e333f2d40 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x555e333f2f00 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x555e333f2f50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555e333f2fa0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e333d0d80 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x555e333ed988 prev 0x555e333d0d80 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555e333eee90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x555e333eee40 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x555e333eee20 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555e333eecd0 'type'
|     `-SubstTemplateTypeParmType 0x555e333eeb60 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x555e3328ad00 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x555e3328aca8 'F'
|       `-RecordType 0x555e333ee7c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x555e333ee6e0 'typed_array_memory'
|-FieldDecl 0x555e333f2ff0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x555e333f3040 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555e333f3078 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|   |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555e3336e1a8 'T'
|   `-RecordType 0x555e3339c9e0 'String'
|     `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3108 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x555e333f30d0 'String &'
|   `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-RecordType 0x555e3339c9e0 'String'
|       `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3198 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x555e333f3160 'const String &'
|   `-QualType 0x555e333eda21 'const String' const
|     `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-RecordType 0x555e3339c9e0 'String'
|         `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3228 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x555e333f31f0 'String *'
|   `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-RecordType 0x555e3339c9e0 'String'
|       `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f32b8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x555e333f3280 'const String *'
|   `-QualType 0x555e333eda21 'const String' const
|     `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-RecordType 0x555e3339c9e0 'String'
|         `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3f10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x555e333f3ec0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x555e333f3ea0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x555e333f3dd8 'type'
|     `-LValueReferenceType 0x555e333f3da0 'const String &'
|       `-QualType 0x555e333f3b41 'const String' const
|         `-SubstTemplateTypeParmType 0x555e333f3b40 'String' sugar
|           |-TemplateTypeParmType 0x555e33293030 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555e33292fd8 'T'
|           `-RecordType 0x555e3339c9e0 'String'
|             `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3f78 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x555e333f3160 'const String &'
|   `-QualType 0x555e333eda21 'const String' const
|     `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-RecordType 0x555e3339c9e0 'String'
|         `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f3fd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e333f4038 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x555e333f31f0 'String *'
|   `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-RecordType 0x555e3339c9e0 'String'
|       `-CXXRecord 0x555e3339c950 'String'
|-TypedefDecl 0x555e333f40a0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x555e333f3280 'const String *'
|   `-QualType 0x555e333eda21 'const String' const
|     `-SubstTemplateTypeParmType 0x555e333eda20 'String' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-RecordType 0x555e3339c9e0 'String'
|         `-CXXRecord 0x555e3339c950 'String'
|-EnumDecl 0x555e333f40f8 <line:134:5> col:5
| `-EnumConstantDecl 0x555e333f41f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555e333f41d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555e3336fbe8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555e3336fbc0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555e3336fba0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555e333f4278 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555e333f4508 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555e333f4330 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e333f43d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x555e333f4798 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x555e333f4680 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x555e333f4a58 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x555e333f4940 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x555e333f5740 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x555e333f5620 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x555e333f5a50 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x555e333f5930 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x555e333f5d40 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555e333f5b88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e333f5c00 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555e333f5e68 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555e333f5f18 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f5f70 <col:30> Inherited
|-CXXMethodDecl 0x555e333f5fb8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555e333f6068 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f60c0 <col:30> Inherited
|-CXXMethodDecl 0x555e333f6188 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555e333f6238 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f6290 <col:30> Inherited
|-CXXMethodDecl 0x555e333f62d8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555e333f6388 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f63e0 <col:30> Inherited
|-CXXMethodDecl 0x555e333f6428 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555e333f64d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f6530 <col:30> Inherited
|-CXXMethodDecl 0x555e333f6578 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555e333f6628 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e333f6680 <col:30> Inherited
|-CXXMethodDecl 0x555e333f66a8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555e333f6758 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555e333f6808 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555e333f69c8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555e333f68b8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e333f6930 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555e333f6b18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555e333f6a88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e333f6cc8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x555e333f6bd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555e333f6d80 <col:20>
| `-OptimizeNoneAttr 0x555e333f6dd8 <col:30>
|-CXXMethodDecl 0x555e333f6ef8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x555e333f6e00 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555e333f6fb0 <col:20>
| `-OptimizeNoneAttr 0x555e333f7008 <col:30>
|-CXXMethodDecl 0x555e333f70c0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555e333f7030 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e333f7208 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555e333f7178 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e333f7338 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x555e333f7468 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x555e333f7538 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x555e333f7608 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x555e333f7748 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555e333f76b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e333f7890 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555e333f7800 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e333f79d8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x555e333f7948 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555e333f7a90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555e333f7b90 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555e333f7b00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555e333f7c48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555e333f7d08 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x555e333f7e08 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x555e333f7f88 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555e333f7ec8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x555e333f8748 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555e333f8040 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x555e333f86a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x555e333f85a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x555e333f8828 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555e333f8978 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555e333f88e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555e333f8a30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555e333f8c78 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555e333f8af0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555e333f8b68 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555e333f8e08 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x555e333f8d48 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555e333f9018 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x555e333f8ed0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555e333f8f48 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555e333f90d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555e333f9338 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x555e333f9240 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x555e333f9408 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x555e333f9408

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e3361eaa0 prev 0x555e335ba4f0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e3361eb98 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x555e3361ec28 <col:22, col:28> col:22 public
|-EnumDecl 0x555e3361ec50 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x555e3361ed68 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361ed48 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x555e3361ed30 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555e3361ed10 <col:14> 'int' 999
| |-EnumConstantDecl 0x555e3361ee10 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361edf0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x555e3361edd8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555e3361edb8 <col:14> 'int' 1
| |-EnumConstantDecl 0x555e3361eea0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361ee80 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x555e3361ee60 <col:17> 'int' 0
| |-EnumConstantDecl 0x555e3361ef30 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361ef10 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x555e3361eef0 <col:13> 'int' 1
| |-EnumConstantDecl 0x555e3361efc0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361efa0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x555e3361ef80 <col:16> 'int' 2
| |-EnumConstantDecl 0x555e3361f050 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361f030 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x555e3361f010 <col:13> 'int' 3
| |-EnumConstantDecl 0x555e3361f0e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361f0c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x555e3361f0a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x555e3361f170 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361f150 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x555e3361f130 <col:14> 'int' 5
| |-EnumConstantDecl 0x555e3361f200 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x555e3361f1e0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x555e3361f1c0 <col:12> 'int' 6
| `-EnumConstantDecl 0x555e3361f290 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x555e3361f270 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x555e3361f250 <col:13> 'int' 7
|-VarDecl 0x555e3361f328 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x555e3361f3b0 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x555e3361f438 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x555e3361f4c0 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x555e3361f548 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x555e3361f5d0 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x555e3361f658 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x555e3361f6e0 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x555e3361f768 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x555e3361f7f0 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x555e3361f878 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x555e3361f978 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x555e33624c68 '_nerrors' 'int'
| | `-IntegerLiteral 0x555e336253f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x555e33625468 <col:16, line:129:5>
|-CXXDestructorDecl 0x555e3361fa68 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x555e33625478 <col:29, line:132:5>
|-CXXMethodDecl 0x555e3361fc28 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x555e3361fb60 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e3361fcf0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555e3361fdd8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555e336254d0 <col:44, line:161:5>
|   `-ReturnStmt 0x555e336254c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x555e336254a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555e33625488 <col:9> 'ErrorHandler *' lvalue Var 0x555e33624cc8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x555e3361ff18 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x555e3361fe88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555e3361ffe0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555e33625530 <col:43, line:173:5>
|   `-ReturnStmt 0x555e33625520 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x555e33625508 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555e336254e8 <col:9> 'ErrorHandler *' lvalue Var 0x555e33624d40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x555e33620098 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x555e33620118 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x555e33620228 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x555e33620198 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555e33620378 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x555e336202e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555e336204d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x555e33620438 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x555e33620628 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x555e33620590 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555e33620780 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x555e336206e8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555e33620990 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555e33620838 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x555e336208b8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x555e33620b68 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555e33620a50 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x555e33620ad0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x555e33620d88 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555e33620c28 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x555e33620ca8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x555e33620f68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555e33620e48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555e33620ec8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555e33621148 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555e33621028 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555e336210a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555e336212d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x555e33621208 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x555e336214a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x555e33621388 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555e33621400 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x555e33625788 <col:57, line:234:5>
|   `-ReturnStmt 0x555e33625778 <line:233:2, col:41>
|     `-ExprWithCleanups 0x555e33625760 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555e33625708 <col:9, col:41> 'int'
|         |-MemberExpr 0x555e336256d8 <col:9> '<bound member function type>' ->xmessage 0x555e336212d0
|         | `-CXXThisExpr 0x555e336256c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x555e33625748 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555e33625730 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555e336256a8 <col:18, col:40> 'String' (CXXTemporary 0x555e336256a8)
|               `-CallExpr 0x555e33625670 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x555e33625658 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x555e336255d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555e33623498 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x555e336255f0 <col:31> 'const String' lvalue ParmVar 0x555e33621400 'str' 'const String &'
|                 `-DeclRefExpr 0x555e33625610 <col:36> 'const String' lvalue ParmVar 0x555e33621388 'anno' 'const String &'
|-CXXMethodDecl 0x555e33621780 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555e33621560 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555e336215e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x555e33621658 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555e33625a18 <col:68, line:243:5>
|   `-ReturnStmt 0x555e33625a08 <line:242:2, col:41>
|     `-ExprWithCleanups 0x555e336259f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555e33625990 <col:9, col:41> 'int'
|         |-MemberExpr 0x555e33625960 <col:9> '<bound member function type>' ->xmessage 0x555e336214a0
|         | `-CXXThisExpr 0x555e33625950 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555e33625828 <col:18> 'const String' lvalue ParmVar 0x555e33621560 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555e336259d8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555e336259c0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555e33625930 <col:24, col:40> 'String' (CXXTemporary 0x555e33625930)
|               `-CXXMemberCallExpr 0x555e336258c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x555e33625858 <col:24> '<bound member function type>' ->vformat 0x555e33622960
|                 | `-CXXThisExpr 0x555e33625848 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555e336258f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555e33625888 <col:32> 'const char *' lvalue ParmVar 0x555e336215e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555e33625910 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555e336258a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555e33621658 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555e33621a20 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x555e33621848 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555e336218c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555e33621938 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x555e33625d58 <col:23, line:254:5>
|   `-ReturnStmt 0x555e33625d48 <line:253:2, col:71>
|     `-ExprWithCleanups 0x555e33625d30 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x555e33625cd0 <col:9, col:71> 'int'
|         |-MemberExpr 0x555e33625ca0 <col:9> '<bound member function type>' ->xmessage 0x555e336214a0
|         | `-CXXThisExpr 0x555e33625c90 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x555e33625d18 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x555e33625d00 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x555e33625c50 <col:18, col:65> 'String' (CXXTemporary 0x555e33625c50)
|         |     `-CallExpr 0x555e33625be8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x555e33625bd0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x555e33625ab8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555e33623498 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x555e33625ad8 <col:31> 'const String' lvalue ParmVar 0x555e336218c0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x555e33625c30 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x555e33625c18 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x555e33625bb0 <col:37, col:64> 'String' (CXXTemporary 0x555e33625bb0)
|         |             `-CallExpr 0x555e33625b80 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x555e33625b68 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x555e33625af8 <col:37> 'String (const String &)' lvalue CXXMethod 0x555e33623ae8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x555e33625b18 <col:56> 'const String' lvalue ParmVar 0x555e33621848 'landmark' 'const String &'
|         `-DeclRefExpr 0x555e33625c70 <col:68> 'const String' lvalue ParmVar 0x555e33621938 'str' 'const String &'
|-CXXMethodDecl 0x555e33621da0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555e33621ae8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555e33621b60 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555e33621be0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x555e33621c58 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555e33626010 <col:34, line:267:5>
|   `-ReturnStmt 0x555e33626000 <line:266:2, col:51>
|     `-ExprWithCleanups 0x555e33625fe8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x555e33625f80 <col:9, col:51> 'int'
|         |-MemberExpr 0x555e33625f50 <col:9> '<bound member function type>' ->xmessage 0x555e33621a20
|         | `-CXXThisExpr 0x555e33625f40 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555e33625df8 <col:18> 'const String' lvalue ParmVar 0x555e33621ae8 'landmark' 'const String &'
|         |-DeclRefExpr 0x555e33625e18 <col:28> 'const String' lvalue ParmVar 0x555e33621b60 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555e33625fd0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x555e33625fb8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555e33625f20 <col:34, col:50> 'String' (CXXTemporary 0x555e33625f20)
|               `-CXXMemberCallExpr 0x555e33625eb8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x555e33625e48 <col:34> '<bound member function type>' ->vformat 0x555e33622960
|                 | `-CXXThisExpr 0x555e33625e38 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555e33625ee8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555e33625e78 <col:42> 'const char *' lvalue ParmVar 0x555e33621be0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555e33625f00 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555e33625e98 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555e33621c58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555e33621eb0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x555e33626090 <col:25, line:288:5>
|   `-ReturnStmt 0x555e33626080 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x555e33626068 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x555e33626038 <col:9> 'const int' lvalue ->_nerrors 0x555e33624c68
|         `-CXXThisExpr 0x555e33626028 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x555e336220c0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x555e33621f68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x555e33621fe8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x555e336223a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555e33622188 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x555e33622208 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x555e33622280 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555e33622540 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x555e33622478 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x555e33622788 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555e33622600 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x555e33622678 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555e336262f0 <col:58, line:357:5>
|   `-ReturnStmt 0x555e336262e0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x555e336262c8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x555e33626298 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x555e33626280 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x555e33626260 <col:9, col:29> 'String' (CXXTemporary 0x555e33626260)
|             `-CallExpr 0x555e336261f0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x555e336261d8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x555e33626158 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x555e336223a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x555e336260f8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x555e33626228 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x555e33626118 <col:21> 'const char *' lvalue ParmVar 0x555e33622600 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x555e33626240 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x555e33626138 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555e33622678 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555e33622960 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x555e33622850 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x555e336228c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555e33622ab8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x555e33622a28 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x555e33622c00 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x555e33622b70 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x555e33622ea0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x555e33622cb8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x555e33622d38 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x555e33622db0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x555e33623000 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x555e33622f70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x555e33626408 <col:37, line:441:5>
|   `-IfStmt 0x555e336263f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x555e33626378 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x555e33626348 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x555e33626308 <col:6> 'int' lvalue ParmVar 0x555e33622f70 'level' 'int'
|     | `-ImplicitCastExpr 0x555e33626360 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x555e33626328 <col:15> 'ErrorHandler::Level' EnumConstant 0x555e3361f050 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x555e336263d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x555e336263a8 <col:8> 'int' lvalue ->_nerrors 0x555e33624c68
|         `-CXXThisExpr 0x555e33626398 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x555e336230c8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x555e336264a0 <col:26, line:448:5>
|   `-BinaryOperator 0x555e33626480 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x555e33626430 <col:2> 'int' lvalue ->_nerrors 0x555e33624c68
|     | `-CXXThisExpr 0x555e33626420 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x555e33626460 <col:13> 'int' 0
|-CXXMethodDecl 0x555e33623290 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x555e33623180 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x555e336231f8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x555e33623498 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x555e33623350 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x555e336233c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x555e33623748 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x555e33623558 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x555e336235d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x555e33623658 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x555e33623800 <col:59> 0 0
|-CXXMethodDecl 0x555e33623998 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x555e33623878 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x555e336238f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x555e33626b30 <col:70, line:534:5>
|   |-DeclStmt 0x555e33626610 <line:528:2, col:20>
|   | |-VarDecl 0x555e336264c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x555e33626530 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x555e33626568 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x555e336265d0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x555e336266e0 <line:529:2, col:23>
|   | `-VarDecl 0x555e33626640 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x555e336266c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555e336266a8 <col:18> 'const char *' lvalue ParmVar 0x555e33623878 'begin' 'const char *'
|   |-DoStmt 0x555e33626ac8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x555e336269d8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x555e336269c0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x555e336269a0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x555e336266f8 <col:6> 'const char *' lvalue Var 0x555e33626640 'x' 'const char *'
|   | |     `-CallExpr 0x555e336268f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x555e336268d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x555e33626890 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x555e33625140 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x555e33626958 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x555e33626940 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x555e336267b0 <col:20, col:27> 'String' (CXXTemporary 0x555e336267b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x555e33626778 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x555e33626970 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555e336267d0 <col:30> 'const char *' lvalue Var 0x555e33626640 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x555e33626988 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555e336267f0 <col:33> 'const char *' lvalue ParmVar 0x555e336238f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x555e33626830 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555e33626810 <col:39> 'String' lvalue Var 0x555e336264c8 'name' 'String'
|   | |       |-UnaryOperator 0x555e33626868 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555e33626848 <col:46> 'String' lvalue Var 0x555e33626568 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x555e33626880 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x555e33626ab0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x555e33626a78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x555e33626a58 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x555e33626a28 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|   |         `-ImplicitCastExpr 0x555e33626a10 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x555e336269f0 <col:11> 'String' lvalue Var 0x555e336264c8 'name' 'String'
|   `-ReturnStmt 0x555e33626b20 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x555e33626b08 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x555e33626ae8 <col:9> 'const char *' lvalue Var 0x555e33626640 'x' 'const char *'
|-CXXMethodDecl 0x555e33623ae8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x555e33623a58 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x555e33627138 <col:55, line:550:5>
|   `-IfStmt 0x555e33627110 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x555e33626d70 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x555e33626d58 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555e33626d40 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555e33626d20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555e33626cf0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|     | |       `-DeclRefExpr 0x555e33626b90 <col:6> 'const String' lvalue ParmVar 0x555e33623a58 'x' 'const String &'
|     | `-BinaryOperator 0x555e33626cd0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x555e33626ca0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x555e33626c50 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x555e33626c38 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x555e33626bf0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x555e333b9820 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x555e33626bb0 <col:11> 'const String' lvalue ParmVar 0x555e33623a58 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x555e33626bd0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x555e33626cb8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x555e33626c88 <col:19> 'char' 123
|     |-ReturnStmt 0x555e33626de0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x555e33626db0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x555e33626d90 <col:13> 'const String' lvalue ParmVar 0x555e33623a58 'x' 'const String &'
|     `-IfStmt 0x555e336270e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x555e33626e78 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555e33626e60 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555e33626e40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555e33626e10 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |       `-DeclRefExpr 0x555e33626df0 <col:11> 'const String' lvalue ParmVar 0x555e33623a58 'x' 'const String &'
|       |-ReturnStmt 0x555e33627000 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x555e33626fe8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x555e33626fb8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x555e33626fa0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x555e33626f80 <col:13, col:29> 'String' (CXXTemporary 0x555e33626f80)
|       |         `-CallExpr 0x555e33626f30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x555e33626f18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x555e33626e90 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x555e33623290 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x555e33626f60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x555e33626eb0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x555e33626ed0 <col:28> 'const String' lvalue ParmVar 0x555e33623a58 'x' 'const String &'
|       `-ReturnStmt 0x555e336270d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x555e336270c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x555e33627090 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x555e33627078 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x555e33627058 <col:13, col:20> 'String' (CXXTemporary 0x555e33627058)
|                 `-CXXTemporaryObjectExpr 0x555e33627020 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x555e33623cb0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x555e33623ba0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x555e33623c18 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e336253e8 <col:71> 'bool' false
|-CXXRecordDecl 0x555e33623d60 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x555e33624058 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x555e33623ff0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x555e33623f90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x555e33623f50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x555e3339c9e0 'String'
|       | `-CXXRecord 0x555e3339c950 'String'
|       |-BuiltinType 0x555e33070370 'int'
|       `-DecayedType 0x555e335bb540 '__va_list_tag *' sugar
|         |-TypedefType 0x555e335bb510 'va_list' sugar
|         | |-Typedef 0x555e332baca0 'va_list'
|         | `-TypedefType 0x555e332bac50 '__gnuc_va_list' sugar
|         |   |-Typedef 0x555e332b3a48 '__gnuc_va_list'
|         |   `-TypedefType 0x555e332b39b0 '__builtin_va_list' sugar
|         |     |-Typedef 0x555e330b1bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x555e330b1b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x555e330710c0 '__va_list_tag'
|         |         `-CXXRecord 0x555e33071028 '__va_list_tag'
|         `-PointerType 0x555e332c09a0 '__va_list_tag *'
|           `-RecordType 0x555e330710c0 '__va_list_tag'
|             `-CXXRecord 0x555e33071028 '__va_list_tag'
|-EnumDecl 0x555e336240b0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x555e336241b0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624710 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624190 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x555e33624170 <col:16> 'int' 1
| |-EnumConstantDecl 0x555e33624240 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624728 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624220 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x555e33624200 <col:21> 'int' 2
| |-EnumConstantDecl 0x555e336242d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624740 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336242b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x555e33624290 <col:22> 'int' 4
| |-EnumConstantDecl 0x555e33624360 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624758 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624340 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x555e33624320 <col:17> 'int' 8
| |-EnumConstantDecl 0x555e336243f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624770 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336243d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x555e336243b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x555e33624480 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e33624788 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624460 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555e33624440 <col:19> 'int' 32
| |-EnumConstantDecl 0x555e33624510 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e336247a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336244f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x555e336244d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x555e336245a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e336247b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624580 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x555e33624560 <col:14> 'int' 128
| |-EnumConstantDecl 0x555e33624630 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555e336247d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33624610 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x555e336245f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x555e336246c0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x555e336247e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e336246a0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x555e33624680 <col:12> 'int' 1024
|-CXXMethodDecl 0x555e336249f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x555e33624810 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x555e336248b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x555e33624b80 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x555e33624ab8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x555e33624c28 <line:580:3, col:10> col:3 private
|-FieldDecl 0x555e33624c68 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x555e33624cc8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x555e33624d40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x555e33625140 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x555e33624db8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x555e33624e38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x555e33624eb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x555e33624f30 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x555e33624fa8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x555e33625020 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x555e33625268 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x555e33625268
| `-ParmVarDecl 0x555e33625378 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x555e33627498 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x555e33627498
  `-ParmVarDecl 0x555e336275a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e335ba580 prev 0x555e335b90e8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e335ba678 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x555e335ba708 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x555e335ba848 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x555e335ba740 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555e335bbc90 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555e335bbc70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555e335bb810 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555e335bbd20 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555e335bbce0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x555e335ba740 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555e335bb878 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555e335bbda0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555e335bbd60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555e335bb8d8 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555e335bbde0 <col:54> 'bool' false
| `-CompoundStmt 0x555e335bbee8 <col:61, line:38:5>
|   `-BinaryOperator 0x555e335bbec8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x555e335bbe60 <col:9> 'const Element *' lvalue ->_context 0x555e335bb7b0
|     | `-CXXThisExpr 0x555e335bbe50 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x555e335bbeb0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x555e335bbe90 <col:20> 'int' 0
|-CXXConstructorDecl 0x555e335baa58 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555e335ba908 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x555e335ba980 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555e335bbcc8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555e335bbca8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x555e335bb7b0 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x555e335bbf40 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x555e335bbf00 <col:20> 'const Element *' lvalue ParmVar 0x555e335ba908 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x555e335bb810 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555e335bbfc0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555e335bbf80 <col:36> 'ErrorHandler *' lvalue ParmVar 0x555e335ba980 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555e335bb878 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555e335bc040 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555e335bc000 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x555e335bb8d8 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555e335bc080 <col:73> 'bool' false
| `-CompoundStmt 0x555e335bc0f8 <col:80, line:46:5>
|-CXXMethodDecl 0x555e335bab88 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x555e335bc170 <col:36, line:51:5>
|   `-ReturnStmt 0x555e335bc160 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x555e335bc148 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x555e335bc118 <col:16> 'const Element *const' lvalue ->_context 0x555e335bb7b0
|         `-CXXThisExpr 0x555e335bc108 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555e335bac78 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x555e335bc1f0 <col:32, line:57:5>
|   `-ReturnStmt 0x555e335bc1e0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x555e335bc1c8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x555e335bc198 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x555e335bb810
|         `-CXXThisExpr 0x555e335bc188 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555e335bad38 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x555e335baec0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x555e335badf0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555e335bb010 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x555e335baf80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555e335bb160 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x555e335bb0d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555e335bb368 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x555e335bb218 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x555e335bb290 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x555e335bb6c0 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x555e335bb428 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x555e335bb4a8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x555e335bb570 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x555e335bb778 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x555e335bb7b0 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x555e335bb810 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x555e335bb878 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x555e335bb8d8 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x555e335bb928 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x555e335bb928
| `-ParmVarDecl 0x555e335bba38 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x555e335bbad8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x555e335bbad8
| `-ParmVarDecl 0x555e335bbbe8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x555e336d4af0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e335db810 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x555e335db9e8 prev 0x555e335db810 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555e335dba78 <col:46, col:52> col:46 public
|-TypedefDecl 0x555e335dbaa0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335dd670 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x555e335dd620 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x555e335dbf50 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x555e335dbe50 'type'
|     `-TemplateSpecializationType 0x555e335dbde0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x555e335dbcc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x555e335dbca0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x555e335dbc80 <col:24> 'unsigned long' 4
|       `-RecordType 0x555e335dbdc0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x555e335dbce0 'char_array'
|-TypedefDecl 0x555e335e0368 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x555e335e0330 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x555e335e0310 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x555e335dd670 'type'
|     `-ElaboratedType 0x555e335dd620 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x555e335dbf50 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x555e335dbe50 'type'
|         `-TemplateSpecializationType 0x555e335dbde0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x555e335dbcc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x555e335dbca0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x555e335dbc80 <col:24> 'unsigned long' 4
|           `-RecordType 0x555e335dbdc0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x555e335dbce0 'char_array'
|-CXXMethodDecl 0x555e335e04e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x555e335e03f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x555e335e05d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555e335e06b8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x555e335e0988 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555e335e0890 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x555e335e0bc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555e335e0a40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e335e0ab8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e0d98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555e335e0c88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e335e0d00 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e0ef8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555e335e0fc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555e335e1218 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555e335e1088 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555e335e1100 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e1478 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x555e335e12e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555e335e1360 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e1638 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555e335e1548 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e17f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555e335e1700 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e18b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555e335e1960 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555e335e1b98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555e335e1a10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555e335e1a88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555e335e1e38 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555e335e1d40 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x555e335e1f00 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x555e335e1f50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555e335e1fa0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e335da218 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x555e335da428 prev 0x555e335da218 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555e335db780 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555e335db730 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x555e335db710 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x555e335db5c0 'type'
|     `-SubstTemplateTypeParmType 0x555e335db3e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x555e3328a580 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3328a528 'T'
|       `-RecordType 0x555e335daf30 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555e335dae48 'sized_array_memory'
|-FieldDecl 0x555e335e1ff0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x555e335e2040 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555e335e2078 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|   |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555e3336e1a8 'T'
|   `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2108 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x555e335e20d0 'int &'
|   `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e21c8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x555e335e2190 'const int &'
|   `-QualType 0x555e335da4c1 'const int' const
|     `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2258 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x555e335e2220 'int *'
|   `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e22e8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x555e335e22b0 'const int *'
|   `-QualType 0x555e335da4c1 'const int' const
|     `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2ed0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x555e335e2e80 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x555e335e2e60 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x555e335e2df0 'type'
|     `-SubstTemplateTypeParmType 0x555e335e2bb0 'int' sugar
|       |-TemplateTypeParmType 0x555e33294970 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e33294920 'T'
|       `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2f38 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x555e335e2190 'const int &'
|   `-QualType 0x555e335da4c1 'const int' const
|     `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2f90 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e2ff8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x555e335e2220 'int *'
|   `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|     |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555e3336e1a8 'T'
|     `-BuiltinType 0x555e33070370 'int'
|-TypedefDecl 0x555e335e3060 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x555e335e22b0 'const int *'
|   `-QualType 0x555e335da4c1 'const int' const
|     `-SubstTemplateTypeParmType 0x555e335da4c0 'int' sugar
|       |-TemplateTypeParmType 0x555e3336e200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555e3336e1a8 'T'
|       `-BuiltinType 0x555e33070370 'int'
|-EnumDecl 0x555e335e30b8 <line:134:5> col:5
| `-EnumConstantDecl 0x555e335e31b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555e335e3190 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555e3336fbe8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555e3336fbc0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555e3336fba0 <col:40> 'int' 1
|-CXXConstructorDecl 0x555e335e3238 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555e335e3488 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555e335e32f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e335e3390 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x555e335e3748 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x555e335e3630 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x555e335e3a08 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x555e335e38f0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x555e335e3d50 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x555e335e3c30 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x555e335e4060 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x555e335e3f40 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x555e335e4dd8 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555e335e4198 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e335e4210 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555e335e4f08 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555e335e4fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e5040 <col:30> Inherited
|-CXXMethodDecl 0x555e335e5088 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555e335e5138 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e5190 <col:30> Inherited
|-CXXMethodDecl 0x555e335e5258 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555e335e5308 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e5360 <col:30> Inherited
|-CXXMethodDecl 0x555e335e53a8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555e335e5458 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e54b0 <col:30> Inherited
|-CXXMethodDecl 0x555e335e54f8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555e335e55a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e5600 <col:30> Inherited
|-CXXMethodDecl 0x555e335e5648 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555e335e56f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555e335e5750 <col:30> Inherited
|-CXXMethodDecl 0x555e335e5778 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555e335e5828 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555e335e58d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555e335e5a98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555e335e5988 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555e335e5a00 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555e335e5be8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555e335e5b58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e335e5d98 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x555e335e5ca0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555e335e5e50 <col:20>
| `-OptimizeNoneAttr 0x555e335e5ea8 <col:30>
|-CXXMethodDecl 0x555e335e5fc8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x555e335e5ed0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555e335e6080 <col:20>
| `-OptimizeNoneAttr 0x555e335e60d8 <col:30>
|-CXXMethodDecl 0x555e335e6190 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555e335e6100 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e335e62d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555e335e6248 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e335e6408 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x555e335e6538 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x555e335e6608 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x555e335e66d8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x555e335e6818 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555e335e6788 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e335e6960 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555e335e68d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555e335e6aa8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x555e335e6a18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555e335e6b60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555e335e6c60 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555e335e6bd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555e335e6d18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555e335e6dd8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x555e335e6ed8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x555e335e7058 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555e335e6f98 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x555e335e7818 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555e335e7110 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x555e335e7778 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x555e335e7678 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x555e335e78f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555e335e7a48 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555e335e79b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555e335e7b00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555e335e7d48 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555e335e7bc0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555e335e7c38 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555e335e7f08 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x555e335e7e18 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555e335e8158 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x555e335e7fd0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555e335e8048 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555e335e8218 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555e335e8478 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x555e335e8380 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x555e335e8548 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e335d23b8 prev 0x555e335c1068 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e335d24b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x555e335d25a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x555e335fc430 <col:16, line:828:9>
|-CXXDestructorDecl 0x555e335d2690 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x555e335fc440 <col:25, line:830:9>
|-CXXMethodDecl 0x555e335d2790 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x555e335d2840 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x555e335d28e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555e335d28e8
| `-ParmVarDecl 0x555e335d29f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x555e335d31b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555e335d31b8
  `-ParmVarDecl 0x555e335d32c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e335c0e78 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x555e335c0fd8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x555e335c1068 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x555e335c1120 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x555e335c1228 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x555e335c1158 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555e335ea178 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555e335ea158 <col:31> 'int' 0
|-CXXConstructorDecl 0x555e335c1548 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x555e335c13c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x555e335c1438 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555e335ea1b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555e335ea190 <col:59> 'int' 0
|-CXXConstructorDecl 0x555e335c1720 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555e335c1610 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x555e335c1688 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555e335ea1e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555e335ea1c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x555e335c1ad8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555e335c18c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x555e335c1938 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x555e335c19b0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555e335ea220 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555e335ea200 <col:31> 'int' 0
|-CXXConstructorDecl 0x555e335c1c98 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x555e335c1bd8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x555e335c1d90 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x555e335c1f78 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x555e335c1e80 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x555e335c2068 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x555e335ea610 <col:24, line:291:5>
|   `-ReturnStmt 0x555e335ea600 <line:290:9, col:79>
|     `-BinaryOperator 0x555e335ea5e0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x555e335ea478 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x555e335ea3d0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x555e335ea3b0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x555e335ea2a8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x555e335ea290 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x555e335ea278 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x555e335ea248 <col:18> 'Vector<String> *const' lvalue ->_conf 0x555e335da1b0
|       | |   |       `-CXXThisExpr 0x555e335ea238 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x555e335ea398 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x555e335ea380 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x555e335ea348 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x555e335ea318 <col:28, col:35> '<bound member function type>' ->size 0x555e333f66a8
|       | |           `-ImplicitCastExpr 0x555e335ea368 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x555e335ea300 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x555e335ea2d0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x555e335da1b0
|       | |                 `-CXXThisExpr 0x555e335ea2c0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x555e335ea460 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x555e335ea448 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x555e335ea430 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x555e335ea400 <col:47> 'Args::Slot *const' lvalue ->_slots 0x555e335e8690
|       |         `-CXXThisExpr 0x555e335ea3f0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x555e335ea5c0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x555e335ea5a8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555e335ea590 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555e335ea550 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555e335ea538 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555e335ea4a8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555e335e87b8
|         |     |   `-CXXThisExpr 0x555e335ea498 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555e335ea4d8 <col:73> 'int' 0
|         `-IntegerLiteral 0x555e335ea570 <col:79> 'int' 0
|-CXXMethodDecl 0x555e335c2128 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x555e335ea7e8 <col:32, line:296:5>
|   `-ReturnStmt 0x555e335ea7d8 <line:295:9, col:49>
|     `-BinaryOperator 0x555e335ea7b8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x555e335ea698 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x555e335ea680 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x555e335ea668 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x555e335ea638 <col:17> 'Args::Slot *const' lvalue ->_slots 0x555e335e8690
|       |       `-CXXThisExpr 0x555e335ea628 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x555e335ea798 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x555e335ea780 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555e335ea768 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555e335ea728 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555e335ea710 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555e335ea6c0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555e335e87b8
|         |     |   `-CXXThisExpr 0x555e335ea6b0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555e335ea6f0 <col:43> 'int' 0
|         `-IntegerLiteral 0x555e335ea748 <col:49> 'int' 0
|-CXXMethodDecl 0x555e335c2218 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x555e335ea9f8 <col:19, line:306:5>
|   |-IfStmt 0x555e335ea918 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x555e335ea858 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x555e335ea840 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x555e335ea810 <col:13> 'Vector<String> *' lvalue ->_conf 0x555e335da1b0
|   | |     `-CXXThisExpr 0x555e335ea800 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x555e335ea8f8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x555e335ea8c8 <col:13, col:20> '<bound member function type>' ->clear 0x555e333f90d8
|   |     `-ImplicitCastExpr 0x555e335ea8b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x555e335ea880 <col:13> 'Vector<String> *' lvalue ->_conf 0x555e335da1b0
|   |         `-CXXThisExpr 0x555e335ea870 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x555e335ea9a0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x555e335ea970 <col:9, col:16> '<bound member function type>' .clear 0x555e335e8218
|   |   `-MemberExpr 0x555e335ea940 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x555e335e8630
|   |     `-CXXThisExpr 0x555e335ea930 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x555e335ea9e8 <line:305:9, col:17>
|     `-UnaryOperator 0x555e335ea9d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335ea9c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555e335c2498 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x555e335c23a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x555e335c2618 <line:317:5, col:38> col:11 used push_back 'Args &(const String &)'
| `-ParmVarDecl 0x555e335c2550 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x555e335c2998 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x555e335c26c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x555e335c28f8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x555e335c2768 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x555e335c27e0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x555e335ead08 <col:67, line:327:5>
|     |-WhileStmt 0x555e335eacb8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x555e335eaad0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x555e335eaa60 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555e3340d190 0x555e333cb280 0x555e333caf30 0x555e333ca820 0x555e3339baa0 0x555e33357da0
|     | | |-DeclRefExpr 0x555e335eaa20 <col:16> 'Iter' lvalue ParmVar 0x555e335c2768 'begin' 'Iter'
|     | | `-DeclRefExpr 0x555e335eaa40 <col:25> 'Iter' lvalue ParmVar 0x555e335c27e0 'end' 'Iter'
|     | `-CompoundStmt 0x555e335eac98 <col:30, line:325:9>
|     |   |-CallExpr 0x555e335eac38 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x555e335eab18 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x555e335eac08 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x555e335eab98 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|     |   |   `-DeclRefExpr 0x555e335eab78 <col:24> 'Iter' lvalue ParmVar 0x555e335c2768 'begin' 'Iter'
|     |   `-UnaryOperator 0x555e335eac80 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x555e335eac60 <col:15> 'Iter' lvalue ParmVar 0x555e335c2768 'begin' 'Iter'
|     `-ReturnStmt 0x555e335eacf8 <line:326:9, col:17>
|       `-UnaryOperator 0x555e335eace0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335eacd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555e335c2aa0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x555e335c2a10 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x555e335c2be8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x555e335c2b58 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x555e335c2cb0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x555e335eade8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x555e335ead88 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x555e335ead38 <col:9> '<bound member function type>' ->reset_from 0x555e335e8b38
|   | | `-CXXThisExpr 0x555e335ead28 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x555e335ead68 <col:20> 'int' 0
|   `-ReturnStmt 0x555e335eadd8 <line:352:9, col:17>
|     `-UnaryOperator 0x555e335eadc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335eadb0 <col:17> 'Args *' this
|-VarDecl 0x555e335c2d68 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x555e335c2dd0 <col:38> 'int' 1
|-VarDecl 0x555e335c2e60 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x555e335c2ec8 <col:39> 'int' 2
|-VarDecl 0x555e335c2f58 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x555e335c2fc0 <col:39> 'int' 4
|-VarDecl 0x555e335c3050 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x555e335c30b8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x555e335c3438 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x555e335c3130 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x555e335c3398 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x555e335c31e0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555e335c3288 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x555e335eaf40 <col:43, line:371:5>
| |   `-ReturnStmt 0x555e335eaf30 <line:370:9, col:34>
| |     `-CallExpr 0x555e335eaef8 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555e335eae18 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555e335eae98 <col:21> 'const char *' lvalue ParmVar 0x555e335c31e0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x555e335eaeb8 <col:30> 'int' 0
| |       `-DeclRefExpr 0x555e335eaed8 <col:33> 'T' lvalue ParmVar 0x555e335c3288 'x' 'T &'
| `-CXXMethodDecl 0x555e336e5348 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x555e336e5160 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x555e336e5238 <col:37, col:40> col:40 x 'unsigned short &'
|-FunctionTemplateDecl 0x555e335c3780 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x555e335c34a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335c36e0 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555e335c3550 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c35f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555e335eb090 <col:45, line:375:5>
|     `-ReturnStmt 0x555e335eb080 <line:374:9, col:42>
|       `-CallExpr 0x555e335eb048 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eaf68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eafe8 <col:21> 'const char *' lvalue ParmVar 0x555e335c3550 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eb008 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int'
|         `-DeclRefExpr 0x555e335eb028 <col:41> 'T' lvalue ParmVar 0x555e335c35f8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335c3ab8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x555e335c37e8 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335c3a18 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555e335c38a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c3948 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555e335eb1e0 <col:45, line:379:5>
|     `-ReturnStmt 0x555e335eb1d0 <line:378:9, col:43>
|       `-CallExpr 0x555e335eb198 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eb0b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eb138 <col:21> 'const char *' lvalue ParmVar 0x555e335c38a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eb158 <col:30> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
|         `-DeclRefExpr 0x555e335eb178 <col:42> 'T' lvalue ParmVar 0x555e335c3948 'x' 'T &'
|-FunctionTemplateDecl 0x555e335c3de8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x555e335c3b20 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335c3d48 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555e335c3bd0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c3c78 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x555e335eb3e0 <col:46, line:383:5>
|     `-ReturnStmt 0x555e335eb3d0 <line:382:9, col:55>
|       `-CallExpr 0x555e335eb398 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eb208 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eb288 <col:21> 'const char *' lvalue ParmVar 0x555e335c3bd0 'keyword' 'const char *'
|         |-BinaryOperator 0x555e335eb358 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555e335eb308 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e335eb2e8 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555e335eb340 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555e335eb320 <col:42> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x555e335eb378 <col:54> 'T' lvalue ParmVar 0x555e335c3c78 'x' 'T &'
|-FunctionTemplateDecl 0x555e335c41e8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x555e335c3e50 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335c4148 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x555e335c3f00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c3f80 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555e335c4028 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x555e335eb520 <col:54, line:388:5>
|     |-CallExpr 0x555e335eb4a8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335eb3f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555e335eb438 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555e335eb448 <col:30> 'const char *' lvalue ParmVar 0x555e335c3f00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335eb468 <col:39> 'int' lvalue ParmVar 0x555e335c3f80 'flags' 'int'
|     | `-DeclRefExpr 0x555e335eb488 <col:46> 'T' lvalue ParmVar 0x555e335c4028 'x' 'T &'
|     `-ReturnStmt 0x555e335eb510 <line:387:9, col:17>
|       `-UnaryOperator 0x555e335eb4f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335eb4e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335c4698 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x555e335c4258 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335c42d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555e335c45f8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555e335c4398 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c4438 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c44d8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335eb690 <col:74, line:403:5>
|     `-ReturnStmt 0x555e335eb680 <line:402:9, col:56>
|       `-CallExpr 0x555e335eb640 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eb550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eb5c0 <col:28> 'const char *' lvalue ParmVar 0x555e335c4398 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335eb5e0 <col:37> 'int' 0
|         |-DeclRefExpr 0x555e335eb600 <col:40> 'T' lvalue ParmVar 0x555e335c4438 'x' 'T &'
|         `-DeclRefExpr 0x555e335eb620 <col:43> 'const V' lvalue ParmVar 0x555e335c44d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555e335c4b08 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555e335c4708 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335c4788 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555e335c4a68 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555e335c4848 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c48e8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c4988 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335eb7f8 <col:76, line:407:5>
|     `-ReturnStmt 0x555e335eb7e8 <line:406:9, col:65>
|       `-CallExpr 0x555e335eb7a8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eb6b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eb728 <col:28> 'const char *' lvalue ParmVar 0x555e335c4848 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eb748 <col:37> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
|         |-DeclRefExpr 0x555e335eb768 <col:49> 'T' lvalue ParmVar 0x555e335c48e8 'x' 'T &'
|         `-DeclRefExpr 0x555e335eb788 <col:52> 'const V' lvalue ParmVar 0x555e335c4988 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555e335c5058 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x555e335c4b78 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335c4bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555e335c4fb8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555e335c4cb8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c4d38 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555e335c4dd8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c4e78 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335eb960 <col:85, line:412:5>
|     |-CallExpr 0x555e335eb8e0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335eb810 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555e335eb850 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555e335eb860 <col:37> 'const char *' lvalue ParmVar 0x555e335c4cb8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335eb880 <col:46> 'int' lvalue ParmVar 0x555e335c4d38 'flags' 'int'
|     | |-DeclRefExpr 0x555e335eb8a0 <col:53> 'T' lvalue ParmVar 0x555e335c4dd8 'x' 'T &'
|     | `-DeclRefExpr 0x555e335eb8c0 <col:56> 'const V' lvalue ParmVar 0x555e335c4e78 'default_value' 'const V &'
|     `-ReturnStmt 0x555e335eb950 <line:411:9, col:17>
|       `-UnaryOperator 0x555e335eb938 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335eb928 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335c54e8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x555e335c50d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c5148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x555e335c5448 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x555e335c5208 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555e335c5280 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x555e335c5328 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x555e335ebae0 <col:53, line:425:5>
| |   `-ReturnStmt 0x555e335ebad0 <line:424:9, col:42>
| |     `-CallExpr 0x555e335eba90 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555e335eb990 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555e335eba10 <col:21> 'const char *' lvalue ParmVar 0x555e335c5208 'keyword' 'const char *'
| |       |-IntegerLiteral 0x555e335eba30 <col:30> 'int' 0
| |       |-DeclRefExpr 0x555e335eba50 <col:33> 'P' lvalue ParmVar 0x555e335c5280 'parser' 'P'
| |       `-DeclRefExpr 0x555e335eba70 <col:41> 'T' lvalue ParmVar 0x555e335c5328 'x' 'T &'
| `-CXXMethodDecl 0x555e336e4a78 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x555e336e4820 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x555e336e48c8 <col:37, col:39> col:39 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x555e336e4998 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x555e335c5938 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x555e335c5558 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c55d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335c5898 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335c5698 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c5710 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c57b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555e335ebc58 <col:55, line:429:5>
|     `-ReturnStmt 0x555e335ebc48 <line:428:9, col:50>
|       `-CallExpr 0x555e335ebc08 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ebb08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ebb88 <col:21> 'const char *' lvalue ParmVar 0x555e335c5698 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ebba8 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int'
|         |-DeclRefExpr 0x555e335ebbc8 <col:41> 'P' lvalue ParmVar 0x555e335c5710 'parser' 'P'
|         `-DeclRefExpr 0x555e335ebbe8 <col:49> 'T' lvalue ParmVar 0x555e335c57b8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335c5d88 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x555e335c59a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c5a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x555e335c5ce8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x555e335c5ae8 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555e335c5b60 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x555e335c5c08 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x555e335ebdd0 <col:55, line:433:5>
| |   `-ReturnStmt 0x555e335ebdc0 <line:432:9, col:51>
| |     `-CallExpr 0x555e335ebd80 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555e335ebc80 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555e335ebd00 <col:21> 'const char *' lvalue ParmVar 0x555e335c5ae8 'keyword' 'const char *'
| |       |-DeclRefExpr 0x555e335ebd20 <col:30> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
| |       |-DeclRefExpr 0x555e335ebd40 <col:42> 'P' lvalue ParmVar 0x555e335c5b60 'parser' 'P'
| |       `-DeclRefExpr 0x555e335ebd60 <col:50> 'T' lvalue ParmVar 0x555e335c5c08 'x' 'T &'
| |-CXXMethodDecl 0x555e336d55a8 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, WordArg, String &)'
| | |-TemplateArgument type 'WordArg'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x555e336d5310 <col:18, col:30> col:30 keyword 'const char *'
| | |-ParmVarDecl 0x555e336d53b8 <col:39, col:41> col:41 parser 'WordArg':'WordArg'
| | `-ParmVarDecl 0x555e336d5488 <col:49, col:52> col:52 x 'String &'
| `-CXXMethodDecl 0x555e336e3c88 <col:5, line:433:5> line:431:11 used read_p 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x555e336e39f8 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x555e336e3a98 <col:39, col:41> col:41 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x555e336e3b68 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x555e335c61d8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x555e335c5df8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c5e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335c6138 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335c5f38 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c5fb0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c6058 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x555e335ebff8 <col:56, line:437:5>
|     `-ReturnStmt 0x555e335ebfe8 <line:436:9, col:63>
|       `-CallExpr 0x555e335ebfa8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ebdf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ebe78 <col:21> 'const char *' lvalue ParmVar 0x555e335c5f38 'keyword' 'const char *'
|         |-BinaryOperator 0x555e335ebf48 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555e335ebef8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e335ebed8 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555e335ebf30 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555e335ebf10 <col:42> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555e335ebf68 <col:54> 'P' lvalue ParmVar 0x555e335c5fb0 'parser' 'P'
|         `-DeclRefExpr 0x555e335ebf88 <col:62> 'T' lvalue ParmVar 0x555e335c6058 'x' 'T &'
|-FunctionTemplateDecl 0x555e335c6708 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x555e335c6248 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c62c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335c6668 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555e335c6388 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c6408 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555e335c6480 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c6528 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x555e335ec160 <col:64, line:442:5>
|     |-CallExpr 0x555e335ec0e0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335ec010 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555e335ec050 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555e335ec060 <col:30> 'const char *' lvalue ParmVar 0x555e335c6388 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335ec080 <col:39> 'int' lvalue ParmVar 0x555e335c6408 'flags' 'int'
|     | |-DeclRefExpr 0x555e335ec0a0 <col:46> 'P' lvalue ParmVar 0x555e335c6480 'parser' 'P'
|     | `-DeclRefExpr 0x555e335ec0c0 <col:54> 'T' lvalue ParmVar 0x555e335c6528 'x' 'T &'
|     `-ReturnStmt 0x555e335ec150 <line:441:9, col:17>
|       `-UnaryOperator 0x555e335ec138 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335ec128 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335c6d08 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x555e335c6780 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c67f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555e335c6878 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555e335c6c68 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555e335c6940 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c69b8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c6a58 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c6b28 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335ec2f8 <col:84, line:458:5>
|     `-ReturnStmt 0x555e335ec2e8 <line:457:9, col:64>
|       `-CallExpr 0x555e335ec2a0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ec190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ec200 <col:28> 'const char *' lvalue ParmVar 0x555e335c6940 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335ec220 <col:37> 'int' 0
|         |-DeclRefExpr 0x555e335ec240 <col:40> 'P' lvalue ParmVar 0x555e335c69b8 'parser' 'P'
|         |-DeclRefExpr 0x555e335ec260 <col:48> 'T' lvalue ParmVar 0x555e335c6a58 'x' 'T &'
|         `-DeclRefExpr 0x555e335ec280 <col:51> 'const V' lvalue ParmVar 0x555e335c6b28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555e335c7288 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555e335c6d80 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c6df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555e335c6e78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555e335c71e8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555e335c6f40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c6fb8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c7058 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c70f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335ec488 <col:86, line:462:5>
|     `-ReturnStmt 0x555e335ec478 <line:461:9, col:73>
|       `-CallExpr 0x555e335ec430 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ec320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ec390 <col:28> 'const char *' lvalue ParmVar 0x555e335c6f40 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ec3b0 <col:37> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
|         |-DeclRefExpr 0x555e335ec3d0 <col:49> 'P' lvalue ParmVar 0x555e335c6fb8 'parser' 'P'
|         |-DeclRefExpr 0x555e335ec3f0 <col:57> 'T' lvalue ParmVar 0x555e335c7058 'x' 'T &'
|         `-DeclRefExpr 0x555e335ec410 <col:60> 'const V' lvalue ParmVar 0x555e335c70f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555e335c7918 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x555e335c7300 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c7378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555e335c73f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555e335c7878 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555e335c74c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c7540 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555e335c75b8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c7658 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x555e335c7728 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x555e335ec618 <col:95, line:467:5>
|     |-CallExpr 0x555e335ec590 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335ec4a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555e335ec4e0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555e335ec4f0 <col:37> 'const char *' lvalue ParmVar 0x555e335c74c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335ec510 <col:46> 'int' lvalue ParmVar 0x555e335c7540 'flags' 'int'
|     | |-DeclRefExpr 0x555e335ec530 <col:53> 'P' lvalue ParmVar 0x555e335c75b8 'parser' 'P'
|     | |-DeclRefExpr 0x555e335ec550 <col:61> 'T' lvalue ParmVar 0x555e335c7658 'x' 'T &'
|     | `-DeclRefExpr 0x555e335ec570 <col:64> 'const V' lvalue ParmVar 0x555e335c7728 'default_value' 'const V &'
|     `-ReturnStmt 0x555e335ec608 <line:466:9, col:17>
|       `-UnaryOperator 0x555e335ec5f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335ec5e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335c7ef8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x555e335c7998 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c7a18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335c7a98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335c7e58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335c7b60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c7bd8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c7c78 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555e335c7d18 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x555e335ec7c0 <col:63, line:481:5>
|     `-ReturnStmt 0x555e335ec7b0 <line:480:9, col:47>
|       `-CallExpr 0x555e335ec768 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ec648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ec6c8 <col:21> 'const char *' lvalue ParmVar 0x555e335c7b60 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335ec6e8 <col:30> 'int' 0
|         |-DeclRefExpr 0x555e335ec708 <col:33> 'P' lvalue ParmVar 0x555e335c7bd8 'parser' 'P'
|         |-DeclRefExpr 0x555e335ec728 <col:41> 'T1' lvalue ParmVar 0x555e335c7c78 'x1' 'T1 &'
|         `-DeclRefExpr 0x555e335ec748 <col:45> 'T2' lvalue ParmVar 0x555e335c7d18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555e335c8478 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x555e335c7f70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c7fe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335c8068 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335c83d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335c8130 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c81a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c8248 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555e335c82e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555e335ec960 <col:65, line:485:5>
|     `-ReturnStmt 0x555e335ec950 <line:484:9, col:55>
|       `-CallExpr 0x555e335ec908 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ec7e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ec868 <col:21> 'const char *' lvalue ParmVar 0x555e335c8130 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ec888 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int'
|         |-DeclRefExpr 0x555e335ec8a8 <col:41> 'P' lvalue ParmVar 0x555e335c81a8 'parser' 'P'
|         |-DeclRefExpr 0x555e335ec8c8 <col:49> 'T1' lvalue ParmVar 0x555e335c8248 'x1' 'T1 &'
|         `-DeclRefExpr 0x555e335ec8e8 <col:53> 'T2' lvalue ParmVar 0x555e335c82e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555e335c89f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x555e335c84f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c8568 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335c85e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335c8958 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335c86b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c8728 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c87c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555e335c8868 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555e335ecb00 <col:65, line:489:5>
|     `-ReturnStmt 0x555e335ecaf0 <line:488:9, col:56>
|       `-CallExpr 0x555e335ecaa8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ec988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eca08 <col:21> 'const char *' lvalue ParmVar 0x555e335c86b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eca28 <col:30> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
|         |-DeclRefExpr 0x555e335eca48 <col:42> 'P' lvalue ParmVar 0x555e335c8728 'parser' 'P'
|         |-DeclRefExpr 0x555e335eca68 <col:50> 'T1' lvalue ParmVar 0x555e335c87c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x555e335eca88 <col:54> 'T2' lvalue ParmVar 0x555e335c8868 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555e335c8f78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x555e335c8a70 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c8ae8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335c8b68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335c8ed8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335c8c30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c8ca8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c8d48 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555e335c8de8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x555e335ecd50 <col:66, line:493:5>
|     `-ReturnStmt 0x555e335ecd40 <line:492:9, col:68>
|       `-CallExpr 0x555e335eccf8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ecb28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ecba8 <col:21> 'const char *' lvalue ParmVar 0x555e335c8c30 'keyword' 'const char *'
|         |-BinaryOperator 0x555e335ecc78 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555e335ecc28 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e335ecc08 <col:30> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555e335ecc60 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555e335ecc40 <col:42> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555e335ecc98 <col:54> 'P' lvalue ParmVar 0x555e335c8ca8 'parser' 'P'
|         |-DeclRefExpr 0x555e335eccb8 <col:62> 'T1' lvalue ParmVar 0x555e335c8d48 'x1' 'T1 &'
|         `-DeclRefExpr 0x555e335eccd8 <col:66> 'T2' lvalue ParmVar 0x555e335c8de8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555e335c95d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x555e335c8ff0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335c9068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335c90e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335c9538 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335c91b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c9230 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555e335c92a8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555e335c9348 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555e335c93e8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x555e335ecee0 <col:74, line:498:5>
|     |-CallExpr 0x555e335ece58 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335ecd68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555e335ecda8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555e335ecdb8 <col:30> 'const char *' lvalue ParmVar 0x555e335c91b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335ecdd8 <col:39> 'int' lvalue ParmVar 0x555e335c9230 'flags' 'int'
|     | |-DeclRefExpr 0x555e335ecdf8 <col:46> 'P' lvalue ParmVar 0x555e335c92a8 'parser' 'P'
|     | |-DeclRefExpr 0x555e335ece18 <col:54> 'T1' lvalue ParmVar 0x555e335c9348 'x1' 'T1 &'
|     | `-DeclRefExpr 0x555e335ece38 <col:58> 'T2' lvalue ParmVar 0x555e335c93e8 'x2' 'T2 &'
|     `-ReturnStmt 0x555e335eced0 <line:497:9, col:17>
|       `-UnaryOperator 0x555e335eceb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335ecea8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335c9938 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x555e335c9658 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335c9898 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555e335c9710 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c9788 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x555e335ed028 <col:52, line:509:5>
|     `-ReturnStmt 0x555e335ed018 <line:508:9, col:44>
|       `-CallExpr 0x555e335ecfe0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ecf10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ecf80 <col:26> 'const char *' lvalue ParmVar 0x555e335c9710 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335ecfa0 <col:35> 'int' 0
|         `-DeclRefExpr 0x555e335ecfc0 <col:38> 'P' lvalue ParmVar 0x555e335c9788 'parser' 'P'
|-FunctionTemplateDecl 0x555e335c9c38 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x555e335c99a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335c9b98 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555e335c9a50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c9ac8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555e335ed168 <col:54, line:513:5>
|     `-ReturnStmt 0x555e335ed158 <line:512:9, col:52>
|       `-CallExpr 0x555e335ed120 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ed050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ed0c0 <col:26> 'const char *' lvalue ParmVar 0x555e335c9a50 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ed0e0 <col:35> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int'
|         `-DeclRefExpr 0x555e335ed100 <col:46> 'P' lvalue ParmVar 0x555e335c9ac8 'parser' 'P'
|-FunctionTemplateDecl 0x555e335c9f38 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x555e335c9ca0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335c9e98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555e335c9d50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335c9dc8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555e335ed2a8 <col:54, line:517:5>
|     `-ReturnStmt 0x555e335ed298 <line:516:9, col:53>
|       `-CallExpr 0x555e335ed260 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ed190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ed200 <col:26> 'const char *' lvalue ParmVar 0x555e335c9d50 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ed220 <col:35> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int'
|         `-DeclRefExpr 0x555e335ed240 <col:47> 'P' lvalue ParmVar 0x555e335c9dc8 'parser' 'P'
|-FunctionTemplateDecl 0x555e335ca238 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x555e335c9fa0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335ca198 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555e335ca050 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335ca0c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x555e335eeb98 <col:55, line:521:5>
|     `-ReturnStmt 0x555e335eeb88 <line:520:9, col:65>
|       `-CallExpr 0x555e335eeb50 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ee9d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eea40 <col:26> 'const char *' lvalue ParmVar 0x555e335ca050 'keyword' 'const char *'
|         |-BinaryOperator 0x555e335eeb10 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x555e335eeac0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e335eeaa0 <col:35> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555e335eeaf8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555e335eead8 <col:47> 'const int' lvalue Var 0x555e335c2e60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x555e335eeb30 <col:59> 'P' lvalue ParmVar 0x555e335ca0c8 'parser' 'P'
|-FunctionTemplateDecl 0x555e335ca608 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x555e335ca2a0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335ca568 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555e335ca350 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335ca3d0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555e335ca448 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x555e335eecd8 <col:63, line:526:5>
|     |-CallExpr 0x555e335eec60 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335eebb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x555e335eebf0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x555e335eec00 <col:35> 'const char *' lvalue ParmVar 0x555e335ca350 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555e335eec20 <col:44> 'int' lvalue ParmVar 0x555e335ca3d0 'flags' 'int'
|     | `-DeclRefExpr 0x555e335eec40 <col:51> 'P' lvalue ParmVar 0x555e335ca448 'parser' 'P'
|     `-ReturnStmt 0x555e335eecc8 <line:525:9, col:17>
|       `-UnaryOperator 0x555e335eecb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335eeca0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335caa58 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x555e335ca678 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335ca6f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335ca9b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335ca7b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335ca830 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x555e335ca8d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x555e335eee30 <col:58, line:541:5>
|     `-ReturnStmt 0x555e335eee20 <line:540:9, col:39>
|       `-CallExpr 0x555e335eede8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eed08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eed88 <col:21> 'const char *' lvalue ParmVar 0x555e335ca7b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eeda8 <col:30> 'P' lvalue ParmVar 0x555e335ca830 'parser' 'P'
|         `-DeclRefExpr 0x555e335eedc8 <col:38> 'T' lvalue ParmVar 0x555e335ca8d8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335caea8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x555e335caac8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cab48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cae08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335cac08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cac80 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cad28 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555e335eef68 <col:60, line:545:5>
|     `-ReturnStmt 0x555e335eef58 <line:544:9, col:41>
|       `-CallExpr 0x555e335eef20 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eee58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eeec0 <col:23> 'const char *' lvalue ParmVar 0x555e335cac08 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335eeee0 <col:32> 'P' lvalue ParmVar 0x555e335cac80 'parser' 'P'
|         `-DeclRefExpr 0x555e335eef00 <col:40> 'T' lvalue ParmVar 0x555e335cad28 'x' 'T &'
|-FunctionTemplateDecl 0x555e335cb2f8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x555e335caf18 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335caf98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cb258 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335cb058 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cb0d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cb178 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555e335ef0a0 <col:60, line:549:5>
|     `-ReturnStmt 0x555e335ef090 <line:548:9, col:41>
|       `-CallExpr 0x555e335ef058 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eef90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335eeff8 <col:23> 'const char *' lvalue ParmVar 0x555e335cb058 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ef018 <col:32> 'P' lvalue ParmVar 0x555e335cb0d0 'parser' 'P'
|         `-DeclRefExpr 0x555e335ef038 <col:40> 'T' lvalue ParmVar 0x555e335cb178 'x' 'T &'
|-FunctionTemplateDecl 0x555e335cb7a0 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x555e335cb368 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cb3e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cb700 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335cb4a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cb520 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cb5c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x555e335ef1d8 <col:61, line:553:5>
|     `-ReturnStmt 0x555e335ef1c8 <line:552:9, col:42>
|       `-CallExpr 0x555e335ef190 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ef0c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ef130 <col:24> 'const char *' lvalue ParmVar 0x555e335cb4a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ef150 <col:33> 'P' lvalue ParmVar 0x555e335cb520 'parser' 'P'
|         `-DeclRefExpr 0x555e335ef170 <col:41> 'T' lvalue ParmVar 0x555e335cb5c8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335cbc78 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x555e335cb810 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cb888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cbbd8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555e335cb948 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cb9c8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cba40 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cbae8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x555e335ef350 <col:69, line:557:5>
|     `-ReturnStmt 0x555e335ef340 <line:556:9, col:46>
|       `-CallExpr 0x555e335ef300 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ef200 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ef280 <col:21> 'const char *' lvalue ParmVar 0x555e335cb948 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335ef2a0 <col:30> 'int' lvalue ParmVar 0x555e335cb9c8 'flags' 'int'
|         |-DeclRefExpr 0x555e335ef2c0 <col:37> 'P' lvalue ParmVar 0x555e335cba40 'parser' 'P'
|         `-DeclRefExpr 0x555e335ef2e0 <col:45> 'T' lvalue ParmVar 0x555e335cbae8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335cbf88 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x555e335cbcf0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335cbee8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555e335cbda0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cbe18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x555e335ef490 <col:56, line:571:5>
|     `-ReturnStmt 0x555e335ef480 <line:570:9, col:48>
|       `-CallExpr 0x555e335ef448 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ef378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ef3e8 <col:30> 'const char *' lvalue ParmVar 0x555e335cbda0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335ef408 <col:39> 'int' 0
|         `-DeclRefExpr 0x555e335ef428 <col:42> 'P' lvalue ParmVar 0x555e335cbe18 'parser' 'P'
|-FunctionTemplateDecl 0x555e335cc318 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x555e335cbff0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335cc278 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555e335cc0a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cc120 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cc198 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555e335ef660 <col:67, line:576:5>
|     |-CallExpr 0x555e335ef5e8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335ef4a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555e335ef4e8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555e335ef4f8 <col:39> 'const char *' lvalue ParmVar 0x555e335cc0a0 'keyword' 'const char *'
|     | |-BinaryOperator 0x555e335ef5a8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555e335ef558 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555e335ef518 <col:48> 'int' lvalue ParmVar 0x555e335cc120 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555e335ef590 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555e335ef570 <col:56> 'const int' lvalue Var 0x555e335c3050 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x555e335ef5c8 <col:68> 'P' lvalue ParmVar 0x555e335cc198 'parser' 'P'
|     `-ReturnStmt 0x555e335ef650 <line:575:9, col:17>
|       `-UnaryOperator 0x555e335ef638 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335ef628 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335cc768 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x555e335cc388 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cc408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cc6c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555e335cc4c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cc540 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cc5e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x555e335ef7d0 <col:62, line:592:5>
|     `-ReturnStmt 0x555e335ef7c0 <line:591:9, col:51>
|       `-CallExpr 0x555e335ef780 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ef690 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335ef700 <col:30> 'const char *' lvalue ParmVar 0x555e335cc4c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335ef720 <col:39> 'int' 0
|         |-DeclRefExpr 0x555e335ef740 <col:42> 'P' lvalue ParmVar 0x555e335cc540 'parser' 'P'
|         `-DeclRefExpr 0x555e335ef760 <col:50> 'T' lvalue ParmVar 0x555e335cc5e8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335ccc48 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x555e335cc7d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cc858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335ccba8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555e335cc918 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cc998 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cca10 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x555e335ccab8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x555e335ef9c8 <col:73, line:597:5>
|     |-CallExpr 0x555e335ef948 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335ef7e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555e335ef828 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555e335ef838 <col:39> 'const char *' lvalue ParmVar 0x555e335cc918 'keyword' 'const char *'
|     | |-BinaryOperator 0x555e335ef8e8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555e335ef898 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555e335ef858 <col:48> 'int' lvalue ParmVar 0x555e335cc998 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555e335ef8d0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555e335ef8b0 <col:56> 'const int' lvalue Var 0x555e335c3050 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555e335ef908 <col:68> 'P' lvalue ParmVar 0x555e335cca10 'parser' 'P'
|     | `-DeclRefExpr 0x555e335ef928 <col:76> 'T' lvalue ParmVar 0x555e335ccab8 'x' 'T &'
|     `-ReturnStmt 0x555e335ef9b8 <line:596:9, col:17>
|       `-UnaryOperator 0x555e335ef9a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335ef990 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335cd1f8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x555e335cccc0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335ccd38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cd158 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x555e335ccdf8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cce70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cd030 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555e335efb38 <col:65, line:614:5>
|     `-ReturnStmt 0x555e335efb28 <line:613:9, col:46>
|       `-CallExpr 0x555e335efae8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335ef9f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335efa68 <col:25> 'const char *' lvalue ParmVar 0x555e335ccdf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335efa88 <col:34> 'int' 0
|         |-DeclRefExpr 0x555e335efaa8 <col:37> 'P' lvalue ParmVar 0x555e335cce70 'parser' 'P'
|         `-DeclRefExpr 0x555e335efac8 <col:45> 'Vector<T>' lvalue ParmVar 0x555e335cd030 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555e335cd628 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x555e335cd268 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335cd588 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x555e335cd320 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cd470 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555e335efd50 <col:55, line:618:5>
|     `-ReturnStmt 0x555e335efd40 <line:617:9, col:55>
|       `-CallExpr 0x555e335efd00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335efb60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335efbd0 <col:25> 'const char *' lvalue ParmVar 0x555e335cd320 'keyword' 'const char *'
|         |-IntegerLiteral 0x555e335efbf0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x555e335efcc0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555e335efce0 <col:54> 'Vector<T>' lvalue ParmVar 0x555e335cd470 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555e335cdbf8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x555e335cd690 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cd708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335cdb58 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555e335cd7c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cd848 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cd8c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555e335cda10 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555e335eff48 <col:76, line:623:5>
|     |-CallExpr 0x555e335efec8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e335efd68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x555e335efda8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x555e335efdb8 <col:34> 'const char *' lvalue ParmVar 0x555e335cd7c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x555e335efe68 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x555e335efe18 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555e335efdd8 <col:43> 'int' lvalue ParmVar 0x555e335cd848 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555e335efe50 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555e335efe30 <col:51> 'const int' lvalue Var 0x555e335c3050 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555e335efe88 <col:63> 'P' lvalue ParmVar 0x555e335cd8c0 'parser' 'P'
|     | `-DeclRefExpr 0x555e335efea8 <col:71> 'Vector<T>' lvalue ParmVar 0x555e335cda10 'x' 'Vector<T> &'
|     `-ReturnStmt 0x555e335eff38 <line:622:9, col:17>
|       `-UnaryOperator 0x555e335eff20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335eff10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335ce138 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x555e335cdc70 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cdce8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335ce098 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x555e335cdda8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cde28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cdf70 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555e335f01b0 <col:66, line:627:5>
|     `-ReturnStmt 0x555e335f01a0 <line:626:9, col:59>
|       `-CallExpr 0x555e335f0160 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555e335eff78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555e335effe8 <col:25> 'const char *' lvalue ParmVar 0x555e335cdda8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555e335f0008 <col:34> 'int' lvalue ParmVar 0x555e335cde28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x555e335f0120 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555e335f0140 <col:58> 'Vector<T>' lvalue ParmVar 0x555e335cdf70 'x' 'Vector<T> &'
|-CXXMethodDecl 0x555e335ce1c8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x555e335f0230 <col:25, line:633:5>
|   `-ReturnStmt 0x555e335f0220 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x555e335f0208 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555e335f01d8 <col:16> 'const bool' lvalue ->_status 0x555e335da018
|         `-CXXThisExpr 0x555e335f01c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555e335ce378 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x555e335ce2b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x555e335f0318 <col:27, line:639:5>
|   |-BinaryOperator 0x555e335f02c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555e335f0248 <col:9> 'bool' lvalue ParmVar 0x555e335ce2b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555e335f02a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555e335f0278 <col:13> 'bool' lvalue ->_status 0x555e335da018
|   |     `-CXXThisExpr 0x555e335f0268 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555e335f0308 <line:638:9, col:17>
|     `-UnaryOperator 0x555e335f02f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335f02e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555e335ce4f8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555e335ce438 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x555e335f0408 <col:39, line:644:5>
|   |-BinaryOperator 0x555e335f03b0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555e335f0338 <col:9> 'bool' lvalue ParmVar 0x555e335ce438 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555e335f0398 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555e335f0368 <col:13> 'const bool' lvalue ->_status 0x555e335da018
|   |     `-CXXThisExpr 0x555e335f0358 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555e335f03f8 <line:643:9, col:17>
|     `-UnaryOperator 0x555e335f03e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335f03d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555e335ce5c0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x555e335f04b0 <col:30, line:651:5>
|   `-ReturnStmt 0x555e335f04a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x555e335f0488 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555e335f0458 <col:16> 'bool' lvalue ->_read_status 0x555e335bb8d8
|         `-ImplicitCastExpr 0x555e335f0438 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x555e335f0428 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555e335ce708 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x555e335ce678 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x555e335f05b8 <col:32, line:658:5>
|   |-BinaryOperator 0x555e335f0560 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555e335f04c8 <col:9> 'bool' lvalue ParmVar 0x555e335ce678 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555e335f0548 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555e335f0518 <col:13> 'bool' lvalue ->_read_status 0x555e335bb8d8
|   |     `-ImplicitCastExpr 0x555e335f04f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555e335f04e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555e335f05a8 <line:657:9, col:17>
|     `-UnaryOperator 0x555e335f0590 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335f0580 <col:17> 'Args *' this
|-CXXMethodDecl 0x555e335ce858 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555e335ce7c8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x555e335f06c8 <col:44, line:663:5>
|   |-BinaryOperator 0x555e335f0670 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555e335f05d8 <col:9> 'bool' lvalue ParmVar 0x555e335ce7c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555e335f0658 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555e335f0628 <col:13> 'bool' lvalue ->_read_status 0x555e335bb8d8
|   |     `-ImplicitCastExpr 0x555e335f0608 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555e335f05f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555e335f06b8 <line:662:9, col:17>
|     `-UnaryOperator 0x555e335f06a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e335f0690 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555e335ce920 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x555e335ce9e8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x555e335ceab0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x555e335ceb78 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x555e335cee88 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x555e335cec18 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335cede8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x555e335cecf8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x555e335f0a20 <col:19, line:706:5>
|     `-IfStmt 0x555e335f09f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x555e335f07c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x555e335f0928 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x555e335f08f8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x555e335f08b8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x555e335f0820 <col:42> '<bound member function type>' ->simple_slot 0x555e335e9de0
|       |     | `-CXXThisExpr 0x555e335f0810 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x555e335f0870 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x555e335f0850 <col:55> 'T' lvalue ParmVar 0x555e335cecf8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x555e335f0898 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x555e335f09e8 <line:705:13, col:34>
|         `-CallExpr 0x555e335f09c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x555e335f0948 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x555e335f09a0 <col:33> 'T' lvalue ParmVar 0x555e335cecf8 'x' 'T &'
|-FunctionTemplateDecl 0x555e335cf158 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x555e335ceee8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335cf0b8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x555e335cefc8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x555e335f0e00 <col:31, line:717:5>
|     |-DeclStmt 0x555e335f0b60 <line:713:9, col:23>
|     | `-VarDecl 0x555e335f0a48 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x555e335f0b38 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555e335f0ac0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555e335f0b18 <col:21> 'T' lvalue ParmVar 0x555e335cefc8 'x' 'T &'
|     |-IfStmt 0x555e335f0db0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x555e335f0c58 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x555e335f0d90 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555e335f0d30 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555e335f0cc0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|     |   | `-DeclRefExpr 0x555e335f0ca0 <col:14> 'T *' lvalue Var 0x555e335f0a48 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x555e335f0d70 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x555e335f0de8 <line:716:9, col:16>
|       `-DeclRefExpr 0x555e335f0dc8 <col:16> 'T *' lvalue Var 0x555e335f0a48 's' 'T *'
|-FunctionTemplateDecl 0x555e335cf568 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x555e335cf1b8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335cf238 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555e335cf4c8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x555e335cf318 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x555e335cf3b8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x555e335f1110 <col:37, line:726:5>
|     |-IfStmt 0x555e335f10a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x555e335f10c0 <line:723:13, col:26>
|     | | `-VarDecl 0x555e335f0e68 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x555e335f0f58 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x555e335f0ee0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x555e335f0f38 <col:25> 'T' lvalue ParmVar 0x555e335cf318 'x' 'T &'
|     | |-DeclRefExpr 0x555e335f0f80 <col:16> 'T *' lvalue Var 0x555e335f0e68 's' 'T *'
|     | `-BinaryOperator 0x555e335f1080 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555e335f1030 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555e335f0fc0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|     |   | `-DeclRefExpr 0x555e335f0fa0 <col:14> 'T *' lvalue Var 0x555e335f0e68 's' 'T *'
|     |   `-DeclRefExpr 0x555e335f1060 <col:18> 'const V' lvalue ParmVar 0x555e335cf3b8 'value' 'const V &'
|     `-ReturnStmt 0x555e335f1100 <line:725:9, col:17>
|       `-UnaryOperator 0x555e335f10e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555e335f10d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555e335cf978 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x555e335cf5d0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555e335cf8d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x555e335cf680 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cf710 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cf7b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x555e335f1f30 <col:65, line:737:5>
|     |-DeclStmt 0x555e335f11a8 <line:732:9, col:26>
|     | `-VarDecl 0x555e335f1140 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555e335f1ef8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x555e335f1f18 <line:733:13, col:58>
|       | `-VarDecl 0x555e335f11d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555e335f13b0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555e335f1380 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555e335f1368 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555e335f1348 <col:26, col:58> 'String' (CXXTemporary 0x555e335f1348)
|       |           `-CXXMemberCallExpr 0x555e335f12d8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555e335f1248 <col:26> '<bound member function type>' ->find 0x555e335e93f8
|       |             | `-CXXThisExpr 0x555e335f1238 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555e335f1310 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f1278 <col:31> 'const char *' lvalue ParmVar 0x555e335cf680 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555e335f1328 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f1298 <col:40> 'int' lvalue ParmVar 0x555e335cf710 'flags' 'int'
|       |             `-DeclRefExpr 0x555e335f12b8 <col:47> 'Args::Slot *' lvalue Var 0x555e335f1140 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555e335f1468 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555e335f1450 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555e335f1430 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555e335f1400 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |       `-ImplicitCastExpr 0x555e335f13e8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555e335f13c8 <col:20> 'String' lvalue Var 0x555e335f11d0 'str' 'String'
|       `-CompoundStmt 0x555e335f1ed8 <col:61, line:736:9>
|         |-DeclStmt 0x555e335f1920 <line:734:13, col:76>
|         | `-VarDecl 0x555e335f14b8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555e335f18f0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555e335f1860 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555e335f18a8 <col:60> 'T' lvalue ParmVar 0x555e335cf7b8 'variable' 'T &'
|         |     `-UnaryOperator 0x555e335f18d8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555e335f18c8 <col:71> 'Args *' this
|         `-CallExpr 0x555e335f1ea8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x555e335f1948 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|           | `-CXXThisExpr 0x555e335f1938 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555e335f1e68 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555e335f1978 <col:23> 'T *' lvalue Var 0x555e335f14b8 's' 'T *'
|           | `-CallExpr 0x555e335f1e28 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555e335f1c00 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x555e335f1d00 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x555e335f1d20 <col:86> 'String' lvalue Var 0x555e335f11d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555e335f1dd0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555e335f1d60 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|           |   | `-DeclRefExpr 0x555e335f1d40 <col:92> 'T *' lvalue Var 0x555e335f14b8 's' 'T *'
|           |   `-UnaryOperator 0x555e335f1e10 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555e335f1e00 <col:96> 'Args *' this
|           `-DeclRefExpr 0x555e335f1e88 <col:103> 'Args::Slot *' lvalue Var 0x555e335f1140 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335cfec8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555e335cf9e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335cfa68 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555e335cfe28 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555e335cfb28 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335cfba8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555e335cfc48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x555e335cfce8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x555e335f51f0 <col:88, line:745:5>
|     |-DeclStmt 0x555e335f1fc8 <line:741:9, col:26>
|     | `-VarDecl 0x555e335f1f60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555e335f21e8 <line:742:9, col:55>
|     | `-VarDecl 0x555e335f1ff0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555e335f21d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555e335f21a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555e335f2188 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555e335f2168 <col:22, col:54> 'String' (CXXTemporary 0x555e335f2168)
|     |           `-CXXMemberCallExpr 0x555e335f20f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555e335f2068 <col:22> '<bound member function type>' ->find 0x555e335e93f8
|     |             | `-CXXThisExpr 0x555e335f2058 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555e335f2130 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555e335f2098 <col:27> 'const char *' lvalue ParmVar 0x555e335cfb28 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555e335f2148 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555e335f20b8 <col:36> 'int' lvalue ParmVar 0x555e335cfba8 'flags' 'int'
|     |             `-DeclRefExpr 0x555e335f20d8 <col:43> 'Args::Slot *' lvalue Var 0x555e335f1f60 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555e335f25c0 <line:743:9, col:72>
|     | `-VarDecl 0x555e335f2238 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555e335f2590 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555e335f2500 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555e335f2548 <col:56> 'T' lvalue ParmVar 0x555e335cfc48 'variable' 'T &'
|     |     `-UnaryOperator 0x555e335f2578 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555e335f2568 <col:67> 'Args *' this
|     `-CallExpr 0x555e335f51c0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x555e335f25e8 <col:9> '<bound member function type>' ->postparse 0x555e335e9608
|       | `-CXXThisExpr 0x555e335f25d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555e335f5180 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555e335f2618 <col:19> 'T *' lvalue Var 0x555e335f2238 's' 'T *'
|       | `-ParenExpr 0x555e335f5160 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x555e335f5130 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555e335f5118 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555e335f5100 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555e335f50e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555e335f50b0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |     |       `-ImplicitCastExpr 0x555e335f5098 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555e335f2638 <col:25> 'String' lvalue Var 0x555e335f1ff0 'str' 'String'
|       |     |-CallExpr 0x555e335f4f08 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555e335f28c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x555e335f4de0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x555e335f4e00 <col:89> 'String' lvalue Var 0x555e335f1ff0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555e335f4eb0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555e335f4e40 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|       |     | | `-DeclRefExpr 0x555e335f4e20 <col:95> 'T *' lvalue Var 0x555e335f2238 's' 'T *'
|       |     | `-UnaryOperator 0x555e335f4ef0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555e335f4ee0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x555e335f5078 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x555e335f5058 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x555e335f5028 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555e335f4fd8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555e335f4f68 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|       |         | | `-DeclRefExpr 0x555e335f4f48 <col:109> 'T *' lvalue Var 0x555e335f2238 's' 'T *'
|       |         | `-DeclRefExpr 0x555e335f5008 <col:113> 'const V' lvalue ParmVar 0x555e335cfce8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555e335f5048 <col:120> 'bool' true
|       `-DeclRefExpr 0x555e335f51a0 <col:128> 'Args::Slot *' lvalue Var 0x555e335f1f60 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335d03f8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x555e335cff40 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335cffb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335d0358 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555e335d0078 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d00f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d0170 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555e335d0218 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x555e335f5de8 <col:75, line:754:5>
|     |-DeclStmt 0x555e335f5298 <line:749:9, col:26>
|     | `-VarDecl 0x555e335f5230 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555e335f5db0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x555e335f5dd0 <line:750:13, col:58>
|       | `-VarDecl 0x555e335f52c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555e335f54a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555e335f5470 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555e335f5458 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555e335f5438 <col:26, col:58> 'String' (CXXTemporary 0x555e335f5438)
|       |           `-CXXMemberCallExpr 0x555e335f53c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555e335f5338 <col:26> '<bound member function type>' ->find 0x555e335e93f8
|       |             | `-CXXThisExpr 0x555e335f5328 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555e335f5400 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f5368 <col:31> 'const char *' lvalue ParmVar 0x555e335d0078 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555e335f5418 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f5388 <col:40> 'int' lvalue ParmVar 0x555e335d00f8 'flags' 'int'
|       |             `-DeclRefExpr 0x555e335f53a8 <col:47> 'Args::Slot *' lvalue Var 0x555e335f5230 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555e335f5558 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555e335f5540 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555e335f5520 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555e335f54f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |       `-ImplicitCastExpr 0x555e335f54d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555e335f54b8 <col:20> 'String' lvalue Var 0x555e335f52c0 'str' 'String'
|       `-CompoundStmt 0x555e335f5d90 <col:61, line:753:9>
|         |-DeclStmt 0x555e335f5930 <line:751:13, col:63>
|         | `-VarDecl 0x555e335f55a8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555e335f5900 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555e335f5870 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555e335f58b8 <col:47> 'T' lvalue ParmVar 0x555e335d0218 'variable' 'T &'
|         |     `-UnaryOperator 0x555e335f58e8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555e335f58d8 <col:58> 'Args *' this
|         `-CallExpr 0x555e335f5d60 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x555e335f5958 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|           | `-CXXThisExpr 0x555e335f5948 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555e335f5d20 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555e335f5988 <col:23> 'T *' lvalue Var 0x555e335f55a8 's' 'T *'
|           | `-CallExpr 0x555e335f5ce0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555e335f5b70 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555e335f5bb8 <col:56> 'P' lvalue ParmVar 0x555e335d0170 'parser' 'P'
|           |   |-DeclRefExpr 0x555e335f5bd8 <col:64> 'String' lvalue Var 0x555e335f52c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555e335f5c88 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555e335f5c18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|           |   | `-DeclRefExpr 0x555e335f5bf8 <col:70> 'T *' lvalue Var 0x555e335f55a8 's' 'T *'
|           |   `-UnaryOperator 0x555e335f5cc8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555e335f5cb8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x555e335f5d40 <col:81> 'Args::Slot *' lvalue Var 0x555e335f5230 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335d0a58 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555e335d0470 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555e335d04e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x555e335d0568 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555e335d09b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555e335d0630 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d06b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d0728 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x555e335d07c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x555e335d0868 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x555e335f6b78 <col:98, line:762:5>
|     |-DeclStmt 0x555e335f5e80 <line:758:9, col:26>
|     | `-VarDecl 0x555e335f5e18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555e335f60a0 <line:759:9, col:55>
|     | `-VarDecl 0x555e335f5ea8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555e335f6088 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555e335f6058 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555e335f6040 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555e335f6020 <col:22, col:54> 'String' (CXXTemporary 0x555e335f6020)
|     |           `-CXXMemberCallExpr 0x555e335f5fb0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555e335f5f20 <col:22> '<bound member function type>' ->find 0x555e335e93f8
|     |             | `-CXXThisExpr 0x555e335f5f10 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555e335f5fe8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555e335f5f50 <col:27> 'const char *' lvalue ParmVar 0x555e335d0630 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555e335f6000 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555e335f5f70 <col:36> 'int' lvalue ParmVar 0x555e335d06b0 'flags' 'int'
|     |             `-DeclRefExpr 0x555e335f5f90 <col:43> 'Args::Slot *' lvalue Var 0x555e335f5e18 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555e335f64c0 <line:760:9, col:59>
|     | `-VarDecl 0x555e335f60f8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555e335f6490 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555e335f6400 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555e335f6448 <col:43> 'T' lvalue ParmVar 0x555e335d07c8 'variable' 'T &'
|     |     `-UnaryOperator 0x555e335f6478 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555e335f6468 <col:54> 'Args *' this
|     `-CallExpr 0x555e335f6b48 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x555e335f64e8 <col:9> '<bound member function type>' ->postparse 0x555e335e9608
|       | `-CXXThisExpr 0x555e335f64d8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555e335f6b08 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555e335f6518 <col:19> 'T *' lvalue Var 0x555e335f60f8 's' 'T *'
|       | `-ParenExpr 0x555e335f6ae8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x555e335f6ab8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555e335f6aa0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555e335f6a88 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555e335f6a68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555e335f6a38 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |     |       `-ImplicitCastExpr 0x555e335f6a20 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555e335f6538 <col:25> 'String' lvalue Var 0x555e335f5ea8 'str' 'String'
|       |     |-CallExpr 0x555e335f6890 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555e335f6720 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x555e335f6768 <col:59> 'P' lvalue ParmVar 0x555e335d0728 'parser' 'P'
|       |     | |-DeclRefExpr 0x555e335f6788 <col:67> 'String' lvalue Var 0x555e335f5ea8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555e335f6838 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555e335f67c8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|       |     | | `-DeclRefExpr 0x555e335f67a8 <col:73> 'T *' lvalue Var 0x555e335f60f8 's' 'T *'
|       |     | `-UnaryOperator 0x555e335f6878 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555e335f6868 <col:77> 'Args *' this
|       |     `-ParenExpr 0x555e335f6a00 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x555e335f69e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x555e335f69b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555e335f6960 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555e335f68f0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|       |         | | `-DeclRefExpr 0x555e335f68d0 <col:87> 'T *' lvalue Var 0x555e335f60f8 's' 'T *'
|       |         | `-DeclRefExpr 0x555e335f6990 <col:91> 'const V' lvalue ParmVar 0x555e335d0868 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555e335f69d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x555e335f6b28 <col:106> 'Args::Slot *' lvalue Var 0x555e335f5e18 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335d10c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x555e335d0ad8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335d0b58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555e335d0bd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555e335d1028 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555e335d0ca0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d0d20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d0d98 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x555e335d0e38 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x555e335d0ed8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x555e335f7b58 <col:60, line:773:5>
|     |-DeclStmt 0x555e335f6c20 <line:767:9, col:26>
|     | `-VarDecl 0x555e335f6bb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555e335f7b20 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x555e335f7b40 <line:768:13, col:58>
|       | `-VarDecl 0x555e335f6c48 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555e335f6e28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555e335f6df8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555e335f6de0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555e335f6dc0 <col:26, col:58> 'String' (CXXTemporary 0x555e335f6dc0)
|       |           `-CXXMemberCallExpr 0x555e335f6d50 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555e335f6cc0 <col:26> '<bound member function type>' ->find 0x555e335e93f8
|       |             | `-CXXThisExpr 0x555e335f6cb0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555e335f6d88 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f6cf0 <col:31> 'const char *' lvalue ParmVar 0x555e335d0ca0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555e335f6da0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f6d10 <col:40> 'int' lvalue ParmVar 0x555e335d0d20 'flags' 'int'
|       |             `-DeclRefExpr 0x555e335f6d30 <col:47> 'Args::Slot *' lvalue Var 0x555e335f6bb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555e335f6ee0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555e335f6ec8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555e335f6ea8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555e335f6e78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |       `-ImplicitCastExpr 0x555e335f6e60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555e335f6e40 <col:20> 'String' lvalue Var 0x555e335f6c48 'str' 'String'
|       `-CompoundStmt 0x555e335f7af8 <col:61, line:772:9>
|         |-DeclStmt 0x555e335f7220 <line:769:13, col:66>
|         | `-VarDecl 0x555e335f6f38 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x555e335f71f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555e335f7160 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555e335f71a8 <col:49> 'T1' lvalue ParmVar 0x555e335d0e38 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x555e335f71d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555e335f71c8 <col:61> 'Args *' this
|         |-DeclStmt 0x555e335f7590 <line:770:13, col:66>
|         | `-VarDecl 0x555e335f72a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x555e335f7560 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555e335f74d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555e335f7518 <col:49> 'T2' lvalue ParmVar 0x555e335d0ed8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x555e335f7548 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555e335f7538 <col:61> 'Args *' this
|         `-CallExpr 0x555e335f7ac8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x555e335f75b8 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|           | `-CXXThisExpr 0x555e335f75a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555e335f7a88 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x555e335f7628 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x555e335f75e8 <col:23> 'T1 *' lvalue Var 0x555e335f6f38 's1' 'T1 *'
|           | | `-DeclRefExpr 0x555e335f7608 <col:29> 'T2 *' lvalue Var 0x555e335f72a8 's2' 'T2 *'
|           | `-CallExpr 0x555e335f7a40 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555e335f7810 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555e335f7858 <col:63> 'P' lvalue ParmVar 0x555e335d0d98 'parser' 'P'
|           |   |-DeclRefExpr 0x555e335f7878 <col:71> 'String' lvalue Var 0x555e335f6c48 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555e335f7928 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555e335f78b8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|           |   | `-DeclRefExpr 0x555e335f7898 <col:77> 'T1 *' lvalue Var 0x555e335f6f38 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x555e335f79e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555e335f7978 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|           |   | `-DeclRefExpr 0x555e335f7958 <col:82> 'T2 *' lvalue Var 0x555e335f72a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x555e335f7a28 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555e335f7a18 <col:87> 'Args *' this
|           `-DeclRefExpr 0x555e335f7aa8 <col:94> 'Args::Slot *' lvalue Var 0x555e335f6bb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335d14b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x555e335d1148 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335d1418 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555e335d1200 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d1280 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d12f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555e335f8070 <col:67, line:780:5>
|     |-DeclStmt 0x555e335f7bf0 <line:777:9, col:26>
|     | `-VarDecl 0x555e335f7b88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555e335f8038 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x555e335f8058 <line:778:13, col:58>
|       | `-VarDecl 0x555e335f7c18 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555e335f7df8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555e335f7dc8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555e335f7db0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555e335f7d90 <col:26, col:58> 'String' (CXXTemporary 0x555e335f7d90)
|       |           `-CXXMemberCallExpr 0x555e335f7d20 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555e335f7c90 <col:26> '<bound member function type>' ->find 0x555e335e93f8
|       |             | `-CXXThisExpr 0x555e335f7c80 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555e335f7d58 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f7cc0 <col:31> 'const char *' lvalue ParmVar 0x555e335d1200 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555e335f7d70 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555e335f7ce0 <col:40> 'int' lvalue ParmVar 0x555e335d1280 'flags' 'int'
|       |             `-DeclRefExpr 0x555e335f7d00 <col:47> 'Args::Slot *' lvalue Var 0x555e335f7b88 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555e335f7eb0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555e335f7e98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555e335f7e78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555e335f7e48 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|       |       `-ImplicitCastExpr 0x555e335f7e30 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555e335f7e10 <col:20> 'String' lvalue Var 0x555e335f7c18 'str' 'String'
|       `-CallExpr 0x555e335f8008 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x555e335f7ed8 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|         | `-CXXThisExpr 0x555e335f7ec8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x555e335f7fb8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x555e335f7f28 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x555e335f7f08 <col:23> 'P' lvalue ParmVar 0x555e335d12f8 'parser' 'P'
|         | |-DeclRefExpr 0x555e335f7f70 <col:36> 'String' lvalue Var 0x555e335f7c18 'str' 'String'
|         | `-UnaryOperator 0x555e335f7fa0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x555e335f7f90 <col:42> 'Args *' this
|         `-DeclRefExpr 0x555e335f7fe8 <col:49> 'Args::Slot *' lvalue Var 0x555e335f7b88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555e335d1858 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555e335d1528 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555e335d17b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555e335d15e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d1660 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d16d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x555e335f89e0 <col:71, line:792:5>
|     |-DeclStmt 0x555e335f8108 <line:784:9, col:26>
|     | `-VarDecl 0x555e335f80a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555e335f81d8 <line:785:9, col:29>
|     | `-VarDecl 0x555e335f8138 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555e335f81c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555e335f81a0 <col:28> 'int' 1
|     |-WhileStmt 0x555e335f8890 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x555e335f88b0 <line:786:16, col:61>
|     | | `-VarDecl 0x555e335f8200 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555e335f83e0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555e335f83b0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555e335f8398 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555e335f8378 <col:29, col:61> 'String' (CXXTemporary 0x555e335f8378)
|     | |           `-CXXMemberCallExpr 0x555e335f8308 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555e335f8278 <col:29> '<bound member function type>' ->find 0x555e335e93f8
|     | |             | `-CXXThisExpr 0x555e335f8268 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555e335f8340 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335f82a8 <col:34> 'const char *' lvalue ParmVar 0x555e335d15e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555e335f8358 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335f82c8 <col:43> 'int' lvalue ParmVar 0x555e335d1660 'flags' 'int'
|     | |             `-DeclRefExpr 0x555e335f82e8 <col:50> 'Args::Slot *' lvalue Var 0x555e335f80a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555e335f8498 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555e335f8480 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555e335f8460 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555e335f8430 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|     | |       `-ImplicitCastExpr 0x555e335f8418 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555e335f83f8 <col:23> 'String' lvalue Var 0x555e335f8200 'str' 'String'
|     | `-CompoundStmt 0x555e335f8868 <col:64, line:790:9>
|     |   |-CallExpr 0x555e335f85f0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x555e335f84c0 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|     |   | | `-CXXThisExpr 0x555e335f84b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555e335f85a0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555e335f8510 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555e335f84f0 <col:23> 'P' lvalue ParmVar 0x555e335d16d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555e335f8558 <col:36> 'String' lvalue Var 0x555e335f8200 'str' 'String'
|     |   | | `-UnaryOperator 0x555e335f8588 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555e335f8578 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x555e335f85d0 <col:49> 'Args::Slot *' lvalue Var 0x555e335f80a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555e335f8788 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555e335f8620 <col:13> 'int' lvalue Var 0x555e335f8138 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555e335f8770 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555e335f8750 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555e335f86b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555e335f8698 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555e335f8680 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555e335f8640 <col:28> 'int' lvalue Var 0x555e335f8138 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555e335f8660 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555e335f8738 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555e335f8708 <col:49> 'bool' lvalue ->_read_status 0x555e335bb8d8
|     |   |         `-ImplicitCastExpr 0x555e335f86e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555e335f86d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555e335f8838 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555e335f87a8 <col:13> 'int' lvalue ParmVar 0x555e335d1660 'flags' 'int'
|     |     `-UnaryOperator 0x555e335f8820 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555e335f8808 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555e335f87e8 <col:23> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555e335f89c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555e335f88f8 <col:9> 'bool' lvalue ->_read_status 0x555e335bb8d8
|       | `-ImplicitCastExpr 0x555e335f88d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555e335f88c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555e335f89a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555e335f8980 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555e335f8968 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555e335f8928 <col:25> 'int' lvalue Var 0x555e335f8138 'read_status' 'int'
|           `-IntegerLiteral 0x555e335f8948 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555e335d1d38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555e335d18c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335d1948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335d1c98 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555e335d1a08 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d1a88 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d1b00 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x555e335d1ba8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x555e335fb5f0 <col:84, line:805:5>
|     |-DeclStmt 0x555e335f8a88 <line:796:9, col:26>
|     | `-VarDecl 0x555e335f8a20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555e335f8b58 <line:797:9, col:29>
|     | `-VarDecl 0x555e335f8ab8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555e335f8b40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555e335f8b20 <col:28> 'int' 1
|     |-DeclStmt 0x555e335fab10 <line:798:9, col:71>
|     | `-VarDecl 0x555e335f8ba8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555e335faae0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555e335faa50 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x555e335faa98 <col:55> 'T' lvalue ParmVar 0x555e335d1ba8 'variable' 'T &'
|     |     `-UnaryOperator 0x555e335faac8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555e335faab8 <col:66> 'Args *' this
|     |-WhileStmt 0x555e335fb4a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x555e335fb4c0 <line:799:16, col:61>
|     | | `-VarDecl 0x555e335fab38 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555e335fad18 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555e335face8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555e335facd0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555e335facb0 <col:29, col:61> 'String' (CXXTemporary 0x555e335facb0)
|     | |           `-CXXMemberCallExpr 0x555e335fac40 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555e335fabb0 <col:29> '<bound member function type>' ->find 0x555e335e93f8
|     | |             | `-CXXThisExpr 0x555e335faba0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555e335fac78 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335fabe0 <col:34> 'const char *' lvalue ParmVar 0x555e335d1a08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555e335fac90 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335fac00 <col:43> 'int' lvalue ParmVar 0x555e335d1a88 'flags' 'int'
|     | |             `-DeclRefExpr 0x555e335fac20 <col:50> 'Args::Slot *' lvalue Var 0x555e335f8a20 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555e335fadd0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555e335fadb8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555e335fad98 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555e335fad68 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|     | |       `-ImplicitCastExpr 0x555e335fad50 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555e335fad30 <col:23> 'String' lvalue Var 0x555e335fab38 'str' 'String'
|     | `-CompoundStmt 0x555e335fb478 <col:64, line:803:9>
|     |   |-CallExpr 0x555e335fb200 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x555e335fadf8 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|     |   | | `-CXXThisExpr 0x555e335fade8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x555e335fb1c0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x555e335fae28 <col:23> 'T *' lvalue Var 0x555e335f8ba8 's' 'T *'
|     |   | | `-CallExpr 0x555e335fb180 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x555e335fb010 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x555e335fb058 <col:56> 'P' lvalue ParmVar 0x555e335d1b00 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x555e335fb078 <col:64> 'String' lvalue Var 0x555e335fab38 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x555e335fb128 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x555e335fb0b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|     |   | |   | `-DeclRefExpr 0x555e335fb098 <col:70> 'T *' lvalue Var 0x555e335f8ba8 's' 'T *'
|     |   | |   `-UnaryOperator 0x555e335fb168 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x555e335fb158 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x555e335fb1e0 <col:81> 'Args::Slot *' lvalue Var 0x555e335f8a20 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555e335fb398 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555e335fb230 <col:13> 'int' lvalue Var 0x555e335f8ab8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555e335fb380 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555e335fb360 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555e335fb2c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555e335fb2a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555e335fb290 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555e335fb250 <col:28> 'int' lvalue Var 0x555e335f8ab8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555e335fb270 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555e335fb348 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555e335fb318 <col:49> 'bool' lvalue ->_read_status 0x555e335bb8d8
|     |   |         `-ImplicitCastExpr 0x555e335fb2f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555e335fb2e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555e335fb448 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555e335fb3b8 <col:13> 'int' lvalue ParmVar 0x555e335d1a88 'flags' 'int'
|     |     `-UnaryOperator 0x555e335fb430 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555e335fb418 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555e335fb3f8 <col:23> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555e335fb5d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555e335fb508 <col:9> 'bool' lvalue ->_read_status 0x555e335bb8d8
|       | `-ImplicitCastExpr 0x555e335fb4e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555e335fb4d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555e335fb5b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555e335fb590 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555e335fb578 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555e335fb538 <col:25> 'int' lvalue Var 0x555e335f8ab8 'read_status' 'int'
|           `-IntegerLiteral 0x555e335fb558 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555e335d2318 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x555e335d1db0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555e335d1e28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555e335d2278 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555e335d1ee8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555e335d1f68 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x555e335d1fe0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x555e335d2130 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x555e335fc3f8 <col:87, line:821:5>
|     |-DeclStmt 0x555e335fb6a0 <line:809:9, col:26>
|     | `-VarDecl 0x555e335fb638 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555e335fb770 <line:810:9, col:29>
|     | `-VarDecl 0x555e335fb6d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555e335fb758 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555e335fb738 <col:28> 'int' 1
|     |-DeclStmt 0x555e335fb9b8 <line:811:9, col:38>
|     | `-VarDecl 0x555e335fb8a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x555e335fb990 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555e335fb918 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555e335fb970 <col:29> 'Vector<T>' lvalue ParmVar 0x555e335d2130 'variable' 'Vector<T> &'
|     |-WhileStmt 0x555e335fc2a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x555e335fc2c8 <line:812:16, col:61>
|     | | `-VarDecl 0x555e335fb9e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555e335fbbc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555e335fbb90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555e335fbb78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555e335fbb58 <col:29, col:61> 'String' (CXXTemporary 0x555e335fbb58)
|     | |           `-CXXMemberCallExpr 0x555e335fbae8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555e335fba58 <col:29> '<bound member function type>' ->find 0x555e335e93f8
|     | |             | `-CXXThisExpr 0x555e335fba48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555e335fbb20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335fba88 <col:34> 'const char *' lvalue ParmVar 0x555e335d1ee8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555e335fbb38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555e335fbaa8 <col:43> 'int' lvalue ParmVar 0x555e335d1f68 'flags' 'int'
|     | |             `-DeclRefExpr 0x555e335fbac8 <col:50> 'Args::Slot *' lvalue Var 0x555e335fb638 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555e335fbc78 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555e335fbc60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555e335fbc40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555e335fbc10 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555e333a0188
|     | |       `-ImplicitCastExpr 0x555e335fbbf8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555e335fbbd8 <col:23> 'String' lvalue Var 0x555e335fb9e0 'str' 'String'
|     | `-CompoundStmt 0x555e335fc270 <col:64, line:819:9>
|     |   |-DeclStmt 0x555e335fbd38 <line:813:13, col:23>
|     |   | `-VarDecl 0x555e335fbca0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x555e335fbd18 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x555e335fbeb8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x555e335fbd60 <col:13> '<bound member function type>' ->postparse 0x555e335e9608
|     |   | | `-CXXThisExpr 0x555e335fbd50 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555e335fbe60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555e335fbdb0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555e335fbd90 <col:23> 'P' lvalue ParmVar 0x555e335d1fe0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555e335fbdf8 <col:36> 'String' lvalue Var 0x555e335fb9e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x555e335fbe18 <col:41> 'T' lvalue Var 0x555e335fbca0 'sx' 'T'
|     |   | | `-UnaryOperator 0x555e335fbe48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555e335fbe38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x555e335fbe98 <col:53> 'Args::Slot *' lvalue Var 0x555e335fb638 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x555e335fc010 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x555e335fbf48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x555e335fbf18 <col:17> 'bool' lvalue ->_read_status 0x555e335bb8d8
|     |   | |   `-ImplicitCastExpr 0x555e335fbef8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x555e335fbee8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x555e335fbfe8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x555e335fbf80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x555e335fbf60 <col:17> 'Vector<T> *' lvalue Var 0x555e335fb8a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x555e335fbfc8 <col:30> 'T' lvalue Var 0x555e335fbca0 'sx' 'T'
|     |   |-BinaryOperator 0x555e335fc190 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555e335fc028 <col:13> 'int' lvalue Var 0x555e335fb6d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555e335fc178 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555e335fc158 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555e335fc0c0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555e335fc0a0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555e335fc088 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555e335fc048 <col:28> 'int' lvalue Var 0x555e335fb6d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555e335fc068 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555e335fc140 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555e335fc110 <col:49> 'bool' lvalue ->_read_status 0x555e335bb8d8
|     |   |         `-ImplicitCastExpr 0x555e335fc0f0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555e335fc0e0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555e335fc240 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555e335fc1b0 <col:13> 'int' lvalue ParmVar 0x555e335d1f68 'flags' 'int'
|     |     `-UnaryOperator 0x555e335fc228 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555e335fc210 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555e335fc1f0 <col:23> 'const int' lvalue Var 0x555e335c2d68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555e335fc3d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555e335fc310 <col:9> 'bool' lvalue ->_read_status 0x555e335bb8d8
|       | `-ImplicitCastExpr 0x555e335fc2f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555e335fc2e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555e335fc3b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555e335fc398 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555e335fc380 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555e335fc340 <col:25> 'int' lvalue Var 0x555e335fb6d0 'read_status' 'int'
|           `-IntegerLiteral 0x555e335fc360 <col:40> 'int' 1
|-AccessSpecDecl 0x555e335d2390 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x555e335d23b8 prev 0x555e335c1068 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x555e335d24b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x555e335d25a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x555e335fc430 <col:16, line:828:9>
| |-CXXDestructorDecl 0x555e335d2690 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x555e335fc440 <col:25, line:830:9>
| |-CXXMethodDecl 0x555e335d2790 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x555e335d2840 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x555e335d28e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555e335d28e8
| | `-ParmVarDecl 0x555e335d29f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x555e335d31b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555e335d31b8
|   `-ParmVarDecl 0x555e335d32c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x555e335d2a68 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x555e335d2bc8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x555e335d2dc0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x555e335d2c70 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x555e335d2ce8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x555e335fc650 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x555e335d3078 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x555e335fc490 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555e335fc450 <col:20> 'void *' lvalue ParmVar 0x555e335d2c70 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x555e335d30e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x555e335fc548 <col:32, col:45> 'char *' array Function 0x555e331c3c58 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x555e335fc500 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x555e335fc4d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x555e335d2ce8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x555e335d3140 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x555e335fc610 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x555e335fc5d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x555e335d2ce8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x555e335fc6d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x555e335d2ec0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x555e335d2690 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x555e335fc758 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x555e335fc738 <line:840:13, col:22> 'void' array Function 0x555e331c3fb8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x555e335fc720 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x555e335fc6f0 <col:22> 'char *' lvalue ->_slot 0x555e335d30e0
| |         `-CXXThisExpr 0x555e335fc6e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x555e335d2fc0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x555e335d2790 Slot::store 'void ()' ]
| | `-CompoundStmt 0x555e335fc948 <col:22, line:844:9>
| |   `-CallExpr 0x555e335fc8b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x555e335fc898 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555e335fc878 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x555e332fc148 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x555e335fc8e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x555e335fc7c8 <col:20> 'void *' lvalue ->_ptr 0x555e335d3078
| |     |   `-CXXThisExpr 0x555e335fc7b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x555e335fc918 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x555e335fc900 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x555e335fc808 <col:26> 'char *' lvalue ->_slot 0x555e335d30e0
| |     |     `-CXXThisExpr 0x555e335fc7f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x555e335fc930 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x555e335fc848 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x555e335d3140
| |         `-CXXThisExpr 0x555e335fc838 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x555e335d3078 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x555e335d30e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x555e335d3140 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x555e335d3338 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555e335d3338
| | `-ParmVarDecl 0x555e335d3448 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x555e335d34e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555e335d34e8
|   `-ParmVarDecl 0x555e335d35f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x555e335d9770 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x555e335d3668 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x555e335d96e0 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x555e335d9a00 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x555e335d9bf8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x555e335d9ac8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x555e335d9d78 '_ptr' 'T *'
|   | | `-ParenListExpr 0x555e335fc980 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x555e335fc960 <col:20> 'T *' lvalue ParmVar 0x555e335d9ac8 'ptr' 'T *'
|   | `-CompoundStmt 0x555e335fc9d0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x555e335d9cc8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x555e335d2790 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x555e335fcb80 <col:22, line:857:9>
|   |   `-CallExpr 0x555e335fcb50 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x555e335fc9e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x555e33388378 0x555e332b18a8
|   |     |-CXXOperatorCallExpr 0x555e335fcae0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x555e335fca70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555e33474338 0x555e33473f58 0x555e33473b88 0x555e334737a8 0x555e334733c8 0x555e33472ff8
|   |     | `-MemberExpr 0x555e335fca40 <col:29> 'T *' lvalue ->_ptr 0x555e335d9d78
|   |     |   `-CXXThisExpr 0x555e335fca30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x555e335fcb20 <col:35> 'T' lvalue ->_slot 0x555e335d9dd8
|   |       `-CXXThisExpr 0x555e335fcb10 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x555e335d9d78 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x555e335d9dd8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x555e335d9e40 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x555e335d9f40 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x555e335d9f90 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e335d9f20 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x555e335d9f00 <col:31> 'int' 48
|-FieldDecl 0x555e335d9fb8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x555e335da018 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x555e335da078 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x555e335da1b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x555e335e8630 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x555e335e8690 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x555e335e87b8 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x555e335e89e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x555e335e88f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x555e335e8b38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x555e335e8aa8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x555e335e93f8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x555e335e8bf8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x555e335e8c78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x555e335e9310 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x555e335e9608 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x555e335e94c0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x555e335e9538 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x555e335e96d8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x555e335e9828 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x555e335e9790 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x555e335e9bb8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x555e335e98e8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x555e335e9968 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x555e335e9a10 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x555e335e9ac8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x555e335e9de0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x555e335e9c90 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x555e335e9d08 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x555e335ea0f8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x555e335e9e90 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x555e335ea058 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x555e335e9f68 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e3361c688 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e3361c7a8 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x555e3361c838 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x555e3361ca30 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x555e3361c870 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x555e3361c8e8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x555e3361c960 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x555e3361cb00 <col:79> 'const ArgContext' lvalue Var 0x555e335fcba8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x555e3361cc78 <col:91, line:1372:5>
|   `-ReturnStmt 0x555e3361cc68 <line:1371:9, col:39>
|     `-CallExpr 0x555e3361cc18 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x555e3361cc00 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555e3361cbe0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x555e3361c5d0 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x555e3361cb68 <col:24> 'const String' lvalue ParmVar 0x555e3361c870 'str' 'const String &'
|       |-UnaryOperator 0x555e3361cba8 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x555e3361cb88 <col:30> 'String' lvalue ParmVar 0x555e3361c8e8 'result' 'String &'
|       `-ImplicitCastExpr 0x555e3361cc50 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x555e3361cbc0 <col:38> 'int' 0
|-CXXConstructorDecl 0x555e336d4cc0 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555e336d4dc8 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x555e336d4dc8
| `-ParmVarDecl 0x555e336d4ed8 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x555e336d4f78 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555e336d5088 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x555e336d57b0 <col:7>
`-CXXDestructorDecl 0x555e336d5128 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class BoundedIntArg
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
         8 |   click_intmax_t min_value
        16 |   click_intmax_t max_value
        24 |   _Bool is_signed
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33605260 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e33605378 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x555e33605408 <col:16, col:22> col:16 public
|-EnumDecl 0x555e33605430 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x555e33605530 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555e33605780 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33605510 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555e336054f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x555e336055c0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555e33605798 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336055a0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x555e33605580 <col:24> 'int' 22
| |-EnumConstantDecl 0x555e33605650 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555e336057b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33605630 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x555e33605610 <col:24> 'int' 34
| |-EnumConstantDecl 0x555e336056e0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555e336057c8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336056c0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x555e336056a0 <col:25> 'int' 95
| `-EnumConstantDecl 0x555e33605730 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x555e33607140 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555e33607578 <col:7>
|-CXXConstructorDecl 0x555e33607248 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x555e33607248
| `-ParmVarDecl 0x555e33607358 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x555e336073f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555e33607508 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x555e336e3ff0 <col:7>
`-CXXDestructorDecl 0x555e33609668 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336057f8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x555e33605958 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x555e336059e8 <col:32, col:38> col:32 public
|-TypedefDecl 0x555e33605a20 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x555e331c5fb0 'uint32_t' sugar
|   |-Typedef 0x555e330d9408 'uint32_t'
|   `-TypedefType 0x555e330b2440 '__uint32_t' sugar
|     |-Typedef 0x555e330b2038 '__uint32_t'
|     `-BuiltinType 0x555e33070410 'unsigned int'
|-CXXConstructorDecl 0x555e33605b68 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x555e33605a90 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x555e33607048 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555e33607588 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555e33606900 'base' 'int'
| | `-ImplicitCastExpr 0x555e336070e8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x555e336070a8 <col:16> 'int' lvalue ParmVar 0x555e33605a90 'b' 'int'
| `-CompoundStmt 0x555e336075f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x555e33606060 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x555e33605c30 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x555e33605cb0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x555e33605d28 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x555e33605da8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x555e33605e68 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x555e33605ee8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x555e336064b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x555e33606130 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x555e33606418 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x555e336061d8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x555e33606278 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x555e336062f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x555e33607068 <col:82> 'const ArgContext' lvalue Var 0x555e335fcba8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x555e33608518 <col:94, line:1067:5>
|     |-DeclStmt 0x555e33607788 <line:1054:9, col:64>
|     | `-VarDecl 0x555e33607618 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x555e33607740 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x555e336079a8 <line:1055:9, col:91>
|     | `-VarDecl 0x555e336077b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x555e33607980 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x555e33607960 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x555e33607910 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x555e336078f0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x555e33607898 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x555e33607848 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x555e33607878 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x555e336078d8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x555e336078b8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x555e33607940 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x555e33607b08 <line:1056:9, col:27>
|     | `-VarDecl 0x555e33607aa0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x555e33607f40 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x555e33607e70 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x555e33607e00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555e3340d190 0x555e333cb280 0x555e333caf30 0x555e333ca820 0x555e3339baa0 0x555e33357da0
|     | | |-CallExpr 0x555e33607d40 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x555e33607b30 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x555e33607be0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555e33607bb0 <col:19, col:23> '<bound member function type>' .begin 0x555e333b8c38
|     | | | |   `-DeclRefExpr 0x555e33607b90 <col:19> 'const String' lvalue ParmVar 0x555e336061d8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x555e33607c50 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555e33607c20 <col:32, col:36> '<bound member function type>' .end 0x555e333b8e50
|     | | | |   `-DeclRefExpr 0x555e33607c00 <col:32> 'const String' lvalue ParmVar 0x555e336061d8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x555e33607c70 <col:43> 'const bool' lvalue Var 0x555e33607618 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x555e33607cd8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x555e33607cb8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x555e33607d00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x555e33607aa0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x555e33607d20 <col:73> 'const int' lvalue Var 0x555e336077b8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x555e33607de0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x555e33607db0 <col:16, col:20> '<bound member function type>' .end 0x555e333b8e50
|     | |     `-DeclRefExpr 0x555e33607d90 <col:16> 'const String' lvalue ParmVar 0x555e336061d8 'str' 'const String &'
|     | `-BinaryOperator 0x555e33607f20 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x555e33607eb8 <col:13> 'int' lvalue ->status 0x555e33606968
|     |   | `-CXXThisExpr 0x555e33607ea8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x555e33607f08 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x555e33607ee8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555e336055c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x555e33608190 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x555e33608078 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x555e33608060 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x555e33608048 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x555e33607f68 <col:13> 'int' lvalue ->status 0x555e33606968
|     | | |     `-CXXThisExpr 0x555e33607f58 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x555e33608028 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x555e33607ff8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x555e33607fa8 <col:23> 'int' lvalue ->status 0x555e33606968
|     | |   |   `-CXXThisExpr 0x555e33607f98 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x555e33608010 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x555e33607fd8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555e33605650 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x555e33608170 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x555e33608110 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x555e336080b8 <col:13, col:18> '<bound member function type>' .error 0x555e335baec0
|     |   | | `-DeclRefExpr 0x555e33608098 <col:13> 'const ArgContext' lvalue ParmVar 0x555e336062f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x555e33608138 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x555e336080e8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x555e33608160 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x555e33608150 <col:20> 'bool' false
|     |-DeclStmt 0x555e33608368 <line:1064:9, col:64>
|     | `-TypedefDecl 0x555e33608310 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x555e336082a0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x555e336084c8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555e33608380 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x555e332ae2d8
|     | |-DeclRefExpr 0x555e336083c8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x555e33607aa0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x555e33608498 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x555e33608410 <col:64> 'V' lvalue ParmVar 0x555e33606278 'result' 'V &'
|     `-ReturnStmt 0x555e33608508 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x555e336084f8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x555e33606878 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x555e33606528 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x555e336067d8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x555e336065d8 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x555e33606678 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x555e336066f0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x555e33607088 <col:71> 'const ArgContext' lvalue Var 0x555e335fcba8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x555e33608c88 <col:83, line:1083:5>
|     |-DeclStmt 0x555e336085e0 <line:1071:9, col:12>
|     | `-VarDecl 0x555e33608578 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x555e33608c60 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x555e33608870 <line:1072:13, line:1073:49> '<dependent type>' '||'
|       | |-UnaryOperator 0x555e336086f8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
|       | | `-CallExpr 0x555e336086c0 <col:14, col:43> '<dependent type>'
|       | |   |-UnresolvedMemberExpr 0x555e33608608 <col:14> '<bound member function type>' lvalue
|       | |   |-DeclRefExpr 0x555e33608660 <col:31> 'const String' lvalue ParmVar 0x555e336065d8 'str' 'const String &'
|       | |   |-DeclRefExpr 0x555e33608680 <col:36> 'V' lvalue Var 0x555e33608578 'x' 'V'
|       | |   `-DeclRefExpr 0x555e336086a0 <col:39> 'const ArgContext' lvalue ParmVar 0x555e336066f0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x555e33608850 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x555e33608830 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x555e33608818 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x555e33608800 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x555e33608720 <col:17> 'int' lvalue ->status 0x555e33606968
|       |     |     `-CXXThisExpr 0x555e33608710 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x555e336087e0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x555e336087b0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x555e33608760 <col:27> 'int' lvalue ->status 0x555e33606968
|       |       |   `-CXXThisExpr 0x555e33608750 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x555e336087c8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x555e33608790 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555e33605650 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x555e336088a0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x555e33608890 <col:20> 'bool' false
|       `-IfStmt 0x555e33608c38 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x555e33608940 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x555e33608910 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x555e336088c0 <col:18> 'int' lvalue ->status 0x555e33606968
|         | |   `-CXXThisExpr 0x555e336088b0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x555e33608928 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x555e336088f0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555e33605650 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x555e33608b78 <col:42, line:1079:9>
|         | |-CallExpr 0x555e33608b20 <line:1076:13, line:1077:45> '<dependent type>'
|         | | |-MemberExpr 0x555e33608970 <line:1076:13> '<bound member function type>' ->range_error 0x555e33606f78
|         | | | `-CXXThisExpr 0x555e33608960 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x555e336089a0 <col:25> 'const ArgContext' lvalue ParmVar 0x555e336066f0 'args' 'const ArgContext &'
|         | | |-CXXDependentScopeMemberExpr 0x555e33608a80 <col:31, col:50> '<dependent type>' lvalue ->is_signed
|         | | `-CXXUnresolvedConstructExpr 0x555e33608af8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
|         | |   `-DeclRefExpr 0x555e33608ad8 <col:43> 'V' lvalue Var 0x555e33608578 'x' 'V'
|         | `-ReturnStmt 0x555e33608b68 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x555e33608b58 <col:20> 'bool' false
|         `-CompoundStmt 0x555e33608c18 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x555e33608bd8 <line:1080:13, col:22> '<dependent type>' '='
|           | |-DeclRefExpr 0x555e33608b98 <col:13> 'V' lvalue ParmVar 0x555e33606678 'result' 'V &'
|           | `-DeclRefExpr 0x555e33608bb8 <col:22> 'V' lvalue Var 0x555e33608578 'x' 'V'
|           `-ReturnStmt 0x555e33608c08 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x555e33608bf8 <col:20> 'bool' true
|-FieldDecl 0x555e33606900 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x555e33606968 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x555e336069b8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x555e33606c70 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x555e336069f8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x555e33606a78 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x555e33606af0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x555e33606b70 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x555e33606f78 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x555e33606d40 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x555e33606db8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x555e33606e50 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x555e336094e8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x555e336094e8
| `-ParmVarDecl 0x555e336095f8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x555e33609778 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555e33609888 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555e336e4000 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555e336e3fd0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x555e336e3fa0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e3f70 <col:7> 'IntArg' lvalue ParmVar 0x555e33609888 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555e33606900 'base' 'int'
| | `-ImplicitCastExpr 0x555e336e40f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555e336e40c8 <col:7> 'int' xvalue .base 0x555e33606900
| |     `-CXXStaticCastExpr 0x555e336e4098 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e4068 <col:7> 'IntArg' lvalue ParmVar 0x555e33609888 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555e33606968 'status' 'int'
| | `-ImplicitCastExpr 0x555e336e41c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555e336e4198 <col:7> 'int' xvalue .status 0x555e33606968
| |     `-CXXStaticCastExpr 0x555e336e4168 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e4138 <col:7> 'IntArg' lvalue ParmVar 0x555e33609888 '' 'IntArg &&'
| `-CompoundStmt 0x555e336e4220 <col:7>
`-CXXDestructorDecl 0x555e336e3180 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33609aa8 <../dummy_inc/click/args.hh:1122:1, line:1175:1> line:1122:7 referenced class BoundedIntArg definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-CXXRecordDecl 0x555e33609c08 <col:1, col:7> col:7 implicit referenced class BoundedIntArg
|-AccessSpecDecl 0x555e33609c98 <col:39, col:45> col:39 public
|-FunctionTemplateDecl 0x555e3360a070 <line:1123:5, line:1128:5> line:1124:5 BoundedIntArg
| |-TemplateTypeParmDecl 0x555e33609cc0 <line:1123:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXConstructorDecl 0x555e33609fc8 <line:1124:5, line:1128:5> line:1124:5 BoundedIntArg 'void (T, T, int)'
| | |-ParmVarDecl 0x555e33609d68 <col:19, col:21> col:21 referenced min_value 'T'
| | |-ParmVarDecl 0x555e33609de0 <col:32, col:34> col:34 referenced max_value 'T'
| | |-ParmVarDecl 0x555e33609e60 <col:45, col:53> col:49 referenced b 'int' cinit
| | | `-IntegerLiteral 0x555e3360ac50 <col:53> 'int' 0
| | |-CXXCtorInitializer 'IntArg'
| | | `-ParenListExpr 0x555e3360acb0 <line:1125:17, col:19> 'NULL TYPE'
| | |   `-DeclRefExpr 0x555e3360ac90 <col:18> 'int' lvalue ParmVar 0x555e33609e60 'b' 'int'
| | |-CXXCtorInitializer Field 0x555e3360ab28 'min_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x555e3360ad70 <col:31, col:41> 'NULL TYPE'
| | |   `-DeclRefExpr 0x555e3360ad50 <col:32> 'T' lvalue ParmVar 0x555e33609d68 'min_value' 'T'
| | |-CXXCtorInitializer Field 0x555e3360ab88 'max_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x555e3360add8 <col:53, col:63> 'NULL TYPE'
| | |   `-DeclRefExpr 0x555e3360adb8 <col:54> 'T' lvalue ParmVar 0x555e33609de0 'max_value' 'T'
| | `-CompoundStmt 0x555e3360b188 <col:65, line:1128:5>
| |   |-DeclStmt 0x555e3360b008 <line:1126:9, col:97>
| |   | `-StaticAssertDecl 0x555e3360afc8 <col:9, col:96> col:9
| |   |   |-CXXDependentScopeMemberExpr 0x555e3360af00 <col:23, col:42> '<dependent type>' lvalue ->is_integral
| |   |   `-StringLiteral 0x555e3360af88 <col:55> 'const char [40]' lvalue "BoundedIntArg argument must be integral"
| |   `-BinaryOperator 0x555e3360b168 <line:1127:9, col:40> '<dependent type>' '='
| |     |-MemberExpr 0x555e3360b030 <col:9> 'bool' lvalue ->is_signed 0x555e3360abe8
| |     | `-CXXThisExpr 0x555e3360b020 <col:9> 'BoundedIntArg *' implicit this
| |     `-CXXDependentScopeMemberExpr 0x555e3360b120 <col:21, col:40> '<dependent type>' lvalue ->is_signed
| `-CXXConstructorDecl 0x555e336e3708 <line:1124:5, line:1128:5> line:1124:5 used BoundedIntArg 'void (int, int, int)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x555e336e3508 <col:19, col:21> col:21 min_value 'int':'int'
|   |-ParmVarDecl 0x555e336e3580 <col:32, col:34> col:34 max_value 'int':'int'
|   `-ParmVarDecl 0x555e336e35e8 <col:45, col:53> col:49 b 'int' cinit
|     `-IntegerLiteral 0x555e3360ac50 <col:53> 'int' 0
|-FunctionTemplateDecl 0x555e3360a428 <line:1130:5, line:1145:5> line:1131:10 parse
| |-TemplateTypeParmDecl 0x555e3360a0e0 <line:1130:15, col:24> col:24 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x555e3360a388 <line:1131:5, line:1145:5> line:1131:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x555e3360a188 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x555e3360a228 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x555e3360a2a0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x555e3360ac70 <col:71> 'const ArgContext' lvalue Var 0x555e335fcba8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x555e3360bc78 <col:83, line:1145:5>
|     |-DeclStmt 0x555e3360b220 <line:1132:9, col:12>
|     | `-VarDecl 0x555e3360b1b8 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x555e3360bc50 <line:1133:9, line:1144:9> has_else
|       |-UnaryOperator 0x555e3360b390 <line:1133:13, col:40> '<dependent type>' prefix '!' cannot overflow
|       | `-CallExpr 0x555e3360b358 <col:14, col:40> '<dependent type>'
|       |   |-UnresolvedMemberExpr 0x555e3360b298 <col:14, col:22> '<bound member function type>' lvalue
|       |   |-DeclRefExpr 0x555e3360b2f8 <col:28> 'const String' lvalue ParmVar 0x555e3360a188 'str' 'const String &'
|       |   |-DeclRefExpr 0x555e3360b318 <col:33> 'V' lvalue Var 0x555e3360b1b8 'x' 'V'
|       |   `-DeclRefExpr 0x555e3360b338 <col:36> 'const ArgContext' lvalue ParmVar 0x555e3360a2a0 'args' 'const ArgContext &'
|       |-ReturnStmt 0x555e3360b3b8 <line:1134:13, col:20>
|       | `-CXXBoolLiteralExpr 0x555e3360b3a8 <col:20> 'bool' false
|       `-IfStmt 0x555e3360bc28 <line:1135:14, line:1144:9> has_else
|         |-UnaryOperator 0x555e3360b5f0 <line:1135:18, col:68> '<dependent type>' prefix '!' cannot overflow
|         | `-CallExpr 0x555e3360b5c8 <col:19, col:68> '<dependent type>'
|         |   |-UnresolvedMemberExpr 0x555e3360b3d8 <col:19> '<bound member function type>' lvalue
|         |   `-CXXUnresolvedConstructExpr 0x555e3360b5a0 <col:29, col:67> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|         |     `-DeclRefExpr 0x555e3360b580 <col:66> 'V' lvalue Var 0x555e3360b1b8 'x' 'V'
|         |-CompoundStmt 0x555e3360b790 <col:71, line:1138:9>
|         | |-CXXMemberCallExpr 0x555e3360b6e8 <line:1136:13, col:51> 'void'
|         | | |-MemberExpr 0x555e3360b618 <col:13> '<bound member function type>' ->range_error 0x555e33606f78
|         | | | `-ImplicitCastExpr 0x555e3360b720 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|         | | |   `-CXXThisExpr 0x555e3360b608 <col:13> 'BoundedIntArg *' implicit this
|         | | |-DeclRefExpr 0x555e3360b648 <col:25> 'const ArgContext' lvalue ParmVar 0x555e3360a2a0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x555e3360b740 <col:31> 'bool' <LValueToRValue>
|         | | | `-MemberExpr 0x555e3360b678 <col:31> 'bool' lvalue ->is_signed 0x555e3360abe8
|         | | |   `-CXXThisExpr 0x555e3360b668 <col:31> 'BoundedIntArg *' implicit this
|         | | `-ImplicitCastExpr 0x555e3360b758 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|         | |   `-MemberExpr 0x555e3360b6b8 <col:42> 'click_intmax_t':'long long' lvalue ->min_value 0x555e3360ab28
|         | |     `-CXXThisExpr 0x555e3360b6a8 <col:42> 'BoundedIntArg *' implicit this
|         | `-ReturnStmt 0x555e3360b780 <line:1137:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x555e3360b770 <col:20> 'bool' false
|         `-IfStmt 0x555e3360bc00 <line:1138:16, line:1144:9> has_else
|           |-UnaryOperator 0x555e3360b9a0 <line:1138:20, col:70> '<dependent type>' prefix '!' cannot overflow
|           | `-CallExpr 0x555e3360b978 <col:21, col:70> '<dependent type>'
|           |   |-UnresolvedMemberExpr 0x555e3360b7c0 <col:21> '<bound member function type>' lvalue
|           |   `-CXXUnresolvedConstructExpr 0x555e3360b950 <col:31, col:69> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|           |     `-DeclRefExpr 0x555e3360b930 <col:68> 'V' lvalue Var 0x555e3360b1b8 'x' 'V'
|           |-CompoundStmt 0x555e3360bb40 <col:73, line:1141:9>
|           | |-CXXMemberCallExpr 0x555e3360ba98 <line:1139:13, col:51> 'void'
|           | | |-MemberExpr 0x555e3360b9c8 <col:13> '<bound member function type>' ->range_error 0x555e33606f78
|           | | | `-ImplicitCastExpr 0x555e3360bad0 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|           | | |   `-CXXThisExpr 0x555e3360b9b8 <col:13> 'BoundedIntArg *' implicit this
|           | | |-DeclRefExpr 0x555e3360b9f8 <col:25> 'const ArgContext' lvalue ParmVar 0x555e3360a2a0 'args' 'const ArgContext &'
|           | | |-ImplicitCastExpr 0x555e3360baf0 <col:31> 'bool' <LValueToRValue>
|           | | | `-MemberExpr 0x555e3360ba28 <col:31> 'bool' lvalue ->is_signed 0x555e3360abe8
|           | | |   `-CXXThisExpr 0x555e3360ba18 <col:31> 'BoundedIntArg *' implicit this
|           | | `-ImplicitCastExpr 0x555e3360bb08 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|           | |   `-MemberExpr 0x555e3360ba68 <col:42> 'click_intmax_t':'long long' lvalue ->max_value 0x555e3360ab88
|           | |     `-CXXThisExpr 0x555e3360ba58 <col:42> 'BoundedIntArg *' implicit this
|           | `-ReturnStmt 0x555e3360bb30 <line:1140:13, col:20>
|           |   `-CXXBoolLiteralExpr 0x555e3360bb20 <col:20> 'bool' false
|           `-CompoundStmt 0x555e3360bbe0 <line:1141:16, line:1144:9>
|             |-BinaryOperator 0x555e3360bba0 <line:1142:13, col:22> '<dependent type>' '='
|             | |-DeclRefExpr 0x555e3360bb60 <col:13> 'V' lvalue ParmVar 0x555e3360a228 'result' 'V &'
|             | `-DeclRefExpr 0x555e3360bb80 <col:22> 'V' lvalue Var 0x555e3360b1b8 'x' 'V'
|             `-ReturnStmt 0x555e3360bbd0 <line:1143:13, col:20>
|               `-CXXBoolLiteralExpr 0x555e3360bbc0 <col:20> 'bool' true
|-CXXMethodDecl 0x555e3360a5c8 <line:1147:5, line:1152:5> line:1147:17 check_min 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x555e3360a4a8 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x555e3360bfe8 <col:54, line:1152:5>
|   `-IfStmt 0x555e3360bfc0 <line:1148:9, line:1151:83> has_else
|     |-ImplicitCastExpr 0x555e3360bcd8 <line:1148:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x555e3360bca8 <col:13> 'const bool' lvalue ->is_signed 0x555e3360abe8
|     |   `-CXXThisExpr 0x555e3360bc98 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x555e3360bda0 <line:1149:13, col:25>
|     | `-BinaryOperator 0x555e3360bd80 <col:20, col:25> 'bool' '>='
|     |   |-ImplicitCastExpr 0x555e3360bd50 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555e3360bcf0 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a4a8 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x555e3360bd68 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x555e3360bd20 <col:25> 'const click_intmax_t':'const long long' lvalue ->min_value 0x555e3360ab28
|     |       `-CXXThisExpr 0x555e3360bd10 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x555e3360bfb0 <line:1151:13, col:83>
|       `-BinaryOperator 0x555e3360bf90 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x555e3360be20 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x555e3360bdf0 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e3360bdb0 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a4a8 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x555e3360be08 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x555e3360bdd0 <col:25> 'int' 0
|         `-BinaryOperator 0x555e3360bf70 <col:30, col:83> 'bool' '>='
|           |-CXXFunctionalCastExpr 0x555e3360bea0 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x555e3360be88 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x555e3360be70 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x555e3360be50 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a4a8 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x555e3360bf48 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x555e3360bf30 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x555e3360bf18 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x555e3360bee8 <col:74> 'const click_intmax_t':'const long long' lvalue ->min_value 0x555e3360ab28
|                   `-CXXThisExpr 0x555e3360bed8 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x555e3360a798 <line:1153:5, line:1158:5> line:1153:17 check_min 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x555e3360a6a0 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x555e3360c3a8 <col:55, line:1158:5>
|   `-IfStmt 0x555e3360c380 <line:1154:9, line:1157:73> has_else
|     |-ImplicitCastExpr 0x555e3360c040 <line:1154:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x555e3360c010 <col:13> 'const bool' lvalue ->is_signed 0x555e3360abe8
|     |   `-CXXThisExpr 0x555e3360c000 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x555e3360c228 <line:1155:13, col:70>
|     | `-BinaryOperator 0x555e3360c208 <col:20, col:70> 'bool' '||'
|     |   |-BinaryOperator 0x555e3360c0e8 <col:20, col:32> 'bool' '<'
|     |   | |-ImplicitCastExpr 0x555e3360c0b8 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x555e3360c068 <col:20> 'const click_intmax_t':'const long long' lvalue ->min_value 0x555e3360ab28
|     |   | |   `-CXXThisExpr 0x555e3360c058 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x555e3360c0d0 <col:32> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x555e3360c098 <col:32> 'int' 0
|     |   `-BinaryOperator 0x555e3360c1e8 <col:37, col:70> 'bool' '>='
|     |     |-ImplicitCastExpr 0x555e3360c1d0 <col:37> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x555e3360c108 <col:37> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x555e3360a6a0 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x555e3360c1a8 <col:42, col:70> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x555e3360c190 <col:61> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x555e3360c178 <col:61> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x555e3360c148 <col:61> 'const click_intmax_t':'const long long' lvalue ->min_value 0x555e3360ab28
|     |             `-CXXThisExpr 0x555e3360c138 <col:61> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x555e3360c370 <line:1157:13, col:73>
|       `-BinaryOperator 0x555e3360c350 <col:20, col:73> 'bool' '>='
|         |-CXXFunctionalCastExpr 0x555e3360c280 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x555e3360c268 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x555e3360c248 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x555e3360a6a0 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x555e3360c328 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x555e3360c310 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x555e3360c2f8 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x555e3360c2c8 <col:64> 'const click_intmax_t':'const long long' lvalue ->min_value 0x555e3360ab28
|                 `-CXXThisExpr 0x555e3360c2b8 <col:64> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x555e3360a8e0 <line:1159:5, line:1164:5> line:1159:17 check_max 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x555e3360a850 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x555e3360c710 <col:54, line:1164:5>
|   `-IfStmt 0x555e3360c6e8 <line:1160:9, line:1163:83> has_else
|     |-ImplicitCastExpr 0x555e3360c400 <line:1160:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x555e3360c3d0 <col:13> 'const bool' lvalue ->is_signed 0x555e3360abe8
|     |   `-CXXThisExpr 0x555e3360c3c0 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x555e3360c4c8 <line:1161:13, col:25>
|     | `-BinaryOperator 0x555e3360c4a8 <col:20, col:25> 'bool' '<='
|     |   |-ImplicitCastExpr 0x555e3360c478 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x555e3360c418 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a850 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x555e3360c490 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x555e3360c448 <col:25> 'const click_intmax_t':'const long long' lvalue ->max_value 0x555e3360ab88
|     |       `-CXXThisExpr 0x555e3360c438 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x555e3360c6d8 <line:1163:13, col:83>
|       `-BinaryOperator 0x555e3360c6b8 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x555e3360c548 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x555e3360c518 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x555e3360c4d8 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a850 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x555e3360c530 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x555e3360c4f8 <col:25> 'int' 0
|         `-BinaryOperator 0x555e3360c698 <col:30, col:83> 'bool' '<='
|           |-CXXFunctionalCastExpr 0x555e3360c5c8 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x555e3360c5b0 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x555e3360c598 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x555e3360c578 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x555e3360a850 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x555e3360c670 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x555e3360c658 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x555e3360c640 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x555e3360c610 <col:74> 'const click_intmax_t':'const long long' lvalue ->max_value 0x555e3360ab88
|                   `-CXXThisExpr 0x555e3360c600 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x555e3360aa70 <line:1165:5, line:1170:5> line:1165:17 check_max 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x555e3360a998 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x555e3360cad0 <col:55, line:1170:5>
|   `-IfStmt 0x555e3360caa8 <line:1166:9, line:1169:73> has_else
|     |-ImplicitCastExpr 0x555e3360c768 <line:1166:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x555e3360c738 <col:13> 'const bool' lvalue ->is_signed 0x555e3360abe8
|     |   `-CXXThisExpr 0x555e3360c728 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x555e3360c950 <line:1167:13, col:71>
|     | `-BinaryOperator 0x555e3360c930 <col:20, col:71> 'bool' '&&'
|     |   |-BinaryOperator 0x555e3360c810 <col:20, col:33> 'bool' '>='
|     |   | |-ImplicitCastExpr 0x555e3360c7e0 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x555e3360c790 <col:20> 'const click_intmax_t':'const long long' lvalue ->max_value 0x555e3360ab88
|     |   | |   `-CXXThisExpr 0x555e3360c780 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x555e3360c7f8 <col:33> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x555e3360c7c0 <col:33> 'int' 0
|     |   `-BinaryOperator 0x555e3360c910 <col:38, col:71> 'bool' '<='
|     |     |-ImplicitCastExpr 0x555e3360c8f8 <col:38> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x555e3360c830 <col:38> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x555e3360a998 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x555e3360c8d0 <col:43, col:71> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x555e3360c8b8 <col:62> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x555e3360c8a0 <col:62> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x555e3360c870 <col:62> 'const click_intmax_t':'const long long' lvalue ->max_value 0x555e3360ab88
|     |             `-CXXThisExpr 0x555e3360c860 <col:62> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x555e3360ca98 <line:1169:13, col:73>
|       `-BinaryOperator 0x555e3360ca78 <col:20, col:73> 'bool' '<='
|         |-CXXFunctionalCastExpr 0x555e3360c9a8 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x555e3360c990 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x555e3360c970 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x555e3360a998 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x555e3360ca50 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x555e3360ca38 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x555e3360ca20 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x555e3360c9f0 <col:64> 'const click_intmax_t':'const long long' lvalue ->max_value 0x555e3360ab88
|                 `-CXXThisExpr 0x555e3360c9e0 <col:64> 'const BoundedIntArg *' implicit this
|-FieldDecl 0x555e3360ab28 <line:1172:5, col:20> col:20 referenced min_value 'click_intmax_t':'long long'
|-FieldDecl 0x555e3360ab88 <line:1173:5, col:20> col:20 referenced max_value 'click_intmax_t':'long long'
|-FieldDecl 0x555e3360abe8 <line:1174:5, col:10> col:10 referenced is_signed 'bool'
|-CXXConstructorDecl 0x555e336d58f8 <line:1122:7> col:7 implicit constexpr BoundedIntArg 'void (const BoundedIntArg &)' inline default trivial noexcept-unevaluated 0x555e336d58f8
| `-ParmVarDecl 0x555e336d5a08 <col:7> col:7 'const BoundedIntArg &'
|-CXXConstructorDecl 0x555e336e3288 <col:7> col:7 implicit used constexpr BoundedIntArg 'void (BoundedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555e336e3398 <col:7> col:7 used 'BoundedIntArg &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555e336e4230 <col:7> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555e336e3f50 <col:7> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x555e336e3f20 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e3ef0 <col:7> 'BoundedIntArg' lvalue ParmVar 0x555e336e3398 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x555e3360ab28 'min_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x555e336e4328 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x555e336e42f8 <col:7> 'click_intmax_t':'long long' xvalue .min_value 0x555e3360ab28
| |     `-CXXStaticCastExpr 0x555e336e42c8 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e4298 <col:7> 'BoundedIntArg' lvalue ParmVar 0x555e336e3398 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x555e3360ab88 'max_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x555e336e43f8 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x555e336e43c8 <col:7> 'click_intmax_t':'long long' xvalue .max_value 0x555e3360ab88
| |     `-CXXStaticCastExpr 0x555e336e4398 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e4368 <col:7> 'BoundedIntArg' lvalue ParmVar 0x555e336e3398 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x555e3360abe8 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x555e336e44c8 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x555e336e4498 <col:7> 'bool' xvalue .is_signed 0x555e3360abe8
| |     `-CXXStaticCastExpr 0x555e336e4468 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555e336e4438 <col:7> 'BoundedIntArg' lvalue ParmVar 0x555e336e3398 '' 'BoundedIntArg &&'
| `-CompoundStmt 0x555e336e4528 <col:7>
`-CXXDestructorDecl 0x555e336e3888 <col:7> col:7 implicit referenced ~BoundedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoundedIntArg = type <{ %class.IntArg, i64, i64, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.BoundedIntArg.base = type <{ %class.IntArg, i64, i64, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33391080 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e33391198 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x555e33391228 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x555e333912f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x555e333913e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x555e333915f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555e333914a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e333917a8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555e333916b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555e333918f0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555e33391860 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555e33391a38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555e333919a8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33391b80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555e33391af0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33391c48 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x555e33391d90 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x555e33391d00 <col:28> col:31 'int'
|-CXXMethodDecl 0x555e33391e58 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x555e33391fa0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x555e33391f10 <col:28> col:31 'int'
|-CXXMethodDecl 0x555e33392118 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555e33392058 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33392260 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555e333921d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33392328 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x555e333924e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555e333923d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555e33392450 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33392738 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555e333925a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e33392620 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555e333927e8 <col:86> "" ""
|-CXXMethodDecl 0x555e33392a58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x555e333928c8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x555e33392940 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33392c08 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555e33392b18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555e33392db8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555e33392cc0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555e33393088 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555e33392e70 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555e33392ee8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555e33392f60 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33393368 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555e33393150 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555e333931c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e33393240 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555e33393420 <col:115> "" ""
|-AccessSpecDecl 0x555e33393490 <line:84:3, col:10> col:3 private
|-FieldDecl 0x555e333934c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33393978 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555e33393978
| `-ParmVarDecl 0x555e33393a88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x555e33393b28 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555e33393b28
| `-ParmVarDecl 0x555e33393c38 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x555e333ca928 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555e33695460 <col:7>
|-CXXConstructorDecl 0x555e333caa00 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555e333caa00
| `-ParmVarDecl 0x555e333cab18 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x555e333cab88 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555e333cab88
| `-ParmVarDecl 0x555e333cac98 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x555e33697dd0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336842b8 prev 0x555e33577f10 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e336843b0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x555e336844a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x555e33684550 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x555e336846d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x555e33684858 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x555e336849d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x555e336955c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555e33695e38 <col:11>
|-CXXDestructorDecl 0x555e336956a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555e336957d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555e336957d8
| `-ParmVarDecl 0x555e336958e8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x555e33695988 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555e33695988
| `-ParmVarDecl 0x555e33695a98 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x555e336987c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x555e336988d8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x555e33698b58 <col:11>
|   `-ReturnStmt 0x555e33698b48 <col:11>
|     `-UnaryOperator 0x555e33698b30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555e33698b20 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x555e33698948 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555e33698948
  `-ParmVarDecl 0x555e33698a58 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33684a40 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e33684b58 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x555e33684bf8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x555e33684c60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x555e33684cc8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x555e33684d30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x555e33684d90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x555e33684e50 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x555e33684eb0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x555e33684f10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x555e336954d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x555e33684bf8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x555e33695e48 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x555e33695ea0 <col:12>
|-CXXConstructorDecl 0x555e33695b08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555e33695b08
| `-ParmVarDecl 0x555e33695c18 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x555e33695cb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555e33695cb8
| `-ParmVarDecl 0x555e33695dc8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x555e33697eb0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33664240 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e33664358 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x555e336643e8 <col:16, col:22> col:16 public
|-EnumDecl 0x555e33664410 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x555e33664510 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x555e336645f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e336644f0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x555e336644d0 <col:21> 'int' 28
| `-EnumConstantDecl 0x555e336645a0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x555e33664608 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e33664580 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x555e33664560 <col:22> 'int' 64
|-CXXMethodDecl 0x555e33664948 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x555e33664630 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e336646b0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x555e33664728 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e336647a0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e33664a08 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555e33664c08 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x555e33664a80 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x555e33664af8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e33664cb8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555e33664e18 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x555e33664d28 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e33664ec0 <col:72> warn_unused_result ""
|-TypedefDecl 0x555e336651f0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x555e33665180 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x555e33665120 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x555e336650e0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x555e330702d0 'void'
|       |-PointerType 0x555e33345240 'unsigned char *'
|       | `-BuiltinType 0x555e330703d0 'unsigned char'
|       |-TypedefType 0x555e33115ca0 'size_t' sugar
|       | |-Typedef 0x555e330e0b20 'size_t'
|       | `-BuiltinType 0x555e33070430 'unsigned long'
|       `-PointerType 0x555e33070ad0 'void *'
|         `-BuiltinType 0x555e330702d0 'void'
|-CXXMethodDecl 0x555e33665668 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x555e33665260 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x555e336652d8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e33665370 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x555e336653f0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x555e336863a0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x555e33686388 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x555e33686350 <col:58> 'int' 0
| |-ParmVarDecl 0x555e33665470 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x555e336863c8 <col:76> 'int' 0
| |-ParmVarDecl 0x555e336654f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x555e336863e8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x555e33665738 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x555e336657b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555e33665878 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x555e33665918 <col:20>
| `-OptimizeNoneAttr 0x555e33665970 <col:30>
|-CXXMethodDecl 0x555e336659e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x555e33665a88 <col:20>
| `-OptimizeNoneAttr 0x555e33665ae0 <col:30>
|-CXXMethodDecl 0x555e33665b58 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x555e33665bf8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x555e33665ca8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x555e33665d48 <col:20>
| |-OptimizeNoneAttr 0x555e33665da0 <col:30>
| `-WarnUnusedResultAttr 0x555e33665dc8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x555e33665e20 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x555e33665ec0 <col:20>
| `-OptimizeNoneAttr 0x555e33665f18 <col:30>
|-CXXMethodDecl 0x555e33665f68 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x555e33666008 <col:20>
| `-OptimizeNoneAttr 0x555e33666060 <col:30>
|-CXXMethodDecl 0x555e336660a8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x555e33666148 <col:20>
| `-OptimizeNoneAttr 0x555e336661a0 <col:30>
|-CXXMethodDecl 0x555e336661e8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555e336662a8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555e33666370 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555e33666438 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555e336664f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555e33666618 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x555e336864b0 <col:54, line:99:5>
|   `-ReturnStmt 0x555e336864a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x555e33686488 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x555e33686458 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555e33685248
|         `-CXXThisExpr 0x555e33686448 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x555e336667b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x555e336666c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x555e33686560 <col:67, line:103:5>
|   `-BinaryOperator 0x555e33686540 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555e336864d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555e33685248
|     | `-CXXThisExpr 0x555e336864c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555e33686528 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x555e33686508 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x555e336666c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x555e336668b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x555e336865e0 <col:33, line:107:5>
|   `-ReturnStmt 0x555e336865d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x555e336865b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x555e33686588 <col:16> 'void *' lvalue ->_destructor_argument 0x555e336852b0
|         `-CXXThisExpr 0x555e33686578 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555e33666970 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x555e33686c10 <col:25, line:113:5>
|   |-ParenExpr 0x555e33686958 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x555e33686928 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x555e33686698 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555e33686670 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x555e33686638 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x555e33686608 <col:24> '<bound member function type>' ->shared 0x555e336659e8
|   |   |       `-ImplicitCastExpr 0x555e33686658 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x555e336865f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555e336866f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336866d8 <col:42> 'int' 0
|   |   `-CallExpr 0x555e33686888 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x555e33686870 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33686850 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336868c8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33686768 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x555e336868e0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33686790 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336868f8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e336867c8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x555e33686910 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33686838 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33686820 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e336867e8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x555e33686b58 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x555e33686988 <col:2> 'unsigned char *' lvalue ->_head 0x555e33685050
|   | | `-CXXThisExpr 0x555e33686978 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x555e33686b40 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x555e33686b20 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x555e336869c8 <col:10> 'unsigned char *' lvalue ->_data 0x555e336850b8
|   |     | `-CXXThisExpr 0x555e336869b8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x555e33686b08 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x555e33686ae8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x555e33686a08 <col:18> 'unsigned char *' lvalue ->_tail 0x555e33685120
|   |         | `-CXXThisExpr 0x555e336869f8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x555e33686ad0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x555e33686ab0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x555e33686a48 <col:26> 'unsigned char *' lvalue ->_end 0x555e33685188
|   |             | `-CXXThisExpr 0x555e33686a38 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x555e33686a98 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x555e33686a78 <col:33> 'int' 0
|   `-BinaryOperator 0x555e33686bf0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555e33686b88 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555e33685248
|     | `-CXXThisExpr 0x555e33686b78 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555e33686bd8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x555e33686bb8 <col:16> 'int' 0
|-CXXMethodDecl 0x555e33666ab0 <line:141:5, col:109> col:56 used push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555e33666a20 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33666b58 <col:20>
| |-OptimizeNoneAttr 0x555e33666bb0 <col:30>
| `-WarnUnusedResultAttr 0x555e33666bd8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555e33666ca8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555e33666c18 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33666d50 <col:20>
| |-OptimizeNoneAttr 0x555e33666da8 <col:30>
| `-WarnUnusedResultAttr 0x555e33666dd0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x555e33666f08 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555e33666e10 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e33666fb0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x555e336670b0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x555e33667020 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33667158 <col:20>
| `-OptimizeNoneAttr 0x555e336671b0 <col:30>
|-CXXMethodDecl 0x555e33667278 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555e336671e8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e33667320 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x555e33667420 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555e33667390 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555e336674c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555e336675c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x555e33667538 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33667670 <col:20>
| `-OptimizeNoneAttr 0x555e336676c8 <col:30>
|-CXXMethodDecl 0x555e33667858 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x555e33667708 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x555e33667780 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x555e33686408 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x555e33667908 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x555e33667b08 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555e33667980 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x555e336679f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33667d18 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555e33667bc8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555e33667c40 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33667f28 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x555e33667dd8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x555e33667e58 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x555e33686418 <col:39> 'int' 0
|-CXXMethodDecl 0x555e33667ff8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x555e336680c0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555e33668188 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x555e33668248 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555e33668310 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x555e33668458 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x555e336683c8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x555e33668628 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555e33668518 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x555e33668590 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e336686f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x555e336687b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x555e33668858 <col:20>
| `-OptimizeNoneAttr 0x555e336688b0 <col:30>
|-CXXMethodDecl 0x555e33668900 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555e336689a0 <col:20>
| `-OptimizeNoneAttr 0x555e336689f8 <col:30>
|-CXXMethodDecl 0x555e33668a48 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x555e33668b08 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555e33668bd0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x555e33668c70 <col:20>
| `-OptimizeNoneAttr 0x555e33668cc8 <col:30>
|-CXXMethodDecl 0x555e33576240 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555e33668d08 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x555e33668d80 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33576390 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x555e33576300 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33576458 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x555e33576518 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x555e335765b8 <col:20>
| `-OptimizeNoneAttr 0x555e33576610 <col:30>
|-CXXMethodDecl 0x555e33576660 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555e33576700 <col:20>
| `-OptimizeNoneAttr 0x555e33576758 <col:30>
|-CXXMethodDecl 0x555e335767a8 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x555e33576870 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x555e33576910 <col:20>
| `-OptimizeNoneAttr 0x555e33576968 <col:30>
|-CXXMethodDecl 0x555e335769b0 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x555e33576ac8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x555e33576c38 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x555e33576b78 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x555e33576d28 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x555e33576dc8 <col:20>
| `-OptimizeNoneAttr 0x555e33576e20 <col:30>
|-CXXMethodDecl 0x555e33576e70 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x555e33576f30 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555e33577168 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x555e33576fe0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x555e33577058 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33577218 <col:20>
| `-OptimizeNoneAttr 0x555e33577270 <col:30>
|-CXXMethodDecl 0x555e33577318 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x555e335773b8 <col:20>
| `-OptimizeNoneAttr 0x555e33577410 <col:30>
|-CXXMethodDecl 0x555e33577460 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x555e33577500 <col:20>
| `-OptimizeNoneAttr 0x555e33577558 <col:30>
|-CXXMethodDecl 0x555e335775a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x555e33577640 <col:20>
| `-OptimizeNoneAttr 0x555e33577698 <col:30>
|-CXXMethodDecl 0x555e33577798 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x555e335776d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x555e33577840 <col:20>
| `-OptimizeNoneAttr 0x555e33577898 <col:30>
|-CXXMethodDecl 0x555e33577a58 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x555e335778d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x555e33577948 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e33577b08 <col:20>
| `-OptimizeNoneAttr 0x555e33577b60 <col:30>
|-CXXMethodDecl 0x555e33577c08 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x555e33577d28 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x555e33577e48 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x555e33577ee8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x555e33577f10 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x555e33578038 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x555e335780d8 <col:20>
| `-OptimizeNoneAttr 0x555e33578130 <col:30>
|-CXXMethodDecl 0x555e335781d8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x555e33578278 <col:20>
| `-OptimizeNoneAttr 0x555e335782d0 <col:30>
|-AccessSpecDecl 0x555e335782f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x555e33578320 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x555e33578420 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x555e33578470 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e33578400 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x555e335783e0 <col:14> 'int' 48
|-CXXMethodDecl 0x555e335784d8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x555e33578578 <col:20>
| `-OptimizeNoneAttr 0x555e335785d0 <col:30>
|-CXXMethodDecl 0x555e33578648 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x555e335786e8 <col:20>
| `-OptimizeNoneAttr 0x555e33578740 <col:30>
|-CXXMethodDecl 0x555e33578808 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x555e33578778 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x555e335789a8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x555e33578b48 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x555e33578a58 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x555e33578bf0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x555e33578cf0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e335790a0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578cd0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x555e33578cb0 <col:9> 'int' 0
| |-EnumConstantDecl 0x555e33578d80 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e335790b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578d60 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x555e33578d40 <col:14> 'int' 1
| |-EnumConstantDecl 0x555e33578e10 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e335790d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578df0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x555e33578dd0 <col:14> 'int' 2
| |-EnumConstantDecl 0x555e33578ea0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e335790e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578e80 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x555e33578e60 <col:14> 'int' 3
| |-EnumConstantDecl 0x555e33578f30 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e33579100 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578f10 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x555e33578ef0 <col:13> 'int' 4
| |-EnumConstantDecl 0x555e33578fc0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555e33579118 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33578fa0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x555e33578f80 <col:13> 'int' 5
| `-EnumConstantDecl 0x555e33579050 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x555e33579130 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e33579030 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x555e33579010 <col:14> 'int' 6
|-CXXMethodDecl 0x555e33579198 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x555e33579238 <col:20>
| `-OptimizeNoneAttr 0x555e33579290 <col:30>
|-CXXMethodDecl 0x555e33579388 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x555e335792c8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x555e33579430 <col:20>
| `-OptimizeNoneAttr 0x555e33579488 <col:30>
|-CXXMethodDecl 0x555e335794f8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x555e33579620 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x555e33579798 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x555e335796d0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x555e33579860 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x555e33579928 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x555e33579a68 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x555e335799d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x555e33579b10 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x555e33579c10 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555e33579e10 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33579bf0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x555e33579bd0 <col:23> 'int' 0
| |-EnumConstantDecl 0x555e33579ca0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555e33579e28 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33579c80 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x555e33579c60 <col:45> 'int' 4
| |-EnumConstantDecl 0x555e33579d30 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555e33579e40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e33579d10 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x555e33579cf0 <col:24> 'int' 0
| `-EnumConstantDecl 0x555e33579dc0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x555e33579e58 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e33579da0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x555e33579d80 <col:47> 'int' 16
|-CXXMethodDecl 0x555e33579eb8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x555e3357a028 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x555e33579f68 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x555e3357a0d0 <col:20>
| `-OptimizeNoneAttr 0x555e3357a128 <col:30>
|-CXXMethodDecl 0x555e3357a178 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x555e33686d30 <col:18, col:36>
|   `-ReturnStmt 0x555e33686d20 <col:20, col:33>
|     `-ImplicitCastExpr 0x555e33686d08 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x555e33686ce8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x555e33686cb8 <col:27> '<bound member function type>' ->xanno 0x555e335781d8
|           `-CXXThisExpr 0x555e33686ca8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x555e3357a270 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x555e33686e40 <col:30, col:48>
|   `-ReturnStmt 0x555e33686e30 <col:32, col:45>
|     `-ImplicitCastExpr 0x555e33686e18 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x555e33686df8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x555e33686dc8 <col:39> '<bound member function type>' ->xanno 0x555e33578038
|           `-CXXThisExpr 0x555e33686db8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x555e3357a358 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x555e33686fd8 <col:24, col:50>
|   `-ReturnStmt 0x555e33686fc8 <col:26, col:47>
|     `-UnaryOperator 0x555e33686fb0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555e33686f90 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x555e33686f78 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555e33686f28 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x555e33684550
|         |   `-CXXMemberCallExpr 0x555e33686f08 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x555e33686ed8 <col:34> '<bound member function type>' ->xanno 0x555e335781d8
|         |       `-CXXThisExpr 0x555e33686ec8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x555e33686f58 <col:46> 'int' 0
|-CXXMethodDecl 0x555e3357a448 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x555e33687170 <col:36, col:62>
|   `-ReturnStmt 0x555e33687160 <col:38, col:59>
|     `-UnaryOperator 0x555e33687148 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555e33687128 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555e33687110 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555e336870c0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x555e33684550
|         |   `-CXXMemberCallExpr 0x555e336870a0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555e33687070 <col:46> '<bound member function type>' ->xanno 0x555e33578038
|         |       `-CXXThisExpr 0x555e33687060 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555e336870f0 <col:58> 'int' 0
|-CXXMethodDecl 0x555e3357a568 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x555e33687308 <col:26, col:53>
|   `-ReturnStmt 0x555e336872f8 <col:28, col:50>
|     `-UnaryOperator 0x555e336872e0 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555e336872c0 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x555e336872a8 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555e33687258 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x555e33684858
|         |   `-CXXMemberCallExpr 0x555e33687238 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x555e33687208 <col:36> '<bound member function type>' ->xanno 0x555e335781d8
|         |       `-CXXThisExpr 0x555e336871f8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x555e33687288 <col:49> 'int' 0
|-CXXMethodDecl 0x555e3357a688 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x555e336874d8 <col:38, col:65>
|   `-ReturnStmt 0x555e336874c8 <col:40, col:62>
|     `-UnaryOperator 0x555e336874b0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555e33687490 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x555e33687478 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555e336873f0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x555e33684858
|         |   `-CXXMemberCallExpr 0x555e336873d0 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555e336873a0 <col:48> '<bound member function type>' ->xanno 0x555e33578038
|         |       `-CXXThisExpr 0x555e33687390 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555e33687420 <col:61> 'int' 0
|-CXXMethodDecl 0x555e3357a838 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x555e3357a740 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x555e33687b30 <col:34, line:463:5>
|   |-ParenExpr 0x555e33687978 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x555e33687948 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555e33687628 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e336875f8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33687548 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33687530 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e336874f0 <col:23> 'int' lvalue ParmVar 0x555e3357a740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33687510 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e336875d8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e336875a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33687568 <col:33> 'int' lvalue ParmVar 0x555e3357a740 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555e336875c0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555e33687588 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555e33687688 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33687668 <col:56> 'int' 0
|   |   `-CallExpr 0x555e336878a8 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555e33687890 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33687870 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336878e8 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33687778 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555e33687900 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336877a8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33687918 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e336877e0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x555e33687930 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33687858 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33687840 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33687800 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x555e33687b20 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x555e33687b08 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x555e33687ae8 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555e33687ab8 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555e33687a68 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x555e33684550
|         |   `-CXXMemberCallExpr 0x555e33687a48 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555e33687a18 <col:9> '<bound member function type>' ->xanno 0x555e33578038
|         |       `-CXXThisExpr 0x555e33687a08 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x555e33687ad0 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x555e33687a98 <col:21> 'int' lvalue ParmVar 0x555e3357a740 'i' 'int'
|-CXXMethodDecl 0x555e3357aa88 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x555e3357a8f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x555e3357a970 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x555e336881b8 <col:40, line:472:5>
|   |-ParenExpr 0x555e33687fd0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x555e33687fa0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555e33687c88 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33687c58 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33687ba8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33687b90 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33687b50 <col:23> 'int' lvalue ParmVar 0x555e3357a8f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33687b70 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33687c38 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33687c08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33687bc8 <col:33> 'int' lvalue ParmVar 0x555e3357a8f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555e33687c20 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555e33687be8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555e33687ce8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33687cc8 <col:56> 'int' 0
|   |   `-CallExpr 0x555e33687f00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555e33687ee8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33687ec8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33687f40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33687d58 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555e33687f58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33687d88 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33687f70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33687dc0 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x555e33687f88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33687eb0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33687e98 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33687e58 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x555e33688198 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x555e33688140 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x555e33688110 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x555e336880c0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x555e33684550
|     | |   `-CXXMemberCallExpr 0x555e336880a0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x555e33688070 <col:2> '<bound member function type>' ->xanno 0x555e335781d8
|     | |       `-CXXThisExpr 0x555e33688060 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x555e33688128 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x555e336880f0 <col:14> 'int' lvalue ParmVar 0x555e3357a8f8 'i' 'int'
|     `-ImplicitCastExpr 0x555e33688180 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555e33688160 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x555e3357a970 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x555e3357ac48 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x555e3357ab50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555e33688888 <col:36, line:485:5>
|   |-ParenExpr 0x555e33688628 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e336885f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33688350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33688320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33688230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33688218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e336881d8 <col:23> 'int' lvalue ParmVar 0x555e3357ab50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e336881f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33688300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e336882e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33688250 <col:33> 'int' lvalue ParmVar 0x555e3357ab50 'i' 'int'
|   |   |     `-BinaryOperator 0x555e336882c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e336882b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33688270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33688290 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555e336883b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33688390 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33688558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33688540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33688520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33688598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33688420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555e336885b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33688458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336885c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33688490 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x555e336885e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33688508 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e336884f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e336884b0 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x555e33688878 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x555e33688860 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x555e33688848 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e33688818 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x555e336887c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e33688790 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e33688740 <col:61, col:70> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e33688720 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e336886f0 <col:61> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e336886e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e336887a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e33688770 <col:74> 'int' lvalue ParmVar 0x555e3357ab50 'i' 'int'
|-CXXMethodDecl 0x555e3357ae98 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x555e3357ad08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555e3357ad80 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x555e33688fd8 <col:42, line:500:5>
|   |-ParenExpr 0x555e33688d70 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33688d40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33688a20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e336889f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33688900 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e336888e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e336888a8 <col:23> 'int' lvalue ParmVar 0x555e3357ad08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e336888c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e336889d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e336889b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33688920 <col:33> 'int' lvalue ParmVar 0x555e3357ad08 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33688998 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33688980 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33688940 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33688960 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555e33688a80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33688a60 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33688ca0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33688c88 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33688c68 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33688ce0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33688af0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555e33688cf8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33688b28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33688d10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33688b60 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x555e33688d28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33688c50 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33688c38 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33688bf8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x555e33688fb8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x555e33688f68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555e33688f38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x555e33688ee0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555e33688eb0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555e33688e60 <col:48, col:57> 'char [48]' lvalue ->c 0x555e336844a0
|     |     |   `-CXXMemberCallExpr 0x555e33688e40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555e33688e10 <col:48> '<bound member function type>' ->xanno 0x555e335781d8
|     |     |       `-CXXThisExpr 0x555e33688e00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555e33688ec8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e33688e90 <col:61> 'int' lvalue ParmVar 0x555e3357ad08 'i' 'int'
|     `-ImplicitCastExpr 0x555e33688fa0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x555e33688f80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x555e3357ad80 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x555e3357b058 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x555e3357af60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555e33689738 <col:35, line:513:5>
|   |-ParenExpr 0x555e33689448 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33689418 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33689170 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33689140 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33689050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33689038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33688ff8 <col:23> 'int' lvalue ParmVar 0x555e3357af60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33689018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33689120 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33689108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33689070 <col:33> 'int' lvalue ParmVar 0x555e3357af60 'i' 'int'
|   |   |     `-BinaryOperator 0x555e336890e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e336890d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33689090 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e336890b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555e336891d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336891b0 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33689378 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33689360 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33689340 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336893b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33689240 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555e336893d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33689278 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336893e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e336892b0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x555e33689400 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33689328 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33689310 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e336892d0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x555e33689728 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x555e33689710 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x555e336896f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e336896c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x555e33689640 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e33689610 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e336895c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e336895a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e33689570 <col:60> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e33689560 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e33689628 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e336895f0 <col:73> 'int' lvalue ParmVar 0x555e3357af60 'i' 'int'
|-CXXMethodDecl 0x555e3357b2a8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x555e3357b118 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555e3357b190 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x555e33692118 <col:41, line:528:5>
|   |-ParenExpr 0x555e33689ba8 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33689b78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e336898d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e336898a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e336897b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33689798 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33689758 <col:23> 'int' lvalue ParmVar 0x555e3357b118 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33689778 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33689880 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33689868 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e336897d0 <col:33> 'int' lvalue ParmVar 0x555e3357b118 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33689848 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33689830 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e336897f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33689810 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555e33689930 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33689910 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33689ad8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33689ac0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33689aa0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33689b18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336899a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555e33689b30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336899d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33689b48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33689a10 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x555e33689b60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33689a88 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33689a70 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33689a30 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x555e336920f8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x555e336920a8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555e33692078 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x555e33692020 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555e33689ce8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555e33689c98 <col:47, col:56> 'char [48]' lvalue ->c 0x555e336844a0
|     |     |   `-CXXMemberCallExpr 0x555e33689c78 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555e33689c48 <col:47> '<bound member function type>' ->xanno 0x555e335781d8
|     |     |       `-CXXThisExpr 0x555e33689c38 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555e33689d00 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e33689cc8 <col:60> 'int' lvalue ParmVar 0x555e3357b118 'i' 'int'
|     `-ImplicitCastExpr 0x555e336920e0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x555e336920c0 <col:65> 'int16_t':'short' lvalue ParmVar 0x555e3357b190 'x' 'int16_t':'short'
|-CXXMethodDecl 0x555e3357b468 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x555e3357b370 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555e336927e8 <col:36, line:541:5>
|   |-ParenExpr 0x555e33692588 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33692558 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e336922b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33692280 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33692190 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33692178 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33692138 <col:23> 'int' lvalue ParmVar 0x555e3357b370 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33692158 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33692260 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33692248 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e336921b0 <col:33> 'int' lvalue ParmVar 0x555e3357b370 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33692228 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33692210 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e336921d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e336921f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555e33692310 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336922f0 <col:60> 'int' 0
|   |   `-CallExpr 0x555e336924b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e336924a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33692480 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336924f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33692380 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555e33692510 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336923b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33692528 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e336923f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x555e33692540 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33692468 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33692450 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33692410 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x555e336927d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x555e336927c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x555e336927a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e33692778 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x555e33692720 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e336926f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e336926a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e33692680 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e33692650 <col:61> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e33692640 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e33692708 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e336926d0 <col:74> 'int' lvalue ParmVar 0x555e3357b370 'i' 'int'
|-CXXMethodDecl 0x555e3357b638 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x555e3357b528 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x555e3357b5a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555e3357b6e8 <col:20>
| `-OptimizeNoneAttr 0x555e3357b740 <col:30>
|-CXXMethodDecl 0x555e3357b878 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x555e3357b780 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555e33692eb8 <col:35, line:562:5>
|   |-ParenExpr 0x555e33692c58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33692c28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33692980 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33692950 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33692860 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33692848 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33692808 <col:23> 'int' lvalue ParmVar 0x555e3357b780 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33692828 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33692930 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33692918 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33692880 <col:33> 'int' lvalue ParmVar 0x555e3357b780 'i' 'int'
|   |   |     `-BinaryOperator 0x555e336928f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e336928e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e336928a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e336928c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555e336929e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336929c0 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33692b88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33692b70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33692b50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33692bc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33692a50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555e33692be0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33692a88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e33692bf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33692ac0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x555e33692c10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33692b38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33692b20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33692ae0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x555e33692ea8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x555e33692e90 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x555e33692e78 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e33692e48 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x555e33692df0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e33692dc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e33692d70 <col:60, col:69> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e33692d50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e33692d20 <col:60> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e33692d10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e33692dd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e33692da0 <col:73> 'int' lvalue ParmVar 0x555e3357b780 'i' 'int'
|-CXXMethodDecl 0x555e3357ba88 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x555e3357b938 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555e3357b9b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x555e33693598 <col:41, line:577:5>
|   |-ParenExpr 0x555e33693328 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e336932f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33693050 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33693020 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33692f30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33692f18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33692ed8 <col:23> 'int' lvalue ParmVar 0x555e3357b938 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33692ef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33693000 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33692fe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33692f50 <col:33> 'int' lvalue ParmVar 0x555e3357b938 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33692fc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33692fb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33692f70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33692f90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555e336930b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33693090 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33693258 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33693240 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33693220 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33693298 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693120 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555e336932b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693158 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336932c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33693190 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x555e336932e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33693208 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e336931f0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e336931b0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x555e33693578 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x555e33693528 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555e336934f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x555e33693498 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555e33693468 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555e33693418 <col:47, col:56> 'char [48]' lvalue ->c 0x555e336844a0
|     |     |   `-CXXMemberCallExpr 0x555e336933f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555e336933c8 <col:47> '<bound member function type>' ->xanno 0x555e335781d8
|     |     |       `-CXXThisExpr 0x555e336933b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555e33693480 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e33693448 <col:60> 'int' lvalue ParmVar 0x555e3357b938 'i' 'int'
|     `-ImplicitCastExpr 0x555e33693560 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x555e33693540 <col:65> 'int32_t':'int' lvalue ParmVar 0x555e3357b9b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x555e3357bc48 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x555e3357bb50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555e33693cc8 <col:36, line:591:5>
|   |-ParenExpr 0x555e33693a08 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e336939d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33693730 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33693700 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33693610 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e336935f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e336935b8 <col:23> 'int' lvalue ParmVar 0x555e3357bb50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e336935d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e336936e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e336936c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33693630 <col:33> 'int' lvalue ParmVar 0x555e3357bb50 'i' 'int'
|   |   |     `-BinaryOperator 0x555e336936a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33693690 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33693650 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33693670 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555e33693790 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33693770 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33693938 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33693920 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33693900 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33693978 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693800 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555e33693990 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693838 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336939a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33693870 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x555e336939c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e336938e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e336938d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33693890 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x555e33693cb8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x555e33693ca0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x555e33693c88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e33693c58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x555e33693bd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e33693ba0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e33693b50 <col:61, col:70> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e33693b30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e33693b00 <col:61> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e33693af0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e33693bb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e33693b80 <col:74> 'int' lvalue ParmVar 0x555e3357bb50 'i' 'int'
|-CXXMethodDecl 0x555e3357be98 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x555e3357bd08 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555e3357bd80 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x555e336943a8 <col:42, line:606:5>
|   |-ParenExpr 0x555e33694138 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x555e33694108 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555e33693e60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33693e30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33693d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33693d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33693ce8 <col:23> 'int' lvalue ParmVar 0x555e3357bd08 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33693d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33693e10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555e33693df8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33693d60 <col:33> 'int' lvalue ParmVar 0x555e3357bd08 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33693dd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33693dc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33693d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555e33693da0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555e33693ec0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33693ea0 <col:60> 'int' 0
|   |   `-CallExpr 0x555e33694068 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555e33694050 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33694030 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e336940a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693f30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555e336940c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33693f68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336940d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33693fa0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x555e336940f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33694018 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33694000 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33693fc0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x555e33694388 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x555e33694338 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555e33694308 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x555e336942a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555e33694278 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555e33694228 <col:48, col:57> 'char [48]' lvalue ->c 0x555e336844a0
|     |     |   `-CXXMemberCallExpr 0x555e33694208 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555e336941d8 <col:48> '<bound member function type>' ->xanno 0x555e335781d8
|     |     |       `-CXXThisExpr 0x555e336941c8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555e33694290 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e33694258 <col:61> 'int' lvalue ParmVar 0x555e3357bd08 'i' 'int'
|     `-ImplicitCastExpr 0x555e33694370 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x555e33694350 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x555e3357bd80 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x555e3357c030 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x555e3357bf60 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x555e33694b98 <col:33, line:620:5>
|   |-ParenExpr 0x555e33694910 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x555e336948e0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555e336945b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33694580 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33694420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33694408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e336943c8 <col:23> 'int' lvalue ParmVar 0x555e3357bf60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e336943e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33694560 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555e33694548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33694440 <col:33> 'int' lvalue ParmVar 0x555e3357bf60 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33694528 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33694510 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33694460 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555e336944e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555e336944d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555e33694498 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555e33694610 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e336945f0 <col:79> 'int' 0
|   |   `-CallExpr 0x555e33694840 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555e33694828 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33694808 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33694880 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e336946f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555e33694898 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33694740 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336948b0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33694778 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x555e336948c8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e336947f0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e336947d8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33694798 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x555e33694b88 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x555e33694b70 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x555e33694b58 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555e33694b28 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x555e33694aa0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x555e33694a70 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555e33694a20 <col:67, col:76> 'char const[48]' lvalue ->c 0x555e336844a0
|             |   `-CXXMemberCallExpr 0x555e33694a00 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555e336949d0 <col:67> '<bound member function type>' ->xanno 0x555e33578038
|             |       `-CXXThisExpr 0x555e336949c0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555e33694a88 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555e33694a50 <col:80> 'int' lvalue ParmVar 0x555e3357bf60 'i' 'int'
|-CXXMethodDecl 0x555e3357c248 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x555e3357c0f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555e3357c170 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x555e336953c0 <col:45, line:635:5>
|   |-ParenExpr 0x555e33695108 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x555e336950d8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555e33694da0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555e33694d70 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555e33694c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555e33694bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555e33694bb8 <col:23> 'int' lvalue ParmVar 0x555e3357c0f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555e33694bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555e33694d50 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555e33694d38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555e33694c30 <col:33> 'int' lvalue ParmVar 0x555e3357c0f0 'i' 'int'
|   |   |     `-BinaryOperator 0x555e33694d18 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555e33694d00 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555e33694c50 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555e33578420 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555e33694cd8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555e33694cc0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555e33694c88 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555e33694e00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555e33694de0 <col:79> 'int' 0
|   |   `-CallExpr 0x555e33695038 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555e33695020 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555e33695000 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555e3310cab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555e33695078 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33694e70 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555e33695090 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555e33694eb8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555e336950a8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555e33694ef0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x555e336950c0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555e33694fe8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555e33694fd0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555e33694f88 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x555e336953a0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x555e33695308 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555e336952d8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x555e33695278 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555e33695248 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555e336951f8 <col:54, col:63> 'char [48]' lvalue ->c 0x555e336844a0
|     |     |   `-CXXMemberCallExpr 0x555e336951d8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555e336951a8 <col:54> '<bound member function type>' ->xanno 0x555e335781d8
|     |     |       `-CXXThisExpr 0x555e33695198 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555e33695260 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555e33695228 <col:67> 'int' lvalue ParmVar 0x555e3357c0f0 'i' 'int'
|     `-CXXConstCastExpr 0x555e33695370 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x555e33695358 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x555e33695320 <col:91> 'const void *' lvalue ParmVar 0x555e3357c170 'x' 'const void *'
|-CXXMethodDecl 0x555e3357c318 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x555e33695448 <col:34, line:640:5>
|   `-ReturnStmt 0x555e33695438 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x555e33695420 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x555e336953f0 <col:16> 'Packet *' lvalue ->_data_packet 0x555e33684fe8
|         `-CXXThisExpr 0x555e336953e0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555e3357c458 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x555e3357c3c8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e33686438 <col:46> 'bool' true
|-CXXMethodDecl 0x555e3357c5d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x555e3357c510 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x555e3357c680 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x555e3357ce30 <line:660:22> "" ""
| |-EnumConstantDecl 0x555e3357c780 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cea0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357c760 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x555e3357c740 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555e33664510 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555e3357c810 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357ceb8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357c7f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x555e3357c7d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555e336645a0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555e3357c8a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357ced0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357c880 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555e3357c860 <col:21> 'int' 0
| |-EnumConstantDecl 0x555e3357c930 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cee8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357c910 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x555e3357c8f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x555e3357c9c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357c9a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x555e3357c980 <col:21> 'int' 16
| |-EnumConstantDecl 0x555e3357ca50 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357ca30 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555e3357ca10 <col:19> 'int' 32
| |-EnumConstantDecl 0x555e3357cae0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf30 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357cac0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x555e3357caa0 <col:19> 'int' EnumConstant 0x555e3357c930 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555e3357cb70 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357cb50 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x555e3357cb30 <col:19> 'int' EnumConstant 0x555e3357ca50 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555e3357cc40 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf60 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357cc20 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x555e3357cc00 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555e3357cbc0 <col:23> 'int' EnumConstant 0x555e3357cb70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555e3357cbe0 <col:40> 'int' 2
| |-EnumConstantDecl 0x555e3357cd10 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555e3357cf78 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555e3357ccf0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x555e3357ccd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555e3357cc90 <col:23> 'int' EnumConstant 0x555e3357cb70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555e3357ccb0 <col:40> 'int' 4
| `-EnumConstantDecl 0x555e3357cde0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x555e3357cf90 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e3357cdc0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x555e3357cda0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x555e3357cd60 <col:23> 'int' EnumConstant 0x555e3357cb70 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x555e3357cd80 <col:40> 'int' 8
|-CXXMethodDecl 0x555e3357cfd0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x555e3357d070 <col:68> "" ""
|-CXXMethodDecl 0x555e3357d108 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x555e3357d1a8 <col:45> "" ""
|-CXXMethodDecl 0x555e3357d240 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555e3357d2e0 <col:57> "" ""
|-CXXMethodDecl 0x555e3357d378 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x555e3357d418 <col:45> "" ""
|-CXXMethodDecl 0x555e3357d4b0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555e3357d550 <col:57> "" ""
|-CXXMethodDecl 0x555e3357d5e0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x555e3357d680 <col:51> "" ""
|-CXXMethodDecl 0x555e3357d710 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555e3357d7b0 <col:63> "" ""
|-CXXMethodDecl 0x555e3357d840 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x555e3357d8e0 <col:53> "" ""
|-CXXMethodDecl 0x555e3357d970 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555e3357da10 <col:65> "" ""
|-CXXMethodDecl 0x555e3357db28 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555e3357da98 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x555e3357dbd0 <col:61> "" ""
|-CXXMethodDecl 0x555e3357dd68 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555e3357dc58 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x555e3357dcd0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555e3357de18 <col:67> "" ""
|-CXXMethodDecl 0x555e3357df30 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555e3357dea0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555e3357dfd8 <col:63> "" ""
|-CXXMethodDecl 0x555e3357e170 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555e3357e060 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555e3357e0d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555e33681d20 <col:69> "" ""
|-CXXMethodDecl 0x555e33681e38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555e33681da8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555e33681ee0 <col:63> "" ""
|-CXXMethodDecl 0x555e33682078 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555e33681f68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555e33681fe0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555e33682128 <col:69> "" ""
|-CXXMethodDecl 0x555e33682240 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x555e336821b0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x555e336822e8 <col:62> "" ""
|-CXXMethodDecl 0x555e33682480 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555e33682370 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555e336823e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x555e33682530 <col:68> "" ""
|-CXXMethodDecl 0x555e33682648 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x555e336825b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555e336826f0 <col:63> "" ""
|-CXXMethodDecl 0x555e33682888 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x555e33682778 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555e336827f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x555e33682938 <col:69> "" ""
|-CXXMethodDecl 0x555e336829c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555e33682a68 <col:64> "" ""
|-CXXMethodDecl 0x555e33682af8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x555e33682b98 <col:52> "" ""
|-CXXMethodDecl 0x555e33682c28 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555e33682cc8 <col:67> "" ""
|-CXXMethodDecl 0x555e33682d58 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x555e33682df8 <col:55> "" ""
|-CXXMethodDecl 0x555e33682f10 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555e33682e80 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555e33682fb8 <col:58> "" ""
|-CXXMethodDecl 0x555e33683150 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555e33683040 <col:33> col:36 'int'
| |-ParmVarDecl 0x555e336830b8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555e33683200 <col:62> "" ""
|-CXXMethodDecl 0x555e33683318 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x555e33683288 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555e336833c0 <col:58> "" ""
|-CXXMethodDecl 0x555e33683558 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x555e33683448 <col:33> col:36 'int'
| |-ParmVarDecl 0x555e336834c0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x555e33683608 <col:62> "" ""
|-CXXMethodDecl 0x555e33683720 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555e33683690 <col:34> col:37 'int'
| `-DeprecatedAttr 0x555e336837c8 <col:60> "" ""
|-CXXMethodDecl 0x555e33683960 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555e33683850 <col:34> col:37 'int'
| |-ParmVarDecl 0x555e336838c8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555e33683a10 <col:64> "" ""
|-CXXMethodDecl 0x555e33683b28 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x555e33683a98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555e33683bd0 <col:58> "" ""
|-CXXMethodDecl 0x555e33683d68 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555e33683c58 <col:33> col:36 'int'
| |-ParmVarDecl 0x555e33683cd0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x555e33683e18 <col:62> "" ""
|-CXXMethodDecl 0x555e33683f30 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555e33683ea0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x555e33683fd8 <col:59> "" ""
|-CXXMethodDecl 0x555e33684170 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555e33684060 <col:33> col:36 'int'
| |-ParmVarDecl 0x555e336840d8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555e33684220 <col:63> "" ""
|-AccessSpecDecl 0x555e33684290 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x555e336842b8 prev 0x555e33577f10 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555e336843b0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x555e336844a0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x555e33684550 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x555e336846d8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x555e33684858 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x555e336849d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x555e336955c8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555e33695e38 <col:11>
| |-CXXDestructorDecl 0x555e336956a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x555e336957d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555e336957d8
| | `-ParmVarDecl 0x555e336958e8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x555e33695988 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555e33695988
| | `-ParmVarDecl 0x555e33695a98 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x555e336987c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555e336988d8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x555e33698b58 <col:11>
| |   `-ReturnStmt 0x555e33698b48 <col:11>
| |     `-UnaryOperator 0x555e33698b30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555e33698b20 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x555e33698948 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555e33698948
|   `-ParmVarDecl 0x555e33698a58 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x555e33684a40 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555e33684b58 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x555e33684bf8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x555e33684c60 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x555e33684cc8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x555e33684d30 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x555e33684d90 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x555e33684e50 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x555e33684eb0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x555e33684f10 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x555e336954d8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x555e33684bf8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x555e33695e48 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x555e33695ea0 <col:12>
| |-CXXConstructorDecl 0x555e33695b08 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555e33695b08
| | `-ParmVarDecl 0x555e33695c18 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x555e33695cb8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555e33695cb8
| | `-ParmVarDecl 0x555e33695dc8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x555e33697eb0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x555e33684f88 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x555e33684fe8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x555e33685050 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x555e336850b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x555e33685120 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x555e33685188 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x555e336851e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x555e33685248 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x555e336852b0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x555e33685338 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x555e33684f88 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x555e33695470 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555e336851e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x555e33695eb0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x555e33695f10 <col:21, line:755:5>
|-CXXConstructorDecl 0x555e336854d8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x555e33685418 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x555e336855d0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x555e336857b8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x555e336856c0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x555e33685a88 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x555e33685870 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e336858e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555e33685960 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33685ca8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x555e33685b58 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x555e33685bd0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x555e33685f78 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x555e33685d68 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x555e33685de0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x555e33685e58 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x555e336860d0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555e33686040 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33686218 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555e33686188 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x555e33686310 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33695f20 prev 0x555e33664190 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x555e33696058 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x555e336960e8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x555e33696190 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x555e33696230 <col:20>
| `-OptimizeNoneAttr 0x555e33696288 <col:30>
|-CXXMethodDecl 0x555e336962d8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x555e33696378 <col:20>
| `-OptimizeNoneAttr 0x555e336963d0 <col:30>
|-CXXMethodDecl 0x555e33696420 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x555e336964e8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x555e336965b0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x555e336966c8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x555e33696790 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x555e33696830 <col:20>
| `-OptimizeNoneAttr 0x555e33696888 <col:30>
|-CXXMethodDecl 0x555e336968f8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x555e33696998 <col:20>
| `-OptimizeNoneAttr 0x555e336969f0 <col:30>
|-CXXMethodDecl 0x555e33696a98 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x555e33696b38 <col:20>
| `-OptimizeNoneAttr 0x555e33696b90 <col:30>
|-CXXMethodDecl 0x555e33696be0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x555e33696cf8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x555e33696e18 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x555e33696f38 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x555e33697000 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x555e336970a0 <col:62> "" ""
|-AccessSpecDecl 0x555e33697110 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x555e33697170 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x555e33697d68 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x555e33697f90 <col:29, col:31>
|-CXXMethodDecl 0x555e33697238 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x555e33697378 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x555e336972e8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x555e33697470 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x555e33697fa0 <col:23, col:25>
|-CXXMethodDecl 0x555e33697628 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x555e33697560 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x555e336978f8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x555e336976e0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555e33697758 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555e336977d0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555e33697a88 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x555e336979c0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x555e33697b80 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x555e33697be8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x555e33697be8
  `-ParmVarDecl 0x555e33697cf8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether_vlan
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_vlan_proto
        14 |   uint16_t ether_vlan_tci
        16 |   uint16_t ether_vlan_encap_proto
           | [sizeof=18, dsize=18, align=1,
           |  nvsize=18, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e336535d0 <../dummy_inc/clicknet/ether.h:65:1, line:71:1> line:65:8 referenced struct click_ether_vlan definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x555e336539f8 <line:71:18>
|-CXXRecordDecl 0x555e336536e8 <line:65:1, col:8> col:8 implicit struct click_ether_vlan
|-FieldDecl 0x555e336537d8 <line:66:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x555e33653888 <line:67:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x555e336538e8 <line:68:5, col:14> col:14 referenced ether_vlan_proto 'uint16_t':'unsigned short'
|-FieldDecl 0x555e33653948 <line:69:5, col:14> col:14 referenced ether_vlan_tci 'uint16_t':'unsigned short'
`-FieldDecl 0x555e336539a8 <line:70:5, col:14> col:14 ether_vlan_encap_proto 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e33633c30 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555e33633d48 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x555e33633df0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x555e33633e58 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x555e33633ec0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x555e33633f70 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x555e33633df0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x555e33634df0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x555e33634da8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x555e33634d70 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x555e33634d58 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x555e33634d00 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x555e333c2af0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x555e33633e58 'len' 'int'
| | `-IntegerLiteral 0x555e33634e68 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x555e33633ec0 'cap' 'int'
| | `-IntegerLiteral 0x555e33634ed0 <col:20> 'int' 0
| `-CompoundStmt 0x555e33634f50 <col:23, line:119:2>
|-CXXConstructorDecl 0x555e336340e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x555e33634028 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x555e33634f60 <col:37, line:121:2>
|-CXXConstructorDecl 0x555e336371c8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555e336372d8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x555e33633df0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x555e33638cf0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x555e33638cc0 <col:12> 'unsigned char *const' lvalue .s 0x555e33633df0
| |     `-DeclRefExpr 0x555e33638ca0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x555e33633e58 'len' 'int'
| | `-ImplicitCastExpr 0x555e33638d80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555e33638d50 <col:12> 'const int' lvalue .len 0x555e33633e58
| |     `-DeclRefExpr 0x555e33638d30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x555e33633ec0 'cap' 'int'
| | `-ImplicitCastExpr 0x555e33638e10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555e33638de0 <col:12> 'const int' lvalue .cap 0x555e33633ec0
| |     `-DeclRefExpr 0x555e33638dc0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x555e33638e68 <col:12>
|-CXXConstructorDecl 0x555e33637378 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e33637378
| `-ParmVarDecl 0x555e33637488 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x555e33639120 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555e3362f3a8 prev 0x555e333cf600 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555e3362f4a0 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x555e3362f530 <col:21, col:27> col:21 public
|-TypedefDecl 0x555e3362f570 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555e33070dc0 'const char *'
|   `-QualType 0x555e33070311 'const char' const
|     `-BuiltinType 0x555e33070310 'char'
|-TypedefDecl 0x555e3362f5e0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x555e33070f90 'char *'
|   `-BuiltinType 0x555e33070310 'char'
|-TypedefDecl 0x555e3362f720 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x555e3362f690 'int (StringAccum::*)() const'
|   |-RecordType 0x555e3335d270 'StringAccum'
|   | `-CXXRecord 0x555e3362f3a8 'StringAccum'
|   `-ParenType 0x555e3339cc40 'int () const' sugar
|     `-FunctionProtoType 0x555e33371820 'int () const' const cdecl
|       `-BuiltinType 0x555e33070370 'int'
|-CXXConstructorDecl 0x555e3362f7e0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x555e3362f930 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x555e3362f8a0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x555e3362fa80 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x555e3362f9f0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x555e3362fc28 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x555e3362fb68 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x555e3362fdd8 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x555e3362fd18 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x555e3362fed0 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x555e33630088 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x555e3362ffc0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x555e33630208 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x555e33630140 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x555e33630300 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x555e336303c8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x555e33630490 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x555e33630558 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x555e33630620 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x555e33630788 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x555e33630858 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555e33630918 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x555e33630a28 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x555e33630b38 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x555e33630bf8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x555e33630cb8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x555e33630e00 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x555e33630d70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x555e33630fc0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x555e33630ec0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x555e33631088 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x555e33631180 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x555e33631240 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x555e33631308 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x555e336313c8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x555e33631488 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x555e33631548 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x555e33631698 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x555e33631600 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x555e336317e8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x555e33631758 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x555e33631940 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x555e336318a8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x555e33631a90 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x555e33631a00 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x555e33631cb0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x555e33631b50 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x555e33631bd0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x555e33634c28 <col:53> 'int' 0
|-CXXMethodDecl 0x555e33631e08 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x555e33631d78 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x555e33634c48 <col:34> 'int' 1
|-CXXMethodDecl 0x555e33631f50 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x555e33631ec0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x555e336320a0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x555e33632010 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x555e336321f0 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x555e33632160 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x555e33632340 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x555e336322b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x555e33632518 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x555e33632400 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555e33632480 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555e336326f8 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x555e336325e0 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x555e33632660 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x555e336328d8 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555e336327c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x555e33632840 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x555e33632ab8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x555e336329a0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x555e33632a20 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x555e33632c98 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x555e33632b80 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x555e33632c00 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x555e33632ff8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x555e33632de0 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x555e33632e60 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x555e33634c68 <col:56> 'int' 10
| `-ParmVarDecl 0x555e33632ed8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e33634c88 <col:77> 'bool' true
|-CXXMethodDecl 0x555e33633358 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x555e33633140 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x555e336331c0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x555e33634c98 <col:57> 'int' 10
| `-ParmVarDecl 0x555e33633238 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555e33634cb8 <col:78> 'bool' true
|-CXXMethodDecl 0x555e33633580 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x555e33633428 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x555e336334a8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x555e33633678 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x555e336337e8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x555e33633728 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x555e33633938 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x555e336338a8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x555e336339e0 <col:51> "" ""
|-AccessSpecDecl 0x555e33633a50 <line:106:3, col:10> col:3 private
|-EnumDecl 0x555e33633a78 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x555e33633bc8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x555e33633c18 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555e33633ba8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x555e33633b78 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x555e333a5a38 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x555e33633c30 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555e33633d48 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x555e33633df0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x555e33633e58 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x555e33633ec0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x555e33633f70 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x555e33633df0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x555e33634df0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x555e33634da8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x555e33634d70 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x555e33634d58 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x555e33634d00 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x555e333c2af0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x555e33633e58 'len' 'int'
| | | `-IntegerLiteral 0x555e33634e68 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x555e33633ec0 'cap' 'int'
| | | `-IntegerLiteral 0x555e33634ed0 <col:20> 'int' 0
| | `-CompoundStmt 0x555e33634f50 <col:23, line:119:2>
| |-CXXConstructorDecl 0x555e336340e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x555e33634028 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x555e33634f60 <col:37, line:121:2>
| |-CXXConstructorDecl 0x555e336371c8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555e336372d8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x555e33633df0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x555e33638cf0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x555e33638cc0 <col:12> 'unsigned char *const' lvalue .s 0x555e33633df0
| | |     `-DeclRefExpr 0x555e33638ca0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x555e33633e58 'len' 'int'
| | | `-ImplicitCastExpr 0x555e33638d80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555e33638d50 <col:12> 'const int' lvalue .len 0x555e33633e58
| | |     `-DeclRefExpr 0x555e33638d30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x555e33633ec0 'cap' 'int'
| | | `-ImplicitCastExpr 0x555e33638e10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555e33638de0 <col:12> 'const int' lvalue .cap 0x555e33633ec0
| | |     `-DeclRefExpr 0x555e33638dc0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x555e336372d8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x555e33638e68 <col:12>
| |-CXXConstructorDecl 0x555e33637378 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x555e33637378
| | `-ParmVarDecl 0x555e33637488 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x555e33639120 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x555e336341c0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x555e336342c0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x555e33634228 <col:16> col:19 'int'
|-CXXMethodDecl 0x555e336344a0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x555e33634380 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x555e33634400 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x555e33634680 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x555e33634568 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555e336345e8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x555e336347d8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x555e33634748 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x555e33634928 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x555e33634898 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x555e33634be8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x555e33634b28 parent 0x555e33070278 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x555e336349e0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x555e33634a58 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e33738ab8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x555e33738e70 prev 0x555e33738ab8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x555e33739060 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x555e33738f68 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x555e33739f60 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x555e337391e0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x555e33739f20 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x555e33739ee0 <col:20> 'String *' lvalue ParmVar 0x555e33738f68 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x555e33739240 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x555e33739fc0 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x555e335fc9d0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x555e33739120 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x555e335d2790 Slot::store 'void ()' ]
| `-CompoundStmt 0x555e3373a708 <col:22, line:857:9>
|   `-CallExpr 0x555e3373a6c0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x555e3373a6a8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x555e3373a628 <col:13> 'void (String &, const String &)' lvalue Function 0x555e3373a508 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x555e332b18a8 'assign_consume')
|     |-UnaryOperator 0x555e3373a150 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x555e3373a138 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x555e3373a108 <col:29> 'String *' lvalue ->_ptr 0x555e337391e0
|     |     `-CXXThisExpr 0x555e3373a0f8 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x555e3373a6f0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x555e3373a178 <col:35> 'String':'String' lvalue ->_slot 0x555e33739240
|         `-CXXThisExpr 0x555e3373a168 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x555e337391e0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x555e33739240 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x555e337392b8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x555e337392b8
| `-ParmVarDecl 0x555e337393c8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x555e33739468 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x555e33739468
| `-ParmVarDecl 0x555e33739578 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x555e33739618 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x555e33739618
| `-ParmVarDecl 0x555e33739728 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x555e33739798 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x555e33739798
| `-ParmVarDecl 0x555e337398a8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x555e33739930 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x555e335d2690 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x555e3373a028 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555e3360d4b0 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x555e3360d708 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x555e3375d788 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555e3375dc20 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x555e3375dc00 <<invalid sloc>> 'int'
| `-CompoundStmt 0x555e3375dc90 <col:19>
|-CXXConstructorDecl 0x555e3375d888 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x555e3375d888
| `-ParmVarDecl 0x555e3375d998 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x555e3375da38 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555e3375db48 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555e3375e530 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555e3375e510 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x555e3375e4e0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x555e3375e4b0 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x555e3375db48 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x555e3375e5a0 <col:19>
`-CXXDestructorDecl 0x555e3375dcd0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
