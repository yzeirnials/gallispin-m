
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca7f7d8 prev 0x55555ca76f78 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555ca7f8d0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55555ca7f960 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55555ca7f9d8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55555ca7fa98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55555ca7fb60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55555ca7fcd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55555ca7fc10 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55555ca7fd80 <col:24>
| `-OptimizeNoneAttr 0x55555ca7fdd8 <col:34>
|-CXXMethodDecl 0x55555ca7fe20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55555ca800d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55555ca7fed0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55555ca7ff48 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55555ca7ffc8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55555ca80190 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55555ca801c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55555ca80230 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55555ca802b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55555ca805d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55555ca80370 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55555ca803e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55555ca80460 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55555ca804e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55555ca806f0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55555ca88068 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55555ca88068
| `-ParmVarDecl 0x55555ca88178 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55555ca88218 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55555ca88218
| `-ParmVarDecl 0x55555ca88328 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55555cb7d798 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca727f0 prev 0x55555ca72570 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555ca728e8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55555ca72978 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55555ca729d8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55555ca72ac8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55555ca72bc8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55555ca72d98 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55555ca72c48 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55555ca72cc0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55555ca72f28 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55555ca72e60 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55555ca72fd0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55555ca73108 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55555ca73040 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55555ca732a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55555ca731e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55555ca73448 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55555ca73388 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55555ca734f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55555ca735f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55555ca736d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca735d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55555ca735b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55555ca73680 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55555ca736e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca73660 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55555ca73640 <col:44> 'int' 2
|-CXXMethodDecl 0x55555ca73830 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55555ca73718 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55555ca73798 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55555ca73988 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55555ca738f8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55555ca73bc8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55555ca73a48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55555ca73ac0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55555ca73c78 <col:20>
| `-OptimizeNoneAttr 0x55555ca73cd0 <col:30>
|-CXXMethodDecl 0x55555ca73dd8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55555ca73d10 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55555ca73e80 <col:20>
| `-OptimizeNoneAttr 0x55555ca73ed8 <col:30>
|-CXXMethodDecl 0x55555ca73f28 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55555ca73ff0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55555ca74108 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55555ca74190 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55555ca74218 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55555ca742a0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55555ca74328 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55555ca743b8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55555ca74478 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55555ca74500 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55555ca74588 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55555ca74610 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55555ca74698 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55555ca74720 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55555ca747b0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55555ca74870 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55555ca74900 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55555ca74a50 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55555ca749b8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55555ca74be0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55555ca74b10 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55555ca74e90 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55555ca74c98 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55555ca74d18 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55555ca74d98 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55555ca74f48 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55555ca75050 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55555ca752e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca75030 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55555ca75010 <col:33> 'int' 0
| |-EnumConstantDecl 0x55555ca750e0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55555ca752f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca750c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55555ca750a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55555ca75170 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55555ca75310 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca75150 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55555ca75130 <col:38> 'int' 90
| |-EnumConstantDecl 0x55555ca75200 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55555ca75328 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca751e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55555ca751c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55555ca75290 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55555ca75340 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca75270 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55555ca75250 <col:32> 'int' 2000
|-CXXMethodDecl 0x55555ca75380 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55555ca757c0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55555ca75630 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55555ca756a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca75890 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55555ca75a10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55555ca75940 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca75c18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55555ca75ac8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55555ca75b40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca75d18 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55555ca75db8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55555ca75e80 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca75f10 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55555ca76140 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca75ef0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55555ca75ed0 <col:36> 'int' EnumConstant 0x55555ca75e80 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca75f60 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca75fb0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca76000 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca76050 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55555ca760a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55555ca760f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55555ca76228 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55555ca76168 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55555ca762f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55555ca763b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55555ca76470 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55555ca76530 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55555ca76648 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55555ca76710 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55555ca76890 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55555ca767c0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55555ca769b8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55555ca76bb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55555ca76a68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55555ca76ae8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55555ca84508 <col:54, line:127:5>
|   |-ParenExpr 0x55555ca843b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55555ca84388 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca84078 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55555ca84050 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55555ca84038 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55555ca84020 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55555ca83ff0 <col:31> 'Router *' lvalue ->_router 0x55555ca81ed0
|   |   |         `-CXXThisExpr 0x55555ca83fe0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55555ca840d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca840b8 <col:48> 'int' 0
|   |   `-CallExpr 0x55555ca842e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55555ca842d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca842b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca84328 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca84148 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55555ca84340 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca84168 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55555ca84358 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca841a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55555ca84370 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca84298 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca84280 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca84238 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55555ca84450 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55555ca843e8 <col:9> 'Router *' lvalue ->_router 0x55555ca81ed0
|   | | `-CXXThisExpr 0x55555ca843d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55555ca84438 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55555ca84418 <col:19> 'Router *' lvalue ParmVar 0x55555ca76a68 'r' 'Router *'
|   `-BinaryOperator 0x55555ca844e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55555ca84480 <col:9> 'int' lvalue ->_eindex 0x55555ca81f38
|     | `-CXXThisExpr 0x55555ca84470 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55555ca844d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca844b0 <col:19> 'int' lvalue ParmVar 0x55555ca76ae8 'eindex' 'int'
|-CXXMethodDecl 0x55555ca76d40 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55555ca76c78 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55555ca76e10 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55555ca76ed8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55555ca76f78 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55555ca771c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55555ca77040 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55555ca770c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55555ca77278 <col:20>
| `-OptimizeNoneAttr 0x55555ca772d0 <col:30>
|-CXXMethodDecl 0x55555ca773d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55555ca77310 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55555ca77480 <col:20>
| `-OptimizeNoneAttr 0x55555ca774d8 <col:30>
|-CXXMethodDecl 0x55555ca775a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55555ca77518 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55555ca77650 <col:20>
| `-OptimizeNoneAttr 0x55555ca776a8 <col:30>
|-CXXMethodDecl 0x55555ca77838 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55555ca776e0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55555ca77760 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55555ca779c8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55555ca77900 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55555ca77b18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55555ca77a88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55555ca77c68 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55555ca77bd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55555ca77db8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55555ca77d28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55555ca78078 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55555ca77e70 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55555ca77ef0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55555ca77f98 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55555ca78150 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55555ca78210 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55555ca784e0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55555ca78390 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55555ca78408 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca78608 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55555ca787e0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55555ca786c0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55555ca78740 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55555ca789c8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55555ca788a8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55555ca78928 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55555ca78d38 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55555ca78a88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55555ca78b00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55555ca78b80 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55555ca83af0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55555ca83ad0 <col:106> 'int' 0
| `-ParmVarDecl 0x55555ca78bf8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83b28 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83b08 <col:126> 'int' 0
|-CXXMethodDecl 0x55555ca790d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55555ca78e08 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55555ca78ea0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55555ca78f20 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55555ca78f98 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83b60 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83b40 <col:114> 'int' 0
|-CXXMethodDecl 0x55555ca79468 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55555ca791b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55555ca79228 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55555ca792a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55555ca83b78 <col:96> 'int' 0
| `-ParmVarDecl 0x55555ca79320 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83bb8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83b98 <col:116> 'int' 0
|-CXXMethodDecl 0x55555ca797e8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55555ca79538 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55555ca795b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca79630 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55555ca83bf0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55555ca83bd0 <col:109> 'int' 0
| `-ParmVarDecl 0x55555ca796a8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83c28 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83c08 <col:129> 'int' 0
|-CXXMethodDecl 0x55555ca79b68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55555ca798b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55555ca79930 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca799b0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55555ca79a28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83c60 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83c40 <col:117> 'int' 0
|-CXXMethodDecl 0x55555ca79ef8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55555ca79c40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca79cb8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca79d38 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55555ca83c78 <col:99> 'int' 0
| `-ParmVarDecl 0x55555ca79db0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55555ca83cb8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55555ca83c98 <col:119> 'int' 0
|-CXXMethodDecl 0x55555ca7a318 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55555ca79fc8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55555ca7a048 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55555ca7a0c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca7a140 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55555ca83cf0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55555ca83cd0 <col:108> 'int' 0
| `-ParmVarDecl 0x55555ca7a1c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55555ca83d28 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55555ca83d08 <col:141> 'int' 0
|-CXXMethodDecl 0x55555ca7a738 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55555ca7a3f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55555ca7a470 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55555ca7a4e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca7a568 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55555ca7a5e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55555ca83d40 <col:121> 'int' 0
|-CXXMethodDecl 0x55555ca7ab68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55555ca7a818 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55555ca7a898 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55555ca7a910 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca7a990 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55555ca83d60 <col:98> 'int' 0
| `-ParmVarDecl 0x55555ca7aa10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55555ca83d80 <col:123> 'int' 0
|-CXXMethodDecl 0x55555ca7ae30 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55555ca7ac40 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55555ca7acc0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55555ca7ad40 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55555ca83da0 <col:80> 'int' 0
|-EnumDecl 0x55555ca7aee8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55555ca7aff0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55555ca7b280 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca7afd0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55555ca7afb0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55555ca7b080 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55555ca7b298 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca7b060 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55555ca7b040 <col:40> 'int' 2
| |-EnumConstantDecl 0x55555ca7b110 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55555ca7b2b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca7b0f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55555ca7b0d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55555ca7b1a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55555ca7b2c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca7b180 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55555ca7b160 <col:36> 'int' 7
| `-EnumConstantDecl 0x55555ca7b230 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55555ca7b2e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca7b210 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55555ca7b1f0 <col:34> 'int' 6
|-CXXMethodDecl 0x55555ca7b598 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55555ca7b308 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55555ca7b3a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55555ca7b428 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55555ca7b4a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55555ca83e58 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55555ca83e40 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55555ca83e28 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55555ca83e08 <col:98, col:105> 'String' (CXXTemporary 0x55555ca83e08)
|           `-CXXTemporaryObjectExpr 0x55555ca83dd0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55555ca7b838 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55555ca7b668 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55555ca7b6e0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55555ca7b758 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55555ca83f08 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55555ca83ef0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55555ca83ed8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55555ca83eb8 <col:94, col:101> 'String' (CXXTemporary 0x55555ca83eb8)
| |         `-CXXTemporaryObjectExpr 0x55555ca83e80 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55555ca846f0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55555ca84668 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55555ca84638 <col:9> '<bound member function type>' ->add_task_handlers 0x55555ca7b598
|     | `-CXXThisExpr 0x55555ca84628 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55555ca846a8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55555ca845a8 <col:27> 'Task *' lvalue ParmVar 0x55555ca7b668 'task' 'Task *'
|     |-ImplicitCastExpr 0x55555ca846c0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55555ca845c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55555ca7b6e0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55555ca846d8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55555ca845e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55555ca7b230 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55555ca84608 <col:62> 'const String' lvalue ParmVar 0x55555ca7b758 'prefix' 'const String &'
|-CXXMethodDecl 0x55555ca7ba48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55555ca7b900 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55555ca7b978 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55555ca83fb8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55555ca83fa0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55555ca83f88 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55555ca83f68 <col:70, col:77> 'String' (CXXTemporary 0x55555ca83f68)
| |         `-CXXTemporaryObjectExpr 0x55555ca83f30 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55555ca848c8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55555ca84840 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55555ca84810 <col:9> '<bound member function type>' ->add_task_handlers 0x55555ca7b598
|     | `-CXXThisExpr 0x55555ca84800 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55555ca84880 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55555ca84780 <col:27> 'Task *' lvalue ParmVar 0x55555ca7b900 'task' 'Task *'
|     |-ImplicitCastExpr 0x55555ca84898 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55555ca847a0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55555ca848b0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55555ca847c0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55555ca7b230 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55555ca847e0 <col:57> 'const String' lvalue ParmVar 0x55555ca7b978 'prefix' 'const String &'
|-CXXMethodDecl 0x55555ca7bd28 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55555ca7bb10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7bb90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7bc08 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55555ca7bfd8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55555ca7bdf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7be78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7bef8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55555ca7c2c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55555ca7c0a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7c128 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7c1a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55555ca7c578 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55555ca7c398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7c418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7c498 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55555ca7c828 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55555ca7c648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7c6c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7c748 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55555ca7cad8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55555ca7c8f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7c978 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7c9f0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55555ca7cd88 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55555ca7cba8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7cc28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7cca8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55555ca7d098 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55555ca7ceb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7cf30 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7cfb0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55555ca7d378 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55555ca7d168 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7d1e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7d290 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55555ca7d658 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55555ca7d448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7d4c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7d570 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55555ca7d8c0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55555ca7d728 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55555ca7d7a8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55555ca7d820 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55555ca7db68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55555ca7d990 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55555ca7da10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55555ca7da88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55555ca7de18 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55555ca7dc38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7dcb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7dd38 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55555ca7e0c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55555ca7dee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7df68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7dfe0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55555ca7e378 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55555ca7e198 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7e218 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7e290 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55555ca7e648 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55555ca7e448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7e4c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55555ca7e568 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55555ca7e978 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55555ca7e718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55555ca7e798 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55555ca7e810 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55555ca7e888 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555ca83fd0 <col:93> 'bool' false
|-CXXMethodDecl 0x55555ca7eb60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55555ca7ea48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55555ca7eac8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55555ca7ed38 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55555ca7ec20 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55555ca7eca0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55555ca7f018 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55555ca7edf8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55555ca7ee70 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55555ca7eef0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55555ca7ef68 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca7f308 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55555ca7f0e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55555ca7f160 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55555ca7f1e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55555ca7f258 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca7f540 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55555ca7f3e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55555ca7f460 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55555ca7f728 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55555ca7f608 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55555ca7f688 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55555ca7f7d8 prev 0x55555ca76f78 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55555ca7f8d0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55555ca7f960 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55555ca7f9d8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55555ca7fa98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55555ca7fb60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55555ca7fcd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55555ca7fc10 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55555ca7fd80 <col:24>
| | `-OptimizeNoneAttr 0x55555ca7fdd8 <col:34>
| |-CXXMethodDecl 0x55555ca7fe20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55555ca800d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55555ca7fed0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55555ca7ff48 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55555ca7ffc8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55555ca80190 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55555ca801c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55555ca80230 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55555ca802b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55555ca805d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55555ca80370 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55555ca803e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55555ca80460 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55555ca804e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55555ca806f0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55555ca88068 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55555ca88068
| | `-ParmVarDecl 0x55555ca88178 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55555ca88218 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55555ca88218
| | `-ParmVarDecl 0x55555ca88328 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55555cb7d798 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55555ca80768 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55555ca80808 <col:38> "" ""
|-CXXMethodDecl 0x55555ca80898 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55555ca80938 <col:44> "" ""
|-AccessSpecDecl 0x55555ca809a8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55555ca809d0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55555ca80ad0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55555ca80b20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca80ab0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55555ca80a90 <col:27> 'int' 4
|-FieldDecl 0x55555ca80bd8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55555ca80d88 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55555ca80e40 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55555ca81ed0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55555ca81f38 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55555ca82088 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55555ca81fc8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55555ca82238 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55555ca82148 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55555ca82418 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55555ca822f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55555ca82378 <col:25> col:28 'int'
|-CXXMethodDecl 0x55555ca826c0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55555ca824e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55555ca82560 <col:28> col:31 'int'
| `-ParmVarDecl 0x55555ca825d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55555ca82778 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55555ca82840 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55555ca82890 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55555ca828e0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55555ca82ac0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55555ca82970 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55555ca829e8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca82d68 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55555ca82b88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55555ca82c08 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55555ca82c80 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca82f88 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55555ca82e38 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55555ca82eb8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55555ca832c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55555ca83048 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55555ca830c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55555ca83140 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55555ca831c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55555ca834a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55555ca83390 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55555ca83410 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55555ca835f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55555ca83568 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55555ca83978 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55555ca836b8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55555ca83738 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55555ca837b0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55555ca83830 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55555ca83a90 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether_vlan
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_vlan_proto
        14 |   uint16_t ether_vlan_tci
        16 |   uint16_t ether_vlan_encap_proto
           | [sizeof=18, dsize=18, align=1,
           |  nvsize=18, nvalign=1]

*** Dumping AST Record Layout
         0 | class EtherVLANEncap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ether_vlan _ethh
       108 |     uint8_t [6] ether_dhost
       114 |     uint8_t [6] ether_shost
       120 |     uint16_t ether_vlan_proto
       122 |     uint16_t ether_vlan_tci
       124 |     uint16_t ether_vlan_encap_proto
       126 |   _Bool _use_anno
       128 |   int _native_vlan
           | [sizeof=136, dsize=132, align=8,
           |  nvsize=132, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca8bf10 <../dummy_inc/clicknet/ether.h:65:1, line:71:1> line:65:8 referenced struct click_ether_vlan definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55555ca8c338 <line:71:18>
|-CXXRecordDecl 0x55555ca8c028 <line:65:1, col:8> col:8 implicit struct click_ether_vlan
|-FieldDecl 0x55555ca8c118 <line:66:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55555ca8c1c8 <line:67:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x55555ca8c228 <line:68:5, col:14> col:14 ether_vlan_proto 'uint16_t':'unsigned short'
|-FieldDecl 0x55555ca8c288 <line:69:5, col:14> col:14 ether_vlan_tci 'uint16_t':'unsigned short'
|-FieldDecl 0x55555ca8c2e8 <line:70:5, col:14> col:14 ether_vlan_encap_proto 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55555cb7d2f0 <line:65:8> col:8 implicit used click_ether_vlan 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55555cb7d728 <col:8>
|-CXXConstructorDecl 0x55555cb7d3f8 <col:8> col:8 implicit constexpr click_ether_vlan 'void (const click_ether_vlan &)' inline default trivial noexcept-unevaluated 0x55555cb7d3f8
| `-ParmVarDecl 0x55555cb7d508 <col:8> col:8 'const click_ether_vlan &'
`-CXXConstructorDecl 0x55555cb7d5a8 <col:8> col:8 implicit constexpr click_ether_vlan 'void (click_ether_vlan &&)' inline default trivial noexcept-unevaluated 0x55555cb7d5a8
  `-ParmVarDecl 0x55555cb7d6b8 <col:8> col:8 'click_ether_vlan &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca8d7f0 <../elements/ethernet/ethervlanencap.hh:90:1, line:116:1> line:90:7 class EtherVLANEncap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55555ca8d948 <col:1, col:7> col:7 implicit referenced class EtherVLANEncap
|-AccessSpecDecl 0x55555ca8d9d8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x55555ca8da60 <line:92:5, col:20> col:5 EtherVLANEncap 'void ()'
|-CXXDestructorDecl 0x55555ca8db50 <line:93:5, col:21> col:5 ~EtherVLANEncap 'void ()' noexcept-unevaluated 0x55555ca8db50
| `-Overrides: [ 0x55555ca72ac8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55555ca8dc80 <line:95:5, col:63> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55555ca73f28 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55555ca8f1e8 <col:36, col:63>
|   `-ReturnStmt 0x55555ca8f1d8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55555ca8f1c0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55555ca8f198 <col:45> 'const char [15]' lvalue "EtherVLANEncap"
|-CXXMethodDecl 0x55555ca8dd48 <line:96:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55555ca73ff0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55555ca8f248 <col:36, col:56>
|   `-ReturnStmt 0x55555ca8f238 <col:38, col:45>
|     `-ImplicitCastExpr 0x55555ca8f220 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55555ca8f200 <col:45> 'const char []' lvalue Var 0x55555ca742a0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55555ca8e020 <line:98:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55555ca757c0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55555ca8ded0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55555ca8df48 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555ca8e0f0 <line:99:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55555ca78210 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55555ca8f280 <col:39, col:54>
|   `-ReturnStmt 0x55555ca8f270 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55555ca8f260 <col:48> 'bool' true
|-CXXMethodDecl 0x55555ca8e1b0 <line:100:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55555ca75890 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55555ca8e2f0 <line:102:5, col:31> col:13 smaction 'Packet *(Packet *)'
| `-ParmVarDecl 0x55555ca8e260 <col:22, col:30> col:30 p 'Packet *'
|-CXXMethodDecl 0x55555ca8e4c0 <line:103:5, col:34> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55555ca72d98 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55555ca8e3b0 <col:15, col:19> col:19 port 'int'
| `-ParmVarDecl 0x55555ca8e428 <col:25, col:33> col:33 p 'Packet *'
|-CXXMethodDecl 0x55555ca8e618 <line:104:5, col:26> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55555ca72f28 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55555ca8e588 <col:18, col:22> col:22 port 'int'
|-AccessSpecDecl 0x55555ca8e6c0 <line:106:3, col:10> col:3 private
|-FieldDecl 0x55555ca8e6f8 <line:108:5, col:22> col:22 _ethh 'click_ether_vlan'
|-FieldDecl 0x55555ca8e758 <line:109:5, col:10> col:10 _use_anno 'bool'
|-FieldDecl 0x55555ca8e7c0 <line:110:5, col:9> col:9 _native_vlan 'int'
|-EnumDecl 0x55555ca8e810 <line:112:5, col:33> col:5
| |-EnumConstantDecl 0x55555ca8e8d0 <col:12> col:12 h_config 'EtherVLANEncap::(anonymous enum at ../elements/ethernet/ethervlanencap.hh:112:5)'
| `-EnumConstantDecl 0x55555ca8e920 <col:22> col:22 h_vlan_tci 'EtherVLANEncap::(anonymous enum at ../elements/ethernet/ethervlanencap.hh:112:5)'
|-CXXMethodDecl 0x55555ca8ea98 <line:113:5, col:59> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55555ca8e980 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x55555ca8ea00 <col:44, col:50> col:50 user_data 'void *'
|-CXXMethodDecl 0x55555ca8ed78 <line:114:5, col:96> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55555ca8eb58 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55555ca8ebd0 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x55555ca8ec50 <col:61, col:67> col:67 user_data 'void *'
| `-ParmVarDecl 0x55555ca8ecc8 <col:78, col:92> col:92 errh 'ErrorHandler *'
|-CXXConstructorDecl 0x55555ca8ee68 <line:90:7> col:7 implicit EtherVLANEncap 'void (const EtherVLANEncap &)' inline default_delete noexcept-unevaluated 0x55555ca8ee68
| `-ParmVarDecl 0x55555ca8ef78 <col:7> col:7 'const EtherVLANEncap &'
`-CXXMethodDecl 0x55555ca8f018 <col:7> col:7 implicit operator= 'EtherVLANEncap &(const EtherVLANEncap &)' inline default_delete noexcept-unevaluated 0x55555ca8f018
  `-ParmVarDecl 0x55555ca8f128 <col:7> col:7 'const EtherVLANEncap &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherVLANEncap = type { %class.Element.base, %struct.click_ether_vlan, i8, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.EtherVLANEncap.base = type { %class.Element.base, %struct.click_ether_vlan, i8, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555c846690 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55555c8467a8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55555c846848 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55555c8468a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55555c846908 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55555c8469b8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555c846cc0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555c846dd8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55555c846e80 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55555c846ee8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55555c846f78 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55555c84d010 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55555c84d448 <col:12>
|-CXXConstructorDecl 0x55555c84d118 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55555c84d228 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55555c846e80 'data' 'const char *'
| | `-ImplicitCastExpr 0x55555c84f9d0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55555c84f9a0 <col:12> 'const char *const' lvalue .data 0x55555c846e80
| |     `-DeclRefExpr 0x55555c84f980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55555c846ee8 'length' 'int'
| | `-ImplicitCastExpr 0x55555c84fa60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555c84fa30 <col:12> 'const int' lvalue .length 0x55555c846ee8
| |     `-DeclRefExpr 0x55555c84fa10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55555c846f78 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55555c84faf0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55555c84fac0 <col:12> 'String::memo_t *const' lvalue .memo 0x55555c846f78
| |     `-DeclRefExpr 0x55555c84faa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| `-CompoundStmt 0x55555c84fb48 <col:12>
|-CXXConstructorDecl 0x55555c84d2c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555c84d2c8
| `-ParmVarDecl 0x55555c84d3d8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55555c852930 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55555c85e348 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55555c85e458 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55555c85e970 <col:12>
|   |-BinaryOperator 0x55555c85e788 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55555c85e740 <col:12> 'const char *' lvalue ->data 0x55555c846e80
|   | | `-CXXThisExpr 0x55555c85e730 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55555c85e770 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55555c85e700 <col:12> 'const char *const' lvalue .data 0x55555c846e80
|   |     `-DeclRefExpr 0x55555c85e6e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55555c85e850 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55555c85e808 <col:12> 'int' lvalue ->length 0x55555c846ee8
|   | | `-CXXThisExpr 0x55555c85e7f8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55555c85e838 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55555c85e7c8 <col:12> 'const int' lvalue .length 0x55555c846ee8
|   |     `-DeclRefExpr 0x55555c85e7a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55555c85e918 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55555c85e8d0 <col:12> 'String::memo_t *' lvalue ->memo 0x55555c846f78
|   | | `-CXXThisExpr 0x55555c85e8c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55555c85e900 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55555c85e890 <col:12> 'String::memo_t *const' lvalue .memo 0x55555c846f78
|   |     `-DeclRefExpr 0x55555c85e870 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55555c85e960 <col:12>
|     `-UnaryOperator 0x55555c85e948 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555c85e938 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55555c85e4c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555c85e4c8
  `-ParmVarDecl 0x55555c85e5d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555c83dc00 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555c83dd18 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55555c83dda8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55555c83dde8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55555c510e00 'const char *'
|   `-QualType 0x55555c510351 'const char' const
|     `-BuiltinType 0x55555c510350 'char'
|-TypedefDecl 0x55555c83de70 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55555c83de40 'String::const_iterator' sugar
|   |-Typedef 0x55555c83dde8 'const_iterator'
|   `-PointerType 0x55555c510e00 'const char *'
|     `-QualType 0x55555c510351 'const char' const
|       `-BuiltinType 0x55555c510350 'char'
|-TypedefDecl 0x55555c83dfe0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55555c83df50 'int (String::*)() const'
|   |-RecordType 0x55555c83dc90 'String'
|   | `-CXXRecord 0x55555c83dc00 'String'
|   `-ParenType 0x55555c83def0 'int () const' sugar
|     `-FunctionProtoType 0x55555c811a80 'int () const' const cdecl
|       `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555c83e048 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55555c666660 'int64_t' sugar
|   |-Typedef 0x55555c5792a0 'int64_t'
|   `-TypedefType 0x55555c552510 '__int64_t' sugar
|     |-Typedef 0x55555c5520e8 '__int64_t'
|     `-BuiltinType 0x55555c5103d0 'long'
|-TypedefDecl 0x55555c83e0b0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55555c666580 'uint64_t' sugar
|   |-Typedef 0x55555c579440 'uint64_t'
|   `-TypedefType 0x55555c5525a0 '__uint64_t' sugar
|     |-Typedef 0x55555c552158 '__uint64_t'
|     `-BuiltinType 0x55555c510470 'unsigned long'
|-TypedefDecl 0x55555c83e140 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55555c83e110 'String::intmax_t' sugar
|   |-Typedef 0x55555c83e048 'intmax_t'
|   `-TypedefType 0x55555c666660 'int64_t' sugar
|     |-Typedef 0x55555c5792a0 'int64_t'
|     `-TypedefType 0x55555c552510 '__int64_t' sugar
|       |-Typedef 0x55555c5520e8 '__int64_t'
|       `-BuiltinType 0x55555c5103d0 'long'
|-TypedefDecl 0x55555c83e1d0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55555c83e1a0 'String::uintmax_t' sugar
|   |-Typedef 0x55555c83e0b0 'uintmax_t'
|   `-TypedefType 0x55555c666580 'uint64_t' sugar
|     |-Typedef 0x55555c579440 'uint64_t'
|     `-TypedefType 0x55555c5525a0 '__uint64_t' sugar
|       |-Typedef 0x55555c552158 '__uint64_t'
|       `-BuiltinType 0x55555c510470 'unsigned long'
|-CXXConstructorDecl 0x55555c83e290 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55555c83e438 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55555c83e378 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55555c83e5e8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55555c83e528 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55555c83e740 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55555c83e6b0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55555c83e958 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55555c83e808 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55555c83e888 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55555c83eb78 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55555c83ea28 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55555c83eaa8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55555c83ed98 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55555c83ec48 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55555c83ecc8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55555c83efb8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55555c83ee68 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55555c83eee8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55555c83f148 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55555c83f080 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55555c83f2c8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55555c83f208 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55555c83f458 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55555c83f390 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55555c83f5b0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55555c83f520 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55555c83f708 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55555c83f678 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55555c83f860 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55555c83f7d0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55555c83f9e8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55555c83f928 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55555c83fb78 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55555c83fab0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55555c83fd08 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55555c83fc40 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55555c83fe98 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55555c83fdd0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55555c83ff90 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55555c8400b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55555c840238 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55555c840170 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55555c840388 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55555c8402f8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55555c840440 <col:63> "" ""
|-CXXMethodDecl 0x55555c840588 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55555c8404c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55555c840798 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55555c840648 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55555c8406c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55555c8409b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55555c840860 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55555c8408e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55555c840c98 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55555c840a78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55555c840af8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55555c84cae0 <col:55> 'int' 10
| `-ParmVarDecl 0x55555c840b70 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555c84cb00 <col:76> 'bool' true
|-CXXMethodDecl 0x55555c840f78 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55555c840d60 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55555c840de0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55555c84cb10 <col:56> 'int' 10
| `-ParmVarDecl 0x55555c840e58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555c84cb30 <col:77> 'bool' true
|-CXXMethodDecl 0x55555c841080 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55555c841148 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55555c841210 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55555c8412b0 <col:20>
| `-OptimizeNoneAttr 0x55555c841308 <col:30>
|-CXXConversionDecl 0x55555c8413f8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55555c8414c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55555c841588 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55555c841678 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55555c841738 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55555c8418b8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55555c8417f0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55555c841a08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55555c841978 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55555c841af8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55555c841bb8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55555c841e08 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55555c841c70 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55555c841cf0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55555c842068 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55555c841ed0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55555c841f50 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55555c842138 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55555c842348 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55555c8421f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55555c842270 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55555c842568 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55555c842410 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55555c842490 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55555c8426f8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55555c842630 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55555c8427e8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55555c842958 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55555c842898 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55555c842b68 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55555c842a18 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55555c842a98 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55555c842d80 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55555c842c28 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55555c842ca0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55555c842f10 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55555c842e40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55555c843130 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55555c842fd0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55555c843050 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55555c843280 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55555c8431f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55555c843458 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55555c843340 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55555c8433c0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55555c8435a8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55555c843518 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55555c8437c0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55555c843660 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55555c8436e0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55555c84cb40 <col:39> 'int' 0
|-CXXMethodDecl 0x55555c8439e0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55555c843880 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55555c843900 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55555c84cb60 <col:48> 'int' 0
|-CXXMethodDecl 0x55555c843bc0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55555c843aa0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55555c843b20 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55555c84cb80 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55555c843c90 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55555c843d50 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55555c843e10 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55555c843ed0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55555c843f90 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55555c844138 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55555c844040 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55555c8442b8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55555c8441f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55555c844490 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55555c844378 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55555c844608 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55555c844548 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55555c844750 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55555c8446c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55555c8448a0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55555c844810 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55555c844a78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55555c844960 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55555c8449e0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55555c844c58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55555c844b40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55555c844bc0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55555c844da8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55555c844d18 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55555c844fb8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55555c844e68 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55555c844ee8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55555c845118 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55555c845080 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55555c845270 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55555c8451d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55555c845318 <col:57> "" ""
|-CXXMethodDecl 0x55555c845428 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55555c845398 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55555c845578 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55555c8454e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55555c8456f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55555c845630 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55555c8457c0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55555c845880 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55555c845940 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55555c8459e0 <col:49> "" ""
|-CXXMethodDecl 0x55555c845a70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55555c845b30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55555c845c20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55555c845ce8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55555c845da8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55555c845e68 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55555c845f60 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55555c846028 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55555c8460f0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55555c8462c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55555c8461a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55555c846228 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55555c8464f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55555c846390 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55555c846410 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55555c846600 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55555c846668 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55555c846690 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55555c8467a8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55555c846848 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55555c8468a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55555c846908 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55555c8469b8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55555c846a20 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55555c846c58 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55555c846ca8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555c846c38 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55555c846b48 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55555c846af0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55555c846b30 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55555c846b10 <col:32> 'int' 8
|-CXXRecordDecl 0x55555c846cc0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55555c846dd8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55555c846e80 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55555c846ee8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55555c846f78 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55555c84d010 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55555c84d448 <col:12>
| |-CXXConstructorDecl 0x55555c84d118 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55555c84d228 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55555c846e80 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55555c84f9d0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55555c84f9a0 <col:12> 'const char *const' lvalue .data 0x55555c846e80
| | |     `-DeclRefExpr 0x55555c84f980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55555c846ee8 'length' 'int'
| | | `-ImplicitCastExpr 0x55555c84fa60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55555c84fa30 <col:12> 'const int' lvalue .length 0x55555c846ee8
| | |     `-DeclRefExpr 0x55555c84fa10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55555c846f78 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55555c84faf0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55555c84fac0 <col:12> 'String::memo_t *const' lvalue .memo 0x55555c846f78
| | |     `-DeclRefExpr 0x55555c84faa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c84d228 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55555c84fb48 <col:12>
| |-CXXConstructorDecl 0x55555c84d2c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555c84d2c8
| | `-ParmVarDecl 0x55555c84d3d8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55555c852930 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55555c85e348 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55555c85e458 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55555c85e970 <col:12>
| |   |-BinaryOperator 0x55555c85e788 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55555c85e740 <col:12> 'const char *' lvalue ->data 0x55555c846e80
| |   | | `-CXXThisExpr 0x55555c85e730 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55555c85e770 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55555c85e700 <col:12> 'const char *const' lvalue .data 0x55555c846e80
| |   |     `-DeclRefExpr 0x55555c85e6e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55555c85e850 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55555c85e808 <col:12> 'int' lvalue ->length 0x55555c846ee8
| |   | | `-CXXThisExpr 0x55555c85e7f8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55555c85e838 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55555c85e7c8 <col:12> 'const int' lvalue .length 0x55555c846ee8
| |   |     `-DeclRefExpr 0x55555c85e7a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55555c85e918 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55555c85e8d0 <col:12> 'String::memo_t *' lvalue ->memo 0x55555c846f78
| |   | | `-CXXThisExpr 0x55555c85e8c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55555c85e900 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55555c85e890 <col:12> 'String::memo_t *const' lvalue .memo 0x55555c846f78
| |   |     `-DeclRefExpr 0x55555c85e870 <col:12> 'const String::rep_t' lvalue ParmVar 0x55555c85e458 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55555c85e960 <col:12>
| |     `-UnaryOperator 0x55555c85e948 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55555c85e938 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55555c85e4c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555c85e4c8
|   `-ParmVarDecl 0x55555c85e5d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55555c846ff0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55555c847238 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55555c847058 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55555c8470d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55555c847150 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55555c84cfd0 <col:79, line:261:5>
|   |-BinaryOperator 0x55555c84cc48 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55555c84cbe0 <col:2, col:5> 'const char *' lvalue .data 0x55555c846e80
|   | | `-MemberExpr 0x55555c84cbb0 <col:2> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|   | |   `-CXXThisExpr 0x55555c84cba0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55555c84cc30 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55555c84cc10 <col:12> 'const char *' lvalue ParmVar 0x55555c847058 'data' 'const char *'
|   |-BinaryOperator 0x55555c84cd10 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55555c84cca8 <col:2, col:5> 'int' lvalue .length 0x55555c846ee8
|   | | `-MemberExpr 0x55555c84cc78 <col:2> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|   | |   `-CXXThisExpr 0x55555c84cc68 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55555c84ccf8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55555c84ccd8 <col:14> 'int' lvalue ParmVar 0x55555c8470d8 'length' 'int'
|   `-IfStmt 0x55555c84cfb8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55555c84ce30 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55555c84ce18 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55555c84cdf8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55555c84cdd8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55555c84cd70 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55555c846f78
|     |       | `-MemberExpr 0x55555c84cd40 <col:7> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|     |       |   `-CXXThisExpr 0x55555c84cd30 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55555c84cdc0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55555c84cda0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55555c847150 'memo' 'String::memo_t *'
|     `-CallExpr 0x55555c84cf90 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55555c84cf78 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55555c84ce80 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55555c835c68 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55555c84cee8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55555c846848
|         `-ImplicitCastExpr 0x55555c84ced0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55555c84ceb0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55555c847150 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55555c8474e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55555c847308 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55555c847388 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55555c847400 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55555c846ff0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55555c84d458 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55555c84d5e8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55555c84d550 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55555c84d4c0 <col:2> '<bound member function type>' ->assign_memo 0x55555c847238
|     | `-ImplicitCastExpr 0x55555c84d588 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55555c84d4b0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55555c84d5a0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55555c84d4f0 <col:14> 'const char *' lvalue ParmVar 0x55555c847308 'data' 'const char *'
|     |-ImplicitCastExpr 0x55555c84d5b8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55555c84d510 <col:20> 'int' lvalue ParmVar 0x55555c847388 'length' 'int'
|     `-ImplicitCastExpr 0x55555c84d5d0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55555c84d530 <col:28> 'String::memo_t *' lvalue ParmVar 0x55555c847400 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55555c847678 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55555c8475b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55555c84d840 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55555c84d7c0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55555c84d610 <col:2> '<bound member function type>' ->assign_memo 0x55555c847238
|     | `-CXXThisExpr 0x55555c84d600 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55555c84d7f8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55555c84d690 <col:14, col:19> 'const char *' lvalue .data 0x55555c846e80
|     |   `-MemberExpr 0x55555c84d660 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55555c846ff0
|     |     `-DeclRefExpr 0x55555c84d640 <col:14> 'const String' lvalue ParmVar 0x55555c8475b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55555c84d810 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55555c84d710 <col:25, col:30> 'int' lvalue .length 0x55555c846ee8
|     |   `-MemberExpr 0x55555c84d6e0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55555c846ff0
|     |     `-DeclRefExpr 0x55555c84d6c0 <col:25> 'const String' lvalue ParmVar 0x55555c8475b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55555c84d828 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55555c84d790 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55555c846f78
|         `-MemberExpr 0x55555c84d760 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55555c846ff0
|           `-DeclRefExpr 0x55555c84d740 <col:38> 'const String' lvalue ParmVar 0x55555c8475b8 'x' 'const String &'
|-CXXMethodDecl 0x55555c847740 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55555c84e200 <col:31, line:278:5>
|   `-IfStmt 0x55555c84e1e8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55555c84d8e0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55555c84d8c8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55555c84d898 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55555c846f78
|     |     `-MemberExpr 0x55555c84d868 <col:6> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|     |       `-CXXThisExpr 0x55555c84d858 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55555c84e1c0 <col:15, line:277:2>
|       |-ParenExpr 0x55555c84dd90 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55555c84dd60 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55555c84d9f0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55555c84d9d8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55555c84d9c0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55555c84d980 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55555c846848
|       |   |       `-ImplicitCastExpr 0x55555c84d968 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55555c84d938 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55555c846f78
|       |   |           `-MemberExpr 0x55555c84d908 <col:27> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|       |   |             `-CXXThisExpr 0x55555c84d8f8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55555c84da50 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55555c84da30 <col:54> 'int' 0
|       |   `-CallExpr 0x55555c84dcc0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55555c84dca8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55555c84dc28 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55555c84dd00 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55555c84db38 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55555c84dd18 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55555c84db68 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55555c84dd30 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55555c84dba0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55555c84dd48 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55555c84dc10 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55555c84dbf8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55555c84dbc0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55555c84e0e0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55555c84dfa0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55555c84df88 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55555c84df00 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55555c8370b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55555c84ded0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55555c846848
|       | |   `-ImplicitCastExpr 0x55555c84deb8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55555c84de88 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55555c846f78
|       | |       `-MemberExpr 0x55555c84de58 <col:40> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|       | |         `-CXXThisExpr 0x55555c84de48 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55555c84e0a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55555c84e088 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55555c84dfc8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55555c84bf20 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55555c84e0c8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55555c84e028 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55555c846f78
|       |       `-MemberExpr 0x55555c84dff8 <col:15> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|       |         `-CXXThisExpr 0x55555c84dfe8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55555c84e1a0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55555c84e138 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55555c846f78
|         | `-MemberExpr 0x55555c84e108 <col:6> 'String::rep_t' lvalue ->_r 0x55555c846ff0
|         |   `-CXXThisExpr 0x55555c84e0f8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55555c84e188 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55555c84e168 <col:16> 'int' 0
|-CXXMethodDecl 0x55555c8479d8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55555c8477f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55555c847878 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55555c8478f0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55555c847ab0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55555c847d00 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55555c847b68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55555c847be8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55555c847c60 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55555c847ee8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55555c847dd0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55555c847e50 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55555c847fe8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55555c84e2d8 <col:41, line:286:5>
|   `-ReturnStmt 0x55555c84e2c8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55555c84e298 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55555c84e260 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55555c84e248 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55555c84e228 <col:46> 'int' 1
|-CXXMethodDecl 0x55555c848288 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55555c8480a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55555c848120 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55555c8481a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55555c84bf20 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55555c848350 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55555c84bff0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55555c84c1c0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55555c84c0a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55555c84c128 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55555c84c280 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55555c84c348 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55555c84c448 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55555c84c4c0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55555c84c538 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55555c84c5a0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55555c84c6a0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55555c84c6f0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555c84c680 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55555c84c660 <col:22> 'int' 14
|-CXXMethodDecl 0x55555c84c908 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55555c84c720 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55555c84c7a0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55555c84c820 <col:43> col:46 'int'
|-FriendDecl 0x55555c84ca10 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55555c84caa0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555cacfce0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55555cacfeb8 prev 0x55555cacfce0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55555cacff48 <col:46, col:52> col:46 public
|-TypedefDecl 0x55555cacff70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cad18d0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55555cad1880 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55555cad1860 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55555cad0188 'type'
|     `-SubstTemplateTypeParmType 0x55555cad0150 'String' sugar
|       |-TemplateTypeParmType 0x55555c8014a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c801450 'T'
|       `-RecordType 0x55555c83dc90 'String'
|         `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad1988 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55555cad1950 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55555cad1930 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55555cad18d0 'type'
|     `-ElaboratedType 0x55555cad1880 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55555cad1860 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55555cad0188 'type'
|         `-SubstTemplateTypeParmType 0x55555cad0150 'String' sugar
|           |-TemplateTypeParmType 0x55555c8014a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55555c801450 'T'
|           `-RecordType 0x55555c83dc90 'String'
|             `-CXXRecord 0x55555c83dc00 'String'
|-CXXMethodDecl 0x55555cad1b08 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55555cad1a18 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55555cad1bf8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55555cad1cd8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55555cad1cd8
|-CXXMethodDecl 0x55555cad1fa8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55555cad1eb0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55555cad21e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55555cad2060 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cad20d8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad23b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55555cad22a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cad2320 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad2518 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55555cad25e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55555cad2838 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55555cad26a8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55555cad2720 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad2a98 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55555cad2908 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55555cad2980 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad2c58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55555cad2b68 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad2e18 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55555cad2d20 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad2ed0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55555cad2f80 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55555cad31b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55555cad3030 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cad30a8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55555cad3458 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55555cad3360 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55555cad3520 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55555cad3570 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55555cad35c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555ca75430 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55555c90fa98 prev 0x55555ca75430 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55555c910fa0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55555c910f50 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55555c910f30 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55555c910de0 'type'
|     `-SubstTemplateTypeParmType 0x55555c910c70 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55555c7d7250 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55555c7d71f8 'F'
|       `-RecordType 0x55555c9108d0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55555c9107f0 'typed_array_memory'
|-FieldDecl 0x55555cad3610 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55555cad3660 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55555cad3698 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|   |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55555c80e768 'T'
|   `-RecordType 0x55555c83dc90 'String'
|     `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad3728 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55555cad36f0 'String &'
|   `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-RecordType 0x55555c83dc90 'String'
|       `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad37b8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55555cad3780 'const String &'
|   `-QualType 0x55555c90fb31 'const String' const
|     `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-RecordType 0x55555c83dc90 'String'
|         `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad3848 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55555cad3810 'String *'
|   `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-RecordType 0x55555c83dc90 'String'
|       `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad38d8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55555cad38a0 'const String *'
|   `-QualType 0x55555c90fb31 'const String' const
|     `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-RecordType 0x55555c83dc90 'String'
|         `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad4530 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55555cad44e0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55555cad44c0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55555cad43f8 'type'
|     `-LValueReferenceType 0x55555cad43c0 'const String &'
|       `-QualType 0x55555cad4161 'const String' const
|         `-SubstTemplateTypeParmType 0x55555cad4160 'String' sugar
|           |-TemplateTypeParmType 0x55555c7e11a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55555c7e1148 'T'
|           `-RecordType 0x55555c83dc90 'String'
|             `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad4598 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55555cad3780 'const String &'
|   `-QualType 0x55555c90fb31 'const String' const
|     `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-RecordType 0x55555c83dc90 'String'
|         `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad45f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cad4658 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55555cad3810 'String *'
|   `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-RecordType 0x55555c83dc90 'String'
|       `-CXXRecord 0x55555c83dc00 'String'
|-TypedefDecl 0x55555cad46c0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55555cad38a0 'const String *'
|   `-QualType 0x55555c90fb31 'const String' const
|     `-SubstTemplateTypeParmType 0x55555c90fb30 'String' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-RecordType 0x55555c83dc90 'String'
|         `-CXXRecord 0x55555c83dc00 'String'
|-EnumDecl 0x55555cad4718 <line:134:5> col:5
| `-EnumConstantDecl 0x55555cad4810 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55555cad47f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55555c80fe48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55555c80fe20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55555c80fe00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55555cad4898 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55555cad4b28 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cad4950 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cad49f0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55555cad4db8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55555cad4ca0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55555cad5078 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55555cad4f60 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55555cad5390 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55555cad5270 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55555cad56a0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55555cad5580 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55555cad5990 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cad57d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cad5850 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55555cad5ab8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55555cad5b68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad5bc0 <col:30> Inherited
|-CXXMethodDecl 0x55555cad5c08 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55555cad5cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad5d10 <col:30> Inherited
|-CXXMethodDecl 0x55555cad5dd8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55555cad5e88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad5ee0 <col:30> Inherited
|-CXXMethodDecl 0x55555cad5f28 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55555cad5fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad6030 <col:30> Inherited
|-CXXMethodDecl 0x55555cad6078 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55555cad6128 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad6180 <col:30> Inherited
|-CXXMethodDecl 0x55555cad61c8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55555cad6278 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cad62d0 <col:30> Inherited
|-CXXMethodDecl 0x55555cad62f8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55555cad63a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55555cad6458 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55555cad6618 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cad6508 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cad6580 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55555cad6768 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55555cad66d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cad6918 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55555cad6820 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55555cad69d0 <col:20>
| `-OptimizeNoneAttr 0x55555cad6a28 <col:30>
|-CXXMethodDecl 0x55555cad6b48 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55555cad6a50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55555cad6c00 <col:20>
| `-OptimizeNoneAttr 0x55555cad6c58 <col:30>
|-CXXMethodDecl 0x55555cad6d10 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55555cad6c80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cad6e58 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55555cad6dc8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cad6f88 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55555cad7088 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55555cad7158 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55555cad7228 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55555cad7368 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55555cad72d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cad74b0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55555cad7420 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cad75f8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55555cad7568 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55555cad76b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55555cad77b0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55555cad7720 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55555cad7868 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55555cad7928 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55555cad7a28 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55555cad7ba8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55555cad7ae8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55555cad8378 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55555cad7c60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55555cad82d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55555cad81d8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55555cad8458 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55555cad85a8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55555cad8518 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55555cad8660 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55555cad88a8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cad8720 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55555cad8798 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55555cad8a38 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55555cad8978 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55555cad8c48 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55555cad8b00 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55555cad8b78 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55555cad8d08 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55555cad8f68 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55555cad8e70 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55555cad9038 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55555cad9038

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb6c8b8 prev 0x55555cae5628 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555cb6c9b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55555cb6ca40 <col:22, col:28> col:22 public
|-EnumDecl 0x55555cb6ca68 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55555cb6cb88 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cb68 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55555cb6cb50 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55555cb6cb30 <col:14> 'int' 999
| |-EnumConstantDecl 0x55555cb6cc30 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cc10 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55555cb6cbf8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55555cb6cbd8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55555cb6ccc0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cca0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55555cb6cc80 <col:17> 'int' 0
| |-EnumConstantDecl 0x55555cb6cd50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cd30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55555cb6cd10 <col:13> 'int' 1
| |-EnumConstantDecl 0x55555cb6cde0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cdc0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55555cb6cda0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55555cb6ce70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6ce50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55555cb6ce30 <col:13> 'int' 3
| |-EnumConstantDecl 0x55555cb6cf00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cee0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55555cb6cec0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55555cb6cf90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6cf70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55555cb6cf50 <col:14> 'int' 5
| |-EnumConstantDecl 0x55555cb6d020 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55555cb6d000 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55555cb6cfe0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55555cb6d0b0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55555cb6d090 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55555cb6d070 <col:13> 'int' 7
|-VarDecl 0x55555cb6d120 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55555cb6d1a8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55555cb6d230 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55555cb6d2b8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55555cb6d340 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55555cb6d3c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55555cb6d450 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55555cb6d4d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55555cb6d560 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55555cb6d5e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55555cb6d670 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55555cb6d770 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55555cb72a68 '_nerrors' 'int'
| | `-IntegerLiteral 0x55555cb731f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55555cb73268 <col:16, line:129:5>
|-CXXDestructorDecl 0x55555cb6d860 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55555cb73278 <col:29, line:132:5>
|-CXXMethodDecl 0x55555cb6da18 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55555cb6d950 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555cb6dae0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55555cb6dbc8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55555cb732d0 <col:44, line:161:5>
|   `-ReturnStmt 0x55555cb732c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55555cb732a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55555cb73288 <col:9> 'ErrorHandler *' lvalue Var 0x55555cb72ac8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55555cb6dd08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55555cb6dc78 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55555cb6ddd0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55555cb73330 <col:43, line:173:5>
|   `-ReturnStmt 0x55555cb73320 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55555cb73308 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55555cb732e8 <col:9> 'ErrorHandler *' lvalue Var 0x55555cb72b40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55555cb6de88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55555cb6df08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55555cb6e018 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55555cb6df88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e168 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55555cb6e0d8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e2c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55555cb6e228 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e418 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55555cb6e380 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e570 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55555cb6e4d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e780 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55555cb6e628 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55555cb6e6a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6e958 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55555cb6e840 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55555cb6e8c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6eb88 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55555cb6ea18 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55555cb6ea98 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6ed68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55555cb6ec48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55555cb6ecc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6ef48 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55555cb6ee28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55555cb6eea8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55555cb6f0d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55555cb6f008 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55555cb6f2a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55555cb6f188 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55555cb6f200 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55555cb73588 <col:57, line:234:5>
|   `-ReturnStmt 0x55555cb73578 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55555cb73560 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55555cb73508 <col:9, col:41> 'int'
|         |-MemberExpr 0x55555cb734d8 <col:9> '<bound member function type>' ->xmessage 0x55555cb6f0d0
|         | `-CXXThisExpr 0x55555cb734c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55555cb73548 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55555cb73530 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55555cb734a8 <col:18, col:40> 'String' (CXXTemporary 0x55555cb734a8)
|               `-CallExpr 0x55555cb73470 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55555cb73458 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55555cb733d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55555cb71298 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55555cb733f0 <col:31> 'const String' lvalue ParmVar 0x55555cb6f200 'str' 'const String &'
|                 `-DeclRefExpr 0x55555cb73410 <col:36> 'const String' lvalue ParmVar 0x55555cb6f188 'anno' 'const String &'
|-CXXMethodDecl 0x55555cb6f580 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55555cb6f360 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55555cb6f3e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55555cb6f458 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55555cb73818 <col:68, line:243:5>
|   `-ReturnStmt 0x55555cb73808 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55555cb737f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55555cb73790 <col:9, col:41> 'int'
|         |-MemberExpr 0x55555cb73760 <col:9> '<bound member function type>' ->xmessage 0x55555cb6f2a0
|         | `-CXXThisExpr 0x55555cb73750 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55555cb73628 <col:18> 'const String' lvalue ParmVar 0x55555cb6f360 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55555cb737d8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55555cb737c0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55555cb73730 <col:24, col:40> 'String' (CXXTemporary 0x55555cb73730)
|               `-CXXMemberCallExpr 0x55555cb736c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55555cb73658 <col:24> '<bound member function type>' ->vformat 0x55555cb70760
|                 | `-CXXThisExpr 0x55555cb73648 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55555cb736f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55555cb73688 <col:32> 'const char *' lvalue ParmVar 0x55555cb6f3e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55555cb73710 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55555cb736a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55555cb6f458 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55555cb6f820 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55555cb6f648 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55555cb6f6c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55555cb6f738 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55555cb73b58 <col:23, line:254:5>
|   `-ReturnStmt 0x55555cb73b48 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55555cb73b30 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55555cb73ad0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55555cb73aa0 <col:9> '<bound member function type>' ->xmessage 0x55555cb6f2a0
|         | `-CXXThisExpr 0x55555cb73a90 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55555cb73b18 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55555cb73b00 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55555cb73a50 <col:18, col:65> 'String' (CXXTemporary 0x55555cb73a50)
|         |     `-CallExpr 0x55555cb739e8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55555cb739d0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55555cb738b8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55555cb71298 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55555cb738d8 <col:31> 'const String' lvalue ParmVar 0x55555cb6f6c0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55555cb73a30 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55555cb73a18 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55555cb739b0 <col:37, col:64> 'String' (CXXTemporary 0x55555cb739b0)
|         |             `-CallExpr 0x55555cb73980 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55555cb73968 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55555cb738f8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55555cb718e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55555cb73918 <col:56> 'const String' lvalue ParmVar 0x55555cb6f648 'landmark' 'const String &'
|         `-DeclRefExpr 0x55555cb73a70 <col:68> 'const String' lvalue ParmVar 0x55555cb6f738 'str' 'const String &'
|-CXXMethodDecl 0x55555cb6fba0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55555cb6f8e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55555cb6f960 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55555cb6f9e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55555cb6fa58 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55555cb73e10 <col:34, line:267:5>
|   `-ReturnStmt 0x55555cb73e00 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55555cb73de8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55555cb73d80 <col:9, col:51> 'int'
|         |-MemberExpr 0x55555cb73d50 <col:9> '<bound member function type>' ->xmessage 0x55555cb6f820
|         | `-CXXThisExpr 0x55555cb73d40 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55555cb73bf8 <col:18> 'const String' lvalue ParmVar 0x55555cb6f8e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55555cb73c18 <col:28> 'const String' lvalue ParmVar 0x55555cb6f960 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55555cb73dd0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55555cb73db8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55555cb73d20 <col:34, col:50> 'String' (CXXTemporary 0x55555cb73d20)
|               `-CXXMemberCallExpr 0x55555cb73cb8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55555cb73c48 <col:34> '<bound member function type>' ->vformat 0x55555cb70760
|                 | `-CXXThisExpr 0x55555cb73c38 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55555cb73ce8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55555cb73c78 <col:42> 'const char *' lvalue ParmVar 0x55555cb6f9e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55555cb73d00 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55555cb73c98 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55555cb6fa58 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55555cb6fcb0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55555cb73e90 <col:25, line:288:5>
|   `-ReturnStmt 0x55555cb73e80 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55555cb73e68 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55555cb73e38 <col:9> 'const int' lvalue ->_nerrors 0x55555cb72a68
|         `-CXXThisExpr 0x55555cb73e28 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55555cb6fec0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55555cb6fd68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55555cb6fde8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55555cb701a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55555cb6ff88 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55555cb70008 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55555cb70080 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55555cb70340 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55555cb70278 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55555cb70588 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55555cb70400 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55555cb70478 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55555cb740f0 <col:58, line:357:5>
|   `-ReturnStmt 0x55555cb740e0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55555cb740c8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55555cb74098 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55555cb74080 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55555cb74060 <col:9, col:29> 'String' (CXXTemporary 0x55555cb74060)
|             `-CallExpr 0x55555cb73ff0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55555cb73fd8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55555cb73f58 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55555cb701a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55555cb73ef8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55555cb74028 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55555cb73f18 <col:21> 'const char *' lvalue ParmVar 0x55555cb70400 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55555cb74040 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55555cb73f38 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55555cb70478 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55555cb70760 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55555cb70650 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55555cb706c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55555cb708b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55555cb70828 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55555cb70a00 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55555cb70970 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55555cb70ca0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55555cb70ab8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55555cb70b38 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55555cb70bb0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55555cb70e00 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55555cb70d70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55555cb74208 <col:37, line:441:5>
|   `-IfStmt 0x55555cb741f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55555cb74178 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55555cb74148 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55555cb74108 <col:6> 'int' lvalue ParmVar 0x55555cb70d70 'level' 'int'
|     | `-ImplicitCastExpr 0x55555cb74160 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55555cb74128 <col:15> 'ErrorHandler::Level' EnumConstant 0x55555cb6ce70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55555cb741d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55555cb741a8 <col:8> 'int' lvalue ->_nerrors 0x55555cb72a68
|         `-CXXThisExpr 0x55555cb74198 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55555cb70ec8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55555cb742a0 <col:26, line:448:5>
|   `-BinaryOperator 0x55555cb74280 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55555cb74230 <col:2> 'int' lvalue ->_nerrors 0x55555cb72a68
|     | `-CXXThisExpr 0x55555cb74220 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55555cb74260 <col:13> 'int' 0
|-CXXMethodDecl 0x55555cb71090 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55555cb70f80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55555cb70ff8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55555cb71298 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55555cb71150 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55555cb711c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55555cb71548 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55555cb71358 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55555cb713d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55555cb71458 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55555cb71600 <col:59> 0 0
|-CXXMethodDecl 0x55555cb71798 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55555cb71678 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55555cb716f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55555cb74910 <col:70, line:534:5>
|   |-DeclStmt 0x55555cb74410 <line:528:2, col:20>
|   | |-VarDecl 0x55555cb742c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55555cb74330 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55555cb74368 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55555cb743d0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55555cb744e0 <line:529:2, col:23>
|   | `-VarDecl 0x55555cb74440 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55555cb744c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55555cb744a8 <col:18> 'const char *' lvalue ParmVar 0x55555cb71678 'begin' 'const char *'
|   |-DoStmt 0x55555cb748a8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55555cb747d8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55555cb747c0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55555cb747a0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55555cb744f8 <col:6> 'const char *' lvalue Var 0x55555cb74440 'x' 'const char *'
|   | |     `-CallExpr 0x55555cb746f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55555cb746d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55555cb74690 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55555cb72f40 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55555cb74758 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55555cb74740 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55555cb745b0 <col:20, col:27> 'String' (CXXTemporary 0x55555cb745b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55555cb74578 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55555cb74770 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55555cb745d0 <col:30> 'const char *' lvalue Var 0x55555cb74440 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55555cb74788 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55555cb745f0 <col:33> 'const char *' lvalue ParmVar 0x55555cb716f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55555cb74630 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55555cb74610 <col:39> 'String' lvalue Var 0x55555cb742c8 'name' 'String'
|   | |       |-UnaryOperator 0x55555cb74668 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55555cb74648 <col:46> 'String' lvalue Var 0x55555cb74368 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55555cb74680 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55555cb74890 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55555cb74878 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55555cb74858 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55555cb74828 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|   |         `-ImplicitCastExpr 0x55555cb74810 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55555cb747f0 <col:11> 'String' lvalue Var 0x55555cb742c8 'name' 'String'
|   `-ReturnStmt 0x55555cb74900 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55555cb748e8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55555cb748c8 <col:9> 'const char *' lvalue Var 0x55555cb74440 'x' 'const char *'
|-CXXMethodDecl 0x55555cb718e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55555cb71858 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55555cb74f18 <col:55, line:550:5>
|   `-IfStmt 0x55555cb74ef0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55555cb74b50 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55555cb74b38 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55555cb74b20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55555cb74b00 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55555cb74ad0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|     | |       `-DeclRefExpr 0x55555cb74970 <col:6> 'const String' lvalue ParmVar 0x55555cb71858 'x' 'const String &'
|     | `-BinaryOperator 0x55555cb74ab0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55555cb74a80 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55555cb74a30 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55555cb74a18 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55555cb749d0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55555c85ac30 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55555cb74990 <col:11> 'const String' lvalue ParmVar 0x55555cb71858 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55555cb749b0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55555cb74a98 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55555cb74a68 <col:19> 'char' 123
|     |-ReturnStmt 0x55555cb74bc0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55555cb74b90 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55555cb74b70 <col:13> 'const String' lvalue ParmVar 0x55555cb71858 'x' 'const String &'
|     `-IfStmt 0x55555cb74ec8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55555cb74c58 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55555cb74c40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55555cb74c20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55555cb74bf0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |       `-DeclRefExpr 0x55555cb74bd0 <col:11> 'const String' lvalue ParmVar 0x55555cb71858 'x' 'const String &'
|       |-ReturnStmt 0x55555cb74de0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55555cb74dc8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55555cb74d98 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55555cb74d80 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55555cb74d60 <col:13, col:29> 'String' (CXXTemporary 0x55555cb74d60)
|       |         `-CallExpr 0x55555cb74d10 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55555cb74cf8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55555cb74c70 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55555cb71090 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55555cb74d40 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55555cb74c90 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55555cb74cb0 <col:28> 'const String' lvalue ParmVar 0x55555cb71858 'x' 'const String &'
|       `-ReturnStmt 0x55555cb74eb8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55555cb74ea0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55555cb74e70 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55555cb74e58 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55555cb74e38 <col:13, col:20> 'String' (CXXTemporary 0x55555cb74e38)
|                 `-CXXTemporaryObjectExpr 0x55555cb74e00 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55555cb71ab0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55555cb719a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55555cb71a18 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555cb731e8 <col:71> 'bool' false
|-CXXRecordDecl 0x55555cb71b60 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55555cb71e58 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55555cb71df0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55555cb71d90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55555cb71d50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55555c83dc90 'String'
|       | `-CXXRecord 0x55555c83dc00 'String'
|       |-BuiltinType 0x55555c5103b0 'int'
|       `-DecayedType 0x55555cae6670 '__va_list_tag *' sugar
|         |-TypedefType 0x55555cae6640 'va_list' sugar
|         | |-Typedef 0x55555c72ed40 'va_list'
|         | `-TypedefType 0x55555c72ecf0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55555c666918 '__gnuc_va_list'
|         |   `-TypedefType 0x55555c666880 '__builtin_va_list' sugar
|         |     |-Typedef 0x55555c551c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55555c551bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55555c511100 '__va_list_tag'
|         |         `-CXXRecord 0x55555c511068 '__va_list_tag'
|         `-PointerType 0x55555c7345e0 '__va_list_tag *'
|           `-RecordType 0x55555c511100 '__va_list_tag'
|             `-CXXRecord 0x55555c511068 '__va_list_tag'
|-EnumDecl 0x55555cb71eb0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55555cb71fb0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72510 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb71f90 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55555cb71f70 <col:16> 'int' 1
| |-EnumConstantDecl 0x55555cb72040 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72528 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb72020 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55555cb72000 <col:21> 'int' 2
| |-EnumConstantDecl 0x55555cb720d0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72540 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb720b0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55555cb72090 <col:22> 'int' 4
| |-EnumConstantDecl 0x55555cb72160 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72558 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb72140 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55555cb72120 <col:17> 'int' 8
| |-EnumConstantDecl 0x55555cb721f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72570 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb721d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55555cb721b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55555cb72280 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb72588 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb72260 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55555cb72240 <col:19> 'int' 32
| |-EnumConstantDecl 0x55555cb72310 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb725a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb722f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55555cb722d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55555cb723a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb725b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb72380 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55555cb72360 <col:14> 'int' 128
| |-EnumConstantDecl 0x55555cb72430 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55555cb725d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb72410 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55555cb723f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55555cb724c0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55555cb725e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555cb724a0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55555cb72480 <col:12> 'int' 1024
|-CXXMethodDecl 0x55555cb727f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55555cb72610 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55555cb726b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55555cb72980 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55555cb728b8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55555cb72a28 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55555cb72a68 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55555cb72ac8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55555cb72b40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55555cb72f40 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55555cb72bb8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55555cb72c38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55555cb72cb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55555cb72d30 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55555cb72da8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55555cb72e20 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55555cb73068 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55555cb73068
| `-ParmVarDecl 0x55555cb73178 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55555cb75278 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55555cb75278
  `-ParmVarDecl 0x55555cb75388 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cae56b8 prev 0x55555ca9b3b8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555cae57b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55555cae5840 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55555cae5978 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55555cae5878 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55555cae6da0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55555cae6d80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55555cae6918 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55555cae6e30 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55555cae6df0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55555cae5878 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55555cae6980 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55555cae6eb0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55555cae6e70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55555cae69e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55555cae6ef0 <col:54> 'bool' false
| `-CompoundStmt 0x55555cae6ff8 <col:61, line:38:5>
|   `-BinaryOperator 0x55555cae6fd8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55555cae6f70 <col:9> 'const Element *' lvalue ->_context 0x55555cae68b8
|     | `-CXXThisExpr 0x55555cae6f60 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55555cae6fc0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55555cae6fa0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55555cae5b88 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55555cae5a38 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55555cae5ab0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55555cae6dd8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55555cae6db8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55555cae68b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55555cae7050 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55555cae7010 <col:20> 'const Element *' lvalue ParmVar 0x55555cae5a38 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55555cae6918 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55555cae70d0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55555cae7090 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55555cae5ab0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55555cae6980 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55555cae7150 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55555cae7110 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55555cae69e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55555cae7190 <col:73> 'bool' false
| `-CompoundStmt 0x55555cae7208 <col:80, line:46:5>
|-CXXMethodDecl 0x55555cae5cb8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55555cae7280 <col:36, line:51:5>
|   `-ReturnStmt 0x55555cae7270 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55555cae7258 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55555cae7228 <col:16> 'const Element *const' lvalue ->_context 0x55555cae68b8
|         `-CXXThisExpr 0x55555cae7218 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55555cae5da8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55555cae7300 <col:32, line:57:5>
|   `-ReturnStmt 0x55555cae72f0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55555cae72d8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55555cae72a8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55555cae6918
|         `-CXXThisExpr 0x55555cae7298 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55555cae5e68 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55555cae5ff0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55555cae5f20 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55555cae6140 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55555cae60b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55555cae6290 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55555cae6200 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55555cae6498 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55555cae6348 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55555cae63c0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55555cae67c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55555cae6558 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55555cae65d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55555cae66a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55555cae6880 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55555cae68b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55555cae6918 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55555cae6980 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55555cae69e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55555cae6a30 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55555cae6a30
| `-ParmVarDecl 0x55555cae6b48 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55555cae6be8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55555cae6be8
| `-ParmVarDecl 0x55555cae6cf8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55555cb7ea00 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555cb0b720 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55555cb0b8f8 prev 0x55555cb0b720 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55555cb0b988 <col:46, col:52> col:46 public
|-TypedefDecl 0x55555cb0b9b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb18fa0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55555cb18f50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55555cb0be60 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55555cb0bd60 'type'
|     `-TemplateSpecializationType 0x55555cb0bcf0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55555cb0bbd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55555cb0bbb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55555cb0bb90 <col:24> 'unsigned long' 4
|       `-RecordType 0x55555cb0bcd0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55555cb0bbf0 'char_array'
|-TypedefDecl 0x55555cb19058 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55555cb19020 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55555cb19000 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55555cb18fa0 'type'
|     `-ElaboratedType 0x55555cb18f50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55555cb0be60 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55555cb0bd60 'type'
|         `-TemplateSpecializationType 0x55555cb0bcf0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55555cb0bbd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55555cb0bbb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55555cb0bb90 <col:24> 'unsigned long' 4
|           `-RecordType 0x55555cb0bcd0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55555cb0bbf0 'char_array'
|-CXXMethodDecl 0x55555cb191d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55555cb190e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55555cb192c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55555cb193a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55555cb19678 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55555cb19580 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55555cb198b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55555cb19730 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cb197a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb19a88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55555cb19978 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cb199f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb19be8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55555cb19cb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55555cb19f08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55555cb19d78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55555cb19df0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb1a168 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55555cb19fd8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55555cb1a050 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb1a328 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55555cb1a238 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb1a4e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55555cb1a3f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb1a5a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55555cb1a650 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55555cb1a888 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55555cb1a700 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55555cb1a778 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55555cb1ab28 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55555cb1aa30 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55555cb1abf0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55555cb1ac40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55555cb1ac90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555cb0a128 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55555cb0a338 prev 0x55555cb0a128 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55555cb0b690 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55555cb0b640 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55555cb0b620 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55555cb0b4d0 'type'
|     `-SubstTemplateTypeParmType 0x55555cb0b2f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55555c7d6ad0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c7d6a78 'T'
|       `-RecordType 0x55555cb0ae40 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55555cb0ad58 'sized_array_memory'
|-FieldDecl 0x55555cb1ace0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55555cb1ad30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55555cb1ad68 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|   |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55555c80e768 'T'
|   `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1adf8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55555cb1adc0 'int &'
|   `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1aeb8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55555cb1ae80 'const int &'
|   `-QualType 0x55555cb0a3d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1af48 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55555cb1af10 'int *'
|   `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1afd8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55555cb1afa0 'const int *'
|   `-QualType 0x55555cb0a3d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1bbc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55555cb1bb70 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55555cb1bb50 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55555cb1bae0 'type'
|     `-SubstTemplateTypeParmType 0x55555cb1b8a0 'int' sugar
|       |-TemplateTypeParmType 0x55555c7e18d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c7e1880 'T'
|       `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1bc28 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55555cb1ae80 'const int &'
|   `-QualType 0x55555cb0a3d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1bc80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1bce8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55555cb1af10 'int *'
|   `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|     |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55555c80e768 'T'
|     `-BuiltinType 0x55555c5103b0 'int'
|-TypedefDecl 0x55555cb1bd50 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55555cb1afa0 'const int *'
|   `-QualType 0x55555cb0a3d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55555cb0a3d0 'int' sugar
|       |-TemplateTypeParmType 0x55555c80e7c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55555c80e768 'T'
|       `-BuiltinType 0x55555c5103b0 'int'
|-EnumDecl 0x55555cb1bda8 <line:134:5> col:5
| `-EnumConstantDecl 0x55555cb1bea0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55555cb1be80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55555c80fe48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55555c80fe20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55555c80fe00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55555cb1bf28 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55555cb1c178 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cb1bfe0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cb1c080 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55555cb1c438 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55555cb1c320 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55555cb1c6f8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55555cb1c5e0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55555cb1ca40 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55555cb1c920 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55555cb1cd50 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55555cb1cc30 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55555cb1d040 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cb1ce88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cb1cf00 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55555cb1d168 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55555cb1d248 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d2a0 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d2e8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55555cb1d398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d3f0 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d4b8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55555cb1d568 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d5c0 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d608 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55555cb1d6b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d710 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d758 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55555cb1d808 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d860 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d8a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55555cb1d958 <col:20> Inherited
| `-OptimizeNoneAttr 0x55555cb1d9b0 <col:30> Inherited
|-CXXMethodDecl 0x55555cb1d9d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55555cb1da88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55555cb1db38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55555cb1dcf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cb1dbe8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55555cb1dc60 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55555cb1de48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55555cb1ddb8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cb1dff8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55555cb1df00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55555cb1e0b0 <col:20>
| `-OptimizeNoneAttr 0x55555cb1e108 <col:30>
|-CXXMethodDecl 0x55555cb1e228 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55555cb1e130 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55555cb1e2e0 <col:20>
| `-OptimizeNoneAttr 0x55555cb1e338 <col:30>
|-CXXMethodDecl 0x55555cb1e3f0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55555cb1e360 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cb1e538 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55555cb1e4a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cb1e668 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55555cb1e798 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55555cb1e868 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55555cb1e938 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55555cb1ea78 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55555cb1e9e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cb1ebc0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55555cb1eb30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55555cb1ed08 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55555cb1ec78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55555cb1edc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55555cb1eec0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55555cb1ee30 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55555cb1ef78 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55555cb1f038 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55555cb1f138 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55555cb1f2b8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55555cb1f1f8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55555cb1fa78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55555cb1f370 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55555cb1f9d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55555cb1f8d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55555cb1fb58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55555cb1fca8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55555cb1fc18 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55555cb1fd60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55555cb21328 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55555cb1fe20 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55555cb1fe98 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55555cb214e8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55555cb213f8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55555cb21738 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55555cb215b0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55555cb21628 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55555cb217f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55555cb21a58 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55555cb21960 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55555cb21b28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb08298 prev 0x55555caee400 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555cb08390 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55555cb08480 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55555cb324a0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55555cb08570 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55555cb324b0 <col:25, line:830:9>
|-CXXMethodDecl 0x55555cb08670 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55555cb08720 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55555cb087c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55555cb087c8
| `-ParmVarDecl 0x55555cb088d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55555cb09098 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55555cb09098
  `-ParmVarDecl 0x55555cb091a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555caee238 prev 0x55555ca9b448 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55555caee370 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55555caee400 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55555caee4b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55555caee5b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55555caee4e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55555cb230e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55555cb230c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55555caee8d8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55555caee750 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55555caee7c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55555cb23120 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55555cb23100 <col:59> 'int' 0
|-CXXConstructorDecl 0x55555caeeab0 <line:265:5, col:56> col:5 used Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55555caee9a0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55555caeea18 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55555cb23158 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55555cb23138 <col:55> 'int' 0
|-CXXConstructorDecl 0x55555caeee68 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55555caeec50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55555caeecc8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55555caeed40 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55555cb23190 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55555cb23170 <col:31> 'int' 0
|-CXXConstructorDecl 0x55555caef028 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55555caeef68 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55555caef120 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55555caef2d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55555caef210 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55555caef3c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55555cb23540 <col:24, line:291:5>
|   `-ReturnStmt 0x55555cb23530 <line:290:9, col:79>
|     `-BinaryOperator 0x55555cb23510 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55555cb233e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55555cb23340 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55555cb23320 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55555cb23218 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55555cb23200 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55555cb231e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55555cb231b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55555cb0a0c0
|       | |   |       `-CXXThisExpr 0x55555cb231a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55555cb23308 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55555cb232f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55555cb232b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55555cb23288 <col:28, col:35> '<bound member function type>' ->size 0x55555cad62f8
|       | |           `-ImplicitCastExpr 0x55555cb232d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55555cb23270 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55555cb23240 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55555cb0a0c0
|       | |                 `-CXXThisExpr 0x55555cb23230 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55555cb233d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55555cb233b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55555cb233a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55555cb23370 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55555cb21c70
|       |         `-CXXThisExpr 0x55555cb23360 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55555cb234f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55555cb234d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55555cb234c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55555cb23480 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55555cb23468 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55555cb23418 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55555cb21d20
|         |     |   `-CXXThisExpr 0x55555cb23408 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55555cb23448 <col:73> 'int' 0
|         `-IntegerLiteral 0x55555cb234a0 <col:79> 'int' 0
|-CXXMethodDecl 0x55555caef488 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55555cb23718 <col:32, line:296:5>
|   `-ReturnStmt 0x55555cb23708 <line:295:9, col:49>
|     `-BinaryOperator 0x55555cb236e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55555cb235c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55555cb235b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55555cb23598 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55555cb23568 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55555cb21c70
|       |       `-CXXThisExpr 0x55555cb23558 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55555cb236c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55555cb236b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55555cb23698 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55555cb23658 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55555cb23640 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55555cb235f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55555cb21d20
|         |     |   `-CXXThisExpr 0x55555cb235e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55555cb23620 <col:43> 'int' 0
|         `-IntegerLiteral 0x55555cb23678 <col:49> 'int' 0
|-CXXMethodDecl 0x55555caef578 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55555cb23928 <col:19, line:306:5>
|   |-IfStmt 0x55555cb23848 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55555cb23788 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55555cb23770 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55555cb23740 <col:13> 'Vector<String> *' lvalue ->_conf 0x55555cb0a0c0
|   | |     `-CXXThisExpr 0x55555cb23730 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55555cb23828 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55555cb237f8 <col:13, col:20> '<bound member function type>' ->clear 0x55555cad8d08
|   |     `-ImplicitCastExpr 0x55555cb237e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55555cb237b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55555cb0a0c0
|   |         `-CXXThisExpr 0x55555cb237a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55555cb238d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55555cb238a0 <col:9, col:16> '<bound member function type>' .clear 0x55555cb217f8
|   |   `-MemberExpr 0x55555cb23870 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55555cb21c10
|   |     `-CXXThisExpr 0x55555cb23860 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55555cb23918 <line:305:9, col:17>
|     `-UnaryOperator 0x55555cb23900 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb238f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55555caef7f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55555caef700 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55555caef978 <line:317:5, col:38> col:11 used push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55555caef8b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55555caefcf8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55555caefa20 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55555caefc58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55555caefac8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55555caefb40 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55555cb23c50 <col:67, line:327:5>
|     |-WhileStmt 0x55555cb23c00 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55555cb23a18 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55555cb23990 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55555ca9ade0 0x55555ca303a8 0x55555c879988 0x55555c879660 0x55555c86ae40 0x55555c86aaf0 0x55555c86a3e0 0x55555c83cd50 0x55555c7c9210
|     | | |-DeclRefExpr 0x55555cb23950 <col:16> 'Iter' lvalue ParmVar 0x55555caefac8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55555cb23970 <col:25> 'Iter' lvalue ParmVar 0x55555caefb40 'end' 'Iter'
|     | `-CompoundStmt 0x55555cb23be0 <col:30, line:325:9>
|     |   |-CallExpr 0x55555cb23b80 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55555cb23a60 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55555cb23b50 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55555cb23ae0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|     |   |   `-DeclRefExpr 0x55555cb23ac0 <col:24> 'Iter' lvalue ParmVar 0x55555caefac8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55555cb23bc8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55555cb23ba8 <col:15> 'Iter' lvalue ParmVar 0x55555caefac8 'begin' 'Iter'
|     `-ReturnStmt 0x55555cb23c40 <line:326:9, col:17>
|       `-UnaryOperator 0x55555cb23c28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb23c18 <col:17> 'Args *' this
|-CXXMethodDecl 0x55555caefe00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55555caefd70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55555caeff48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55555caefeb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55555caf0010 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55555cb23d30 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55555cb23cd0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55555cb23c80 <col:9> '<bound member function type>' ->reset_from 0x55555cb22098
|   | | `-CXXThisExpr 0x55555cb23c70 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55555cb23cb0 <col:20> 'int' 0
|   `-ReturnStmt 0x55555cb23d20 <line:352:9, col:17>
|     `-UnaryOperator 0x55555cb23d08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb23cf8 <col:17> 'Args *' this
|-VarDecl 0x55555caf00c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55555caf0130 <col:38> 'int' 1
|-VarDecl 0x55555caf01c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55555caf0228 <col:39> 'int' 2
|-VarDecl 0x55555caf02b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55555caf0320 <col:39> 'int' 4
|-VarDecl 0x55555caf03b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55555caf0418 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55555caf0798 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55555caf0490 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555caf06f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55555caf0540 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf05e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55555cb23e88 <col:43, line:371:5>
|     `-ReturnStmt 0x55555cb23e78 <line:370:9, col:34>
|       `-CallExpr 0x55555cb23e40 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb23d60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb23de0 <col:21> 'const char *' lvalue ParmVar 0x55555caf0540 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb23e00 <col:30> 'int' 0
|         `-DeclRefExpr 0x55555cb23e20 <col:33> 'T' lvalue ParmVar 0x55555caf05e8 'x' 'T &'
|-FunctionTemplateDecl 0x55555caf0ac8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55555caf0800 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555caf0a28 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55555caf08b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf0958 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55555cb23fd8 <col:45, line:375:5>
|     `-ReturnStmt 0x55555cb23fc8 <line:374:9, col:42>
|       `-CallExpr 0x55555cb23f90 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb23eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb23f30 <col:21> 'const char *' lvalue ParmVar 0x55555caf08b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb23f50 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55555cb23f70 <col:41> 'T' lvalue ParmVar 0x55555caf0958 'x' 'T &'
|-FunctionTemplateDecl 0x55555caf0df8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55555caf0b30 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555caf0d58 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55555caf0be0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf0c88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55555cb24128 <col:45, line:379:5>
|     `-ReturnStmt 0x55555cb24118 <line:378:9, col:43>
|       `-CallExpr 0x55555cb240e0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb24000 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb24080 <col:21> 'const char *' lvalue ParmVar 0x55555caf0be0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb240a0 <col:30> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
|         `-DeclRefExpr 0x55555cb240c0 <col:42> 'T' lvalue ParmVar 0x55555caf0c88 'x' 'T &'
|-FunctionTemplateDecl 0x55555caf1128 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55555caf0e60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55555caf1088 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55555caf0f10 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55555caf0fb8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55555cb24328 <col:46, line:383:5>
| |   `-ReturnStmt 0x55555cb24318 <line:382:9, col:55>
| |     `-CallExpr 0x55555cb242e0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55555cb24150 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55555cb241d0 <col:21> 'const char *' lvalue ParmVar 0x55555caf0f10 'keyword' 'const char *'
| |       |-BinaryOperator 0x55555cb242a0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55555cb24250 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55555cb24230 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55555cb24288 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55555cb24268 <col:42> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55555cb242c0 <col:54> 'T' lvalue ParmVar 0x55555caf0fb8 'x' 'T &'
| `-CXXMethodDecl 0x55555cb8fa38 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x55555cb8f850 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55555cb8f928 <col:40, col:43> col:43 x 'unsigned short &'
|-FunctionTemplateDecl 0x55555caf1528 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55555caf1190 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555caf1488 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55555caf1240 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf12c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55555caf1368 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55555cb24468 <col:54, line:388:5>
|     |-CallExpr 0x55555cb243f0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb24340 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55555cb24380 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55555cb24390 <col:30> 'const char *' lvalue ParmVar 0x55555caf1240 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb243b0 <col:39> 'int' lvalue ParmVar 0x55555caf12c0 'flags' 'int'
|     | `-DeclRefExpr 0x55555cb243d0 <col:46> 'T' lvalue ParmVar 0x55555caf1368 'x' 'T &'
|     `-ReturnStmt 0x55555cb24458 <line:387:9, col:17>
|       `-UnaryOperator 0x55555cb24440 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb24430 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555caf19d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55555caf1598 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555caf1618 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55555caf1938 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55555caf16d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf1778 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf1818 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb245d8 <col:74, line:403:5>
|     `-ReturnStmt 0x55555cb245c8 <line:402:9, col:56>
|       `-CallExpr 0x55555cb24588 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb24498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb24508 <col:28> 'const char *' lvalue ParmVar 0x55555caf16d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb24528 <col:37> 'int' 0
|         |-DeclRefExpr 0x55555cb24548 <col:40> 'T' lvalue ParmVar 0x55555caf1778 'x' 'T &'
|         `-DeclRefExpr 0x55555cb24568 <col:43> 'const V' lvalue ParmVar 0x55555caf1818 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55555caf1e48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55555caf1a48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555caf1ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55555caf1da8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55555caf1b88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf1c28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf1cc8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb24740 <col:76, line:407:5>
|     `-ReturnStmt 0x55555cb24730 <line:406:9, col:65>
|       `-CallExpr 0x55555cb246f0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb24600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb24670 <col:28> 'const char *' lvalue ParmVar 0x55555caf1b88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb24690 <col:37> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
|         |-DeclRefExpr 0x55555cb246b0 <col:49> 'T' lvalue ParmVar 0x55555caf1c28 'x' 'T &'
|         `-DeclRefExpr 0x55555cb246d0 <col:52> 'const V' lvalue ParmVar 0x55555caf1cc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55555caf2398 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55555caf1eb8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555caf1f38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55555caf22f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55555caf1ff8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf2078 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55555caf2118 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf21b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb248a8 <col:85, line:412:5>
|     |-CallExpr 0x55555cb24828 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb24758 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55555cb24798 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55555cb247a8 <col:37> 'const char *' lvalue ParmVar 0x55555caf1ff8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb247c8 <col:46> 'int' lvalue ParmVar 0x55555caf2078 'flags' 'int'
|     | |-DeclRefExpr 0x55555cb247e8 <col:53> 'T' lvalue ParmVar 0x55555caf2118 'x' 'T &'
|     | `-DeclRefExpr 0x55555cb24808 <col:56> 'const V' lvalue ParmVar 0x55555caf21b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55555cb24898 <line:411:9, col:17>
|       `-UnaryOperator 0x55555cb24880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb24870 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555caf2828 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55555caf2410 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf2488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55555caf2788 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55555caf2548 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55555caf25c0 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55555caf2668 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55555cb24a28 <col:53, line:425:5>
| |   `-ReturnStmt 0x55555cb24a18 <line:424:9, col:42>
| |     `-CallExpr 0x55555cb249d8 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55555cb248d8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55555cb24958 <col:21> 'const char *' lvalue ParmVar 0x55555caf2548 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55555cb24978 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55555cb24998 <col:33> 'P' lvalue ParmVar 0x55555caf25c0 'parser' 'P'
| |       `-DeclRefExpr 0x55555cb249b8 <col:41> 'T' lvalue ParmVar 0x55555caf2668 'x' 'T &'
| `-CXXMethodDecl 0x55555cb93238 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55555cb92fe0 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55555cb93088 <col:37, col:39> col:39 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x55555cb93158 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x55555caf2c78 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55555caf2898 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf2918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555caf2bd8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555caf29d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf2a50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf2af8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55555cb24ba0 <col:55, line:429:5>
|     `-ReturnStmt 0x55555cb24b90 <line:428:9, col:50>
|       `-CallExpr 0x55555cb24b50 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb24a50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb24ad0 <col:21> 'const char *' lvalue ParmVar 0x55555caf29d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb24af0 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55555cb24b10 <col:41> 'P' lvalue ParmVar 0x55555caf2a50 'parser' 'P'
|         `-DeclRefExpr 0x55555cb24b30 <col:49> 'T' lvalue ParmVar 0x55555caf2af8 'x' 'T &'
|-FunctionTemplateDecl 0x55555caf30c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55555caf2ce8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf2d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55555caf3028 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55555caf2e28 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55555caf2ea0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55555caf2f48 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55555cb24d18 <col:55, line:433:5>
| |   `-ReturnStmt 0x55555cb24d08 <line:432:9, col:51>
| |     `-CallExpr 0x55555cb24cc8 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55555cb24bc8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55555cb24c48 <col:21> 'const char *' lvalue ParmVar 0x55555caf2e28 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55555cb24c68 <col:30> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
| |       |-DeclRefExpr 0x55555cb24c88 <col:42> 'P' lvalue ParmVar 0x55555caf2ea0 'parser' 'P'
| |       `-DeclRefExpr 0x55555cb24ca8 <col:50> 'T' lvalue ParmVar 0x55555caf2f48 'x' 'T &'
| |-CXXMethodDecl 0x55555cb91468 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, WordArg, String &)'
| | |-TemplateArgument type 'WordArg'
| | |-TemplateArgument type 'String'
| | |-ParmVarDecl 0x55555cb911d0 <col:18, col:30> col:30 keyword 'const char *'
| | |-ParmVarDecl 0x55555cb91278 <col:39, col:41> col:41 parser 'WordArg':'WordArg'
| | `-ParmVarDecl 0x55555cb91348 <col:49, col:52> col:52 x 'String &'
| `-CXXMethodDecl 0x55555cb92448 <col:5, line:433:5> line:431:11 used read_p 'Args &(const char *, BoundedIntArg, int &)'
|   |-TemplateArgument type 'BoundedIntArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55555cb921b8 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55555cb92258 <col:39, col:41> col:41 parser 'BoundedIntArg':'BoundedIntArg'
|   `-ParmVarDecl 0x55555cb92328 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x55555caf3518 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55555caf3138 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf31b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55555caf3478 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55555caf3278 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55555caf32f0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x55555caf3398 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x55555cb24f40 <col:56, line:437:5>
| |   `-ReturnStmt 0x55555cb24f30 <line:436:9, col:63>
| |     `-CallExpr 0x55555cb24ef0 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55555cb24d40 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55555cb24dc0 <col:21> 'const char *' lvalue ParmVar 0x55555caf3278 'keyword' 'const char *'
| |       |-BinaryOperator 0x55555cb24e90 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55555cb24e40 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55555cb24e20 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55555cb24e78 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55555cb24e58 <col:42> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x55555cb24eb0 <col:54> 'P' lvalue ParmVar 0x55555caf32f0 'parser' 'P'
| |       `-DeclRefExpr 0x55555cb24ed0 <col:62> 'T' lvalue ParmVar 0x55555caf3398 'x' 'T &'
| `-CXXMethodDecl 0x55555cb90508 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x55555cb90248 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x55555cb902e8 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x55555cb903e8 <col:50, col:53> col:53 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x55555caf6fa0 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55555caf3588 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf3608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555caf6f00 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55555caf36c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf3748 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55555caf37c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf3868 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55555cb250a8 <col:64, line:442:5>
|     |-CallExpr 0x55555cb25028 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb24f58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55555cb24f98 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55555cb24fa8 <col:30> 'const char *' lvalue ParmVar 0x55555caf36c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb24fc8 <col:39> 'int' lvalue ParmVar 0x55555caf3748 'flags' 'int'
|     | |-DeclRefExpr 0x55555cb24fe8 <col:46> 'P' lvalue ParmVar 0x55555caf37c0 'parser' 'P'
|     | `-DeclRefExpr 0x55555cb25008 <col:54> 'T' lvalue ParmVar 0x55555caf3868 'x' 'T &'
|     `-ReturnStmt 0x55555cb25098 <line:441:9, col:17>
|       `-UnaryOperator 0x55555cb25080 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb25070 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555caf75a8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55555caf7018 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf7098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55555caf7118 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55555caf7508 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55555caf71e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf7258 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf72f8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf73c8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb25240 <col:84, line:458:5>
|     `-ReturnStmt 0x55555cb25230 <line:457:9, col:64>
|       `-CallExpr 0x55555cb251e8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb250d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb25148 <col:28> 'const char *' lvalue ParmVar 0x55555caf71e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb25168 <col:37> 'int' 0
|         |-DeclRefExpr 0x55555cb25188 <col:40> 'P' lvalue ParmVar 0x55555caf7258 'parser' 'P'
|         |-DeclRefExpr 0x55555cb251a8 <col:48> 'T' lvalue ParmVar 0x55555caf72f8 'x' 'T &'
|         `-DeclRefExpr 0x55555cb251c8 <col:51> 'const V' lvalue ParmVar 0x55555caf73c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55555caf7b28 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55555caf7620 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf7698 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55555caf7718 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55555caf7a88 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55555caf77e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf7858 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf78f8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf7998 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb253d0 <col:86, line:462:5>
|     `-ReturnStmt 0x55555cb253c0 <line:461:9, col:73>
|       `-CallExpr 0x55555cb25378 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb252d8 <col:28> 'const char *' lvalue ParmVar 0x55555caf77e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb252f8 <col:37> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
|         |-DeclRefExpr 0x55555cb25318 <col:49> 'P' lvalue ParmVar 0x55555caf7858 'parser' 'P'
|         |-DeclRefExpr 0x55555cb25338 <col:57> 'T' lvalue ParmVar 0x55555caf78f8 'x' 'T &'
|         `-DeclRefExpr 0x55555cb25358 <col:60> 'const V' lvalue ParmVar 0x55555caf7998 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55555caf8188 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55555caf7ba0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf7c18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55555caf7c98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55555caf80e8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55555caf7d60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf7de0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55555caf7e58 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf7ef8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55555caf7f98 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55555cb25560 <col:95, line:467:5>
|     |-CallExpr 0x55555cb254d8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb253e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55555cb25428 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55555cb25438 <col:37> 'const char *' lvalue ParmVar 0x55555caf7d60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb25458 <col:46> 'int' lvalue ParmVar 0x55555caf7de0 'flags' 'int'
|     | |-DeclRefExpr 0x55555cb25478 <col:53> 'P' lvalue ParmVar 0x55555caf7e58 'parser' 'P'
|     | |-DeclRefExpr 0x55555cb25498 <col:61> 'T' lvalue ParmVar 0x55555caf7ef8 'x' 'T &'
|     | `-DeclRefExpr 0x55555cb254b8 <col:64> 'const V' lvalue ParmVar 0x55555caf7f98 'default_value' 'const V &'
|     `-ReturnStmt 0x55555cb25550 <line:466:9, col:17>
|       `-UnaryOperator 0x55555cb25538 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb25528 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555caf8768 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55555caf8208 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf8288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555caf8308 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555caf86c8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555caf83d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf8448 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf84e8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55555caf8588 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55555cb25708 <col:63, line:481:5>
|     `-ReturnStmt 0x55555cb256f8 <line:480:9, col:47>
|       `-CallExpr 0x55555cb256b0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25590 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb25610 <col:21> 'const char *' lvalue ParmVar 0x55555caf83d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb25630 <col:30> 'int' 0
|         |-DeclRefExpr 0x55555cb25650 <col:33> 'P' lvalue ParmVar 0x55555caf8448 'parser' 'P'
|         |-DeclRefExpr 0x55555cb25670 <col:41> 'T1' lvalue ParmVar 0x55555caf84e8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55555cb25690 <col:45> 'T2' lvalue ParmVar 0x55555caf8588 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55555caf8ce8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55555caf87e0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf8858 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555caf88d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555caf8c48 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555caf89a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf8a18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf8ab8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55555caf8b58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55555cb258a8 <col:65, line:485:5>
|     `-ReturnStmt 0x55555cb25898 <line:484:9, col:55>
|       `-CallExpr 0x55555cb25850 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb257b0 <col:21> 'const char *' lvalue ParmVar 0x55555caf89a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb257d0 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55555cb257f0 <col:41> 'P' lvalue ParmVar 0x55555caf8a18 'parser' 'P'
|         |-DeclRefExpr 0x55555cb25810 <col:49> 'T1' lvalue ParmVar 0x55555caf8ab8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55555cb25830 <col:53> 'T2' lvalue ParmVar 0x55555caf8b58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55555caf9268 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55555caf8d60 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf8dd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555caf8e58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555caf91c8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555caf8f20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf8f98 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf9038 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55555caf90d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55555cb25a48 <col:65, line:489:5>
|     `-ReturnStmt 0x55555cb25a38 <line:488:9, col:56>
|       `-CallExpr 0x55555cb259f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb258d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb25950 <col:21> 'const char *' lvalue ParmVar 0x55555caf8f20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb25970 <col:30> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
|         |-DeclRefExpr 0x55555cb25990 <col:42> 'P' lvalue ParmVar 0x55555caf8f98 'parser' 'P'
|         |-DeclRefExpr 0x55555cb259b0 <col:50> 'T1' lvalue ParmVar 0x55555caf9038 'x1' 'T1 &'
|         `-DeclRefExpr 0x55555cb259d0 <col:54> 'T2' lvalue ParmVar 0x55555caf90d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55555caf97e8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55555caf92e0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf9358 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555caf93d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555caf9748 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555caf94a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf9518 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf95b8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55555caf9658 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55555cb25c98 <col:66, line:493:5>
|     `-ReturnStmt 0x55555cb25c88 <line:492:9, col:68>
|       `-CallExpr 0x55555cb25c40 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25a70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb25af0 <col:21> 'const char *' lvalue ParmVar 0x55555caf94a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55555cb25bc0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55555cb25b70 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55555cb25b50 <col:30> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55555cb25ba8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55555cb25b88 <col:42> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55555cb25be0 <col:54> 'P' lvalue ParmVar 0x55555caf9518 'parser' 'P'
|         |-DeclRefExpr 0x55555cb25c00 <col:62> 'T1' lvalue ParmVar 0x55555caf95b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55555cb25c20 <col:66> 'T2' lvalue ParmVar 0x55555caf9658 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55555caf9e48 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55555caf9860 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555caf98d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555caf9958 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555caf9da8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555caf9a20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf9aa0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55555caf9b18 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55555caf9bb8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55555caf9c58 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55555cb25e28 <col:74, line:498:5>
|     |-CallExpr 0x55555cb25da0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb25cb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55555cb25cf0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55555cb25d00 <col:30> 'const char *' lvalue ParmVar 0x55555caf9a20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb25d20 <col:39> 'int' lvalue ParmVar 0x55555caf9aa0 'flags' 'int'
|     | |-DeclRefExpr 0x55555cb25d40 <col:46> 'P' lvalue ParmVar 0x55555caf9b18 'parser' 'P'
|     | |-DeclRefExpr 0x55555cb25d60 <col:54> 'T1' lvalue ParmVar 0x55555caf9bb8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55555cb25d80 <col:58> 'T2' lvalue ParmVar 0x55555caf9c58 'x2' 'T2 &'
|     `-ReturnStmt 0x55555cb25e18 <line:497:9, col:17>
|       `-UnaryOperator 0x55555cb25e00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb25df0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cafa1a8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55555caf9ec8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafa108 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55555caf9f80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555caf9ff8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55555cb25f70 <col:52, line:509:5>
|     `-ReturnStmt 0x55555cb25f60 <line:508:9, col:44>
|       `-CallExpr 0x55555cb25f28 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25e58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb25ec8 <col:26> 'const char *' lvalue ParmVar 0x55555caf9f80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb25ee8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55555cb25f08 <col:38> 'P' lvalue ParmVar 0x55555caf9ff8 'parser' 'P'
|-FunctionTemplateDecl 0x55555cafa4a8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55555cafa210 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafa408 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55555cafa2c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafa338 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55555cb260b0 <col:54, line:513:5>
|     `-ReturnStmt 0x55555cb260a0 <line:512:9, col:52>
|       `-CallExpr 0x55555cb26068 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb25f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26008 <col:26> 'const char *' lvalue ParmVar 0x55555cafa2c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26028 <col:35> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55555cb26048 <col:46> 'P' lvalue ParmVar 0x55555cafa338 'parser' 'P'
|-FunctionTemplateDecl 0x55555cafa7a8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55555cafa510 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafa708 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55555cafa5c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafa638 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55555cb261f0 <col:54, line:517:5>
|     `-ReturnStmt 0x55555cb261e0 <line:516:9, col:53>
|       `-CallExpr 0x55555cb261a8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb260d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26148 <col:26> 'const char *' lvalue ParmVar 0x55555cafa5c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26168 <col:35> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int'
|         `-DeclRefExpr 0x55555cb26188 <col:47> 'P' lvalue ParmVar 0x55555cafa638 'parser' 'P'
|-FunctionTemplateDecl 0x55555cafaaa8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55555cafa810 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafaa08 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55555cafa8c0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafa938 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55555cb263e0 <col:55, line:521:5>
|     `-ReturnStmt 0x55555cb263d0 <line:520:9, col:65>
|       `-CallExpr 0x55555cb26398 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26288 <col:26> 'const char *' lvalue ParmVar 0x55555cafa8c0 'keyword' 'const char *'
|         |-BinaryOperator 0x55555cb26358 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55555cb26308 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55555cb262e8 <col:35> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55555cb26340 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55555cb26320 <col:47> 'const int' lvalue Var 0x55555caf01c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55555cb26378 <col:59> 'P' lvalue ParmVar 0x55555cafa938 'parser' 'P'
|-FunctionTemplateDecl 0x55555cafae78 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55555cafab10 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafadd8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55555cafabc0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafac40 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafacb8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55555cb26520 <col:63, line:526:5>
|     |-CallExpr 0x55555cb264a8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb263f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55555cb26438 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55555cb26448 <col:35> 'const char *' lvalue ParmVar 0x55555cafabc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55555cb26468 <col:44> 'int' lvalue ParmVar 0x55555cafac40 'flags' 'int'
|     | `-DeclRefExpr 0x55555cb26488 <col:51> 'P' lvalue ParmVar 0x55555cafacb8 'parser' 'P'
|     `-ReturnStmt 0x55555cb26510 <line:525:9, col:17>
|       `-UnaryOperator 0x55555cb264f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb264e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cafb2c8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55555cafaee8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafaf68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafb228 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555cafb028 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafb0a0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafb148 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55555cb26678 <col:58, line:541:5>
|     `-ReturnStmt 0x55555cb26668 <line:540:9, col:39>
|       `-CallExpr 0x55555cb26630 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb265d0 <col:21> 'const char *' lvalue ParmVar 0x55555cafb028 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb265f0 <col:30> 'P' lvalue ParmVar 0x55555cafb0a0 'parser' 'P'
|         `-DeclRefExpr 0x55555cb26610 <col:38> 'T' lvalue ParmVar 0x55555cafb148 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafb718 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55555cafb338 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafb3b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafb678 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555cafb478 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafb4f0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafb598 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55555cb267b0 <col:60, line:545:5>
|     `-ReturnStmt 0x55555cb267a0 <line:544:9, col:41>
|       `-CallExpr 0x55555cb26768 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb266a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26708 <col:23> 'const char *' lvalue ParmVar 0x55555cafb478 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26728 <col:32> 'P' lvalue ParmVar 0x55555cafb4f0 'parser' 'P'
|         `-DeclRefExpr 0x55555cb26748 <col:40> 'T' lvalue ParmVar 0x55555cafb598 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafbb68 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55555cafb788 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafb808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafbac8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555cafb8c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafb940 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafb9e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55555cb268e8 <col:60, line:549:5>
|     `-ReturnStmt 0x55555cb268d8 <line:548:9, col:41>
|       `-CallExpr 0x55555cb268a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb267d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26840 <col:23> 'const char *' lvalue ParmVar 0x55555cafb8c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26860 <col:32> 'P' lvalue ParmVar 0x55555cafb940 'parser' 'P'
|         `-DeclRefExpr 0x55555cb26880 <col:40> 'T' lvalue ParmVar 0x55555cafb9e8 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafbfb8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55555cafbbd8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafbc58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafbf18 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555cafbd18 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafbd90 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafbe38 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55555cb26a20 <col:61, line:553:5>
|     `-ReturnStmt 0x55555cb26a10 <line:552:9, col:42>
|       `-CallExpr 0x55555cb269d8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26978 <col:24> 'const char *' lvalue ParmVar 0x55555cafbd18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26998 <col:33> 'P' lvalue ParmVar 0x55555cafbd90 'parser' 'P'
|         `-DeclRefExpr 0x55555cb269b8 <col:41> 'T' lvalue ParmVar 0x55555cafbe38 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafc498 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55555cafc028 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafc0a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafc3f8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55555cafc168 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafc1e8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafc260 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafc308 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55555cb26b98 <col:69, line:557:5>
|     `-ReturnStmt 0x55555cb26b88 <line:556:9, col:46>
|       `-CallExpr 0x55555cb26b48 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26ac8 <col:21> 'const char *' lvalue ParmVar 0x55555cafc168 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb26ae8 <col:30> 'int' lvalue ParmVar 0x55555cafc1e8 'flags' 'int'
|         |-DeclRefExpr 0x55555cb26b08 <col:37> 'P' lvalue ParmVar 0x55555cafc260 'parser' 'P'
|         `-DeclRefExpr 0x55555cb26b28 <col:45> 'T' lvalue ParmVar 0x55555cafc308 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafc7a8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55555cafc510 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafc708 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55555cafc5c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafc638 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55555cb26cd8 <col:56, line:571:5>
|     `-ReturnStmt 0x55555cb26cc8 <line:570:9, col:48>
|       `-CallExpr 0x55555cb26c90 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26bc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26c30 <col:30> 'const char *' lvalue ParmVar 0x55555cafc5c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb26c50 <col:39> 'int' 0
|         `-DeclRefExpr 0x55555cb26c70 <col:42> 'P' lvalue ParmVar 0x55555cafc638 'parser' 'P'
|-FunctionTemplateDecl 0x55555cafcb38 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55555cafc810 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cafca98 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55555cafc8c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafc940 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafc9b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55555cb26ea8 <col:67, line:576:5>
|     |-CallExpr 0x55555cb26e30 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb26cf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55555cb26d30 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55555cb26d40 <col:39> 'const char *' lvalue ParmVar 0x55555cafc8c0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55555cb26df0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55555cb26da0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55555cb26d60 <col:48> 'int' lvalue ParmVar 0x55555cafc940 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55555cb26dd8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55555cb26db8 <col:56> 'const int' lvalue Var 0x55555caf03b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55555cb26e10 <col:68> 'P' lvalue ParmVar 0x55555cafc9b8 'parser' 'P'
|     `-ReturnStmt 0x55555cb26e98 <line:575:9, col:17>
|       `-UnaryOperator 0x55555cb26e80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb26e70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cafcf88 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55555cafcba8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafcc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafcee8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55555cafcce8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafcd60 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafce08 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55555cb27018 <col:62, line:592:5>
|     `-ReturnStmt 0x55555cb27008 <line:591:9, col:51>
|       `-CallExpr 0x55555cb26fc8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb26ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb26f48 <col:30> 'const char *' lvalue ParmVar 0x55555cafcce8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb26f68 <col:39> 'int' 0
|         |-DeclRefExpr 0x55555cb26f88 <col:42> 'P' lvalue ParmVar 0x55555cafcd60 'parser' 'P'
|         `-DeclRefExpr 0x55555cb26fa8 <col:50> 'T' lvalue ParmVar 0x55555cafce08 'x' 'T &'
|-FunctionTemplateDecl 0x55555cafd468 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55555cafcff8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafd078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafd3c8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55555cafd138 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafd1b8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafd230 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafd2d8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55555cb27210 <col:73, line:597:5>
|     |-CallExpr 0x55555cb27190 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb27030 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55555cb27070 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55555cb27080 <col:39> 'const char *' lvalue ParmVar 0x55555cafd138 'keyword' 'const char *'
|     | |-BinaryOperator 0x55555cb27130 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55555cb270e0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55555cb270a0 <col:48> 'int' lvalue ParmVar 0x55555cafd1b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55555cb27118 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55555cb270f8 <col:56> 'const int' lvalue Var 0x55555caf03b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55555cb27150 <col:68> 'P' lvalue ParmVar 0x55555cafd230 'parser' 'P'
|     | `-DeclRefExpr 0x55555cb27170 <col:76> 'T' lvalue ParmVar 0x55555cafd2d8 'x' 'T &'
|     `-ReturnStmt 0x55555cb27200 <line:596:9, col:17>
|       `-UnaryOperator 0x55555cb271e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb271d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cafda18 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55555cafd4e0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafd558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafd978 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55555cafd618 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafd690 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafd850 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55555cb27380 <col:65, line:614:5>
|     `-ReturnStmt 0x55555cb27370 <line:613:9, col:46>
|       `-CallExpr 0x55555cb27330 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb27240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb272b0 <col:25> 'const char *' lvalue ParmVar 0x55555cafd618 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb272d0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55555cb272f0 <col:37> 'P' lvalue ParmVar 0x55555cafd690 'parser' 'P'
|         `-DeclRefExpr 0x55555cb27310 <col:45> 'Vector<T>' lvalue ParmVar 0x55555cafd850 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55555cafde48 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55555cafda88 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555cafdda8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55555cafdb40 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafdc90 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55555cb275a0 <col:55, line:618:5>
|     `-ReturnStmt 0x55555cb27590 <line:617:9, col:55>
|       `-CallExpr 0x55555cb27550 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb273a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb27418 <col:25> 'const char *' lvalue ParmVar 0x55555cafdb40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55555cb27438 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55555cb27510 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55555cb27530 <col:54> 'Vector<T>' lvalue ParmVar 0x55555cafdc90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55555cafe418 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55555cafdeb0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafdf28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafe378 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55555cafdfe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafe068 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafe0e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55555cafe230 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55555cb27798 <col:76, line:623:5>
|     |-CallExpr 0x55555cb27718 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb275b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55555cb275f8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55555cb27608 <col:34> 'const char *' lvalue ParmVar 0x55555cafdfe8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55555cb276b8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55555cb27668 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55555cb27628 <col:43> 'int' lvalue ParmVar 0x55555cafe068 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55555cb276a0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55555cb27680 <col:51> 'const int' lvalue Var 0x55555caf03b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55555cb276d8 <col:63> 'P' lvalue ParmVar 0x55555cafe0e0 'parser' 'P'
|     | `-DeclRefExpr 0x55555cb276f8 <col:71> 'Vector<T>' lvalue ParmVar 0x55555cafe230 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55555cb27788 <line:622:9, col:17>
|       `-UnaryOperator 0x55555cb27770 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb27760 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cafe958 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55555cafe490 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cafe508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cafe8b8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55555cafe5c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cafe648 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55555cafe790 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55555cb27a00 <col:66, line:627:5>
|     `-ReturnStmt 0x55555cb279f0 <line:626:9, col:59>
|       `-CallExpr 0x55555cb279b0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55555cb277c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55555cb27838 <col:25> 'const char *' lvalue ParmVar 0x55555cafe5c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55555cb27858 <col:34> 'int' lvalue ParmVar 0x55555cafe648 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55555cb27970 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55555cb27990 <col:58> 'Vector<T>' lvalue ParmVar 0x55555cafe790 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55555cafe9e8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55555cb27a80 <col:25, line:633:5>
|   `-ReturnStmt 0x55555cb27a70 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55555cb27a58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55555cb27a28 <col:16> 'const bool' lvalue ->_status 0x55555cb09f28
|         `-CXXThisExpr 0x55555cb27a18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55555cafeb68 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55555cafeaa0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55555cb27b68 <col:27, line:639:5>
|   |-BinaryOperator 0x55555cb27b10 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55555cb27a98 <col:9> 'bool' lvalue ParmVar 0x55555cafeaa0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55555cb27af8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55555cb27ac8 <col:13> 'bool' lvalue ->_status 0x55555cb09f28
|   |     `-CXXThisExpr 0x55555cb27ab8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55555cb27b58 <line:638:9, col:17>
|     `-UnaryOperator 0x55555cb27b40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb27b30 <col:17> 'Args *' this
|-CXXMethodDecl 0x55555cafece8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55555cafec28 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55555cb27c58 <col:39, line:644:5>
|   |-BinaryOperator 0x55555cb27c00 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55555cb27b88 <col:9> 'bool' lvalue ParmVar 0x55555cafec28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55555cb27be8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55555cb27bb8 <col:13> 'const bool' lvalue ->_status 0x55555cb09f28
|   |     `-CXXThisExpr 0x55555cb27ba8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55555cb27c48 <line:643:9, col:17>
|     `-UnaryOperator 0x55555cb27c30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb27c20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55555cafedb0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55555cb27d00 <col:30, line:651:5>
|   `-ReturnStmt 0x55555cb27cf0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55555cb27cd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55555cb27ca8 <col:16> 'bool' lvalue ->_read_status 0x55555cae69e0
|         `-ImplicitCastExpr 0x55555cb27c88 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55555cb27c78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55555cb04600 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55555cb04570 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55555cb27e08 <col:32, line:658:5>
|   |-BinaryOperator 0x55555cb27db0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55555cb27d18 <col:9> 'bool' lvalue ParmVar 0x55555cb04570 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55555cb27d98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55555cb27d68 <col:13> 'bool' lvalue ->_read_status 0x55555cae69e0
|   |     `-ImplicitCastExpr 0x55555cb27d48 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55555cb27d38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55555cb27df8 <line:657:9, col:17>
|     `-UnaryOperator 0x55555cb27de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb27dd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55555cb04750 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55555cb046c0 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55555cb27f18 <col:44, line:663:5>
|   |-BinaryOperator 0x55555cb27ec0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55555cb27e28 <col:9> 'bool' lvalue ParmVar 0x55555cb046c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55555cb27ea8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55555cb27e78 <col:13> 'bool' lvalue ->_read_status 0x55555cae69e0
|   |     `-ImplicitCastExpr 0x55555cb27e58 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55555cb27e48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55555cb27f08 <line:662:9, col:17>
|     `-UnaryOperator 0x55555cb27ef0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555cb27ee0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55555cb04818 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55555cb048e0 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55555cb049a8 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55555cb04a70 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55555cb04d78 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55555cb04b10 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555cb04cd8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55555cb04be8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55555cb282d0 <col:19, line:706:5>
|     `-IfStmt 0x55555cb282a8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55555cb28018 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55555cb281d8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55555cb281a8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55555cb28168 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55555cb28070 <col:42> '<bound member function type>' ->simple_slot 0x55555cb22d50
|       |     | `-CXXThisExpr 0x55555cb28060 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55555cb28108 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55555cb280c0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55555c87e428
|       |     | `-DeclRefExpr 0x55555cb280a0 <col:55> 'T' lvalue ParmVar 0x55555cb04be8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55555cb28148 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55555cb28298 <line:705:13, col:34>
|         `-CallExpr 0x55555cb28270 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55555cb281f8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55555cb28250 <col:33> 'T' lvalue ParmVar 0x55555cb04be8 'x' 'T &'
|-FunctionTemplateDecl 0x55555cb05048 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55555cb04dd8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555cb04fa8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55555cb04eb8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55555cb286b0 <col:31, line:717:5>
|     |-DeclStmt 0x55555cb28410 <line:713:9, col:23>
|     | `-VarDecl 0x55555cb282f8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55555cb283e8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55555cb28370 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55555cb283c8 <col:21> 'T' lvalue ParmVar 0x55555cb04eb8 'x' 'T &'
|     |-IfStmt 0x55555cb28660 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55555cb28508 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55555cb28640 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55555cb285e0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55555cb28570 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|     |   | `-DeclRefExpr 0x55555cb28550 <col:14> 'T *' lvalue Var 0x55555cb282f8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55555cb28620 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55555cb28698 <line:716:9, col:16>
|       `-DeclRefExpr 0x55555cb28678 <col:16> 'T *' lvalue Var 0x55555cb282f8 's' 'T *'
|-FunctionTemplateDecl 0x55555cb05458 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55555cb050a8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555cb05128 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55555cb053b8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55555cb05208 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55555cb052a8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55555cb289c0 <col:37, line:726:5>
|     |-IfStmt 0x55555cb28950 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55555cb28970 <line:723:13, col:26>
|     | | `-VarDecl 0x55555cb28718 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55555cb28808 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55555cb28790 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55555cb287e8 <col:25> 'T' lvalue ParmVar 0x55555cb05208 'x' 'T &'
|     | |-DeclRefExpr 0x55555cb28830 <col:16> 'T *' lvalue Var 0x55555cb28718 's' 'T *'
|     | `-BinaryOperator 0x55555cb28930 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55555cb288e0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55555cb28870 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|     |   | `-DeclRefExpr 0x55555cb28850 <col:14> 'T *' lvalue Var 0x55555cb28718 's' 'T *'
|     |   `-DeclRefExpr 0x55555cb28910 <col:18> 'const V' lvalue ParmVar 0x55555cb052a8 'value' 'const V &'
|     `-ReturnStmt 0x55555cb289b0 <line:725:9, col:17>
|       `-UnaryOperator 0x55555cb28998 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55555cb28988 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55555cb05858 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55555cb054c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55555cb057b8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55555cb05570 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb055f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb05698 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55555cb2c040 <col:65, line:737:5>
|     |-DeclStmt 0x55555cb28a58 <line:732:9, col:26>
|     | `-VarDecl 0x55555cb289f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55555cb2c008 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55555cb2c028 <line:733:13, col:58>
|       | `-VarDecl 0x55555cb28a80 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55555cb28c60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55555cb28c30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55555cb28c18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55555cb28bf8 <col:26, col:58> 'String' (CXXTemporary 0x55555cb28bf8)
|       |           `-CXXMemberCallExpr 0x55555cb28b88 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55555cb28af8 <col:26> '<bound member function type>' ->find 0x55555cb22368
|       |             | `-CXXThisExpr 0x55555cb28ae8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55555cb28bc0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb28b28 <col:31> 'const char *' lvalue ParmVar 0x55555cb05570 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55555cb28bd8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb28b48 <col:40> 'int' lvalue ParmVar 0x55555cb055f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55555cb28b68 <col:47> 'Args::Slot *' lvalue Var 0x55555cb289f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55555cb28d18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55555cb28d00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55555cb28ce0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55555cb28cb0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |       `-ImplicitCastExpr 0x55555cb28c98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55555cb28c78 <col:20> 'String' lvalue Var 0x55555cb28a80 'str' 'String'
|       `-CompoundStmt 0x55555cb2bfe8 <col:61, line:736:9>
|         |-DeclStmt 0x55555cb291d0 <line:734:13, col:76>
|         | `-VarDecl 0x55555cb28d68 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55555cb291a0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55555cb29110 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55555cb29158 <col:60> 'T' lvalue ParmVar 0x55555cb05698 'variable' 'T &'
|         |     `-UnaryOperator 0x55555cb29188 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55555cb29178 <col:71> 'Args *' this
|         `-CallExpr 0x55555cb2bfb8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55555cb291f8 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|           | `-CXXThisExpr 0x55555cb291e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55555cb2bf78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55555cb29228 <col:23> 'T *' lvalue Var 0x55555cb28d68 's' 'T *'
|           | `-CallExpr 0x55555cb2bf38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55555cb2bd10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55555cb2be10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55555cb2be30 <col:86> 'String' lvalue Var 0x55555cb28a80 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55555cb2bee0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55555cb2be70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|           |   | `-DeclRefExpr 0x55555cb2be50 <col:92> 'T *' lvalue Var 0x55555cb28d68 's' 'T *'
|           |   `-UnaryOperator 0x55555cb2bf20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55555cb2bf10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55555cb2bf98 <col:103> 'Args::Slot *' lvalue Var 0x55555cb289f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb05da8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55555cb058c8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555cb05948 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55555cb05d08 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55555cb05a08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb05a88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb05b28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55555cb05bc8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55555cb2cee0 <col:88, line:745:5>
|     |-DeclStmt 0x55555cb2c0d8 <line:741:9, col:26>
|     | `-VarDecl 0x55555cb2c070 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55555cb2c2f8 <line:742:9, col:55>
|     | `-VarDecl 0x55555cb2c100 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55555cb2c2e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55555cb2c2b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55555cb2c298 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55555cb2c278 <col:22, col:54> 'String' (CXXTemporary 0x55555cb2c278)
|     |           `-CXXMemberCallExpr 0x55555cb2c208 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55555cb2c178 <col:22> '<bound member function type>' ->find 0x55555cb22368
|     |             | `-CXXThisExpr 0x55555cb2c168 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55555cb2c240 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55555cb2c1a8 <col:27> 'const char *' lvalue ParmVar 0x55555cb05a08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55555cb2c258 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55555cb2c1c8 <col:36> 'int' lvalue ParmVar 0x55555cb05a88 'flags' 'int'
|     |             `-DeclRefExpr 0x55555cb2c1e8 <col:43> 'Args::Slot *' lvalue Var 0x55555cb2c070 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55555cb2c6d0 <line:743:9, col:72>
|     | `-VarDecl 0x55555cb2c348 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55555cb2c6a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55555cb2c610 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55555cb2c658 <col:56> 'T' lvalue ParmVar 0x55555cb05b28 'variable' 'T &'
|     |     `-UnaryOperator 0x55555cb2c688 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55555cb2c678 <col:67> 'Args *' this
|     `-CallExpr 0x55555cb2ceb0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55555cb2c6f8 <col:9> '<bound member function type>' ->postparse 0x55555cb22578
|       | `-CXXThisExpr 0x55555cb2c6e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55555cb2ce70 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55555cb2c728 <col:19> 'T *' lvalue Var 0x55555cb2c348 's' 'T *'
|       | `-ParenExpr 0x55555cb2ce50 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55555cb2ce20 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55555cb2ce08 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55555cb2cdf0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55555cb2cdd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55555cb2cda0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |     |       `-ImplicitCastExpr 0x55555cb2cd88 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55555cb2c748 <col:25> 'String' lvalue Var 0x55555cb2c100 'str' 'String'
|       |     |-CallExpr 0x55555cb2cbf8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55555cb2c9d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55555cb2cad0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55555cb2caf0 <col:89> 'String' lvalue Var 0x55555cb2c100 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55555cb2cba0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55555cb2cb30 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|       |     | | `-DeclRefExpr 0x55555cb2cb10 <col:95> 'T *' lvalue Var 0x55555cb2c348 's' 'T *'
|       |     | `-UnaryOperator 0x55555cb2cbe0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55555cb2cbd0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55555cb2cd68 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55555cb2cd48 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55555cb2cd18 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55555cb2ccc8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55555cb2cc58 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|       |         | | `-DeclRefExpr 0x55555cb2cc38 <col:109> 'T *' lvalue Var 0x55555cb2c348 's' 'T *'
|       |         | `-DeclRefExpr 0x55555cb2ccf8 <col:113> 'const V' lvalue ParmVar 0x55555cb05bc8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55555cb2cd38 <col:120> 'bool' true
|       `-DeclRefExpr 0x55555cb2ce90 <col:128> 'Args::Slot *' lvalue Var 0x55555cb2c070 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb062d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55555cb05e20 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cb05e98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cb06238 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55555cb05f58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb05fd8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb06050 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55555cb060f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55555cb2dad8 <col:75, line:754:5>
|     |-DeclStmt 0x55555cb2cf88 <line:749:9, col:26>
|     | `-VarDecl 0x55555cb2cf20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55555cb2daa0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55555cb2dac0 <line:750:13, col:58>
|       | `-VarDecl 0x55555cb2cfb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55555cb2d190 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55555cb2d160 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55555cb2d148 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55555cb2d128 <col:26, col:58> 'String' (CXXTemporary 0x55555cb2d128)
|       |           `-CXXMemberCallExpr 0x55555cb2d0b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55555cb2d028 <col:26> '<bound member function type>' ->find 0x55555cb22368
|       |             | `-CXXThisExpr 0x55555cb2d018 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55555cb2d0f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2d058 <col:31> 'const char *' lvalue ParmVar 0x55555cb05f58 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55555cb2d108 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2d078 <col:40> 'int' lvalue ParmVar 0x55555cb05fd8 'flags' 'int'
|       |             `-DeclRefExpr 0x55555cb2d098 <col:47> 'Args::Slot *' lvalue Var 0x55555cb2cf20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55555cb2d248 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55555cb2d230 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55555cb2d210 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55555cb2d1e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |       `-ImplicitCastExpr 0x55555cb2d1c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55555cb2d1a8 <col:20> 'String' lvalue Var 0x55555cb2cfb0 'str' 'String'
|       `-CompoundStmt 0x55555cb2da80 <col:61, line:753:9>
|         |-DeclStmt 0x55555cb2d620 <line:751:13, col:63>
|         | `-VarDecl 0x55555cb2d298 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55555cb2d5f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55555cb2d560 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55555cb2d5a8 <col:47> 'T' lvalue ParmVar 0x55555cb060f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55555cb2d5d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55555cb2d5c8 <col:58> 'Args *' this
|         `-CallExpr 0x55555cb2da50 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55555cb2d648 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|           | `-CXXThisExpr 0x55555cb2d638 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55555cb2da10 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55555cb2d678 <col:23> 'T *' lvalue Var 0x55555cb2d298 's' 'T *'
|           | `-CallExpr 0x55555cb2d9d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55555cb2d860 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55555cb2d8a8 <col:56> 'P' lvalue ParmVar 0x55555cb06050 'parser' 'P'
|           |   |-DeclRefExpr 0x55555cb2d8c8 <col:64> 'String' lvalue Var 0x55555cb2cfb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55555cb2d978 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55555cb2d908 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|           |   | `-DeclRefExpr 0x55555cb2d8e8 <col:70> 'T *' lvalue Var 0x55555cb2d298 's' 'T *'
|           |   `-UnaryOperator 0x55555cb2d9b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55555cb2d9a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55555cb2da30 <col:81> 'Args::Slot *' lvalue Var 0x55555cb2cf20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb06938 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55555cb06350 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55555cb063c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55555cb06448 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55555cb06898 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55555cb06510 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb06590 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb06608 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55555cb066a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55555cb06748 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55555cb2e868 <col:98, line:762:5>
|     |-DeclStmt 0x55555cb2db70 <line:758:9, col:26>
|     | `-VarDecl 0x55555cb2db08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55555cb2dd90 <line:759:9, col:55>
|     | `-VarDecl 0x55555cb2db98 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55555cb2dd78 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55555cb2dd48 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55555cb2dd30 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55555cb2dd10 <col:22, col:54> 'String' (CXXTemporary 0x55555cb2dd10)
|     |           `-CXXMemberCallExpr 0x55555cb2dca0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55555cb2dc10 <col:22> '<bound member function type>' ->find 0x55555cb22368
|     |             | `-CXXThisExpr 0x55555cb2dc00 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55555cb2dcd8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55555cb2dc40 <col:27> 'const char *' lvalue ParmVar 0x55555cb06510 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55555cb2dcf0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55555cb2dc60 <col:36> 'int' lvalue ParmVar 0x55555cb06590 'flags' 'int'
|     |             `-DeclRefExpr 0x55555cb2dc80 <col:43> 'Args::Slot *' lvalue Var 0x55555cb2db08 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55555cb2e1b0 <line:760:9, col:59>
|     | `-VarDecl 0x55555cb2dde8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55555cb2e180 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55555cb2e0f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55555cb2e138 <col:43> 'T' lvalue ParmVar 0x55555cb066a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55555cb2e168 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55555cb2e158 <col:54> 'Args *' this
|     `-CallExpr 0x55555cb2e838 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55555cb2e1d8 <col:9> '<bound member function type>' ->postparse 0x55555cb22578
|       | `-CXXThisExpr 0x55555cb2e1c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55555cb2e7f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55555cb2e208 <col:19> 'T *' lvalue Var 0x55555cb2dde8 's' 'T *'
|       | `-ParenExpr 0x55555cb2e7d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55555cb2e7a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55555cb2e790 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55555cb2e778 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55555cb2e758 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55555cb2e728 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |     |       `-ImplicitCastExpr 0x55555cb2e710 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55555cb2e228 <col:25> 'String' lvalue Var 0x55555cb2db98 'str' 'String'
|       |     |-CallExpr 0x55555cb2e580 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55555cb2e410 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55555cb2e458 <col:59> 'P' lvalue ParmVar 0x55555cb06608 'parser' 'P'
|       |     | |-DeclRefExpr 0x55555cb2e478 <col:67> 'String' lvalue Var 0x55555cb2db98 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55555cb2e528 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55555cb2e4b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|       |     | | `-DeclRefExpr 0x55555cb2e498 <col:73> 'T *' lvalue Var 0x55555cb2dde8 's' 'T *'
|       |     | `-UnaryOperator 0x55555cb2e568 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55555cb2e558 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55555cb2e6f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55555cb2e6d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55555cb2e6a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55555cb2e650 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55555cb2e5e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|       |         | | `-DeclRefExpr 0x55555cb2e5c0 <col:87> 'T *' lvalue Var 0x55555cb2dde8 's' 'T *'
|       |         | `-DeclRefExpr 0x55555cb2e680 <col:91> 'const V' lvalue ParmVar 0x55555cb06748 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55555cb2e6c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55555cb2e818 <col:106> 'Args::Slot *' lvalue Var 0x55555cb2db08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb06fa8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55555cb069b8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cb06a38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55555cb06ab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55555cb06f08 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55555cb06b80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb06c00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb06c78 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55555cb06d18 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55555cb06db8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55555cb2f848 <col:60, line:773:5>
|     |-DeclStmt 0x55555cb2e910 <line:767:9, col:26>
|     | `-VarDecl 0x55555cb2e8a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55555cb2f810 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55555cb2f830 <line:768:13, col:58>
|       | `-VarDecl 0x55555cb2e938 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55555cb2eb18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55555cb2eae8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55555cb2ead0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55555cb2eab0 <col:26, col:58> 'String' (CXXTemporary 0x55555cb2eab0)
|       |           `-CXXMemberCallExpr 0x55555cb2ea40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55555cb2e9b0 <col:26> '<bound member function type>' ->find 0x55555cb22368
|       |             | `-CXXThisExpr 0x55555cb2e9a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55555cb2ea78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2e9e0 <col:31> 'const char *' lvalue ParmVar 0x55555cb06b80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55555cb2ea90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2ea00 <col:40> 'int' lvalue ParmVar 0x55555cb06c00 'flags' 'int'
|       |             `-DeclRefExpr 0x55555cb2ea20 <col:47> 'Args::Slot *' lvalue Var 0x55555cb2e8a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55555cb2ebd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55555cb2ebb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55555cb2eb98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55555cb2eb68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |       `-ImplicitCastExpr 0x55555cb2eb50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55555cb2eb30 <col:20> 'String' lvalue Var 0x55555cb2e938 'str' 'String'
|       `-CompoundStmt 0x55555cb2f7e8 <col:61, line:772:9>
|         |-DeclStmt 0x55555cb2ef10 <line:769:13, col:66>
|         | `-VarDecl 0x55555cb2ec28 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55555cb2eee0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55555cb2ee50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55555cb2ee98 <col:49> 'T1' lvalue ParmVar 0x55555cb06d18 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55555cb2eec8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55555cb2eeb8 <col:61> 'Args *' this
|         |-DeclStmt 0x55555cb2f280 <line:770:13, col:66>
|         | `-VarDecl 0x55555cb2ef98 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55555cb2f250 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55555cb2f1c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55555cb2f208 <col:49> 'T2' lvalue ParmVar 0x55555cb06db8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55555cb2f238 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55555cb2f228 <col:61> 'Args *' this
|         `-CallExpr 0x55555cb2f7b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55555cb2f2a8 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|           | `-CXXThisExpr 0x55555cb2f298 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55555cb2f778 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55555cb2f318 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55555cb2f2d8 <col:23> 'T1 *' lvalue Var 0x55555cb2ec28 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55555cb2f2f8 <col:29> 'T2 *' lvalue Var 0x55555cb2ef98 's2' 'T2 *'
|           | `-CallExpr 0x55555cb2f730 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55555cb2f500 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55555cb2f548 <col:63> 'P' lvalue ParmVar 0x55555cb06c78 'parser' 'P'
|           |   |-DeclRefExpr 0x55555cb2f568 <col:71> 'String' lvalue Var 0x55555cb2e938 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55555cb2f618 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55555cb2f5a8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|           |   | `-DeclRefExpr 0x55555cb2f588 <col:77> 'T1 *' lvalue Var 0x55555cb2ec28 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55555cb2f6d8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55555cb2f668 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|           |   | `-DeclRefExpr 0x55555cb2f648 <col:82> 'T2 *' lvalue Var 0x55555cb2ef98 's2' 'T2 *'
|           |   `-UnaryOperator 0x55555cb2f718 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55555cb2f708 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55555cb2f798 <col:94> 'Args::Slot *' lvalue Var 0x55555cb2e8a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb07398 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55555cb07028 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cb072f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55555cb070e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb07160 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb071d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55555cb2fd60 <col:67, line:780:5>
|     |-DeclStmt 0x55555cb2f8e0 <line:777:9, col:26>
|     | `-VarDecl 0x55555cb2f878 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55555cb2fd28 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55555cb2fd48 <line:778:13, col:58>
|       | `-VarDecl 0x55555cb2f908 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55555cb2fae8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55555cb2fab8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55555cb2faa0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55555cb2fa80 <col:26, col:58> 'String' (CXXTemporary 0x55555cb2fa80)
|       |           `-CXXMemberCallExpr 0x55555cb2fa10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55555cb2f980 <col:26> '<bound member function type>' ->find 0x55555cb22368
|       |             | `-CXXThisExpr 0x55555cb2f970 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55555cb2fa48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2f9b0 <col:31> 'const char *' lvalue ParmVar 0x55555cb070e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55555cb2fa60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55555cb2f9d0 <col:40> 'int' lvalue ParmVar 0x55555cb07160 'flags' 'int'
|       |             `-DeclRefExpr 0x55555cb2f9f0 <col:47> 'Args::Slot *' lvalue Var 0x55555cb2f878 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55555cb2fba0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55555cb2fb88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55555cb2fb68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55555cb2fb38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|       |       `-ImplicitCastExpr 0x55555cb2fb20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55555cb2fb00 <col:20> 'String' lvalue Var 0x55555cb2f908 'str' 'String'
|       `-CallExpr 0x55555cb2fcf8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55555cb2fbc8 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|         | `-CXXThisExpr 0x55555cb2fbb8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55555cb2fca8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55555cb2fc18 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55555cb2fbf8 <col:23> 'P' lvalue ParmVar 0x55555cb071d8 'parser' 'P'
|         | |-DeclRefExpr 0x55555cb2fc60 <col:36> 'String' lvalue Var 0x55555cb2f908 'str' 'String'
|         | `-UnaryOperator 0x55555cb2fc90 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55555cb2fc80 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55555cb2fcd8 <col:49> 'Args::Slot *' lvalue Var 0x55555cb2f878 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55555cb07738 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55555cb07408 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55555cb07698 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55555cb074c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb07540 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb075b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55555cb306d0 <col:71, line:792:5>
|     |-DeclStmt 0x55555cb2fdf8 <line:784:9, col:26>
|     | `-VarDecl 0x55555cb2fd90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55555cb2fec8 <line:785:9, col:29>
|     | `-VarDecl 0x55555cb2fe28 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55555cb2feb0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55555cb2fe90 <col:28> 'int' 1
|     |-WhileStmt 0x55555cb30580 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55555cb305a0 <line:786:16, col:61>
|     | | `-VarDecl 0x55555cb2fef0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55555cb300d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55555cb300a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55555cb30088 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55555cb30068 <col:29, col:61> 'String' (CXXTemporary 0x55555cb30068)
|     | |           `-CXXMemberCallExpr 0x55555cb2fff8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55555cb2ff68 <col:29> '<bound member function type>' ->find 0x55555cb22368
|     | |             | `-CXXThisExpr 0x55555cb2ff58 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55555cb30030 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb2ff98 <col:34> 'const char *' lvalue ParmVar 0x55555cb074c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55555cb30048 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb2ffb8 <col:43> 'int' lvalue ParmVar 0x55555cb07540 'flags' 'int'
|     | |             `-DeclRefExpr 0x55555cb2ffd8 <col:50> 'Args::Slot *' lvalue Var 0x55555cb2fd90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55555cb30188 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55555cb30170 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55555cb30150 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55555cb30120 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|     | |       `-ImplicitCastExpr 0x55555cb30108 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55555cb300e8 <col:23> 'String' lvalue Var 0x55555cb2fef0 'str' 'String'
|     | `-CompoundStmt 0x55555cb30558 <col:64, line:790:9>
|     |   |-CallExpr 0x55555cb302e0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55555cb301b0 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|     |   | | `-CXXThisExpr 0x55555cb301a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55555cb30290 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55555cb30200 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55555cb301e0 <col:23> 'P' lvalue ParmVar 0x55555cb075b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55555cb30248 <col:36> 'String' lvalue Var 0x55555cb2fef0 'str' 'String'
|     |   | | `-UnaryOperator 0x55555cb30278 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55555cb30268 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55555cb302c0 <col:49> 'Args::Slot *' lvalue Var 0x55555cb2fd90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55555cb30478 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55555cb30310 <col:13> 'int' lvalue Var 0x55555cb2fe28 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55555cb30460 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55555cb30440 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55555cb303a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55555cb30388 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55555cb30370 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55555cb30330 <col:28> 'int' lvalue Var 0x55555cb2fe28 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55555cb30350 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55555cb30428 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55555cb303f8 <col:49> 'bool' lvalue ->_read_status 0x55555cae69e0
|     |   |         `-ImplicitCastExpr 0x55555cb303d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55555cb303c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55555cb30528 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55555cb30498 <col:13> 'int' lvalue ParmVar 0x55555cb07540 'flags' 'int'
|     |     `-UnaryOperator 0x55555cb30510 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55555cb304f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55555cb304d8 <col:23> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55555cb306b0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55555cb305e8 <col:9> 'bool' lvalue ->_read_status 0x55555cae69e0
|       | `-ImplicitCastExpr 0x55555cb305c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55555cb305b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55555cb30690 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55555cb30670 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55555cb30658 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55555cb30618 <col:25> 'int' lvalue Var 0x55555cb2fe28 'read_status' 'int'
|           `-IntegerLiteral 0x55555cb30638 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55555cb07c18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55555cb077a8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cb07828 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cb07b78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55555cb078e8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb07968 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb079e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55555cb07a88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55555cb31660 <col:84, line:805:5>
|     |-DeclStmt 0x55555cb30778 <line:796:9, col:26>
|     | `-VarDecl 0x55555cb30710 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55555cb30848 <line:797:9, col:29>
|     | `-VarDecl 0x55555cb307a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55555cb30830 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55555cb30810 <col:28> 'int' 1
|     |-DeclStmt 0x55555cb30b80 <line:798:9, col:71>
|     | `-VarDecl 0x55555cb30898 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55555cb30b50 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55555cb30ac0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55555cb30b08 <col:55> 'T' lvalue ParmVar 0x55555cb07a88 'variable' 'T &'
|     |     `-UnaryOperator 0x55555cb30b38 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55555cb30b28 <col:66> 'Args *' this
|     |-WhileStmt 0x55555cb31510 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55555cb31530 <line:799:16, col:61>
|     | | `-VarDecl 0x55555cb30ba8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55555cb30d88 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55555cb30d58 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55555cb30d40 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55555cb30d20 <col:29, col:61> 'String' (CXXTemporary 0x55555cb30d20)
|     | |           `-CXXMemberCallExpr 0x55555cb30cb0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55555cb30c20 <col:29> '<bound member function type>' ->find 0x55555cb22368
|     | |             | `-CXXThisExpr 0x55555cb30c10 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55555cb30ce8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb30c50 <col:34> 'const char *' lvalue ParmVar 0x55555cb078e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55555cb30d00 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb30c70 <col:43> 'int' lvalue ParmVar 0x55555cb07968 'flags' 'int'
|     | |             `-DeclRefExpr 0x55555cb30c90 <col:50> 'Args::Slot *' lvalue Var 0x55555cb30710 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55555cb30e40 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55555cb30e28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55555cb30e08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55555cb30dd8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|     | |       `-ImplicitCastExpr 0x55555cb30dc0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55555cb30da0 <col:23> 'String' lvalue Var 0x55555cb30ba8 'str' 'String'
|     | `-CompoundStmt 0x55555cb314e8 <col:64, line:803:9>
|     |   |-CallExpr 0x55555cb31270 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55555cb30e68 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|     |   | | `-CXXThisExpr 0x55555cb30e58 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55555cb31230 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55555cb30e98 <col:23> 'T *' lvalue Var 0x55555cb30898 's' 'T *'
|     |   | | `-CallExpr 0x55555cb311f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55555cb31080 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55555cb310c8 <col:56> 'P' lvalue ParmVar 0x55555cb079e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55555cb310e8 <col:64> 'String' lvalue Var 0x55555cb30ba8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55555cb31198 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55555cb31128 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|     |   | |   | `-DeclRefExpr 0x55555cb31108 <col:70> 'T *' lvalue Var 0x55555cb30898 's' 'T *'
|     |   | |   `-UnaryOperator 0x55555cb311d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55555cb311c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55555cb31250 <col:81> 'Args::Slot *' lvalue Var 0x55555cb30710 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55555cb31408 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55555cb312a0 <col:13> 'int' lvalue Var 0x55555cb307a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55555cb313f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55555cb313d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55555cb31338 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55555cb31318 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55555cb31300 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55555cb312c0 <col:28> 'int' lvalue Var 0x55555cb307a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55555cb312e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55555cb313b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55555cb31388 <col:49> 'bool' lvalue ->_read_status 0x55555cae69e0
|     |   |         `-ImplicitCastExpr 0x55555cb31368 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55555cb31358 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55555cb314b8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55555cb31428 <col:13> 'int' lvalue ParmVar 0x55555cb07968 'flags' 'int'
|     |     `-UnaryOperator 0x55555cb314a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55555cb31488 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55555cb31468 <col:23> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55555cb31640 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55555cb31578 <col:9> 'bool' lvalue ->_read_status 0x55555cae69e0
|       | `-ImplicitCastExpr 0x55555cb31558 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55555cb31548 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55555cb31620 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55555cb31600 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55555cb315e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55555cb315a8 <col:25> 'int' lvalue Var 0x55555cb307a8 'read_status' 'int'
|           `-IntegerLiteral 0x55555cb315c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55555cb081f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55555cb07c90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55555cb07d08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55555cb08158 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55555cb07dc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55555cb07e48 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55555cb07ec0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55555cb08010 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55555cb32468 <col:87, line:821:5>
|     |-DeclStmt 0x55555cb31710 <line:809:9, col:26>
|     | `-VarDecl 0x55555cb316a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55555cb317e0 <line:810:9, col:29>
|     | `-VarDecl 0x55555cb31740 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55555cb317c8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55555cb317a8 <col:28> 'int' 1
|     |-DeclStmt 0x55555cb31a28 <line:811:9, col:38>
|     | `-VarDecl 0x55555cb31910 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55555cb31a00 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55555cb31988 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55555cb319e0 <col:29> 'Vector<T>' lvalue ParmVar 0x55555cb08010 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55555cb32318 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55555cb32338 <line:812:16, col:61>
|     | | `-VarDecl 0x55555cb31a50 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55555cb31c30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55555cb31c00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55555cb31be8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55555cb31bc8 <col:29, col:61> 'String' (CXXTemporary 0x55555cb31bc8)
|     | |           `-CXXMemberCallExpr 0x55555cb31b58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55555cb31ac8 <col:29> '<bound member function type>' ->find 0x55555cb22368
|     | |             | `-CXXThisExpr 0x55555cb31ab8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55555cb31b90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb31af8 <col:34> 'const char *' lvalue ParmVar 0x55555cb07dc8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55555cb31ba8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55555cb31b18 <col:43> 'int' lvalue ParmVar 0x55555cb07e48 'flags' 'int'
|     | |             `-DeclRefExpr 0x55555cb31b38 <col:50> 'Args::Slot *' lvalue Var 0x55555cb316a8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55555cb31ce8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55555cb31cd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55555cb31cb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55555cb31c80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55555c8413f8
|     | |       `-ImplicitCastExpr 0x55555cb31c68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55555cb31c48 <col:23> 'String' lvalue Var 0x55555cb31a50 'str' 'String'
|     | `-CompoundStmt 0x55555cb322e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55555cb31da8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55555cb31d10 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55555cb31d88 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55555cb31f28 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55555cb31dd0 <col:13> '<bound member function type>' ->postparse 0x55555cb22578
|     |   | | `-CXXThisExpr 0x55555cb31dc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55555cb31ed0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55555cb31e20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55555cb31e00 <col:23> 'P' lvalue ParmVar 0x55555cb07ec0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55555cb31e68 <col:36> 'String' lvalue Var 0x55555cb31a50 'str' 'String'
|     |   | | |-DeclRefExpr 0x55555cb31e88 <col:41> 'T' lvalue Var 0x55555cb31d10 'sx' 'T'
|     |   | | `-UnaryOperator 0x55555cb31eb8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55555cb31ea8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55555cb31f08 <col:53> 'Args::Slot *' lvalue Var 0x55555cb316a8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55555cb32080 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55555cb31fb8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55555cb31f88 <col:17> 'bool' lvalue ->_read_status 0x55555cae69e0
|     |   | |   `-ImplicitCastExpr 0x55555cb31f68 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55555cb31f58 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55555cb32058 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55555cb31ff0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55555cb31fd0 <col:17> 'Vector<T> *' lvalue Var 0x55555cb31910 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55555cb32038 <col:30> 'T' lvalue Var 0x55555cb31d10 'sx' 'T'
|     |   |-BinaryOperator 0x55555cb32200 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55555cb32098 <col:13> 'int' lvalue Var 0x55555cb31740 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55555cb321e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55555cb321c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55555cb32130 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55555cb32110 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55555cb320f8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55555cb320b8 <col:28> 'int' lvalue Var 0x55555cb31740 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55555cb320d8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55555cb321b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55555cb32180 <col:49> 'bool' lvalue ->_read_status 0x55555cae69e0
|     |   |         `-ImplicitCastExpr 0x55555cb32160 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55555cb32150 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55555cb322b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55555cb32220 <col:13> 'int' lvalue ParmVar 0x55555cb07e48 'flags' 'int'
|     |     `-UnaryOperator 0x55555cb32298 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55555cb32280 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55555cb32260 <col:23> 'const int' lvalue Var 0x55555caf00c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55555cb32448 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55555cb32380 <col:9> 'bool' lvalue ->_read_status 0x55555cae69e0
|       | `-ImplicitCastExpr 0x55555cb32360 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55555cb32350 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55555cb32428 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55555cb32408 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55555cb323f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55555cb323b0 <col:25> 'int' lvalue Var 0x55555cb31740 'read_status' 'int'
|           `-IntegerLiteral 0x55555cb323d0 <col:40> 'int' 1
|-AccessSpecDecl 0x55555cb08270 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55555cb08298 prev 0x55555caee400 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55555cb08390 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55555cb08480 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55555cb324a0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55555cb08570 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55555cb324b0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55555cb08670 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55555cb08720 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55555cb087c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55555cb087c8
| | `-ParmVarDecl 0x55555cb088d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55555cb09098 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55555cb09098
|   `-ParmVarDecl 0x55555cb091a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55555cb08948 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55555cb08aa8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55555cb08ca0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55555cb08b50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55555cb08bc8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55555cb32690 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55555cb08f58 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55555cb32500 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55555cb324c0 <col:20> 'void *' lvalue ParmVar 0x55555cb08b50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55555cb08fc0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55555cb32588 <col:32, col:45> 'char *' array Function 0x55555c664068 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55555cb32570 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55555cb32540 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55555cb08bc8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55555cb09020 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55555cb32650 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55555cb32610 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55555cb08bc8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55555cb32710 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55555cb08da0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55555cb08570 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55555cb32798 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55555cb32778 <line:840:13, col:22> 'void' array Function 0x55555c6643c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55555cb32760 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55555cb32730 <col:22> 'char *' lvalue ->_slot 0x55555cb08fc0
| |         `-CXXThisExpr 0x55555cb32720 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55555cb08ea0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55555cb08670 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55555cb32988 <col:22, line:844:9>
| |   `-CallExpr 0x55555cb328f0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55555cb328d8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55555cb328b8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55555c76fe48 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55555cb32928 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55555cb32808 <col:20> 'void *' lvalue ->_ptr 0x55555cb08f58
| |     |   `-CXXThisExpr 0x55555cb327f8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55555cb32958 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55555cb32940 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55555cb32848 <col:26> 'char *' lvalue ->_slot 0x55555cb08fc0
| |     |     `-CXXThisExpr 0x55555cb32838 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55555cb32970 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55555cb32888 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55555cb09020
| |         `-CXXThisExpr 0x55555cb32878 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55555cb08f58 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55555cb08fc0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55555cb09020 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55555cb09218 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55555cb09218
| | `-ParmVarDecl 0x55555cb09328 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55555cb093c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55555cb093c8
|   `-ParmVarDecl 0x55555cb094d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55555cb09678 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55555cb09548 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55555cb095e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55555cb09910 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55555cb09b08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55555cb099d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55555cb09c88 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55555cb329c0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55555cb329a0 <col:20> 'T *' lvalue ParmVar 0x55555cb099d8 'ptr' 'T *'
|   | `-CompoundStmt 0x55555cb32a10 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55555cb09bd8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55555cb08670 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55555cb32bc0 <col:22, line:857:9>
|   |   `-CallExpr 0x55555cb32b90 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55555cb32a20 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55555c828578 0x55555c7d28a8
|   |     |-CXXOperatorCallExpr 0x55555cb32b20 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55555cb32ab0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55555ca35528 0x55555ca35148 0x55555ca34d78 0x55555ca34998 0x55555ca345b8 0x55555ca341e8
|   |     | `-MemberExpr 0x55555cb32a80 <col:29> 'T *' lvalue ->_ptr 0x55555cb09c88
|   |     |   `-CXXThisExpr 0x55555cb32a70 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55555cb32b60 <col:35> 'T' lvalue ->_slot 0x55555cb09ce8
|   |       `-CXXThisExpr 0x55555cb32b50 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55555cb09c88 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55555cb09ce8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55555cb09d50 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55555cb09e50 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55555cb09ea0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555cb09e30 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55555cb09e10 <col:31> 'int' 48
|-FieldDecl 0x55555cb09ec8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55555cb09f28 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55555cb09f88 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55555cb0a0c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55555cb21c10 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55555cb21c70 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55555cb21d20 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55555cb21f48 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55555cb21e50 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55555cb22098 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55555cb22008 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55555cb22368 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55555cb22158 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55555cb221d8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55555cb22280 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55555cb22578 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55555cb22430 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55555cb224a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55555cb22648 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55555cb22798 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55555cb22700 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55555cb22b28 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55555cb22858 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55555cb228d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55555cb22980 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55555cb22a38 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55555cb22d50 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55555cb22c00 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55555cb22c78 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55555cb23068 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55555cb22e00 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55555cb22fc8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55555cb22ed8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca9b578 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555ca9b698 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55555ca9b728 <col:25, col:31> col:25 public
|-TypedefDecl 0x55555ca9b760 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x55555c510310 'void'
|-CXXConstructorDecl 0x55555ca9b8a8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55555ca9b7d0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55555ca9cb30 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55555ca9c460 'flags_' 'int'
| | `-ImplicitCastExpr 0x55555ca9cbd0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55555ca9cb90 <col:45> 'int' lvalue ParmVar 0x55555ca9b7d0 'flags' 'int'
| `-CompoundStmt 0x55555ca9cc18 <col:52, col:53>
|-CXXMethodDecl 0x55555ca9bb68 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55555ca9b968 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55555ca9ba08 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55555ca9ba80 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55555ca9cb50 <col:88> 'const ArgContext' lvalue Var 0x55555ca9b510 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55555ca9cdf8 <col:100, line:210:5>
|   `-ReturnStmt 0x55555ca9cde8 <line:209:9, col:46>
|     `-CallExpr 0x55555ca9cd90 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55555ca9cd78 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55555ca9cd30 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55555ca9c728 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55555ca9cc90 <col:22> 'const String' lvalue ParmVar 0x55555ca9b968 'str' 'const String &'
|       |-DeclRefExpr 0x55555ca9ccb0 <col:27> 'EtherAddress' lvalue ParmVar 0x55555ca9ba08 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55555ca9ccd0 <col:34> 'const ArgContext' lvalue ParmVar 0x55555ca9ba80 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55555ca9cdd0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55555ca9cd00 <col:40> 'int' lvalue ->flags_ 0x55555ca9c460
|           `-CXXThisExpr 0x55555ca9ccf0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55555ca9be08 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55555ca9bc30 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55555ca9bcb0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55555ca9bd28 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55555ca9cb70 <col:89> 'const ArgContext' lvalue Var 0x55555ca9b510 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55555ca9cfd0 <col:101, line:213:5>
|   `-ReturnStmt 0x55555ca9cfc0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55555ca9cf88 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55555ca9cf58 <col:9> '<bound member function type>' ->parse 0x55555ca9bb68
|       | `-CXXThisExpr 0x55555ca9cf48 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55555ca9ce78 <col:15> 'const String' lvalue ParmVar 0x55555ca9bc30 'str' 'const String &'
|       |-UnaryOperator 0x55555ca9cf10 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55555ca9cee0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55555ca9cec8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55555ca9ce98 <col:54> 'unsigned char *' lvalue ParmVar 0x55555ca9bcb0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55555ca9cf28 <col:62> 'const ArgContext' lvalue ParmVar 0x55555ca9bd28 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55555ca9c0c8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55555ca9bed0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55555ca9bf48 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55555ca9bfe8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55555ca9d1b8 <col:82, line:216:5>
|   `-ReturnStmt 0x55555ca9d1a8 <line:215:9, col:53>
|     `-CallExpr 0x55555ca9d150 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55555ca9d138 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55555ca9d0f0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55555ca9ca58 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55555ca9d050 <col:29> 'const String' lvalue ParmVar 0x55555ca9bed0 'str' 'const String &'
|       |-DeclRefExpr 0x55555ca9d070 <col:34> 'EtherAddress' lvalue ParmVar 0x55555ca9bf48 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55555ca9d090 <col:41> 'Args' lvalue ParmVar 0x55555ca9bfe8 'args' 'Args &'
|       `-ImplicitCastExpr 0x55555ca9d190 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55555ca9d0c0 <col:47> 'int' lvalue ->flags_ 0x55555ca9c460
|           `-CXXThisExpr 0x55555ca9d0b0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55555ca9c368 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55555ca9c190 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55555ca9c210 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55555ca9c288 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55555ca9d390 <col:83, line:219:5>
|   `-ReturnStmt 0x55555ca9d380 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55555ca9d348 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55555ca9d318 <col:9> '<bound member function type>' ->direct_parse 0x55555ca9c0c8
|       | `-CXXThisExpr 0x55555ca9d308 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55555ca9d238 <col:22> 'const String' lvalue ParmVar 0x55555ca9c190 'str' 'const String &'
|       |-UnaryOperator 0x55555ca9d2d0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55555ca9d2a0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55555ca9d288 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55555ca9d258 <col:61> 'unsigned char *' lvalue ParmVar 0x55555ca9c210 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55555ca9d2e8 <col:69> 'Args' lvalue ParmVar 0x55555ca9c288 'args' 'Args &'
|-AccessSpecDecl 0x55555ca9c420 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55555ca9c460 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55555ca9c728 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55555ca9c4c0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55555ca9c538 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55555ca9c5b0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55555ca9c630 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55555ca9ca58 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55555ca9c7f8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55555ca9c870 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55555ca9c8e8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55555ca9c968 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x55555cb8fc98 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55555cb8fc98
| `-ParmVarDecl 0x55555cb8fda8 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x55555cb8fe48 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb8ff58 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x55555ca9c460 'flags_' 'int'
| | `-ImplicitCastExpr 0x55555cb907b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555cb90770 <col:7> 'int' xvalue .flags_ 0x55555ca9c460
| |     `-CXXStaticCastExpr 0x55555cb90740 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb90710 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55555cb8ff58 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x55555cb90800 <col:7>
`-CXXDestructorDecl 0x55555cb90020 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb51718 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555cb51838 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x55555cb518c8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55555cb51ac0 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55555cb51900 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55555cb51978 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55555cb519f0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55555cb51b90 <col:79> 'const ArgContext' lvalue Var 0x55555cb32be8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55555cb51d08 <col:91, line:1372:5>
|   `-ReturnStmt 0x55555cb51cf8 <line:1371:9, col:39>
|     `-CallExpr 0x55555cb51ca8 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x55555cb51c90 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55555cb51c70 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55555cb51660 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55555cb51bf8 <col:24> 'const String' lvalue ParmVar 0x55555cb51900 'str' 'const String &'
|       |-UnaryOperator 0x55555cb51c38 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55555cb51c18 <col:30> 'String' lvalue ParmVar 0x55555cb51978 'result' 'String &'
|       `-ImplicitCastExpr 0x55555cb51ce0 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55555cb51c50 <col:38> 'int' 0
|-CXXConstructorDecl 0x55555cb90b88 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55555cb90c88 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x55555cb90c88
| `-ParmVarDecl 0x55555cb90d98 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x55555cb90e38 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb90f48 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x55555cb91670 <col:7>
`-CXXDestructorDecl 0x55555cb90fe8 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class BoundedIntArg
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
         8 |   click_intmax_t min_value
        16 |   click_intmax_t max_value
        24 |   _Bool is_signed
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb3e340 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555cb3e458 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55555cb3e4e8 <col:16, col:22> col:16 public
|-EnumDecl 0x55555cb3e510 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55555cb3e610 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55555cb3e860 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb3e5f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55555cb3e5d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55555cb3e6a0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55555cb3e878 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb3e680 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55555cb3e660 <col:24> 'int' 22
| |-EnumConstantDecl 0x55555cb3e730 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55555cb3e890 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb3e710 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55555cb3e6f0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55555cb3e7c0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55555cb3e8a8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555cb3e7a0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55555cb3e780 <col:25> 'int' 95
| `-EnumConstantDecl 0x55555cb3e810 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55555cb40240 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55555cb40678 <col:7>
|-CXXConstructorDecl 0x55555cb40348 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55555cb40348
| `-ParmVarDecl 0x55555cb40458 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55555cb404f8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb40608 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55555cb927b0 <col:7>
`-CXXDestructorDecl 0x55555cb42778 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb3e8d8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55555cb3ea38 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55555cb3eaf0 <col:32, col:38> col:32 public
|-TypedefDecl 0x55555cb3eb28 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55555c6663c0 'uint32_t' sugar
|   |-Typedef 0x55555c5793d8 'uint32_t'
|   `-TypedefType 0x55555c552480 '__uint32_t' sugar
|     |-Typedef 0x55555c552078 '__uint32_t'
|     `-BuiltinType 0x55555c510450 'unsigned int'
|-CXXConstructorDecl 0x55555cb3ec68 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55555cb3eb98 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55555cb40148 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55555cb40688 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55555cb3fa00 'base' 'int'
| | `-ImplicitCastExpr 0x55555cb401e8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55555cb401a8 <col:16> 'int' lvalue ParmVar 0x55555cb3eb98 'b' 'int'
| `-CompoundStmt 0x55555cb406f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55555cb3f160 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55555cb3ed30 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55555cb3edb0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55555cb3ee28 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55555cb3eea8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55555cb3ef68 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55555cb3efe8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55555cb3f5b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55555cb3f230 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55555cb3f518 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55555cb3f2d8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55555cb3f378 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55555cb3f3f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55555cb40168 <col:82> 'const ArgContext' lvalue Var 0x55555cb32be8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55555cb41628 <col:94, line:1067:5>
|     |-DeclStmt 0x55555cb40888 <line:1054:9, col:64>
|     | `-VarDecl 0x55555cb40718 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55555cb40840 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55555cb40aa8 <line:1055:9, col:91>
|     | `-VarDecl 0x55555cb408b8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55555cb40a80 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55555cb40a60 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55555cb40a10 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55555cb409f0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55555cb40998 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55555cb40948 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55555cb40978 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55555cb409d8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55555cb409b8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55555cb40a40 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55555cb40c08 <line:1056:9, col:27>
|     | `-VarDecl 0x55555cb40ba0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55555cb41058 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55555cb40f88 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55555cb40f00 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55555ca9ade0 0x55555ca303a8 0x55555c879988 0x55555c879660 0x55555c86ae40 0x55555c86aaf0 0x55555c86a3e0 0x55555c83cd50 0x55555c7c9210
|     | | |-CallExpr 0x55555cb40e40 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55555cb40c30 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55555cb40ce0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55555cb40cb0 <col:19, col:23> '<bound member function type>' .begin 0x55555c85a048
|     | | | |   `-DeclRefExpr 0x55555cb40c90 <col:19> 'const String' lvalue ParmVar 0x55555cb3f2d8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55555cb40d50 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55555cb40d20 <col:32, col:36> '<bound member function type>' .end 0x55555c85a260
|     | | | |   `-DeclRefExpr 0x55555cb40d00 <col:32> 'const String' lvalue ParmVar 0x55555cb3f2d8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55555cb40d70 <col:43> 'const bool' lvalue Var 0x55555cb40718 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55555cb40dd8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55555cb40db8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55555cb40e00 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55555cb40ba0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55555cb40e20 <col:73> 'const int' lvalue Var 0x55555cb408b8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55555cb40ee0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55555cb40eb0 <col:16, col:20> '<bound member function type>' .end 0x55555c85a260
|     | |     `-DeclRefExpr 0x55555cb40e90 <col:16> 'const String' lvalue ParmVar 0x55555cb3f2d8 'str' 'const String &'
|     | `-BinaryOperator 0x55555cb41038 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55555cb40fd0 <col:13> 'int' lvalue ->status 0x55555cb3fa68
|     |   | `-CXXThisExpr 0x55555cb40fc0 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55555cb41020 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55555cb41000 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55555cb3e6a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55555cb412a8 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55555cb41190 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55555cb41178 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55555cb41160 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55555cb41080 <col:13> 'int' lvalue ->status 0x55555cb3fa68
|     | | |     `-CXXThisExpr 0x55555cb41070 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55555cb41140 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55555cb41110 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55555cb410c0 <col:23> 'int' lvalue ->status 0x55555cb3fa68
|     | |   |   `-CXXThisExpr 0x55555cb410b0 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55555cb41128 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55555cb410f0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55555cb3e730 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55555cb41288 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55555cb41228 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55555cb411d0 <col:13, col:18> '<bound member function type>' .error 0x55555cae5ff0
|     |   | | `-DeclRefExpr 0x55555cb411b0 <col:13> 'const ArgContext' lvalue ParmVar 0x55555cb3f3f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55555cb41250 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55555cb41200 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55555cb41278 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55555cb41268 <col:20> 'bool' false
|     |-DeclStmt 0x55555cb41478 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55555cb41420 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55555cb413b0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55555cb415d8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55555cb41490 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55555c7fd1d8
|     | |-DeclRefExpr 0x55555cb414d8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55555cb40ba0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55555cb415a8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55555cb41520 <col:64> 'V' lvalue ParmVar 0x55555cb3f378 'result' 'V &'
|     `-ReturnStmt 0x55555cb41618 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55555cb41608 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55555cb3f978 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55555cb3f628 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55555cb3f8d8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55555cb3f6d8 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x55555cb3f778 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x55555cb3f7f0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55555cb40188 <col:71> 'const ArgContext' lvalue Var 0x55555cb32be8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55555cb41d98 <col:83, line:1083:5>
|     |-DeclStmt 0x55555cb416f0 <line:1071:9, col:12>
|     | `-VarDecl 0x55555cb41688 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x55555cb41d70 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55555cb41980 <line:1072:13, line:1073:49> '<dependent type>' '||'
|       | |-UnaryOperator 0x55555cb41808 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
|       | | `-CallExpr 0x55555cb417d0 <col:14, col:43> '<dependent type>'
|       | |   |-UnresolvedMemberExpr 0x55555cb41718 <col:14> '<bound member function type>' lvalue
|       | |   |-DeclRefExpr 0x55555cb41770 <col:31> 'const String' lvalue ParmVar 0x55555cb3f6d8 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55555cb41790 <col:36> 'V' lvalue Var 0x55555cb41688 'x' 'V'
|       | |   `-DeclRefExpr 0x55555cb417b0 <col:39> 'const ArgContext' lvalue ParmVar 0x55555cb3f7f0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55555cb41960 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55555cb41940 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55555cb41928 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55555cb41910 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55555cb41830 <col:17> 'int' lvalue ->status 0x55555cb3fa68
|       |     |     `-CXXThisExpr 0x55555cb41820 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55555cb418f0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55555cb418c0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55555cb41870 <col:27> 'int' lvalue ->status 0x55555cb3fa68
|       |       |   `-CXXThisExpr 0x55555cb41860 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55555cb418d8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55555cb418a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55555cb3e730 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55555cb419b0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55555cb419a0 <col:20> 'bool' false
|       `-IfStmt 0x55555cb41d48 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55555cb41a50 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55555cb41a20 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55555cb419d0 <col:18> 'int' lvalue ->status 0x55555cb3fa68
|         | |   `-CXXThisExpr 0x55555cb419c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55555cb41a38 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55555cb41a00 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55555cb3e730 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55555cb41c88 <col:42, line:1079:9>
|         | |-CallExpr 0x55555cb41c30 <line:1076:13, line:1077:45> '<dependent type>'
|         | | |-MemberExpr 0x55555cb41a80 <line:1076:13> '<bound member function type>' ->range_error 0x55555cb40078
|         | | | `-CXXThisExpr 0x55555cb41a70 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55555cb41ab0 <col:25> 'const ArgContext' lvalue ParmVar 0x55555cb3f7f0 'args' 'const ArgContext &'
|         | | |-CXXDependentScopeMemberExpr 0x55555cb41b90 <col:31, col:50> '<dependent type>' lvalue ->is_signed
|         | | `-CXXUnresolvedConstructExpr 0x55555cb41c08 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
|         | |   `-DeclRefExpr 0x55555cb41be8 <col:43> 'V' lvalue Var 0x55555cb41688 'x' 'V'
|         | `-ReturnStmt 0x55555cb41c78 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55555cb41c68 <col:20> 'bool' false
|         `-CompoundStmt 0x55555cb41d28 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55555cb41ce8 <line:1080:13, col:22> '<dependent type>' '='
|           | |-DeclRefExpr 0x55555cb41ca8 <col:13> 'V' lvalue ParmVar 0x55555cb3f778 'result' 'V &'
|           | `-DeclRefExpr 0x55555cb41cc8 <col:22> 'V' lvalue Var 0x55555cb41688 'x' 'V'
|           `-ReturnStmt 0x55555cb41d18 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55555cb41d08 <col:20> 'bool' true
|-FieldDecl 0x55555cb3fa00 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55555cb3fa68 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55555cb3fab8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55555cb3fd70 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55555cb3faf8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55555cb3fb78 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55555cb3fbf0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55555cb3fc70 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55555cb40078 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55555cb3fe40 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55555cb3feb8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55555cb3ff50 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55555cb425f8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55555cb425f8
| `-ParmVarDecl 0x55555cb42708 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55555cb42888 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb42998 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55555cb927c0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55555cb92790 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55555cb92760 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb92730 <col:7> 'IntArg' lvalue ParmVar 0x55555cb42998 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55555cb3fa00 'base' 'int'
| | `-ImplicitCastExpr 0x55555cb928b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555cb92888 <col:7> 'int' xvalue .base 0x55555cb3fa00
| |     `-CXXStaticCastExpr 0x55555cb92858 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb92828 <col:7> 'IntArg' lvalue ParmVar 0x55555cb42998 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55555cb3fa68 'status' 'int'
| | `-ImplicitCastExpr 0x55555cb92988 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555cb92958 <col:7> 'int' xvalue .status 0x55555cb3fa68
| |     `-CXXStaticCastExpr 0x55555cb92928 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb928f8 <col:7> 'IntArg' lvalue ParmVar 0x55555cb42998 '' 'IntArg &&'
| `-CompoundStmt 0x55555cb929e0 <col:7>
`-CXXDestructorDecl 0x55555cb91938 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb42bb8 <../dummy_inc/click/args.hh:1122:1, line:1175:1> line:1122:7 referenced class BoundedIntArg definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-CXXRecordDecl 0x55555cb42d18 <col:1, col:7> col:7 implicit referenced class BoundedIntArg
|-AccessSpecDecl 0x55555cb42da8 <col:39, col:45> col:39 public
|-FunctionTemplateDecl 0x55555cb43180 <line:1123:5, line:1128:5> line:1124:5 BoundedIntArg
| |-TemplateTypeParmDecl 0x55555cb42dd0 <line:1123:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXConstructorDecl 0x55555cb430d8 <line:1124:5, line:1128:5> line:1124:5 BoundedIntArg 'void (T, T, int)'
| | |-ParmVarDecl 0x55555cb42e78 <col:19, col:21> col:21 referenced min_value 'T'
| | |-ParmVarDecl 0x55555cb42ef0 <col:32, col:34> col:34 referenced max_value 'T'
| | |-ParmVarDecl 0x55555cb42f70 <col:45, col:53> col:49 referenced b 'int' cinit
| | | `-IntegerLiteral 0x55555cb43d18 <col:53> 'int' 0
| | |-CXXCtorInitializer 'IntArg'
| | | `-ParenListExpr 0x55555cb43d78 <line:1125:17, col:19> 'NULL TYPE'
| | |   `-DeclRefExpr 0x55555cb43d58 <col:18> 'int' lvalue ParmVar 0x55555cb42f70 'b' 'int'
| | |-CXXCtorInitializer Field 0x55555cb43bf0 'min_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x55555cb43e38 <col:31, col:41> 'NULL TYPE'
| | |   `-DeclRefExpr 0x55555cb43e18 <col:32> 'T' lvalue ParmVar 0x55555cb42e78 'min_value' 'T'
| | |-CXXCtorInitializer Field 0x55555cb43c50 'max_value' 'click_intmax_t':'long long'
| | | `-ParenListExpr 0x55555cb43ea0 <col:53, col:63> 'NULL TYPE'
| | |   `-DeclRefExpr 0x55555cb43e80 <col:54> 'T' lvalue ParmVar 0x55555cb42ef0 'max_value' 'T'
| | `-CompoundStmt 0x55555cb44208 <col:65, line:1128:5>
| |   |-DeclStmt 0x55555cb44088 <line:1126:9, col:97>
| |   | `-StaticAssertDecl 0x55555cb44048 <col:9, col:96> col:9
| |   |   |-CXXDependentScopeMemberExpr 0x55555cb43fc0 <col:23, col:42> '<dependent type>' lvalue ->is_integral
| |   |   `-StringLiteral 0x55555cb44008 <col:55> 'const char [40]' lvalue "BoundedIntArg argument must be integral"
| |   `-BinaryOperator 0x55555cb441e8 <line:1127:9, col:40> '<dependent type>' '='
| |     |-MemberExpr 0x55555cb440b0 <col:9> 'bool' lvalue ->is_signed 0x55555cb43cb0
| |     | `-CXXThisExpr 0x55555cb440a0 <col:9> 'BoundedIntArg *' implicit this
| |     `-CXXDependentScopeMemberExpr 0x55555cb441a0 <col:21, col:40> '<dependent type>' lvalue ->is_signed
| `-CXXConstructorDecl 0x55555cb91ec8 <line:1124:5, line:1128:5> line:1124:5 used BoundedIntArg 'void (int, int, int)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55555cb91cc8 <col:19, col:21> col:21 min_value 'int':'int'
|   |-ParmVarDecl 0x55555cb91d40 <col:32, col:34> col:34 max_value 'int':'int'
|   `-ParmVarDecl 0x55555cb91da8 <col:45, col:53> col:49 b 'int' cinit
|     `-IntegerLiteral 0x55555cb43d18 <col:53> 'int' 0
|-FunctionTemplateDecl 0x55555cb43538 <line:1130:5, line:1145:5> line:1131:10 parse
| |-TemplateTypeParmDecl 0x55555cb431f0 <line:1130:15, col:24> col:24 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55555cb43498 <line:1131:5, line:1145:5> line:1131:10 parse 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55555cb43298 <col:16, col:30> col:30 referenced str 'const String &'
|   |-ParmVarDecl 0x55555cb43338 <col:35, col:38> col:38 referenced result 'V &'
|   |-ParmVarDecl 0x55555cb433b0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55555cb43d38 <col:71> 'const ArgContext' lvalue Var 0x55555cb32be8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55555cb44cf8 <col:83, line:1145:5>
|     |-DeclStmt 0x55555cb442a0 <line:1132:9, col:12>
|     | `-VarDecl 0x55555cb44238 <col:9, col:11> col:11 referenced x 'V'
|     `-IfStmt 0x55555cb44cd0 <line:1133:9, line:1144:9> has_else
|       |-UnaryOperator 0x55555cb44410 <line:1133:13, col:40> '<dependent type>' prefix '!' cannot overflow
|       | `-CallExpr 0x55555cb443d8 <col:14, col:40> '<dependent type>'
|       |   |-UnresolvedMemberExpr 0x55555cb44318 <col:14, col:22> '<bound member function type>' lvalue
|       |   |-DeclRefExpr 0x55555cb44378 <col:28> 'const String' lvalue ParmVar 0x55555cb43298 'str' 'const String &'
|       |   |-DeclRefExpr 0x55555cb44398 <col:33> 'V' lvalue Var 0x55555cb44238 'x' 'V'
|       |   `-DeclRefExpr 0x55555cb443b8 <col:36> 'const ArgContext' lvalue ParmVar 0x55555cb433b0 'args' 'const ArgContext &'
|       |-ReturnStmt 0x55555cb44438 <line:1134:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55555cb44428 <col:20> 'bool' false
|       `-IfStmt 0x55555cb44ca8 <line:1135:14, line:1144:9> has_else
|         |-UnaryOperator 0x55555cb44670 <line:1135:18, col:68> '<dependent type>' prefix '!' cannot overflow
|         | `-CallExpr 0x55555cb44648 <col:19, col:68> '<dependent type>'
|         |   |-UnresolvedMemberExpr 0x55555cb44458 <col:19> '<bound member function type>' lvalue
|         |   `-CXXUnresolvedConstructExpr 0x55555cb44620 <col:29, col:67> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|         |     `-DeclRefExpr 0x55555cb44600 <col:66> 'V' lvalue Var 0x55555cb44238 'x' 'V'
|         |-CompoundStmt 0x55555cb44810 <col:71, line:1138:9>
|         | |-CXXMemberCallExpr 0x55555cb44768 <line:1136:13, col:51> 'void'
|         | | |-MemberExpr 0x55555cb44698 <col:13> '<bound member function type>' ->range_error 0x55555cb40078
|         | | | `-ImplicitCastExpr 0x55555cb447a0 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|         | | |   `-CXXThisExpr 0x55555cb44688 <col:13> 'BoundedIntArg *' implicit this
|         | | |-DeclRefExpr 0x55555cb446c8 <col:25> 'const ArgContext' lvalue ParmVar 0x55555cb433b0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55555cb447c0 <col:31> 'bool' <LValueToRValue>
|         | | | `-MemberExpr 0x55555cb446f8 <col:31> 'bool' lvalue ->is_signed 0x55555cb43cb0
|         | | |   `-CXXThisExpr 0x55555cb446e8 <col:31> 'BoundedIntArg *' implicit this
|         | | `-ImplicitCastExpr 0x55555cb447d8 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|         | |   `-MemberExpr 0x55555cb44738 <col:42> 'click_intmax_t':'long long' lvalue ->min_value 0x55555cb43bf0
|         | |     `-CXXThisExpr 0x55555cb44728 <col:42> 'BoundedIntArg *' implicit this
|         | `-ReturnStmt 0x55555cb44800 <line:1137:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55555cb447f0 <col:20> 'bool' false
|         `-IfStmt 0x55555cb44c80 <line:1138:16, line:1144:9> has_else
|           |-UnaryOperator 0x55555cb44a20 <line:1138:20, col:70> '<dependent type>' prefix '!' cannot overflow
|           | `-CallExpr 0x55555cb449f8 <col:21, col:70> '<dependent type>'
|           |   |-UnresolvedMemberExpr 0x55555cb44840 <col:21> '<bound member function type>' lvalue
|           |   `-CXXUnresolvedConstructExpr 0x55555cb449d0 <col:31, col:69> 'typename integer_traits<V>::max_type' 'typename integer_traits<V>::max_type'
|           |     `-DeclRefExpr 0x55555cb449b0 <col:68> 'V' lvalue Var 0x55555cb44238 'x' 'V'
|           |-CompoundStmt 0x55555cb44bc0 <col:73, line:1141:9>
|           | |-CXXMemberCallExpr 0x55555cb44b18 <line:1139:13, col:51> 'void'
|           | | |-MemberExpr 0x55555cb44a48 <col:13> '<bound member function type>' ->range_error 0x55555cb40078
|           | | | `-ImplicitCastExpr 0x55555cb44b50 <col:13> 'IntArg *' <UncheckedDerivedToBase (IntArg)>
|           | | |   `-CXXThisExpr 0x55555cb44a38 <col:13> 'BoundedIntArg *' implicit this
|           | | |-DeclRefExpr 0x55555cb44a78 <col:25> 'const ArgContext' lvalue ParmVar 0x55555cb433b0 'args' 'const ArgContext &'
|           | | |-ImplicitCastExpr 0x55555cb44b70 <col:31> 'bool' <LValueToRValue>
|           | | | `-MemberExpr 0x55555cb44aa8 <col:31> 'bool' lvalue ->is_signed 0x55555cb43cb0
|           | | |   `-CXXThisExpr 0x55555cb44a98 <col:31> 'BoundedIntArg *' implicit this
|           | | `-ImplicitCastExpr 0x55555cb44b88 <col:42> 'click_intmax_t':'long long' <LValueToRValue>
|           | |   `-MemberExpr 0x55555cb44ae8 <col:42> 'click_intmax_t':'long long' lvalue ->max_value 0x55555cb43c50
|           | |     `-CXXThisExpr 0x55555cb44ad8 <col:42> 'BoundedIntArg *' implicit this
|           | `-ReturnStmt 0x55555cb44bb0 <line:1140:13, col:20>
|           |   `-CXXBoolLiteralExpr 0x55555cb44ba0 <col:20> 'bool' false
|           `-CompoundStmt 0x55555cb44c60 <line:1141:16, line:1144:9>
|             |-BinaryOperator 0x55555cb44c20 <line:1142:13, col:22> '<dependent type>' '='
|             | |-DeclRefExpr 0x55555cb44be0 <col:13> 'V' lvalue ParmVar 0x55555cb43338 'result' 'V &'
|             | `-DeclRefExpr 0x55555cb44c00 <col:22> 'V' lvalue Var 0x55555cb44238 'x' 'V'
|             `-ReturnStmt 0x55555cb44c50 <line:1143:13, col:20>
|               `-CXXBoolLiteralExpr 0x55555cb44c40 <col:20> 'bool' true
|-CXXMethodDecl 0x55555cb436d8 <line:1147:5, line:1152:5> line:1147:17 check_min 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x55555cb435b8 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x55555cb45068 <col:54, line:1152:5>
|   `-IfStmt 0x55555cb45040 <line:1148:9, line:1151:83> has_else
|     |-ImplicitCastExpr 0x55555cb44d58 <line:1148:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x55555cb44d28 <col:13> 'const bool' lvalue ->is_signed 0x55555cb43cb0
|     |   `-CXXThisExpr 0x55555cb44d18 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x55555cb44e20 <line:1149:13, col:25>
|     | `-BinaryOperator 0x55555cb44e00 <col:20, col:25> 'bool' '>='
|     |   |-ImplicitCastExpr 0x55555cb44dd0 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55555cb44d70 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb435b8 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x55555cb44de8 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x55555cb44da0 <col:25> 'const click_intmax_t':'const long long' lvalue ->min_value 0x55555cb43bf0
|     |       `-CXXThisExpr 0x55555cb44d90 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x55555cb45030 <line:1151:13, col:83>
|       `-BinaryOperator 0x55555cb45010 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x55555cb44ea0 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x55555cb44e70 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x55555cb44e30 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb435b8 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x55555cb44e88 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x55555cb44e50 <col:25> 'int' 0
|         `-BinaryOperator 0x55555cb44ff0 <col:30, col:83> 'bool' '>='
|           |-CXXFunctionalCastExpr 0x55555cb44f20 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x55555cb44f08 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55555cb44ef0 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x55555cb44ed0 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb435b8 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x55555cb44fc8 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x55555cb44fb0 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x55555cb44f98 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x55555cb44f68 <col:74> 'const click_intmax_t':'const long long' lvalue ->min_value 0x55555cb43bf0
|                   `-CXXThisExpr 0x55555cb44f58 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x55555cb438a8 <line:1153:5, line:1158:5> line:1153:17 check_min 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x55555cb437b0 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x55555cb45428 <col:55, line:1158:5>
|   `-IfStmt 0x55555cb45400 <line:1154:9, line:1157:73> has_else
|     |-ImplicitCastExpr 0x55555cb450c0 <line:1154:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x55555cb45090 <col:13> 'const bool' lvalue ->is_signed 0x55555cb43cb0
|     |   `-CXXThisExpr 0x55555cb45080 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x55555cb452a8 <line:1155:13, col:70>
|     | `-BinaryOperator 0x55555cb45288 <col:20, col:70> 'bool' '||'
|     |   |-BinaryOperator 0x55555cb45168 <col:20, col:32> 'bool' '<'
|     |   | |-ImplicitCastExpr 0x55555cb45138 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x55555cb450e8 <col:20> 'const click_intmax_t':'const long long' lvalue ->min_value 0x55555cb43bf0
|     |   | |   `-CXXThisExpr 0x55555cb450d8 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x55555cb45150 <col:32> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x55555cb45118 <col:32> 'int' 0
|     |   `-BinaryOperator 0x55555cb45268 <col:37, col:70> 'bool' '>='
|     |     |-ImplicitCastExpr 0x55555cb45250 <col:37> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x55555cb45188 <col:37> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x55555cb437b0 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x55555cb45228 <col:42, col:70> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x55555cb45210 <col:61> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x55555cb451f8 <col:61> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x55555cb451c8 <col:61> 'const click_intmax_t':'const long long' lvalue ->min_value 0x55555cb43bf0
|     |             `-CXXThisExpr 0x55555cb451b8 <col:61> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x55555cb453f0 <line:1157:13, col:73>
|       `-BinaryOperator 0x55555cb453d0 <col:20, col:73> 'bool' '>='
|         |-CXXFunctionalCastExpr 0x55555cb45300 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x55555cb452e8 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x55555cb452c8 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x55555cb437b0 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x55555cb453a8 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x55555cb45390 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x55555cb45378 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x55555cb45348 <col:64> 'const click_intmax_t':'const long long' lvalue ->min_value 0x55555cb43bf0
|                 `-CXXThisExpr 0x55555cb45338 <col:64> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x55555cb439f0 <line:1159:5, line:1164:5> line:1159:17 check_max 'bool (click_int_large_t) const' inline
| |-ParmVarDecl 0x55555cb43960 <col:27, col:45> col:45 used x 'click_int_large_t':'long long'
| `-CompoundStmt 0x55555cb45790 <col:54, line:1164:5>
|   `-IfStmt 0x55555cb45768 <line:1160:9, line:1163:83> has_else
|     |-ImplicitCastExpr 0x55555cb45480 <line:1160:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x55555cb45450 <col:13> 'const bool' lvalue ->is_signed 0x55555cb43cb0
|     |   `-CXXThisExpr 0x55555cb45440 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x55555cb45548 <line:1161:13, col:25>
|     | `-BinaryOperator 0x55555cb45528 <col:20, col:25> 'bool' '<='
|     |   |-ImplicitCastExpr 0x55555cb454f8 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|     |   | `-DeclRefExpr 0x55555cb45498 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb43960 'x' 'click_int_large_t':'long long'
|     |   `-ImplicitCastExpr 0x55555cb45510 <col:25> 'click_intmax_t':'long long' <LValueToRValue>
|     |     `-MemberExpr 0x55555cb454c8 <col:25> 'const click_intmax_t':'const long long' lvalue ->max_value 0x55555cb43c50
|     |       `-CXXThisExpr 0x55555cb454b8 <col:25> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x55555cb45758 <line:1163:13, col:83>
|       `-BinaryOperator 0x55555cb45738 <col:20, col:83> 'bool' '&&'
|         |-BinaryOperator 0x55555cb455c8 <col:20, col:25> 'bool' '>='
|         | |-ImplicitCastExpr 0x55555cb45598 <col:20> 'click_int_large_t':'long long' <LValueToRValue>
|         | | `-DeclRefExpr 0x55555cb45558 <col:20> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb43960 'x' 'click_int_large_t':'long long'
|         | `-ImplicitCastExpr 0x55555cb455b0 <col:25> 'long long' <IntegralCast>
|         |   `-IntegerLiteral 0x55555cb45578 <col:25> 'int' 0
|         `-BinaryOperator 0x55555cb45718 <col:30, col:83> 'bool' '<='
|           |-CXXFunctionalCastExpr 0x55555cb45648 <col:30, col:50> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           | `-ImplicitCastExpr 0x55555cb45630 <col:49> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55555cb45618 <col:49> 'click_int_large_t':'long long' <LValueToRValue> part_of_explicit_cast
|           |     `-DeclRefExpr 0x55555cb455f8 <col:49> 'click_int_large_t':'long long' lvalue ParmVar 0x55555cb43960 'x' 'click_int_large_t':'long long'
|           `-CXXFunctionalCastExpr 0x55555cb456f0 <col:55, col:83> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|             `-ImplicitCastExpr 0x55555cb456d8 <col:74> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|               `-ImplicitCastExpr 0x55555cb456c0 <col:74> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|                 `-MemberExpr 0x55555cb45690 <col:74> 'const click_intmax_t':'const long long' lvalue ->max_value 0x55555cb43c50
|                   `-CXXThisExpr 0x55555cb45680 <col:74> 'const BoundedIntArg *' implicit this
|-CXXMethodDecl 0x55555cb43b38 <line:1165:5, line:1170:5> line:1165:17 check_max 'bool (click_uint_large_t) const' inline
| |-ParmVarDecl 0x55555cb43aa8 <col:27, col:46> col:46 used x 'click_uint_large_t':'unsigned long long'
| `-CompoundStmt 0x55555cb45b50 <col:55, line:1170:5>
|   `-IfStmt 0x55555cb45b28 <line:1166:9, line:1169:73> has_else
|     |-ImplicitCastExpr 0x55555cb457e8 <line:1166:13> 'bool' <LValueToRValue>
|     | `-MemberExpr 0x55555cb457b8 <col:13> 'const bool' lvalue ->is_signed 0x55555cb43cb0
|     |   `-CXXThisExpr 0x55555cb457a8 <col:13> 'const BoundedIntArg *' implicit this
|     |-ReturnStmt 0x55555cb459d0 <line:1167:13, col:71>
|     | `-BinaryOperator 0x55555cb459b0 <col:20, col:71> 'bool' '&&'
|     |   |-BinaryOperator 0x55555cb45890 <col:20, col:33> 'bool' '>='
|     |   | |-ImplicitCastExpr 0x55555cb45860 <col:20> 'click_intmax_t':'long long' <LValueToRValue>
|     |   | | `-MemberExpr 0x55555cb45810 <col:20> 'const click_intmax_t':'const long long' lvalue ->max_value 0x55555cb43c50
|     |   | |   `-CXXThisExpr 0x55555cb45800 <col:20> 'const BoundedIntArg *' implicit this
|     |   | `-ImplicitCastExpr 0x55555cb45878 <col:33> 'long long' <IntegralCast>
|     |   |   `-IntegerLiteral 0x55555cb45840 <col:33> 'int' 0
|     |   `-BinaryOperator 0x55555cb45990 <col:38, col:71> 'bool' '<='
|     |     |-ImplicitCastExpr 0x55555cb45978 <col:38> 'click_uint_large_t':'unsigned long long' <LValueToRValue>
|     |     | `-DeclRefExpr 0x55555cb458b0 <col:38> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x55555cb43aa8 'x' 'click_uint_large_t':'unsigned long long'
|     |     `-CXXFunctionalCastExpr 0x55555cb45950 <col:43, col:71> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|     |       `-ImplicitCastExpr 0x55555cb45938 <col:62> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|     |         `-ImplicitCastExpr 0x55555cb45920 <col:62> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|     |           `-MemberExpr 0x55555cb458f0 <col:62> 'const click_intmax_t':'const long long' lvalue ->max_value 0x55555cb43c50
|     |             `-CXXThisExpr 0x55555cb458e0 <col:62> 'const BoundedIntArg *' implicit this
|     `-ReturnStmt 0x55555cb45b18 <line:1169:13, col:73>
|       `-BinaryOperator 0x55555cb45af8 <col:20, col:73> 'bool' '<='
|         |-CXXFunctionalCastExpr 0x55555cb45a28 <col:20, col:40> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|         | `-ImplicitCastExpr 0x55555cb45a10 <col:39> 'click_uint_large_t':'unsigned long long' <LValueToRValue> part_of_explicit_cast
|         |   `-DeclRefExpr 0x55555cb459f0 <col:39> 'click_uint_large_t':'unsigned long long' lvalue ParmVar 0x55555cb43aa8 'x' 'click_uint_large_t':'unsigned long long'
|         `-CXXFunctionalCastExpr 0x55555cb45ad0 <col:45, col:73> 'click_uint_large_t':'unsigned long long' functional cast to click_uint_large_t <NoOp>
|           `-ImplicitCastExpr 0x55555cb45ab8 <col:64> 'click_uint_large_t':'unsigned long long' <IntegralCast> part_of_explicit_cast
|             `-ImplicitCastExpr 0x55555cb45aa0 <col:64> 'click_intmax_t':'long long' <LValueToRValue> part_of_explicit_cast
|               `-MemberExpr 0x55555cb45a70 <col:64> 'const click_intmax_t':'const long long' lvalue ->max_value 0x55555cb43c50
|                 `-CXXThisExpr 0x55555cb45a60 <col:64> 'const BoundedIntArg *' implicit this
|-FieldDecl 0x55555cb43bf0 <line:1172:5, col:20> col:20 referenced min_value 'click_intmax_t':'long long'
|-FieldDecl 0x55555cb43c50 <line:1173:5, col:20> col:20 referenced max_value 'click_intmax_t':'long long'
|-FieldDecl 0x55555cb43cb0 <line:1174:5, col:10> col:10 referenced is_signed 'bool'
|-CXXConstructorDecl 0x55555cb917b8 <line:1122:7> col:7 implicit constexpr BoundedIntArg 'void (const BoundedIntArg &)' inline default trivial noexcept-unevaluated 0x55555cb917b8
| `-ParmVarDecl 0x55555cb918c8 <col:7> col:7 'const BoundedIntArg &'
|-CXXConstructorDecl 0x55555cb91a48 <col:7> col:7 implicit used constexpr BoundedIntArg 'void (BoundedIntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb91b58 <col:7> col:7 used 'BoundedIntArg &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55555cb929f0 <col:7> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55555cb92710 <col:7> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55555cb926e0 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb926b0 <col:7> 'BoundedIntArg' lvalue ParmVar 0x55555cb91b58 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x55555cb43bf0 'min_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x55555cb92ae8 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x55555cb92ab8 <col:7> 'click_intmax_t':'long long' xvalue .min_value 0x55555cb43bf0
| |     `-CXXStaticCastExpr 0x55555cb92a88 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb92a58 <col:7> 'BoundedIntArg' lvalue ParmVar 0x55555cb91b58 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x55555cb43c50 'max_value' 'click_intmax_t':'long long'
| | `-ImplicitCastExpr 0x55555cb92bb8 <col:7> 'click_intmax_t':'long long' <LValueToRValue>
| |   `-MemberExpr 0x55555cb92b88 <col:7> 'click_intmax_t':'long long' xvalue .max_value 0x55555cb43c50
| |     `-CXXStaticCastExpr 0x55555cb92b58 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb92b28 <col:7> 'BoundedIntArg' lvalue ParmVar 0x55555cb91b58 '' 'BoundedIntArg &&'
| |-CXXCtorInitializer Field 0x55555cb43cb0 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x55555cb92c88 <col:7> 'bool' <LValueToRValue>
| |   `-MemberExpr 0x55555cb92c58 <col:7> 'bool' xvalue .is_signed 0x55555cb43cb0
| |     `-CXXStaticCastExpr 0x55555cb92c28 <col:7> 'BoundedIntArg' xvalue static_cast<class BoundedIntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55555cb92bf8 <col:7> 'BoundedIntArg' lvalue ParmVar 0x55555cb91b58 '' 'BoundedIntArg &&'
| `-CompoundStmt 0x55555cb92ce8 <col:7>
`-CXXDestructorDecl 0x55555cb92048 <col:7> col:7 implicit referenced ~BoundedIntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoundedIntArg = type <{ %class.IntArg, i64, i64, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.BoundedIntArg.base = type <{ %class.IntArg, i64, i64, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555c8312a0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555c8313b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55555c831448 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55555c831518 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55555c831600 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55555c831818 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55555c8316c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c8319c8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55555c8318d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55555c831b10 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55555c831a80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55555c831c58 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55555c831bc8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c831da0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55555c831d10 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c831e68 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55555c831fb0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55555c831f20 <col:28> col:31 'int'
|-CXXMethodDecl 0x55555c832078 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55555c8321c0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55555c832130 <col:28> col:31 'int'
|-CXXMethodDecl 0x55555c832338 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55555c832278 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c832480 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55555c8323f0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c832548 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55555c832708 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55555c8325f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55555c832670 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c832958 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55555c8327c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555c832840 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55555c832a08 <col:86> "" ""
|-CXXMethodDecl 0x55555c832c78 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55555c832ae8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55555c832b60 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c832e28 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55555c832d38 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55555c832fd8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55555c832ee0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55555c8332a8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55555c833090 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55555c833108 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55555c833180 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c833588 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55555c833370 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55555c8333e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555c833460 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55555c833640 <col:115> "" ""
|-AccessSpecDecl 0x55555c8336b0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55555c8336e8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555c834c00 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55555c834c00
| `-ParmVarDecl 0x55555c834d08 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55555c834da8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55555c834da8
| `-ParmVarDecl 0x55555c834eb8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55555c86a4e8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55555ca5c2e0 <col:7>
|-CXXConstructorDecl 0x55555c86a5c0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55555c86a5c0
| `-ParmVarDecl 0x55555c86a6d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55555c86a748 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55555c86a748
| `-ParmVarDecl 0x55555c86a858 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55555ca5ece0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca4ae88 prev 0x55555ca40090 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555ca4af80 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55555ca4b070 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55555ca4b198 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55555ca4b318 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55555ca4b498 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55555ca4b618 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55555ca5c448 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55555ca5ccb8 <col:11>
|-CXXDestructorDecl 0x55555ca5c520 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55555ca5c658 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55555ca5c658
| `-ParmVarDecl 0x55555ca5c768 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55555ca5c808 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55555ca5c808
| `-ParmVarDecl 0x55555ca5c918 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55555ca5f6d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55555ca5f7e8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55555ca5fa68 <col:11>
|   `-ReturnStmt 0x55555ca5fa58 <col:11>
|     `-UnaryOperator 0x55555ca5fa40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55555ca5fa30 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55555ca5f858 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55555ca5f858
  `-ParmVarDecl 0x55555ca5f968 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca4b680 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555ca4b798 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55555ca4b838 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55555ca4b8a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55555ca4b908 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55555ca4b970 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55555ca4b9d0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55555ca4ba90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55555ca4baf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55555ca4bb50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55555ca5c358 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55555ca4b838 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55555ca5ccc8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55555ca5cd20 <col:12>
|-CXXConstructorDecl 0x55555ca5c988 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55555ca5c988
| `-ParmVarDecl 0x55555ca5ca98 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55555ca5cb38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55555ca5cb38
| `-ParmVarDecl 0x55555ca5cc48 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55555ca5edc0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca397a0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555ca398b8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55555ca39948 <col:16, col:22> col:16 public
|-EnumDecl 0x55555ca39970 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55555ca39a70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55555ca39b50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca39a50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55555ca39a30 <col:21> 'int' 28
| `-EnumConstantDecl 0x55555ca39b00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55555ca39b68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca39ae0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55555ca39ac0 <col:22> 'int' 64
|-CXXMethodDecl 0x55555ca39ea8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55555ca39b90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555ca39c10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55555ca39c88 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555ca39d00 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca39f68 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3a168 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55555ca39fe0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55555ca3a058 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca3a218 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3a378 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55555ca3a288 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca3a420 <col:72> warn_unused_result ""
|-TypedefDecl 0x55555ca3a780 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55555ca3a710 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55555ca3a6b0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55555ca3a670 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55555c510310 'void'
|       |-PointerType 0x55555c7b9b40 'unsigned char *'
|       | `-BuiltinType 0x55555c510410 'unsigned char'
|       |-TypedefType 0x55555c5b6110 'size_t' sugar
|       | |-Typedef 0x55555c580af0 'size_t'
|       | `-BuiltinType 0x55555c510470 'unsigned long'
|       `-PointerType 0x55555c510b10 'void *'
|         `-BuiltinType 0x55555c510310 'void'
|-CXXMethodDecl 0x55555ca3abf8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55555ca3a7f0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55555ca3a868 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555ca3a900 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55555ca3a980 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55555ca552f0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55555ca552d8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55555ca552a0 <col:58> 'int' 0
| |-ParmVarDecl 0x55555ca3aa00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55555ca55318 <col:76> 'int' 0
| |-ParmVarDecl 0x55555ca3aa80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55555ca55338 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55555ca3acc8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3ad48 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55555ca3ae08 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55555ca3aea8 <col:20>
| `-OptimizeNoneAttr 0x55555ca3af00 <col:30>
|-CXXMethodDecl 0x55555ca3af78 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55555ca3b018 <col:20>
| `-OptimizeNoneAttr 0x55555ca3b070 <col:30>
|-CXXMethodDecl 0x55555ca3b0e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55555ca3b188 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3b238 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55555ca3b2d8 <col:20>
| |-OptimizeNoneAttr 0x55555ca3b330 <col:30>
| `-WarnUnusedResultAttr 0x55555ca3b358 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3b3b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55555ca3b450 <col:20>
| `-OptimizeNoneAttr 0x55555ca3b4a8 <col:30>
|-CXXMethodDecl 0x55555ca3b4f8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55555ca3b598 <col:20>
| `-OptimizeNoneAttr 0x55555ca3b5f0 <col:30>
|-CXXMethodDecl 0x55555ca3b638 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55555ca3b6d8 <col:20>
| `-OptimizeNoneAttr 0x55555ca3b730 <col:30>
|-CXXMethodDecl 0x55555ca3b778 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3b838 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3b900 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca3b9c8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca3ba88 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3bba8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55555ca55400 <col:54, line:99:5>
|   `-ReturnStmt 0x55555ca553f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55555ca553d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55555ca553a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55555ca4be88
|         `-CXXThisExpr 0x55555ca55398 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55555ca3bd48 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55555ca3bc58 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55555ca554b0 <col:67, line:103:5>
|   `-BinaryOperator 0x55555ca55490 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55555ca55428 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55555ca4be88
|     | `-CXXThisExpr 0x55555ca55418 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55555ca55478 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca55458 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55555ca3bc58 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55555ca3be40 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55555ca55530 <col:33, line:107:5>
|   `-ReturnStmt 0x55555ca55520 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55555ca55508 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55555ca554d8 <col:16> 'void *' lvalue ->_destructor_argument 0x55555ca4bef0
|         `-CXXThisExpr 0x55555ca554c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55555ca3bf00 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55555ca55b60 <col:25, line:113:5>
|   |-ParenExpr 0x55555ca558a8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55555ca55878 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca555e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55555ca555c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55555ca55588 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55555ca55558 <col:24> '<bound member function type>' ->shared 0x55555ca3af78
|   |   |       `-ImplicitCastExpr 0x55555ca555a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55555ca55548 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55555ca55648 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca55628 <col:42> 'int' 0
|   |   `-CallExpr 0x55555ca557d8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55555ca557c0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca557a0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca55818 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca556b8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55555ca55830 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca556e0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca55848 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca55718 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55555ca55860 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca55788 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca55770 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca55738 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55555ca55aa8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55555ca558d8 <col:2> 'unsigned char *' lvalue ->_head 0x55555ca4bc90
|   | | `-CXXThisExpr 0x55555ca558c8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55555ca55a90 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55555ca55a70 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55555ca55918 <col:10> 'unsigned char *' lvalue ->_data 0x55555ca4bcf8
|   |     | `-CXXThisExpr 0x55555ca55908 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55555ca55a58 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55555ca55a38 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55555ca55958 <col:18> 'unsigned char *' lvalue ->_tail 0x55555ca4bd60
|   |         | `-CXXThisExpr 0x55555ca55948 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55555ca55a20 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55555ca55a00 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55555ca55998 <col:26> 'unsigned char *' lvalue ->_end 0x55555ca4bdc8
|   |             | `-CXXThisExpr 0x55555ca55988 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55555ca559e8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55555ca559c8 <col:33> 'int' 0
|   `-BinaryOperator 0x55555ca55b40 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55555ca55ad8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55555ca4be88
|     | `-CXXThisExpr 0x55555ca55ac8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55555ca55b28 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55555ca55b08 <col:16> 'int' 0
|-CXXMethodDecl 0x55555ca3c040 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55555ca3bfb0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3c0e8 <col:20>
| |-OptimizeNoneAttr 0x55555ca3c140 <col:30>
| `-WarnUnusedResultAttr 0x55555ca3c168 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3c238 <line:152:5, col:120> col:56 used push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55555ca3c1a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3c2e0 <col:20>
| |-OptimizeNoneAttr 0x55555ca3c338 <col:30>
| `-WarnUnusedResultAttr 0x55555ca3c360 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3c498 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55555ca3c3a0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca3c540 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3c640 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55555ca3c5b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3c6e8 <col:20>
| `-OptimizeNoneAttr 0x55555ca3c740 <col:30>
|-CXXMethodDecl 0x55555ca3c808 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55555ca3c778 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca3c8b0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3c9b0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55555ca3c920 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55555ca3ca58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3cb58 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55555ca3cac8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3cc00 <col:20>
| `-OptimizeNoneAttr 0x55555ca3cc58 <col:30>
|-CXXMethodDecl 0x55555ca3cde8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55555ca3cc98 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55555ca3cd10 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55555ca55358 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55555ca3ce98 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55555ca3d098 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55555ca3cf10 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55555ca3cf88 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca3d2a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55555ca3d158 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55555ca3d1d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca3d4b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55555ca3d368 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55555ca3d3e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55555ca55368 <col:39> 'int' 0
|-CXXMethodDecl 0x55555ca3d588 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55555ca3d650 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca3d718 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55555ca3d7d8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3d8a0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55555ca3d9e8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55555ca3d958 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55555ca3dbb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55555ca3daa8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55555ca3db20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca3dc88 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55555ca3dd48 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55555ca3dde8 <col:20>
| `-OptimizeNoneAttr 0x55555ca3de40 <col:30>
|-CXXMethodDecl 0x55555ca3de90 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55555ca3df30 <col:20>
| `-OptimizeNoneAttr 0x55555ca3df88 <col:30>
|-CXXMethodDecl 0x55555ca3dfd8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55555ca3e098 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3e160 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55555ca3e200 <col:20>
| `-OptimizeNoneAttr 0x55555ca3e258 <col:30>
|-CXXMethodDecl 0x55555ca3e3a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55555ca3e298 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55555ca3e310 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca3e4f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55555ca3e468 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca3e5d0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55555ca3e690 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55555ca3e730 <col:20>
| `-OptimizeNoneAttr 0x55555ca3e788 <col:30>
|-CXXMethodDecl 0x55555ca3e7d8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55555ca3e878 <col:20>
| `-OptimizeNoneAttr 0x55555ca3e8d0 <col:30>
|-CXXMethodDecl 0x55555ca3e920 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55555ca3e9e8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55555ca3ea88 <col:20>
| `-OptimizeNoneAttr 0x55555ca3eae0 <col:30>
|-CXXMethodDecl 0x55555ca3eb28 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55555ca3ec48 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55555ca3edb8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55555ca3ecf8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55555ca3eea8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55555ca3ef48 <col:20>
| `-OptimizeNoneAttr 0x55555ca3efa0 <col:30>
|-CXXMethodDecl 0x55555ca3eff0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55555ca3f0b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55555ca3f2e8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55555ca3f160 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55555ca3f1d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3f398 <col:20>
| `-OptimizeNoneAttr 0x55555ca3f3f0 <col:30>
|-CXXMethodDecl 0x55555ca3f498 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55555ca3f538 <col:20>
| `-OptimizeNoneAttr 0x55555ca3f590 <col:30>
|-CXXMethodDecl 0x55555ca3f5e0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55555ca3f680 <col:20>
| `-OptimizeNoneAttr 0x55555ca3f6d8 <col:30>
|-CXXMethodDecl 0x55555ca3f720 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55555ca3f7c0 <col:20>
| `-OptimizeNoneAttr 0x55555ca3f818 <col:30>
|-CXXMethodDecl 0x55555ca3f918 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55555ca3f850 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55555ca3f9c0 <col:20>
| `-OptimizeNoneAttr 0x55555ca3fa18 <col:30>
|-CXXMethodDecl 0x55555ca3fbd8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55555ca3fa50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55555ca3fac8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca3fc88 <col:20>
| `-OptimizeNoneAttr 0x55555ca3fce0 <col:30>
|-CXXMethodDecl 0x55555ca3fd88 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55555ca3fea8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55555ca3ffc8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55555ca40068 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55555ca40090 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55555ca401b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55555ca40258 <col:20>
| `-OptimizeNoneAttr 0x55555ca402b0 <col:30>
|-CXXMethodDecl 0x55555ca40358 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55555ca403f8 <col:20>
| `-OptimizeNoneAttr 0x55555ca40450 <col:30>
|-AccessSpecDecl 0x55555ca40478 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55555ca404a0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55555ca405a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55555ca405f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca40580 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55555ca40560 <col:14> 'int' 48
|-CXXMethodDecl 0x55555ca40658 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55555ca406f8 <col:20>
| `-OptimizeNoneAttr 0x55555ca40750 <col:30>
|-CXXMethodDecl 0x55555ca407c8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55555ca40868 <col:20>
| `-OptimizeNoneAttr 0x55555ca408c0 <col:30>
|-CXXMethodDecl 0x55555ca40988 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55555ca408f8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55555ca40b28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55555ca40cc8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55555ca40bd8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55555ca40d70 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55555ca40e70 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41220 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca40e50 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55555ca40e30 <col:9> 'int' 0
| |-EnumConstantDecl 0x55555ca40f00 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41238 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca40ee0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55555ca40ec0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55555ca40f90 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41250 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca40f70 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55555ca40f50 <col:14> 'int' 2
| |-EnumConstantDecl 0x55555ca41020 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41268 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41000 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55555ca40fe0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55555ca410b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41280 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41090 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55555ca41070 <col:13> 'int' 4
| |-EnumConstantDecl 0x55555ca41140 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55555ca41298 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41120 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55555ca41100 <col:13> 'int' 5
| `-EnumConstantDecl 0x55555ca411d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55555ca412b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca411b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55555ca41190 <col:14> 'int' 6
|-CXXMethodDecl 0x55555ca41318 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55555ca413b8 <col:20>
| `-OptimizeNoneAttr 0x55555ca41410 <col:30>
|-CXXMethodDecl 0x55555ca41508 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55555ca41448 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55555ca415b0 <col:20>
| `-OptimizeNoneAttr 0x55555ca41608 <col:30>
|-CXXMethodDecl 0x55555ca41678 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55555ca417a0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55555ca41918 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55555ca41850 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55555ca419e0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55555ca41aa8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55555ca41be8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55555ca41b58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55555ca41c90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55555ca41d90 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55555ca41f90 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41d70 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55555ca41d50 <col:23> 'int' 0
| |-EnumConstantDecl 0x55555ca41e20 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55555ca41fa8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41e00 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55555ca41de0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55555ca41eb0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55555ca41fc0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca41e90 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55555ca41e70 <col:24> 'int' 0
| `-EnumConstantDecl 0x55555ca41f40 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55555ca41fd8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca41f20 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55555ca41f00 <col:47> 'int' 16
|-CXXMethodDecl 0x55555ca42038 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55555ca421a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55555ca420e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55555ca42250 <col:20>
| `-OptimizeNoneAttr 0x55555ca422a8 <col:30>
|-CXXMethodDecl 0x55555ca422f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55555ca55c80 <col:18, col:36>
|   `-ReturnStmt 0x55555ca55c70 <col:20, col:33>
|     `-ImplicitCastExpr 0x55555ca55c58 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55555ca55c38 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55555ca55c08 <col:27> '<bound member function type>' ->xanno 0x55555ca40358
|           `-CXXThisExpr 0x55555ca55bf8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55555ca423f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55555ca55d90 <col:30, col:48>
|   `-ReturnStmt 0x55555ca55d80 <col:32, col:45>
|     `-ImplicitCastExpr 0x55555ca55d68 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55555ca55d48 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55555ca55d18 <col:39> '<bound member function type>' ->xanno 0x55555ca401b8
|           `-CXXThisExpr 0x55555ca55d08 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55555ca424d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55555ca55f28 <col:24, col:50>
|   `-ReturnStmt 0x55555ca55f18 <col:26, col:47>
|     `-UnaryOperator 0x55555ca55f00 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55555ca55ee0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55555ca55ec8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55555ca55e78 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55555ca4b198
|         |   `-CXXMemberCallExpr 0x55555ca55e58 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55555ca55e28 <col:34> '<bound member function type>' ->xanno 0x55555ca40358
|         |       `-CXXThisExpr 0x55555ca55e18 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55555ca55ea8 <col:46> 'int' 0
|-CXXMethodDecl 0x55555ca425e0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55555ca560f8 <col:36, col:62>
|   `-ReturnStmt 0x55555ca560e8 <col:38, col:59>
|     `-UnaryOperator 0x55555ca560d0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55555ca560b0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55555ca56098 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55555ca56010 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55555ca4b198
|         |   `-CXXMemberCallExpr 0x55555ca55ff0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55555ca55fc0 <col:46> '<bound member function type>' ->xanno 0x55555ca401b8
|         |       `-CXXThisExpr 0x55555ca55fb0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55555ca56040 <col:58> 'int' 0
|-CXXMethodDecl 0x55555ca426f8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55555ca56290 <col:26, col:53>
|   `-ReturnStmt 0x55555ca56280 <col:28, col:50>
|     `-UnaryOperator 0x55555ca56268 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55555ca56248 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55555ca56230 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55555ca561e0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55555ca4b498
|         |   `-CXXMemberCallExpr 0x55555ca561c0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55555ca56190 <col:36> '<bound member function type>' ->xanno 0x55555ca40358
|         |       `-CXXThisExpr 0x55555ca56180 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55555ca56210 <col:49> 'int' 0
|-CXXMethodDecl 0x55555ca42818 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55555ca56468 <col:38, col:65>
|   `-ReturnStmt 0x55555ca56458 <col:40, col:62>
|     `-UnaryOperator 0x55555ca56440 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55555ca56420 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55555ca56408 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55555ca56378 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55555ca4b498
|         |   `-CXXMemberCallExpr 0x55555ca56358 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55555ca56328 <col:48> '<bound member function type>' ->xanno 0x55555ca401b8
|         |       `-CXXThisExpr 0x55555ca56318 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55555ca563a8 <col:61> 'int' 0
|-CXXMethodDecl 0x55555ca429c8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55555ca428d0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55555ca56b38 <col:34, line:463:5>
|   |-ParenExpr 0x55555ca56980 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55555ca56950 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca565b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca56588 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca564d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca564c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca56480 <col:23> 'int' lvalue ParmVar 0x55555ca428d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca564a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca56568 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca56538 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca564f8 <col:33> 'int' lvalue ParmVar 0x55555ca428d0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55555ca56550 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55555ca56518 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55555ca56618 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca565f8 <col:56> 'int' 0
|   |   `-CallExpr 0x55555ca568b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55555ca56898 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca56878 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca568f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca56708 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55555ca56908 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca56738 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca56920 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca56770 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55555ca56938 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca56860 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca56848 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca56808 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55555ca56b28 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55555ca56b10 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55555ca56af0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55555ca56ac0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55555ca56a70 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55555ca4b198
|         |   `-CXXMemberCallExpr 0x55555ca56a50 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55555ca56a20 <col:9> '<bound member function type>' ->xanno 0x55555ca401b8
|         |       `-CXXThisExpr 0x55555ca56a10 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55555ca56ad8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55555ca56aa0 <col:21> 'int' lvalue ParmVar 0x55555ca428d0 'i' 'int'
|-CXXMethodDecl 0x55555ca42c18 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55555ca42a88 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55555ca42b00 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55555ca571c8 <col:40, line:472:5>
|   |-ParenExpr 0x55555ca56fe0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55555ca56fb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca56c90 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca56c60 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca56bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca56b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca56b58 <col:23> 'int' lvalue ParmVar 0x55555ca42a88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca56b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca56c40 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca56c10 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca56bd0 <col:33> 'int' lvalue ParmVar 0x55555ca42a88 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55555ca56c28 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55555ca56bf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55555ca56cf0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca56cd0 <col:56> 'int' 0
|   |   `-CallExpr 0x55555ca56f10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55555ca56ef8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca56ed8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca56f50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca56d60 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55555ca56f68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca56d90 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca56f80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca56dc8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55555ca56f98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca56ec0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca56ea8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca56e68 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55555ca571a8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55555ca57150 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55555ca57120 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55555ca570d0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55555ca4b198
|     | |   `-CXXMemberCallExpr 0x55555ca570b0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55555ca57080 <col:2> '<bound member function type>' ->xanno 0x55555ca40358
|     | |       `-CXXThisExpr 0x55555ca57070 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55555ca57138 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55555ca57100 <col:14> 'int' lvalue ParmVar 0x55555ca42a88 'i' 'int'
|     `-ImplicitCastExpr 0x55555ca57190 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca57170 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55555ca42b00 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55555ca42dd8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55555ca42ce0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55555ca57948 <col:36, line:485:5>
|   |-ParenExpr 0x55555ca576b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca57680 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca57360 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca57330 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca57240 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca57228 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca571e8 <col:23> 'int' lvalue ParmVar 0x55555ca42ce0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca57208 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca57310 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca572f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca57260 <col:33> 'int' lvalue ParmVar 0x55555ca42ce0 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca572d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca572c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca57280 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca572a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55555ca573c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca573a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca575e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca575c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca575a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca57620 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca57430 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55555ca57638 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca57468 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca57650 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca574a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55555ca57668 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca57590 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca57578 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca57538 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55555ca57938 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55555ca57920 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55555ca57908 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca578d8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55555ca57878 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca57848 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca577c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca577a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca57770 <col:61> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca57760 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca57860 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca577f0 <col:74> 'int' lvalue ParmVar 0x55555ca42ce0 'i' 'int'
|-CXXMethodDecl 0x55555ca43028 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55555ca42e98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55555ca42f10 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55555ca58098 <col:42, line:500:5>
|   |-ParenExpr 0x55555ca57e30 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca57e00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca57ae0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca57ab0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca579c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca579a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca57968 <col:23> 'int' lvalue ParmVar 0x55555ca42e98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca57988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca57a90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca57a78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca579e0 <col:33> 'int' lvalue ParmVar 0x55555ca42e98 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca57a58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca57a40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca57a00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca57a20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55555ca57b40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca57b20 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca57d60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca57d48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca57d28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca57da0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca57bb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55555ca57db8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca57be8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca57dd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca57c20 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55555ca57de8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca57d10 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca57cf8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca57cb8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55555ca58078 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55555ca58028 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55555ca57ff8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55555ca57fa0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55555ca57f70 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55555ca57f20 <col:48, col:57> 'char [48]' lvalue ->c 0x55555ca4b070
|     |     |   `-CXXMemberCallExpr 0x55555ca57f00 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55555ca57ed0 <col:48> '<bound member function type>' ->xanno 0x55555ca40358
|     |     |       `-CXXThisExpr 0x55555ca57ec0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55555ca57f88 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55555ca57f50 <col:61> 'int' lvalue ParmVar 0x55555ca42e98 'i' 'int'
|     `-ImplicitCastExpr 0x55555ca58060 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca58040 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55555ca42f10 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55555ca431e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55555ca430f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55555ca587f8 <col:35, line:513:5>
|   |-ParenExpr 0x55555ca58508 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca584d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca58230 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca58200 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca58110 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca580f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca580b8 <col:23> 'int' lvalue ParmVar 0x55555ca430f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca580d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca581e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca581c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca58130 <col:33> 'int' lvalue ParmVar 0x55555ca430f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca581a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca58190 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca58150 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca58170 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55555ca58290 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca58270 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca58438 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca58420 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca58400 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca58478 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca58300 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55555ca58490 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca58338 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca584a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca58370 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55555ca584c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca583e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca583d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca58390 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55555ca587e8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55555ca587d0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55555ca587b8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca58788 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55555ca58700 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca586d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca58680 <col:60, col:69> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca58660 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca58630 <col:60> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca58620 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca586e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca586b0 <col:73> 'int' lvalue ParmVar 0x55555ca430f0 'i' 'int'
|-CXXMethodDecl 0x55555ca43438 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55555ca432a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55555ca43320 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55555ca58f18 <col:41, line:528:5>
|   |-ParenExpr 0x55555ca58ca0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca58c70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca58990 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca58960 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca58870 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca58858 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca58818 <col:23> 'int' lvalue ParmVar 0x55555ca432a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca58838 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca58940 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca58928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca58890 <col:33> 'int' lvalue ParmVar 0x55555ca432a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca58908 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca588f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca588b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca588d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55555ca589f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca589d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca58bd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca58bb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca58b98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca58c10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca58a60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55555ca58c28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca58a98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca58c40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca58ad0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55555ca58c58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca58b80 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca58b68 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca58b28 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55555ca58ef8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55555ca58ea8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55555ca58e78 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55555ca58e20 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55555ca58de0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55555ca58d90 <col:47, col:56> 'char [48]' lvalue ->c 0x55555ca4b070
|     |     |   `-CXXMemberCallExpr 0x55555ca58d70 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55555ca58d40 <col:47> '<bound member function type>' ->xanno 0x55555ca40358
|     |     |       `-CXXThisExpr 0x55555ca58d30 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55555ca58df8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55555ca58dc0 <col:60> 'int' lvalue ParmVar 0x55555ca432a8 'i' 'int'
|     `-ImplicitCastExpr 0x55555ca58ee0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca58ec0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55555ca43320 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55555ca435f8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55555ca43500 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55555ca595e8 <col:36, line:541:5>
|   |-ParenExpr 0x55555ca59388 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca59358 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca590b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca59080 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca58f90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca58f78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca58f38 <col:23> 'int' lvalue ParmVar 0x55555ca43500 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca58f58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca59060 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca59048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca58fb0 <col:33> 'int' lvalue ParmVar 0x55555ca43500 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca59028 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca59010 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca58fd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca58ff0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55555ca59110 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca590f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca592b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca592a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca59280 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca592f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca59180 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55555ca59310 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca591b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca59328 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca591f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55555ca59340 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca59268 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca59250 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca59210 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55555ca595d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55555ca595c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55555ca595a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca59578 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55555ca59520 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca594f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca594a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca59480 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca59450 <col:61> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca59440 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca59508 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca594d0 <col:74> 'int' lvalue ParmVar 0x55555ca43500 'i' 'int'
|-CXXMethodDecl 0x55555ca437c8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55555ca436b8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55555ca43730 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55555ca43878 <col:20>
| `-OptimizeNoneAttr 0x55555ca438d0 <col:30>
|-CXXMethodDecl 0x55555ca43a08 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55555ca43910 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55555ca59cb8 <col:35, line:562:5>
|   |-ParenExpr 0x55555ca59a58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca59a28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca59780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca59750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca59660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca59648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca59608 <col:23> 'int' lvalue ParmVar 0x55555ca43910 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca59628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca59730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca59718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca59680 <col:33> 'int' lvalue ParmVar 0x55555ca43910 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca596f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca596e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca596a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca596c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55555ca597e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca597c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca59988 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca59970 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca59950 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca599c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca59850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55555ca599e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca59888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca599f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca598c0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55555ca59a10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca59938 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca59920 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca598e0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55555ca59ca8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55555ca59c90 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55555ca59c78 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca59c48 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55555ca59bf0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca59bc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca59b70 <col:60, col:69> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca59b50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca59b20 <col:60> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca59b10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca59bd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca59ba0 <col:73> 'int' lvalue ParmVar 0x55555ca43910 'i' 'int'
|-CXXMethodDecl 0x55555ca43c18 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55555ca43ac8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55555ca43b40 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55555ca5a398 <col:41, line:577:5>
|   |-ParenExpr 0x55555ca5a128 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca5a0f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca59e50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca59e20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca59d30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca59d18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca59cd8 <col:23> 'int' lvalue ParmVar 0x55555ca43ac8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca59cf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca59e00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca59de8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca59d50 <col:33> 'int' lvalue ParmVar 0x55555ca43ac8 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca59dc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca59db0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca59d70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca59d90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55555ca59eb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca59e90 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca5a058 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca5a040 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca5a020 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca5a098 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca59f20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55555ca5a0b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca59f58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca5a0c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca59f90 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55555ca5a0e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca5a008 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca59ff0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca59fb0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55555ca5a378 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55555ca5a328 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55555ca5a2f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55555ca5a298 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55555ca5a268 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55555ca5a218 <col:47, col:56> 'char [48]' lvalue ->c 0x55555ca4b070
|     |     |   `-CXXMemberCallExpr 0x55555ca5a1f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55555ca5a1c8 <col:47> '<bound member function type>' ->xanno 0x55555ca40358
|     |     |       `-CXXThisExpr 0x55555ca5a1b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55555ca5a280 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55555ca5a248 <col:60> 'int' lvalue ParmVar 0x55555ca43ac8 'i' 'int'
|     `-ImplicitCastExpr 0x55555ca5a360 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca5a340 <col:65> 'int32_t':'int' lvalue ParmVar 0x55555ca43b40 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55555ca43dd8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55555ca43ce0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55555ca5aac8 <col:36, line:591:5>
|   |-ParenExpr 0x55555ca5a808 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca5a7d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca5a530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca5a500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca5a410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca5a3f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca5a3b8 <col:23> 'int' lvalue ParmVar 0x55555ca43ce0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca5a3d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca5a4e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca5a4c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca5a430 <col:33> 'int' lvalue ParmVar 0x55555ca43ce0 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca5a4a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca5a490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca5a450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca5a470 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55555ca5a590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca5a570 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca5a738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca5a720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca5a700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca5a778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5a600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55555ca5a790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5a638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca5a7a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca5a670 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55555ca5a7c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca5a6e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca5a6d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca5a690 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55555ca5aab8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55555ca5aaa0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55555ca5aa88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca5aa58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55555ca5a9d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca5a9a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca5a950 <col:61, col:70> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca5a930 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca5a900 <col:61> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca5a8f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca5a9b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca5a980 <col:74> 'int' lvalue ParmVar 0x55555ca43ce0 'i' 'int'
|-CXXMethodDecl 0x55555ca44028 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55555ca43e98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55555ca43f10 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55555ca5b1a8 <col:42, line:606:5>
|   |-ParenExpr 0x55555ca5af38 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55555ca5af08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca5ac60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca5ac30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca5ab40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca5ab28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca5aae8 <col:23> 'int' lvalue ParmVar 0x55555ca43e98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca5ab08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca5ac10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55555ca5abf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca5ab60 <col:33> 'int' lvalue ParmVar 0x55555ca43e98 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca5abd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca5abc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca5ab80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55555ca5aba0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55555ca5acc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca5aca0 <col:60> 'int' 0
|   |   `-CallExpr 0x55555ca5ae68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55555ca5ae50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca5ae30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca5aea8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5ad30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55555ca5aec0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5ad68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca5aed8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca5ada0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55555ca5aef0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca5ae18 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca5ae00 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca5adc0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55555ca5b188 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55555ca5b138 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55555ca5b108 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55555ca5b0a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55555ca5b078 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55555ca5b028 <col:48, col:57> 'char [48]' lvalue ->c 0x55555ca4b070
|     |     |   `-CXXMemberCallExpr 0x55555ca5b008 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55555ca5afd8 <col:48> '<bound member function type>' ->xanno 0x55555ca40358
|     |     |       `-CXXThisExpr 0x55555ca5afc8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55555ca5b090 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55555ca5b058 <col:61> 'int' lvalue ParmVar 0x55555ca43e98 'i' 'int'
|     `-ImplicitCastExpr 0x55555ca5b170 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55555ca5b150 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55555ca43f10 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55555ca441c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55555ca440f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55555ca5ba18 <col:33, line:620:5>
|   |-ParenExpr 0x55555ca5b790 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55555ca5b760 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca5b3b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca5b380 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca5b220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca5b208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca5b1c8 <col:23> 'int' lvalue ParmVar 0x55555ca440f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca5b1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca5b360 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55555ca5b348 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca5b240 <col:33> 'int' lvalue ParmVar 0x55555ca440f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca5b328 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca5b310 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca5b260 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55555ca5b2e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55555ca5b2d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55555ca5b298 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55555ca5b410 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca5b3f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55555ca5b6c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55555ca5b6a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca5b688 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca5b700 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5b4f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55555ca5b718 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5b540 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca5b730 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca5b578 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55555ca5b748 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca5b670 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca5b658 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca5b618 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55555ca5ba08 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55555ca5b9f0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55555ca5b9d8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55555ca5b9a8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55555ca5b920 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55555ca5b8f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55555ca5b8a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55555ca4b070
|             |   `-CXXMemberCallExpr 0x55555ca5b880 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55555ca5b850 <col:67> '<bound member function type>' ->xanno 0x55555ca401b8
|             |       `-CXXThisExpr 0x55555ca5b840 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55555ca5b908 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca5b8d0 <col:80> 'int' lvalue ParmVar 0x55555ca440f0 'i' 'int'
|-CXXMethodDecl 0x55555ca443d8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55555ca44280 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55555ca44300 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55555ca5c240 <col:45, line:635:5>
|   |-ParenExpr 0x55555ca5bf88 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55555ca5bf58 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55555ca5bc20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55555ca5bbf0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55555ca5ba90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55555ca5ba78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55555ca5ba38 <col:23> 'int' lvalue ParmVar 0x55555ca44280 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55555ca5ba58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55555ca5bbd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55555ca5bbb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55555ca5bab0 <col:33> 'int' lvalue ParmVar 0x55555ca44280 'i' 'int'
|   |   |     `-BinaryOperator 0x55555ca5bb98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55555ca5bb80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55555ca5bad0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55555ca405a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55555ca5bb58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55555ca5bb40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55555ca5bb08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55555ca5bc80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55555ca5bc60 <col:79> 'int' 0
|   |   `-CallExpr 0x55555ca5beb8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55555ca5bea0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55555ca5be80 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55555c5aced0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55555ca5bef8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5bcf0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55555ca5bf10 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55555ca5bd38 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55555ca5bf28 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55555ca5bd70 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55555ca5bf40 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55555ca5be68 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55555ca5be50 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55555ca5be08 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55555ca5c220 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55555ca5c188 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55555ca5c158 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55555ca5c0f8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55555ca5c0c8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55555ca5c078 <col:54, col:63> 'char [48]' lvalue ->c 0x55555ca4b070
|     |     |   `-CXXMemberCallExpr 0x55555ca5c058 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55555ca5c028 <col:54> '<bound member function type>' ->xanno 0x55555ca40358
|     |     |       `-CXXThisExpr 0x55555ca5c018 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55555ca5c0e0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55555ca5c0a8 <col:67> 'int' lvalue ParmVar 0x55555ca44280 'i' 'int'
|     `-CXXConstCastExpr 0x55555ca5c1f0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55555ca5c1d8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55555ca5c1a0 <col:91> 'const void *' lvalue ParmVar 0x55555ca44300 'x' 'const void *'
|-CXXMethodDecl 0x55555ca444a8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55555ca5c2c8 <col:34, line:640:5>
|   `-ReturnStmt 0x55555ca5c2b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55555ca5c2a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55555ca5c270 <col:16> 'Packet *' lvalue ->_data_packet 0x55555ca4bc28
|         `-CXXThisExpr 0x55555ca5c260 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55555ca445e8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55555ca44558 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555ca55388 <col:46> 'bool' true
|-CXXMethodDecl 0x55555ca44768 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55555ca446a0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55555ca44810 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55555ca44fc0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55555ca44910 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45030 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca448f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55555ca448d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55555ca39a70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55555ca449a0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45048 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44980 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55555ca44960 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55555ca39b00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55555ca44a30 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45060 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44a10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55555ca449f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55555ca44ac0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45078 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44aa0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55555ca44a80 <col:19> 'int' 16
| |-EnumConstantDecl 0x55555ca44b50 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45090 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44b30 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55555ca44b10 <col:21> 'int' 16
| |-EnumConstantDecl 0x55555ca44be0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca450a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44bc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55555ca44ba0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55555ca44c70 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca450c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44c50 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55555ca44c30 <col:19> 'int' EnumConstant 0x55555ca44ac0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55555ca44d00 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca450d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44ce0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55555ca44cc0 <col:19> 'int' EnumConstant 0x55555ca44be0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55555ca44dd0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca450f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44db0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55555ca44d90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55555ca44d50 <col:23> 'int' EnumConstant 0x55555ca44d00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55555ca44d70 <col:40> 'int' 2
| |-EnumConstantDecl 0x55555ca44ea0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55555ca45108 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55555ca44e80 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55555ca44e60 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55555ca44e20 <col:23> 'int' EnumConstant 0x55555ca44d00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55555ca44e40 <col:40> 'int' 4
| `-EnumConstantDecl 0x55555ca44f70 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55555ca45120 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555ca44f50 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55555ca44f30 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55555ca44ef0 <col:23> 'int' EnumConstant 0x55555ca44d00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55555ca44f10 <col:40> 'int' 8
|-CXXMethodDecl 0x55555ca45160 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55555ca45200 <col:68> "" ""
|-CXXMethodDecl 0x55555ca45298 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55555ca45338 <col:45> "" ""
|-CXXMethodDecl 0x55555ca453d0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55555ca45470 <col:57> "" ""
|-CXXMethodDecl 0x55555ca45508 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55555ca455a8 <col:45> "" ""
|-CXXMethodDecl 0x55555ca45640 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55555ca456e0 <col:57> "" ""
|-CXXMethodDecl 0x55555ca45770 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55555ca45810 <col:51> "" ""
|-CXXMethodDecl 0x55555ca458a0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55555ca45940 <col:63> "" ""
|-CXXMethodDecl 0x55555ca459d0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55555ca45a70 <col:53> "" ""
|-CXXMethodDecl 0x55555ca45b00 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55555ca45ba0 <col:65> "" ""
|-CXXMethodDecl 0x55555ca45cb8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55555ca45c28 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55555ca45d60 <col:61> "" ""
|-CXXMethodDecl 0x55555ca45ef8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55555ca45de8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55555ca45e60 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55555ca45fa8 <col:67> "" ""
|-CXXMethodDecl 0x55555ca460c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55555ca46030 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55555ca46168 <col:63> "" ""
|-CXXMethodDecl 0x55555ca46300 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55555ca461f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55555ca46268 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55555ca463b0 <col:69> "" ""
|-CXXMethodDecl 0x55555ca464c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55555ca46438 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55555ca46570 <col:63> "" ""
|-CXXMethodDecl 0x55555ca48c48 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55555ca48b38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55555ca48bb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55555ca48cf8 <col:69> "" ""
|-CXXMethodDecl 0x55555ca48e10 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55555ca48d80 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55555ca48eb8 <col:62> "" ""
|-CXXMethodDecl 0x55555ca49050 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55555ca48f40 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55555ca48fb8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55555ca49100 <col:68> "" ""
|-CXXMethodDecl 0x55555ca49218 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55555ca49188 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55555ca492c0 <col:63> "" ""
|-CXXMethodDecl 0x55555ca49458 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55555ca49348 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55555ca493c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55555ca49508 <col:69> "" ""
|-CXXMethodDecl 0x55555ca49598 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55555ca49638 <col:64> "" ""
|-CXXMethodDecl 0x55555ca496c8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55555ca49768 <col:52> "" ""
|-CXXMethodDecl 0x55555ca497f8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55555ca49898 <col:67> "" ""
|-CXXMethodDecl 0x55555ca49928 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55555ca499c8 <col:55> "" ""
|-CXXMethodDecl 0x55555ca49ae0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55555ca49a50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55555ca49b88 <col:58> "" ""
|-CXXMethodDecl 0x55555ca49d20 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55555ca49c10 <col:33> col:36 'int'
| |-ParmVarDecl 0x55555ca49c88 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55555ca49dd0 <col:62> "" ""
|-CXXMethodDecl 0x55555ca49ee8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55555ca49e58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55555ca49f90 <col:58> "" ""
|-CXXMethodDecl 0x55555ca4a128 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55555ca4a018 <col:33> col:36 'int'
| |-ParmVarDecl 0x55555ca4a090 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55555ca4a1d8 <col:62> "" ""
|-CXXMethodDecl 0x55555ca4a2f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55555ca4a260 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55555ca4a398 <col:60> "" ""
|-CXXMethodDecl 0x55555ca4a530 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55555ca4a420 <col:34> col:37 'int'
| |-ParmVarDecl 0x55555ca4a498 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55555ca4a5e0 <col:64> "" ""
|-CXXMethodDecl 0x55555ca4a6f8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55555ca4a668 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55555ca4a7a0 <col:58> "" ""
|-CXXMethodDecl 0x55555ca4a938 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55555ca4a828 <col:33> col:36 'int'
| |-ParmVarDecl 0x55555ca4a8a0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55555ca4a9e8 <col:62> "" ""
|-CXXMethodDecl 0x55555ca4ab00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55555ca4aa70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55555ca4aba8 <col:59> "" ""
|-CXXMethodDecl 0x55555ca4ad40 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55555ca4ac30 <col:33> col:36 'int'
| |-ParmVarDecl 0x55555ca4aca8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55555ca4adf0 <col:63> "" ""
|-AccessSpecDecl 0x55555ca4ae60 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55555ca4ae88 prev 0x55555ca40090 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55555ca4af80 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55555ca4b070 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55555ca4b198 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55555ca4b318 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55555ca4b498 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55555ca4b618 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55555ca5c448 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55555ca5ccb8 <col:11>
| |-CXXDestructorDecl 0x55555ca5c520 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55555ca5c658 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55555ca5c658
| | `-ParmVarDecl 0x55555ca5c768 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55555ca5c808 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55555ca5c808
| | `-ParmVarDecl 0x55555ca5c918 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55555ca5f6d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55555ca5f7e8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55555ca5fa68 <col:11>
| |   `-ReturnStmt 0x55555ca5fa58 <col:11>
| |     `-UnaryOperator 0x55555ca5fa40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55555ca5fa30 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55555ca5f858 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55555ca5f858
|   `-ParmVarDecl 0x55555ca5f968 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55555ca4b680 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55555ca4b798 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55555ca4b838 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55555ca4b8a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55555ca4b908 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55555ca4b970 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55555ca4b9d0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55555ca4ba90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55555ca4baf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55555ca4bb50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55555ca5c358 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55555ca4b838 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55555ca5ccc8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55555ca5cd20 <col:12>
| |-CXXConstructorDecl 0x55555ca5c988 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55555ca5c988
| | `-ParmVarDecl 0x55555ca5ca98 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55555ca5cb38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55555ca5cb38
| | `-ParmVarDecl 0x55555ca5cc48 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55555ca5edc0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55555ca4bbc8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55555ca4bc28 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55555ca4bc90 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55555ca4bcf8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55555ca4bd60 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55555ca4bdc8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55555ca4be28 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55555ca4be88 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55555ca4bef0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55555ca4bf78 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55555ca4bbc8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55555ca5c2f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55555ca4be28 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55555ca5cd30 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55555ca5cd90 <col:21, line:755:5>
|-CXXConstructorDecl 0x55555ca4c118 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55555ca4c058 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55555ca4c210 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55555ca4c3f8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55555ca4c300 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55555ca4c6c8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55555ca4c4b0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555ca4c528 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55555ca4c5a0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca4c8e8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55555ca4c798 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55555ca4c810 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55555ca54ec8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55555ca4c9a8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55555ca4ca20 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55555ca4ca98 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55555ca55020 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55555ca54f90 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca55168 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55555ca550d8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55555ca55260 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca5ce30 prev 0x55555ca396f0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x55555ca5cf68 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x55555ca5cff8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x55555ca5d0a0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x55555ca5d140 <col:20>
| `-OptimizeNoneAttr 0x55555ca5d198 <col:30>
|-CXXMethodDecl 0x55555ca5d1e8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x55555ca5d288 <col:20>
| `-OptimizeNoneAttr 0x55555ca5d2e0 <col:30>
|-CXXMethodDecl 0x55555ca5d330 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca5d3f8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca5d4c0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca5d5d8 <line:785:5, col:40> col:25 used ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x55555ca5d6a0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x55555ca5d740 <col:20>
| `-OptimizeNoneAttr 0x55555ca5d798 <col:30>
|-CXXMethodDecl 0x55555ca5d808 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x55555ca5d8a8 <col:20>
| `-OptimizeNoneAttr 0x55555ca5d900 <col:30>
|-CXXMethodDecl 0x55555ca5d9a8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x55555ca5da48 <col:20>
| `-OptimizeNoneAttr 0x55555ca5daa0 <col:30>
|-CXXMethodDecl 0x55555ca5daf0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x55555ca5dc08 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x55555ca5dd28 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x55555ca5de48 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x55555ca5df10 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x55555ca5dfb0 <col:62> "" ""
|-AccessSpecDecl 0x55555ca5e020 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x55555ca5e080 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x55555ca5ec78 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x55555ca5eea0 <col:29, col:31>
|-CXXMethodDecl 0x55555ca5e148 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x55555ca5e288 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x55555ca5e1f8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x55555ca5e380 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x55555ca5eeb0 <col:23, col:25>
|-CXXMethodDecl 0x55555ca5e538 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x55555ca5e470 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x55555ca5e808 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55555ca5e5f0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55555ca5e668 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55555ca5e6e0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55555ca5e998 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x55555ca5e8d0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x55555ca5ea90 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x55555ca5eaf8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x55555ca5eaf8
  `-ParmVarDecl 0x55555ca5ec08 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca8b1d8 prev 0x55555ca39240 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55555ca8b598 <line:21:18>
|-CXXRecordDecl 0x55555ca8b2d0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55555ca8b438 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55555ca8b4e8 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
`-FieldDecl 0x55555ca8b548 <line:20:5, col:14> col:14 referenced ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb58350 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55555cb58468 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55555cb58510 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55555cb58578 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55555cb585e0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55555cb58690 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55555cb58510 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55555cb59510 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55555cb594c8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55555cb59490 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55555cb59478 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55555cb59420 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55555c863ee0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55555cb58578 'len' 'int'
| | `-IntegerLiteral 0x55555cb59588 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55555cb585e0 'cap' 'int'
| | `-IntegerLiteral 0x55555cb595f0 <col:20> 'int' 0
| `-CompoundStmt 0x55555cb59670 <col:23, line:119:2>
|-CXXConstructorDecl 0x55555cb58808 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55555cb58748 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55555cb59680 <col:37, line:121:2>
|-CXXConstructorDecl 0x55555cb5b898 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cb5b9a8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55555cb58510 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55555cb5d360 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55555cb5d330 <col:12> 'unsigned char *const' lvalue .s 0x55555cb58510
| |     `-DeclRefExpr 0x55555cb5d310 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55555cb58578 'len' 'int'
| | `-ImplicitCastExpr 0x55555cb5d3f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555cb5d3c0 <col:12> 'const int' lvalue .len 0x55555cb58578
| |     `-DeclRefExpr 0x55555cb5d3a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55555cb585e0 'cap' 'int'
| | `-ImplicitCastExpr 0x55555cb5d480 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55555cb5d450 <col:12> 'const int' lvalue .cap 0x55555cb585e0
| |     `-DeclRefExpr 0x55555cb5d430 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55555cb5d4d8 <col:12>
|-CXXConstructorDecl 0x55555cb5ba48 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555cb5ba48
| `-ParmVarDecl 0x55555cb5bb58 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55555cb5d790 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555cb53ad8 prev 0x55555ca9dbb0 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55555cb53bd0 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55555cb53c60 <col:21, col:27> col:21 public
|-TypedefDecl 0x55555cb53ca0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55555c510e00 'const char *'
|   `-QualType 0x55555c510351 'const char' const
|     `-BuiltinType 0x55555c510350 'char'
|-TypedefDecl 0x55555cb53d10 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55555c510fd0 'char *'
|   `-BuiltinType 0x55555c510350 'char'
|-TypedefDecl 0x55555cb53e50 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55555cb53dc0 'int (StringAccum::*)() const'
|   |-RecordType 0x55555c7ce7a0 'StringAccum'
|   | `-CXXRecord 0x55555cb53ad8 'StringAccum'
|   `-ParenType 0x55555c83def0 'int () const' sugar
|     `-FunctionProtoType 0x55555c811a80 'int () const' const cdecl
|       `-BuiltinType 0x55555c5103b0 'int'
|-CXXConstructorDecl 0x55555cb53f10 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55555cb54060 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55555cb53fd0 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55555cb541b0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55555cb54120 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55555cb54358 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55555cb54298 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55555cb54508 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55555cb54448 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55555cb54600 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55555cb547b8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55555cb546f0 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55555cb54938 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55555cb54870 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55555cb54a30 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55555cb54af8 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55555cb54bc0 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55555cb54c88 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55555cb54d50 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x55555cb54eb8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55555cb54f88 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55555cb55048 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55555cb55158 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55555cb55268 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55555cb55328 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55555cb553e8 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55555cb55530 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55555cb554a0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55555cb556c0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55555cb555f0 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55555cb55788 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55555cb55880 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55555cb55940 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55555cb55a08 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55555cb55ac8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55555cb55b88 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55555cb55c48 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55555cb55d98 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55555cb55d00 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55555cb55ee8 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55555cb55e58 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55555cb56040 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55555cb55fa8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55555cb56190 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55555cb56100 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55555cb563b0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55555cb56250 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55555cb562d0 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55555cb59348 <col:53> 'int' 0
|-CXXMethodDecl 0x55555cb56508 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55555cb56478 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55555cb59368 <col:34> 'int' 1
|-CXXMethodDecl 0x55555cb56650 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55555cb565c0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55555cb567a0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55555cb56710 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55555cb568f0 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55555cb56860 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55555cb56a40 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55555cb569b0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55555cb56c38 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55555cb56b20 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55555cb56ba0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55555cb56e18 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55555cb56d00 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55555cb56d80 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55555cb56ff8 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55555cb56ee0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55555cb56f60 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55555cb571d8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55555cb570c0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55555cb57140 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55555cb573b8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55555cb572a0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55555cb57320 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55555cb57718 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55555cb57500 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55555cb57580 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55555cb59388 <col:56> 'int' 10
| `-ParmVarDecl 0x55555cb575f8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555cb593a8 <col:77> 'bool' true
|-CXXMethodDecl 0x55555cb57a78 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55555cb57860 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55555cb578e0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55555cb593b8 <col:57> 'int' 10
| `-ParmVarDecl 0x55555cb57958 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55555cb593d8 <col:78> 'bool' true
|-CXXMethodDecl 0x55555cb57ca0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55555cb57b48 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55555cb57bc8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55555cb57d98 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x55555cb57f08 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55555cb57e48 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55555cb58058 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55555cb57fc8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55555cb58100 <col:51> "" ""
|-AccessSpecDecl 0x55555cb58170 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55555cb58198 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55555cb582e8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55555cb58338 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55555cb582c8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55555cb58298 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55555c846c58 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55555cb58350 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55555cb58468 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55555cb58510 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55555cb58578 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55555cb585e0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55555cb58690 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55555cb58510 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55555cb59510 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55555cb594c8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55555cb59490 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55555cb59478 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55555cb59420 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55555c863ee0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55555cb58578 'len' 'int'
| | | `-IntegerLiteral 0x55555cb59588 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55555cb585e0 'cap' 'int'
| | | `-IntegerLiteral 0x55555cb595f0 <col:20> 'int' 0
| | `-CompoundStmt 0x55555cb59670 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55555cb58808 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55555cb58748 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55555cb59680 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55555cb5b898 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55555cb5b9a8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55555cb58510 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55555cb5d360 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55555cb5d330 <col:12> 'unsigned char *const' lvalue .s 0x55555cb58510
| | |     `-DeclRefExpr 0x55555cb5d310 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55555cb58578 'len' 'int'
| | | `-ImplicitCastExpr 0x55555cb5d3f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55555cb5d3c0 <col:12> 'const int' lvalue .len 0x55555cb58578
| | |     `-DeclRefExpr 0x55555cb5d3a0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55555cb585e0 'cap' 'int'
| | | `-ImplicitCastExpr 0x55555cb5d480 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55555cb5d450 <col:12> 'const int' lvalue .cap 0x55555cb585e0
| | |     `-DeclRefExpr 0x55555cb5d430 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55555cb5b9a8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55555cb5d4d8 <col:12>
| |-CXXConstructorDecl 0x55555cb5ba48 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55555cb5ba48
| | `-ParmVarDecl 0x55555cb5bb58 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55555cb5d790 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55555cb588e0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55555cb589e0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55555cb58948 <col:16> col:19 'int'
|-CXXMethodDecl 0x55555cb58bc0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55555cb58aa0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55555cb58b20 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55555cb58da0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55555cb58c88 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55555cb58d08 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55555cb58ef8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55555cb58e68 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55555cb59048 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55555cb58fb8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55555cb59308 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55555cb59248 parent 0x55555c5102b8 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55555cb59100 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55555cb59178 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55555ca8f298 prev 0x55555ca72740 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55555ca90d08 <line:148:18>
|-CXXRecordDecl 0x55555ca8f390 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55555ca8f420 <col:22, col:28> col:22 public
|-TypedefDecl 0x55555ca8f458 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55555c6660d0 'uninitialized_type'
|   `-CXXRecord 0x55555c666038 'uninitialized_type'
|-CXXConstructorDecl 0x55555ca8f4e8 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55555ca91008 <col:27, line:16:5>
|   `-BinaryOperator 0x55555ca90fe8 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55555ca90df0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55555ca90dd8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55555ca90d88 <col:2> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|     | |   `-CXXThisExpr 0x55555ca90d78 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55555ca90db8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55555ca90fd0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55555ca90fb0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55555ca90e88 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55555ca90e70 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55555ca90e20 <col:13> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|         | |   `-CXXThisExpr 0x55555ca90e10 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55555ca90e50 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55555ca90f98 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55555ca90f78 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55555ca90f20 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55555ca90f08 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55555ca90eb8 <col:24> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|             | |   `-CXXThisExpr 0x55555ca90ea8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55555ca90ee8 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55555ca90f60 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55555ca90f40 <col:35> 'int' 0
|-CXXConstructorDecl 0x55555ca8f638 <line:22:5, line:24:5> line:22:21 used EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55555ca8f5a8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55555ca911d0 <col:61, line:24:5>
|   `-CallExpr 0x55555ca91120 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55555ca91108 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55555ca910e8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55555c76fe48 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55555ca91170 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55555ca91158 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55555ca91078 <col:9> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|     |     `-CXXThisExpr 0x55555ca91068 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55555ca911a0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55555ca91188 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55555ca910a8 <col:16> 'const unsigned char *' lvalue ParmVar 0x55555ca8f5a8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55555ca911b8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55555ca910c8 <col:22> 'int' 6
|-CXXConstructorDecl 0x55555ca8f788 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55555ca8f6f8 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55555ca91240 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55555ca91218 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55555ca911e8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55555ca8f6f8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55555ca8f888 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55555ca91988 <col:42, line:34:5>
|   `-ReturnStmt 0x55555ca91978 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55555ca91960 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55555ca91930 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55555ca91768 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55555ca916e0 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55555ca915d0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55555ca915b8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55555ca91268 <col:22> 'int' 65535
|-CXXMethodDecl 0x55555ca8f948 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55555ca8f9e8 <col:59> "" ""
|-TypedefDecl 0x55555ca8fb68 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55555ca8fae0 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55555ca727d0 'EtherAddress'
|   | `-CXXRecord 0x55555ca8f298 'EtherAddress'
|   `-ParenType 0x55555ca8fa80 'bool () const' sugar
|     `-FunctionProtoType 0x55555c5b8e50 'bool () const' const cdecl
|       `-BuiltinType 0x55555c510330 'bool'
|-CXXConversionDecl 0x55555ca8fca8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55555ca91d68 <col:51, line:43:5>
|   `-ReturnStmt 0x55555ca91d58 <line:42:2, col:70>
|     `-ConditionalOperator 0x55555ca91d28 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55555ca91c50 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55555ca91b68 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55555ca91b20 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55555ca91b08 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55555ca91a50 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55555ca91a38 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55555ca919b0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       | | |     |   `-CXXThisExpr 0x55555ca919a0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55555ca919e0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55555ca91b50 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55555ca91b38 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55555ca91ae8 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55555ca91ad0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55555ca91a80 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       | |       |   `-CXXThisExpr 0x55555ca91a70 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55555ca91ab0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55555ca91c38 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55555ca91c20 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55555ca91c00 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55555ca91be8 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55555ca91b98 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       |       |   `-CXXThisExpr 0x55555ca91b88 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55555ca91bc8 <col:39> 'int' 2
|       |-UnaryOperator 0x55555ca91cd8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55555ca91ca8 <col:45, col:59> 'bool () const' CXXMethod 0x55555ca8fd78 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55555ca91d10 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55555ca91cf0 <col:70> 'int' 0
|-CXXMethodDecl 0x55555ca8fd78 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55555ca98ca8 <col:34, line:51:5>
|   `-ReturnStmt 0x55555ca98c98 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55555ca98c80 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55555ca98c60 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55555ca91ec8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55555ca91eb0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55555ca91e70 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55555ca91e30 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55555ca91e00 <col:9> '<bound member function type>' ->data 0x55555ca90210
|         |     |   `-CXXThisExpr 0x55555ca91df0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55555ca91e50 <col:16> 'int' 0
|         `-IntegerLiteral 0x55555ca91e90 <col:21> 'int' 1
|-CXXMethodDecl 0x55555ca8fe38 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55555ca98e68 <col:34, line:59:5>
|   `-ReturnStmt 0x55555ca98e58 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55555ca98e40 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55555ca98e20 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55555ca98e08 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55555ca98df0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55555ca98db0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55555ca98d70 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55555ca98d40 <col:9> '<bound member function type>' ->data 0x55555ca90210
|         |     |   `-CXXThisExpr 0x55555ca98d30 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55555ca98d90 <col:16> 'int' 0
|         `-IntegerLiteral 0x55555ca98dd0 <col:21> 'int' 2
|-CXXMethodDecl 0x55555ca8fef8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55555ca99168 <col:38, line:66:5>
|   `-ReturnStmt 0x55555ca99158 <line:65:2, col:43>
|     `-BinaryOperator 0x55555ca99138 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55555ca990f8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55555ca99010 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55555ca98fc8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55555ca98fb0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55555ca98ef8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55555ca98ee0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55555ca98e90 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       | | |     |   `-CXXThisExpr 0x55555ca98e80 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55555ca98ec0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55555ca98ff8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55555ca98fe0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55555ca98f90 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55555ca98f78 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55555ca98f28 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       | |       |   `-CXXThisExpr 0x55555ca98f18 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55555ca98f58 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55555ca990e0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55555ca990c8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55555ca990a8 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55555ca99090 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55555ca99040 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       |       |   `-CXXThisExpr 0x55555ca99030 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55555ca99070 <col:37> 'int' 2
|       `-IntegerLiteral 0x55555ca99118 <col:43> 'int' 196605
|-CXXMethodDecl 0x55555ca90078 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55555ca8ffb0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55555ca992b8 <col:64, line:75:5>
|   `-ReturnStmt 0x55555ca992a8 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55555ca99288 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55555ca99258 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55555ca8fef8
|         `-CXXReinterpretCastExpr 0x55555ca991c8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55555ca991b0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55555ca99180 <col:48> 'const unsigned char *' lvalue ParmVar 0x55555ca8ffb0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55555ca90148 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55555ca99380 <col:34, line:80:5>
|   `-ReturnStmt 0x55555ca99370 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55555ca99340 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55555ca99328 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55555ca992e0 <col:43> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|           `-CXXThisExpr 0x55555ca992d0 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55555ca90210 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55555ca99448 <col:46, line:85:5>
|   `-ReturnStmt 0x55555ca99438 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55555ca99408 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55555ca993f0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55555ca993a8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|           `-CXXThisExpr 0x55555ca99398 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55555ca90358 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55555ca994c8 <col:42, line:91:5>
|   `-ReturnStmt 0x55555ca994b8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55555ca994a0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55555ca99470 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|         `-CXXThisExpr 0x55555ca99460 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55555ca90448 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55555ca998d8 <col:36, line:97:5>
|   `-ReturnStmt 0x55555ca998c8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55555ca998a8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55555ca99728 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55555ca99708 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55555ca996f0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55555ca996d8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55555ca99558 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55555ca99540 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55555ca994f0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       |   |     |   `-CXXThisExpr 0x55555ca994e0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55555ca99520 <col:16> 'int' 2
|       |   `-ParenExpr 0x55555ca996b8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55555ca99698 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55555ca99650 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55555ca99638 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55555ca99620 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55555ca995f0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55555ca995d8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55555ca99588 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|       |       |       |   `-CXXThisExpr 0x55555ca99578 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55555ca995b8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55555ca99678 <col:43> 'int' 16
|       `-ParenExpr 0x55555ca99888 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55555ca99868 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55555ca99820 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55555ca99808 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55555ca997f0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55555ca997c0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55555ca997a8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55555ca99758 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55555ca90b08
|           |       |   `-CXXThisExpr 0x55555ca99748 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55555ca99788 <col:24> 'int' 0
|           `-IntegerLiteral 0x55555ca99848 <col:30> 'int' 9
|-CXXMethodDecl 0x55555ca90508 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55555ca999e8 <col:35, line:111:5>
|   `-ReturnStmt 0x55555ca999d8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55555ca999c0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55555ca99990 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55555ca99978 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55555ca99958 <col:9, col:22> 'String' (CXXTemporary 0x55555ca99958)
|             `-CXXMemberCallExpr 0x55555ca99930 <col:9, col:22> 'String'
|               `-MemberExpr 0x55555ca99900 <col:9> '<bound member function type>' ->unparse_dash 0x55555ca90688
|                 `-CXXThisExpr 0x55555ca998f0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55555ca905c8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55555ca90688 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55555ca90748 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55555ca907e8 <col:44> "" ""
|-CXXConversionDecl 0x55555ca90888 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55555ca90930 <col:51> "" ""
|-TypedefDecl 0x55555ca909e8 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55555ca909b0 'const EtherAddress &'
|   `-QualType 0x55555ca727d1 'const EtherAddress' const
|     `-RecordType 0x55555ca727d0 'EtherAddress'
|       `-CXXRecord 0x55555ca8f298 'EtherAddress'
|-AccessSpecDecl 0x55555ca90a40 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55555ca90b08 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55555ca90c58 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55555ca90b68 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55555ca99c90 <col:30, line:146:5>
|   `-BinaryOperator 0x55555ca99c70 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55555ca99a78 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55555ca99a60 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55555ca99a10 <col:2> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|     | |   `-CXXThisExpr 0x55555ca99a00 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55555ca99a40 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55555ca99c58 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55555ca99c38 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55555ca99b10 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55555ca99af8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55555ca99aa8 <col:13> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|         | |   `-CXXThisExpr 0x55555ca99a98 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55555ca99ad8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55555ca99c20 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55555ca99c00 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55555ca99ba8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55555ca99b90 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55555ca99b40 <col:24> 'uint16_t [3]' lvalue ->_data 0x55555ca90b08
|             | |   `-CXXThisExpr 0x55555ca99b30 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55555ca99b70 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55555ca99be8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55555ca99bc8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55555ca90b68 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55555ca91288 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55555ca91288
| `-ParmVarDecl 0x55555ca91398 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55555ca91438 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555ca91548 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55555ca90b08 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55555ca918d0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55555ca91858 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55555ca91810 <col:7> 'uint16_t [3]' xvalue ._data 0x55555ca90b08
| |   |   `-CXXStaticCastExpr 0x55555ca917e0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55555ca917b0 <col:7> 'EtherAddress' lvalue ParmVar 0x55555ca91548 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55555ca918b8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55555ca91898 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55555ca91880 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55555ca91858 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55555ca91810 <col:7> 'uint16_t [3]' xvalue ._data 0x55555ca90b08
| |       |     `-CXXStaticCastExpr 0x55555ca917e0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55555ca917b0 <col:7> 'EtherAddress' lvalue ParmVar 0x55555ca91548 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55555ca91870 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55555ca91920 <col:7>
`-CXXDestructorDecl 0x55555ca91600 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555cb46530 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x55555cb46788 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55555cbf8b08 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55555cbf8fa0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55555cbf8f80 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55555cbf9010 <col:19>
|-CXXConstructorDecl 0x55555cbf8c08 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x55555cbf8c08
| `-ParmVarDecl 0x55555cbf8d18 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x55555cbf8db8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55555cbf8ec8 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55555cbf98b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55555cbf9890 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55555cbf9860 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x55555cbf9830 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x55555cbf8ec8 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x55555cbf9920 <col:19>
`-CXXDestructorDecl 0x55555cbf9050 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55555cc0e038 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55555cc0e438 prev 0x55555cc0e038 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55555cc0e630 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55555cc0e538 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55555cc0f578 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55555cc0e7b0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55555cc0f538 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55555cc0f4f8 <col:20> 'String *' lvalue ParmVar 0x55555cc0e538 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55555cc0e810 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55555cc0f5d8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55555cb32a10 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55555cc0e6f0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55555cb08670 Slot::store 'void ()' ]
| `-CompoundStmt 0x55555cc0fc98 <col:22, line:857:9>
|   `-CallExpr 0x55555cc0fc50 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55555cc0fc38 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55555cc0fbb8 <col:13> 'void (String &, const String &)' lvalue Function 0x55555cc0fa98 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55555c7d28a8 'assign_consume')
|     |-UnaryOperator 0x55555cc0f768 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55555cc0f750 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55555cc0f720 <col:29> 'String *' lvalue ->_ptr 0x55555cc0e7b0
|     |     `-CXXThisExpr 0x55555cc0f710 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55555cc0fc80 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55555cc0f790 <col:35> 'String':'String' lvalue ->_slot 0x55555cc0e810
|         `-CXXThisExpr 0x55555cc0f780 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55555cc0e7b0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55555cc0e810 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55555cc0e888 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55555cc0e888
| `-ParmVarDecl 0x55555cc0e998 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55555cc0ea38 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55555cc0ea38
| `-ParmVarDecl 0x55555cc0eb48 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55555cc0ebe8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55555cc0ebe8
| `-ParmVarDecl 0x55555cc0ecf8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55555cc0ed68 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55555cc0ed68
| `-ParmVarDecl 0x55555cc0ee78 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55555cc0ef00 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55555cb08570 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55555cc0f640 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
