
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26dedc8 prev 0x5565b26d6568 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b26deec0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5565b26def50 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5565b26defc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5565b26df088 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5565b26df150 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5565b26df2c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5565b26df200 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5565b26df370 <col:24>
| `-OptimizeNoneAttr 0x5565b26df3c8 <col:34>
|-CXXMethodDecl 0x5565b26df410 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5565b26df6c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5565b26df4c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5565b26df538 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5565b26df5b8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5565b26df780 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5565b26df7b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5565b26df820 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5565b26df8a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5565b26dfbc8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5565b26df960 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5565b26df9d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5565b26dfa50 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5565b26dfad0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5565b26dfce0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5565b26e7658 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5565b26e7658
| `-ParmVarDecl 0x5565b26e7768 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5565b26e7808 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5565b26e7808
| `-ParmVarDecl 0x5565b26e7918 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5565b27c3468 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26d1de0 prev 0x5565b26d1b60 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565b26d1ed8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5565b26d1f68 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5565b26d1fc8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5565b26d20b8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5565b26d21b8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5565b26d2388 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5565b26d2238 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5565b26d22b0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5565b26d2518 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5565b26d2450 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5565b26d25c0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5565b26d26f8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5565b26d2630 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5565b26d2898 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5565b26d27d8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5565b26d2a38 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5565b26d2978 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5565b26d2ae0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5565b26d2be0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5565b26d2cc0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d2bc0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5565b26d2ba0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5565b26d2c70 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5565b26d2cd8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26d2c50 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5565b26d2c30 <col:44> 'int' 2
|-CXXMethodDecl 0x5565b26d2e20 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5565b26d2d08 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5565b26d2d88 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5565b26d2f78 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5565b26d2ee8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5565b26d31b8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5565b26d3038 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5565b26d30b0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5565b26d3268 <col:20>
| `-OptimizeNoneAttr 0x5565b26d32c0 <col:30>
|-CXXMethodDecl 0x5565b26d33c8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5565b26d3300 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5565b26d3470 <col:20>
| `-OptimizeNoneAttr 0x5565b26d34c8 <col:30>
|-CXXMethodDecl 0x5565b26d3518 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5565b26d35e0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5565b26d36f8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5565b26d3780 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5565b26d3808 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5565b26d3890 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5565b26d3918 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5565b26d39a8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5565b26d3a68 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5565b26d3af0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5565b26d3b78 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5565b26d3c00 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5565b26d3c88 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5565b26d3d10 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5565b26d3da0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5565b26d3e60 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5565b26d3ef0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5565b26d4040 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5565b26d3fa8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5565b26d41d0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5565b26d4100 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5565b26d4480 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5565b26d4288 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5565b26d4308 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5565b26d4388 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5565b26d4538 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5565b26d4640 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5565b26d48d0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d4620 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5565b26d4600 <col:33> 'int' 0
| |-EnumConstantDecl 0x5565b26d46d0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5565b26d48e8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d46b0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5565b26d4690 <col:32> 'int' 20
| |-EnumConstantDecl 0x5565b26d4760 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5565b26d4900 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d4740 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5565b26d4720 <col:38> 'int' 90
| |-EnumConstantDecl 0x5565b26d47f0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5565b26d4918 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d47d0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5565b26d47b0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5565b26d4880 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5565b26d4930 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26d4860 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5565b26d4840 <col:32> 'int' 2000
|-CXXMethodDecl 0x5565b26d4970 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5565b26d4db0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5565b26d4c20 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5565b26d4c98 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26d4e80 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5565b26d5000 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5565b26d4f30 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26d5208 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5565b26d50b8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5565b26d5130 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26d5308 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5565b26d53a8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5565b26d5470 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d5500 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5565b26d5730 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26d54e0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5565b26d54c0 <col:36> 'int' EnumConstant 0x5565b26d5470 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d5550 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d55a0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d55f0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d5640 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5565b26d5690 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5565b26d56e0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5565b26d5818 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5565b26d5758 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5565b26d58e0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5565b26d59a0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5565b26d5a60 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5565b26d5b20 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5565b26d5c38 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5565b26d5d00 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5565b26d5e80 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5565b26d5db0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5565b26d5fa8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5565b26d61a8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5565b26d6058 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5565b26d60d8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5565b26e3af8 <col:54, line:127:5>
|   |-ParenExpr 0x5565b26e39a8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5565b26e3978 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26e3668 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5565b26e3640 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5565b26e3628 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5565b26e3610 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5565b26e35e0 <col:31> 'Router *' lvalue ->_router 0x5565b26e14c0
|   |   |         `-CXXThisExpr 0x5565b26e35d0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5565b26e36c8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26e36a8 <col:48> 'int' 0
|   |   `-CallExpr 0x5565b26e38d8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5565b26e38c0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26e38a0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26e3918 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26e3738 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5565b26e3930 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26e3758 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5565b26e3948 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26e3790 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5565b26e3960 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26e3888 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26e3870 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26e3828 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5565b26e3a40 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5565b26e39d8 <col:9> 'Router *' lvalue ->_router 0x5565b26e14c0
|   | | `-CXXThisExpr 0x5565b26e39c8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5565b26e3a28 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5565b26e3a08 <col:19> 'Router *' lvalue ParmVar 0x5565b26d6058 'r' 'Router *'
|   `-BinaryOperator 0x5565b26e3ad8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5565b26e3a70 <col:9> 'int' lvalue ->_eindex 0x5565b26e1528
|     | `-CXXThisExpr 0x5565b26e3a60 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5565b26e3ac0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26e3aa0 <col:19> 'int' lvalue ParmVar 0x5565b26d60d8 'eindex' 'int'
|-CXXMethodDecl 0x5565b26d6330 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5565b26d6268 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5565b26d6400 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5565b26d64c8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5565b26d6568 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5565b26d67b8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5565b26d6630 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5565b26d66b0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5565b26d6868 <col:20>
| `-OptimizeNoneAttr 0x5565b26d68c0 <col:30>
|-CXXMethodDecl 0x5565b26d69c8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5565b26d6900 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5565b26d6a70 <col:20>
| `-OptimizeNoneAttr 0x5565b26d6ac8 <col:30>
|-CXXMethodDecl 0x5565b26d6b98 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5565b26d6b08 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5565b26d6c40 <col:20>
| `-OptimizeNoneAttr 0x5565b26d6c98 <col:30>
|-CXXMethodDecl 0x5565b26d6e28 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5565b26d6cd0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5565b26d6d50 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5565b26d6fb8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5565b26d6ef0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5565b26d7108 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5565b26d7078 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5565b26d7258 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5565b26d71c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5565b26d73a8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5565b26d7318 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5565b26d7668 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5565b26d7460 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5565b26d74e0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5565b26d7588 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5565b26d7740 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5565b26d7800 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5565b26d7ad0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5565b26d7980 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5565b26d79f8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26d7bf8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5565b26d7dd0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5565b26d7cb0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5565b26d7d30 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5565b26d7fb8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5565b26d7e98 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5565b26d7f18 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5565b26d8328 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5565b26d8078 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5565b26d80f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5565b26d8170 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5565b26e30e0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b26e30c0 <col:106> 'int' 0
| `-ParmVarDecl 0x5565b26d81e8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e3118 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e30f8 <col:126> 'int' 0
|-CXXMethodDecl 0x5565b26d86c8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5565b26d83f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5565b26d8490 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5565b26d8510 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5565b26d8588 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e3150 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e3130 <col:114> 'int' 0
|-CXXMethodDecl 0x5565b26d8a58 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5565b26d87a0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5565b26d8818 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5565b26d8898 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5565b26e3168 <col:96> 'int' 0
| `-ParmVarDecl 0x5565b26d8910 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e31a8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e3188 <col:116> 'int' 0
|-CXXMethodDecl 0x5565b26d8dd8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5565b26d8b28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5565b26d8ba0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d8c20 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5565b26e31e0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b26e31c0 <col:109> 'int' 0
| `-ParmVarDecl 0x5565b26d8c98 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e3218 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e31f8 <col:129> 'int' 0
|-CXXMethodDecl 0x5565b26d9158 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5565b26d8ea8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5565b26d8f20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d8fa0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5565b26d9018 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e3250 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e3230 <col:117> 'int' 0
|-CXXMethodDecl 0x5565b26d94e8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5565b26d9230 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26d92a8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d9328 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5565b26e3268 <col:99> 'int' 0
| `-ParmVarDecl 0x5565b26d93a0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5565b26e32a8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5565b26e3288 <col:119> 'int' 0
|-CXXMethodDecl 0x5565b26d9908 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5565b26d95b8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5565b26d9638 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5565b26d96b0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d9730 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5565b26e32e0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b26e32c0 <col:108> 'int' 0
| `-ParmVarDecl 0x5565b26d97b0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5565b26e3318 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5565b26e32f8 <col:141> 'int' 0
|-CXXMethodDecl 0x5565b26d9d28 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5565b26d99e0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5565b26d9a60 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5565b26d9ad8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d9b58 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5565b26d9bd8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5565b26e3330 <col:121> 'int' 0
|-CXXMethodDecl 0x5565b26da158 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5565b26d9e08 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5565b26d9e88 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5565b26d9f00 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26d9f80 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5565b26e3350 <col:98> 'int' 0
| `-ParmVarDecl 0x5565b26da000 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5565b26e3370 <col:123> 'int' 0
|-CXXMethodDecl 0x5565b26da420 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5565b26da230 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5565b26da2b0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5565b26da330 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5565b26e3390 <col:80> 'int' 0
|-EnumDecl 0x5565b26da4d8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5565b26da5e0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5565b26da870 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26da5c0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5565b26da5a0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5565b26da670 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5565b26da888 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26da650 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5565b26da630 <col:40> 'int' 2
| |-EnumConstantDecl 0x5565b26da700 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5565b26da8a0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26da6e0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5565b26da6c0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5565b26da790 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5565b26da8b8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26da770 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5565b26da750 <col:36> 'int' 7
| `-EnumConstantDecl 0x5565b26da820 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5565b26da8d0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26da800 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5565b26da7e0 <col:34> 'int' 6
|-CXXMethodDecl 0x5565b26dab88 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5565b26da8f8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5565b26da998 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5565b26daa18 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5565b26daa90 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5565b26e3448 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5565b26e3430 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5565b26e3418 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5565b26e33f8 <col:98, col:105> 'String' (CXXTemporary 0x5565b26e33f8)
|           `-CXXTemporaryObjectExpr 0x5565b26e33c0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5565b26dae28 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5565b26dac58 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5565b26dacd0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5565b26dad48 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5565b26e34f8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5565b26e34e0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5565b26e34c8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5565b26e34a8 <col:94, col:101> 'String' (CXXTemporary 0x5565b26e34a8)
| |         `-CXXTemporaryObjectExpr 0x5565b26e3470 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5565b26e3ce0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5565b26e3c58 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5565b26e3c28 <col:9> '<bound member function type>' ->add_task_handlers 0x5565b26dab88
|     | `-CXXThisExpr 0x5565b26e3c18 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5565b26e3c98 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5565b26e3b98 <col:27> 'Task *' lvalue ParmVar 0x5565b26dac58 'task' 'Task *'
|     |-ImplicitCastExpr 0x5565b26e3cb0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5565b26e3bb8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5565b26dacd0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5565b26e3cc8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5565b26e3bd8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5565b26da820 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5565b26e3bf8 <col:62> 'const String' lvalue ParmVar 0x5565b26dad48 'prefix' 'const String &'
|-CXXMethodDecl 0x5565b26db038 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5565b26daef0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5565b26daf68 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5565b26e35a8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5565b26e3590 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5565b26e3578 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5565b26e3558 <col:70, col:77> 'String' (CXXTemporary 0x5565b26e3558)
| |         `-CXXTemporaryObjectExpr 0x5565b26e3520 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5565b26e3eb8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5565b26e3e30 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5565b26e3e00 <col:9> '<bound member function type>' ->add_task_handlers 0x5565b26dab88
|     | `-CXXThisExpr 0x5565b26e3df0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5565b26e3e70 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5565b26e3d70 <col:27> 'Task *' lvalue ParmVar 0x5565b26daef0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5565b26e3e88 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5565b26e3d90 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5565b26e3ea0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5565b26e3db0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5565b26da820 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5565b26e3dd0 <col:57> 'const String' lvalue ParmVar 0x5565b26daf68 'prefix' 'const String &'
|-CXXMethodDecl 0x5565b26db318 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5565b26db100 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26db180 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26db1f8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5565b26db5c8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5565b26db3e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26db468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26db4e8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5565b26db8b8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5565b26db698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26db718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26db790 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5565b26dbb68 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5565b26db988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dba08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dba88 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5565b26dbe18 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5565b26dbc38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dbcb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dbd38 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5565b26dc0c8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5565b26dbee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dbf68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dbfe0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5565b26dc378 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5565b26dc198 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dc218 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dc298 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5565b26dc688 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5565b26dc4a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dc520 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dc5a0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5565b26dc968 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5565b26dc758 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dc7d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dc880 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5565b26dcc48 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5565b26dca38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dcab8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dcb60 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5565b26dceb0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5565b26dcd18 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5565b26dcd98 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5565b26dce10 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5565b26dd158 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5565b26dcf80 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5565b26dd000 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5565b26dd078 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5565b26dd408 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5565b26dd228 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dd2a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dd328 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5565b26dd6b8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5565b26dd4d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dd558 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dd5d0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5565b26dd968 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5565b26dd788 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26dd808 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26dd880 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5565b26ddc38 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5565b26dda38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26ddab8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5565b26ddb58 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5565b26ddf68 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5565b26ddd08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5565b26ddd88 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5565b26dde00 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5565b26dde78 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565b26e35c0 <col:93> 'bool' false
|-CXXMethodDecl 0x5565b26de150 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5565b26de038 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5565b26de0b8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5565b26de328 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5565b26de210 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5565b26de290 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5565b26de608 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5565b26de3e8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5565b26de460 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5565b26de4e0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5565b26de558 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26de8f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5565b26de6d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5565b26de750 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5565b26de7d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5565b26de848 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26deb30 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5565b26de9d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5565b26dea50 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5565b26ded18 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5565b26debf8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5565b26dec78 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5565b26dedc8 prev 0x5565b26d6568 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565b26deec0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5565b26def50 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5565b26defc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5565b26df088 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5565b26df150 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5565b26df2c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5565b26df200 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5565b26df370 <col:24>
| | `-OptimizeNoneAttr 0x5565b26df3c8 <col:34>
| |-CXXMethodDecl 0x5565b26df410 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5565b26df6c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5565b26df4c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5565b26df538 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5565b26df5b8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5565b26df780 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5565b26df7b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5565b26df820 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5565b26df8a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5565b26dfbc8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5565b26df960 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5565b26df9d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5565b26dfa50 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5565b26dfad0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5565b26dfce0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5565b26e7658 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5565b26e7658
| | `-ParmVarDecl 0x5565b26e7768 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5565b26e7808 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5565b26e7808
| | `-ParmVarDecl 0x5565b26e7918 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5565b27c3468 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5565b26dfd58 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5565b26dfdf8 <col:38> "" ""
|-CXXMethodDecl 0x5565b26dfe88 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5565b26dff28 <col:44> "" ""
|-AccessSpecDecl 0x5565b26dff98 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5565b26dffc0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5565b26e00c0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5565b26e0110 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26e00a0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5565b26e0080 <col:27> 'int' 4
|-FieldDecl 0x5565b26e01c8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5565b26e0378 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5565b26e0430 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5565b26e14c0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5565b26e1528 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5565b26e1678 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5565b26e15b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5565b26e1828 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5565b26e1738 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5565b26e1a08 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5565b26e18e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5565b26e1968 <col:25> col:28 'int'
|-CXXMethodDecl 0x5565b26e1cb0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5565b26e1ad0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5565b26e1b50 <col:28> col:31 'int'
| `-ParmVarDecl 0x5565b26e1bc8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5565b26e1d68 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5565b26e1e30 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5565b26e1e80 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5565b26e1ed0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5565b26e20b0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5565b26e1f60 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5565b26e1fd8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26e2358 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5565b26e2178 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5565b26e21f8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5565b26e2270 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26e2578 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5565b26e2428 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5565b26e24a8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5565b26e28b0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5565b26e2638 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5565b26e26b8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5565b26e2730 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5565b26e27b0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5565b26e2a98 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5565b26e2980 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5565b26e2a00 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5565b26e2be8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5565b26e2b58 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5565b26e2f68 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5565b26e2ca8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5565b26e2d28 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5565b26e2da0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5565b26e2e20 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5565b26e3080 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class EtherRewrite
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   struct click_ether _ethh
       108 |     uint8_t [6] ether_dhost
       114 |     uint8_t [6] ether_shost
       120 |     uint16_t ether_type
           | [sizeof=128, dsize=122, align=8,
           |  nvsize=122, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26ea7c8 prev 0x5565b2698830 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x5565b26eab88 <line:21:18>
|-CXXRecordDecl 0x5565b26ea8c0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x5565b26eaa28 <line:18:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x5565b26eaad8 <line:19:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x5565b26eab38 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5565b27c2fc0 <line:17:8> col:8 implicit used click_ether 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565b27c33f8 <col:8>
|-CXXConstructorDecl 0x5565b27c30c8 <col:8> col:8 implicit constexpr click_ether 'void (const click_ether &)' inline default trivial noexcept-unevaluated 0x5565b27c30c8
| `-ParmVarDecl 0x5565b27c31d8 <col:8> col:8 'const click_ether &'
`-CXXConstructorDecl 0x5565b27c3278 <col:8> col:8 implicit constexpr click_ether 'void (click_ether &&)' inline default trivial noexcept-unevaluated 0x5565b27c3278
  `-ParmVarDecl 0x5565b27c3388 <col:8> col:8 'click_ether &&'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26ecde0 <../elements/ethernet/etherrewrite.hh:47:1, line:69:1> line:47:7 class EtherRewrite definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5565b26ecf38 <col:1, col:7> col:7 implicit referenced class EtherRewrite
|-AccessSpecDecl 0x5565b26ecfc8 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x5565b26ed050 <line:49:5, col:18> col:5 EtherRewrite 'void ()'
|-CXXDestructorDecl 0x5565b26ed140 <line:50:5, col:19> col:5 ~EtherRewrite 'void ()' noexcept-unevaluated 0x5565b26ed140
| `-Overrides: [ 0x5565b26d20b8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5565b26ed270 <line:52:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5565b26d3518 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5565b26ee0e8 <col:36, col:61>
|   `-ReturnStmt 0x5565b26ee0d8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5565b26ee0c0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5565b26ee098 <col:45> 'const char [13]' lvalue "EtherRewrite"
|-CXXMethodDecl 0x5565b26ed338 <line:53:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5565b26d35e0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5565b26ee148 <col:36, col:56>
|   `-ReturnStmt 0x5565b26ee138 <col:38, col:45>
|     `-ImplicitCastExpr 0x5565b26ee120 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5565b26ee100 <col:45> 'const char []' lvalue Var 0x5565b26d3890 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5565b26ed610 <line:55:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5565b26d4db0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5565b26ed4c0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5565b26ed538 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5565b26ed6e0 <line:56:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5565b26d7800 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5565b26ee180 <col:39, col:54>
|   `-ReturnStmt 0x5565b26ee170 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5565b26ee160 <col:48> 'bool' true
|-CXXMethodDecl 0x5565b26ed7a0 <line:57:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5565b26d4e80 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5565b26ed8e0 <line:59:5, col:37> col:20 smaction 'Packet *(Packet *)' inline
| `-ParmVarDecl 0x5565b26ed850 <col:29, col:36> col:37 'Packet *'
|-CXXMethodDecl 0x5565b26eda30 <line:61:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x5565b26d2518 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5565b26ed9a0 <col:18> col:21 'int'
|-CXXMethodDecl 0x5565b26edc00 <line:63:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x5565b26d2388 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5565b26edaf0 <col:15> col:18 'int'
| `-ParmVarDecl 0x5565b26edb68 <col:20, col:27> col:28 'Packet *'
|-AccessSpecDecl 0x5565b26edcb0 <line:65:3, col:10> col:3 private
|-FieldDecl 0x5565b26edce8 <line:67:5, col:17> col:17 _ethh 'click_ether'
|-CXXConstructorDecl 0x5565b26edd68 <line:47:7> col:7 implicit EtherRewrite 'void (const EtherRewrite &)' inline default_delete noexcept-unevaluated 0x5565b26edd68
| `-ParmVarDecl 0x5565b26ede78 <col:7> col:7 'const EtherRewrite &'
`-CXXMethodDecl 0x5565b26edf18 <col:7> col:7 implicit operator= 'EtherRewrite &(const EtherRewrite &)' inline default_delete noexcept-unevaluated 0x5565b26edf18
  `-ParmVarDecl 0x5565b26ee028 <col:7> col:7 'const EtherRewrite &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherRewrite = type { %class.Element.base, %struct.click_ether, [6 x i8] }
  NonVirtualBaseLLVMType:%class.EtherRewrite.base = type { %class.Element.base, %struct.click_ether }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b24a5c80 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5565b24a5d98 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5565b24a5e38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5565b24a5e98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5565b24a5ef8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5565b24a5fa8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b24a62b0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b24a63c8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5565b24a6470 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5565b24a64d8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5565b24a6568 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5565b24ac600 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565b24aca38 <col:12>
|-CXXConstructorDecl 0x5565b24ac708 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565b24ac818 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565b24a6470 'data' 'const char *'
| | `-ImplicitCastExpr 0x5565b24aefc0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5565b24aef90 <col:12> 'const char *const' lvalue .data 0x5565b24a6470
| |     `-DeclRefExpr 0x5565b24aef70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565b24a64d8 'length' 'int'
| | `-ImplicitCastExpr 0x5565b24af050 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5565b24af020 <col:12> 'const int' lvalue .length 0x5565b24a64d8
| |     `-DeclRefExpr 0x5565b24af000 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5565b24a6568 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5565b24af0e0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5565b24af0b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5565b24a6568
| |     `-DeclRefExpr 0x5565b24af090 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| `-CompoundStmt 0x5565b24af138 <col:12>
|-CXXConstructorDecl 0x5565b24ac8b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565b24ac8b8
| `-ParmVarDecl 0x5565b24ac9c8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5565b24b1f20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5565b24bd938 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565b24bda48 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5565b24bdf60 <col:12>
|   |-BinaryOperator 0x5565b24bdd78 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5565b24bdd30 <col:12> 'const char *' lvalue ->data 0x5565b24a6470
|   | | `-CXXThisExpr 0x5565b24bdd20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5565b24bdd60 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5565b24bdcf0 <col:12> 'const char *const' lvalue .data 0x5565b24a6470
|   |     `-DeclRefExpr 0x5565b24bdcd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5565b24bde40 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5565b24bddf8 <col:12> 'int' lvalue ->length 0x5565b24a64d8
|   | | `-CXXThisExpr 0x5565b24bdde8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5565b24bde28 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5565b24bddb8 <col:12> 'const int' lvalue .length 0x5565b24a64d8
|   |     `-DeclRefExpr 0x5565b24bdd98 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5565b24bdf08 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5565b24bdec0 <col:12> 'String::memo_t *' lvalue ->memo 0x5565b24a6568
|   | | `-CXXThisExpr 0x5565b24bdeb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5565b24bdef0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5565b24bde80 <col:12> 'String::memo_t *const' lvalue .memo 0x5565b24a6568
|   |     `-DeclRefExpr 0x5565b24bde60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5565b24bdf50 <col:12>
|     `-UnaryOperator 0x5565b24bdf38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b24bdf28 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5565b24bdab8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565b24bdab8
  `-ParmVarDecl 0x5565b24bdbc8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b249d1f0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565b249d308 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5565b249d398 <col:16, col:22> col:16 public
|-TypedefDecl 0x5565b249d3d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5565b2170dc0 'const char *'
|   `-QualType 0x5565b2170311 'const char' const
|     `-BuiltinType 0x5565b2170310 'char'
|-TypedefDecl 0x5565b249d460 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5565b249d430 'String::const_iterator' sugar
|   |-Typedef 0x5565b249d3d8 'const_iterator'
|   `-PointerType 0x5565b2170dc0 'const char *'
|     `-QualType 0x5565b2170311 'const char' const
|       `-BuiltinType 0x5565b2170310 'char'
|-TypedefDecl 0x5565b249d5d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5565b249d540 'int (String::*)() const'
|   |-RecordType 0x5565b249d280 'String'
|   | `-CXXRecord 0x5565b249d1f0 'String'
|   `-ParenType 0x5565b249d4e0 'int () const' sugar
|     `-FunctionProtoType 0x5565b2471070 'int () const' const cdecl
|       `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b249d638 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5565b22c5c50 'int64_t' sugar
|   |-Typedef 0x5565b21d92d0 'int64_t'
|   `-TypedefType 0x5565b21b24d0 '__int64_t' sugar
|     |-Typedef 0x5565b21b20a8 '__int64_t'
|     `-BuiltinType 0x5565b2170390 'long'
|-TypedefDecl 0x5565b249d6a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5565b22c5b70 'uint64_t' sugar
|   |-Typedef 0x5565b21d9470 'uint64_t'
|   `-TypedefType 0x5565b21b2560 '__uint64_t' sugar
|     |-Typedef 0x5565b21b2118 '__uint64_t'
|     `-BuiltinType 0x5565b2170430 'unsigned long'
|-TypedefDecl 0x5565b249d730 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5565b249d700 'String::intmax_t' sugar
|   |-Typedef 0x5565b249d638 'intmax_t'
|   `-TypedefType 0x5565b22c5c50 'int64_t' sugar
|     |-Typedef 0x5565b21d92d0 'int64_t'
|     `-TypedefType 0x5565b21b24d0 '__int64_t' sugar
|       |-Typedef 0x5565b21b20a8 '__int64_t'
|       `-BuiltinType 0x5565b2170390 'long'
|-TypedefDecl 0x5565b249d7c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5565b249d790 'String::uintmax_t' sugar
|   |-Typedef 0x5565b249d6a0 'uintmax_t'
|   `-TypedefType 0x5565b22c5b70 'uint64_t' sugar
|     |-Typedef 0x5565b21d9470 'uint64_t'
|     `-TypedefType 0x5565b21b2560 '__uint64_t' sugar
|       |-Typedef 0x5565b21b2118 '__uint64_t'
|       `-BuiltinType 0x5565b2170430 'unsigned long'
|-CXXConstructorDecl 0x5565b249d880 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5565b249da28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5565b249d968 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5565b249dbd8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5565b249db18 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5565b249dd30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5565b249dca0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5565b249df48 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5565b249ddf8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5565b249de78 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5565b249e168 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5565b249e018 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5565b249e098 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5565b249e388 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5565b249e238 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5565b249e2b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5565b249e5a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5565b249e458 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5565b249e4d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5565b249e738 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5565b249e670 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5565b249e8b8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5565b249e7f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5565b249ea48 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5565b249e980 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5565b249eba0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5565b249eb10 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5565b249ecf8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5565b249ec68 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5565b249ee50 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5565b249edc0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5565b249efd8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5565b249ef18 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5565b249f168 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5565b249f0a0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5565b249f2f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5565b249f230 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5565b249f488 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5565b249f3c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5565b249f580 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5565b249f6a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5565b249f828 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5565b249f760 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5565b249f978 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5565b249f8e8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5565b249fa30 <col:63> "" ""
|-CXXMethodDecl 0x5565b249fb78 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5565b249fab8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5565b249fd88 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5565b249fc38 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5565b249fcb8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5565b249ffa8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5565b249fe50 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5565b249fed0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5565b24a0288 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5565b24a0068 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5565b24a00e8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5565b24ac0d0 <col:55> 'int' 10
| `-ParmVarDecl 0x5565b24a0160 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565b24ac0f0 <col:76> 'bool' true
|-CXXMethodDecl 0x5565b24a0568 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5565b24a0350 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5565b24a03d0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5565b24ac100 <col:56> 'int' 10
| `-ParmVarDecl 0x5565b24a0448 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565b24ac120 <col:77> 'bool' true
|-CXXMethodDecl 0x5565b24a0670 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5565b24a0738 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5565b24a0800 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5565b24a08a0 <col:20>
| `-OptimizeNoneAttr 0x5565b24a08f8 <col:30>
|-CXXConversionDecl 0x5565b24a09e8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5565b24a0ab8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5565b24a0b78 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5565b24a0c68 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5565b24a0d28 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5565b24a0ea8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5565b24a0de0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5565b24a0ff8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5565b24a0f68 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5565b24a10e8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5565b24a11a8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5565b24a13f8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5565b24a1260 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5565b24a12e0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5565b24a1658 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5565b24a14c0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5565b24a1540 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5565b24a1728 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b24a1938 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5565b24a17e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5565b24a1860 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5565b24a1b58 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5565b24a1a00 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5565b24a1a80 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5565b24a1ce8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5565b24a1c20 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5565b24a1dd8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5565b24a1f48 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5565b24a1e88 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565b24a2158 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5565b24a2008 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5565b24a2088 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5565b24a2370 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5565b24a2218 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5565b24a2290 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5565b24a2500 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5565b24a2430 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565b24a2720 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5565b24a25c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5565b24a2640 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5565b24a2870 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5565b24a27e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5565b24a2a48 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5565b24a2930 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5565b24a29b0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5565b24a2b98 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5565b24a2b08 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5565b24a2db0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5565b24a2c50 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5565b24a2cd0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5565b24ac130 <col:39> 'int' 0
|-CXXMethodDecl 0x5565b24a2fd0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5565b24a2e70 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5565b24a2ef0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5565b24ac150 <col:48> 'int' 0
|-CXXMethodDecl 0x5565b24a31b0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5565b24a3090 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5565b24a3110 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5565b24ac170 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5565b24a3280 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5565b24a3340 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5565b24a3400 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5565b24a34c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5565b24a3580 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5565b24a3728 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5565b24a3630 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5565b24a38a8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5565b24a37e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5565b24a3a80 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5565b24a3968 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5565b24a3bf8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5565b24a3b38 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5565b24a3d40 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5565b24a3cb0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5565b24a3e90 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5565b24a3e00 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5565b24a4068 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5565b24a3f50 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5565b24a3fd0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5565b24a4248 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5565b24a4130 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5565b24a41b0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5565b24a4398 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5565b24a4308 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5565b24a45a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5565b24a4458 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5565b24a44d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5565b24a4708 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5565b24a4670 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5565b24a4860 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5565b24a47c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5565b24a4908 <col:57> "" ""
|-CXXMethodDecl 0x5565b24a4a18 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5565b24a4988 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5565b24a4b68 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5565b24a4ad8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5565b24a4ce8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5565b24a4c20 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5565b24a4db0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5565b24a4e70 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5565b24a4f30 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5565b24a4fd0 <col:49> "" ""
|-CXXMethodDecl 0x5565b24a5060 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5565b24a5120 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5565b24a5210 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5565b24a52d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5565b24a5398 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5565b24a5458 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5565b24a5550 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5565b24a5618 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5565b24a56e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5565b24a58b8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5565b24a5798 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5565b24a5818 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5565b24a5ae0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5565b24a5980 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5565b24a5a00 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5565b24a5bf0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5565b24a5c58 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5565b24a5c80 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5565b24a5d98 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5565b24a5e38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5565b24a5e98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5565b24a5ef8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5565b24a5fa8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5565b24a6010 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5565b24a6248 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5565b24a6298 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b24a6228 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5565b24a6138 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5565b24a60e0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5565b24a6120 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5565b24a6100 <col:32> 'int' 8
|-CXXRecordDecl 0x5565b24a62b0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565b24a63c8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5565b24a6470 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5565b24a64d8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5565b24a6568 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5565b24ac600 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5565b24aca38 <col:12>
| |-CXXConstructorDecl 0x5565b24ac708 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565b24ac818 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565b24a6470 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5565b24aefc0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5565b24aef90 <col:12> 'const char *const' lvalue .data 0x5565b24a6470
| | |     `-DeclRefExpr 0x5565b24aef70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565b24a64d8 'length' 'int'
| | | `-ImplicitCastExpr 0x5565b24af050 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5565b24af020 <col:12> 'const int' lvalue .length 0x5565b24a64d8
| | |     `-DeclRefExpr 0x5565b24af000 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5565b24a6568 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5565b24af0e0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5565b24af0b0 <col:12> 'String::memo_t *const' lvalue .memo 0x5565b24a6568
| | |     `-DeclRefExpr 0x5565b24af090 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24ac818 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5565b24af138 <col:12>
| |-CXXConstructorDecl 0x5565b24ac8b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565b24ac8b8
| | `-ParmVarDecl 0x5565b24ac9c8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5565b24b1f20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5565b24bd938 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565b24bda48 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5565b24bdf60 <col:12>
| |   |-BinaryOperator 0x5565b24bdd78 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5565b24bdd30 <col:12> 'const char *' lvalue ->data 0x5565b24a6470
| |   | | `-CXXThisExpr 0x5565b24bdd20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5565b24bdd60 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5565b24bdcf0 <col:12> 'const char *const' lvalue .data 0x5565b24a6470
| |   |     `-DeclRefExpr 0x5565b24bdcd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5565b24bde40 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5565b24bddf8 <col:12> 'int' lvalue ->length 0x5565b24a64d8
| |   | | `-CXXThisExpr 0x5565b24bdde8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5565b24bde28 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5565b24bddb8 <col:12> 'const int' lvalue .length 0x5565b24a64d8
| |   |     `-DeclRefExpr 0x5565b24bdd98 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5565b24bdf08 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5565b24bdec0 <col:12> 'String::memo_t *' lvalue ->memo 0x5565b24a6568
| |   | | `-CXXThisExpr 0x5565b24bdeb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5565b24bdef0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5565b24bde80 <col:12> 'String::memo_t *const' lvalue .memo 0x5565b24a6568
| |   |     `-DeclRefExpr 0x5565b24bde60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5565b24bda48 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5565b24bdf50 <col:12>
| |     `-UnaryOperator 0x5565b24bdf38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5565b24bdf28 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5565b24bdab8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5565b24bdab8
|   `-ParmVarDecl 0x5565b24bdbc8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5565b24a65e0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5565b24a6828 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5565b24a6648 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5565b24a66c8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5565b24a6740 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5565b24ac5c0 <col:79, line:261:5>
|   |-BinaryOperator 0x5565b24ac238 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5565b24ac1d0 <col:2, col:5> 'const char *' lvalue .data 0x5565b24a6470
|   | | `-MemberExpr 0x5565b24ac1a0 <col:2> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|   | |   `-CXXThisExpr 0x5565b24ac190 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5565b24ac220 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5565b24ac200 <col:12> 'const char *' lvalue ParmVar 0x5565b24a6648 'data' 'const char *'
|   |-BinaryOperator 0x5565b24ac300 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5565b24ac298 <col:2, col:5> 'int' lvalue .length 0x5565b24a64d8
|   | | `-MemberExpr 0x5565b24ac268 <col:2> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|   | |   `-CXXThisExpr 0x5565b24ac258 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5565b24ac2e8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5565b24ac2c8 <col:14> 'int' lvalue ParmVar 0x5565b24a66c8 'length' 'int'
|   `-IfStmt 0x5565b24ac5a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5565b24ac420 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5565b24ac408 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5565b24ac3e8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5565b24ac3c8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5565b24ac360 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|     |       | `-MemberExpr 0x5565b24ac330 <col:7> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|     |       |   `-CXXThisExpr 0x5565b24ac320 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5565b24ac3b0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565b24ac390 <col:17> 'String::memo_t *' lvalue ParmVar 0x5565b24a6740 'memo' 'String::memo_t *'
|     `-CallExpr 0x5565b24ac580 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5565b24ac568 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565b24ac470 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5565b2495258 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5565b24ac4d8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565b24a5e38
|         `-ImplicitCastExpr 0x5565b24ac4c0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5565b24ac4a0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5565b24a6740 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5565b24a6ad8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5565b24a68f8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5565b24a6978 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5565b24a69f0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5565b24a65e0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5565b24aca48 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5565b24acbd8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5565b24acb40 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5565b24acab0 <col:2> '<bound member function type>' ->assign_memo 0x5565b24a6828
|     | `-ImplicitCastExpr 0x5565b24acb78 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5565b24acaa0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5565b24acb90 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5565b24acae0 <col:14> 'const char *' lvalue ParmVar 0x5565b24a68f8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5565b24acba8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5565b24acb00 <col:20> 'int' lvalue ParmVar 0x5565b24a6978 'length' 'int'
|     `-ImplicitCastExpr 0x5565b24acbc0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5565b24acb20 <col:28> 'String::memo_t *' lvalue ParmVar 0x5565b24a69f0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5565b24a6c68 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5565b24a6ba8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5565b24ace30 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5565b24acdb0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5565b24acc00 <col:2> '<bound member function type>' ->assign_memo 0x5565b24a6828
|     | `-CXXThisExpr 0x5565b24acbf0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5565b24acde8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5565b24acc80 <col:14, col:19> 'const char *' lvalue .data 0x5565b24a6470
|     |   `-MemberExpr 0x5565b24acc50 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5565b24a65e0
|     |     `-DeclRefExpr 0x5565b24acc30 <col:14> 'const String' lvalue ParmVar 0x5565b24a6ba8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5565b24ace00 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5565b24acd00 <col:25, col:30> 'int' lvalue .length 0x5565b24a64d8
|     |   `-MemberExpr 0x5565b24accd0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5565b24a65e0
|     |     `-DeclRefExpr 0x5565b24accb0 <col:25> 'const String' lvalue ParmVar 0x5565b24a6ba8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5565b24ace18 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5565b24acd80 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|         `-MemberExpr 0x5565b24acd50 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5565b24a65e0
|           `-DeclRefExpr 0x5565b24acd30 <col:38> 'const String' lvalue ParmVar 0x5565b24a6ba8 'x' 'const String &'
|-CXXMethodDecl 0x5565b24a6d30 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5565b24ad7f0 <col:31, line:278:5>
|   `-IfStmt 0x5565b24ad7d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5565b24aced0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5565b24aceb8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5565b24ace88 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|     |     `-MemberExpr 0x5565b24ace58 <col:6> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|     |       `-CXXThisExpr 0x5565b24ace48 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5565b24ad7b0 <col:15, line:277:2>
|       |-ParenExpr 0x5565b24ad380 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5565b24ad350 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5565b24acfe0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5565b24acfc8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5565b24acfb0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5565b24acf70 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565b24a5e38
|       |   |       `-ImplicitCastExpr 0x5565b24acf58 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5565b24acf28 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|       |   |           `-MemberExpr 0x5565b24acef8 <col:27> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|       |   |             `-CXXThisExpr 0x5565b24acee8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5565b24ad040 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5565b24ad020 <col:54> 'int' 0
|       |   `-CallExpr 0x5565b24ad2b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5565b24ad298 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5565b24ad218 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5565b24ad2f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5565b24ad128 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5565b24ad308 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5565b24ad158 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5565b24ad320 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5565b24ad190 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5565b24ad338 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5565b24ad200 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5565b24ad1e8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5565b24ad1b0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5565b24ad6d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5565b24ad590 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5565b24ad578 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5565b24ad4f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5565b24966a0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5565b24ad4c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5565b24a5e38
|       | |   `-ImplicitCastExpr 0x5565b24ad4a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5565b24ad478 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|       | |       `-MemberExpr 0x5565b24ad448 <col:40> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|       | |         `-CXXThisExpr 0x5565b24ad438 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5565b24ad690 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5565b24ad678 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5565b24ad5b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5565b24ab510 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5565b24ad6b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5565b24ad618 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|       |       `-MemberExpr 0x5565b24ad5e8 <col:15> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|       |         `-CXXThisExpr 0x5565b24ad5d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5565b24ad790 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5565b24ad728 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5565b24a6568
|         | `-MemberExpr 0x5565b24ad6f8 <col:6> 'String::rep_t' lvalue ->_r 0x5565b24a65e0
|         |   `-CXXThisExpr 0x5565b24ad6e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5565b24ad778 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5565b24ad758 <col:16> 'int' 0
|-CXXMethodDecl 0x5565b24a6fc8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5565b24a6de8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5565b24a6e68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5565b24a6ee0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5565b24a70a0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5565b24a72f0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5565b24a7158 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5565b24a71d8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5565b24a7250 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5565b24a74d8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5565b24a73c0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5565b24a7440 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5565b24a75d8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5565b24ad8c8 <col:41, line:286:5>
|   `-ReturnStmt 0x5565b24ad8b8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5565b24ad888 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5565b24ad850 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5565b24ad838 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5565b24ad818 <col:46> 'int' 1
|-CXXMethodDecl 0x5565b24a7878 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5565b24a7690 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5565b24a7710 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5565b24a7790 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5565b24ab510 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5565b24a7940 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5565b24ab5e0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5565b24ab7b0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5565b24ab698 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5565b24ab718 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5565b24ab870 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5565b24ab938 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5565b24aba38 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5565b24abab0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5565b24abb28 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5565b24abb90 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5565b24abc90 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5565b24abce0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b24abc70 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5565b24abc50 <col:22> 'int' 14
|-CXXMethodDecl 0x5565b24abef8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5565b24abd10 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5565b24abd90 <col:38> col:41 'int'
| `-ParmVarDecl 0x5565b24abe10 <col:43> col:46 'int'
|-FriendDecl 0x5565b24ac000 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5565b24ac090 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565b256ff60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5565b2570138 prev 0x5565b256ff60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5565b25701c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5565b25701f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b272f390 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5565b272f340 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5565b272f320 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5565b2570408 'type'
|     `-SubstTemplateTypeParmType 0x5565b25703d0 'String' sugar
|       |-TemplateTypeParmType 0x5565b2460a90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b2460a40 'T'
|       `-RecordType 0x5565b249d280 'String'
|         `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b272f448 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5565b272f410 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5565b272f3f0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5565b272f390 'type'
|     `-ElaboratedType 0x5565b272f340 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5565b272f320 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5565b2570408 'type'
|         `-SubstTemplateTypeParmType 0x5565b25703d0 'String' sugar
|           |-TemplateTypeParmType 0x5565b2460a90 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5565b2460a40 'T'
|           `-RecordType 0x5565b249d280 'String'
|             `-CXXRecord 0x5565b249d1f0 'String'
|-CXXMethodDecl 0x5565b272f5c8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5565b272f4d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5565b272f6b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5565b272f798 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5565b272f798
|-CXXMethodDecl 0x5565b272fa68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5565b272f970 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5565b272fca8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5565b272fb20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b272fb98 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b272fe78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5565b272fd68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b272fde0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b272ffd8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5565b27300a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5565b27302f8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5565b2730168 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5565b27301e0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b2730558 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5565b27303c8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5565b2730440 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b2730718 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5565b2730628 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b27308d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5565b27307e0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b2730990 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565b2730a40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5565b2730c78 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5565b2730af0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b2730b68 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5565b2730f18 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5565b2730e20 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5565b2730fe0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5565b2731030 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5565b2731080 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565b26d4a20 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5565b256e9c8 prev 0x5565b26d4a20 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5565b256fed0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5565b256fe80 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5565b256fe60 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5565b256fd10 'type'
|     `-SubstTemplateTypeParmType 0x5565b256fba0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5565b2436840 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5565b24367e8 'F'
|       `-RecordType 0x5565b256f800 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5565b256f720 'typed_array_memory'
|-FieldDecl 0x5565b27310d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5565b2731120 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5565b2731158 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|   |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5565b246dd58 'T'
|   `-RecordType 0x5565b249d280 'String'
|     `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b27311e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5565b27311b0 'String &'
|   `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-RecordType 0x5565b249d280 'String'
|       `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2731278 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5565b2731240 'const String &'
|   `-QualType 0x5565b256ea61 'const String' const
|     `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-RecordType 0x5565b249d280 'String'
|         `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2731308 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5565b27312d0 'String *'
|   `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-RecordType 0x5565b249d280 'String'
|       `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2731398 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5565b2731360 'const String *'
|   `-QualType 0x5565b256ea61 'const String' const
|     `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-RecordType 0x5565b249d280 'String'
|         `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2731ff0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5565b2731fa0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5565b2731f80 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5565b2731eb8 'type'
|     `-LValueReferenceType 0x5565b2731e80 'const String &'
|       `-QualType 0x5565b2731c21 'const String' const
|         `-SubstTemplateTypeParmType 0x5565b2731c20 'String' sugar
|           |-TemplateTypeParmType 0x5565b2440790 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5565b2440738 'T'
|           `-RecordType 0x5565b249d280 'String'
|             `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2732058 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5565b2731240 'const String &'
|   `-QualType 0x5565b256ea61 'const String' const
|     `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-RecordType 0x5565b249d280 'String'
|         `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b27320b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2732118 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5565b27312d0 'String *'
|   `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-RecordType 0x5565b249d280 'String'
|       `-CXXRecord 0x5565b249d1f0 'String'
|-TypedefDecl 0x5565b2732180 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5565b2731360 'const String *'
|   `-QualType 0x5565b256ea61 'const String' const
|     `-SubstTemplateTypeParmType 0x5565b256ea60 'String' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-RecordType 0x5565b249d280 'String'
|         `-CXXRecord 0x5565b249d1f0 'String'
|-EnumDecl 0x5565b27321d8 <line:134:5> col:5
| `-EnumConstantDecl 0x5565b27322d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5565b27322b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5565b246f438 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5565b246f410 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5565b246f3f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5565b2732358 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5565b27325e8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b2732410 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b27324b0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5565b2732878 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5565b2732760 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5565b2732b38 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5565b2732a20 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5565b2732e50 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5565b2732d30 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5565b2733160 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5565b2733040 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5565b2733450 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b2733298 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b2733310 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565b2733578 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5565b2733628 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b2733680 <col:30> Inherited
|-CXXMethodDecl 0x5565b27336c8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5565b2733778 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b27337d0 <col:30> Inherited
|-CXXMethodDecl 0x5565b2733898 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5565b2733948 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b27339a0 <col:30> Inherited
|-CXXMethodDecl 0x5565b27339e8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5565b2733a98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b2733af0 <col:30> Inherited
|-CXXMethodDecl 0x5565b2733b38 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5565b2733be8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b2733c40 <col:30> Inherited
|-CXXMethodDecl 0x5565b2733c88 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5565b2733d38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b2733d90 <col:30> Inherited
|-CXXMethodDecl 0x5565b2733db8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565b2733e68 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565b2733f18 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5565b27340d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b2733fc8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b2734040 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565b2734228 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5565b2734198 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b27343d8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5565b27342e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565b2734490 <col:20>
| `-OptimizeNoneAttr 0x5565b27344e8 <col:30>
|-CXXMethodDecl 0x5565b2734608 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5565b2734510 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565b27346c0 <col:20>
| `-OptimizeNoneAttr 0x5565b2734718 <col:30>
|-CXXMethodDecl 0x5565b27347d0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565b2734740 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b2734918 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565b2734888 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b2734a48 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5565b2734b48 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5565b2734c18 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5565b2734ce8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5565b2734e28 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565b2734d98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b2734f70 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565b2734ee0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b27350b8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5565b2735028 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565b2735170 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5565b2735270 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5565b27351e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565b2735328 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5565b27353e8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5565b27354e8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5565b2735668 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5565b27355a8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5565b2735e28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5565b2735720 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5565b2735d88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5565b2735c88 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5565b2735f40 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565b2736090 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5565b2736000 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565b2736148 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5565b2736398 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b2736208 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5565b2736280 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5565b2736528 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5565b2736468 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5565b2736738 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5565b27365f0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5565b2736668 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5565b27367f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5565b2736a58 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5565b2736960 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5565b2736b28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5565b2736b28

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b27b2598 prev 0x5565b2743168 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565b27b2690 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5565b27b2720 <col:22, col:28> col:22 public
|-EnumDecl 0x5565b27b2748 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5565b27b2868 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2848 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5565b27b2830 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5565b27b2810 <col:14> 'int' 999
| |-EnumConstantDecl 0x5565b27b2910 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b28f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5565b27b28d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5565b27b28b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5565b27b29a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2980 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5565b27b2960 <col:17> 'int' 0
| |-EnumConstantDecl 0x5565b27b2a30 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2a10 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5565b27b29f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5565b27b2ac0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2aa0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5565b27b2a80 <col:16> 'int' 2
| |-EnumConstantDecl 0x5565b27b2b50 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2b30 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5565b27b2b10 <col:13> 'int' 3
| |-EnumConstantDecl 0x5565b27b2be0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2bc0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5565b27b2ba0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5565b27b2c70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2c50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5565b27b2c30 <col:14> 'int' 5
| |-EnumConstantDecl 0x5565b27b2d00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5565b27b2ce0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5565b27b2cc0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5565b27b2d90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5565b27b2d70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5565b27b2d50 <col:13> 'int' 7
|-VarDecl 0x5565b27b2e00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5565b27b2e88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5565b27b2f10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5565b27b2f98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5565b27b3020 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5565b27b30a8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5565b27b3130 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5565b27b31b8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5565b27b3240 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5565b27b32c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5565b27b3350 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5565b27b3450 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5565b27b8748 '_nerrors' 'int'
| | `-IntegerLiteral 0x5565b27b8ed8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5565b27b8f48 <col:16, line:129:5>
|-CXXDestructorDecl 0x5565b27b3540 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5565b27b8f58 <col:29, line:132:5>
|-CXXMethodDecl 0x5565b27b36f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5565b27b3630 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b27b37c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5565b27b38a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5565b27b8fb0 <col:44, line:161:5>
|   `-ReturnStmt 0x5565b27b8fa0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5565b27b8f88 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5565b27b8f68 <col:9> 'ErrorHandler *' lvalue Var 0x5565b27b87a8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5565b27b39e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5565b27b3958 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5565b27b3ab0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5565b27b9010 <col:43, line:173:5>
|   `-ReturnStmt 0x5565b27b9000 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5565b27b8fe8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5565b27b8fc8 <col:9> 'ErrorHandler *' lvalue Var 0x5565b27b8820 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5565b27b3b68 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5565b27b3be8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5565b27b3cf8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5565b27b3c68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b3e48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5565b27b3db8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b3fa0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5565b27b3f08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b40f8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5565b27b4060 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4250 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5565b27b41b8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4460 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565b27b4308 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b4388 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4638 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565b27b4520 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b45a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4858 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565b27b46f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b4778 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4a38 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565b27b4918 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b4998 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4c18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5565b27b4af8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b4b78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b4da0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5565b27b4cd8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5565b27b4f70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5565b27b4e58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5565b27b4ed0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5565b27b9268 <col:57, line:234:5>
|   `-ReturnStmt 0x5565b27b9258 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5565b27b9240 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5565b27b91e8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5565b27b91b8 <col:9> '<bound member function type>' ->xmessage 0x5565b27b4da0
|         | `-CXXThisExpr 0x5565b27b91a8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5565b27b9228 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565b27b9210 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565b27b9188 <col:18, col:40> 'String' (CXXTemporary 0x5565b27b9188)
|               `-CallExpr 0x5565b27b9150 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5565b27b9138 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5565b27b90b0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5565b27b6f78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5565b27b90d0 <col:31> 'const String' lvalue ParmVar 0x5565b27b4ed0 'str' 'const String &'
|                 `-DeclRefExpr 0x5565b27b90f0 <col:36> 'const String' lvalue ParmVar 0x5565b27b4e58 'anno' 'const String &'
|-CXXMethodDecl 0x5565b27b5250 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5565b27b5030 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5565b27b50b0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5565b27b5128 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565b27b94f8 <col:68, line:243:5>
|   `-ReturnStmt 0x5565b27b94e8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5565b27b94d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5565b27b9470 <col:9, col:41> 'int'
|         |-MemberExpr 0x5565b27b9440 <col:9> '<bound member function type>' ->xmessage 0x5565b27b4f70
|         | `-CXXThisExpr 0x5565b27b9430 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5565b27b9308 <col:18> 'const String' lvalue ParmVar 0x5565b27b5030 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5565b27b94b8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565b27b94a0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565b27b9410 <col:24, col:40> 'String' (CXXTemporary 0x5565b27b9410)
|               `-CXXMemberCallExpr 0x5565b27b93a8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5565b27b9338 <col:24> '<bound member function type>' ->vformat 0x5565b27b6440
|                 | `-CXXThisExpr 0x5565b27b9328 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5565b27b93d8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5565b27b9368 <col:32> 'const char *' lvalue ParmVar 0x5565b27b50b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5565b27b93f0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5565b27b9388 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565b27b5128 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565b27b54f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5565b27b5318 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5565b27b5390 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5565b27b5408 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5565b27b9838 <col:23, line:254:5>
|   `-ReturnStmt 0x5565b27b9828 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5565b27b9810 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5565b27b97b0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5565b27b9780 <col:9> '<bound member function type>' ->xmessage 0x5565b27b4f70
|         | `-CXXThisExpr 0x5565b27b9770 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5565b27b97f8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5565b27b97e0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5565b27b9730 <col:18, col:65> 'String' (CXXTemporary 0x5565b27b9730)
|         |     `-CallExpr 0x5565b27b96c8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5565b27b96b0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5565b27b9598 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5565b27b6f78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5565b27b95b8 <col:31> 'const String' lvalue ParmVar 0x5565b27b5390 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5565b27b9710 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5565b27b96f8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5565b27b9690 <col:37, col:64> 'String' (CXXTemporary 0x5565b27b9690)
|         |             `-CallExpr 0x5565b27b9660 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5565b27b9648 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5565b27b95d8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5565b27b75c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5565b27b95f8 <col:56> 'const String' lvalue ParmVar 0x5565b27b5318 'landmark' 'const String &'
|         `-DeclRefExpr 0x5565b27b9750 <col:68> 'const String' lvalue ParmVar 0x5565b27b5408 'str' 'const String &'
|-CXXMethodDecl 0x5565b27b5870 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5565b27b55b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5565b27b5630 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5565b27b56b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5565b27b5728 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565b27b9af0 <col:34, line:267:5>
|   `-ReturnStmt 0x5565b27b9ae0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5565b27b9ac8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5565b27b9a60 <col:9, col:51> 'int'
|         |-MemberExpr 0x5565b27b9a30 <col:9> '<bound member function type>' ->xmessage 0x5565b27b54f0
|         | `-CXXThisExpr 0x5565b27b9a20 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5565b27b98d8 <col:18> 'const String' lvalue ParmVar 0x5565b27b55b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5565b27b98f8 <col:28> 'const String' lvalue ParmVar 0x5565b27b5630 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5565b27b9ab0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5565b27b9a98 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5565b27b9a00 <col:34, col:50> 'String' (CXXTemporary 0x5565b27b9a00)
|               `-CXXMemberCallExpr 0x5565b27b9998 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5565b27b9928 <col:34> '<bound member function type>' ->vformat 0x5565b27b6440
|                 | `-CXXThisExpr 0x5565b27b9918 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5565b27b99c8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5565b27b9958 <col:42> 'const char *' lvalue ParmVar 0x5565b27b56b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5565b27b99e0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5565b27b9978 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565b27b5728 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565b27b5980 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5565b27b9b70 <col:25, line:288:5>
|   `-ReturnStmt 0x5565b27b9b60 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5565b27b9b48 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5565b27b9b18 <col:9> 'const int' lvalue ->_nerrors 0x5565b27b8748
|         `-CXXThisExpr 0x5565b27b9b08 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5565b27b5b90 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5565b27b5a38 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5565b27b5ab8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b5e88 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5565b27b5c70 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5565b27b5cf0 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5565b27b5d68 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565b27b6020 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5565b27b5f58 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b6268 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5565b27b60e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5565b27b6158 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5565b27b9dd0 <col:58, line:357:5>
|   `-ReturnStmt 0x5565b27b9dc0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5565b27b9da8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5565b27b9d78 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5565b27b9d60 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5565b27b9d40 <col:9, col:29> 'String' (CXXTemporary 0x5565b27b9d40)
|             `-CallExpr 0x5565b27b9cd0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5565b27b9cb8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5565b27b9c38 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5565b27b5e88 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5565b27b9bd8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5565b27b9d08 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5565b27b9bf8 <col:21> 'const char *' lvalue ParmVar 0x5565b27b60e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5565b27b9d20 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5565b27b9c18 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5565b27b6158 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565b27b6440 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5565b27b6330 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5565b27b63a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5565b27b6598 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5565b27b6508 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5565b27b66e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5565b27b6650 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5565b27b6980 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5565b27b6798 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5565b27b6818 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5565b27b6890 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5565b27b6ae0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5565b27b6a50 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5565b27b9ee8 <col:37, line:441:5>
|   `-IfStmt 0x5565b27b9ed0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5565b27b9e58 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5565b27b9e28 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5565b27b9de8 <col:6> 'int' lvalue ParmVar 0x5565b27b6a50 'level' 'int'
|     | `-ImplicitCastExpr 0x5565b27b9e40 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5565b27b9e08 <col:15> 'ErrorHandler::Level' EnumConstant 0x5565b27b2b50 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5565b27b9eb8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5565b27b9e88 <col:8> 'int' lvalue ->_nerrors 0x5565b27b8748
|         `-CXXThisExpr 0x5565b27b9e78 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5565b27b6ba8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5565b27b9f80 <col:26, line:448:5>
|   `-BinaryOperator 0x5565b27b9f60 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5565b27b9f10 <col:2> 'int' lvalue ->_nerrors 0x5565b27b8748
|     | `-CXXThisExpr 0x5565b27b9f00 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5565b27b9f40 <col:13> 'int' 0
|-CXXMethodDecl 0x5565b27b6d70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5565b27b6c60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5565b27b6cd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5565b27b6f78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5565b27b6e30 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5565b27b6ea8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5565b27b7228 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5565b27b7038 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5565b27b70b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5565b27b7138 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5565b27b72e0 <col:59> 0 0
|-CXXMethodDecl 0x5565b27b7478 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5565b27b7358 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5565b27b73d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5565b27ba5f0 <col:70, line:534:5>
|   |-DeclStmt 0x5565b27ba0f0 <line:528:2, col:20>
|   | |-VarDecl 0x5565b27b9fa8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5565b27ba010 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5565b27ba048 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5565b27ba0b0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5565b27ba1c0 <line:529:2, col:23>
|   | `-VarDecl 0x5565b27ba120 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5565b27ba1a8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5565b27ba188 <col:18> 'const char *' lvalue ParmVar 0x5565b27b7358 'begin' 'const char *'
|   |-DoStmt 0x5565b27ba588 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5565b27ba4b8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5565b27ba4a0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5565b27ba480 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5565b27ba1d8 <col:6> 'const char *' lvalue Var 0x5565b27ba120 'x' 'const char *'
|   | |     `-CallExpr 0x5565b27ba3d0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5565b27ba3b8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5565b27ba370 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5565b27b8c20 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5565b27ba438 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5565b27ba420 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5565b27ba290 <col:20, col:27> 'String' (CXXTemporary 0x5565b27ba290)
|   | |       |     `-CXXTemporaryObjectExpr 0x5565b27ba258 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5565b27ba450 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5565b27ba2b0 <col:30> 'const char *' lvalue Var 0x5565b27ba120 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5565b27ba468 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5565b27ba2d0 <col:33> 'const char *' lvalue ParmVar 0x5565b27b73d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5565b27ba310 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5565b27ba2f0 <col:39> 'String' lvalue Var 0x5565b27b9fa8 'name' 'String'
|   | |       |-UnaryOperator 0x5565b27ba348 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5565b27ba328 <col:46> 'String' lvalue Var 0x5565b27ba048 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5565b27ba360 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5565b27ba570 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5565b27ba558 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5565b27ba538 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5565b27ba508 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|   |         `-ImplicitCastExpr 0x5565b27ba4f0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5565b27ba4d0 <col:11> 'String' lvalue Var 0x5565b27b9fa8 'name' 'String'
|   `-ReturnStmt 0x5565b27ba5e0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5565b27ba5c8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5565b27ba5a8 <col:9> 'const char *' lvalue Var 0x5565b27ba120 'x' 'const char *'
|-CXXMethodDecl 0x5565b27b75c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5565b27b7538 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5565b27babf8 <col:55, line:550:5>
|   `-IfStmt 0x5565b27babd0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5565b27ba830 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5565b27ba818 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565b27ba800 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565b27ba7e0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565b27ba7b0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|     | |       `-DeclRefExpr 0x5565b27ba650 <col:6> 'const String' lvalue ParmVar 0x5565b27b7538 'x' 'const String &'
|     | `-BinaryOperator 0x5565b27ba790 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5565b27ba760 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5565b27ba710 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5565b27ba6f8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5565b27ba6b0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5565b24ba220 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5565b27ba670 <col:11> 'const String' lvalue ParmVar 0x5565b27b7538 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5565b27ba690 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5565b27ba778 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5565b27ba748 <col:19> 'char' 123
|     |-ReturnStmt 0x5565b27ba8a0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5565b27ba870 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5565b27ba850 <col:13> 'const String' lvalue ParmVar 0x5565b27b7538 'x' 'const String &'
|     `-IfStmt 0x5565b27baba8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5565b27ba938 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565b27ba920 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565b27ba900 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565b27ba8d0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |       `-DeclRefExpr 0x5565b27ba8b0 <col:11> 'const String' lvalue ParmVar 0x5565b27b7538 'x' 'const String &'
|       |-ReturnStmt 0x5565b27baac0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5565b27baaa8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5565b27baa78 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5565b27baa60 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5565b27baa40 <col:13, col:29> 'String' (CXXTemporary 0x5565b27baa40)
|       |         `-CallExpr 0x5565b27ba9f0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5565b27ba9d8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5565b27ba950 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5565b27b6d70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5565b27baa20 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5565b27ba970 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5565b27ba990 <col:28> 'const String' lvalue ParmVar 0x5565b27b7538 'x' 'const String &'
|       `-ReturnStmt 0x5565b27bab98 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5565b27bab80 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5565b27bab50 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5565b27bab38 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5565b27bab18 <col:13, col:20> 'String' (CXXTemporary 0x5565b27bab18)
|                 `-CXXTemporaryObjectExpr 0x5565b27baae0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5565b27b7790 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5565b27b7680 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5565b27b76f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565b27b8ec8 <col:71> 'bool' false
|-CXXRecordDecl 0x5565b27b7840 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5565b27b7b38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5565b27b7ad0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5565b27b7a70 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5565b27b7a30 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5565b249d280 'String'
|       | `-CXXRecord 0x5565b249d1f0 'String'
|       |-BuiltinType 0x5565b2170370 'int'
|       `-DecayedType 0x5565b27441b0 '__va_list_tag *' sugar
|         |-TypedefType 0x5565b2744180 'va_list' sugar
|         | |-Typedef 0x5565b238e330 'va_list'
|         | `-TypedefType 0x5565b238e2e0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5565b22c5f08 '__gnuc_va_list'
|         |   `-TypedefType 0x5565b22c5e70 '__builtin_va_list' sugar
|         |     |-Typedef 0x5565b21b1bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5565b21b1b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5565b21710c0 '__va_list_tag'
|         |         `-CXXRecord 0x5565b2171028 '__va_list_tag'
|         `-PointerType 0x5565b2393bd0 '__va_list_tag *'
|           `-RecordType 0x5565b21710c0 '__va_list_tag'
|             `-CXXRecord 0x5565b2171028 '__va_list_tag'
|-EnumDecl 0x5565b27b7b90 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5565b27b7c90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b81f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7c70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5565b27b7c50 <col:16> 'int' 1
| |-EnumConstantDecl 0x5565b27b7d20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8208 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7d00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5565b27b7ce0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5565b27b7db0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8220 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7d90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5565b27b7d70 <col:22> 'int' 4
| |-EnumConstantDecl 0x5565b27b7e40 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8238 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7e20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5565b27b7e00 <col:17> 'int' 8
| |-EnumConstantDecl 0x5565b27b7ed0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8250 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7eb0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5565b27b7e90 <col:22> 'int' 16
| |-EnumConstantDecl 0x5565b27b7f60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8268 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7f40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5565b27b7f20 <col:19> 'int' 32
| |-EnumConstantDecl 0x5565b27b7ff0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8280 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b7fd0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5565b27b7fb0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5565b27b8080 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b8298 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b8060 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5565b27b8040 <col:14> 'int' 128
| |-EnumConstantDecl 0x5565b27b8110 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5565b27b82b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b27b80f0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5565b27b80d0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5565b27b81a0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5565b27b82c8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b27b8180 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5565b27b8160 <col:12> 'int' 1024
|-CXXMethodDecl 0x5565b27b84d8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5565b27b82f0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5565b27b8390 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5565b27b8660 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5565b27b8598 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5565b27b8708 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5565b27b8748 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5565b27b87a8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5565b27b8820 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5565b27b8c20 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5565b27b8898 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5565b27b8918 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5565b27b8998 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5565b27b8a10 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5565b27b8a88 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5565b27b8b00 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5565b27b8d48 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5565b27b8d48
| `-ParmVarDecl 0x5565b27b8e58 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5565b27baf58 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5565b27baf58
  `-ParmVarDecl 0x5565b27bb068 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b27431f8 prev 0x5565b26f9eb8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b27432f0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5565b2743380 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5565b27434b8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5565b27433b8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5565b27448e0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b27448c0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5565b2744458 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5565b2744970 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565b2744930 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5565b27433b8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5565b27444c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5565b27449f0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b27449b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5565b2744520 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5565b2744a30 <col:54> 'bool' false
| `-CompoundStmt 0x5565b2744b38 <col:61, line:38:5>
|   `-BinaryOperator 0x5565b2744b18 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5565b2744ab0 <col:9> 'const Element *' lvalue ->_context 0x5565b27443f8
|     | `-CXXThisExpr 0x5565b2744aa0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5565b2744b00 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5565b2744ae0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5565b27436c8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b2743578 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5565b27435f0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5565b2744918 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b27448f8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5565b27443f8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5565b2744b90 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565b2744b50 <col:20> 'const Element *' lvalue ParmVar 0x5565b2743578 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5565b2744458 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5565b2744c10 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5565b2744bd0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5565b27435f0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5565b27444c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5565b2744c90 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5565b2744c50 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5565b2744520 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5565b2744cd0 <col:73> 'bool' false
| `-CompoundStmt 0x5565b2744d48 <col:80, line:46:5>
|-CXXMethodDecl 0x5565b27437f8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5565b2744dc0 <col:36, line:51:5>
|   `-ReturnStmt 0x5565b2744db0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5565b2744d98 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5565b2744d68 <col:16> 'const Element *const' lvalue ->_context 0x5565b27443f8
|         `-CXXThisExpr 0x5565b2744d58 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5565b27438e8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5565b2744e40 <col:32, line:57:5>
|   `-ReturnStmt 0x5565b2744e30 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5565b2744e18 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5565b2744de8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5565b2744458
|         `-CXXThisExpr 0x5565b2744dd8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5565b27439a8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5565b2743b30 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565b2743a60 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5565b2743c80 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565b2743bf0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565b2743dd0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5565b2743d40 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5565b2743fd8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5565b2743e88 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5565b2743f00 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5565b2744308 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5565b2744098 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5565b2744118 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5565b27441e0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5565b27443c0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5565b27443f8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5565b2744458 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5565b27444c0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5565b2744520 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5565b2744570 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5565b2744570
| `-ParmVarDecl 0x5565b2744688 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5565b2744728 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5565b2744728
| `-ParmVarDecl 0x5565b2744838 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5565b27c4088 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565b276a7b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5565b276a988 prev 0x5565b276a7b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5565b276aa18 <col:46, col:52> col:46 public
|-TypedefDecl 0x5565b276aa40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2777e60 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5565b2777e10 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5565b276aef0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5565b276adf0 'type'
|     `-TemplateSpecializationType 0x5565b276ad80 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5565b276ac60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5565b276ac40 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5565b276ac20 <col:24> 'unsigned long' 4
|       `-RecordType 0x5565b276ad60 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5565b276ac80 'char_array'
|-TypedefDecl 0x5565b2777f18 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5565b2777ee0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5565b2777ec0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5565b2777e60 'type'
|     `-ElaboratedType 0x5565b2777e10 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5565b276aef0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5565b276adf0 'type'
|         `-TemplateSpecializationType 0x5565b276ad80 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5565b276ac60 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5565b276ac40 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5565b276ac20 <col:24> 'unsigned long' 4
|           `-RecordType 0x5565b276ad60 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5565b276ac80 'char_array'
|-CXXMethodDecl 0x5565b2778098 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5565b2777fa8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5565b2778188 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5565b2778268 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5565b2778538 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5565b2778440 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5565b2778778 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565b27785f0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b2778668 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b2778948 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565b2778838 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b27788b0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b2778aa8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5565b2778b78 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5565b2778dc8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565b2778c38 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5565b2778cb0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b2779028 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5565b2778e98 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5565b2778f10 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b27791e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5565b27790f8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b27793a8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5565b27792b0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b2779460 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565b2779510 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5565b2779748 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5565b27795c0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5565b2779638 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5565b27799e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5565b27798f0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5565b2779ab0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5565b2779b00 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5565b2779b50 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5565b27691b8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5565b27693c8 prev 0x5565b27691b8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5565b276a720 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5565b276a6d0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5565b276a6b0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5565b276a560 'type'
|     `-SubstTemplateTypeParmType 0x5565b276a380 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5565b24360c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b2436068 'T'
|       `-RecordType 0x5565b2769ed0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5565b2769de8 'sized_array_memory'
|-FieldDecl 0x5565b2779ba0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5565b2779bf0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5565b2779c28 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|   |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5565b246dd58 'T'
|   `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2779cb8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5565b2779c80 'int &'
|   `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2779d78 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5565b2779d40 'const int &'
|   `-QualType 0x5565b2769461 'const int' const
|     `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2779e08 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5565b2779dd0 'int *'
|   `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b2779e98 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5565b2779e60 'const int *'
|   `-QualType 0x5565b2769461 'const int' const
|     `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b277aa80 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5565b277aa30 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5565b277aa10 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5565b277a9a0 'type'
|     `-SubstTemplateTypeParmType 0x5565b277a760 'int' sugar
|       |-TemplateTypeParmType 0x5565b2440ec0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b2440e70 'T'
|       `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b277aae8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5565b2779d40 'const int &'
|   `-QualType 0x5565b2769461 'const int' const
|     `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b277ab40 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b277aba8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5565b2779dd0 'int *'
|   `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|     |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5565b246dd58 'T'
|     `-BuiltinType 0x5565b2170370 'int'
|-TypedefDecl 0x5565b277ac10 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5565b2779e60 'const int *'
|   `-QualType 0x5565b2769461 'const int' const
|     `-SubstTemplateTypeParmType 0x5565b2769460 'int' sugar
|       |-TemplateTypeParmType 0x5565b246ddb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5565b246dd58 'T'
|       `-BuiltinType 0x5565b2170370 'int'
|-EnumDecl 0x5565b277ac68 <line:134:5> col:5
| `-EnumConstantDecl 0x5565b277ad60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5565b277ad40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5565b246f438 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5565b246f410 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5565b246f3f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5565b277ade8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5565b277b038 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b277aea0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b277af40 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5565b277b2f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5565b277b1e0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5565b277b5b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5565b277b4a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5565b277b900 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5565b277b7e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5565b277bc10 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5565b277baf0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5565b277bf00 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b277bd48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b277bdc0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565b277c028 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5565b277c108 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c160 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c1a8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5565b277c258 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c2b0 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c378 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565b277c428 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c480 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c4c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565b277c578 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c5d0 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c618 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565b277c6c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c720 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c768 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5565b277c818 <col:20> Inherited
| `-OptimizeNoneAttr 0x5565b277c870 <col:30> Inherited
|-CXXMethodDecl 0x5565b277c898 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565b277c948 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5565b277c9f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5565b277cbb8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b277caa8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5565b277cb20 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565b277cd08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5565b277cc78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b277ceb8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5565b277cdc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565b277cf70 <col:20>
| `-OptimizeNoneAttr 0x5565b277cfc8 <col:30>
|-CXXMethodDecl 0x5565b277d0e8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5565b277cff0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5565b277d1a0 <col:20>
| `-OptimizeNoneAttr 0x5565b277d1f8 <col:30>
|-CXXMethodDecl 0x5565b277d2b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565b277d220 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b277d3f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565b277d368 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b277d528 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5565b277d658 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5565b277d728 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5565b277d7f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5565b277d938 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5565b277d8a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b277da80 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5565b277d9f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5565b277dbc8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5565b277db38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565b277dc80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5565b277dd80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5565b277dcf0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5565b277de38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5565b277def8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5565b277dff8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5565b277e178 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5565b277e0b8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5565b277e938 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5565b277e230 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5565b277e898 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5565b277e798 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5565b277ea18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5565b277eb68 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5565b277ead8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565b277ec20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5565b277ee68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5565b277ece0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5565b277ed58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5565b277f028 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5565b277ef38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5565b277f278 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5565b277f0f0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5565b277f168 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5565b277f338 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5565b2780588 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5565b2780490 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5565b2780658 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b2767328 prev 0x5565b274d0f0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565b2767420 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5565b2767510 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5565b2791030 <col:16, line:828:9>
|-CXXDestructorDecl 0x5565b2767600 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5565b2791040 <col:25, line:830:9>
|-CXXMethodDecl 0x5565b2767700 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5565b27677b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5565b2767858 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5565b2767858
| `-ParmVarDecl 0x5565b2767968 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5565b2768128 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5565b2768128
  `-ParmVarDecl 0x5565b2768238 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b274cf28 prev 0x5565b26f9f48 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5565b274d060 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5565b274d0f0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5565b274d1a0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5565b274d2a8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5565b274d1d8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565b2781c18 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565b2781bf8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5565b274d5c8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5565b274d440 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5565b274d4b8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565b2781c50 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565b2781c30 <col:59> 'int' 0
|-CXXConstructorDecl 0x5565b274d7a0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b274d690 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5565b274d708 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565b2781c88 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565b2781c68 <col:55> 'int' 0
|-CXXConstructorDecl 0x5565b274db58 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5565b274d940 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5565b274d9b8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5565b274da30 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5565b2781cc0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5565b2781ca0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5565b274dd18 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5565b274dc58 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5565b274de10 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5565b274dfc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5565b274df00 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5565b274e0b8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5565b2782070 <col:24, line:291:5>
|   `-ReturnStmt 0x5565b2782060 <line:290:9, col:79>
|     `-BinaryOperator 0x5565b2782040 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5565b2781f18 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5565b2781e70 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5565b2781e50 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5565b2781d48 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5565b2781d30 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5565b2781d18 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5565b2781ce8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5565b2769150
|       | |   |       `-CXXThisExpr 0x5565b2781cd8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5565b2781e38 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5565b2781e20 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5565b2781de8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5565b2781db8 <col:28, col:35> '<bound member function type>' ->size 0x5565b2733db8
|       | |           `-ImplicitCastExpr 0x5565b2781e08 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5565b2781da0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5565b2781d70 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5565b2769150
|       | |                 `-CXXThisExpr 0x5565b2781d60 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5565b2781f00 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5565b2781ee8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5565b2781ed0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5565b2781ea0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5565b27807a0
|       |         `-CXXThisExpr 0x5565b2781e90 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5565b2782020 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5565b2782008 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565b2781ff0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565b2781fb0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5565b2781f98 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5565b2781f48 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5565b2780850
|         |     |   `-CXXThisExpr 0x5565b2781f38 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5565b2781f78 <col:73> 'int' 0
|         `-IntegerLiteral 0x5565b2781fd0 <col:79> 'int' 0
|-CXXMethodDecl 0x5565b274e178 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5565b2782248 <col:32, line:296:5>
|   `-ReturnStmt 0x5565b2782238 <line:295:9, col:49>
|     `-BinaryOperator 0x5565b2782218 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5565b27820f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5565b27820e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5565b27820c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5565b2782098 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5565b27807a0
|       |       `-CXXThisExpr 0x5565b2782088 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5565b27821f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5565b27821e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565b27821c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565b2782188 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5565b2782170 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5565b2782120 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5565b2780850
|         |     |   `-CXXThisExpr 0x5565b2782110 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5565b2782150 <col:43> 'int' 0
|         `-IntegerLiteral 0x5565b27821a8 <col:49> 'int' 0
|-CXXMethodDecl 0x5565b274e268 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5565b2782458 <col:19, line:306:5>
|   |-IfStmt 0x5565b2782378 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5565b27822b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5565b27822a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5565b2782270 <col:13> 'Vector<String> *' lvalue ->_conf 0x5565b2769150
|   | |     `-CXXThisExpr 0x5565b2782260 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5565b2782358 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5565b2782328 <col:13, col:20> '<bound member function type>' ->clear 0x5565b27367f8
|   |     `-ImplicitCastExpr 0x5565b2782310 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5565b27822e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5565b2769150
|   |         `-CXXThisExpr 0x5565b27822d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5565b2782400 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5565b27823d0 <col:9, col:16> '<bound member function type>' .clear 0x5565b277f338
|   |   `-MemberExpr 0x5565b27823a0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5565b2780740
|   |     `-CXXThisExpr 0x5565b2782390 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5565b2782448 <line:305:9, col:17>
|     `-UnaryOperator 0x5565b2782430 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2782420 <col:17> 'Args *' this
|-CXXMethodDecl 0x5565b274e4e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5565b274e3f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5565b274e668 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5565b274e5a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5565b274e9e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5565b274e710 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5565b274e948 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5565b274e7b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5565b274e830 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5565b2782780 <col:67, line:327:5>
|     |-WhileStmt 0x5565b2782730 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5565b2782548 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5565b27824c0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5565b26f98e0 0x5565b268f998 0x5565b24d8f78 0x5565b24d8c50 0x5565b24ca430 0x5565b24ca0e0 0x5565b24c99d0 0x5565b249c340 0x5565b2428800
|     | | |-DeclRefExpr 0x5565b2782480 <col:16> 'Iter' lvalue ParmVar 0x5565b274e7b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5565b27824a0 <col:25> 'Iter' lvalue ParmVar 0x5565b274e830 'end' 'Iter'
|     | `-CompoundStmt 0x5565b2782710 <col:30, line:325:9>
|     |   |-CallExpr 0x5565b27826b0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5565b2782590 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5565b2782680 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5565b2782610 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|     |   |   `-DeclRefExpr 0x5565b27825f0 <col:24> 'Iter' lvalue ParmVar 0x5565b274e7b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5565b27826f8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5565b27826d8 <col:15> 'Iter' lvalue ParmVar 0x5565b274e7b8 'begin' 'Iter'
|     `-ReturnStmt 0x5565b2782770 <line:326:9, col:17>
|       `-UnaryOperator 0x5565b2782758 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2782748 <col:17> 'Args *' this
|-CXXMethodDecl 0x5565b274eaf0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5565b274ea60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5565b274ec38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5565b274eba8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5565b274ed00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5565b2782860 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5565b2782800 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5565b27827b0 <col:9> '<bound member function type>' ->reset_from 0x5565b2780bc8
|   | | `-CXXThisExpr 0x5565b27827a0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5565b27827e0 <col:20> 'int' 0
|   `-ReturnStmt 0x5565b2782850 <line:352:9, col:17>
|     `-UnaryOperator 0x5565b2782838 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2782828 <col:17> 'Args *' this
|-VarDecl 0x5565b274edb8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5565b274ee20 <col:38> 'int' 1
|-VarDecl 0x5565b274eeb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5565b274ef18 <col:39> 'int' 2
|-VarDecl 0x5565b274efa8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5565b274f010 <col:39> 'int' 4
|-VarDecl 0x5565b274f0a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5565b274f108 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5565b274f488 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5565b274f180 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b274f3e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5565b274f230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b274f2d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5565b27829b8 <col:43, line:371:5>
|     `-ReturnStmt 0x5565b27829a8 <line:370:9, col:34>
|       `-CallExpr 0x5565b2782970 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2782890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2782910 <col:21> 'const char *' lvalue ParmVar 0x5565b274f230 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2782930 <col:30> 'int' 0
|         `-DeclRefExpr 0x5565b2782950 <col:33> 'T' lvalue ParmVar 0x5565b274f2d8 'x' 'T &'
|-FunctionTemplateDecl 0x5565b274f7b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5565b274f4f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b274f718 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5565b274f5a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b274f648 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5565b2782b08 <col:45, line:375:5>
|     `-ReturnStmt 0x5565b2782af8 <line:374:9, col:42>
|       `-CallExpr 0x5565b2782ac0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27829e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2782a60 <col:21> 'const char *' lvalue ParmVar 0x5565b274f5a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2782a80 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5565b2782aa0 <col:41> 'T' lvalue ParmVar 0x5565b274f648 'x' 'T &'
|-FunctionTemplateDecl 0x5565b274fae8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5565b274f820 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b274fa48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5565b274f8d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b274f978 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5565b2782c58 <col:45, line:379:5>
|     `-ReturnStmt 0x5565b2782c48 <line:378:9, col:43>
|       `-CallExpr 0x5565b2782c10 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2782b30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2782bb0 <col:21> 'const char *' lvalue ParmVar 0x5565b274f8d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2782bd0 <col:30> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         `-DeclRefExpr 0x5565b2782bf0 <col:42> 'T' lvalue ParmVar 0x5565b274f978 'x' 'T &'
|-FunctionTemplateDecl 0x5565b274fe18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5565b274fb50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b274fd78 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5565b274fc00 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b274fca8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5565b2782e58 <col:46, line:383:5>
|     `-ReturnStmt 0x5565b2782e48 <line:382:9, col:55>
|       `-CallExpr 0x5565b2782e10 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2782c80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2782d00 <col:21> 'const char *' lvalue ParmVar 0x5565b274fc00 'keyword' 'const char *'
|         |-BinaryOperator 0x5565b2782dd0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5565b2782d80 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565b2782d60 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565b2782db8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565b2782d98 <col:42> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5565b2782df0 <col:54> 'T' lvalue ParmVar 0x5565b274fca8 'x' 'T &'
|-FunctionTemplateDecl 0x5565b2750218 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5565b274fe80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b2750178 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5565b274ff30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b274ffb0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2750058 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5565b2782f98 <col:54, line:388:5>
|     |-CallExpr 0x5565b2782f20 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2782e70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5565b2782eb0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5565b2782ec0 <col:30> 'const char *' lvalue ParmVar 0x5565b274ff30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b2782ee0 <col:39> 'int' lvalue ParmVar 0x5565b274ffb0 'flags' 'int'
|     | `-DeclRefExpr 0x5565b2782f00 <col:46> 'T' lvalue ParmVar 0x5565b2750058 'x' 'T &'
|     `-ReturnStmt 0x5565b2782f88 <line:387:9, col:17>
|       `-UnaryOperator 0x5565b2782f70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2782f60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b27506c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5565b2750288 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b2750308 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565b2750628 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5565b27503c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2750468 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5565b2750508 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b2783108 <col:74, line:403:5>
|     `-ReturnStmt 0x5565b27830f8 <line:402:9, col:56>
|       `-CallExpr 0x5565b27830b8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2782fc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783038 <col:28> 'const char *' lvalue ParmVar 0x5565b27503c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2783058 <col:37> 'int' 0
|         |-DeclRefExpr 0x5565b2783078 <col:40> 'T' lvalue ParmVar 0x5565b2750468 'x' 'T &'
|         `-DeclRefExpr 0x5565b2783098 <col:43> 'const V' lvalue ParmVar 0x5565b2750508 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5565b2750b38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5565b2750738 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b27507b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565b2750a98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5565b2750878 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2750918 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5565b27509b8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b2783270 <col:76, line:407:5>
|     `-ReturnStmt 0x5565b2783260 <line:406:9, col:65>
|       `-CallExpr 0x5565b2783220 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2783130 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b27831a0 <col:28> 'const char *' lvalue ParmVar 0x5565b2750878 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b27831c0 <col:37> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         |-DeclRefExpr 0x5565b27831e0 <col:49> 'T' lvalue ParmVar 0x5565b2750918 'x' 'T &'
|         `-DeclRefExpr 0x5565b2783200 <col:52> 'const V' lvalue ParmVar 0x5565b27509b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5565b2751088 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5565b2750ba8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b2750c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565b2750fe8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5565b2750ce8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2750d68 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2750e08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5565b2750ea8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b27833d8 <col:85, line:412:5>
|     |-CallExpr 0x5565b2783358 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2783288 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5565b27832c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5565b27832d8 <col:37> 'const char *' lvalue ParmVar 0x5565b2750ce8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b27832f8 <col:46> 'int' lvalue ParmVar 0x5565b2750d68 'flags' 'int'
|     | |-DeclRefExpr 0x5565b2783318 <col:53> 'T' lvalue ParmVar 0x5565b2750e08 'x' 'T &'
|     | `-DeclRefExpr 0x5565b2783338 <col:56> 'const V' lvalue ParmVar 0x5565b2750ea8 'default_value' 'const V &'
|     `-ReturnStmt 0x5565b27833c8 <line:411:9, col:17>
|       `-UnaryOperator 0x5565b27833b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b27833a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b2751518 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5565b2751100 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2751178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b2751478 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b2751238 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27512b0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2751358 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5565b2783558 <col:53, line:425:5>
|     `-ReturnStmt 0x5565b2783548 <line:424:9, col:42>
|       `-CallExpr 0x5565b2783508 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2783408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783488 <col:21> 'const char *' lvalue ParmVar 0x5565b2751238 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b27834a8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5565b27834c8 <col:33> 'P' lvalue ParmVar 0x5565b27512b0 'parser' 'P'
|         `-DeclRefExpr 0x5565b27834e8 <col:41> 'T' lvalue ParmVar 0x5565b2751358 'x' 'T &'
|-FunctionTemplateDecl 0x5565b2751968 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5565b2751588 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2751608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b27518c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b27516c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2751740 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27517e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5565b27836d0 <col:55, line:429:5>
|     `-ReturnStmt 0x5565b27836c0 <line:428:9, col:50>
|       `-CallExpr 0x5565b2783680 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2783580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783600 <col:21> 'const char *' lvalue ParmVar 0x5565b27516c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2783620 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5565b2783640 <col:41> 'P' lvalue ParmVar 0x5565b2751740 'parser' 'P'
|         `-DeclRefExpr 0x5565b2783660 <col:49> 'T' lvalue ParmVar 0x5565b27517e8 'x' 'T &'
|-FunctionTemplateDecl 0x5565b2751db8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5565b27519d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2751a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b2751d18 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b2751b18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2751b90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2751c38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5565b2783848 <col:55, line:433:5>
|     `-ReturnStmt 0x5565b2783838 <line:432:9, col:51>
|       `-CallExpr 0x5565b27837f8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27836f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783778 <col:21> 'const char *' lvalue ParmVar 0x5565b2751b18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2783798 <col:30> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         |-DeclRefExpr 0x5565b27837b8 <col:42> 'P' lvalue ParmVar 0x5565b2751b90 'parser' 'P'
|         `-DeclRefExpr 0x5565b27837d8 <col:50> 'T' lvalue ParmVar 0x5565b2751c38 'x' 'T &'
|-FunctionTemplateDecl 0x5565b2752208 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5565b2751e28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2751ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5565b2752168 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5565b2751f68 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5565b2751fe0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5565b2752088 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5565b2783a70 <col:56, line:437:5>
| |   `-ReturnStmt 0x5565b2783a60 <line:436:9, col:63>
| |     `-CallExpr 0x5565b2783a20 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5565b2783870 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5565b27838f0 <col:21> 'const char *' lvalue ParmVar 0x5565b2751f68 'keyword' 'const char *'
| |       |-BinaryOperator 0x5565b27839c0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5565b2783970 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5565b2783950 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5565b27839a8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5565b2783988 <col:42> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5565b27839e0 <col:54> 'P' lvalue ParmVar 0x5565b2751fe0 'parser' 'P'
| |       `-DeclRefExpr 0x5565b2783a00 <col:62> 'T' lvalue ParmVar 0x5565b2752088 'x' 'T &'
| `-CXXMethodDecl 0x5565b27c4b08 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
|   |-TemplateArgument type 'EtherAddressArg'
|   |-TemplateArgument type 'unsigned char [6]'
|   |-ParmVarDecl 0x5565b27c4848 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5565b27c48e8 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
|   `-ParmVarDecl 0x5565b27c49e8 <col:50, col:53> col:53 x 'unsigned char &[6]'
|-FunctionTemplateDecl 0x5565b2752738 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5565b2752278 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b27522f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b2752698 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565b27523b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2752438 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5565b27524b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2752558 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5565b2783bd8 <col:64, line:442:5>
|     |-CallExpr 0x5565b2783b58 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2783a88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5565b2783ac8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5565b2783ad8 <col:30> 'const char *' lvalue ParmVar 0x5565b27523b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b2783af8 <col:39> 'int' lvalue ParmVar 0x5565b2752438 'flags' 'int'
|     | |-DeclRefExpr 0x5565b2783b18 <col:46> 'P' lvalue ParmVar 0x5565b27524b0 'parser' 'P'
|     | `-DeclRefExpr 0x5565b2783b38 <col:54> 'T' lvalue ParmVar 0x5565b2752558 'x' 'T &'
|     `-ReturnStmt 0x5565b2783bc8 <line:441:9, col:17>
|       `-UnaryOperator 0x5565b2783bb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2783ba0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b27563b0 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5565b27527b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2752828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5565b27528a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5565b2756310 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5565b2752970 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27529e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2752a88 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5565b2752b58 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b2783d70 <col:84, line:458:5>
|     `-ReturnStmt 0x5565b2783d60 <line:457:9, col:64>
|       `-CallExpr 0x5565b2783d18 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2783c08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783c78 <col:28> 'const char *' lvalue ParmVar 0x5565b2752970 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2783c98 <col:37> 'int' 0
|         |-DeclRefExpr 0x5565b2783cb8 <col:40> 'P' lvalue ParmVar 0x5565b27529e8 'parser' 'P'
|         |-DeclRefExpr 0x5565b2783cd8 <col:48> 'T' lvalue ParmVar 0x5565b2752a88 'x' 'T &'
|         `-DeclRefExpr 0x5565b2783cf8 <col:51> 'const V' lvalue ParmVar 0x5565b2752b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5565b2756938 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5565b2756428 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b27564a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5565b2756528 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5565b2756898 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5565b27565f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2756668 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2756708 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5565b27567a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b2783f00 <col:86, line:462:5>
|     `-ReturnStmt 0x5565b2783ef0 <line:461:9, col:73>
|       `-CallExpr 0x5565b2783ea8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2783d98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2783e08 <col:28> 'const char *' lvalue ParmVar 0x5565b27565f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2783e28 <col:37> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         |-DeclRefExpr 0x5565b2783e48 <col:49> 'P' lvalue ParmVar 0x5565b2756668 'parser' 'P'
|         |-DeclRefExpr 0x5565b2783e68 <col:57> 'T' lvalue ParmVar 0x5565b2756708 'x' 'T &'
|         `-DeclRefExpr 0x5565b2783e88 <col:60> 'const V' lvalue ParmVar 0x5565b27567a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5565b2756f98 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5565b27569b0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2756a28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5565b2756aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5565b2756ef8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5565b2756b70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2756bf0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2756c68 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2756d08 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5565b2756da8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5565b2784090 <col:95, line:467:5>
|     |-CallExpr 0x5565b2784008 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2783f18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5565b2783f58 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5565b2783f68 <col:37> 'const char *' lvalue ParmVar 0x5565b2756b70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b2783f88 <col:46> 'int' lvalue ParmVar 0x5565b2756bf0 'flags' 'int'
|     | |-DeclRefExpr 0x5565b2783fa8 <col:53> 'P' lvalue ParmVar 0x5565b2756c68 'parser' 'P'
|     | |-DeclRefExpr 0x5565b2783fc8 <col:61> 'T' lvalue ParmVar 0x5565b2756d08 'x' 'T &'
|     | `-DeclRefExpr 0x5565b2783fe8 <col:64> 'const V' lvalue ParmVar 0x5565b2756da8 'default_value' 'const V &'
|     `-ReturnStmt 0x5565b2784080 <line:466:9, col:17>
|       `-UnaryOperator 0x5565b2784068 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2784058 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b2757578 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5565b2757018 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2757098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b2757118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b27574d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b27571e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2757258 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27572f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565b2757398 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565b2784238 <col:63, line:481:5>
|     `-ReturnStmt 0x5565b2784228 <line:480:9, col:47>
|       `-CallExpr 0x5565b27841e0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27840c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784140 <col:21> 'const char *' lvalue ParmVar 0x5565b27571e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2784160 <col:30> 'int' 0
|         |-DeclRefExpr 0x5565b2784180 <col:33> 'P' lvalue ParmVar 0x5565b2757258 'parser' 'P'
|         |-DeclRefExpr 0x5565b27841a0 <col:41> 'T1' lvalue ParmVar 0x5565b27572f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565b27841c0 <col:45> 'T2' lvalue ParmVar 0x5565b2757398 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5565b2757af8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5565b27575f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2757668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b27576e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b2757a58 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b27577b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2757828 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27578c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565b2757968 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565b27843d8 <col:65, line:485:5>
|     `-ReturnStmt 0x5565b27843c8 <line:484:9, col:55>
|       `-CallExpr 0x5565b2784380 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784260 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b27842e0 <col:21> 'const char *' lvalue ParmVar 0x5565b27577b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2784300 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5565b2784320 <col:41> 'P' lvalue ParmVar 0x5565b2757828 'parser' 'P'
|         |-DeclRefExpr 0x5565b2784340 <col:49> 'T1' lvalue ParmVar 0x5565b27578c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565b2784360 <col:53> 'T2' lvalue ParmVar 0x5565b2757968 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5565b2758078 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5565b2757b70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2757be8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b2757c68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b2757fd8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b2757d30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2757da8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2757e48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565b2757ee8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565b2784578 <col:65, line:489:5>
|     `-ReturnStmt 0x5565b2784568 <line:488:9, col:56>
|       `-CallExpr 0x5565b2784520 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784480 <col:21> 'const char *' lvalue ParmVar 0x5565b2757d30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b27844a0 <col:30> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         |-DeclRefExpr 0x5565b27844c0 <col:42> 'P' lvalue ParmVar 0x5565b2757da8 'parser' 'P'
|         |-DeclRefExpr 0x5565b27844e0 <col:50> 'T1' lvalue ParmVar 0x5565b2757e48 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565b2784500 <col:54> 'T2' lvalue ParmVar 0x5565b2757ee8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5565b27585f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5565b27580f0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2758168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b27581e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b2758558 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b27582b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2758328 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27583c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565b2758468 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565b27847c8 <col:66, line:493:5>
|     `-ReturnStmt 0x5565b27847b8 <line:492:9, col:68>
|       `-CallExpr 0x5565b2784770 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27845a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784620 <col:21> 'const char *' lvalue ParmVar 0x5565b27582b0 'keyword' 'const char *'
|         |-BinaryOperator 0x5565b27846f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5565b27846a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565b2784680 <col:30> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565b27846d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565b27846b8 <col:42> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5565b2784710 <col:54> 'P' lvalue ParmVar 0x5565b2758328 'parser' 'P'
|         |-DeclRefExpr 0x5565b2784730 <col:62> 'T1' lvalue ParmVar 0x5565b27583c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5565b2784750 <col:66> 'T2' lvalue ParmVar 0x5565b2758468 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5565b2758c58 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5565b2758670 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b27586e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b2758768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b2758bb8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b2758830 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27588b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2758928 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27589c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5565b2758a68 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5565b2784958 <col:74, line:498:5>
|     |-CallExpr 0x5565b27848d0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b27847e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5565b2784820 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5565b2784830 <col:30> 'const char *' lvalue ParmVar 0x5565b2758830 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b2784850 <col:39> 'int' lvalue ParmVar 0x5565b27588b0 'flags' 'int'
|     | |-DeclRefExpr 0x5565b2784870 <col:46> 'P' lvalue ParmVar 0x5565b2758928 'parser' 'P'
|     | |-DeclRefExpr 0x5565b2784890 <col:54> 'T1' lvalue ParmVar 0x5565b27589c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5565b27848b0 <col:58> 'T2' lvalue ParmVar 0x5565b2758a68 'x2' 'T2 &'
|     `-ReturnStmt 0x5565b2784948 <line:497:9, col:17>
|       `-UnaryOperator 0x5565b2784930 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2784920 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b2758fb8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5565b2758cd8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2758f18 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565b2758d90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2758e08 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5565b2784aa0 <col:52, line:509:5>
|     `-ReturnStmt 0x5565b2784a90 <line:508:9, col:44>
|       `-CallExpr 0x5565b2784a58 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784988 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b27849f8 <col:26> 'const char *' lvalue ParmVar 0x5565b2758d90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2784a18 <col:35> 'int' 0
|         `-DeclRefExpr 0x5565b2784a38 <col:38> 'P' lvalue ParmVar 0x5565b2758e08 'parser' 'P'
|-FunctionTemplateDecl 0x5565b27592b8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5565b2759020 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2759218 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565b27590d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2759148 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5565b2784be0 <col:54, line:513:5>
|     `-ReturnStmt 0x5565b2784bd0 <line:512:9, col:52>
|       `-CallExpr 0x5565b2784b98 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784b38 <col:26> 'const char *' lvalue ParmVar 0x5565b27590d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2784b58 <col:35> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5565b2784b78 <col:46> 'P' lvalue ParmVar 0x5565b2759148 'parser' 'P'
|-FunctionTemplateDecl 0x5565b27595b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5565b2759320 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2759518 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565b27593d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2759448 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5565b2784d20 <col:54, line:517:5>
|     `-ReturnStmt 0x5565b2784d10 <line:516:9, col:53>
|       `-CallExpr 0x5565b2784cd8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784c08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784c78 <col:26> 'const char *' lvalue ParmVar 0x5565b27593d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2784c98 <col:35> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int'
|         `-DeclRefExpr 0x5565b2784cb8 <col:47> 'P' lvalue ParmVar 0x5565b2759448 'parser' 'P'
|-FunctionTemplateDecl 0x5565b27598b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5565b2759620 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2759818 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565b27596d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2759748 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5565b2784f10 <col:55, line:521:5>
|     `-ReturnStmt 0x5565b2784f00 <line:520:9, col:65>
|       `-CallExpr 0x5565b2784ec8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2784d48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2784db8 <col:26> 'const char *' lvalue ParmVar 0x5565b27596d0 'keyword' 'const char *'
|         |-BinaryOperator 0x5565b2784e88 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5565b2784e38 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5565b2784e18 <col:35> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5565b2784e70 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5565b2784e50 <col:47> 'const int' lvalue Var 0x5565b274eeb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5565b2784ea8 <col:59> 'P' lvalue ParmVar 0x5565b2759748 'parser' 'P'
|-FunctionTemplateDecl 0x5565b2759c88 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5565b2759920 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2759be8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5565b27599d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2759a50 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2759ac8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5565b2785050 <col:63, line:526:5>
|     |-CallExpr 0x5565b2784fd8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2784f28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5565b2784f68 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5565b2784f78 <col:35> 'const char *' lvalue ParmVar 0x5565b27599d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5565b2784f98 <col:44> 'int' lvalue ParmVar 0x5565b2759a50 'flags' 'int'
|     | `-DeclRefExpr 0x5565b2784fb8 <col:51> 'P' lvalue ParmVar 0x5565b2759ac8 'parser' 'P'
|     `-ReturnStmt 0x5565b2785040 <line:525:9, col:17>
|       `-UnaryOperator 0x5565b2785028 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2785018 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b275a0d8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5565b2759cf8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2759d78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275a038 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b2759e38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2759eb0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2759f58 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5565b27851a8 <col:58, line:541:5>
|     `-ReturnStmt 0x5565b2785198 <line:540:9, col:39>
|       `-CallExpr 0x5565b2785160 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785100 <col:21> 'const char *' lvalue ParmVar 0x5565b2759e38 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2785120 <col:30> 'P' lvalue ParmVar 0x5565b2759eb0 'parser' 'P'
|         `-DeclRefExpr 0x5565b2785140 <col:38> 'T' lvalue ParmVar 0x5565b2759f58 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275a528 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5565b275a148 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275a1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275a488 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b275a288 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275a300 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275a3a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5565b27852e0 <col:60, line:545:5>
|     `-ReturnStmt 0x5565b27852d0 <line:544:9, col:41>
|       `-CallExpr 0x5565b2785298 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27851d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785238 <col:23> 'const char *' lvalue ParmVar 0x5565b275a288 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2785258 <col:32> 'P' lvalue ParmVar 0x5565b275a300 'parser' 'P'
|         `-DeclRefExpr 0x5565b2785278 <col:40> 'T' lvalue ParmVar 0x5565b275a3a8 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275a978 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5565b275a598 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275a618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275a8d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b275a6d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275a750 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275a7f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5565b2785418 <col:60, line:549:5>
|     `-ReturnStmt 0x5565b2785408 <line:548:9, col:41>
|       `-CallExpr 0x5565b27853d0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785308 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785370 <col:23> 'const char *' lvalue ParmVar 0x5565b275a6d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2785390 <col:32> 'P' lvalue ParmVar 0x5565b275a750 'parser' 'P'
|         `-DeclRefExpr 0x5565b27853b0 <col:40> 'T' lvalue ParmVar 0x5565b275a7f8 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275adc8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5565b275a9e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275aa68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275ad28 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b275ab28 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275aba0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275ac48 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5565b2785550 <col:61, line:553:5>
|     `-ReturnStmt 0x5565b2785540 <line:552:9, col:42>
|       `-CallExpr 0x5565b2785508 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785440 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b27854a8 <col:24> 'const char *' lvalue ParmVar 0x5565b275ab28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b27854c8 <col:33> 'P' lvalue ParmVar 0x5565b275aba0 'parser' 'P'
|         `-DeclRefExpr 0x5565b27854e8 <col:41> 'T' lvalue ParmVar 0x5565b275ac48 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275b2a8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5565b275ae38 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275aeb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275b208 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565b275af78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275aff8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5565b275b070 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275b118 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5565b27856c8 <col:69, line:557:5>
|     `-ReturnStmt 0x5565b27856b8 <line:556:9, col:46>
|       `-CallExpr 0x5565b2785678 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b27855f8 <col:21> 'const char *' lvalue ParmVar 0x5565b275af78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2785618 <col:30> 'int' lvalue ParmVar 0x5565b275aff8 'flags' 'int'
|         |-DeclRefExpr 0x5565b2785638 <col:37> 'P' lvalue ParmVar 0x5565b275b070 'parser' 'P'
|         `-DeclRefExpr 0x5565b2785658 <col:45> 'T' lvalue ParmVar 0x5565b275b118 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275b5b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5565b275b320 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b275b518 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5565b275b3d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275b448 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5565b2785808 <col:56, line:571:5>
|     `-ReturnStmt 0x5565b27857f8 <line:570:9, col:48>
|       `-CallExpr 0x5565b27857c0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27856f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785760 <col:30> 'const char *' lvalue ParmVar 0x5565b275b3d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2785780 <col:39> 'int' 0
|         `-DeclRefExpr 0x5565b27857a0 <col:42> 'P' lvalue ParmVar 0x5565b275b448 'parser' 'P'
|-FunctionTemplateDecl 0x5565b275b948 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5565b275b620 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b275b8a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5565b275b6d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275b750 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5565b275b7c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5565b27859d8 <col:67, line:576:5>
|     |-CallExpr 0x5565b2785960 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2785820 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5565b2785860 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5565b2785870 <col:39> 'const char *' lvalue ParmVar 0x5565b275b6d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565b2785920 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565b27858d0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565b2785890 <col:48> 'int' lvalue ParmVar 0x5565b275b750 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565b2785908 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565b27858e8 <col:56> 'const int' lvalue Var 0x5565b274f0a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5565b2785940 <col:68> 'P' lvalue ParmVar 0x5565b275b7c8 'parser' 'P'
|     `-ReturnStmt 0x5565b27859c8 <line:575:9, col:17>
|       `-UnaryOperator 0x5565b27859b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b27859a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b275bd98 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5565b275b9b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275ba38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275bcf8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5565b275baf8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275bb70 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275bc18 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5565b2785b48 <col:62, line:592:5>
|     `-ReturnStmt 0x5565b2785b38 <line:591:9, col:51>
|       `-CallExpr 0x5565b2785af8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785a78 <col:30> 'const char *' lvalue ParmVar 0x5565b275baf8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2785a98 <col:39> 'int' 0
|         |-DeclRefExpr 0x5565b2785ab8 <col:42> 'P' lvalue ParmVar 0x5565b275bb70 'parser' 'P'
|         `-DeclRefExpr 0x5565b2785ad8 <col:50> 'T' lvalue ParmVar 0x5565b275bc18 'x' 'T &'
|-FunctionTemplateDecl 0x5565b275c278 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5565b275be08 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275be88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275c1d8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565b275bf48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275bfc8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5565b275c040 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275c0e8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5565b2785d40 <col:73, line:597:5>
|     |-CallExpr 0x5565b2785cc0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b2785b60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5565b2785ba0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5565b2785bb0 <col:39> 'const char *' lvalue ParmVar 0x5565b275bf48 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565b2785c60 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565b2785c10 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565b2785bd0 <col:48> 'int' lvalue ParmVar 0x5565b275bfc8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565b2785c48 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565b2785c28 <col:56> 'const int' lvalue Var 0x5565b274f0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5565b2785c80 <col:68> 'P' lvalue ParmVar 0x5565b275c040 'parser' 'P'
|     | `-DeclRefExpr 0x5565b2785ca0 <col:76> 'T' lvalue ParmVar 0x5565b275c0e8 'x' 'T &'
|     `-ReturnStmt 0x5565b2785d30 <line:596:9, col:17>
|       `-UnaryOperator 0x5565b2785d18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2785d08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b275c828 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5565b275c2f0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275c368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275c788 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5565b275c428 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275c4a0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275c660 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565b2785eb0 <col:65, line:614:5>
|     `-ReturnStmt 0x5565b2785ea0 <line:613:9, col:46>
|       `-CallExpr 0x5565b2785e60 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785d70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785de0 <col:25> 'const char *' lvalue ParmVar 0x5565b275c428 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2785e00 <col:34> 'int' 0
|         |-DeclRefExpr 0x5565b2785e20 <col:37> 'P' lvalue ParmVar 0x5565b275c4a0 'parser' 'P'
|         `-DeclRefExpr 0x5565b2785e40 <col:45> 'Vector<T>' lvalue ParmVar 0x5565b275c660 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5565b275cc58 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5565b275c898 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b275cbb8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5565b275c950 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275caa0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565b27860d0 <col:55, line:618:5>
|     `-ReturnStmt 0x5565b27860c0 <line:617:9, col:55>
|       `-CallExpr 0x5565b2786080 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b2785ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2785f48 <col:25> 'const char *' lvalue ParmVar 0x5565b275c950 'keyword' 'const char *'
|         |-IntegerLiteral 0x5565b2785f68 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5565b2786040 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5565b2786060 <col:54> 'Vector<T>' lvalue ParmVar 0x5565b275caa0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5565b275d228 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5565b275ccc0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275cd38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275d188 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5565b275cdf8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275ce78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565b275cef0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5565b275d040 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565b27862c8 <col:76, line:623:5>
|     |-CallExpr 0x5565b2786248 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5565b27860e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5565b2786128 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5565b2786138 <col:34> 'const char *' lvalue ParmVar 0x5565b275cdf8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5565b27861e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5565b2786198 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5565b2786158 <col:43> 'int' lvalue ParmVar 0x5565b275ce78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5565b27861d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5565b27861b0 <col:51> 'const int' lvalue Var 0x5565b274f0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5565b2786208 <col:63> 'P' lvalue ParmVar 0x5565b275cef0 'parser' 'P'
|     | `-DeclRefExpr 0x5565b2786228 <col:71> 'Vector<T>' lvalue ParmVar 0x5565b275d040 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5565b27862b8 <line:622:9, col:17>
|       `-UnaryOperator 0x5565b27862a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b2786290 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b275d768 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5565b275d2a0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b275d318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b275d6c8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5565b275d3d8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b275d458 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565b275d5a0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5565b2786530 <col:66, line:627:5>
|     `-ReturnStmt 0x5565b2786520 <line:626:9, col:59>
|       `-CallExpr 0x5565b27864e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5565b27862f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5565b2786368 <col:25> 'const char *' lvalue ParmVar 0x5565b275d3d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5565b2786388 <col:34> 'int' lvalue ParmVar 0x5565b275d458 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5565b27864a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5565b27864c0 <col:58> 'Vector<T>' lvalue ParmVar 0x5565b275d5a0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5565b275d7f8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5565b27865b0 <col:25, line:633:5>
|   `-ReturnStmt 0x5565b27865a0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5565b2786588 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5565b2786558 <col:16> 'const bool' lvalue ->_status 0x5565b2768fb8
|         `-CXXThisExpr 0x5565b2786548 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5565b275d978 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5565b275d8b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5565b2786698 <col:27, line:639:5>
|   |-BinaryOperator 0x5565b2786640 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565b27865c8 <col:9> 'bool' lvalue ParmVar 0x5565b275d8b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565b2786628 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565b27865f8 <col:13> 'bool' lvalue ->_status 0x5565b2768fb8
|   |     `-CXXThisExpr 0x5565b27865e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5565b2786688 <line:638:9, col:17>
|     `-UnaryOperator 0x5565b2786670 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2786660 <col:17> 'Args *' this
|-CXXMethodDecl 0x5565b275daf8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5565b275da38 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5565b2786788 <col:39, line:644:5>
|   |-BinaryOperator 0x5565b2786730 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565b27866b8 <col:9> 'bool' lvalue ParmVar 0x5565b275da38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565b2786718 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565b27866e8 <col:13> 'const bool' lvalue ->_status 0x5565b2768fb8
|   |     `-CXXThisExpr 0x5565b27866d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5565b2786778 <line:643:9, col:17>
|     `-UnaryOperator 0x5565b2786760 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2786750 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5565b275dbc0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5565b2786830 <col:30, line:651:5>
|   `-ReturnStmt 0x5565b2786820 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5565b2786808 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5565b27867d8 <col:16> 'bool' lvalue ->_read_status 0x5565b2744520
|         `-ImplicitCastExpr 0x5565b27867b8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5565b27867a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5565b275dd08 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5565b275dc78 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5565b2786938 <col:32, line:658:5>
|   |-BinaryOperator 0x5565b27868e0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565b2786848 <col:9> 'bool' lvalue ParmVar 0x5565b275dc78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565b27868c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565b2786898 <col:13> 'bool' lvalue ->_read_status 0x5565b2744520
|   |     `-ImplicitCastExpr 0x5565b2786878 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5565b2786868 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5565b2786928 <line:657:9, col:17>
|     `-UnaryOperator 0x5565b2786910 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2786900 <col:17> 'Args *' this
|-CXXMethodDecl 0x5565b275de58 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5565b275ddc8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5565b2786a48 <col:44, line:663:5>
|   |-BinaryOperator 0x5565b27869f0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5565b2786958 <col:9> 'bool' lvalue ParmVar 0x5565b275ddc8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5565b27869d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5565b27869a8 <col:13> 'bool' lvalue ->_read_status 0x5565b2744520
|   |     `-ImplicitCastExpr 0x5565b2786988 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5565b2786978 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5565b2786a38 <line:662:9, col:17>
|     `-UnaryOperator 0x5565b2786a20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b2786a10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5565b275df20 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5565b275dfe8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5565b275e0b0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5565b275e178 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5565b2763e08 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5565b275e218 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b2763d68 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5565b2763c70 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5565b2786e00 <col:19, line:706:5>
|     `-IfStmt 0x5565b2786dd8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5565b2786b48 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5565b2786d08 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5565b2786cd8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5565b2786c98 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5565b2786ba0 <col:42> '<bound member function type>' ->simple_slot 0x5565b2781880
|       |     | `-CXXThisExpr 0x5565b2786b90 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5565b2786c38 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5565b2786bf0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5565b24dda18
|       |     | `-DeclRefExpr 0x5565b2786bd0 <col:55> 'T' lvalue ParmVar 0x5565b2763c70 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5565b2786c78 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5565b2786dc8 <line:705:13, col:34>
|         `-CallExpr 0x5565b2786da0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5565b2786d28 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5565b2786d80 <col:33> 'T' lvalue ParmVar 0x5565b2763c70 'x' 'T &'
|-FunctionTemplateDecl 0x5565b27640d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5565b2763e68 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b2764038 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5565b2763f48 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5565b27871e0 <col:31, line:717:5>
|     |-DeclStmt 0x5565b2786f40 <line:713:9, col:23>
|     | `-VarDecl 0x5565b2786e28 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5565b2786f18 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5565b2786ea0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5565b2786ef8 <col:21> 'T' lvalue ParmVar 0x5565b2763f48 'x' 'T &'
|     |-IfStmt 0x5565b2787190 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5565b2787038 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5565b2787170 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5565b2787110 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5565b27870a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|     |   | `-DeclRefExpr 0x5565b2787080 <col:14> 'T *' lvalue Var 0x5565b2786e28 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5565b2787150 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5565b27871c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5565b27871a8 <col:16> 'T *' lvalue Var 0x5565b2786e28 's' 'T *'
|-FunctionTemplateDecl 0x5565b27644e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5565b2764138 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b27641b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565b2764448 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5565b2764298 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5565b2764338 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5565b27874f0 <col:37, line:726:5>
|     |-IfStmt 0x5565b2787480 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5565b27874a0 <line:723:13, col:26>
|     | | `-VarDecl 0x5565b2787248 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5565b2787338 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5565b27872c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5565b2787318 <col:25> 'T' lvalue ParmVar 0x5565b2764298 'x' 'T &'
|     | |-DeclRefExpr 0x5565b2787360 <col:16> 'T *' lvalue Var 0x5565b2787248 's' 'T *'
|     | `-BinaryOperator 0x5565b2787460 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5565b2787410 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5565b27873a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|     |   | `-DeclRefExpr 0x5565b2787380 <col:14> 'T *' lvalue Var 0x5565b2787248 's' 'T *'
|     |   `-DeclRefExpr 0x5565b2787440 <col:18> 'const V' lvalue ParmVar 0x5565b2764338 'value' 'const V &'
|     `-ReturnStmt 0x5565b27874e0 <line:725:9, col:17>
|       `-UnaryOperator 0x5565b27874c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5565b27874b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5565b27648e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5565b2764550 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5565b2764848 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5565b2764600 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2764680 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2764728 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5565b2788310 <col:65, line:737:5>
|     |-DeclStmt 0x5565b2787588 <line:732:9, col:26>
|     | `-VarDecl 0x5565b2787520 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565b27882d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5565b27882f8 <line:733:13, col:58>
|       | `-VarDecl 0x5565b27875b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565b2787790 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565b2787760 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565b2787748 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565b2787728 <col:26, col:58> 'String' (CXXTemporary 0x5565b2787728)
|       |           `-CXXMemberCallExpr 0x5565b27876b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565b2787628 <col:26> '<bound member function type>' ->find 0x5565b2780e98
|       |             | `-CXXThisExpr 0x5565b2787618 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565b27876f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b2787658 <col:31> 'const char *' lvalue ParmVar 0x5565b2764600 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565b2787708 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b2787678 <col:40> 'int' lvalue ParmVar 0x5565b2764680 'flags' 'int'
|       |             `-DeclRefExpr 0x5565b2787698 <col:47> 'Args::Slot *' lvalue Var 0x5565b2787520 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565b2787848 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565b2787830 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565b2787810 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565b27877e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |       `-ImplicitCastExpr 0x5565b27877c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565b27877a8 <col:20> 'String' lvalue Var 0x5565b27875b0 'str' 'String'
|       `-CompoundStmt 0x5565b27882b8 <col:61, line:736:9>
|         |-DeclStmt 0x5565b2787d00 <line:734:13, col:76>
|         | `-VarDecl 0x5565b2787898 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5565b2787cd0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565b2787c40 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565b2787c88 <col:60> 'T' lvalue ParmVar 0x5565b2764728 'variable' 'T &'
|         |     `-UnaryOperator 0x5565b2787cb8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565b2787ca8 <col:71> 'Args *' this
|         `-CallExpr 0x5565b2788288 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5565b2787d28 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|           | `-CXXThisExpr 0x5565b2787d18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565b2788248 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5565b2787d58 <col:23> 'T *' lvalue Var 0x5565b2787898 's' 'T *'
|           | `-CallExpr 0x5565b2788208 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565b2787fe0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5565b27880e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5565b2788100 <col:86> 'String' lvalue Var 0x5565b27875b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565b27881b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565b2788140 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|           |   | `-DeclRefExpr 0x5565b2788120 <col:92> 'T *' lvalue Var 0x5565b2787898 's' 'T *'
|           |   `-UnaryOperator 0x5565b27881f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565b27881e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5565b2788268 <col:103> 'Args::Slot *' lvalue Var 0x5565b2787520 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b2764e38 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5565b2764958 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b27649d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5565b2764d98 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5565b2764a98 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2764b18 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2764bb8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5565b2764c58 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5565b278ba70 <col:88, line:745:5>
|     |-DeclStmt 0x5565b27883a8 <line:741:9, col:26>
|     | `-VarDecl 0x5565b2788340 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565b278ae80 <line:742:9, col:55>
|     | `-VarDecl 0x5565b27883d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5565b278ae68 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5565b278ae38 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5565b278ae20 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5565b278ae00 <col:22, col:54> 'String' (CXXTemporary 0x5565b278ae00)
|     |           `-CXXMemberCallExpr 0x5565b278ad90 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5565b2788448 <col:22> '<bound member function type>' ->find 0x5565b2780e98
|     |             | `-CXXThisExpr 0x5565b2788438 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5565b278adc8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565b278ad30 <col:27> 'const char *' lvalue ParmVar 0x5565b2764a98 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5565b278ade0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565b278ad50 <col:36> 'int' lvalue ParmVar 0x5565b2764b18 'flags' 'int'
|     |             `-DeclRefExpr 0x5565b278ad70 <col:43> 'Args::Slot *' lvalue Var 0x5565b2788340 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5565b278b260 <line:743:9, col:72>
|     | `-VarDecl 0x5565b278aed8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565b278b230 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565b278b1a0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5565b278b1e8 <col:56> 'T' lvalue ParmVar 0x5565b2764bb8 'variable' 'T &'
|     |     `-UnaryOperator 0x5565b278b218 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565b278b208 <col:67> 'Args *' this
|     `-CallExpr 0x5565b278ba40 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5565b278b288 <col:9> '<bound member function type>' ->postparse 0x5565b27810a8
|       | `-CXXThisExpr 0x5565b278b278 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5565b278ba00 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5565b278b2b8 <col:19> 'T *' lvalue Var 0x5565b278aed8 's' 'T *'
|       | `-ParenExpr 0x5565b278b9e0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5565b278b9b0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5565b278b998 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5565b278b980 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5565b278b960 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5565b278b930 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |     |       `-ImplicitCastExpr 0x5565b278b918 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5565b278b2d8 <col:25> 'String' lvalue Var 0x5565b27883d0 'str' 'String'
|       |     |-CallExpr 0x5565b278b788 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5565b278b560 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5565b278b660 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5565b278b680 <col:89> 'String' lvalue Var 0x5565b27883d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5565b278b730 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5565b278b6c0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|       |     | | `-DeclRefExpr 0x5565b278b6a0 <col:95> 'T *' lvalue Var 0x5565b278aed8 's' 'T *'
|       |     | `-UnaryOperator 0x5565b278b770 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5565b278b760 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5565b278b8f8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5565b278b8d8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5565b278b8a8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5565b278b858 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5565b278b7e8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|       |         | | `-DeclRefExpr 0x5565b278b7c8 <col:109> 'T *' lvalue Var 0x5565b278aed8 's' 'T *'
|       |         | `-DeclRefExpr 0x5565b278b888 <col:113> 'const V' lvalue ParmVar 0x5565b2764c58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5565b278b8c8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5565b278ba20 <col:128> 'Args::Slot *' lvalue Var 0x5565b2788340 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b2765368 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5565b2764eb0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2764f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b27652c8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565b2764fe8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2765068 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565b27650e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2765188 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5565b278c668 <col:75, line:754:5>
|     |-DeclStmt 0x5565b278bb18 <line:749:9, col:26>
|     | `-VarDecl 0x5565b278bab0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565b278c630 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5565b278c650 <line:750:13, col:58>
|       | `-VarDecl 0x5565b278bb40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565b278bd20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565b278bcf0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565b278bcd8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565b278bcb8 <col:26, col:58> 'String' (CXXTemporary 0x5565b278bcb8)
|       |           `-CXXMemberCallExpr 0x5565b278bc48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565b278bbb8 <col:26> '<bound member function type>' ->find 0x5565b2780e98
|       |             | `-CXXThisExpr 0x5565b278bba8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565b278bc80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278bbe8 <col:31> 'const char *' lvalue ParmVar 0x5565b2764fe8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565b278bc98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278bc08 <col:40> 'int' lvalue ParmVar 0x5565b2765068 'flags' 'int'
|       |             `-DeclRefExpr 0x5565b278bc28 <col:47> 'Args::Slot *' lvalue Var 0x5565b278bab0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565b278bdd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565b278bdc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565b278bda0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565b278bd70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |       `-ImplicitCastExpr 0x5565b278bd58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565b278bd38 <col:20> 'String' lvalue Var 0x5565b278bb40 'str' 'String'
|       `-CompoundStmt 0x5565b278c610 <col:61, line:753:9>
|         |-DeclStmt 0x5565b278c1b0 <line:751:13, col:63>
|         | `-VarDecl 0x5565b278be28 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5565b278c180 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565b278c0f0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565b278c138 <col:47> 'T' lvalue ParmVar 0x5565b2765188 'variable' 'T &'
|         |     `-UnaryOperator 0x5565b278c168 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565b278c158 <col:58> 'Args *' this
|         `-CallExpr 0x5565b278c5e0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5565b278c1d8 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|           | `-CXXThisExpr 0x5565b278c1c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565b278c5a0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5565b278c208 <col:23> 'T *' lvalue Var 0x5565b278be28 's' 'T *'
|           | `-CallExpr 0x5565b278c560 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565b278c3f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5565b278c438 <col:56> 'P' lvalue ParmVar 0x5565b27650e0 'parser' 'P'
|           |   |-DeclRefExpr 0x5565b278c458 <col:64> 'String' lvalue Var 0x5565b278bb40 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565b278c508 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565b278c498 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|           |   | `-DeclRefExpr 0x5565b278c478 <col:70> 'T *' lvalue Var 0x5565b278be28 's' 'T *'
|           |   `-UnaryOperator 0x5565b278c548 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565b278c538 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5565b278c5c0 <col:81> 'Args::Slot *' lvalue Var 0x5565b278bab0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b27659c8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5565b27653e0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5565b2765458 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5565b27654d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5565b2765928 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5565b27655a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2765620 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2765698 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2765738 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5565b27657d8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5565b278d3f8 <col:98, line:762:5>
|     |-DeclStmt 0x5565b278c700 <line:758:9, col:26>
|     | `-VarDecl 0x5565b278c698 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565b278c920 <line:759:9, col:55>
|     | `-VarDecl 0x5565b278c728 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5565b278c908 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5565b278c8d8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5565b278c8c0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5565b278c8a0 <col:22, col:54> 'String' (CXXTemporary 0x5565b278c8a0)
|     |           `-CXXMemberCallExpr 0x5565b278c830 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5565b278c7a0 <col:22> '<bound member function type>' ->find 0x5565b2780e98
|     |             | `-CXXThisExpr 0x5565b278c790 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5565b278c868 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565b278c7d0 <col:27> 'const char *' lvalue ParmVar 0x5565b27655a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5565b278c880 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5565b278c7f0 <col:36> 'int' lvalue ParmVar 0x5565b2765620 'flags' 'int'
|     |             `-DeclRefExpr 0x5565b278c810 <col:43> 'Args::Slot *' lvalue Var 0x5565b278c698 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5565b278cd40 <line:760:9, col:59>
|     | `-VarDecl 0x5565b278c978 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565b278cd10 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565b278cc80 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5565b278ccc8 <col:43> 'T' lvalue ParmVar 0x5565b2765738 'variable' 'T &'
|     |     `-UnaryOperator 0x5565b278ccf8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565b278cce8 <col:54> 'Args *' this
|     `-CallExpr 0x5565b278d3c8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5565b278cd68 <col:9> '<bound member function type>' ->postparse 0x5565b27810a8
|       | `-CXXThisExpr 0x5565b278cd58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5565b278d388 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5565b278cd98 <col:19> 'T *' lvalue Var 0x5565b278c978 's' 'T *'
|       | `-ParenExpr 0x5565b278d368 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5565b278d338 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5565b278d320 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5565b278d308 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5565b278d2e8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5565b278d2b8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |     |       `-ImplicitCastExpr 0x5565b278d2a0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5565b278cdb8 <col:25> 'String' lvalue Var 0x5565b278c728 'str' 'String'
|       |     |-CallExpr 0x5565b278d110 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5565b278cfa0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5565b278cfe8 <col:59> 'P' lvalue ParmVar 0x5565b2765698 'parser' 'P'
|       |     | |-DeclRefExpr 0x5565b278d008 <col:67> 'String' lvalue Var 0x5565b278c728 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5565b278d0b8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5565b278d048 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|       |     | | `-DeclRefExpr 0x5565b278d028 <col:73> 'T *' lvalue Var 0x5565b278c978 's' 'T *'
|       |     | `-UnaryOperator 0x5565b278d0f8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5565b278d0e8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5565b278d280 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5565b278d260 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5565b278d230 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5565b278d1e0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5565b278d170 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|       |         | | `-DeclRefExpr 0x5565b278d150 <col:87> 'T *' lvalue Var 0x5565b278c978 's' 'T *'
|       |         | `-DeclRefExpr 0x5565b278d210 <col:91> 'const V' lvalue ParmVar 0x5565b27657d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5565b278d250 <col:98> 'bool' true
|       `-DeclRefExpr 0x5565b278d3a8 <col:106> 'Args::Slot *' lvalue Var 0x5565b278c698 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b2766038 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5565b2765a48 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2765ac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5565b2765b48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5565b2765f98 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5565b2765c10 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2765c90 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2765d08 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2765da8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5565b2765e48 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5565b278e3d8 <col:60, line:773:5>
|     |-DeclStmt 0x5565b278d4a0 <line:767:9, col:26>
|     | `-VarDecl 0x5565b278d438 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565b278e3a0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5565b278e3c0 <line:768:13, col:58>
|       | `-VarDecl 0x5565b278d4c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565b278d6a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565b278d678 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565b278d660 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565b278d640 <col:26, col:58> 'String' (CXXTemporary 0x5565b278d640)
|       |           `-CXXMemberCallExpr 0x5565b278d5d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565b278d540 <col:26> '<bound member function type>' ->find 0x5565b2780e98
|       |             | `-CXXThisExpr 0x5565b278d530 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565b278d608 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278d570 <col:31> 'const char *' lvalue ParmVar 0x5565b2765c10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565b278d620 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278d590 <col:40> 'int' lvalue ParmVar 0x5565b2765c90 'flags' 'int'
|       |             `-DeclRefExpr 0x5565b278d5b0 <col:47> 'Args::Slot *' lvalue Var 0x5565b278d438 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565b278d760 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565b278d748 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565b278d728 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565b278d6f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |       `-ImplicitCastExpr 0x5565b278d6e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565b278d6c0 <col:20> 'String' lvalue Var 0x5565b278d4c8 'str' 'String'
|       `-CompoundStmt 0x5565b278e378 <col:61, line:772:9>
|         |-DeclStmt 0x5565b278daa0 <line:769:13, col:66>
|         | `-VarDecl 0x5565b278d7b8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5565b278da70 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565b278d9e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565b278da28 <col:49> 'T1' lvalue ParmVar 0x5565b2765da8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5565b278da58 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565b278da48 <col:61> 'Args *' this
|         |-DeclStmt 0x5565b278de10 <line:770:13, col:66>
|         | `-VarDecl 0x5565b278db28 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5565b278dde0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5565b278dd50 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5565b278dd98 <col:49> 'T2' lvalue ParmVar 0x5565b2765e48 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5565b278ddc8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5565b278ddb8 <col:61> 'Args *' this
|         `-CallExpr 0x5565b278e348 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5565b278de38 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|           | `-CXXThisExpr 0x5565b278de28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5565b278e308 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5565b278dea8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5565b278de68 <col:23> 'T1 *' lvalue Var 0x5565b278d7b8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5565b278de88 <col:29> 'T2 *' lvalue Var 0x5565b278db28 's2' 'T2 *'
|           | `-CallExpr 0x5565b278e2c0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5565b278e090 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5565b278e0d8 <col:63> 'P' lvalue ParmVar 0x5565b2765d08 'parser' 'P'
|           |   |-DeclRefExpr 0x5565b278e0f8 <col:71> 'String' lvalue Var 0x5565b278d4c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5565b278e1a8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565b278e138 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|           |   | `-DeclRefExpr 0x5565b278e118 <col:77> 'T1 *' lvalue Var 0x5565b278d7b8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5565b278e268 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5565b278e1f8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|           |   | `-DeclRefExpr 0x5565b278e1d8 <col:82> 'T2 *' lvalue Var 0x5565b278db28 's2' 'T2 *'
|           |   `-UnaryOperator 0x5565b278e2a8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5565b278e298 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5565b278e328 <col:94> 'Args::Slot *' lvalue Var 0x5565b278d438 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b2766428 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5565b27660b8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2766388 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5565b2766170 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27661f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2766268 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5565b278e8f0 <col:67, line:780:5>
|     |-DeclStmt 0x5565b278e470 <line:777:9, col:26>
|     | `-VarDecl 0x5565b278e408 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5565b278e8b8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5565b278e8d8 <line:778:13, col:58>
|       | `-VarDecl 0x5565b278e498 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5565b278e678 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5565b278e648 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5565b278e630 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5565b278e610 <col:26, col:58> 'String' (CXXTemporary 0x5565b278e610)
|       |           `-CXXMemberCallExpr 0x5565b278e5a0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5565b278e510 <col:26> '<bound member function type>' ->find 0x5565b2780e98
|       |             | `-CXXThisExpr 0x5565b278e500 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5565b278e5d8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278e540 <col:31> 'const char *' lvalue ParmVar 0x5565b2766170 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5565b278e5f0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5565b278e560 <col:40> 'int' lvalue ParmVar 0x5565b27661f0 'flags' 'int'
|       |             `-DeclRefExpr 0x5565b278e580 <col:47> 'Args::Slot *' lvalue Var 0x5565b278e408 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5565b278e730 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5565b278e718 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5565b278e6f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5565b278e6c8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|       |       `-ImplicitCastExpr 0x5565b278e6b0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5565b278e690 <col:20> 'String' lvalue Var 0x5565b278e498 'str' 'String'
|       `-CallExpr 0x5565b278e888 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5565b278e758 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|         | `-CXXThisExpr 0x5565b278e748 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5565b278e838 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5565b278e7a8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5565b278e788 <col:23> 'P' lvalue ParmVar 0x5565b2766268 'parser' 'P'
|         | |-DeclRefExpr 0x5565b278e7f0 <col:36> 'String' lvalue Var 0x5565b278e498 'str' 'String'
|         | `-UnaryOperator 0x5565b278e820 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5565b278e810 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5565b278e868 <col:49> 'Args::Slot *' lvalue Var 0x5565b278e408 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5565b27667c8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5565b2766498 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5565b2766728 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5565b2766550 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27665d0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2766648 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5565b278f260 <col:71, line:792:5>
|     |-DeclStmt 0x5565b278e988 <line:784:9, col:26>
|     | `-VarDecl 0x5565b278e920 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565b278ea58 <line:785:9, col:29>
|     | `-VarDecl 0x5565b278e9b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565b278ea40 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565b278ea20 <col:28> 'int' 1
|     |-WhileStmt 0x5565b278f110 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5565b278f130 <line:786:16, col:61>
|     | | `-VarDecl 0x5565b278ea80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565b278ec60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565b278ec30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565b278ec18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565b278ebf8 <col:29, col:61> 'String' (CXXTemporary 0x5565b278ebf8)
|     | |           `-CXXMemberCallExpr 0x5565b278eb88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565b278eaf8 <col:29> '<bound member function type>' ->find 0x5565b2780e98
|     | |             | `-CXXThisExpr 0x5565b278eae8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565b278ebc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b278eb28 <col:34> 'const char *' lvalue ParmVar 0x5565b2766550 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565b278ebd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b278eb48 <col:43> 'int' lvalue ParmVar 0x5565b27665d0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565b278eb68 <col:50> 'Args::Slot *' lvalue Var 0x5565b278e920 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565b278ed18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565b278ed00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565b278ece0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565b278ecb0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|     | |       `-ImplicitCastExpr 0x5565b278ec98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565b278ec78 <col:23> 'String' lvalue Var 0x5565b278ea80 'str' 'String'
|     | `-CompoundStmt 0x5565b278f0e8 <col:64, line:790:9>
|     |   |-CallExpr 0x5565b278ee70 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5565b278ed40 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|     |   | | `-CXXThisExpr 0x5565b278ed30 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5565b278ee20 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5565b278ed90 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5565b278ed70 <col:23> 'P' lvalue ParmVar 0x5565b2766648 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5565b278edd8 <col:36> 'String' lvalue Var 0x5565b278ea80 'str' 'String'
|     |   | | `-UnaryOperator 0x5565b278ee08 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5565b278edf8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5565b278ee50 <col:49> 'Args::Slot *' lvalue Var 0x5565b278e920 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5565b278f008 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565b278eea0 <col:13> 'int' lvalue Var 0x5565b278e9b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565b278eff0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565b278efd0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565b278ef38 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565b278ef18 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565b278ef00 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565b278eec0 <col:28> 'int' lvalue Var 0x5565b278e9b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565b278eee0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565b278efb8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565b278ef88 <col:49> 'bool' lvalue ->_read_status 0x5565b2744520
|     |   |         `-ImplicitCastExpr 0x5565b278ef68 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565b278ef58 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565b278f0b8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565b278f028 <col:13> 'int' lvalue ParmVar 0x5565b27665d0 'flags' 'int'
|     |     `-UnaryOperator 0x5565b278f0a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565b278f088 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565b278f068 <col:23> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565b278f240 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565b278f178 <col:9> 'bool' lvalue ->_read_status 0x5565b2744520
|       | `-ImplicitCastExpr 0x5565b278f158 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565b278f148 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565b278f220 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565b278f200 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565b278f1e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565b278f1a8 <col:25> 'int' lvalue Var 0x5565b278e9b8 'read_status' 'int'
|           `-IntegerLiteral 0x5565b278f1c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5565b2766ca8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5565b2766838 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b27668b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b2766c08 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5565b2766978 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b27669f8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2766a70 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5565b2766b18 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5565b27901f0 <col:84, line:805:5>
|     |-DeclStmt 0x5565b278f308 <line:796:9, col:26>
|     | `-VarDecl 0x5565b278f2a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565b278f3d8 <line:797:9, col:29>
|     | `-VarDecl 0x5565b278f338 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565b278f3c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565b278f3a0 <col:28> 'int' 1
|     |-DeclStmt 0x5565b278f710 <line:798:9, col:71>
|     | `-VarDecl 0x5565b278f428 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5565b278f6e0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5565b278f650 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5565b278f698 <col:55> 'T' lvalue ParmVar 0x5565b2766b18 'variable' 'T &'
|     |     `-UnaryOperator 0x5565b278f6c8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5565b278f6b8 <col:66> 'Args *' this
|     |-WhileStmt 0x5565b27900a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5565b27900c0 <line:799:16, col:61>
|     | | `-VarDecl 0x5565b278f738 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565b278f918 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565b278f8e8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565b278f8d0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565b278f8b0 <col:29, col:61> 'String' (CXXTemporary 0x5565b278f8b0)
|     | |           `-CXXMemberCallExpr 0x5565b278f840 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565b278f7b0 <col:29> '<bound member function type>' ->find 0x5565b2780e98
|     | |             | `-CXXThisExpr 0x5565b278f7a0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565b278f878 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b278f7e0 <col:34> 'const char *' lvalue ParmVar 0x5565b2766978 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565b278f890 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b278f800 <col:43> 'int' lvalue ParmVar 0x5565b27669f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565b278f820 <col:50> 'Args::Slot *' lvalue Var 0x5565b278f2a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565b278f9d0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565b278f9b8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565b278f998 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565b278f968 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|     | |       `-ImplicitCastExpr 0x5565b278f950 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565b278f930 <col:23> 'String' lvalue Var 0x5565b278f738 'str' 'String'
|     | `-CompoundStmt 0x5565b2790078 <col:64, line:803:9>
|     |   |-CallExpr 0x5565b278fe00 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5565b278f9f8 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|     |   | | `-CXXThisExpr 0x5565b278f9e8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5565b278fdc0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5565b278fa28 <col:23> 'T *' lvalue Var 0x5565b278f428 's' 'T *'
|     |   | | `-CallExpr 0x5565b278fd80 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5565b278fc10 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5565b278fc58 <col:56> 'P' lvalue ParmVar 0x5565b2766a70 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5565b278fc78 <col:64> 'String' lvalue Var 0x5565b278f738 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5565b278fd28 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5565b278fcb8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|     |   | |   | `-DeclRefExpr 0x5565b278fc98 <col:70> 'T *' lvalue Var 0x5565b278f428 's' 'T *'
|     |   | |   `-UnaryOperator 0x5565b278fd68 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5565b278fd58 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5565b278fde0 <col:81> 'Args::Slot *' lvalue Var 0x5565b278f2a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5565b278ff98 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565b278fe30 <col:13> 'int' lvalue Var 0x5565b278f338 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565b278ff80 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565b278ff60 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565b278fec8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565b278fea8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565b278fe90 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565b278fe50 <col:28> 'int' lvalue Var 0x5565b278f338 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565b278fe70 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565b278ff48 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565b278ff18 <col:49> 'bool' lvalue ->_read_status 0x5565b2744520
|     |   |         `-ImplicitCastExpr 0x5565b278fef8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565b278fee8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565b2790048 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565b278ffb8 <col:13> 'int' lvalue ParmVar 0x5565b27669f8 'flags' 'int'
|     |     `-UnaryOperator 0x5565b2790030 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565b2790018 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565b278fff8 <col:23> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565b27901d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565b2790108 <col:9> 'bool' lvalue ->_read_status 0x5565b2744520
|       | `-ImplicitCastExpr 0x5565b27900e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565b27900d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565b27901b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565b2790190 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565b2790178 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565b2790138 <col:25> 'int' lvalue Var 0x5565b278f338 'read_status' 'int'
|           `-IntegerLiteral 0x5565b2790158 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5565b2767288 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5565b2766d20 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5565b2766d98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5565b27671e8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5565b2766e58 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5565b2766ed8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5565b2766f50 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5565b27670a0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5565b2790ff8 <col:87, line:821:5>
|     |-DeclStmt 0x5565b27902a0 <line:809:9, col:26>
|     | `-VarDecl 0x5565b2790238 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5565b2790370 <line:810:9, col:29>
|     | `-VarDecl 0x5565b27902d0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5565b2790358 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5565b2790338 <col:28> 'int' 1
|     |-DeclStmt 0x5565b27905b8 <line:811:9, col:38>
|     | `-VarDecl 0x5565b27904a0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5565b2790590 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5565b2790518 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5565b2790570 <col:29> 'Vector<T>' lvalue ParmVar 0x5565b27670a0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5565b2790ea8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5565b2790ec8 <line:812:16, col:61>
|     | | `-VarDecl 0x5565b27905e0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5565b27907c0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5565b2790790 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5565b2790778 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5565b2790758 <col:29, col:61> 'String' (CXXTemporary 0x5565b2790758)
|     | |           `-CXXMemberCallExpr 0x5565b27906e8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5565b2790658 <col:29> '<bound member function type>' ->find 0x5565b2780e98
|     | |             | `-CXXThisExpr 0x5565b2790648 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5565b2790720 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b2790688 <col:34> 'const char *' lvalue ParmVar 0x5565b2766e58 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5565b2790738 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5565b27906a8 <col:43> 'int' lvalue ParmVar 0x5565b2766ed8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5565b27906c8 <col:50> 'Args::Slot *' lvalue Var 0x5565b2790238 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5565b2790878 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5565b2790860 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5565b2790840 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5565b2790810 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5565b24a09e8
|     | |       `-ImplicitCastExpr 0x5565b27907f8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5565b27907d8 <col:23> 'String' lvalue Var 0x5565b27905e0 'str' 'String'
|     | `-CompoundStmt 0x5565b2790e70 <col:64, line:819:9>
|     |   |-DeclStmt 0x5565b2790938 <line:813:13, col:23>
|     |   | `-VarDecl 0x5565b27908a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5565b2790918 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5565b2790ab8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5565b2790960 <col:13> '<bound member function type>' ->postparse 0x5565b27810a8
|     |   | | `-CXXThisExpr 0x5565b2790950 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5565b2790a60 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5565b27909b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5565b2790990 <col:23> 'P' lvalue ParmVar 0x5565b2766f50 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5565b27909f8 <col:36> 'String' lvalue Var 0x5565b27905e0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5565b2790a18 <col:41> 'T' lvalue Var 0x5565b27908a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5565b2790a48 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5565b2790a38 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5565b2790a98 <col:53> 'Args::Slot *' lvalue Var 0x5565b2790238 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5565b2790c10 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5565b2790b48 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5565b2790b18 <col:17> 'bool' lvalue ->_read_status 0x5565b2744520
|     |   | |   `-ImplicitCastExpr 0x5565b2790af8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5565b2790ae8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5565b2790be8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5565b2790b80 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5565b2790b60 <col:17> 'Vector<T> *' lvalue Var 0x5565b27904a0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5565b2790bc8 <col:30> 'T' lvalue Var 0x5565b27908a0 'sx' 'T'
|     |   |-BinaryOperator 0x5565b2790d90 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5565b2790c28 <col:13> 'int' lvalue Var 0x5565b27902d0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5565b2790d78 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5565b2790d58 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5565b2790cc0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5565b2790ca0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5565b2790c88 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5565b2790c48 <col:28> 'int' lvalue Var 0x5565b27902d0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5565b2790c68 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5565b2790d40 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5565b2790d10 <col:49> 'bool' lvalue ->_read_status 0x5565b2744520
|     |   |         `-ImplicitCastExpr 0x5565b2790cf0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5565b2790ce0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5565b2790e40 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5565b2790db0 <col:13> 'int' lvalue ParmVar 0x5565b2766ed8 'flags' 'int'
|     |     `-UnaryOperator 0x5565b2790e28 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5565b2790e10 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5565b2790df0 <col:23> 'const int' lvalue Var 0x5565b274edb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5565b2790fd8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5565b2790f10 <col:9> 'bool' lvalue ->_read_status 0x5565b2744520
|       | `-ImplicitCastExpr 0x5565b2790ef0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5565b2790ee0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5565b2790fb8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5565b2790f98 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5565b2790f80 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5565b2790f40 <col:25> 'int' lvalue Var 0x5565b27902d0 'read_status' 'int'
|           `-IntegerLiteral 0x5565b2790f60 <col:40> 'int' 1
|-AccessSpecDecl 0x5565b2767300 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5565b2767328 prev 0x5565b274d0f0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5565b2767420 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5565b2767510 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5565b2791030 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5565b2767600 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5565b2791040 <col:25, line:830:9>
| |-CXXMethodDecl 0x5565b2767700 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5565b27677b0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5565b2767858 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5565b2767858
| | `-ParmVarDecl 0x5565b2767968 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5565b2768128 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5565b2768128
|   `-ParmVarDecl 0x5565b2768238 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5565b27679d8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5565b2767b38 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5565b2767d30 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5565b2767be0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5565b2767c58 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5565b2791220 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5565b2767fe8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5565b2791090 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5565b2791050 <col:20> 'void *' lvalue ParmVar 0x5565b2767be0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5565b2768050 '_slot' 'char *'
| | | `-CXXNewExpr 0x5565b2791118 <col:32, col:45> 'char *' array Function 0x5565b22c3658 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5565b2791100 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5565b27910d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5565b2767c58 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5565b27680b0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5565b27911e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5565b27911a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5565b2767c58 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5565b27912a0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5565b2767e30 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5565b2767600 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5565b2791328 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5565b2791308 <line:840:13, col:22> 'void' array Function 0x5565b22c39b8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5565b27912f0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5565b27912c0 <col:22> 'char *' lvalue ->_slot 0x5565b2768050
| |         `-CXXThisExpr 0x5565b27912b0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5565b2767f30 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5565b2767700 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5565b2791518 <col:22, line:844:9>
| |   `-CallExpr 0x5565b2791480 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5565b2791468 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5565b2791448 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5565b23cf438 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5565b27914b8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5565b2791398 <col:20> 'void *' lvalue ->_ptr 0x5565b2767fe8
| |     |   `-CXXThisExpr 0x5565b2791388 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5565b27914e8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5565b27914d0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5565b27913d8 <col:26> 'char *' lvalue ->_slot 0x5565b2768050
| |     |     `-CXXThisExpr 0x5565b27913c8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5565b2791500 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5565b2791418 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5565b27680b0
| |         `-CXXThisExpr 0x5565b2791408 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5565b2767fe8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5565b2768050 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5565b27680b0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5565b27682a8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5565b27682a8
| | `-ParmVarDecl 0x5565b27683b8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5565b2768458 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5565b2768458
|   `-ParmVarDecl 0x5565b2768568 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5565b2768708 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5565b27685d8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5565b2768678 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5565b27689a0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5565b2768b98 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5565b2768a68 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5565b2768d18 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5565b2791550 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5565b2791530 <col:20> 'T *' lvalue ParmVar 0x5565b2768a68 'ptr' 'T *'
|   | `-CompoundStmt 0x5565b27915a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5565b2768c68 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5565b2767700 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5565b2791750 <col:22, line:857:9>
|   |   `-CallExpr 0x5565b2791720 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5565b27915b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5565b2487b68 0x5565b2431e98
|   |     |-CXXOperatorCallExpr 0x5565b27916b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5565b2791640 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5565b2694b18 0x5565b2694738 0x5565b2694368 0x5565b2693f88 0x5565b2693ba8 0x5565b26937d8
|   |     | `-MemberExpr 0x5565b2791610 <col:29> 'T *' lvalue ->_ptr 0x5565b2768d18
|   |     |   `-CXXThisExpr 0x5565b2791600 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5565b27916f0 <col:35> 'T' lvalue ->_slot 0x5565b2768d78
|   |       `-CXXThisExpr 0x5565b27916e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5565b2768d18 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5565b2768d78 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5565b2768de0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5565b2768ee0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5565b2768f30 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b2768ec0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5565b2768ea0 <col:31> 'int' 48
|-FieldDecl 0x5565b2768f58 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5565b2768fb8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5565b2769018 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5565b2769150 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5565b2780740 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5565b27807a0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5565b2780850 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5565b2780a78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5565b2780980 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5565b2780bc8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5565b2780b38 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5565b2780e98 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5565b2780c88 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5565b2780d08 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5565b2780db0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5565b27810a8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5565b2780f60 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5565b2780fd8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5565b2781178 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5565b27812c8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5565b2781230 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5565b2781658 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5565b2781388 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5565b2781408 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5565b27814b0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5565b2781568 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5565b2781880 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5565b2781730 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5565b27817a8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5565b2781b98 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5565b2781930 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5565b2781af8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5565b2781a08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26fa078 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b26fa198 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5565b26fa228 <col:25, col:31> col:25 public
|-TypedefDecl 0x5565b26fa260 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x5565b21702d0 'void'
|-CXXConstructorDecl 0x5565b26fa3a8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5565b26fa2d0 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5565b26fb630 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5565b26faf60 'flags_' 'int'
| | `-ImplicitCastExpr 0x5565b26fb6d0 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5565b26fb690 <col:45> 'int' lvalue ParmVar 0x5565b26fa2d0 'flags' 'int'
| `-CompoundStmt 0x5565b26fb718 <col:52, col:53>
|-CXXMethodDecl 0x5565b26fa668 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5565b26fa468 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5565b26fa508 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5565b26fa580 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5565b26fb650 <col:88> 'const ArgContext' lvalue Var 0x5565b26fa010 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5565b26fb8f8 <col:100, line:210:5>
|   `-ReturnStmt 0x5565b26fb8e8 <line:209:9, col:46>
|     `-CallExpr 0x5565b26fb890 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5565b26fb878 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565b26fb830 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5565b26fb228 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5565b26fb790 <col:22> 'const String' lvalue ParmVar 0x5565b26fa468 'str' 'const String &'
|       |-DeclRefExpr 0x5565b26fb7b0 <col:27> 'EtherAddress' lvalue ParmVar 0x5565b26fa508 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5565b26fb7d0 <col:34> 'const ArgContext' lvalue ParmVar 0x5565b26fa580 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5565b26fb8d0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5565b26fb800 <col:40> 'int' lvalue ->flags_ 0x5565b26faf60
|           `-CXXThisExpr 0x5565b26fb7f0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5565b26fa908 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5565b26fa730 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5565b26fa7b0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5565b26fa828 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5565b26fb670 <col:89> 'const ArgContext' lvalue Var 0x5565b26fa010 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5565b26fbad0 <col:101, line:213:5>
|   `-ReturnStmt 0x5565b26fbac0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5565b26fba88 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5565b26fba58 <col:9> '<bound member function type>' ->parse 0x5565b26fa668
|       | `-CXXThisExpr 0x5565b26fba48 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5565b26fb978 <col:15> 'const String' lvalue ParmVar 0x5565b26fa730 'str' 'const String &'
|       |-UnaryOperator 0x5565b26fba10 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5565b26fb9e0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5565b26fb9c8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5565b26fb998 <col:54> 'unsigned char *' lvalue ParmVar 0x5565b26fa7b0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5565b26fba28 <col:62> 'const ArgContext' lvalue ParmVar 0x5565b26fa828 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5565b26fabc8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5565b26fa9d0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5565b26faa48 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5565b26faae8 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5565b26fbcb8 <col:82, line:216:5>
|   `-ReturnStmt 0x5565b26fbca8 <line:215:9, col:53>
|     `-CallExpr 0x5565b26fbc50 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5565b26fbc38 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5565b26fbbf0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5565b26fb558 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5565b26fbb50 <col:29> 'const String' lvalue ParmVar 0x5565b26fa9d0 'str' 'const String &'
|       |-DeclRefExpr 0x5565b26fbb70 <col:34> 'EtherAddress' lvalue ParmVar 0x5565b26faa48 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5565b26fbb90 <col:41> 'Args' lvalue ParmVar 0x5565b26faae8 'args' 'Args &'
|       `-ImplicitCastExpr 0x5565b26fbc90 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5565b26fbbc0 <col:47> 'int' lvalue ->flags_ 0x5565b26faf60
|           `-CXXThisExpr 0x5565b26fbbb0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5565b26fae68 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5565b26fac90 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5565b26fad10 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5565b26fad88 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5565b26fbe90 <col:83, line:219:5>
|   `-ReturnStmt 0x5565b26fbe80 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5565b26fbe48 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5565b26fbe18 <col:9> '<bound member function type>' ->direct_parse 0x5565b26fabc8
|       | `-CXXThisExpr 0x5565b26fbe08 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5565b26fbd38 <col:22> 'const String' lvalue ParmVar 0x5565b26fac90 'str' 'const String &'
|       |-UnaryOperator 0x5565b26fbdd0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5565b26fbda0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5565b26fbd88 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5565b26fbd58 <col:61> 'unsigned char *' lvalue ParmVar 0x5565b26fad10 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5565b26fbde8 <col:69> 'Args' lvalue ParmVar 0x5565b26fad88 'args' 'Args &'
|-AccessSpecDecl 0x5565b26faf20 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5565b26faf60 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5565b26fb228 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5565b26fafc0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5565b26fb038 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5565b26fb0b0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5565b26fb130 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5565b26fb558 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5565b26fb2f8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5565b26fb370 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5565b26fb3e8 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5565b26fb468 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x5565b27c4278 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5565b27c4278
| `-ParmVarDecl 0x5565b27c4388 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x5565b27c4428 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565b27c4538 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x5565b26faf60 'flags_' 'int'
| | `-ImplicitCastExpr 0x5565b27c4db8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5565b27c4d70 <col:7> 'int' xvalue .flags_ 0x5565b26faf60
| |     `-CXXStaticCastExpr 0x5565b27c4d40 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x5565b27c4d10 <col:7> 'EtherAddressArg' lvalue ParmVar 0x5565b27c4538 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x5565b27c4e00 <col:7>
`-CXXDestructorDecl 0x5565b27c4600 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b2490890 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b24909a8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5565b2490a38 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5565b2490b08 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5565b2490bf0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b2490e08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565b2490cb0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2490fb8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5565b2490ec0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5565b2491100 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5565b2491070 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5565b2491248 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565b24911b8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2491390 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5565b2491300 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2491458 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5565b24915a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5565b2491510 <col:28> col:31 'int'
|-CXXMethodDecl 0x5565b2491668 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5565b24917b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5565b2491720 <col:28> col:31 'int'
|-CXXMethodDecl 0x5565b2491928 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5565b2491868 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2491a70 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5565b24919e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2491b38 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5565b2491cf8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565b2491be8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565b2491c60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2491f48 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565b2491db8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b2491e30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565b2491ff8 <col:86> "" ""
|-CXXMethodDecl 0x5565b2492268 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5565b24920d8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5565b2492150 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2492418 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5565b2492328 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5565b24925c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5565b24924d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5565b2492898 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5565b2492680 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5565b24926f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565b2492770 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b2492b78 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5565b2492960 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5565b24929d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b2492a50 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565b2492c30 <col:115> "" ""
|-AccessSpecDecl 0x5565b2492ca0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5565b2492cd8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b24941f0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5565b24941f0
| `-ParmVarDecl 0x5565b24942f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5565b2494398 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5565b2494398
| `-ParmVarDecl 0x5565b24944a8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5565b24c9ad8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565b26bb8d0 <col:7>
|-CXXConstructorDecl 0x5565b24c9bb0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5565b24c9bb0
| `-ParmVarDecl 0x5565b24c9cc8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5565b24c9d38 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5565b24c9d38
| `-ParmVarDecl 0x5565b24c9e48 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5565b26be2d0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26aa478 prev 0x5565b269f680 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b26aa570 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5565b26aa660 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5565b26aa788 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5565b26aa908 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5565b26aaa88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5565b26aac08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5565b26bba38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5565b26bc2a8 <col:11>
|-CXXDestructorDecl 0x5565b26bbb10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5565b26bbc48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5565b26bbc48
| `-ParmVarDecl 0x5565b26bbd58 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5565b26bbdf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5565b26bbdf8
| `-ParmVarDecl 0x5565b26bbf08 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5565b26becc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5565b26bedd8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5565b26bf058 <col:11>
|   `-ReturnStmt 0x5565b26bf048 <col:11>
|     `-UnaryOperator 0x5565b26bf030 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5565b26bf020 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5565b26bee48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5565b26bee48
  `-ParmVarDecl 0x5565b26bef58 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26aac70 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5565b26aad88 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5565b26aae28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5565b26aae90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5565b26aaef8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5565b26aaf60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5565b26aafc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5565b26ab080 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5565b26ab0e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5565b26ab140 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5565b26bb948 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5565b26aae28 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5565b26bc2b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5565b26bc310 <col:12>
|-CXXConstructorDecl 0x5565b26bbf78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5565b26bbf78
| `-ParmVarDecl 0x5565b26bc088 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5565b26bc128 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5565b26bc128
| `-ParmVarDecl 0x5565b26bc238 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5565b26be3b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b2698d90 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5565b2698ea8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5565b2698f38 <col:16, col:22> col:16 public
|-EnumDecl 0x5565b2698f60 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5565b2699060 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5565b2699140 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b2699040 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5565b2699020 <col:21> 'int' 28
| `-EnumConstantDecl 0x5565b26990f0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5565b2699158 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26990d0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5565b26990b0 <col:22> 'int' 64
|-CXXMethodDecl 0x5565b2699498 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5565b2699180 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b2699200 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5565b2699278 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b26992f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b2699558 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5565b2699758 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5565b26995d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5565b2699648 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b2699808 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5565b2699968 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5565b2699878 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b2699a10 <col:72> warn_unused_result ""
|-TypedefDecl 0x5565b2699d70 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5565b2699d00 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5565b2699ca0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5565b2699c60 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5565b21702d0 'void'
|       |-PointerType 0x5565b2419130 'unsigned char *'
|       | `-BuiltinType 0x5565b21703d0 'unsigned char'
|       |-TypedefType 0x5565b22156a0 'size_t' sugar
|       | |-Typedef 0x5565b21e0b20 'size_t'
|       | `-BuiltinType 0x5565b2170430 'unsigned long'
|       `-PointerType 0x5565b2170ad0 'void *'
|         `-BuiltinType 0x5565b21702d0 'void'
|-CXXMethodDecl 0x5565b269a1e8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5565b2699de0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5565b2699e58 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b2699ef0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5565b2699f70 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5565b26b48e0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5565b26b48c8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5565b26b4890 <col:58> 'int' 0
| |-ParmVarDecl 0x5565b2699ff0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5565b26b4908 <col:76> 'int' 0
| |-ParmVarDecl 0x5565b269a070 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5565b26b4928 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5565b269a2b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5565b269a338 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5565b269a3f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5565b269a498 <col:20>
| `-OptimizeNoneAttr 0x5565b269a4f0 <col:30>
|-CXXMethodDecl 0x5565b269a568 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5565b269a608 <col:20>
| `-OptimizeNoneAttr 0x5565b269a660 <col:30>
|-CXXMethodDecl 0x5565b269a6d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5565b269a778 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5565b269a828 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5565b269a8c8 <col:20>
| |-OptimizeNoneAttr 0x5565b269a920 <col:30>
| `-WarnUnusedResultAttr 0x5565b269a948 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5565b269a9a0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5565b269aa40 <col:20>
| `-OptimizeNoneAttr 0x5565b269aa98 <col:30>
|-CXXMethodDecl 0x5565b269aae8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5565b269ab88 <col:20>
| `-OptimizeNoneAttr 0x5565b269abe0 <col:30>
|-CXXMethodDecl 0x5565b269ac28 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5565b269acc8 <col:20>
| `-OptimizeNoneAttr 0x5565b269ad20 <col:30>
|-CXXMethodDecl 0x5565b269ad68 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269ae28 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269aef0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565b269afb8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565b269b078 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269b198 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5565b26b49f0 <col:54, line:99:5>
|   `-ReturnStmt 0x5565b26b49e0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5565b26b49c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5565b26b4998 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565b26ab478
|         `-CXXThisExpr 0x5565b26b4988 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5565b269b338 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5565b269b248 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5565b26b4aa0 <col:67, line:103:5>
|   `-BinaryOperator 0x5565b26b4a80 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5565b26b4a18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565b26ab478
|     | `-CXXThisExpr 0x5565b26b4a08 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5565b26b4a68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26b4a48 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5565b269b248 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5565b269b430 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5565b26b4b20 <col:33, line:107:5>
|   `-ReturnStmt 0x5565b26b4b10 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5565b26b4af8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5565b26b4ac8 <col:16> 'void *' lvalue ->_destructor_argument 0x5565b26ab4e0
|         `-CXXThisExpr 0x5565b26b4ab8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5565b269b4f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5565b26b5150 <col:25, line:113:5>
|   |-ParenExpr 0x5565b26b4e98 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5565b26b4e68 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b4bd8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5565b26b4bb0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5565b26b4b78 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5565b26b4b48 <col:24> '<bound member function type>' ->shared 0x5565b269a568
|   |   |       `-ImplicitCastExpr 0x5565b26b4b98 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5565b26b4b38 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5565b26b4c38 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b4c18 <col:42> 'int' 0
|   |   `-CallExpr 0x5565b26b4dc8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b4db0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b4d90 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b4e08 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b4ca8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5565b26b4e20 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b4cd0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b4e38 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b4d08 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5565b26b4e50 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b4d78 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b4d60 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b4d28 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5565b26b5098 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5565b26b4ec8 <col:2> 'unsigned char *' lvalue ->_head 0x5565b26ab280
|   | | `-CXXThisExpr 0x5565b26b4eb8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5565b26b5080 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5565b26b5060 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5565b26b4f08 <col:10> 'unsigned char *' lvalue ->_data 0x5565b26ab2e8
|   |     | `-CXXThisExpr 0x5565b26b4ef8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5565b26b5048 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5565b26b5028 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5565b26b4f48 <col:18> 'unsigned char *' lvalue ->_tail 0x5565b26ab350
|   |         | `-CXXThisExpr 0x5565b26b4f38 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5565b26b5010 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5565b26b4ff0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5565b26b4f88 <col:26> 'unsigned char *' lvalue ->_end 0x5565b26ab3b8
|   |             | `-CXXThisExpr 0x5565b26b4f78 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5565b26b4fd8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5565b26b4fb8 <col:33> 'int' 0
|   `-BinaryOperator 0x5565b26b5130 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5565b26b50c8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5565b26ab478
|     | `-CXXThisExpr 0x5565b26b50b8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5565b26b5118 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5565b26b50f8 <col:16> 'int' 0
|-CXXMethodDecl 0x5565b269b630 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565b269b5a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269b6d8 <col:20>
| |-OptimizeNoneAttr 0x5565b269b730 <col:30>
| `-WarnUnusedResultAttr 0x5565b269b758 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5565b269b828 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565b269b798 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269b8d0 <col:20>
| |-OptimizeNoneAttr 0x5565b269b928 <col:30>
| `-WarnUnusedResultAttr 0x5565b269b950 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5565b269ba88 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5565b269b990 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b269bb30 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5565b269bc30 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5565b269bba0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269bcd8 <col:20>
| `-OptimizeNoneAttr 0x5565b269bd30 <col:30>
|-CXXMethodDecl 0x5565b269bdf8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5565b269bd68 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b269bea0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5565b269bfa0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5565b269bf10 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5565b269c048 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5565b269c148 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5565b269c0b8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269c1f0 <col:20>
| `-OptimizeNoneAttr 0x5565b269c248 <col:30>
|-CXXMethodDecl 0x5565b269c3d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5565b269c288 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5565b269c300 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5565b26b4948 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5565b269c488 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5565b269c688 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565b269c500 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5565b269c578 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b269c898 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5565b269c748 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565b269c7c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b269caa8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5565b269c958 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5565b269c9d8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5565b26b4958 <col:39> 'int' 0
|-CXXMethodDecl 0x5565b269cb78 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5565b269cc40 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5565b269cd08 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565b269cdc8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269ce90 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5565b269cfd8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5565b269cf48 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5565b269d1a8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565b269d098 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5565b269d110 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b269d278 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5565b269d338 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5565b269d3d8 <col:20>
| `-OptimizeNoneAttr 0x5565b269d430 <col:30>
|-CXXMethodDecl 0x5565b269d480 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5565b269d520 <col:20>
| `-OptimizeNoneAttr 0x5565b269d578 <col:30>
|-CXXMethodDecl 0x5565b269d5c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565b269d688 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269d750 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5565b269d7f0 <col:20>
| `-OptimizeNoneAttr 0x5565b269d848 <col:30>
|-CXXMethodDecl 0x5565b269d998 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5565b269d888 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5565b269d900 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b269dae8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5565b269da58 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b269dbc0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5565b269dc80 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5565b269dd20 <col:20>
| `-OptimizeNoneAttr 0x5565b269dd78 <col:30>
|-CXXMethodDecl 0x5565b269ddc8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5565b269de68 <col:20>
| `-OptimizeNoneAttr 0x5565b269dec0 <col:30>
|-CXXMethodDecl 0x5565b269df10 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565b269dfd8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5565b269e078 <col:20>
| `-OptimizeNoneAttr 0x5565b269e0d0 <col:30>
|-CXXMethodDecl 0x5565b269e118 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5565b269e238 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5565b269e3a8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5565b269e2e8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5565b269e498 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5565b269e538 <col:20>
| `-OptimizeNoneAttr 0x5565b269e590 <col:30>
|-CXXMethodDecl 0x5565b269e5e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5565b269e6a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5565b269e8d8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5565b269e750 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5565b269e7c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269e988 <col:20>
| `-OptimizeNoneAttr 0x5565b269e9e0 <col:30>
|-CXXMethodDecl 0x5565b269ea88 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5565b269eb28 <col:20>
| `-OptimizeNoneAttr 0x5565b269eb80 <col:30>
|-CXXMethodDecl 0x5565b269ebd0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5565b269ec70 <col:20>
| `-OptimizeNoneAttr 0x5565b269ecc8 <col:30>
|-CXXMethodDecl 0x5565b269ed10 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5565b269edb0 <col:20>
| `-OptimizeNoneAttr 0x5565b269ee08 <col:30>
|-CXXMethodDecl 0x5565b269ef08 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5565b269ee40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5565b269efb0 <col:20>
| `-OptimizeNoneAttr 0x5565b269f008 <col:30>
|-CXXMethodDecl 0x5565b269f1c8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5565b269f040 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5565b269f0b8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b269f278 <col:20>
| `-OptimizeNoneAttr 0x5565b269f2d0 <col:30>
|-CXXMethodDecl 0x5565b269f378 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5565b269f498 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5565b269f5b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5565b269f658 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5565b269f680 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5565b269f7a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5565b269f848 <col:20>
| `-OptimizeNoneAttr 0x5565b269f8a0 <col:30>
|-CXXMethodDecl 0x5565b269f948 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5565b269f9e8 <col:20>
| `-OptimizeNoneAttr 0x5565b269fa40 <col:30>
|-AccessSpecDecl 0x5565b269fa68 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5565b269fa90 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5565b269fb90 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5565b269fbe0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b269fb70 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5565b269fb50 <col:14> 'int' 48
|-CXXMethodDecl 0x5565b269fc48 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5565b269fce8 <col:20>
| `-OptimizeNoneAttr 0x5565b269fd40 <col:30>
|-CXXMethodDecl 0x5565b269fdb8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5565b269fe58 <col:20>
| `-OptimizeNoneAttr 0x5565b269feb0 <col:30>
|-CXXMethodDecl 0x5565b269ff78 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5565b269fee8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5565b26a0118 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5565b26a02b8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5565b26a01c8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5565b26a0360 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5565b26a0460 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0810 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a0440 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5565b26a0420 <col:9> 'int' 0
| |-EnumConstantDecl 0x5565b26a04f0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0828 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a04d0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5565b26a04b0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5565b26a0580 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0840 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a0560 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5565b26a0540 <col:14> 'int' 2
| |-EnumConstantDecl 0x5565b26a0610 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0858 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a05f0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5565b26a05d0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5565b26a06a0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0870 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a0680 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5565b26a0660 <col:13> 'int' 4
| |-EnumConstantDecl 0x5565b26a0730 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5565b26a0888 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a0710 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5565b26a06f0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5565b26a07c0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5565b26a08a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26a07a0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5565b26a0780 <col:14> 'int' 6
|-CXXMethodDecl 0x5565b26a0908 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5565b26a09a8 <col:20>
| `-OptimizeNoneAttr 0x5565b26a0a00 <col:30>
|-CXXMethodDecl 0x5565b26a0af8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5565b26a0a38 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5565b26a0ba0 <col:20>
| `-OptimizeNoneAttr 0x5565b26a0bf8 <col:30>
|-CXXMethodDecl 0x5565b26a0c68 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5565b26a0d90 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5565b26a0f08 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5565b26a0e40 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5565b26a0fd0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5565b26a1098 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5565b26a11d8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5565b26a1148 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5565b26a1280 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5565b26a1380 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565b26a1580 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a1360 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5565b26a1340 <col:23> 'int' 0
| |-EnumConstantDecl 0x5565b26a1410 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565b26a1598 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a13f0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5565b26a13d0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5565b26a14a0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5565b26a15b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a1480 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5565b26a1460 <col:24> 'int' 0
| `-EnumConstantDecl 0x5565b26a1530 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5565b26a15c8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26a1510 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5565b26a14f0 <col:47> 'int' 16
|-CXXMethodDecl 0x5565b26a1628 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5565b26a1798 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5565b26a16d8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5565b26a1840 <col:20>
| `-OptimizeNoneAttr 0x5565b26a1898 <col:30>
|-CXXMethodDecl 0x5565b26a18e8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5565b26b5270 <col:18, col:36>
|   `-ReturnStmt 0x5565b26b5260 <col:20, col:33>
|     `-ImplicitCastExpr 0x5565b26b5248 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5565b26b5228 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5565b26b51f8 <col:27> '<bound member function type>' ->xanno 0x5565b269f948
|           `-CXXThisExpr 0x5565b26b51e8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5565b26a19e0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5565b26b5380 <col:30, col:48>
|   `-ReturnStmt 0x5565b26b5370 <col:32, col:45>
|     `-ImplicitCastExpr 0x5565b26b5358 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5565b26b5338 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5565b26b5308 <col:39> '<bound member function type>' ->xanno 0x5565b269f7a8
|           `-CXXThisExpr 0x5565b26b52f8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5565b26a1ac8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5565b26b5518 <col:24, col:50>
|   `-ReturnStmt 0x5565b26b5508 <col:26, col:47>
|     `-UnaryOperator 0x5565b26b54f0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5565b26b54d0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5565b26b54b8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565b26b5468 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5565b26aa788
|         |   `-CXXMemberCallExpr 0x5565b26b5448 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5565b26b5418 <col:34> '<bound member function type>' ->xanno 0x5565b269f948
|         |       `-CXXThisExpr 0x5565b26b5408 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5565b26b5498 <col:46> 'int' 0
|-CXXMethodDecl 0x5565b26a1bd0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5565b26b56e8 <col:36, col:62>
|   `-ReturnStmt 0x5565b26b56d8 <col:38, col:59>
|     `-UnaryOperator 0x5565b26b56c0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5565b26b56a0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5565b26b5688 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565b26b5600 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5565b26aa788
|         |   `-CXXMemberCallExpr 0x5565b26b55e0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5565b26b55b0 <col:46> '<bound member function type>' ->xanno 0x5565b269f7a8
|         |       `-CXXThisExpr 0x5565b26b55a0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5565b26b5630 <col:58> 'int' 0
|-CXXMethodDecl 0x5565b26a1ce8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5565b26b5880 <col:26, col:53>
|   `-ReturnStmt 0x5565b26b5870 <col:28, col:50>
|     `-UnaryOperator 0x5565b26b5858 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5565b26b5838 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5565b26b5820 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565b26b57d0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5565b26aaa88
|         |   `-CXXMemberCallExpr 0x5565b26b57b0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5565b26b5780 <col:36> '<bound member function type>' ->xanno 0x5565b269f948
|         |       `-CXXThisExpr 0x5565b26b5770 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5565b26b5800 <col:49> 'int' 0
|-CXXMethodDecl 0x5565b26a1e08 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5565b26b5a58 <col:38, col:65>
|   `-ReturnStmt 0x5565b26b5a48 <col:40, col:62>
|     `-UnaryOperator 0x5565b26b5a30 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5565b26b5a10 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5565b26b59f8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565b26b5968 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5565b26aaa88
|         |   `-CXXMemberCallExpr 0x5565b26b5948 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5565b26b5918 <col:48> '<bound member function type>' ->xanno 0x5565b269f7a8
|         |       `-CXXThisExpr 0x5565b26b5908 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5565b26b5998 <col:61> 'int' 0
|-CXXMethodDecl 0x5565b26a1fb8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5565b26a1ec0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5565b26b6128 <col:34, line:463:5>
|   |-ParenExpr 0x5565b26b5f70 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5565b26b5f40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b5ba8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b5b78 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b5ac8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b5ab0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b5a70 <col:23> 'int' lvalue ParmVar 0x5565b26a1ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b5a90 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b5b58 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b5b28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b5ae8 <col:33> 'int' lvalue ParmVar 0x5565b26a1ec0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5565b26b5b40 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5565b26b5b08 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5565b26b5c08 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b5be8 <col:56> 'int' 0
|   |   `-CallExpr 0x5565b26b5ea0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b5e88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b5e68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b5ee0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b5cf8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5565b26b5ef8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b5d28 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b5f10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b5d60 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5565b26b5f28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b5e50 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b5e38 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b5df8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5565b26b6118 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5565b26b6100 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5565b26b60e0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5565b26b60b0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5565b26b6060 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5565b26aa788
|         |   `-CXXMemberCallExpr 0x5565b26b6040 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5565b26b6010 <col:9> '<bound member function type>' ->xanno 0x5565b269f7a8
|         |       `-CXXThisExpr 0x5565b26b6000 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5565b26b60c8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5565b26b6090 <col:21> 'int' lvalue ParmVar 0x5565b26a1ec0 'i' 'int'
|-CXXMethodDecl 0x5565b26a2208 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5565b26a2078 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5565b26a20f0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5565b26b67b8 <col:40, line:472:5>
|   |-ParenExpr 0x5565b26b65d0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5565b26b65a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b6280 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b6250 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b61a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b6188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b6148 <col:23> 'int' lvalue ParmVar 0x5565b26a2078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b6168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b6230 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b6200 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b61c0 <col:33> 'int' lvalue ParmVar 0x5565b26a2078 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5565b26b6218 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5565b26b61e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5565b26b62e0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b62c0 <col:56> 'int' 0
|   |   `-CallExpr 0x5565b26b6500 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b64e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b64c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b6540 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b6350 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5565b26b6558 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b6380 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b6570 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b63b8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5565b26b6588 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b64b0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b6498 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b6458 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5565b26b6798 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5565b26b6740 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5565b26b6710 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5565b26b66c0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5565b26aa788
|     | |   `-CXXMemberCallExpr 0x5565b26b66a0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5565b26b6670 <col:2> '<bound member function type>' ->xanno 0x5565b269f948
|     | |       `-CXXThisExpr 0x5565b26b6660 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5565b26b6728 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5565b26b66f0 <col:14> 'int' lvalue ParmVar 0x5565b26a2078 'i' 'int'
|     `-ImplicitCastExpr 0x5565b26b6780 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26b6760 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5565b26a20f0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5565b26a23c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5565b26a22d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5565b26b6f38 <col:36, line:485:5>
|   |-ParenExpr 0x5565b26b6ca0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b6c70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b6950 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b6920 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b6830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b6818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b67d8 <col:23> 'int' lvalue ParmVar 0x5565b26a22d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b67f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b6900 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b68e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b6850 <col:33> 'int' lvalue ParmVar 0x5565b26a22d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b68c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b68b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b6870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b6890 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5565b26b69b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b6990 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b6bd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b6bb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b6b98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b6c10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b6a20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565b26b6c28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b6a58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b6c40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b6a90 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5565b26b6c58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b6b80 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b6b68 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b6b28 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5565b26b6f28 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5565b26b6f10 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5565b26b6ef8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26b6ec8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5565b26b6e68 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26b6e38 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26b6db0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26b6d90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26b6d60 <col:61> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26b6d50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26b6e50 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26b6de0 <col:74> 'int' lvalue ParmVar 0x5565b26a22d0 'i' 'int'
|-CXXMethodDecl 0x5565b26a2618 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5565b26a2488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565b26a2500 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5565b26b7688 <col:42, line:500:5>
|   |-ParenExpr 0x5565b26b7420 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b73f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b70d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b70a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b6fb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b6f98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b6f58 <col:23> 'int' lvalue ParmVar 0x5565b26a2488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b6f78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b7080 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b7068 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b6fd0 <col:33> 'int' lvalue ParmVar 0x5565b26a2488 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b7048 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b7030 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b6ff0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b7010 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5565b26b7130 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b7110 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b7350 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b7338 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b7318 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b7390 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b71a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565b26b73a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b71d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b73c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b7210 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5565b26b73d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b7300 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b72e8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b72a8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5565b26b7668 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5565b26b7618 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5565b26b75e8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5565b26b7590 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5565b26b7560 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5565b26b7510 <col:48, col:57> 'char [48]' lvalue ->c 0x5565b26aa660
|     |     |   `-CXXMemberCallExpr 0x5565b26b74f0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565b26b74c0 <col:48> '<bound member function type>' ->xanno 0x5565b269f948
|     |     |       `-CXXThisExpr 0x5565b26b74b0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5565b26b7578 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5565b26b7540 <col:61> 'int' lvalue ParmVar 0x5565b26a2488 'i' 'int'
|     `-ImplicitCastExpr 0x5565b26b7650 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26b7630 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5565b26a2500 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5565b26a27d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5565b26a26e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5565b26b7de8 <col:35, line:513:5>
|   |-ParenExpr 0x5565b26b7af8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b7ac8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b7820 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b77f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b7700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b76e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b76a8 <col:23> 'int' lvalue ParmVar 0x5565b26a26e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b76c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b77d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b77b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b7720 <col:33> 'int' lvalue ParmVar 0x5565b26a26e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b7798 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b7780 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b7740 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b7760 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5565b26b7880 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b7860 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b7a28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b7a10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b79f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b7a68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b78f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565b26b7a80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b7928 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b7a98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b7960 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5565b26b7ab0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b79d8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b79c0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b7980 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5565b26b7dd8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5565b26b7dc0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5565b26b7da8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26b7d78 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5565b26b7cf0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26b7cc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26b7c70 <col:60, col:69> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26b7c50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26b7c20 <col:60> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26b7c10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26b7cd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26b7ca0 <col:73> 'int' lvalue ParmVar 0x5565b26a26e0 'i' 'int'
|-CXXMethodDecl 0x5565b26a2a28 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5565b26a2898 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565b26a2910 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5565b26b8508 <col:41, line:528:5>
|   |-ParenExpr 0x5565b26b8290 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b8260 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b7f80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b7f50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b7e60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b7e48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b7e08 <col:23> 'int' lvalue ParmVar 0x5565b26a2898 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b7e28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b7f30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b7f18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b7e80 <col:33> 'int' lvalue ParmVar 0x5565b26a2898 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b7ef8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b7ee0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b7ea0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b7ec0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5565b26b7fe0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b7fc0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b81c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b81a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b8188 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b8200 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b8050 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5565b26b8218 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b8088 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b8230 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b80c0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5565b26b8248 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b8170 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b8158 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b8118 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5565b26b84e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5565b26b8498 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5565b26b8468 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5565b26b8410 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5565b26b83d0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5565b26b8380 <col:47, col:56> 'char [48]' lvalue ->c 0x5565b26aa660
|     |     |   `-CXXMemberCallExpr 0x5565b26b8360 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565b26b8330 <col:47> '<bound member function type>' ->xanno 0x5565b269f948
|     |     |       `-CXXThisExpr 0x5565b26b8320 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5565b26b83e8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5565b26b83b0 <col:60> 'int' lvalue ParmVar 0x5565b26a2898 'i' 'int'
|     `-ImplicitCastExpr 0x5565b26b84d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26b84b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5565b26a2910 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5565b26a2be8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5565b26a2af0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5565b26b8bd8 <col:36, line:541:5>
|   |-ParenExpr 0x5565b26b8978 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b8948 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b86a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b8670 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b8580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b8568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b8528 <col:23> 'int' lvalue ParmVar 0x5565b26a2af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b8548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b8650 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b8638 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b85a0 <col:33> 'int' lvalue ParmVar 0x5565b26a2af0 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b8618 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b8600 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b85c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b85e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5565b26b8700 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b86e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b88a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b8890 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b8870 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b88e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b8770 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5565b26b8900 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b87a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b8918 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b87e0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5565b26b8930 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b8858 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b8840 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b8800 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5565b26b8bc8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5565b26b8bb0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5565b26b8b98 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26b8b68 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5565b26b8b10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26b8ae0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26b8a90 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26b8a70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26b8a40 <col:61> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26b8a30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26b8af8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26b8ac0 <col:74> 'int' lvalue ParmVar 0x5565b26a2af0 'i' 'int'
|-CXXMethodDecl 0x5565b26a2db8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5565b26a2ca8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5565b26a2d20 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5565b26a2e68 <col:20>
| `-OptimizeNoneAttr 0x5565b26a2ec0 <col:30>
|-CXXMethodDecl 0x5565b26a2ff8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5565b26a2f00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5565b26b92a8 <col:35, line:562:5>
|   |-ParenExpr 0x5565b26b9048 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b9018 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b8d70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b8d40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b8c50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b8c38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b8bf8 <col:23> 'int' lvalue ParmVar 0x5565b26a2f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b8c18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b8d20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b8d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b8c70 <col:33> 'int' lvalue ParmVar 0x5565b26a2f00 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b8ce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b8cd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b8c90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b8cb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5565b26b8dd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b8db0 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b8f78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b8f60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b8f40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b8fb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b8e40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5565b26b8fd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b8e78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b8fe8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b8eb0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5565b26b9000 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b8f28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b8f10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b8ed0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5565b26b9298 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5565b26b9280 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5565b26b9268 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26b9238 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5565b26b91e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26b91b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26b9160 <col:60, col:69> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26b9140 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26b9110 <col:60> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26b9100 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26b91c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26b9190 <col:73> 'int' lvalue ParmVar 0x5565b26a2f00 'i' 'int'
|-CXXMethodDecl 0x5565b26a3208 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5565b26a30b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565b26a3130 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5565b26b9988 <col:41, line:577:5>
|   |-ParenExpr 0x5565b26b9718 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b96e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b9440 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b9410 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b9320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b9308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b92c8 <col:23> 'int' lvalue ParmVar 0x5565b26a30b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b92e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b93f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b93d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b9340 <col:33> 'int' lvalue ParmVar 0x5565b26a30b8 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b93b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b93a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b9360 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b9380 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5565b26b94a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b9480 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b9648 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b9630 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b9610 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b9688 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b9510 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5565b26b96a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b9548 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b96b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b9580 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5565b26b96d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b95f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b95e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b95a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5565b26b9968 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5565b26b9918 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5565b26b98e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5565b26b9888 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5565b26b9858 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5565b26b9808 <col:47, col:56> 'char [48]' lvalue ->c 0x5565b26aa660
|     |     |   `-CXXMemberCallExpr 0x5565b26b97e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565b26b97b8 <col:47> '<bound member function type>' ->xanno 0x5565b269f948
|     |     |       `-CXXThisExpr 0x5565b26b97a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5565b26b9870 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5565b26b9838 <col:60> 'int' lvalue ParmVar 0x5565b26a30b8 'i' 'int'
|     `-ImplicitCastExpr 0x5565b26b9950 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26b9930 <col:65> 'int32_t':'int' lvalue ParmVar 0x5565b26a3130 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5565b26a33c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5565b26a32d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5565b26ba0b8 <col:36, line:591:5>
|   |-ParenExpr 0x5565b26b9df8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26b9dc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26b9b20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26b9af0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26b9a00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26b99e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26b99a8 <col:23> 'int' lvalue ParmVar 0x5565b26a32d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26b99c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26b9ad0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26b9ab8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26b9a20 <col:33> 'int' lvalue ParmVar 0x5565b26a32d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26b9a98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26b9a80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26b9a40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26b9a60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5565b26b9b80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26b9b60 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26b9d28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26b9d10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26b9cf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26b9d68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b9bf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5565b26b9d80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26b9c28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26b9d98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26b9c60 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5565b26b9db0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26b9cd8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26b9cc0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26b9c80 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5565b26ba0a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5565b26ba090 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5565b26ba078 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26ba048 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5565b26b9fc0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26b9f90 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26b9f40 <col:61, col:70> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26b9f20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26b9ef0 <col:61> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26b9ee0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26b9fa8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26b9f70 <col:74> 'int' lvalue ParmVar 0x5565b26a32d0 'i' 'int'
|-CXXMethodDecl 0x5565b26a3618 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5565b26a3488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565b26a3500 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5565b26ba798 <col:42, line:606:5>
|   |-ParenExpr 0x5565b26ba528 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5565b26ba4f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26ba250 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26ba220 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26ba130 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26ba118 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26ba0d8 <col:23> 'int' lvalue ParmVar 0x5565b26a3488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26ba0f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26ba200 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5565b26ba1e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26ba150 <col:33> 'int' lvalue ParmVar 0x5565b26a3488 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26ba1c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26ba1b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26ba170 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5565b26ba190 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5565b26ba2b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26ba290 <col:60> 'int' 0
|   |   `-CallExpr 0x5565b26ba458 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5565b26ba440 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26ba420 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26ba498 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26ba320 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5565b26ba4b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26ba358 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26ba4c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26ba390 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5565b26ba4e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26ba408 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26ba3f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26ba3b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5565b26ba778 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5565b26ba728 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5565b26ba6f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5565b26ba698 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5565b26ba668 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5565b26ba618 <col:48, col:57> 'char [48]' lvalue ->c 0x5565b26aa660
|     |     |   `-CXXMemberCallExpr 0x5565b26ba5f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565b26ba5c8 <col:48> '<bound member function type>' ->xanno 0x5565b269f948
|     |     |       `-CXXThisExpr 0x5565b26ba5b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5565b26ba680 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5565b26ba648 <col:61> 'int' lvalue ParmVar 0x5565b26a3488 'i' 'int'
|     `-ImplicitCastExpr 0x5565b26ba760 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5565b26ba740 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5565b26a3500 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5565b26a37b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5565b26a36e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5565b26bb008 <col:33, line:620:5>
|   |-ParenExpr 0x5565b26bad80 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5565b26bad50 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26ba9a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26ba970 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26ba810 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26ba7f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26ba7b8 <col:23> 'int' lvalue ParmVar 0x5565b26a36e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26ba7d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26ba950 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5565b26ba938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26ba830 <col:33> 'int' lvalue ParmVar 0x5565b26a36e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26ba918 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26ba900 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26ba850 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5565b26ba8d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5565b26ba8c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5565b26ba888 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5565b26baa00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26ba9e0 <col:79> 'int' 0
|   |   `-CallExpr 0x5565b26bacb0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5565b26bac98 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26bac78 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26bacf0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26baae8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5565b26bad08 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26bab30 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26bad20 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26bab68 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5565b26bad38 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26bac60 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26bac48 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26bac08 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5565b26baff8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5565b26bafe0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5565b26bafc8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5565b26baf98 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5565b26baf10 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5565b26baee0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5565b26bae90 <col:67, col:76> 'char const[48]' lvalue ->c 0x5565b26aa660
|             |   `-CXXMemberCallExpr 0x5565b26bae70 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5565b26bae40 <col:67> '<bound member function type>' ->xanno 0x5565b269f7a8
|             |       `-CXXThisExpr 0x5565b26bae30 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5565b26baef8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26baec0 <col:80> 'int' lvalue ParmVar 0x5565b26a36e0 'i' 'int'
|-CXXMethodDecl 0x5565b26a39c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5565b26a3870 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5565b26a38f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5565b26bb830 <col:45, line:635:5>
|   |-ParenExpr 0x5565b26bb578 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5565b26bb548 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5565b26bb210 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5565b26bb1e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5565b26bb080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5565b26bb068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5565b26bb028 <col:23> 'int' lvalue ParmVar 0x5565b26a3870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5565b26bb048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5565b26bb1c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5565b26bb1a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5565b26bb0a0 <col:33> 'int' lvalue ParmVar 0x5565b26a3870 'i' 'int'
|   |   |     `-BinaryOperator 0x5565b26bb188 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5565b26bb170 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5565b26bb0c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5565b269fb90 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5565b26bb148 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5565b26bb130 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5565b26bb0f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5565b26bb270 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5565b26bb250 <col:79> 'int' 0
|   |   `-CallExpr 0x5565b26bb4a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5565b26bb490 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5565b26bb470 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5565b220c4b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5565b26bb4e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26bb2e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5565b26bb500 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5565b26bb328 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5565b26bb518 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5565b26bb360 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5565b26bb530 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5565b26bb458 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5565b26bb440 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5565b26bb3f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5565b26bb810 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5565b26bb778 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5565b26bb748 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5565b26bb6e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5565b26bb6b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5565b26bb668 <col:54, col:63> 'char [48]' lvalue ->c 0x5565b26aa660
|     |     |   `-CXXMemberCallExpr 0x5565b26bb648 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5565b26bb618 <col:54> '<bound member function type>' ->xanno 0x5565b269f948
|     |     |       `-CXXThisExpr 0x5565b26bb608 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5565b26bb6d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5565b26bb698 <col:67> 'int' lvalue ParmVar 0x5565b26a3870 'i' 'int'
|     `-CXXConstCastExpr 0x5565b26bb7e0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5565b26bb7c8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5565b26bb790 <col:91> 'const void *' lvalue ParmVar 0x5565b26a38f0 'x' 'const void *'
|-CXXMethodDecl 0x5565b26a3a98 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5565b26bb8b8 <col:34, line:640:5>
|   `-ReturnStmt 0x5565b26bb8a8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5565b26bb890 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5565b26bb860 <col:16> 'Packet *' lvalue ->_data_packet 0x5565b26ab218
|         `-CXXThisExpr 0x5565b26bb850 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5565b26a3bd8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5565b26a3b48 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5565b26b4978 <col:46> 'bool' true
|-CXXMethodDecl 0x5565b26a3d58 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5565b26a3c90 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5565b26a3e00 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5565b26a45b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5565b26a3f00 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4620 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a3ee0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5565b26a3ec0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5565b2699060 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5565b26a3f90 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4638 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a3f70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5565b26a3f50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5565b26990f0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5565b26a4020 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4650 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a4000 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5565b26a3fe0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5565b26a40b0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4668 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a4090 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5565b26a4070 <col:19> 'int' 16
| |-EnumConstantDecl 0x5565b26a4140 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4680 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a4120 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5565b26a4100 <col:21> 'int' 16
| |-EnumConstantDecl 0x5565b26a41d0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a4698 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a41b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5565b26a4190 <col:19> 'int' 32
| |-EnumConstantDecl 0x5565b26a4260 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a46b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a4240 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5565b26a4220 <col:19> 'int' EnumConstant 0x5565b26a40b0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5565b26a42f0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a46c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a42d0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5565b26a42b0 <col:19> 'int' EnumConstant 0x5565b26a41d0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5565b26a43c0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a46e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a43a0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5565b26a4380 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5565b26a4340 <col:23> 'int' EnumConstant 0x5565b26a42f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5565b26a4360 <col:40> 'int' 2
| |-EnumConstantDecl 0x5565b26a4490 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5565b26a46f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5565b26a4470 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5565b26a4450 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5565b26a4410 <col:23> 'int' EnumConstant 0x5565b26a42f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5565b26a4430 <col:40> 'int' 4
| `-EnumConstantDecl 0x5565b26a4560 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5565b26a4710 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5565b26a4540 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5565b26a4520 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5565b26a44e0 <col:23> 'int' EnumConstant 0x5565b26a42f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5565b26a4500 <col:40> 'int' 8
|-CXXMethodDecl 0x5565b26a4750 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5565b26a47f0 <col:68> "" ""
|-CXXMethodDecl 0x5565b26a4888 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5565b26a4928 <col:45> "" ""
|-CXXMethodDecl 0x5565b26a49c0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5565b26a4a60 <col:57> "" ""
|-CXXMethodDecl 0x5565b26a4af8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5565b26a4b98 <col:45> "" ""
|-CXXMethodDecl 0x5565b26a4c30 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5565b26a4cd0 <col:57> "" ""
|-CXXMethodDecl 0x5565b26a4d60 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5565b26a4e00 <col:51> "" ""
|-CXXMethodDecl 0x5565b26a4e90 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5565b26a4f30 <col:63> "" ""
|-CXXMethodDecl 0x5565b26a4fc0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5565b26a5060 <col:53> "" ""
|-CXXMethodDecl 0x5565b26a50f0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5565b26a5190 <col:65> "" ""
|-CXXMethodDecl 0x5565b26a52a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5565b26a5218 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5565b26a5350 <col:61> "" ""
|-CXXMethodDecl 0x5565b26a54e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5565b26a53d8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5565b26a5450 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5565b26a5598 <col:67> "" ""
|-CXXMethodDecl 0x5565b26a56b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5565b26a5620 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565b26a5758 <col:63> "" ""
|-CXXMethodDecl 0x5565b26a58f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5565b26a57e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565b26a5858 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5565b26a59a0 <col:69> "" ""
|-CXXMethodDecl 0x5565b26a5ab8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5565b26a5a28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565b26a5b60 <col:63> "" ""
|-CXXMethodDecl 0x5565b26a8238 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5565b26a8128 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565b26a81a0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565b26a82e8 <col:69> "" ""
|-CXXMethodDecl 0x5565b26a8400 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5565b26a8370 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5565b26a84a8 <col:62> "" ""
|-CXXMethodDecl 0x5565b26a8640 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5565b26a8530 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565b26a85a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5565b26a86f0 <col:68> "" ""
|-CXXMethodDecl 0x5565b26a8808 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5565b26a8778 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5565b26a88b0 <col:63> "" ""
|-CXXMethodDecl 0x5565b26a8a48 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5565b26a8938 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5565b26a89b0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5565b26a8af8 <col:69> "" ""
|-CXXMethodDecl 0x5565b26a8b88 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5565b26a8c28 <col:64> "" ""
|-CXXMethodDecl 0x5565b26a8cb8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5565b26a8d58 <col:52> "" ""
|-CXXMethodDecl 0x5565b26a8de8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5565b26a8e88 <col:67> "" ""
|-CXXMethodDecl 0x5565b26a8f18 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5565b26a8fb8 <col:55> "" ""
|-CXXMethodDecl 0x5565b26a90d0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5565b26a9040 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565b26a9178 <col:58> "" ""
|-CXXMethodDecl 0x5565b26a9310 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5565b26a9200 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565b26a9278 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5565b26a93c0 <col:62> "" ""
|-CXXMethodDecl 0x5565b26a94d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5565b26a9448 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565b26a9580 <col:58> "" ""
|-CXXMethodDecl 0x5565b26a9718 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5565b26a9608 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565b26a9680 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5565b26a97c8 <col:62> "" ""
|-CXXMethodDecl 0x5565b26a98e0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5565b26a9850 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5565b26a9988 <col:60> "" ""
|-CXXMethodDecl 0x5565b26a9b20 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5565b26a9a10 <col:34> col:37 'int'
| |-ParmVarDecl 0x5565b26a9a88 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5565b26a9bd0 <col:64> "" ""
|-CXXMethodDecl 0x5565b26a9ce8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5565b26a9c58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5565b26a9d90 <col:58> "" ""
|-CXXMethodDecl 0x5565b26a9f28 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5565b26a9e18 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565b26a9e90 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5565b26a9fd8 <col:62> "" ""
|-CXXMethodDecl 0x5565b26aa0f0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5565b26aa060 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5565b26aa198 <col:59> "" ""
|-CXXMethodDecl 0x5565b26aa330 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5565b26aa220 <col:33> col:36 'int'
| |-ParmVarDecl 0x5565b26aa298 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5565b26aa3e0 <col:63> "" ""
|-AccessSpecDecl 0x5565b26aa450 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5565b26aa478 prev 0x5565b269f680 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565b26aa570 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5565b26aa660 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5565b26aa788 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5565b26aa908 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5565b26aaa88 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5565b26aac08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5565b26bba38 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5565b26bc2a8 <col:11>
| |-CXXDestructorDecl 0x5565b26bbb10 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5565b26bbc48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5565b26bbc48
| | `-ParmVarDecl 0x5565b26bbd58 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5565b26bbdf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5565b26bbdf8
| | `-ParmVarDecl 0x5565b26bbf08 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5565b26becc8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5565b26bedd8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5565b26bf058 <col:11>
| |   `-ReturnStmt 0x5565b26bf048 <col:11>
| |     `-UnaryOperator 0x5565b26bf030 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5565b26bf020 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5565b26bee48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5565b26bee48
|   `-ParmVarDecl 0x5565b26bef58 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5565b26aac70 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5565b26aad88 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5565b26aae28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5565b26aae90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5565b26aaef8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5565b26aaf60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5565b26aafc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5565b26ab080 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5565b26ab0e0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5565b26ab140 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5565b26bb948 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5565b26aae28 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5565b26bc2b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5565b26bc310 <col:12>
| |-CXXConstructorDecl 0x5565b26bbf78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5565b26bbf78
| | `-ParmVarDecl 0x5565b26bc088 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5565b26bc128 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5565b26bc128
| | `-ParmVarDecl 0x5565b26bc238 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5565b26be3b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5565b26ab1b8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5565b26ab218 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5565b26ab280 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5565b26ab2e8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5565b26ab350 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5565b26ab3b8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5565b26ab418 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5565b26ab478 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5565b26ab4e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5565b26ab568 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5565b26ab1b8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5565b26bb8e0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5565b26ab418 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5565b26bc320 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5565b26bc380 <col:21, line:755:5>
|-CXXConstructorDecl 0x5565b26ab708 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5565b26ab648 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5565b26ab800 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5565b26ab9e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5565b26ab8f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5565b26abcb8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5565b26abaa0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b26abb18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565b26abb90 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b26abed8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5565b26abd88 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5565b26abe00 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5565b26b44b8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5565b26abf98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5565b26ac010 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5565b26ac088 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5565b26b4610 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5565b26b4580 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b26b4758 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5565b26b46c8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5565b26b4850 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26ee198 prev 0x5565b26d1d30 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5565b26efc08 <line:148:18>
|-CXXRecordDecl 0x5565b26ee290 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5565b26ee320 <col:22, col:28> col:22 public
|-TypedefDecl 0x5565b26ee358 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5565b22c56c0 'uninitialized_type'
|   `-CXXRecord 0x5565b22c5628 'uninitialized_type'
|-CXXConstructorDecl 0x5565b26ee3e8 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x5565b26eff08 <col:27, line:16:5>
|   `-BinaryOperator 0x5565b26efee8 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5565b26efcf0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5565b26efcd8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5565b26efc88 <col:2> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|     | |   `-CXXThisExpr 0x5565b26efc78 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5565b26efcb8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5565b26efed0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5565b26efeb0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5565b26efd88 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5565b26efd70 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5565b26efd20 <col:13> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|         | |   `-CXXThisExpr 0x5565b26efd10 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5565b26efd50 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5565b26efe98 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5565b26efe78 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5565b26efe20 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5565b26efe08 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5565b26efdb8 <col:24> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|             | |   `-CXXThisExpr 0x5565b26efda8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5565b26efde8 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5565b26efe60 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5565b26efe40 <col:35> 'int' 0
|-CXXConstructorDecl 0x5565b26ee538 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5565b26ee4a8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5565b26f00d0 <col:61, line:24:5>
|   `-CallExpr 0x5565b26f0020 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5565b26f0008 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5565b26effe8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5565b23cf438 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5565b26f0070 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5565b26f0058 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5565b26eff78 <col:9> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|     |     `-CXXThisExpr 0x5565b26eff68 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5565b26f00a0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5565b26f0088 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5565b26effa8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5565b26ee4a8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5565b26f00b8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5565b26effc8 <col:22> 'int' 6
|-CXXConstructorDecl 0x5565b26ee688 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5565b26ee5f8 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5565b26f0140 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5565b26f0118 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5565b26f00e8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5565b26ee5f8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5565b26ee788 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5565b26f0888 <col:42, line:34:5>
|   `-ReturnStmt 0x5565b26f0878 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5565b26f0860 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5565b26f0830 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5565b26f0668 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5565b26f05e0 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5565b26f04d0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5565b26f04b8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5565b26f0168 <col:22> 'int' 65535
|-CXXMethodDecl 0x5565b26ee848 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5565b26ee8e8 <col:59> "" ""
|-TypedefDecl 0x5565b26eea68 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5565b26ee9e0 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5565b26d1dc0 'EtherAddress'
|   | `-CXXRecord 0x5565b26ee198 'EtherAddress'
|   `-ParenType 0x5565b26ee980 'bool () const' sugar
|     `-FunctionProtoType 0x5565b22183e0 'bool () const' const cdecl
|       `-BuiltinType 0x5565b21702f0 'bool'
|-CXXConversionDecl 0x5565b26eeba8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5565b26f0c68 <col:51, line:43:5>
|   `-ReturnStmt 0x5565b26f0c58 <line:42:2, col:70>
|     `-ConditionalOperator 0x5565b26f0c28 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5565b26f0b50 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5565b26f0a68 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5565b26f0a20 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5565b26f0a08 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5565b26f0950 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5565b26f0938 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5565b26f08b0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       | | |     |   `-CXXThisExpr 0x5565b26f08a0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5565b26f08e0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5565b26f0a50 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5565b26f0a38 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5565b26f09e8 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5565b26f09d0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5565b26f0980 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       | |       |   `-CXXThisExpr 0x5565b26f0970 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5565b26f09b0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5565b26f0b38 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5565b26f0b20 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5565b26f0b00 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5565b26f0ae8 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5565b26f0a98 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       |       |   `-CXXThisExpr 0x5565b26f0a88 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5565b26f0ac8 <col:39> 'int' 2
|       |-UnaryOperator 0x5565b26f0bd8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5565b26f0ba8 <col:45, col:59> 'bool () const' CXXMethod 0x5565b26eec78 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5565b26f0c10 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5565b26f0bf0 <col:70> 'int' 0
|-CXXMethodDecl 0x5565b26eec78 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5565b26f0e28 <col:34, line:51:5>
|   `-ReturnStmt 0x5565b26f0e18 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5565b26f0e00 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5565b26f0de0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5565b26f0dc8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565b26f0db0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565b26f0d70 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5565b26f0d30 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5565b26f0d00 <col:9> '<bound member function type>' ->data 0x5565b26ef110
|         |     |   `-CXXThisExpr 0x5565b26f0cf0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5565b26f0d50 <col:16> 'int' 0
|         `-IntegerLiteral 0x5565b26f0d90 <col:21> 'int' 1
|-CXXMethodDecl 0x5565b26eed38 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5565b26f0fe8 <col:34, line:59:5>
|   `-ReturnStmt 0x5565b26f0fd8 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5565b26f0fc0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5565b26f0fa0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5565b26f0f88 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5565b26f0f70 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5565b26f0f30 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5565b26f0ef0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5565b26f0ec0 <col:9> '<bound member function type>' ->data 0x5565b26ef110
|         |     |   `-CXXThisExpr 0x5565b26f0eb0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5565b26f0f10 <col:16> 'int' 0
|         `-IntegerLiteral 0x5565b26f0f50 <col:21> 'int' 2
|-CXXMethodDecl 0x5565b26eedf8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5565b26f12e8 <col:38, line:66:5>
|   `-ReturnStmt 0x5565b26f12d8 <line:65:2, col:43>
|     `-BinaryOperator 0x5565b26f12b8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5565b26f1278 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5565b26f1190 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5565b26f1148 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5565b26f1130 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5565b26f1078 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5565b26f1060 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5565b26f1010 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       | | |     |   `-CXXThisExpr 0x5565b26f1000 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5565b26f1040 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5565b26f1178 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5565b26f1160 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5565b26f1110 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5565b26f10f8 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5565b26f10a8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       | |       |   `-CXXThisExpr 0x5565b26f1098 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5565b26f10d8 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5565b26f1260 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5565b26f1248 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5565b26f1228 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5565b26f1210 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5565b26f11c0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       |       |   `-CXXThisExpr 0x5565b26f11b0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5565b26f11f0 <col:37> 'int' 2
|       `-IntegerLiteral 0x5565b26f1298 <col:43> 'int' 196605
|-CXXMethodDecl 0x5565b26eef78 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5565b26eeeb0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5565b26f1438 <col:64, line:75:5>
|   `-ReturnStmt 0x5565b26f1428 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5565b26f1408 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5565b26f13d8 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5565b26eedf8
|         `-CXXReinterpretCastExpr 0x5565b26f1348 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5565b26f1330 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5565b26f1300 <col:48> 'const unsigned char *' lvalue ParmVar 0x5565b26eeeb0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5565b26ef048 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5565b26f7e80 <col:34, line:80:5>
|   `-ReturnStmt 0x5565b26f7e70 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5565b26f7e40 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5565b26f14a8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5565b26f1460 <col:43> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|           `-CXXThisExpr 0x5565b26f1450 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5565b26ef110 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5565b26f7f48 <col:46, line:85:5>
|   `-ReturnStmt 0x5565b26f7f38 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5565b26f7f08 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5565b26f7ef0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5565b26f7ea8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|           `-CXXThisExpr 0x5565b26f7e98 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5565b26ef258 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5565b26f7fc8 <col:42, line:91:5>
|   `-ReturnStmt 0x5565b26f7fb8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5565b26f7fa0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5565b26f7f70 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|         `-CXXThisExpr 0x5565b26f7f60 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5565b26ef348 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5565b26f83d8 <col:36, line:97:5>
|   `-ReturnStmt 0x5565b26f83c8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5565b26f83a8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5565b26f8228 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5565b26f8208 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5565b26f81f0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5565b26f81d8 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5565b26f8058 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5565b26f8040 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5565b26f7ff0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       |   |     |   `-CXXThisExpr 0x5565b26f7fe0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5565b26f8020 <col:16> 'int' 2
|       |   `-ParenExpr 0x5565b26f81b8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5565b26f8198 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5565b26f8150 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5565b26f8138 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5565b26f8120 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5565b26f80f0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5565b26f80d8 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5565b26f8088 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|       |       |       |   `-CXXThisExpr 0x5565b26f8078 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5565b26f80b8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5565b26f8178 <col:43> 'int' 16
|       `-ParenExpr 0x5565b26f8388 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5565b26f8368 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5565b26f8320 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5565b26f8308 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5565b26f82f0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5565b26f82c0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5565b26f82a8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5565b26f8258 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5565b26efa08
|           |       |   `-CXXThisExpr 0x5565b26f8248 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5565b26f8288 <col:24> 'int' 0
|           `-IntegerLiteral 0x5565b26f8348 <col:30> 'int' 9
|-CXXMethodDecl 0x5565b26ef408 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5565b26f84e8 <col:35, line:111:5>
|   `-ReturnStmt 0x5565b26f84d8 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5565b26f84c0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5565b26f8490 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5565b26f8478 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5565b26f8458 <col:9, col:22> 'String' (CXXTemporary 0x5565b26f8458)
|             `-CXXMemberCallExpr 0x5565b26f8430 <col:9, col:22> 'String'
|               `-MemberExpr 0x5565b26f8400 <col:9> '<bound member function type>' ->unparse_dash 0x5565b26ef588
|                 `-CXXThisExpr 0x5565b26f83f0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5565b26ef4c8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5565b26ef588 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5565b26ef648 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5565b26ef6e8 <col:44> "" ""
|-CXXConversionDecl 0x5565b26ef788 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5565b26ef830 <col:51> "" ""
|-TypedefDecl 0x5565b26ef8e8 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5565b26ef8b0 'const EtherAddress &'
|   `-QualType 0x5565b26d1dc1 'const EtherAddress' const
|     `-RecordType 0x5565b26d1dc0 'EtherAddress'
|       `-CXXRecord 0x5565b26ee198 'EtherAddress'
|-AccessSpecDecl 0x5565b26ef940 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5565b26efa08 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5565b26efb58 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5565b26efa68 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5565b26f8790 <col:30, line:146:5>
|   `-BinaryOperator 0x5565b26f8770 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5565b26f8578 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5565b26f8560 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5565b26f8510 <col:2> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|     | |   `-CXXThisExpr 0x5565b26f8500 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5565b26f8540 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5565b26f8758 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5565b26f8738 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5565b26f8610 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5565b26f85f8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5565b26f85a8 <col:13> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|         | |   `-CXXThisExpr 0x5565b26f8598 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5565b26f85d8 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5565b26f8720 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5565b26f8700 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5565b26f86a8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5565b26f8690 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5565b26f8640 <col:24> 'uint16_t [3]' lvalue ->_data 0x5565b26efa08
|             | |   `-CXXThisExpr 0x5565b26f8630 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5565b26f8670 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5565b26f86e8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5565b26f86c8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5565b26efa68 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5565b26f0188 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5565b26f0188
| `-ParmVarDecl 0x5565b26f0298 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5565b26f0338 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5565b26f0448 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5565b26efa08 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5565b26f07d0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5565b26f0758 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5565b26f0710 <col:7> 'uint16_t [3]' xvalue ._data 0x5565b26efa08
| |   |   `-CXXStaticCastExpr 0x5565b26f06e0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5565b26f06b0 <col:7> 'EtherAddress' lvalue ParmVar 0x5565b26f0448 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5565b26f07b8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5565b26f0798 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5565b26f0780 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5565b26f0758 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5565b26f0710 <col:7> 'uint16_t [3]' xvalue ._data 0x5565b26efa08
| |       |     `-CXXStaticCastExpr 0x5565b26f06e0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5565b26f06b0 <col:7> 'EtherAddress' lvalue ParmVar 0x5565b26f0448 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5565b26f0770 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5565b26f0820 <col:7>
`-CXXDestructorDecl 0x5565b26f0500 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5565b26bc420 prev 0x5565b2698ce0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5565b26bc558 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5565b26bc5e8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5565b26bc690 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5565b26bc730 <col:20>
| `-OptimizeNoneAttr 0x5565b26bc788 <col:30>
|-CXXMethodDecl 0x5565b26bc7d8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5565b26bc878 <col:20>
| `-OptimizeNoneAttr 0x5565b26bc8d0 <col:30>
|-CXXMethodDecl 0x5565b26bc920 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5565b26bc9e8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5565b26bcab0 <line:784:5, col:40> col:27 used mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5565b26bcbc8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5565b26bcc90 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5565b26bcd30 <col:20>
| `-OptimizeNoneAttr 0x5565b26bcd88 <col:30>
|-CXXMethodDecl 0x5565b26bcdf8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5565b26bce98 <col:20>
| `-OptimizeNoneAttr 0x5565b26bcef0 <col:30>
|-CXXMethodDecl 0x5565b26bcf98 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5565b26bd038 <col:20>
| `-OptimizeNoneAttr 0x5565b26bd090 <col:30>
|-CXXMethodDecl 0x5565b26bd0e0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5565b26bd1f8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5565b26bd318 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5565b26bd438 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5565b26bd500 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5565b26bd5a0 <col:62> "" ""
|-AccessSpecDecl 0x5565b26bd610 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5565b26bd670 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5565b26be268 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5565b26be490 <col:29, col:31>
|-CXXMethodDecl 0x5565b26bd738 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5565b26bd878 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5565b26bd7e8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5565b26bd970 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5565b26be4a0 <col:23, col:25>
|-CXXMethodDecl 0x5565b26bdb28 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5565b26bda60 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5565b26bddf8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5565b26bdbe0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5565b26bdc58 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5565b26bdcd0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5565b26bdf88 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5565b26bdec0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5565b26be080 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5565b26be0e8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5565b26be0e8
  `-ParmVarDecl 0x5565b26be1f8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>
