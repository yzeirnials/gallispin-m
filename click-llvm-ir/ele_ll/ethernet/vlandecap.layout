
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e8c9c8 prev 0x555d15e84228 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15e8cac0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x555d15e8cb50 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x555d15e8cbc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x555d15e8cc88 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x555d15e8cd50 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x555d15e8cec8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x555d15e8ce00 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x555d15e8cf70 <col:24>
| `-OptimizeNoneAttr 0x555d15e8cfc8 <col:34>
|-CXXMethodDecl 0x555d15e8d010 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x555d15e8d2c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x555d15e8d0c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555d15e8d138 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x555d15e8d1b8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x555d15e8d380 <line:229:7, col:14> col:7 private
|-FieldDecl 0x555d15e8d3b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x555d15e8d420 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x555d15e8d4a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x555d15e8d7c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x555d15e8d560 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555d15e8d5d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x555d15e8d650 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x555d15e8d6d0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x555d15e8d8e0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x555d15e941e0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555d15e941e0
| `-ParmVarDecl 0x555d15e942f8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x555d15e94398 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555d15e94398
| `-ParmVarDecl 0x555d15e944a8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x555d15e98428 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e7fbf0 prev 0x555d15e7f990 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d15e7fce8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x555d15e7fd78 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x555d15e7fdd8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x555d15e7fec8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x555d15e7ffc8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x555d15e80198 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x555d15e80048 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x555d15e800c0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x555d15e80328 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x555d15e80260 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x555d15e803d0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x555d15e80508 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x555d15e80440 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x555d15e806a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x555d15e805e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x555d15e80848 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x555d15e80788 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x555d15e808f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x555d15e809f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x555d15e80ad0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e809d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x555d15e809b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x555d15e80a80 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x555d15e80ae8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e80a60 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x555d15e80a40 <col:44> 'int' 2
|-CXXMethodDecl 0x555d15e80c30 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x555d15e80b18 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x555d15e80b98 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x555d15e80d88 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x555d15e80cf8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x555d15e80f98 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x555d15e80e48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x555d15e80ec0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x555d15e81048 <col:20>
| `-OptimizeNoneAttr 0x555d15e810a0 <col:30>
|-CXXMethodDecl 0x555d15e811a8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x555d15e810e0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x555d15e81250 <col:20>
| `-OptimizeNoneAttr 0x555d15e812a8 <col:30>
|-CXXMethodDecl 0x555d15e812f8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x555d15e813c0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x555d15e81480 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x555d15e81508 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x555d15e81590 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x555d15e81618 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x555d15e816a0 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x555d15e81730 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x555d15e817f0 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x555d15e81878 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x555d15e81900 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x555d15e81988 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x555d15e81a10 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x555d15e81a98 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x555d15e81b28 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x555d15e81be8 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x555d15e81c78 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x555d15e81dc8 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x555d15e81d30 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x555d15e81f50 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x555d15e81e88 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x555d15e821f0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x555d15e82008 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x555d15e82088 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x555d15e82108 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x555d15e822a8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x555d15e823b0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d15e82640 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e82390 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15e82370 <col:33> 'int' 0
| |-EnumConstantDecl 0x555d15e82440 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d15e82658 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e82420 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x555d15e82400 <col:32> 'int' 20
| |-EnumConstantDecl 0x555d15e824d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d15e82670 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e824b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x555d15e82490 <col:38> 'int' 90
| |-EnumConstantDecl 0x555d15e82560 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x555d15e82688 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e82540 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x555d15e82520 <col:35> 'int' 100
| `-EnumConstantDecl 0x555d15e825f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x555d15e826a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e825d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x555d15e825b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x555d15e826e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x555d15e829f0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d15e82860 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x555d15e828d8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e82ac0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x555d15e82c40 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x555d15e82b70 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e82e48 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d15e82cf8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x555d15e82d70 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e82f48 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x555d15e82fe8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x555d15e830b0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e83140 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x555d15e83370 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e83120 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x555d15e83100 <col:36> 'int' EnumConstant 0x555d15e830b0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e83190 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e831e0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e83230 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e83280 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x555d15e832d0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x555d15e83320 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x555d15e83500 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x555d15e83398 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x555d15e835c8 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x555d15e83688 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x555d15e83748 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x555d15e83808 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x555d15e838f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x555d15e839c0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x555d15e83b40 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x555d15e83a70 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x555d15e83c68 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x555d15e83e68 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x555d15e83d18 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x555d15e83d98 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x555d15e90698 <col:54, line:127:5>
|   |-ParenExpr 0x555d15e90548 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x555d15e90518 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e90200 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555d15e901d8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x555d15e901c0 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x555d15e901a8 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x555d15e90178 <col:31> 'Router *' lvalue ->_router 0x555d15e8e090
|   |   |         `-CXXThisExpr 0x555d15e90168 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555d15e90260 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e90240 <col:48> 'int' 0
|   |   `-CallExpr 0x555d15e90478 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x555d15e90460 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e90440 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e904b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e902d0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x555d15e904d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e902f0 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x555d15e904e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e90328 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x555d15e90500 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e90428 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e90410 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e903c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x555d15e905e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x555d15e90578 <col:9> 'Router *' lvalue ->_router 0x555d15e8e090
|   | | `-CXXThisExpr 0x555d15e90568 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x555d15e905c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d15e905a8 <col:19> 'Router *' lvalue ParmVar 0x555d15e83d18 'r' 'Router *'
|   `-BinaryOperator 0x555d15e90678 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x555d15e90610 <col:9> 'int' lvalue ->_eindex 0x555d15e8e0f8
|     | `-CXXThisExpr 0x555d15e90600 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x555d15e90660 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e90640 <col:19> 'int' lvalue ParmVar 0x555d15e83d98 'eindex' 'int'
|-CXXMethodDecl 0x555d15e83ff0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x555d15e83f28 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x555d15e840c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x555d15e84188 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x555d15e84228 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x555d15e84478 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x555d15e842f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x555d15e84370 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x555d15e84528 <col:20>
| `-OptimizeNoneAttr 0x555d15e84580 <col:30>
|-CXXMethodDecl 0x555d15e84688 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555d15e845c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x555d15e84730 <col:20>
| `-OptimizeNoneAttr 0x555d15e84788 <col:30>
|-CXXMethodDecl 0x555d15e84858 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x555d15e847c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x555d15e84900 <col:20>
| `-OptimizeNoneAttr 0x555d15e84958 <col:30>
|-CXXMethodDecl 0x555d15e84ae8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x555d15e84990 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x555d15e84a10 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x555d15e84c78 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555d15e84bb0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555d15e84dc8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555d15e84d38 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x555d15e84f18 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x555d15e84e88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555d15e85068 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x555d15e84fd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x555d15e85328 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x555d15e85120 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x555d15e851a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x555d15e85248 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x555d15e85400 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x555d15e854c0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x555d15e85790 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x555d15e85640 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x555d15e856b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e858b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x555d15e85a90 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x555d15e85970 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x555d15e859f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x555d15e85c78 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x555d15e85b58 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x555d15e85bd8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x555d15e85fe8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555d15e85d38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d15e85db0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d15e85e30 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d15e8fc78 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15e8fc58 <col:106> 'int' 0
| `-ParmVarDecl 0x555d15e85ea8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fcb0 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fc90 <col:126> 'int' 0
|-CXXMethodDecl 0x555d15e86368 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d15e860b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d15e86130 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d15e861b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x555d15e86228 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fce8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fcc8 <col:114> 'int' 0
|-CXXMethodDecl 0x555d15e866f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d15e86440 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x555d15e864b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x555d15e86538 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x555d15e8fd00 <col:96> 'int' 0
| `-ParmVarDecl 0x555d15e865b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fd40 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fd20 <col:116> 'int' 0
|-CXXMethodDecl 0x555d15e86a78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x555d15e867c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555d15e86840 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e868c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d15e8fd78 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15e8fd58 <col:109> 'int' 0
| `-ParmVarDecl 0x555d15e86938 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fdb0 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fd90 <col:129> 'int' 0
|-CXXMethodDecl 0x555d15e86df8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d15e86b48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x555d15e86bc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e86c40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x555d15e86cb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fde8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fdc8 <col:117> 'int' 0
|-CXXMethodDecl 0x555d15e87188 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x555d15e86ed0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e86f48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e86fc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x555d15e8fe00 <col:99> 'int' 0
| `-ParmVarDecl 0x555d15e87040 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555d15e8fe40 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555d15e8fe20 <col:119> 'int' 0
|-CXXMethodDecl 0x555d15e875a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x555d15e87258 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555d15e872d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555d15e87350 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e873d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555d15e8fe78 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15e8fe58 <col:108> 'int' 0
| `-ParmVarDecl 0x555d15e87450 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x555d15e8feb0 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x555d15e8fe90 <col:141> 'int' 0
|-CXXMethodDecl 0x555d15e879c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555d15e87680 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x555d15e87700 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x555d15e87778 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e877f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x555d15e87878 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555d15e8fec8 <col:121> 'int' 0
|-CXXMethodDecl 0x555d15e87df8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x555d15e87aa8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x555d15e87b28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x555d15e87ba0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e87c20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x555d15e8fee8 <col:98> 'int' 0
| `-ParmVarDecl 0x555d15e87ca0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555d15e8ff08 <col:123> 'int' 0
|-CXXMethodDecl 0x555d15e880c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x555d15e87ed0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x555d15e87f50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x555d15e87fd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x555d15e8ff28 <col:80> 'int' 0
|-EnumDecl 0x555d15e88178 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x555d15e88280 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d15e88510 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e88260 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x555d15e88240 <col:42> 'int' 1
| |-EnumConstantDecl 0x555d15e88310 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d15e88528 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e882f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x555d15e882d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x555d15e883a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d15e88540 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e88380 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x555d15e88360 <col:44> 'int' 4
| |-EnumConstantDecl 0x555d15e88430 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x555d15e88558 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e88410 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x555d15e883f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x555d15e884c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x555d15e88570 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e884a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x555d15e88480 <col:34> 'int' 6
|-CXXMethodDecl 0x555d15e88828 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x555d15e88598 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x555d15e88638 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x555d15e886b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x555d15e88730 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x555d15e8ffe0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x555d15e8ffc8 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x555d15e8ffb0 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x555d15e8ff90 <col:98, col:105> 'String' (CXXTemporary 0x555d15e8ff90)
|           `-CXXTemporaryObjectExpr 0x555d15e8ff58 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x555d15e88ac8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x555d15e888f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555d15e88970 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x555d15e889e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555d15e90090 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555d15e90078 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555d15e90060 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555d15e90040 <col:94, col:101> 'String' (CXXTemporary 0x555d15e90040)
| |         `-CXXTemporaryObjectExpr 0x555d15e90008 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x555d15e90880 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x555d15e907f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x555d15e907c8 <col:9> '<bound member function type>' ->add_task_handlers 0x555d15e88828
|     | `-CXXThisExpr 0x555d15e907b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555d15e90838 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d15e90738 <col:27> 'Task *' lvalue ParmVar 0x555d15e888f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x555d15e90850 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d15e90758 <col:33> 'NotifierSignal *' lvalue ParmVar 0x555d15e88970 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x555d15e90868 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555d15e90778 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555d15e884c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555d15e90798 <col:62> 'const String' lvalue ParmVar 0x555d15e889e8 'prefix' 'const String &'
|-CXXMethodDecl 0x555d15e88cd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x555d15e88b90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555d15e88c08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555d15e90140 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555d15e90128 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555d15e90110 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555d15e900f0 <col:70, col:77> 'String' (CXXTemporary 0x555d15e900f0)
| |         `-CXXTemporaryObjectExpr 0x555d15e900b8 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x555d15e90a58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x555d15e909d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x555d15e909a0 <col:9> '<bound member function type>' ->add_task_handlers 0x555d15e88828
|     | `-CXXThisExpr 0x555d15e90990 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555d15e90a10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d15e90910 <col:27> 'Task *' lvalue ParmVar 0x555d15e88b90 'task' 'Task *'
|     |-ImplicitCastExpr 0x555d15e90a28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x555d15e90930 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x555d15e90a40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555d15e90950 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x555d15e884c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555d15e90970 <col:57> 'const String' lvalue ParmVar 0x555d15e88c08 'prefix' 'const String &'
|-CXXMethodDecl 0x555d15e88fb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x555d15e88da0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e88e20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e88e98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x555d15e89268 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x555d15e89088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e89108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e89188 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x555d15e89558 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555d15e89338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e893b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e89430 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x555d15e89808 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x555d15e89628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e896a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e89728 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x555d15e89ab8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x555d15e898d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e89958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e899d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x555d15e89d68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x555d15e89b88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e89c08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e89c80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x555d15e8a018 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x555d15e89e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e89eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e89f38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x555d15e8a2c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x555d15e8a0e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8a168 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8a1e8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x555d15e8a578 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x555d15e8a398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8a418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8a498 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x555d15e8a828 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x555d15e8a648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8a6c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8a748 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x555d15e8aa90 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555d15e8a8f8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555d15e8a978 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555d15e8a9f0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x555d15e8ad38 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x555d15e8ab60 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555d15e8abe0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555d15e8ac58 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x555d15e8afe8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x555d15e8ae08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8ae88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8af08 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x555d15e8b298 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x555d15e8b0b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8b138 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8b1b0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x555d15e8b588 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x555d15e8b368 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8b3e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8b460 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x555d15e8b838 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x555d15e8b658 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8b6d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555d15e8b750 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x555d15e8bb68 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x555d15e8b908 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555d15e8b988 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x555d15e8ba00 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x555d15e8ba78 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d15e90158 <col:93> 'bool' false
|-CXXMethodDecl 0x555d15e8bd50 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d15e8bc38 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x555d15e8bcb8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x555d15e8bf28 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d15e8be10 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x555d15e8be90 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x555d15e8c208 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555d15e8bfe8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x555d15e8c060 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x555d15e8c0e0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x555d15e8c158 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e8c4f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555d15e8c2d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x555d15e8c350 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x555d15e8c3d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x555d15e8c448 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e8c730 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x555d15e8c5d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x555d15e8c650 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x555d15e8c918 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x555d15e8c7f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x555d15e8c878 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x555d15e8c9c8 prev 0x555d15e84228 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d15e8cac0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x555d15e8cb50 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x555d15e8cbc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x555d15e8cc88 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x555d15e8cd50 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x555d15e8cec8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x555d15e8ce00 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x555d15e8cf70 <col:24>
| | `-OptimizeNoneAttr 0x555d15e8cfc8 <col:34>
| |-CXXMethodDecl 0x555d15e8d010 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x555d15e8d2c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x555d15e8d0c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555d15e8d138 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x555d15e8d1b8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x555d15e8d380 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x555d15e8d3b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x555d15e8d420 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x555d15e8d4a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x555d15e8d7c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x555d15e8d560 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555d15e8d5d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x555d15e8d650 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x555d15e8d6d0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x555d15e8d8e0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x555d15e941e0 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x555d15e941e0
| | `-ParmVarDecl 0x555d15e942f8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x555d15e94398 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x555d15e94398
| | `-ParmVarDecl 0x555d15e944a8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x555d15e98428 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555d15e8d958 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x555d15e8d9f8 <col:38> "" ""
|-CXXMethodDecl 0x555d15e8da88 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x555d15e8db28 <col:44> "" ""
|-AccessSpecDecl 0x555d15e8db98 <line:260:3, col:10> col:3 private
|-EnumDecl 0x555d15e8dbc0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x555d15e8dcc0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x555d15e8dd10 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e8dca0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x555d15e8dc80 <col:27> 'int' 4
|-FieldDecl 0x555d15e8ddc8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x555d15e8df78 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x555d15e8e030 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x555d15e8e090 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x555d15e8e0f8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x555d15e8e248 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x555d15e8e188 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x555d15e8e3f8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x555d15e8e308 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x555d15e8e5d8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x555d15e8e4b8 <col:20> col:23 'int'
| `-ParmVarDecl 0x555d15e8e538 <col:25> col:28 'int'
|-CXXMethodDecl 0x555d15e8e880 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x555d15e8e6a0 <col:23> col:26 'int'
| |-ParmVarDecl 0x555d15e8e720 <col:28> col:31 'int'
| `-ParmVarDecl 0x555d15e8e798 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x555d15e8e938 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x555d15e8ea00 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x555d15e8ea50 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x555d15e8eaa0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x555d15e8ec80 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x555d15e8eb30 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x555d15e8eba8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e8ef28 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x555d15e8ed48 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x555d15e8edc8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x555d15e8ee40 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e8f148 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x555d15e8eff8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x555d15e8f078 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x555d15e8f480 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x555d15e8f208 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x555d15e8f288 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x555d15e8f300 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x555d15e8f380 <col:57> col:60 'int'
|-CXXMethodDecl 0x555d15e8f668 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555d15e8f550 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x555d15e8f5d0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x555d15e8f7b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x555d15e8f728 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x555d15e8fb38 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x555d15e8f878 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x555d15e8f8f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x555d15e8f970 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x555d15e8f9f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x555d15e8fc18 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class VLANDecap
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _anno
       110 |   uint16_t _ethertype
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e97348 <../elements/ethernet/vlandecap.hh:40:1, line:56:1> line:40:7 class VLANDecap definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x555d15e974a8 <col:1, col:7> col:7 implicit referenced class VLANDecap
|-AccessSpecDecl 0x555d15e97538 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x555d15e975c0 <line:42:5, col:15> col:5 VLANDecap 'void ()'
|-CXXDestructorDecl 0x555d15e976b0 <line:43:5, col:16> col:5 ~VLANDecap 'void ()' noexcept-unevaluated 0x555d15e976b0
| `-Overrides: [ 0x555d15e7fec8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x555d15e977e0 <line:45:5, col:58> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x555d15e812f8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x555d15e98208 <col:36, col:58>
|   `-ReturnStmt 0x555d15e981f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x555d15e981e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x555d15e981b8 <col:45> 'const char [10]' lvalue "VLANDecap"
|-CXXMethodDecl 0x555d15e978a8 <line:46:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x555d15e813c0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x555d15e98268 <col:36, col:56>
|   `-ReturnStmt 0x555d15e98258 <col:38, col:45>
|     `-ImplicitCastExpr 0x555d15e98240 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x555d15e98220 <col:45> 'const char []' lvalue Var 0x555d15e81618 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x555d15e97b80 <line:48:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x555d15e829f0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x555d15e97a30 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x555d15e97aa8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e97cd0 <line:49:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x555d15e80508 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x555d15e97c40 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x555d15e97d78 <line:51:1, col:8> col:1 private
|-FieldDecl 0x555d15e97db0 <line:53:5, col:10> col:10 _anno 'bool'
|-FieldDecl 0x555d15e97e10 <line:54:5, col:14> col:14 _ethertype 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x555d15e97e88 <line:40:7> col:7 implicit VLANDecap 'void (const VLANDecap &)' inline default_delete noexcept-unevaluated 0x555d15e97e88
| `-ParmVarDecl 0x555d15e97f98 <col:7> col:7 'const VLANDecap &'
`-CXXMethodDecl 0x555d15e98038 <col:7> col:7 implicit operator= 'VLANDecap &(const VLANDecap &)' inline default_delete noexcept-unevaluated 0x555d15e98038
  `-ParmVarDecl 0x555d15e98148 <col:7> col:7 'const VLANDecap &'

Layout: <CGRecordLayout
  LLVMType:%class.VLANDecap = type { %class.Element.base, i8, i16 }
  NonVirtualBaseLLVMType:%class.VLANDecap = type { %class.Element.base, i8, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15b89d10 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x555d15b89e28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x555d15b89ec8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x555d15b89f28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x555d15b89f88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x555d15b8a038 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15b8a340 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15b8a458 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x555d15b8a500 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x555d15b8a568 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x555d15b8a5f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x555d15b904f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d15b90928 <col:12>
|-CXXConstructorDecl 0x555d15b905f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15b90708 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d15b8a500 'data' 'const char *'
| | `-ImplicitCastExpr 0x555d15b92eb0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x555d15b92e80 <col:12> 'const char *const' lvalue .data 0x555d15b8a500
| |     `-DeclRefExpr 0x555d15b92e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d15b8a568 'length' 'int'
| | `-ImplicitCastExpr 0x555d15b92f40 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d15b92f10 <col:12> 'const int' lvalue .length 0x555d15b8a568
| |     `-DeclRefExpr 0x555d15b92ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x555d15b8a5f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x555d15b92fd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x555d15b92fa0 <col:12> 'String::memo_t *const' lvalue .memo 0x555d15b8a5f8
| |     `-DeclRefExpr 0x555d15b92f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| `-CompoundStmt 0x555d15b93028 <col:12>
|-CXXConstructorDecl 0x555d15b907a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d15b907a8
| `-ParmVarDecl 0x555d15b908b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x555d15b95da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x555d15ba17d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15ba18e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x555d15ba1e00 <col:12>
|   |-BinaryOperator 0x555d15ba1c18 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555d15ba1bd0 <col:12> 'const char *' lvalue ->data 0x555d15b8a500
|   | | `-CXXThisExpr 0x555d15ba1bc0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d15ba1c00 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x555d15ba1b90 <col:12> 'const char *const' lvalue .data 0x555d15b8a500
|   |     `-DeclRefExpr 0x555d15ba1b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555d15ba1ce0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x555d15ba1c98 <col:12> 'int' lvalue ->length 0x555d15b8a568
|   | | `-CXXThisExpr 0x555d15ba1c88 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d15ba1cc8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x555d15ba1c58 <col:12> 'const int' lvalue .length 0x555d15b8a568
|   |     `-DeclRefExpr 0x555d15ba1c38 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x555d15ba1da8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x555d15ba1d60 <col:12> 'String::memo_t *' lvalue ->memo 0x555d15b8a5f8
|   | | `-CXXThisExpr 0x555d15ba1d50 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x555d15ba1d90 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x555d15ba1d20 <col:12> 'String::memo_t *const' lvalue .memo 0x555d15b8a5f8
|   |     `-DeclRefExpr 0x555d15ba1d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x555d15ba1df0 <col:12>
|     `-UnaryOperator 0x555d15ba1dd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15ba1dc8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x555d15ba1958 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d15ba1958
  `-ParmVarDecl 0x555d15ba1a68 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15b811f0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d15b81308 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x555d15b81398 <col:16, col:22> col:16 public
|-TypedefDecl 0x555d15b813d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555d15855dc0 'const char *'
|   `-QualType 0x555d15855311 'const char' const
|     `-BuiltinType 0x555d15855310 'char'
|-TypedefDecl 0x555d15b81460 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x555d15b81430 'String::const_iterator' sugar
|   |-Typedef 0x555d15b813d8 'const_iterator'
|   `-PointerType 0x555d15855dc0 'const char *'
|     `-QualType 0x555d15855311 'const char' const
|       `-BuiltinType 0x555d15855310 'char'
|-TypedefDecl 0x555d15b815d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x555d15b81540 'int (String::*)() const'
|   |-RecordType 0x555d15b81280 'String'
|   | `-CXXRecord 0x555d15b811f0 'String'
|   `-ParenType 0x555d15b814e0 'int () const' sugar
|     `-FunctionProtoType 0x555d15b560c0 'int () const' const cdecl
|       `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15b81638 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x555d159aa8d0 'int64_t' sugar
|   |-Typedef 0x555d158be2d0 'int64_t'
|   `-TypedefType 0x555d158974d0 '__int64_t' sugar
|     |-Typedef 0x555d158970a8 '__int64_t'
|     `-BuiltinType 0x555d15855390 'long'
|-TypedefDecl 0x555d15b816a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x555d159aa7f0 'uint64_t' sugar
|   |-Typedef 0x555d158be470 'uint64_t'
|   `-TypedefType 0x555d15897560 '__uint64_t' sugar
|     |-Typedef 0x555d15897118 '__uint64_t'
|     `-BuiltinType 0x555d15855430 'unsigned long'
|-TypedefDecl 0x555d15b81730 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x555d15b81700 'String::intmax_t' sugar
|   |-Typedef 0x555d15b81638 'intmax_t'
|   `-TypedefType 0x555d159aa8d0 'int64_t' sugar
|     |-Typedef 0x555d158be2d0 'int64_t'
|     `-TypedefType 0x555d158974d0 '__int64_t' sugar
|       |-Typedef 0x555d158970a8 '__int64_t'
|       `-BuiltinType 0x555d15855390 'long'
|-TypedefDecl 0x555d15b817c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x555d15b81790 'String::uintmax_t' sugar
|   |-Typedef 0x555d15b816a0 'uintmax_t'
|   `-TypedefType 0x555d159aa7f0 'uint64_t' sugar
|     |-Typedef 0x555d158be470 'uint64_t'
|     `-TypedefType 0x555d15897560 '__uint64_t' sugar
|       |-Typedef 0x555d15897118 '__uint64_t'
|       `-BuiltinType 0x555d15855430 'unsigned long'
|-CXXConstructorDecl 0x555d15b81880 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x555d15b81a28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x555d15b81968 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x555d15b81bd8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x555d15b81b18 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x555d15b81d30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x555d15b81ca0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x555d15b81f48 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x555d15b81df8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x555d15b81e78 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x555d15b82168 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x555d15b82018 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x555d15b82098 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x555d15b82388 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555d15b82238 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x555d15b822b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x555d15b825a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x555d15b82458 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x555d15b824d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x555d15b82738 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x555d15b82670 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x555d15b828b8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x555d15b827f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x555d15b82a48 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x555d15b82980 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x555d15b82ba0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x555d15b82b10 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x555d15b82cf8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x555d15b82c68 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x555d15b82e50 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x555d15b82dc0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x555d15b82fd8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x555d15b82f18 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x555d15b83168 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x555d15b830a0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x555d15b832f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x555d15b83230 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x555d15b83488 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x555d15b833c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x555d15b83580 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x555d15b836a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x555d15b83828 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x555d15b83760 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x555d15b83978 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x555d15b838e8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x555d15b83a20 <col:63> "" ""
|-CXXMethodDecl 0x555d15b83b68 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x555d15b83aa8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x555d15b83d78 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x555d15b83c28 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x555d15b83ca8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x555d15b83fe8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x555d15b83e40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x555d15b83f10 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x555d15b842c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x555d15b840a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x555d15b84128 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x555d15b8ffc0 <col:55> 'int' 10
| `-ParmVarDecl 0x555d15b841a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d15b8ffe0 <col:76> 'bool' true
|-CXXMethodDecl 0x555d15b845a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x555d15b84390 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x555d15b84410 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x555d15b8fff0 <col:56> 'int' 10
| `-ParmVarDecl 0x555d15b84488 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d15b90010 <col:77> 'bool' true
|-CXXMethodDecl 0x555d15b846b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x555d15b84778 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x555d15b84840 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x555d15b848e0 <col:20>
| `-OptimizeNoneAttr 0x555d15b84938 <col:30>
|-CXXConversionDecl 0x555d15b84a28 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x555d15b84af8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x555d15b84bb8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x555d15b84ca8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555d15b84d68 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x555d15b84ee8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x555d15b84e20 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x555d15b85038 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x555d15b84fa8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x555d15b85128 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x555d15b851e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x555d15b85438 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x555d15b852a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x555d15b85320 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x555d15b85698 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x555d15b85500 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x555d15b85580 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x555d15b85768 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15b85978 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x555d15b85820 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x555d15b858a0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x555d15b85b98 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x555d15b85a40 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x555d15b85ac0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x555d15b85d28 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x555d15b85c60 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x555d15b85e18 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x555d15b85f88 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x555d15b85ec8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d15b86198 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x555d15b86048 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555d15b860c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555d15b863b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x555d15b86258 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x555d15b862d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x555d15b86540 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x555d15b86470 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d15b86760 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x555d15b86600 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x555d15b86680 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555d15b868b0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x555d15b86820 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x555d15b86a88 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x555d15b86970 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555d15b869f0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x555d15b86bd8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x555d15b86b48 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x555d15b86df0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x555d15b86c90 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x555d15b86d10 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x555d15b90020 <col:39> 'int' 0
|-CXXMethodDecl 0x555d15b87010 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x555d15b86eb0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x555d15b86f30 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x555d15b90040 <col:48> 'int' 0
|-CXXMethodDecl 0x555d15b871f0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x555d15b870d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x555d15b87150 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x555d15b90060 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x555d15b872c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x555d15b87380 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x555d15b87440 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x555d15b87500 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x555d15b875c0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x555d15b87768 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x555d15b87670 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x555d15b878e8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x555d15b87820 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x555d15b87a68 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x555d15b879a8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x555d15b87be8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x555d15b87b20 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x555d15b87d30 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x555d15b87ca0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x555d15b87f20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x555d15b87df0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x555d15b880f8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x555d15b87fe0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x555d15b88060 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x555d15b882d8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x555d15b881c0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x555d15b88240 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x555d15b88428 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x555d15b88398 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x555d15b88638 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x555d15b884e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x555d15b88568 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x555d15b88798 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x555d15b88700 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x555d15b888f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x555d15b88858 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x555d15b88998 <col:57> "" ""
|-CXXMethodDecl 0x555d15b88aa8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x555d15b88a18 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x555d15b88bf8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x555d15b88b68 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x555d15b88d78 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x555d15b88cb0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x555d15b88e40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x555d15b88f00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x555d15b88fc0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x555d15b89060 <col:49> "" ""
|-CXXMethodDecl 0x555d15b890f0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x555d15b891b0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x555d15b892a0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x555d15b89368 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x555d15b89428 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x555d15b894e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x555d15b895e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x555d15b896a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x555d15b89770 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x555d15b89948 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x555d15b89828 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x555d15b898a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x555d15b89b70 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x555d15b89a10 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x555d15b89a90 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x555d15b89c80 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x555d15b89ce8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x555d15b89d10 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x555d15b89e28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x555d15b89ec8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x555d15b89f28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x555d15b89f88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x555d15b8a038 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x555d15b8a0a0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x555d15b8a2d8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x555d15b8a328 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15b8a2b8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x555d15b8a1c8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x555d15b8a170 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x555d15b8a1b0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x555d15b8a190 <col:32> 'int' 8
|-CXXRecordDecl 0x555d15b8a340 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d15b8a458 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x555d15b8a500 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x555d15b8a568 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x555d15b8a5f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x555d15b904f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555d15b90928 <col:12>
| |-CXXConstructorDecl 0x555d15b905f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d15b90708 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d15b8a500 'data' 'const char *'
| | | `-ImplicitCastExpr 0x555d15b92eb0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x555d15b92e80 <col:12> 'const char *const' lvalue .data 0x555d15b8a500
| | |     `-DeclRefExpr 0x555d15b92e60 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d15b8a568 'length' 'int'
| | | `-ImplicitCastExpr 0x555d15b92f40 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x555d15b92f10 <col:12> 'const int' lvalue .length 0x555d15b8a568
| | |     `-DeclRefExpr 0x555d15b92ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x555d15b8a5f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x555d15b92fd0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x555d15b92fa0 <col:12> 'String::memo_t *const' lvalue .memo 0x555d15b8a5f8
| | |     `-DeclRefExpr 0x555d15b92f80 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15b90708 '' 'const String::rep_t &'
| | `-CompoundStmt 0x555d15b93028 <col:12>
| |-CXXConstructorDecl 0x555d15b907a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d15b907a8
| | `-ParmVarDecl 0x555d15b908b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x555d15b95da0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x555d15ba17d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d15ba18e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x555d15ba1e00 <col:12>
| |   |-BinaryOperator 0x555d15ba1c18 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x555d15ba1bd0 <col:12> 'const char *' lvalue ->data 0x555d15b8a500
| |   | | `-CXXThisExpr 0x555d15ba1bc0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d15ba1c00 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x555d15ba1b90 <col:12> 'const char *const' lvalue .data 0x555d15b8a500
| |   |     `-DeclRefExpr 0x555d15ba1b70 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555d15ba1ce0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x555d15ba1c98 <col:12> 'int' lvalue ->length 0x555d15b8a568
| |   | | `-CXXThisExpr 0x555d15ba1c88 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d15ba1cc8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x555d15ba1c58 <col:12> 'const int' lvalue .length 0x555d15b8a568
| |   |     `-DeclRefExpr 0x555d15ba1c38 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x555d15ba1da8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x555d15ba1d60 <col:12> 'String::memo_t *' lvalue ->memo 0x555d15b8a5f8
| |   | | `-CXXThisExpr 0x555d15ba1d50 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x555d15ba1d90 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x555d15ba1d20 <col:12> 'String::memo_t *const' lvalue .memo 0x555d15b8a5f8
| |   |     `-DeclRefExpr 0x555d15ba1d00 <col:12> 'const String::rep_t' lvalue ParmVar 0x555d15ba18e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x555d15ba1df0 <col:12>
| |     `-UnaryOperator 0x555d15ba1dd8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555d15ba1dc8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x555d15ba1958 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x555d15ba1958
|   `-ParmVarDecl 0x555d15ba1a68 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x555d15b8a670 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x555d15b8a8b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x555d15b8a6d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x555d15b8a758 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x555d15b8a7d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x555d15b904b0 <col:79, line:261:5>
|   |-BinaryOperator 0x555d15b90128 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x555d15b900c0 <col:2, col:5> 'const char *' lvalue .data 0x555d15b8a500
|   | | `-MemberExpr 0x555d15b90090 <col:2> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|   | |   `-CXXThisExpr 0x555d15b90080 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555d15b90110 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d15b900f0 <col:12> 'const char *' lvalue ParmVar 0x555d15b8a6d8 'data' 'const char *'
|   |-BinaryOperator 0x555d15b901f0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x555d15b90188 <col:2, col:5> 'int' lvalue .length 0x555d15b8a568
|   | | `-MemberExpr 0x555d15b90158 <col:2> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|   | |   `-CXXThisExpr 0x555d15b90148 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x555d15b901d8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x555d15b901b8 <col:14> 'int' lvalue ParmVar 0x555d15b8a758 'length' 'int'
|   `-IfStmt 0x555d15b90498 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x555d15b90310 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555d15b902f8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x555d15b902d8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x555d15b902b8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x555d15b90250 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|     |       | `-MemberExpr 0x555d15b90220 <col:7> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|     |       |   `-CXXThisExpr 0x555d15b90210 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x555d15b902a0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d15b90280 <col:17> 'String::memo_t *' lvalue ParmVar 0x555d15b8a7d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x555d15b90470 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x555d15b90458 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x555d15b90360 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x555d15b7b2b0 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x555d15b903c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d15b89ec8
|         `-ImplicitCastExpr 0x555d15b903b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x555d15b90390 <col:27> 'String::memo_t *' lvalue ParmVar 0x555d15b8a7d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x555d15b8ab68 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x555d15b8a988 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x555d15b8aa08 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x555d15b8aa80 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x555d15b8a670 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x555d15b90938 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x555d15b90ac8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x555d15b90a30 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x555d15b909a0 <col:2> '<bound member function type>' ->assign_memo 0x555d15b8a8b8
|     | `-ImplicitCastExpr 0x555d15b90a68 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x555d15b90990 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x555d15b90a80 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x555d15b909d0 <col:14> 'const char *' lvalue ParmVar 0x555d15b8a988 'data' 'const char *'
|     |-ImplicitCastExpr 0x555d15b90a98 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x555d15b909f0 <col:20> 'int' lvalue ParmVar 0x555d15b8aa08 'length' 'int'
|     `-ImplicitCastExpr 0x555d15b90ab0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x555d15b90a10 <col:28> 'String::memo_t *' lvalue ParmVar 0x555d15b8aa80 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x555d15b8acf8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x555d15b8ac38 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x555d15b90d20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x555d15b90ca0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x555d15b90af0 <col:2> '<bound member function type>' ->assign_memo 0x555d15b8a8b8
|     | `-CXXThisExpr 0x555d15b90ae0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x555d15b90cd8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x555d15b90b70 <col:14, col:19> 'const char *' lvalue .data 0x555d15b8a500
|     |   `-MemberExpr 0x555d15b90b40 <col:14, col:16> 'String::rep_t' lvalue ._r 0x555d15b8a670
|     |     `-DeclRefExpr 0x555d15b90b20 <col:14> 'const String' lvalue ParmVar 0x555d15b8ac38 'x' 'const String &'
|     |-ImplicitCastExpr 0x555d15b90cf0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x555d15b90bf0 <col:25, col:30> 'int' lvalue .length 0x555d15b8a568
|     |   `-MemberExpr 0x555d15b90bc0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x555d15b8a670
|     |     `-DeclRefExpr 0x555d15b90ba0 <col:25> 'const String' lvalue ParmVar 0x555d15b8ac38 'x' 'const String &'
|     `-ImplicitCastExpr 0x555d15b90d08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x555d15b90c70 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|         `-MemberExpr 0x555d15b90c40 <col:38, col:40> 'String::rep_t' lvalue ._r 0x555d15b8a670
|           `-DeclRefExpr 0x555d15b90c20 <col:38> 'const String' lvalue ParmVar 0x555d15b8ac38 'x' 'const String &'
|-CXXMethodDecl 0x555d15b8adc0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x555d15b916e0 <col:31, line:278:5>
|   `-IfStmt 0x555d15b916c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x555d15b90dc0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x555d15b90da8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x555d15b90d78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|     |     `-MemberExpr 0x555d15b90d48 <col:6> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|     |       `-CXXThisExpr 0x555d15b90d38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x555d15b916a0 <col:15, line:277:2>
|       |-ParenExpr 0x555d15b91270 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x555d15b91240 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x555d15b90ed0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x555d15b90eb8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x555d15b90ea0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x555d15b90e60 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d15b89ec8
|       |   |       `-ImplicitCastExpr 0x555d15b90e48 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x555d15b90e18 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|       |   |           `-MemberExpr 0x555d15b90de8 <col:27> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|       |   |             `-CXXThisExpr 0x555d15b90dd8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x555d15b90f30 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x555d15b90f10 <col:54> 'int' 0
|       |   `-CallExpr 0x555d15b911a0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x555d15b91188 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x555d15b91108 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x555d15b911e0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555d15b91018 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x555d15b911f8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x555d15b91048 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x555d15b91210 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x555d15b91080 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x555d15b91228 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x555d15b910f0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x555d15b910d8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x555d15b910a0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x555d15b915c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x555d15b91480 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x555d15b91468 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x555d15b913e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x555d15b7c6f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x555d15b913b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x555d15b89ec8
|       | |   `-ImplicitCastExpr 0x555d15b91398 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x555d15b91368 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|       | |       `-MemberExpr 0x555d15b91338 <col:40> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|       | |         `-CXXThisExpr 0x555d15b91328 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x555d15b91580 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x555d15b91568 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x555d15b914a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x555d15b8ba98 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x555d15b915a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x555d15b91508 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|       |       `-MemberExpr 0x555d15b914d8 <col:15> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|       |         `-CXXThisExpr 0x555d15b914c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x555d15b91680 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x555d15b91618 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x555d15b8a5f8
|         | `-MemberExpr 0x555d15b915e8 <col:6> 'String::rep_t' lvalue ->_r 0x555d15b8a670
|         |   `-CXXThisExpr 0x555d15b915d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x555d15b91668 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x555d15b91648 <col:16> 'int' 0
|-CXXMethodDecl 0x555d15b8b058 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x555d15b8ae78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555d15b8aef8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555d15b8af70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x555d15b8b130 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x555d15b8b380 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x555d15b8b1e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x555d15b8b268 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x555d15b8b2e0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x555d15b8b568 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x555d15b8b450 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x555d15b8b4d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x555d15b8b668 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x555d15b917b8 <col:41, line:286:5>
|   `-ReturnStmt 0x555d15b917a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x555d15b91778 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x555d15b91740 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x555d15b91728 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x555d15b91708 <col:46> 'int' 1
|-CXXMethodDecl 0x555d15b8b908 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x555d15b8b720 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x555d15b8b7a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x555d15b8b820 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x555d15b8ba98 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x555d15b8b9d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x555d15b8bb68 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x555d15b8bd38 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x555d15b8bc20 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x555d15b8bca0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x555d15b8bdf8 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x555d15b8f820 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x555d15b8f928 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x555d15b8f9a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x555d15b8fa18 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x555d15b8fa80 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x555d15b8fb80 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x555d15b8fbd0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15b8fb60 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x555d15b8fb40 <col:22> 'int' 14
|-CXXMethodDecl 0x555d15b8fde8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x555d15b8fc00 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x555d15b8fc80 <col:38> col:41 'int'
| `-ParmVarDecl 0x555d15b8fd00 <col:43> col:46 'int'
|-FriendDecl 0x555d15b8fef0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x555d15b8ff80 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15bd37c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x555d15bd3998 prev 0x555d15bd37c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555d15bd3a28 <col:46, col:52> col:46 public
|-TypedefDecl 0x555d15bd3a50 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15bd5b50 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x555d15bd5b00 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x555d15bd5ae0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x555d15bd3c68 'type'
|     `-SubstTemplateTypeParmType 0x555d15bd3c30 'String' sugar
|       |-TemplateTypeParmType 0x555d15b45d70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b45d20 'T'
|       `-RecordType 0x555d15b81280 'String'
|         `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd5c08 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x555d15bd5bd0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x555d15bd5bb0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555d15bd5b50 'type'
|     `-ElaboratedType 0x555d15bd5b00 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x555d15bd5ae0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x555d15bd3c68 'type'
|         `-SubstTemplateTypeParmType 0x555d15bd3c30 'String' sugar
|           |-TemplateTypeParmType 0x555d15b45d70 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555d15b45d20 'T'
|           `-RecordType 0x555d15b81280 'String'
|             `-CXXRecord 0x555d15b811f0 'String'
|-CXXMethodDecl 0x555d15bd5d88 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x555d15bd5c98 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x555d15bd5e78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555d15bd5f58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x555d15bd5f58
|-CXXMethodDecl 0x555d15bd6228 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555d15bd6130 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x555d15bd6468 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d15bd62e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15bd6358 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd6638 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d15bd6528 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15bd65a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd6798 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555d15bd6868 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555d15bd6ab8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d15bd6928 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555d15bd69a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd6d18 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x555d15bd6b88 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555d15bd6c00 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd6ed8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555d15bd6de8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd7098 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555d15bd6fa0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd7150 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d15bd7200 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555d15bd7438 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555d15bd72b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15bd7328 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555d15bd76d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555d15bd75e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x555d15bd77a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x555d15bd77f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555d15bd7840 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15bb5620 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x555d15bd2228 prev 0x555d15bb5620 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555d15bd3730 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x555d15bd36e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x555d15bd36c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555d15bd3570 'type'
|     `-SubstTemplateTypeParmType 0x555d15bd3400 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x555d15a6f5a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x555d15a6f548 'F'
|       `-RecordType 0x555d15bd3060 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x555d15bd2f80 'typed_array_memory'
|-FieldDecl 0x555d15bd7890 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x555d15bd78e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555d15bd7918 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|   |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555d15b52a48 'T'
|   `-RecordType 0x555d15b81280 'String'
|     `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd79a8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x555d15bd7970 'String &'
|   `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-RecordType 0x555d15b81280 'String'
|       `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd7a38 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x555d15bd7a00 'const String &'
|   `-QualType 0x555d15bd22c1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-RecordType 0x555d15b81280 'String'
|         `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd7ac8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x555d15bd7a90 'String *'
|   `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-RecordType 0x555d15b81280 'String'
|       `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd7b58 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x555d15bd7b20 'const String *'
|   `-QualType 0x555d15bd22c1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-RecordType 0x555d15b81280 'String'
|         `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd87b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x555d15bd8760 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x555d15bd8740 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x555d15bd8678 'type'
|     `-LValueReferenceType 0x555d15bd8640 'const String &'
|       `-QualType 0x555d15bd83e1 'const String' const
|         `-SubstTemplateTypeParmType 0x555d15bd83e0 'String' sugar
|           |-TemplateTypeParmType 0x555d15a778d0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555d15a77878 'T'
|           `-RecordType 0x555d15b81280 'String'
|             `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd8818 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x555d15bd7a00 'const String &'
|   `-QualType 0x555d15bd22c1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-RecordType 0x555d15b81280 'String'
|         `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd8870 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15bd88d8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x555d15bd7a90 'String *'
|   `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-RecordType 0x555d15b81280 'String'
|       `-CXXRecord 0x555d15b811f0 'String'
|-TypedefDecl 0x555d15bd8940 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x555d15bd7b20 'const String *'
|   `-QualType 0x555d15bd22c1 'const String' const
|     `-SubstTemplateTypeParmType 0x555d15bd22c0 'String' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-RecordType 0x555d15b81280 'String'
|         `-CXXRecord 0x555d15b811f0 'String'
|-EnumDecl 0x555d15bd8998 <line:134:5> col:5
| `-EnumConstantDecl 0x555d15bd8a90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555d15bd8a70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555d15b54488 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555d15b54460 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555d15b54440 <col:40> 'int' 1
|-CXXConstructorDecl 0x555d15bd8b18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555d15bd8da8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15bd8bd0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15bd8c70 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x555d15bd9038 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x555d15bd8f20 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x555d15bd92f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x555d15bd91e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x555d15bd9fe0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x555d15bd9ec0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x555d15bda2f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x555d15bda1d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x555d15bda5e0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15bda428 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15bda4a0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d15bda708 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555d15bda7b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bda810 <col:30> Inherited
|-CXXMethodDecl 0x555d15bda858 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555d15bda908 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bda960 <col:30> Inherited
|-CXXMethodDecl 0x555d15bdaa28 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d15bdaad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bdab30 <col:30> Inherited
|-CXXMethodDecl 0x555d15bdab78 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d15bdac28 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bdac80 <col:30> Inherited
|-CXXMethodDecl 0x555d15bdacc8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d15bdad78 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bdadd0 <col:30> Inherited
|-CXXMethodDecl 0x555d15bdae18 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555d15bdaec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15bdaf20 <col:30> Inherited
|-CXXMethodDecl 0x555d15bdaf48 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d15bdaff8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d15bdb0a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555d15bdb268 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15bdb158 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15bdb1d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d15bdb3b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555d15bdb328 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15bdb568 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x555d15bdb470 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d15bdb620 <col:20>
| `-OptimizeNoneAttr 0x555d15bdb678 <col:30>
|-CXXMethodDecl 0x555d15bdb798 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x555d15bdb6a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d15bdb850 <col:20>
| `-OptimizeNoneAttr 0x555d15bdb8a8 <col:30>
|-CXXMethodDecl 0x555d15bdb960 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d15bdb8d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15bdbaa8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d15bdba18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15bdbbd8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x555d15bdbd08 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x555d15bdbdd8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x555d15bdbea8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x555d15bdbfe8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d15bdbf58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15bdc130 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d15bdc0a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15bdc278 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x555d15bdc1e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d15bdc330 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555d15bdc430 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555d15bdc3a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d15bdc4e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555d15bdc5a8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x555d15bdc6a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x555d15bdc828 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555d15bdc768 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x555d15bdcfe8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555d15bdc8e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x555d15bdcf48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x555d15bdce48 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x555d15bdd0c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d15bdd218 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x555d15bdd188 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d15bdd2d0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555d15bdd518 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15bdd390 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555d15bdd408 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555d15bdd6a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x555d15bdd5e8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555d15bdd8b8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x555d15bdd770 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x555d15bdd7e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x555d15bdd978 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555d15bddbd8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x555d15bddae0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x555d15bddca8 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x555d15bddca8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e03a10 prev 0x555d15d9db70 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d15e03b08 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x555d15e03b98 <col:22, col:28> col:22 public
|-EnumDecl 0x555d15e03bc0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x555d15e03cd8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03cb8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x555d15e03ca0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555d15e03c80 <col:14> 'int' 999
| |-EnumConstantDecl 0x555d15e03d80 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03d60 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x555d15e03d48 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x555d15e03d28 <col:14> 'int' 1
| |-EnumConstantDecl 0x555d15e03e10 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03df0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x555d15e03dd0 <col:17> 'int' 0
| |-EnumConstantDecl 0x555d15e03ea0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03e80 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x555d15e03e60 <col:13> 'int' 1
| |-EnumConstantDecl 0x555d15e03f30 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03f10 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x555d15e03ef0 <col:16> 'int' 2
| |-EnumConstantDecl 0x555d15e03fc0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e03fa0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x555d15e03f80 <col:13> 'int' 3
| |-EnumConstantDecl 0x555d15e04050 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e04030 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x555d15e04010 <col:15> 'int' 4
| |-EnumConstantDecl 0x555d15e040e0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e040c0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x555d15e040a0 <col:14> 'int' 5
| |-EnumConstantDecl 0x555d15e04170 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x555d15e04150 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x555d15e04130 <col:12> 'int' 6
| `-EnumConstantDecl 0x555d15e04200 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x555d15e041e0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x555d15e041c0 <col:13> 'int' 7
|-VarDecl 0x555d15e04298 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x555d15e04320 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x555d15e043a8 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x555d15e04430 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x555d15e044b8 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x555d15e04540 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x555d15e045c8 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x555d15e04650 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x555d15e046d8 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x555d15e04760 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x555d15e047e8 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x555d15e048e8 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x555d15e09bd8 '_nerrors' 'int'
| | `-IntegerLiteral 0x555d15e0a368 <line:128:13> 'int' 0
| `-CompoundStmt 0x555d15e0a3d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x555d15e049d8 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x555d15e0a3e8 <col:29, line:132:5>
|-CXXMethodDecl 0x555d15e04b98 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x555d15e04ad0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e04c60 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555d15e04d48 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555d15e0a440 <col:44, line:161:5>
|   `-ReturnStmt 0x555d15e0a430 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x555d15e0a418 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e0a3f8 <col:9> 'ErrorHandler *' lvalue Var 0x555d15e09c38 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e04e88 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x555d15e04df8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x555d15e04f50 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x555d15e0a4a0 <col:43, line:173:5>
|   `-ReturnStmt 0x555d15e0a490 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x555d15e0a478 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e0a458 <col:9> 'ErrorHandler *' lvalue Var 0x555d15e09cb0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x555d15e05008 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x555d15e05088 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x555d15e05198 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x555d15e05108 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555d15e052e8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x555d15e05258 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05440 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x555d15e053a8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05598 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x555d15e05500 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555d15e056f0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x555d15e05658 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05900 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d15e057a8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x555d15e05828 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05ad8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d15e059c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x555d15e05a40 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05cf8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d15e05b98 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x555d15e05c18 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x555d15e05ed8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d15e05db8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555d15e05e38 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555d15e060b8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x555d15e05f98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x555d15e06018 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x555d15e06240 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x555d15e06178 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x555d15e06410 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x555d15e062f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555d15e06370 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x555d15e0a6f8 <col:57, line:234:5>
|   `-ReturnStmt 0x555d15e0a6e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x555d15e0a6d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555d15e0a678 <col:9, col:41> 'int'
|         |-MemberExpr 0x555d15e0a648 <col:9> '<bound member function type>' ->xmessage 0x555d15e06240
|         | `-CXXThisExpr 0x555d15e0a638 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x555d15e0a6b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d15e0a6a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d15e0a618 <col:18, col:40> 'String' (CXXTemporary 0x555d15e0a618)
|               `-CallExpr 0x555d15e0a5e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x555d15e0a5c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x555d15e0a540 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555d15e08408 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x555d15e0a560 <col:31> 'const String' lvalue ParmVar 0x555d15e06370 'str' 'const String &'
|                 `-DeclRefExpr 0x555d15e0a580 <col:36> 'const String' lvalue ParmVar 0x555d15e062f8 'anno' 'const String &'
|-CXXMethodDecl 0x555d15e066f0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555d15e064d0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x555d15e06550 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x555d15e065c8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d15e0a988 <col:68, line:243:5>
|   `-ReturnStmt 0x555d15e0a978 <line:242:2, col:41>
|     `-ExprWithCleanups 0x555d15e0a960 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x555d15e0a900 <col:9, col:41> 'int'
|         |-MemberExpr 0x555d15e0a8d0 <col:9> '<bound member function type>' ->xmessage 0x555d15e06410
|         | `-CXXThisExpr 0x555d15e0a8c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555d15e0a798 <col:18> 'const String' lvalue ParmVar 0x555d15e064d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555d15e0a948 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d15e0a930 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d15e0a8a0 <col:24, col:40> 'String' (CXXTemporary 0x555d15e0a8a0)
|               `-CXXMemberCallExpr 0x555d15e0a838 <col:24, col:40> 'String'
|                 |-MemberExpr 0x555d15e0a7c8 <col:24> '<bound member function type>' ->vformat 0x555d15e078d0
|                 | `-CXXThisExpr 0x555d15e0a7b8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555d15e0a868 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555d15e0a7f8 <col:32> 'const char *' lvalue ParmVar 0x555d15e06550 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555d15e0a880 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555d15e0a818 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d15e065c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d15e06990 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x555d15e067b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555d15e06830 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555d15e068a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x555d15e0acc8 <col:23, line:254:5>
|   `-ReturnStmt 0x555d15e0acb8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x555d15e0aca0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x555d15e0ac40 <col:9, col:71> 'int'
|         |-MemberExpr 0x555d15e0ac10 <col:9> '<bound member function type>' ->xmessage 0x555d15e06410
|         | `-CXXThisExpr 0x555d15e0ac00 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x555d15e0ac88 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x555d15e0ac70 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x555d15e0abc0 <col:18, col:65> 'String' (CXXTemporary 0x555d15e0abc0)
|         |     `-CallExpr 0x555d15e0ab58 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x555d15e0ab40 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x555d15e0aa28 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x555d15e08408 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x555d15e0aa48 <col:31> 'const String' lvalue ParmVar 0x555d15e06830 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x555d15e0aba0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x555d15e0ab88 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x555d15e0ab20 <col:37, col:64> 'String' (CXXTemporary 0x555d15e0ab20)
|         |             `-CallExpr 0x555d15e0aaf0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x555d15e0aad8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x555d15e0aa68 <col:37> 'String (const String &)' lvalue CXXMethod 0x555d15e08a58 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x555d15e0aa88 <col:56> 'const String' lvalue ParmVar 0x555d15e067b8 'landmark' 'const String &'
|         `-DeclRefExpr 0x555d15e0abe0 <col:68> 'const String' lvalue ParmVar 0x555d15e068a8 'str' 'const String &'
|-CXXMethodDecl 0x555d15e06d10 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x555d15e06a58 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x555d15e06ad0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x555d15e06b50 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x555d15e06bc8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d15e0af80 <col:34, line:267:5>
|   `-ReturnStmt 0x555d15e0af70 <line:266:2, col:51>
|     `-ExprWithCleanups 0x555d15e0af58 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x555d15e0aef0 <col:9, col:51> 'int'
|         |-MemberExpr 0x555d15e0aec0 <col:9> '<bound member function type>' ->xmessage 0x555d15e06990
|         | `-CXXThisExpr 0x555d15e0aeb0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x555d15e0ad68 <col:18> 'const String' lvalue ParmVar 0x555d15e06a58 'landmark' 'const String &'
|         |-DeclRefExpr 0x555d15e0ad88 <col:28> 'const String' lvalue ParmVar 0x555d15e06ad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x555d15e0af40 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x555d15e0af28 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x555d15e0ae90 <col:34, col:50> 'String' (CXXTemporary 0x555d15e0ae90)
|               `-CXXMemberCallExpr 0x555d15e0ae28 <col:34, col:50> 'String'
|                 |-MemberExpr 0x555d15e0adb8 <col:34> '<bound member function type>' ->vformat 0x555d15e078d0
|                 | `-CXXThisExpr 0x555d15e0ada8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x555d15e0ae58 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x555d15e0ade8 <col:42> 'const char *' lvalue ParmVar 0x555d15e06b50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x555d15e0ae70 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x555d15e0ae08 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d15e06bc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d15e06e20 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x555d15e0b000 <col:25, line:288:5>
|   `-ReturnStmt 0x555d15e0aff0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x555d15e0afd8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x555d15e0afa8 <col:9> 'const int' lvalue ->_nerrors 0x555d15e09bd8
|         `-CXXThisExpr 0x555d15e0af98 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x555d15e07030 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x555d15e06ed8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x555d15e06f58 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x555d15e07318 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555d15e070f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x555d15e07178 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x555d15e071f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d15e074b0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x555d15e073e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x555d15e076f8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x555d15e07570 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x555d15e075e8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x555d15e0b260 <col:58, line:357:5>
|   `-ReturnStmt 0x555d15e0b250 <line:356:2, col:29>
|     `-ExprWithCleanups 0x555d15e0b238 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x555d15e0b208 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x555d15e0b1f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x555d15e0b1d0 <col:9, col:29> 'String' (CXXTemporary 0x555d15e0b1d0)
|             `-CallExpr 0x555d15e0b160 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x555d15e0b148 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x555d15e0b0c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x555d15e07318 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x555d15e0b068 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x555d15e0b198 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x555d15e0b088 <col:21> 'const char *' lvalue ParmVar 0x555d15e07570 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x555d15e0b1b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x555d15e0b0a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x555d15e075e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d15e078d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x555d15e077c0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x555d15e07838 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x555d15e07a28 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x555d15e07998 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x555d15e07b70 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x555d15e07ae0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x555d15e07e10 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x555d15e07c28 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x555d15e07ca8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x555d15e07d20 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x555d15e07f70 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x555d15e07ee0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x555d15e0b378 <col:37, line:441:5>
|   `-IfStmt 0x555d15e0b360 <line:439:2, line:440:8>
|     |-BinaryOperator 0x555d15e0b2e8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x555d15e0b2b8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x555d15e0b278 <col:6> 'int' lvalue ParmVar 0x555d15e07ee0 'level' 'int'
|     | `-ImplicitCastExpr 0x555d15e0b2d0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x555d15e0b298 <col:15> 'ErrorHandler::Level' EnumConstant 0x555d15e03fc0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x555d15e0b348 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x555d15e0b318 <col:8> 'int' lvalue ->_nerrors 0x555d15e09bd8
|         `-CXXThisExpr 0x555d15e0b308 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x555d15e08038 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x555d15e0b410 <col:26, line:448:5>
|   `-BinaryOperator 0x555d15e0b3f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x555d15e0b3a0 <col:2> 'int' lvalue ->_nerrors 0x555d15e09bd8
|     | `-CXXThisExpr 0x555d15e0b390 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x555d15e0b3d0 <col:13> 'int' 0
|-CXXMethodDecl 0x555d15e08200 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x555d15e080f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x555d15e08168 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x555d15e08408 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x555d15e082c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x555d15e08338 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x555d15e086b8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x555d15e084c8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x555d15e08548 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x555d15e085c8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x555d15e08770 <col:59> 0 0
|-CXXMethodDecl 0x555d15e08908 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x555d15e087e8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x555d15e08868 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x555d15e0baa0 <col:70, line:534:5>
|   |-DeclStmt 0x555d15e0b580 <line:528:2, col:20>
|   | |-VarDecl 0x555d15e0b438 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x555d15e0b4a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x555d15e0b4d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x555d15e0b540 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x555d15e0b650 <line:529:2, col:23>
|   | `-VarDecl 0x555d15e0b5b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x555d15e0b638 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x555d15e0b618 <col:18> 'const char *' lvalue ParmVar 0x555d15e087e8 'begin' 'const char *'
|   |-DoStmt 0x555d15e0ba38 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x555d15e0b948 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x555d15e0b930 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x555d15e0b910 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x555d15e0b668 <col:6> 'const char *' lvalue Var 0x555d15e0b5b0 'x' 'const char *'
|   | |     `-CallExpr 0x555d15e0b860 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x555d15e0b848 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x555d15e0b800 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x555d15e0a0b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x555d15e0b8c8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x555d15e0b8b0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x555d15e0b720 <col:20, col:27> 'String' (CXXTemporary 0x555d15e0b720)
|   | |       |     `-CXXTemporaryObjectExpr 0x555d15e0b6e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x555d15e0b8e0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555d15e0b740 <col:30> 'const char *' lvalue Var 0x555d15e0b5b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x555d15e0b8f8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x555d15e0b760 <col:33> 'const char *' lvalue ParmVar 0x555d15e08868 'end' 'const char *'
|   | |       |-UnaryOperator 0x555d15e0b7a0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555d15e0b780 <col:39> 'String' lvalue Var 0x555d15e0b438 'name' 'String'
|   | |       |-UnaryOperator 0x555d15e0b7d8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x555d15e0b7b8 <col:46> 'String' lvalue Var 0x555d15e0b4d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x555d15e0b7f0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x555d15e0ba20 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x555d15e0b9e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x555d15e0b9c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x555d15e0b998 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|   |         `-ImplicitCastExpr 0x555d15e0b980 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x555d15e0b960 <col:11> 'String' lvalue Var 0x555d15e0b438 'name' 'String'
|   `-ReturnStmt 0x555d15e0ba90 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x555d15e0ba78 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e0ba58 <col:9> 'const char *' lvalue Var 0x555d15e0b5b0 'x' 'const char *'
|-CXXMethodDecl 0x555d15e08a58 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x555d15e089c8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x555d15e0c0a8 <col:55, line:550:5>
|   `-IfStmt 0x555d15e0c080 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x555d15e0bce0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x555d15e0bcc8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d15e0bcb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d15e0bc90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d15e0bc60 <col:6> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|     | |       `-DeclRefExpr 0x555d15e0bb00 <col:6> 'const String' lvalue ParmVar 0x555d15e089c8 'x' 'const String &'
|     | `-BinaryOperator 0x555d15e0bc40 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x555d15e0bc10 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x555d15e0bbc0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x555d15e0bba8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x555d15e0bb60 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x555d15b9e0c0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x555d15e0bb20 <col:11> 'const String' lvalue ParmVar 0x555d15e089c8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x555d15e0bb40 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x555d15e0bc28 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x555d15e0bbf8 <col:19> 'char' 123
|     |-ReturnStmt 0x555d15e0bd50 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x555d15e0bd20 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x555d15e0bd00 <col:13> 'const String' lvalue ParmVar 0x555d15e089c8 'x' 'const String &'
|     `-IfStmt 0x555d15e0c058 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x555d15e0bde8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d15e0bdd0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d15e0bdb0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d15e0bd80 <col:11> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |       `-DeclRefExpr 0x555d15e0bd60 <col:11> 'const String' lvalue ParmVar 0x555d15e089c8 'x' 'const String &'
|       |-ReturnStmt 0x555d15e0bf70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x555d15e0bf58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x555d15e0bf28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x555d15e0bf10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x555d15e0bef0 <col:13, col:29> 'String' (CXXTemporary 0x555d15e0bef0)
|       |         `-CallExpr 0x555d15e0bea0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x555d15e0be88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x555d15e0be00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x555d15e08200 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x555d15e0bed0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x555d15e0be20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x555d15e0be40 <col:28> 'const String' lvalue ParmVar 0x555d15e089c8 'x' 'const String &'
|       `-ReturnStmt 0x555d15e0c048 <line:549:6, col:20>
|         `-ExprWithCleanups 0x555d15e0c030 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x555d15e0c000 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x555d15e0bfe8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x555d15e0bfc8 <col:13, col:20> 'String' (CXXTemporary 0x555d15e0bfc8)
|                 `-CXXTemporaryObjectExpr 0x555d15e0bf90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x555d15e08c20 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x555d15e08b10 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x555d15e08b88 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d15e0a358 <col:71> 'bool' false
|-CXXRecordDecl 0x555d15e08cd0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x555d15e08fc8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x555d15e08f60 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x555d15e08f00 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x555d15e08ec0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x555d15b81280 'String'
|       | `-CXXRecord 0x555d15b811f0 'String'
|       |-BuiltinType 0x555d15855370 'int'
|       `-DecayedType 0x555d15d9ebc0 '__va_list_tag *' sugar
|         |-TypedefType 0x555d15d9eb90 'va_list' sugar
|         | |-Typedef 0x555d15a9f540 'va_list'
|         | `-TypedefType 0x555d15a9f4f0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x555d15a982e8 '__gnuc_va_list'
|         |   `-TypedefType 0x555d15a98250 '__builtin_va_list' sugar
|         |     |-Typedef 0x555d15896bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x555d15896b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x555d158560c0 '__va_list_tag'
|         |         `-CXXRecord 0x555d15856028 '__va_list_tag'
|         `-PointerType 0x555d15aa5240 '__va_list_tag *'
|           `-RecordType 0x555d158560c0 '__va_list_tag'
|             `-CXXRecord 0x555d15856028 '__va_list_tag'
|-EnumDecl 0x555d15e09020 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x555d15e09120 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e09680 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09100 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x555d15e090e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x555d15e091b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e09698 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09190 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x555d15e09170 <col:21> 'int' 2
| |-EnumConstantDecl 0x555d15e09240 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e096b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09220 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x555d15e09200 <col:22> 'int' 4
| |-EnumConstantDecl 0x555d15e092d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e096c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e092b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x555d15e09290 <col:17> 'int' 8
| |-EnumConstantDecl 0x555d15e09360 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e096e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09340 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x555d15e09320 <col:22> 'int' 16
| |-EnumConstantDecl 0x555d15e093f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e096f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e093d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555d15e093b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x555d15e09480 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e09710 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09460 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x555d15e09440 <col:17> 'int' 64
| |-EnumConstantDecl 0x555d15e09510 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e09728 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e094f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x555d15e094d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x555d15e095a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x555d15e09740 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e09580 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x555d15e09560 <col:16> 'int' 256
| `-EnumConstantDecl 0x555d15e09630 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x555d15e09758 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e09610 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x555d15e095f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x555d15e09968 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x555d15e09780 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x555d15e09820 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x555d15e09af0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x555d15e09a28 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x555d15e09b98 <line:580:3, col:10> col:3 private
|-FieldDecl 0x555d15e09bd8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x555d15e09c38 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x555d15e09cb0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x555d15e0a0b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x555d15e09d28 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x555d15e09da8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x555d15e09e28 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x555d15e09ea0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x555d15e09f18 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x555d15e09f90 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x555d15e0a1d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x555d15e0a1d8
| `-ParmVarDecl 0x555d15e0a2e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x555d15e0c408 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x555d15e0c408
  `-ParmVarDecl 0x555d15e0c518 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15d9dc00 prev 0x555d15d9c768 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15d9dcf8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x555d15d9dd88 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x555d15d9dec8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x555d15d9ddc0 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555d15d9f310 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15d9f2f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555d15d9ee90 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555d15d9f3a0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d15d9f360 <col:17> 'ErrorHandler *' lvalue ParmVar 0x555d15d9ddc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555d15d9eef8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555d15d9f420 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15d9f3e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555d15d9ef58 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555d15d9f460 <col:54> 'bool' false
| `-CompoundStmt 0x555d15d9f568 <col:61, line:38:5>
|   `-BinaryOperator 0x555d15d9f548 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x555d15d9f4e0 <col:9> 'const Element *' lvalue ->_context 0x555d15d9ee30
|     | `-CXXThisExpr 0x555d15d9f4d0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x555d15d9f530 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x555d15d9f510 <col:20> 'int' 0
|-CXXConstructorDecl 0x555d15d9e0d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15d9df88 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x555d15d9e000 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555d15d9f348 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15d9f328 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x555d15d9ee30 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x555d15d9f5c0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d15d9f580 <col:20> 'const Element *' lvalue ParmVar 0x555d15d9df88 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x555d15d9ee90 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555d15d9f640 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555d15d9f600 <col:36> 'ErrorHandler *' lvalue ParmVar 0x555d15d9e000 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555d15d9eef8 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555d15d9f6c0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555d15d9f680 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x555d15d9ef58 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555d15d9f700 <col:73> 'bool' false
| `-CompoundStmt 0x555d15d9f778 <col:80, line:46:5>
|-CXXMethodDecl 0x555d15d9e208 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x555d15d9f7f0 <col:36, line:51:5>
|   `-ReturnStmt 0x555d15d9f7e0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x555d15d9f7c8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x555d15d9f798 <col:16> 'const Element *const' lvalue ->_context 0x555d15d9ee30
|         `-CXXThisExpr 0x555d15d9f788 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555d15d9e2f8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x555d15d9f870 <col:32, line:57:5>
|   `-ReturnStmt 0x555d15d9f860 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x555d15d9f848 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x555d15d9f818 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x555d15d9ee90
|         `-CXXThisExpr 0x555d15d9f808 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555d15d9e3b8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x555d15d9e540 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d15d9e470 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x555d15d9e690 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d15d9e600 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d15d9e7e0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x555d15d9e750 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555d15d9e9e8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x555d15d9e898 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x555d15d9e910 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x555d15d9ed40 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x555d15d9eaa8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x555d15d9eb28 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x555d15d9ebf0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x555d15d9edf8 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x555d15d9ee30 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x555d15d9ee90 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x555d15d9eef8 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x555d15d9ef58 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x555d15d9efa8 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x555d15d9efa8
| `-ParmVarDecl 0x555d15d9f0b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x555d15d9f158 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x555d15d9f158
| `-ParmVarDecl 0x555d15d9f268 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x555d15e98fb0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15dc06f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x555d15dc08c8 prev 0x555d15dc06f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555d15dc0958 <col:46, col:52> col:46 public
|-TypedefDecl 0x555d15dc0980 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc2550 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x555d15dc2500 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x555d15dc0e30 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x555d15dc0d30 'type'
|     `-TemplateSpecializationType 0x555d15dc0cc0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x555d15dc0ba0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x555d15dc0b80 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x555d15dc0b60 <col:24> 'unsigned long' 4
|       `-RecordType 0x555d15dc0ca0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x555d15dc0bc0 'char_array'
|-TypedefDecl 0x555d15dc52d8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x555d15dc52a0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x555d15dc5280 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x555d15dc2550 'type'
|     `-ElaboratedType 0x555d15dc2500 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x555d15dc0e30 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x555d15dc0d30 'type'
|         `-TemplateSpecializationType 0x555d15dc0cc0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x555d15dc0ba0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x555d15dc0b80 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x555d15dc0b60 <col:24> 'unsigned long' 4
|           `-RecordType 0x555d15dc0ca0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x555d15dc0bc0 'char_array'
|-CXXMethodDecl 0x555d15dc5458 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x555d15dc5368 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x555d15dc5548 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555d15dc5628 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x555d15dc58f8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555d15dc5800 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x555d15dc5b38 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d15dc59b0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15dc5a28 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc5d08 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d15dc5bf8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15dc5c70 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc5e68 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555d15dc5f38 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555d15dc6188 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d15dc5ff8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555d15dc6070 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc63e8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x555d15dc6258 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555d15dc62d0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc65a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555d15dc64b8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc6768 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555d15dc6670 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc6820 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d15dc68d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555d15dc6b08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555d15dc6980 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555d15dc69f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555d15dc6da8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555d15dc6cb0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x555d15dc6e70 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x555d15dc6ec0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555d15dc6f10 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15dbf0f8 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x555d15dbf308 prev 0x555d15dbf0f8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555d15dc0660 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555d15dc0610 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x555d15dc05f0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x555d15dc04a0 'type'
|     `-SubstTemplateTypeParmType 0x555d15dc02c0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x555d15a6ee20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15a6edc8 'T'
|       `-RecordType 0x555d15dbfe10 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555d15dbfd28 'sized_array_memory'
|-FieldDecl 0x555d15dc6f60 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x555d15dc6fb0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555d15dc6fe8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|   |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x555d15b52a48 'T'
|   `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7078 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x555d15dc7040 'int &'
|   `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7138 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x555d15dc7100 'const int &'
|   `-QualType 0x555d15dbf3a1 'const int' const
|     `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc71c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x555d15dc7190 'int *'
|   `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7258 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x555d15dc7220 'const int *'
|   `-QualType 0x555d15dbf3a1 'const int' const
|     `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7e40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x555d15dc7df0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x555d15dc7dd0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x555d15dc7d60 'type'
|     `-SubstTemplateTypeParmType 0x555d15dc7b20 'int' sugar
|       |-TemplateTypeParmType 0x555d15a79210 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15a791c0 'T'
|       `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7ea8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x555d15dc7100 'const int &'
|   `-QualType 0x555d15dbf3a1 'const int' const
|     `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7f00 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7f68 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x555d15dc7190 'int *'
|   `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|     |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x555d15b52a48 'T'
|     `-BuiltinType 0x555d15855370 'int'
|-TypedefDecl 0x555d15dc7fd0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x555d15dc7220 'const int *'
|   `-QualType 0x555d15dbf3a1 'const int' const
|     `-SubstTemplateTypeParmType 0x555d15dbf3a0 'int' sugar
|       |-TemplateTypeParmType 0x555d15b52aa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555d15b52a48 'T'
|       `-BuiltinType 0x555d15855370 'int'
|-EnumDecl 0x555d15dc8028 <line:134:5> col:5
| `-EnumConstantDecl 0x555d15dc8120 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555d15dc8100 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x555d15b54488 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x555d15b54460 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555d15b54440 <col:40> 'int' 1
|-CXXConstructorDecl 0x555d15dc81a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555d15dc83f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15dc8260 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15dc8300 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x555d15dc86b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x555d15dc85a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x555d15dc8978 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x555d15dc8860 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x555d15dc8cc0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x555d15dc8ba0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x555d15dc8fd0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x555d15dc8eb0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x555d15dc9d48 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15dc9108 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15dc9180 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d15dc9e78 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555d15dc9f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dc9fb0 <col:30> Inherited
|-CXXMethodDecl 0x555d15dc9ff8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555d15dca0a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dca100 <col:30> Inherited
|-CXXMethodDecl 0x555d15dca1c8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d15dca278 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dca2d0 <col:30> Inherited
|-CXXMethodDecl 0x555d15dca318 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d15dca3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dca420 <col:30> Inherited
|-CXXMethodDecl 0x555d15dca468 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d15dca518 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dca570 <col:30> Inherited
|-CXXMethodDecl 0x555d15dca5b8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555d15dca668 <col:20> Inherited
| `-OptimizeNoneAttr 0x555d15dca6c0 <col:30> Inherited
|-CXXMethodDecl 0x555d15dca6e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d15dca798 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555d15dca848 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555d15dcaa08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15dca8f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555d15dca970 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d15dcab58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555d15dcaac8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15dcad08 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x555d15dcac10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d15dcadc0 <col:20>
| `-OptimizeNoneAttr 0x555d15dcae18 <col:30>
|-CXXMethodDecl 0x555d15dcaf38 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x555d15dcae40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555d15dcaff0 <col:20>
| `-OptimizeNoneAttr 0x555d15dcb048 <col:30>
|-CXXMethodDecl 0x555d15dcb100 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d15dcb070 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15dcb248 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d15dcb1b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15dcb378 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x555d15dcb4a8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x555d15dcb578 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x555d15dcb648 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x555d15dcb788 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555d15dcb6f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15dcb8d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555d15dcb840 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555d15dcba18 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x555d15dcb988 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d15dcbad0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555d15dcbbd0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x555d15dcbb40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555d15dcbc88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x555d15dcbd48 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x555d15dcbe48 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x555d15dcbfc8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555d15dcbf08 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x555d15dcc788 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555d15dcc080 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x555d15dcc6e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x555d15dcc5e8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x555d15dcc868 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555d15dcc9b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555d15dcc928 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d15dcca70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555d15dcccb8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555d15dccb30 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555d15dccba8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555d15dcce78 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x555d15dccd88 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555d15dcd0c8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x555d15dccf40 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555d15dccfb8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555d15dcd188 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555d15dcd3e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x555d15dcd2f0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x555d15dcd4b8 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15db5a38 prev 0x555d15da46e8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d15db5b30 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x555d15db5c20 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x555d15de13a0 <col:16, line:828:9>
|-CXXDestructorDecl 0x555d15db5d10 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x555d15de13b0 <col:25, line:830:9>
|-CXXMethodDecl 0x555d15db5e10 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x555d15db5ec0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x555d15db5f68 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555d15db5f68
| `-ParmVarDecl 0x555d15db6078 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x555d15db6838 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555d15db6838
  `-ParmVarDecl 0x555d15db6948 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15da44f8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x555d15da4658 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x555d15da46e8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x555d15da47a0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x555d15da48a8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x555d15da47d8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d15dcf0e8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d15dcf0c8 <col:31> 'int' 0
|-CXXConstructorDecl 0x555d15da4bc8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x555d15da4a40 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x555d15da4ab8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d15dcf120 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d15dcf100 <col:59> 'int' 0
|-CXXConstructorDecl 0x555d15da4da0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15da4c90 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x555d15da4d08 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d15dcf158 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d15dcf138 <col:55> 'int' 0
|-CXXConstructorDecl 0x555d15da5158 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555d15da4f40 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x555d15da4fb8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x555d15da5030 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555d15dcf190 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555d15dcf170 <col:31> 'int' 0
|-CXXConstructorDecl 0x555d15da5318 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x555d15da5258 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x555d15da5410 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x555d15da55f8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x555d15da5500 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x555d15da56e8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x555d15dcf580 <col:24, line:291:5>
|   `-ReturnStmt 0x555d15dcf570 <line:290:9, col:79>
|     `-BinaryOperator 0x555d15dcf550 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x555d15dcf3e8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x555d15dcf340 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x555d15dcf320 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x555d15dcf218 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x555d15dcf200 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x555d15dcf1e8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x555d15dcf1b8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x555d15dbf090
|       | |   |       `-CXXThisExpr 0x555d15dcf1a8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x555d15dcf308 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x555d15dcf2f0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x555d15dcf2b8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x555d15dcf288 <col:28, col:35> '<bound member function type>' ->size 0x555d15bdaf48
|       | |           `-ImplicitCastExpr 0x555d15dcf2d8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x555d15dcf270 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x555d15dcf240 <col:28> 'Vector<String> *const' lvalue ->_conf 0x555d15dbf090
|       | |                 `-CXXThisExpr 0x555d15dcf230 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x555d15dcf3d0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x555d15dcf3b8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x555d15dcf3a0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x555d15dcf370 <col:47> 'Args::Slot *const' lvalue ->_slots 0x555d15dcd600
|       |         `-CXXThisExpr 0x555d15dcf360 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x555d15dcf530 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x555d15dcf518 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555d15dcf500 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555d15dcf4c0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555d15dcf4a8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555d15dcf418 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555d15dcd728
|         |     |   `-CXXThisExpr 0x555d15dcf408 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555d15dcf448 <col:73> 'int' 0
|         `-IntegerLiteral 0x555d15dcf4e0 <col:79> 'int' 0
|-CXXMethodDecl 0x555d15da57a8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x555d15dcf758 <col:32, line:296:5>
|   `-ReturnStmt 0x555d15dcf748 <line:295:9, col:49>
|     `-BinaryOperator 0x555d15dcf728 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x555d15dcf608 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x555d15dcf5f0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x555d15dcf5d8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x555d15dcf5a8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x555d15dcd600
|       |       `-CXXThisExpr 0x555d15dcf598 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x555d15dcf708 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x555d15dcf6f0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x555d15dcf6d8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555d15dcf698 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555d15dcf680 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555d15dcf630 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555d15dcd728
|         |     |   `-CXXThisExpr 0x555d15dcf620 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555d15dcf660 <col:43> 'int' 0
|         `-IntegerLiteral 0x555d15dcf6b8 <col:49> 'int' 0
|-CXXMethodDecl 0x555d15da5898 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x555d15dcf968 <col:19, line:306:5>
|   |-IfStmt 0x555d15dcf888 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x555d15dcf7c8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x555d15dcf7b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x555d15dcf780 <col:13> 'Vector<String> *' lvalue ->_conf 0x555d15dbf090
|   | |     `-CXXThisExpr 0x555d15dcf770 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x555d15dcf868 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x555d15dcf838 <col:13, col:20> '<bound member function type>' ->clear 0x555d15bdd978
|   |     `-ImplicitCastExpr 0x555d15dcf820 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x555d15dcf7f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x555d15dbf090
|   |         `-CXXThisExpr 0x555d15dcf7e0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x555d15dcf910 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x555d15dcf8e0 <col:9, col:16> '<bound member function type>' .clear 0x555d15dcd188
|   |   `-MemberExpr 0x555d15dcf8b0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x555d15dcd5a0
|   |     `-CXXThisExpr 0x555d15dcf8a0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x555d15dcf958 <line:305:9, col:17>
|     `-UnaryOperator 0x555d15dcf940 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dcf930 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d15da5b18 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x555d15da5a20 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x555d15da5c98 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x555d15da5bd0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x555d15da6018 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x555d15da5d40 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x555d15da5f78 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x555d15da5de8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x555d15da5e60 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x555d15dcfc78 <col:67, line:327:5>
|     |-WhileStmt 0x555d15dcfc28 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x555d15dcfa40 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x555d15dcf9d0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555d15bf1a30 0x555d15bafb20 0x555d15baf7d0 0x555d15baf0c0 0x555d15b80340 0x555d15b3c640
|     | | |-DeclRefExpr 0x555d15dcf990 <col:16> 'Iter' lvalue ParmVar 0x555d15da5de8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x555d15dcf9b0 <col:25> 'Iter' lvalue ParmVar 0x555d15da5e60 'end' 'Iter'
|     | `-CompoundStmt 0x555d15dcfc08 <col:30, line:325:9>
|     |   |-CallExpr 0x555d15dcfba8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x555d15dcfa88 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x555d15dcfb78 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x555d15dcfb08 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|     |   |   `-DeclRefExpr 0x555d15dcfae8 <col:24> 'Iter' lvalue ParmVar 0x555d15da5de8 'begin' 'Iter'
|     |   `-UnaryOperator 0x555d15dcfbf0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x555d15dcfbd0 <col:15> 'Iter' lvalue ParmVar 0x555d15da5de8 'begin' 'Iter'
|     `-ReturnStmt 0x555d15dcfc68 <line:326:9, col:17>
|       `-UnaryOperator 0x555d15dcfc50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dcfc40 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d15da6120 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x555d15da6090 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x555d15da6268 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x555d15da61d8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x555d15da6330 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x555d15dcfd58 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x555d15dcfcf8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x555d15dcfca8 <col:9> '<bound member function type>' ->reset_from 0x555d15dcdaa8
|   | | `-CXXThisExpr 0x555d15dcfc98 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x555d15dcfcd8 <col:20> 'int' 0
|   `-ReturnStmt 0x555d15dcfd48 <line:352:9, col:17>
|     `-UnaryOperator 0x555d15dcfd30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dcfd20 <col:17> 'Args *' this
|-VarDecl 0x555d15da63e8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d15da6450 <col:38> 'int' 1
|-VarDecl 0x555d15da64e0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d15da6548 <col:39> 'int' 2
|-VarDecl 0x555d15da65d8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d15da6640 <col:39> 'int' 4
|-VarDecl 0x555d15da66d0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x555d15da6738 <col:39> 'int' 8
|-FunctionTemplateDecl 0x555d15da6ab8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x555d15da67b0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x555d15da6a18 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x555d15da6860 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555d15da6908 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x555d15dcfeb0 <col:43, line:371:5>
| |   `-ReturnStmt 0x555d15dcfea0 <line:370:9, col:34>
| |     `-CallExpr 0x555d15dcfe68 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555d15dcfd88 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555d15dcfe08 <col:21> 'const char *' lvalue ParmVar 0x555d15da6860 'keyword' 'const char *'
| |       |-IntegerLiteral 0x555d15dcfe28 <col:30> 'int' 0
| |       `-DeclRefExpr 0x555d15dcfe48 <col:33> 'T' lvalue ParmVar 0x555d15da6908 'x' 'T &'
| `-CXXMethodDecl 0x555d15e999d8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x555d15e997f8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x555d15e998c8 <col:37, col:40> col:40 x 'unsigned short &'
|-FunctionTemplateDecl 0x555d15da6e00 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x555d15da6b20 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15da6d60 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555d15da6bd0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da6c78 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0000 <col:45, line:375:5>
|     `-ReturnStmt 0x555d15dcfff0 <line:374:9, col:42>
|       `-CallExpr 0x555d15dcffb8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dcfed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dcff58 <col:21> 'const char *' lvalue ParmVar 0x555d15da6bd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dcff78 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x555d15dcff98 <col:41> 'T' lvalue ParmVar 0x555d15da6c78 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da7138 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x555d15da6e68 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x555d15da7098 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x555d15da6f20 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x555d15da6fc8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x555d15dd0150 <col:45, line:379:5>
| |   `-ReturnStmt 0x555d15dd0140 <line:378:9, col:43>
| |     `-CallExpr 0x555d15dd0108 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x555d15dd0028 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555d15dd00a8 <col:21> 'const char *' lvalue ParmVar 0x555d15da6f20 'keyword' 'const char *'
| |       |-DeclRefExpr 0x555d15dd00c8 <col:30> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
| |       `-DeclRefExpr 0x555d15dd00e8 <col:42> 'T' lvalue ParmVar 0x555d15da6fc8 'x' 'T &'
| `-CXXMethodDecl 0x555d15e994b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x555d15e992d0 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x555d15e993a8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x555d15da7468 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x555d15da71a0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15da73c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555d15da7250 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da72f8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0350 <col:46, line:383:5>
|     `-ReturnStmt 0x555d15dd0340 <line:382:9, col:55>
|       `-CallExpr 0x555d15dd0308 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd01f8 <col:21> 'const char *' lvalue ParmVar 0x555d15da7250 'keyword' 'const char *'
|         |-BinaryOperator 0x555d15dd02c8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555d15dd0278 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d15dd0258 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d15dd02b0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d15dd0290 <col:42> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x555d15dd02e8 <col:54> 'T' lvalue ParmVar 0x555d15da72f8 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da7868 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x555d15da74d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15da77c8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x555d15da7580 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da7600 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d15da76a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0490 <col:54, line:388:5>
|     |-CallExpr 0x555d15dd0418 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd0368 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d15dd03a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd03b8 <col:30> 'const char *' lvalue ParmVar 0x555d15da7580 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd03d8 <col:39> 'int' lvalue ParmVar 0x555d15da7600 'flags' 'int'
|     | `-DeclRefExpr 0x555d15dd03f8 <col:46> 'T' lvalue ParmVar 0x555d15da76a8 'x' 'T &'
|     `-ReturnStmt 0x555d15dd0480 <line:387:9, col:17>
|       `-UnaryOperator 0x555d15dd0468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd0458 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15da7d18 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x555d15da78d8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15da7958 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d15da7c78 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555d15da7a18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da7ab8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x555d15da7b58 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd0600 <col:74, line:403:5>
|     `-ReturnStmt 0x555d15dd05f0 <line:402:9, col:56>
|       `-CallExpr 0x555d15dd05b0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd04c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0530 <col:28> 'const char *' lvalue ParmVar 0x555d15da7a18 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd0550 <col:37> 'int' 0
|         |-DeclRefExpr 0x555d15dd0570 <col:40> 'T' lvalue ParmVar 0x555d15da7ab8 'x' 'T &'
|         `-DeclRefExpr 0x555d15dd0590 <col:43> 'const V' lvalue ParmVar 0x555d15da7b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d15da8188 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555d15da7d88 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15da7e08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d15da80e8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x555d15da7ec8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da7f68 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x555d15da8008 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd0768 <col:76, line:407:5>
|     `-ReturnStmt 0x555d15dd0758 <line:406:9, col:65>
|       `-CallExpr 0x555d15dd0718 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0628 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0698 <col:28> 'const char *' lvalue ParmVar 0x555d15da7ec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd06b8 <col:37> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
|         |-DeclRefExpr 0x555d15dd06d8 <col:49> 'T' lvalue ParmVar 0x555d15da7f68 'x' 'T &'
|         `-DeclRefExpr 0x555d15dd06f8 <col:52> 'const V' lvalue ParmVar 0x555d15da8008 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d15da86d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x555d15da81f8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15da8278 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d15da8638 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555d15da8338 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da83b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555d15da8458 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x555d15da84f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd08d0 <col:85, line:412:5>
|     |-CallExpr 0x555d15dd0850 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd0780 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555d15dd07c0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd07d0 <col:37> 'const char *' lvalue ParmVar 0x555d15da8338 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd07f0 <col:46> 'int' lvalue ParmVar 0x555d15da83b8 'flags' 'int'
|     | |-DeclRefExpr 0x555d15dd0810 <col:53> 'T' lvalue ParmVar 0x555d15da8458 'x' 'T &'
|     | `-DeclRefExpr 0x555d15dd0830 <col:56> 'const V' lvalue ParmVar 0x555d15da84f8 'default_value' 'const V &'
|     `-ReturnStmt 0x555d15dd08c0 <line:411:9, col:17>
|       `-UnaryOperator 0x555d15dd08a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd0898 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15da8b68 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x555d15da8750 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da87c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15da8ac8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15da8888 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da8900 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x555d15da89a8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0a50 <col:53, line:425:5>
|     `-ReturnStmt 0x555d15dd0a40 <line:424:9, col:42>
|       `-CallExpr 0x555d15dd0a00 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0980 <col:21> 'const char *' lvalue ParmVar 0x555d15da8888 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd09a0 <col:30> 'int' 0
|         |-DeclRefExpr 0x555d15dd09c0 <col:33> 'P' lvalue ParmVar 0x555d15da8900 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd09e0 <col:41> 'T' lvalue ParmVar 0x555d15da89a8 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da8fb8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x555d15da8bd8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da8c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15da8f18 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15da8d18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da8d90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d15da8e38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0bc8 <col:55, line:429:5>
|     `-ReturnStmt 0x555d15dd0bb8 <line:428:9, col:50>
|       `-CallExpr 0x555d15dd0b78 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0a78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0af8 <col:21> 'const char *' lvalue ParmVar 0x555d15da8d18 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd0b18 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x555d15dd0b38 <col:41> 'P' lvalue ParmVar 0x555d15da8d90 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd0b58 <col:49> 'T' lvalue ParmVar 0x555d15da8e38 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da9408 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x555d15da9028 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da90a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15da9368 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15da9168 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da91e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d15da9288 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0d40 <col:55, line:433:5>
|     `-ReturnStmt 0x555d15dd0d30 <line:432:9, col:51>
|       `-CallExpr 0x555d15dd0cf0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0bf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0c70 <col:21> 'const char *' lvalue ParmVar 0x555d15da9168 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd0c90 <col:30> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
|         |-DeclRefExpr 0x555d15dd0cb0 <col:42> 'P' lvalue ParmVar 0x555d15da91e0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd0cd0 <col:50> 'T' lvalue ParmVar 0x555d15da9288 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da9858 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x555d15da9478 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da94f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15da97b8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15da95b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da9630 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555d15da96d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd0f68 <col:56, line:437:5>
|     `-ReturnStmt 0x555d15dd0f58 <line:436:9, col:63>
|       `-CallExpr 0x555d15dd0f18 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd0d68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd0de8 <col:21> 'const char *' lvalue ParmVar 0x555d15da95b8 'keyword' 'const char *'
|         |-BinaryOperator 0x555d15dd0eb8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555d15dd0e68 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d15dd0e48 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d15dd0ea0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d15dd0e80 <col:42> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555d15dd0ed8 <col:54> 'P' lvalue ParmVar 0x555d15da9630 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd0ef8 <col:62> 'T' lvalue ParmVar 0x555d15da96d8 'x' 'T &'
|-FunctionTemplateDecl 0x555d15da9d88 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x555d15da98c8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da9948 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15da9ce8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d15da9a08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15da9a88 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d15da9b00 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555d15da9ba8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd10d0 <col:64, line:442:5>
|     |-CallExpr 0x555d15dd1050 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd0f80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d15dd0fc0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd0fd0 <col:30> 'const char *' lvalue ParmVar 0x555d15da9a08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd0ff0 <col:39> 'int' lvalue ParmVar 0x555d15da9a88 'flags' 'int'
|     | |-DeclRefExpr 0x555d15dd1010 <col:46> 'P' lvalue ParmVar 0x555d15da9b00 'parser' 'P'
|     | `-DeclRefExpr 0x555d15dd1030 <col:54> 'T' lvalue ParmVar 0x555d15da9ba8 'x' 'T &'
|     `-ReturnStmt 0x555d15dd10c0 <line:441:9, col:17>
|       `-UnaryOperator 0x555d15dd10a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd1098 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15daa388 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x555d15da9e00 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15da9e78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d15da9ef8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d15daa2e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555d15da9fc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daa038 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d15daa0d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x555d15daa1a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd1268 <col:84, line:458:5>
|     `-ReturnStmt 0x555d15dd1258 <line:457:9, col:64>
|       `-CallExpr 0x555d15dd1210 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1170 <col:28> 'const char *' lvalue ParmVar 0x555d15da9fc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd1190 <col:37> 'int' 0
|         |-DeclRefExpr 0x555d15dd11b0 <col:40> 'P' lvalue ParmVar 0x555d15daa038 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd11d0 <col:48> 'T' lvalue ParmVar 0x555d15daa0d8 'x' 'T &'
|         `-DeclRefExpr 0x555d15dd11f0 <col:51> 'const V' lvalue ParmVar 0x555d15daa1a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d15daa908 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x555d15daa400 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15daa478 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d15daa4f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d15daa868 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x555d15daa5c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daa638 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555d15daa6d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x555d15daa778 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd13f8 <col:86, line:462:5>
|     `-ReturnStmt 0x555d15dd13e8 <line:461:9, col:73>
|       `-CallExpr 0x555d15dd13a0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1300 <col:28> 'const char *' lvalue ParmVar 0x555d15daa5c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd1320 <col:37> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
|         |-DeclRefExpr 0x555d15dd1340 <col:49> 'P' lvalue ParmVar 0x555d15daa638 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd1360 <col:57> 'T' lvalue ParmVar 0x555d15daa6d8 'x' 'T &'
|         `-DeclRefExpr 0x555d15dd1380 <col:60> 'const V' lvalue ParmVar 0x555d15daa778 'default_value' 'const V &'
|-FunctionTemplateDecl 0x555d15daaf98 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x555d15daa980 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15daa9f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x555d15daaa78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d15daaef8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555d15daab40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daabc0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x555d15daac38 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x555d15daacd8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x555d15daada8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x555d15dd1588 <col:95, line:467:5>
|     |-CallExpr 0x555d15dd1500 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd1410 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555d15dd1450 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd1460 <col:37> 'const char *' lvalue ParmVar 0x555d15daab40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd1480 <col:46> 'int' lvalue ParmVar 0x555d15daabc0 'flags' 'int'
|     | |-DeclRefExpr 0x555d15dd14a0 <col:53> 'P' lvalue ParmVar 0x555d15daac38 'parser' 'P'
|     | |-DeclRefExpr 0x555d15dd14c0 <col:61> 'T' lvalue ParmVar 0x555d15daacd8 'x' 'T &'
|     | `-DeclRefExpr 0x555d15dd14e0 <col:64> 'const V' lvalue ParmVar 0x555d15daada8 'default_value' 'const V &'
|     `-ReturnStmt 0x555d15dd1578 <line:466:9, col:17>
|       `-UnaryOperator 0x555d15dd1560 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd1550 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15dab578 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x555d15dab018 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dab098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15dab118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15dab4d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15dab1e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dab258 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dab2f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d15dab398 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d15dd1730 <col:63, line:481:5>
|     `-ReturnStmt 0x555d15dd1720 <line:480:9, col:47>
|       `-CallExpr 0x555d15dd16d8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd15b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1638 <col:21> 'const char *' lvalue ParmVar 0x555d15dab1e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd1658 <col:30> 'int' 0
|         |-DeclRefExpr 0x555d15dd1678 <col:33> 'P' lvalue ParmVar 0x555d15dab258 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd1698 <col:41> 'T1' lvalue ParmVar 0x555d15dab2f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d15dd16b8 <col:45> 'T2' lvalue ParmVar 0x555d15dab398 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d15dabaf8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x555d15dab5f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dab668 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15dab6e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15daba58 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15dab7b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dab828 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dab8c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d15dab968 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d15dd18d0 <col:65, line:485:5>
|     `-ReturnStmt 0x555d15dd18c0 <line:484:9, col:55>
|       `-CallExpr 0x555d15dd1878 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd17d8 <col:21> 'const char *' lvalue ParmVar 0x555d15dab7b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd17f8 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int'
|         |-DeclRefExpr 0x555d15dd1818 <col:41> 'P' lvalue ParmVar 0x555d15dab828 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd1838 <col:49> 'T1' lvalue ParmVar 0x555d15dab8c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d15dd1858 <col:53> 'T2' lvalue ParmVar 0x555d15dab968 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d15dac078 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x555d15dabb70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dabbe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15dabc68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15dabfd8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15dabd30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dabda8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dabe48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d15dabee8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d15dd1a70 <col:65, line:489:5>
|     `-ReturnStmt 0x555d15dd1a60 <line:488:9, col:56>
|       `-CallExpr 0x555d15dd1a18 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd18f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1978 <col:21> 'const char *' lvalue ParmVar 0x555d15dabd30 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd1998 <col:30> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
|         |-DeclRefExpr 0x555d15dd19b8 <col:42> 'P' lvalue ParmVar 0x555d15dabda8 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd19d8 <col:50> 'T1' lvalue ParmVar 0x555d15dabe48 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d15dd19f8 <col:54> 'T2' lvalue ParmVar 0x555d15dabee8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d15dac5f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x555d15dac0f0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dac168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15dac1e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15dac558 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15dac2b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dac328 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dac3c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d15dac468 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d15dd1cc0 <col:66, line:493:5>
|     `-ReturnStmt 0x555d15dd1cb0 <line:492:9, col:68>
|       `-CallExpr 0x555d15dd1c68 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1a98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1b18 <col:21> 'const char *' lvalue ParmVar 0x555d15dac2b0 'keyword' 'const char *'
|         |-BinaryOperator 0x555d15dd1be8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x555d15dd1b98 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d15dd1b78 <col:30> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d15dd1bd0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d15dd1bb0 <col:42> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555d15dd1c08 <col:54> 'P' lvalue ParmVar 0x555d15dac328 'parser' 'P'
|         |-DeclRefExpr 0x555d15dd1c28 <col:62> 'T1' lvalue ParmVar 0x555d15dac3c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x555d15dd1c48 <col:66> 'T2' lvalue ParmVar 0x555d15dac468 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555d15dacc58 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x555d15dac670 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dac6e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15dac768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15dacbb8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15dac830 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dac8b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x555d15dac928 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dac9c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x555d15daca68 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x555d15dd1e50 <col:74, line:498:5>
|     |-CallExpr 0x555d15dd1dc8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd1cd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555d15dd1d18 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd1d28 <col:30> 'const char *' lvalue ParmVar 0x555d15dac830 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd1d48 <col:39> 'int' lvalue ParmVar 0x555d15dac8b0 'flags' 'int'
|     | |-DeclRefExpr 0x555d15dd1d68 <col:46> 'P' lvalue ParmVar 0x555d15dac928 'parser' 'P'
|     | |-DeclRefExpr 0x555d15dd1d88 <col:54> 'T1' lvalue ParmVar 0x555d15dac9c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x555d15dd1da8 <col:58> 'T2' lvalue ParmVar 0x555d15daca68 'x2' 'T2 &'
|     `-ReturnStmt 0x555d15dd1e40 <line:497:9, col:17>
|       `-UnaryOperator 0x555d15dd1e28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd1e18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15dacfb8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x555d15daccd8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15dacf18 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d15dacd90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dace08 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd1f98 <col:52, line:509:5>
|     `-ReturnStmt 0x555d15dd1f88 <line:508:9, col:44>
|       `-CallExpr 0x555d15dd1f50 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1e80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd1ef0 <col:26> 'const char *' lvalue ParmVar 0x555d15dacd90 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd1f10 <col:35> 'int' 0
|         `-DeclRefExpr 0x555d15dd1f30 <col:38> 'P' lvalue ParmVar 0x555d15dace08 'parser' 'P'
|-FunctionTemplateDecl 0x555d15dad2b8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x555d15dad020 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15dad218 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d15dad0d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dad148 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd20d8 <col:54, line:513:5>
|     `-ReturnStmt 0x555d15dd20c8 <line:512:9, col:52>
|       `-CallExpr 0x555d15dd2090 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd1fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd2030 <col:26> 'const char *' lvalue ParmVar 0x555d15dad0d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd2050 <col:35> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int'
|         `-DeclRefExpr 0x555d15dd2070 <col:46> 'P' lvalue ParmVar 0x555d15dad148 'parser' 'P'
|-FunctionTemplateDecl 0x555d15dad5b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x555d15dad320 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15dad518 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d15dad3d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dad448 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd2218 <col:54, line:517:5>
|     `-ReturnStmt 0x555d15dd2208 <line:516:9, col:53>
|       `-CallExpr 0x555d15dd21d0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd2100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd2170 <col:26> 'const char *' lvalue ParmVar 0x555d15dad3d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd2190 <col:35> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int'
|         `-DeclRefExpr 0x555d15dd21b0 <col:47> 'P' lvalue ParmVar 0x555d15dad448 'parser' 'P'
|-FunctionTemplateDecl 0x555d15dad8b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x555d15dad620 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15dad818 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d15dad6d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dad748 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd3b08 <col:55, line:521:5>
|     `-ReturnStmt 0x555d15dd3af8 <line:520:9, col:65>
|       `-CallExpr 0x555d15dd3ac0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd3940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd39b0 <col:26> 'const char *' lvalue ParmVar 0x555d15dad6d0 'keyword' 'const char *'
|         |-BinaryOperator 0x555d15dd3a80 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x555d15dd3a30 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555d15dd3a10 <col:35> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x555d15dd3a68 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x555d15dd3a48 <col:47> 'const int' lvalue Var 0x555d15da64e0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x555d15dd3aa0 <col:59> 'P' lvalue ParmVar 0x555d15dad748 'parser' 'P'
|-FunctionTemplateDecl 0x555d15dadc88 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x555d15dad920 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15dadbe8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555d15dad9d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dada50 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555d15dadac8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd3c48 <col:63, line:526:5>
|     |-CallExpr 0x555d15dd3bd0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd3b20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x555d15dd3b60 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd3b70 <col:35> 'const char *' lvalue ParmVar 0x555d15dad9d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555d15dd3b90 <col:44> 'int' lvalue ParmVar 0x555d15dada50 'flags' 'int'
|     | `-DeclRefExpr 0x555d15dd3bb0 <col:51> 'P' lvalue ParmVar 0x555d15dadac8 'parser' 'P'
|     `-ReturnStmt 0x555d15dd3c38 <line:525:9, col:17>
|       `-UnaryOperator 0x555d15dd3c20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd3c10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15dae0d8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x555d15dadcf8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dadd78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15dae038 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15dade38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dadeb0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dadf58 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd3da0 <col:58, line:541:5>
|     `-ReturnStmt 0x555d15dd3d90 <line:540:9, col:39>
|       `-CallExpr 0x555d15dd3d58 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd3c78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd3cf8 <col:21> 'const char *' lvalue ParmVar 0x555d15dade38 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd3d18 <col:30> 'P' lvalue ParmVar 0x555d15dadeb0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd3d38 <col:38> 'T' lvalue ParmVar 0x555d15dadf58 'x' 'T &'
|-FunctionTemplateDecl 0x555d15dae528 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x555d15dae148 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dae1c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15dae488 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15dae288 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dae300 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dae3a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd3ed8 <col:60, line:545:5>
|     `-ReturnStmt 0x555d15dd3ec8 <line:544:9, col:41>
|       `-CallExpr 0x555d15dd3e90 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd3dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd3e30 <col:23> 'const char *' lvalue ParmVar 0x555d15dae288 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd3e50 <col:32> 'P' lvalue ParmVar 0x555d15dae300 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd3e70 <col:40> 'T' lvalue ParmVar 0x555d15dae3a8 'x' 'T &'
|-FunctionTemplateDecl 0x555d15dae978 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x555d15dae598 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dae618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15dae8d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15dae6d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dae750 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dae7f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd4010 <col:60, line:549:5>
|     `-ReturnStmt 0x555d15dd4000 <line:548:9, col:41>
|       `-CallExpr 0x555d15dd3fc8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd3f00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd3f68 <col:23> 'const char *' lvalue ParmVar 0x555d15dae6d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd3f88 <col:32> 'P' lvalue ParmVar 0x555d15dae750 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd3fa8 <col:40> 'T' lvalue ParmVar 0x555d15dae7f8 'x' 'T &'
|-FunctionTemplateDecl 0x555d15daee20 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x555d15dae9e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15daea68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15daed80 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15daeb28 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daeba0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x555d15daec48 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd4148 <col:61, line:553:5>
|     `-ReturnStmt 0x555d15dd4138 <line:552:9, col:42>
|       `-CallExpr 0x555d15dd4100 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd40a0 <col:24> 'const char *' lvalue ParmVar 0x555d15daeb28 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd40c0 <col:33> 'P' lvalue ParmVar 0x555d15daeba0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd40e0 <col:41> 'T' lvalue ParmVar 0x555d15daec48 'x' 'T &'
|-FunctionTemplateDecl 0x555d15daf2f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x555d15daee90 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15daef08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15daf258 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d15daefc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daf048 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555d15daf0c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x555d15daf168 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd42c0 <col:69, line:557:5>
|     `-ReturnStmt 0x555d15dd42b0 <line:556:9, col:46>
|       `-CallExpr 0x555d15dd4270 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4170 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd41f0 <col:21> 'const char *' lvalue ParmVar 0x555d15daefc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd4210 <col:30> 'int' lvalue ParmVar 0x555d15daf048 'flags' 'int'
|         |-DeclRefExpr 0x555d15dd4230 <col:37> 'P' lvalue ParmVar 0x555d15daf0c0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd4250 <col:45> 'T' lvalue ParmVar 0x555d15daf168 'x' 'T &'
|-FunctionTemplateDecl 0x555d15daf608 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x555d15daf370 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15daf568 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555d15daf420 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daf498 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd4400 <col:56, line:571:5>
|     `-ReturnStmt 0x555d15dd43f0 <line:570:9, col:48>
|       `-CallExpr 0x555d15dd43b8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd42e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd4358 <col:30> 'const char *' lvalue ParmVar 0x555d15daf420 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd4378 <col:39> 'int' 0
|         `-DeclRefExpr 0x555d15dd4398 <col:42> 'P' lvalue ParmVar 0x555d15daf498 'parser' 'P'
|-FunctionTemplateDecl 0x555d15daf998 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x555d15daf670 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15daf8f8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555d15daf720 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15daf7a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d15daf818 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555d15dd45d0 <col:67, line:576:5>
|     |-CallExpr 0x555d15dd4558 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd4418 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555d15dd4458 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd4468 <col:39> 'const char *' lvalue ParmVar 0x555d15daf720 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d15dd4518 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d15dd44c8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d15dd4488 <col:48> 'int' lvalue ParmVar 0x555d15daf7a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d15dd4500 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d15dd44e0 <col:56> 'const int' lvalue Var 0x555d15da66d0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x555d15dd4538 <col:68> 'P' lvalue ParmVar 0x555d15daf818 'parser' 'P'
|     `-ReturnStmt 0x555d15dd45c0 <line:575:9, col:17>
|       `-UnaryOperator 0x555d15dd45a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd4598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15dafde8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x555d15dafa08 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dafa88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15dafd48 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555d15dafb48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15dafbc0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555d15dafc68 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd4740 <col:62, line:592:5>
|     `-ReturnStmt 0x555d15dd4730 <line:591:9, col:51>
|       `-CallExpr 0x555d15dd46f0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd4670 <col:30> 'const char *' lvalue ParmVar 0x555d15dafb48 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd4690 <col:39> 'int' 0
|         |-DeclRefExpr 0x555d15dd46b0 <col:42> 'P' lvalue ParmVar 0x555d15dafbc0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd46d0 <col:50> 'T' lvalue ParmVar 0x555d15dafc68 'x' 'T &'
|-FunctionTemplateDecl 0x555d15db02c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x555d15dafe58 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15dafed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db0228 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d15daff98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db0018 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db0090 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db0138 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd4938 <col:73, line:597:5>
|     |-CallExpr 0x555d15dd48b8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd4758 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x555d15dd4798 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd47a8 <col:39> 'const char *' lvalue ParmVar 0x555d15daff98 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d15dd4858 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d15dd4808 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d15dd47c8 <col:48> 'int' lvalue ParmVar 0x555d15db0018 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d15dd4840 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d15dd4820 <col:56> 'const int' lvalue Var 0x555d15da66d0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555d15dd4878 <col:68> 'P' lvalue ParmVar 0x555d15db0090 'parser' 'P'
|     | `-DeclRefExpr 0x555d15dd4898 <col:76> 'T' lvalue ParmVar 0x555d15db0138 'x' 'T &'
|     `-ReturnStmt 0x555d15dd4928 <line:596:9, col:17>
|       `-UnaryOperator 0x555d15dd4910 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd4900 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15db0878 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x555d15db0340 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db03b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db07d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d15db0478 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db04f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db06b0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d15dd4aa8 <col:65, line:614:5>
|     `-ReturnStmt 0x555d15dd4a98 <line:613:9, col:46>
|       `-CallExpr 0x555d15dd4a58 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd49d8 <col:25> 'const char *' lvalue ParmVar 0x555d15db0478 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd49f8 <col:34> 'int' 0
|         |-DeclRefExpr 0x555d15dd4a18 <col:37> 'P' lvalue ParmVar 0x555d15db04f0 'parser' 'P'
|         `-DeclRefExpr 0x555d15dd4a38 <col:45> 'Vector<T>' lvalue ParmVar 0x555d15db06b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555d15db0ca8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x555d15db08e8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15db0c08 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x555d15db09a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db0af0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d15dd4cc0 <col:55, line:618:5>
|     `-ReturnStmt 0x555d15dd4cb0 <line:617:9, col:55>
|       `-CallExpr 0x555d15dd4c70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4ad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd4b40 <col:25> 'const char *' lvalue ParmVar 0x555d15db09a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555d15dd4b60 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x555d15dd4c30 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555d15dd4c50 <col:54> 'Vector<T>' lvalue ParmVar 0x555d15db0af0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555d15db1278 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x555d15db0d10 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db0d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db11d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d15db0e48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db0ec8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db0f40 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db1090 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d15dd4eb8 <col:76, line:623:5>
|     |-CallExpr 0x555d15dd4e38 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555d15dd4cd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x555d15dd4d18 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x555d15dd4d28 <col:34> 'const char *' lvalue ParmVar 0x555d15db0e48 'keyword' 'const char *'
|     | |-BinaryOperator 0x555d15dd4dd8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x555d15dd4d88 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x555d15dd4d48 <col:43> 'int' lvalue ParmVar 0x555d15db0ec8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x555d15dd4dc0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x555d15dd4da0 <col:51> 'const int' lvalue Var 0x555d15da66d0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x555d15dd4df8 <col:63> 'P' lvalue ParmVar 0x555d15db0f40 'parser' 'P'
|     | `-DeclRefExpr 0x555d15dd4e18 <col:71> 'Vector<T>' lvalue ParmVar 0x555d15db1090 'x' 'Vector<T> &'
|     `-ReturnStmt 0x555d15dd4ea8 <line:622:9, col:17>
|       `-UnaryOperator 0x555d15dd4e90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd4e80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15db17b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x555d15db12f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db1368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db1718 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x555d15db1428 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db14a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db15f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x555d15dd5120 <col:66, line:627:5>
|     `-ReturnStmt 0x555d15dd5110 <line:626:9, col:59>
|       `-CallExpr 0x555d15dd50d0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555d15dd4ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555d15dd4f58 <col:25> 'const char *' lvalue ParmVar 0x555d15db1428 'keyword' 'const char *'
|         |-DeclRefExpr 0x555d15dd4f78 <col:34> 'int' lvalue ParmVar 0x555d15db14a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x555d15dd5090 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x555d15dd50b0 <col:58> 'Vector<T>' lvalue ParmVar 0x555d15db15f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x555d15db1848 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x555d15dd51a0 <col:25, line:633:5>
|   `-ReturnStmt 0x555d15dd5190 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x555d15dd5178 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555d15dd5148 <col:16> 'const bool' lvalue ->_status 0x555d15dbeef8
|         `-CXXThisExpr 0x555d15dd5138 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555d15db19f8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x555d15db1930 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x555d15dd5288 <col:27, line:639:5>
|   |-BinaryOperator 0x555d15dd5230 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d15dd51b8 <col:9> 'bool' lvalue ParmVar 0x555d15db1930 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d15dd5218 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d15dd51e8 <col:13> 'bool' lvalue ->_status 0x555d15dbeef8
|   |     `-CXXThisExpr 0x555d15dd51d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555d15dd5278 <line:638:9, col:17>
|     `-UnaryOperator 0x555d15dd5260 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dd5250 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d15db1b78 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555d15db1ab8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x555d15dd5378 <col:39, line:644:5>
|   |-BinaryOperator 0x555d15dd5320 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d15dd52a8 <col:9> 'bool' lvalue ParmVar 0x555d15db1ab8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d15dd5308 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d15dd52d8 <col:13> 'const bool' lvalue ->_status 0x555d15dbeef8
|   |     `-CXXThisExpr 0x555d15dd52c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555d15dd5368 <line:643:9, col:17>
|     `-UnaryOperator 0x555d15dd5350 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dd5340 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555d15db1c40 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x555d15dd5420 <col:30, line:651:5>
|   `-ReturnStmt 0x555d15dd5410 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x555d15dd53f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x555d15dd53c8 <col:16> 'bool' lvalue ->_read_status 0x555d15d9ef58
|         `-ImplicitCastExpr 0x555d15dd53a8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x555d15dd5398 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555d15db1d88 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x555d15db1cf8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x555d15dd5528 <col:32, line:658:5>
|   |-BinaryOperator 0x555d15dd54d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d15dd5438 <col:9> 'bool' lvalue ParmVar 0x555d15db1cf8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d15dd54b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d15dd5488 <col:13> 'bool' lvalue ->_read_status 0x555d15d9ef58
|   |     `-ImplicitCastExpr 0x555d15dd5468 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555d15dd5458 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x555d15dd5518 <line:657:9, col:17>
|     `-UnaryOperator 0x555d15dd5500 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dd54f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x555d15db1ed8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555d15db1e48 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x555d15dd5638 <col:44, line:663:5>
|   |-BinaryOperator 0x555d15dd55e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x555d15dd5548 <col:9> 'bool' lvalue ParmVar 0x555d15db1e48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x555d15dd55c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x555d15dd5598 <col:13> 'bool' lvalue ->_read_status 0x555d15d9ef58
|   |     `-ImplicitCastExpr 0x555d15dd5578 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x555d15dd5568 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x555d15dd5628 <line:662:9, col:17>
|     `-UnaryOperator 0x555d15dd5610 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15dd5600 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555d15db1fa0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x555d15db2068 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x555d15db2130 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x555d15db21f8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x555d15db2508 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x555d15db2298 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15db2468 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x555d15db2378 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd5990 <col:19, line:706:5>
|     `-IfStmt 0x555d15dd5968 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x555d15dd5738 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x555d15dd5898 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x555d15dd5868 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x555d15dd5828 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x555d15dd5790 <col:42> '<bound member function type>' ->simple_slot 0x555d15dced50
|       |     | `-CXXThisExpr 0x555d15dd5780 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x555d15dd57e0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x555d15dd57c0 <col:55> 'T' lvalue ParmVar 0x555d15db2378 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x555d15dd5808 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x555d15dd5958 <line:705:13, col:34>
|         `-CallExpr 0x555d15dd5930 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x555d15dd58b8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x555d15dd5910 <col:33> 'T' lvalue ParmVar 0x555d15db2378 'x' 'T &'
|-FunctionTemplateDecl 0x555d15db27d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x555d15db2568 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15db2738 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x555d15db2648 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x555d15dd5d70 <col:31, line:717:5>
|     |-DeclStmt 0x555d15dd5ad0 <line:713:9, col:23>
|     | `-VarDecl 0x555d15dd59b8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x555d15dd5aa8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555d15dd5a30 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555d15dd5a88 <col:21> 'T' lvalue ParmVar 0x555d15db2648 'x' 'T &'
|     |-IfStmt 0x555d15dd5d20 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x555d15dd5bc8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x555d15dd5d00 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555d15dd5ca0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555d15dd5c30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|     |   | `-DeclRefExpr 0x555d15dd5c10 <col:14> 'T *' lvalue Var 0x555d15dd59b8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x555d15dd5ce0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x555d15dd5d58 <line:716:9, col:16>
|       `-DeclRefExpr 0x555d15dd5d38 <col:16> 'T *' lvalue Var 0x555d15dd59b8 's' 'T *'
|-FunctionTemplateDecl 0x555d15db2be8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x555d15db2838 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15db28b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d15db2b48 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x555d15db2998 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x555d15db2a38 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x555d15dd6080 <col:37, line:726:5>
|     |-IfStmt 0x555d15dd6010 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x555d15dd6030 <line:723:13, col:26>
|     | | `-VarDecl 0x555d15dd5dd8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x555d15dd5ec8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x555d15dd5e50 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x555d15dd5ea8 <col:25> 'T' lvalue ParmVar 0x555d15db2998 'x' 'T &'
|     | |-DeclRefExpr 0x555d15dd5ef0 <col:16> 'T *' lvalue Var 0x555d15dd5dd8 's' 'T *'
|     | `-BinaryOperator 0x555d15dd5ff0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x555d15dd5fa0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x555d15dd5f30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|     |   | `-DeclRefExpr 0x555d15dd5f10 <col:14> 'T *' lvalue Var 0x555d15dd5dd8 's' 'T *'
|     |   `-DeclRefExpr 0x555d15dd5fd0 <col:18> 'const V' lvalue ParmVar 0x555d15db2a38 'value' 'const V &'
|     `-ReturnStmt 0x555d15dd6070 <line:725:9, col:17>
|       `-UnaryOperator 0x555d15dd6058 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555d15dd6048 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555d15db2ff8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x555d15db2c50 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555d15db2f58 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x555d15db2d00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db2d90 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db2e38 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x555d15dd6ea0 <col:65, line:737:5>
|     |-DeclStmt 0x555d15dd6118 <line:732:9, col:26>
|     | `-VarDecl 0x555d15dd60b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d15dd6e68 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x555d15dd6e88 <line:733:13, col:58>
|       | `-VarDecl 0x555d15dd6140 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d15dd6320 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d15dd62f0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d15dd62d8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d15dd62b8 <col:26, col:58> 'String' (CXXTemporary 0x555d15dd62b8)
|       |           `-CXXMemberCallExpr 0x555d15dd6248 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d15dd61b8 <col:26> '<bound member function type>' ->find 0x555d15dce368
|       |             | `-CXXThisExpr 0x555d15dd61a8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d15dd6280 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15dd61e8 <col:31> 'const char *' lvalue ParmVar 0x555d15db2d00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d15dd6298 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15dd6208 <col:40> 'int' lvalue ParmVar 0x555d15db2d90 'flags' 'int'
|       |             `-DeclRefExpr 0x555d15dd6228 <col:47> 'Args::Slot *' lvalue Var 0x555d15dd60b0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d15dd63d8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d15dd63c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d15dd63a0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d15dd6370 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |       `-ImplicitCastExpr 0x555d15dd6358 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d15dd6338 <col:20> 'String' lvalue Var 0x555d15dd6140 'str' 'String'
|       `-CompoundStmt 0x555d15dd6e48 <col:61, line:736:9>
|         |-DeclStmt 0x555d15dd6890 <line:734:13, col:76>
|         | `-VarDecl 0x555d15dd6428 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555d15dd6860 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d15dd67d0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d15dd6818 <col:60> 'T' lvalue ParmVar 0x555d15db2e38 'variable' 'T &'
|         |     `-UnaryOperator 0x555d15dd6848 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d15dd6838 <col:71> 'Args *' this
|         `-CallExpr 0x555d15dd6e18 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x555d15dd68b8 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|           | `-CXXThisExpr 0x555d15dd68a8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d15dd6dd8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555d15dd68e8 <col:23> 'T *' lvalue Var 0x555d15dd6428 's' 'T *'
|           | `-CallExpr 0x555d15dd6d98 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d15dd6b70 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x555d15dd6c70 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x555d15dd6c90 <col:86> 'String' lvalue Var 0x555d15dd6140 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d15dd6d40 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d15dd6cd0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|           |   | `-DeclRefExpr 0x555d15dd6cb0 <col:92> 'T *' lvalue Var 0x555d15dd6428 's' 'T *'
|           |   `-UnaryOperator 0x555d15dd6d80 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d15dd6d70 <col:96> 'Args *' this
|           `-DeclRefExpr 0x555d15dd6df8 <col:103> 'Args::Slot *' lvalue Var 0x555d15dd60b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db3548 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555d15db3068 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15db30e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555d15db34a8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555d15db31a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db3228 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db32c8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x555d15db3368 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x555d15dda160 <col:88, line:745:5>
|     |-DeclStmt 0x555d15dd6f38 <line:741:9, col:26>
|     | `-VarDecl 0x555d15dd6ed0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d15dd7158 <line:742:9, col:55>
|     | `-VarDecl 0x555d15dd6f60 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555d15dd7140 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555d15dd7110 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555d15dd70f8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555d15dd70d8 <col:22, col:54> 'String' (CXXTemporary 0x555d15dd70d8)
|     |           `-CXXMemberCallExpr 0x555d15dd7068 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555d15dd6fd8 <col:22> '<bound member function type>' ->find 0x555d15dce368
|     |             | `-CXXThisExpr 0x555d15dd6fc8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555d15dd70a0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d15dd7008 <col:27> 'const char *' lvalue ParmVar 0x555d15db31a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555d15dd70b8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d15dd7028 <col:36> 'int' lvalue ParmVar 0x555d15db3228 'flags' 'int'
|     |             `-DeclRefExpr 0x555d15dd7048 <col:43> 'Args::Slot *' lvalue Var 0x555d15dd6ed0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555d15dd7530 <line:743:9, col:72>
|     | `-VarDecl 0x555d15dd71a8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d15dd7500 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d15dd7470 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555d15dd74b8 <col:56> 'T' lvalue ParmVar 0x555d15db32c8 'variable' 'T &'
|     |     `-UnaryOperator 0x555d15dd74e8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d15dd74d8 <col:67> 'Args *' this
|     `-CallExpr 0x555d15dda130 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x555d15dd7558 <col:9> '<bound member function type>' ->postparse 0x555d15dce578
|       | `-CXXThisExpr 0x555d15dd7548 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555d15dda0f0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555d15dd7588 <col:19> 'T *' lvalue Var 0x555d15dd71a8 's' 'T *'
|       | `-ParenExpr 0x555d15dda0d0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x555d15dda0a0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555d15dda088 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555d15dda070 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555d15dda050 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555d15dda020 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |     |       `-ImplicitCastExpr 0x555d15dda008 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555d15dd75a8 <col:25> 'String' lvalue Var 0x555d15dd6f60 'str' 'String'
|       |     |-CallExpr 0x555d15dd9e78 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555d15dd7830 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x555d15dd9d50 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x555d15dd9d70 <col:89> 'String' lvalue Var 0x555d15dd6f60 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555d15dd9e20 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555d15dd9db0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|       |     | | `-DeclRefExpr 0x555d15dd9d90 <col:95> 'T *' lvalue Var 0x555d15dd71a8 's' 'T *'
|       |     | `-UnaryOperator 0x555d15dd9e60 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555d15dd9e50 <col:99> 'Args *' this
|       |     `-ParenExpr 0x555d15dd9fe8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x555d15dd9fc8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x555d15dd9f98 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555d15dd9f48 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555d15dd9ed8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|       |         | | `-DeclRefExpr 0x555d15dd9eb8 <col:109> 'T *' lvalue Var 0x555d15dd71a8 's' 'T *'
|       |         | `-DeclRefExpr 0x555d15dd9f78 <col:113> 'const V' lvalue ParmVar 0x555d15db3368 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555d15dd9fb8 <col:120> 'bool' true
|       `-DeclRefExpr 0x555d15dda110 <col:128> 'Args::Slot *' lvalue Var 0x555d15dd6ed0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db3a78 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x555d15db35c0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db3638 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db39d8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d15db36f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db3778 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db37f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db3898 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x555d15ddad58 <col:75, line:754:5>
|     |-DeclStmt 0x555d15dda208 <line:749:9, col:26>
|     | `-VarDecl 0x555d15dda1a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d15ddad20 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x555d15ddad40 <line:750:13, col:58>
|       | `-VarDecl 0x555d15dda230 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d15dda410 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d15dda3e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d15dda3c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d15dda3a8 <col:26, col:58> 'String' (CXXTemporary 0x555d15dda3a8)
|       |           `-CXXMemberCallExpr 0x555d15dda338 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d15dda2a8 <col:26> '<bound member function type>' ->find 0x555d15dce368
|       |             | `-CXXThisExpr 0x555d15dda298 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d15dda370 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15dda2d8 <col:31> 'const char *' lvalue ParmVar 0x555d15db36f8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d15dda388 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15dda2f8 <col:40> 'int' lvalue ParmVar 0x555d15db3778 'flags' 'int'
|       |             `-DeclRefExpr 0x555d15dda318 <col:47> 'Args::Slot *' lvalue Var 0x555d15dda1a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d15dda4c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d15dda4b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d15dda490 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d15dda460 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |       `-ImplicitCastExpr 0x555d15dda448 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d15dda428 <col:20> 'String' lvalue Var 0x555d15dda230 'str' 'String'
|       `-CompoundStmt 0x555d15ddad00 <col:61, line:753:9>
|         |-DeclStmt 0x555d15dda8a0 <line:751:13, col:63>
|         | `-VarDecl 0x555d15dda518 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x555d15dda870 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d15dda7e0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d15dda828 <col:47> 'T' lvalue ParmVar 0x555d15db3898 'variable' 'T &'
|         |     `-UnaryOperator 0x555d15dda858 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d15dda848 <col:58> 'Args *' this
|         `-CallExpr 0x555d15ddacd0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x555d15dda8c8 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|           | `-CXXThisExpr 0x555d15dda8b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d15ddac90 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x555d15dda8f8 <col:23> 'T *' lvalue Var 0x555d15dda518 's' 'T *'
|           | `-CallExpr 0x555d15ddac50 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d15ddaae0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555d15ddab28 <col:56> 'P' lvalue ParmVar 0x555d15db37f0 'parser' 'P'
|           |   |-DeclRefExpr 0x555d15ddab48 <col:64> 'String' lvalue Var 0x555d15dda230 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d15ddabf8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d15ddab88 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|           |   | `-DeclRefExpr 0x555d15ddab68 <col:70> 'T *' lvalue Var 0x555d15dda518 's' 'T *'
|           |   `-UnaryOperator 0x555d15ddac38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d15ddac28 <col:74> 'Args *' this
|           `-DeclRefExpr 0x555d15ddacb0 <col:81> 'Args::Slot *' lvalue Var 0x555d15dda1a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db40d8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555d15db3af0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555d15db3b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x555d15db3be8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555d15db4038 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555d15db3cb0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db3d30 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db3da8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db3e48 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x555d15db3ee8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x555d15ddbae8 <col:98, line:762:5>
|     |-DeclStmt 0x555d15ddadf0 <line:758:9, col:26>
|     | `-VarDecl 0x555d15ddad88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d15ddb010 <line:759:9, col:55>
|     | `-VarDecl 0x555d15ddae18 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x555d15ddaff8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x555d15ddafc8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x555d15ddafb0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x555d15ddaf90 <col:22, col:54> 'String' (CXXTemporary 0x555d15ddaf90)
|     |           `-CXXMemberCallExpr 0x555d15ddaf20 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x555d15ddae90 <col:22> '<bound member function type>' ->find 0x555d15dce368
|     |             | `-CXXThisExpr 0x555d15ddae80 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x555d15ddaf58 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d15ddaec0 <col:27> 'const char *' lvalue ParmVar 0x555d15db3cb0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x555d15ddaf70 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x555d15ddaee0 <col:36> 'int' lvalue ParmVar 0x555d15db3d30 'flags' 'int'
|     |             `-DeclRefExpr 0x555d15ddaf00 <col:43> 'Args::Slot *' lvalue Var 0x555d15ddad88 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x555d15ddb430 <line:760:9, col:59>
|     | `-VarDecl 0x555d15ddb068 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d15ddb400 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d15ddb370 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x555d15ddb3b8 <col:43> 'T' lvalue ParmVar 0x555d15db3e48 'variable' 'T &'
|     |     `-UnaryOperator 0x555d15ddb3e8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d15ddb3d8 <col:54> 'Args *' this
|     `-CallExpr 0x555d15ddbab8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x555d15ddb458 <col:9> '<bound member function type>' ->postparse 0x555d15dce578
|       | `-CXXThisExpr 0x555d15ddb448 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x555d15ddba78 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x555d15ddb488 <col:19> 'T *' lvalue Var 0x555d15ddb068 's' 'T *'
|       | `-ParenExpr 0x555d15ddba58 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x555d15ddba28 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x555d15ddba10 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x555d15ddb9f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x555d15ddb9d8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x555d15ddb9a8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |     |       `-ImplicitCastExpr 0x555d15ddb990 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x555d15ddb4a8 <col:25> 'String' lvalue Var 0x555d15ddae18 'str' 'String'
|       |     |-CallExpr 0x555d15ddb800 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x555d15ddb690 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x555d15ddb6d8 <col:59> 'P' lvalue ParmVar 0x555d15db3da8 'parser' 'P'
|       |     | |-DeclRefExpr 0x555d15ddb6f8 <col:67> 'String' lvalue Var 0x555d15ddae18 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x555d15ddb7a8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x555d15ddb738 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|       |     | | `-DeclRefExpr 0x555d15ddb718 <col:73> 'T *' lvalue Var 0x555d15ddb068 's' 'T *'
|       |     | `-UnaryOperator 0x555d15ddb7e8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x555d15ddb7d8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x555d15ddb970 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x555d15ddb950 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x555d15ddb920 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x555d15ddb8d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x555d15ddb860 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|       |         | | `-DeclRefExpr 0x555d15ddb840 <col:87> 'T *' lvalue Var 0x555d15ddb068 's' 'T *'
|       |         | `-DeclRefExpr 0x555d15ddb900 <col:91> 'const V' lvalue ParmVar 0x555d15db3ee8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x555d15ddb940 <col:98> 'bool' true
|       `-DeclRefExpr 0x555d15ddba98 <col:106> 'Args::Slot *' lvalue Var 0x555d15ddad88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db4748 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x555d15db4158 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db41d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555d15db4258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555d15db46a8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555d15db4320 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db43a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db4418 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db44b8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x555d15db4558 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x555d15ddcac8 <col:60, line:773:5>
|     |-DeclStmt 0x555d15ddbb90 <line:767:9, col:26>
|     | `-VarDecl 0x555d15ddbb28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d15ddca90 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x555d15ddcab0 <line:768:13, col:58>
|       | `-VarDecl 0x555d15ddbbb8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d15ddbd98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d15ddbd68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d15ddbd50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d15ddbd30 <col:26, col:58> 'String' (CXXTemporary 0x555d15ddbd30)
|       |           `-CXXMemberCallExpr 0x555d15ddbcc0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d15ddbc30 <col:26> '<bound member function type>' ->find 0x555d15dce368
|       |             | `-CXXThisExpr 0x555d15ddbc20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d15ddbcf8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15ddbc60 <col:31> 'const char *' lvalue ParmVar 0x555d15db4320 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d15ddbd10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15ddbc80 <col:40> 'int' lvalue ParmVar 0x555d15db43a0 'flags' 'int'
|       |             `-DeclRefExpr 0x555d15ddbca0 <col:47> 'Args::Slot *' lvalue Var 0x555d15ddbb28 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d15ddbe50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d15ddbe38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d15ddbe18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d15ddbde8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |       `-ImplicitCastExpr 0x555d15ddbdd0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d15ddbdb0 <col:20> 'String' lvalue Var 0x555d15ddbbb8 'str' 'String'
|       `-CompoundStmt 0x555d15ddca68 <col:61, line:772:9>
|         |-DeclStmt 0x555d15ddc190 <line:769:13, col:66>
|         | `-VarDecl 0x555d15ddbea8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x555d15ddc160 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d15ddc0d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d15ddc118 <col:49> 'T1' lvalue ParmVar 0x555d15db44b8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x555d15ddc148 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d15ddc138 <col:61> 'Args *' this
|         |-DeclStmt 0x555d15ddc500 <line:770:13, col:66>
|         | `-VarDecl 0x555d15ddc218 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x555d15ddc4d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x555d15ddc440 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x555d15ddc488 <col:49> 'T2' lvalue ParmVar 0x555d15db4558 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x555d15ddc4b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x555d15ddc4a8 <col:61> 'Args *' this
|         `-CallExpr 0x555d15ddca38 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x555d15ddc528 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|           | `-CXXThisExpr 0x555d15ddc518 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x555d15ddc9f8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x555d15ddc598 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x555d15ddc558 <col:23> 'T1 *' lvalue Var 0x555d15ddbea8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x555d15ddc578 <col:29> 'T2 *' lvalue Var 0x555d15ddc218 's2' 'T2 *'
|           | `-CallExpr 0x555d15ddc9b0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x555d15ddc780 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x555d15ddc7c8 <col:63> 'P' lvalue ParmVar 0x555d15db4418 'parser' 'P'
|           |   |-DeclRefExpr 0x555d15ddc7e8 <col:71> 'String' lvalue Var 0x555d15ddbbb8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x555d15ddc898 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d15ddc828 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|           |   | `-DeclRefExpr 0x555d15ddc808 <col:77> 'T1 *' lvalue Var 0x555d15ddbea8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x555d15ddc958 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x555d15ddc8e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|           |   | `-DeclRefExpr 0x555d15ddc8c8 <col:82> 'T2 *' lvalue Var 0x555d15ddc218 's2' 'T2 *'
|           |   `-UnaryOperator 0x555d15ddc998 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x555d15ddc988 <col:87> 'Args *' this
|           `-DeclRefExpr 0x555d15ddca18 <col:94> 'Args::Slot *' lvalue Var 0x555d15ddbb28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db4b38 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x555d15db47c8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15db4a98 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555d15db4880 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db4900 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db4978 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x555d15ddcfe0 <col:67, line:780:5>
|     |-DeclStmt 0x555d15ddcb60 <line:777:9, col:26>
|     | `-VarDecl 0x555d15ddcaf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x555d15ddcfa8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x555d15ddcfc8 <line:778:13, col:58>
|       | `-VarDecl 0x555d15ddcb88 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x555d15ddcd68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x555d15ddcd38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x555d15ddcd20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x555d15ddcd00 <col:26, col:58> 'String' (CXXTemporary 0x555d15ddcd00)
|       |           `-CXXMemberCallExpr 0x555d15ddcc90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x555d15ddcc00 <col:26> '<bound member function type>' ->find 0x555d15dce368
|       |             | `-CXXThisExpr 0x555d15ddcbf0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x555d15ddccc8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15ddcc30 <col:31> 'const char *' lvalue ParmVar 0x555d15db4880 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x555d15ddcce0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x555d15ddcc50 <col:40> 'int' lvalue ParmVar 0x555d15db4900 'flags' 'int'
|       |             `-DeclRefExpr 0x555d15ddcc70 <col:47> 'Args::Slot *' lvalue Var 0x555d15ddcaf8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x555d15ddce20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x555d15ddce08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x555d15ddcde8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x555d15ddcdb8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|       |       `-ImplicitCastExpr 0x555d15ddcda0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x555d15ddcd80 <col:20> 'String' lvalue Var 0x555d15ddcb88 'str' 'String'
|       `-CallExpr 0x555d15ddcf78 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x555d15ddce48 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|         | `-CXXThisExpr 0x555d15ddce38 <col:13> 'Args *' implicit this
|         |-CallExpr 0x555d15ddcf28 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x555d15ddce98 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x555d15ddce78 <col:23> 'P' lvalue ParmVar 0x555d15db4978 'parser' 'P'
|         | |-DeclRefExpr 0x555d15ddcee0 <col:36> 'String' lvalue Var 0x555d15ddcb88 'str' 'String'
|         | `-UnaryOperator 0x555d15ddcf10 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x555d15ddcf00 <col:42> 'Args *' this
|         `-DeclRefExpr 0x555d15ddcf58 <col:49> 'Args::Slot *' lvalue Var 0x555d15ddcaf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555d15db4ed8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555d15db4ba8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555d15db4e38 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555d15db4c60 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db4ce0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db4d58 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x555d15ddd950 <col:71, line:792:5>
|     |-DeclStmt 0x555d15ddd078 <line:784:9, col:26>
|     | `-VarDecl 0x555d15ddd010 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d15ddd148 <line:785:9, col:29>
|     | `-VarDecl 0x555d15ddd0a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d15ddd130 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d15ddd110 <col:28> 'int' 1
|     |-WhileStmt 0x555d15ddd800 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x555d15ddd820 <line:786:16, col:61>
|     | | `-VarDecl 0x555d15ddd170 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d15ddd350 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d15ddd320 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d15ddd308 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d15ddd2e8 <col:29, col:61> 'String' (CXXTemporary 0x555d15ddd2e8)
|     | |           `-CXXMemberCallExpr 0x555d15ddd278 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d15ddd1e8 <col:29> '<bound member function type>' ->find 0x555d15dce368
|     | |             | `-CXXThisExpr 0x555d15ddd1d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d15ddd2b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15ddd218 <col:34> 'const char *' lvalue ParmVar 0x555d15db4c60 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d15ddd2c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15ddd238 <col:43> 'int' lvalue ParmVar 0x555d15db4ce0 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d15ddd258 <col:50> 'Args::Slot *' lvalue Var 0x555d15ddd010 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d15ddd408 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d15ddd3f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d15ddd3d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d15ddd3a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|     | |       `-ImplicitCastExpr 0x555d15ddd388 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d15ddd368 <col:23> 'String' lvalue Var 0x555d15ddd170 'str' 'String'
|     | `-CompoundStmt 0x555d15ddd7d8 <col:64, line:790:9>
|     |   |-CallExpr 0x555d15ddd560 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x555d15ddd430 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|     |   | | `-CXXThisExpr 0x555d15ddd420 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555d15ddd510 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555d15ddd480 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555d15ddd460 <col:23> 'P' lvalue ParmVar 0x555d15db4d58 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555d15ddd4c8 <col:36> 'String' lvalue Var 0x555d15ddd170 'str' 'String'
|     |   | | `-UnaryOperator 0x555d15ddd4f8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555d15ddd4e8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x555d15ddd540 <col:49> 'Args::Slot *' lvalue Var 0x555d15ddd010 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555d15ddd6f8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d15ddd590 <col:13> 'int' lvalue Var 0x555d15ddd0a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d15ddd6e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d15ddd6c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d15ddd628 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d15ddd608 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d15ddd5f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d15ddd5b0 <col:28> 'int' lvalue Var 0x555d15ddd0a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d15ddd5d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d15ddd6a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d15ddd678 <col:49> 'bool' lvalue ->_read_status 0x555d15d9ef58
|     |   |         `-ImplicitCastExpr 0x555d15ddd658 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d15ddd648 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d15ddd7a8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d15ddd718 <col:13> 'int' lvalue ParmVar 0x555d15db4ce0 'flags' 'int'
|     |     `-UnaryOperator 0x555d15ddd790 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d15ddd778 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d15ddd758 <col:23> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d15ddd930 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d15ddd868 <col:9> 'bool' lvalue ->_read_status 0x555d15d9ef58
|       | `-ImplicitCastExpr 0x555d15ddd848 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d15ddd838 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d15ddd910 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d15ddd8f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d15ddd8d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d15ddd898 <col:25> 'int' lvalue Var 0x555d15ddd0a8 'read_status' 'int'
|           `-IntegerLiteral 0x555d15ddd8b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555d15db53b8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555d15db4f48 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db4fc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db5318 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555d15db5088 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db5108 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db5180 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db5228 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x555d15de0560 <col:84, line:805:5>
|     |-DeclStmt 0x555d15ddd9f8 <line:796:9, col:26>
|     | `-VarDecl 0x555d15ddd990 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d15dddac8 <line:797:9, col:29>
|     | `-VarDecl 0x555d15ddda28 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d15dddab0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d15ddda90 <col:28> 'int' 1
|     |-DeclStmt 0x555d15ddfa80 <line:798:9, col:71>
|     | `-VarDecl 0x555d15dddb18 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x555d15ddfa50 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x555d15ddf9c0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x555d15ddfa08 <col:55> 'T' lvalue ParmVar 0x555d15db5228 'variable' 'T &'
|     |     `-UnaryOperator 0x555d15ddfa38 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x555d15ddfa28 <col:66> 'Args *' this
|     |-WhileStmt 0x555d15de0410 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x555d15de0430 <line:799:16, col:61>
|     | | `-VarDecl 0x555d15ddfaa8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d15ddfc88 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d15ddfc58 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d15ddfc40 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d15ddfc20 <col:29, col:61> 'String' (CXXTemporary 0x555d15ddfc20)
|     | |           `-CXXMemberCallExpr 0x555d15ddfbb0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d15ddfb20 <col:29> '<bound member function type>' ->find 0x555d15dce368
|     | |             | `-CXXThisExpr 0x555d15ddfb10 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d15ddfbe8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15ddfb50 <col:34> 'const char *' lvalue ParmVar 0x555d15db5088 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d15ddfc00 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15ddfb70 <col:43> 'int' lvalue ParmVar 0x555d15db5108 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d15ddfb90 <col:50> 'Args::Slot *' lvalue Var 0x555d15ddd990 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d15ddfd40 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d15ddfd28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d15ddfd08 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d15ddfcd8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|     | |       `-ImplicitCastExpr 0x555d15ddfcc0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d15ddfca0 <col:23> 'String' lvalue Var 0x555d15ddfaa8 'str' 'String'
|     | `-CompoundStmt 0x555d15de03e8 <col:64, line:803:9>
|     |   |-CallExpr 0x555d15de0170 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x555d15ddfd68 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|     |   | | `-CXXThisExpr 0x555d15ddfd58 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x555d15de0130 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x555d15ddfd98 <col:23> 'T *' lvalue Var 0x555d15dddb18 's' 'T *'
|     |   | | `-CallExpr 0x555d15de00f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x555d15ddff80 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x555d15ddffc8 <col:56> 'P' lvalue ParmVar 0x555d15db5180 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x555d15ddffe8 <col:64> 'String' lvalue Var 0x555d15ddfaa8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x555d15de0098 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x555d15de0028 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|     |   | |   | `-DeclRefExpr 0x555d15de0008 <col:70> 'T *' lvalue Var 0x555d15dddb18 's' 'T *'
|     |   | |   `-UnaryOperator 0x555d15de00d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x555d15de00c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x555d15de0150 <col:81> 'Args::Slot *' lvalue Var 0x555d15ddd990 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x555d15de0308 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d15de01a0 <col:13> 'int' lvalue Var 0x555d15ddda28 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d15de02f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d15de02d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d15de0238 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d15de0218 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d15de0200 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d15de01c0 <col:28> 'int' lvalue Var 0x555d15ddda28 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d15de01e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d15de02b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d15de0288 <col:49> 'bool' lvalue ->_read_status 0x555d15d9ef58
|     |   |         `-ImplicitCastExpr 0x555d15de0268 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d15de0258 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d15de03b8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d15de0328 <col:13> 'int' lvalue ParmVar 0x555d15db5108 'flags' 'int'
|     |     `-UnaryOperator 0x555d15de03a0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d15de0388 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d15de0368 <col:23> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d15de0540 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d15de0478 <col:9> 'bool' lvalue ->_read_status 0x555d15d9ef58
|       | `-ImplicitCastExpr 0x555d15de0458 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d15de0448 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d15de0520 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d15de0500 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d15de04e8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d15de04a8 <col:25> 'int' lvalue Var 0x555d15ddda28 'read_status' 'int'
|           `-IntegerLiteral 0x555d15de04c8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555d15db5998 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x555d15db5430 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555d15db54a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555d15db58f8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555d15db5568 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555d15db55e8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x555d15db5660 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x555d15db57b0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x555d15de1368 <col:87, line:821:5>
|     |-DeclStmt 0x555d15de0610 <line:809:9, col:26>
|     | `-VarDecl 0x555d15de05a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x555d15de06e0 <line:810:9, col:29>
|     | `-VarDecl 0x555d15de0640 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x555d15de06c8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x555d15de06a8 <col:28> 'int' 1
|     |-DeclStmt 0x555d15de0928 <line:811:9, col:38>
|     | `-VarDecl 0x555d15de0810 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x555d15de0900 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x555d15de0888 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x555d15de08e0 <col:29> 'Vector<T>' lvalue ParmVar 0x555d15db57b0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x555d15de1218 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x555d15de1238 <line:812:16, col:61>
|     | | `-VarDecl 0x555d15de0950 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x555d15de0b30 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x555d15de0b00 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x555d15de0ae8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x555d15de0ac8 <col:29, col:61> 'String' (CXXTemporary 0x555d15de0ac8)
|     | |           `-CXXMemberCallExpr 0x555d15de0a58 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x555d15de09c8 <col:29> '<bound member function type>' ->find 0x555d15dce368
|     | |             | `-CXXThisExpr 0x555d15de09b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x555d15de0a90 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15de09f8 <col:34> 'const char *' lvalue ParmVar 0x555d15db5568 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x555d15de0aa8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x555d15de0a18 <col:43> 'int' lvalue ParmVar 0x555d15db55e8 'flags' 'int'
|     | |             `-DeclRefExpr 0x555d15de0a38 <col:50> 'Args::Slot *' lvalue Var 0x555d15de05a8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x555d15de0be8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x555d15de0bd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x555d15de0bb0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x555d15de0b80 <col:23> '<bound member function type>' .operator int (String::*)() const 0x555d15b84a28
|     | |       `-ImplicitCastExpr 0x555d15de0b68 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x555d15de0b48 <col:23> 'String' lvalue Var 0x555d15de0950 'str' 'String'
|     | `-CompoundStmt 0x555d15de11e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x555d15de0ca8 <line:813:13, col:23>
|     |   | `-VarDecl 0x555d15de0c10 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x555d15de0c88 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x555d15de0e28 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x555d15de0cd0 <col:13> '<bound member function type>' ->postparse 0x555d15dce578
|     |   | | `-CXXThisExpr 0x555d15de0cc0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x555d15de0dd0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x555d15de0d20 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x555d15de0d00 <col:23> 'P' lvalue ParmVar 0x555d15db5660 'parser' 'P'
|     |   | | |-DeclRefExpr 0x555d15de0d68 <col:36> 'String' lvalue Var 0x555d15de0950 'str' 'String'
|     |   | | |-DeclRefExpr 0x555d15de0d88 <col:41> 'T' lvalue Var 0x555d15de0c10 'sx' 'T'
|     |   | | `-UnaryOperator 0x555d15de0db8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x555d15de0da8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x555d15de0e08 <col:53> 'Args::Slot *' lvalue Var 0x555d15de05a8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x555d15de0f80 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x555d15de0eb8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x555d15de0e88 <col:17> 'bool' lvalue ->_read_status 0x555d15d9ef58
|     |   | |   `-ImplicitCastExpr 0x555d15de0e68 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x555d15de0e58 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x555d15de0f58 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x555d15de0ef0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x555d15de0ed0 <col:17> 'Vector<T> *' lvalue Var 0x555d15de0810 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x555d15de0f38 <col:30> 'T' lvalue Var 0x555d15de0c10 'sx' 'T'
|     |   |-BinaryOperator 0x555d15de1100 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x555d15de0f98 <col:13> 'int' lvalue Var 0x555d15de0640 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x555d15de10e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x555d15de10c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x555d15de1030 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x555d15de1010 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x555d15de0ff8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x555d15de0fb8 <col:28> 'int' lvalue Var 0x555d15de0640 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x555d15de0fd8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x555d15de10b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x555d15de1080 <col:49> 'bool' lvalue ->_read_status 0x555d15d9ef58
|     |   |         `-ImplicitCastExpr 0x555d15de1060 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x555d15de1050 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x555d15de11b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x555d15de1120 <col:13> 'int' lvalue ParmVar 0x555d15db55e8 'flags' 'int'
|     |     `-UnaryOperator 0x555d15de1198 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x555d15de1180 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x555d15de1160 <col:23> 'const int' lvalue Var 0x555d15da63e8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x555d15de1348 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x555d15de1280 <col:9> 'bool' lvalue ->_read_status 0x555d15d9ef58
|       | `-ImplicitCastExpr 0x555d15de1260 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x555d15de1250 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x555d15de1328 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x555d15de1308 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x555d15de12f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x555d15de12b0 <col:25> 'int' lvalue Var 0x555d15de0640 'read_status' 'int'
|           `-IntegerLiteral 0x555d15de12d0 <col:40> 'int' 1
|-AccessSpecDecl 0x555d15db5a10 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x555d15db5a38 prev 0x555d15da46e8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x555d15db5b30 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x555d15db5c20 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x555d15de13a0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x555d15db5d10 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x555d15de13b0 <col:25, line:830:9>
| |-CXXMethodDecl 0x555d15db5e10 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x555d15db5ec0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x555d15db5f68 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555d15db5f68
| | `-ParmVarDecl 0x555d15db6078 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x555d15db6838 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555d15db6838
|   `-ParmVarDecl 0x555d15db6948 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x555d15db60e8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x555d15db6248 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x555d15db6440 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x555d15db62f0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x555d15db6368 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x555d15de15c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x555d15db66f8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x555d15de1400 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x555d15de13c0 <col:20> 'void *' lvalue ParmVar 0x555d15db62f0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x555d15db6760 '_slot' 'char *'
| | | `-CXXNewExpr 0x555d15de14b8 <col:32, col:45> 'char *' array Function 0x555d159a82d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x555d15de1470 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x555d15de1440 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x555d15db6368 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x555d15db67c0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x555d15de1580 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x555d15de1540 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x555d15db6368 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x555d15de1640 <col:61, line:838:9>
| |-CXXDestructorDecl 0x555d15db6540 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x555d15db5d10 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x555d15de16c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x555d15de16a8 <line:840:13, col:22> 'void' array Function 0x555d159a8638 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x555d15de1690 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x555d15de1660 <col:22> 'char *' lvalue ->_slot 0x555d15db6760
| |         `-CXXThisExpr 0x555d15de1650 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x555d15db6640 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x555d15db5e10 Slot::store 'void ()' ]
| | `-CompoundStmt 0x555d15de18b8 <col:22, line:844:9>
| |   `-CallExpr 0x555d15de1820 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x555d15de1808 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x555d15de17e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x555d15ae09e8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x555d15de1858 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x555d15de1738 <col:20> 'void *' lvalue ->_ptr 0x555d15db66f8
| |     |   `-CXXThisExpr 0x555d15de1728 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x555d15de1888 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x555d15de1870 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x555d15de1778 <col:26> 'char *' lvalue ->_slot 0x555d15db6760
| |     |     `-CXXThisExpr 0x555d15de1768 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x555d15de18a0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x555d15de17b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x555d15db67c0
| |         `-CXXThisExpr 0x555d15de17a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x555d15db66f8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x555d15db6760 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x555d15db67c0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x555d15db69b8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555d15db69b8
| | `-ParmVarDecl 0x555d15db6ac8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x555d15db6b68 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555d15db6b68
|   `-ParmVarDecl 0x555d15db6c78 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x555d15dbe650 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x555d15db6ce8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x555d15dbe5c0 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x555d15dbe8e0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x555d15dbead8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x555d15dbe9a8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x555d15dbec58 '_ptr' 'T *'
|   | | `-ParenListExpr 0x555d15de18f0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x555d15de18d0 <col:20> 'T *' lvalue ParmVar 0x555d15dbe9a8 'ptr' 'T *'
|   | `-CompoundStmt 0x555d15de1940 <col:25, line:854:9>
|   |-CXXMethodDecl 0x555d15dbeba8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x555d15db5e10 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x555d15de1af0 <col:22, line:857:9>
|   |   `-CallExpr 0x555d15de1ac0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x555d15de1950 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x555d15b6cc18 0x555d15a96148
|   |     |-CXXOperatorCallExpr 0x555d15de1a50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x555d15de19e0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x555d15c58bd8 0x555d15c587f8 0x555d15c58428 0x555d15c58048 0x555d15c57c68 0x555d15c57898
|   |     | `-MemberExpr 0x555d15de19b0 <col:29> 'T *' lvalue ->_ptr 0x555d15dbec58
|   |     |   `-CXXThisExpr 0x555d15de19a0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x555d15de1a90 <col:35> 'T' lvalue ->_slot 0x555d15dbecb8
|   |       `-CXXThisExpr 0x555d15de1a80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x555d15dbec58 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x555d15dbecb8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x555d15dbed20 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x555d15dbee20 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x555d15dbee70 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15dbee00 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x555d15dbede0 <col:31> 'int' 48
|-FieldDecl 0x555d15dbee98 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x555d15dbeef8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x555d15dbef58 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x555d15dbf090 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x555d15dcd5a0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x555d15dcd600 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x555d15dcd728 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x555d15dcd958 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x555d15dcd860 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x555d15dcdaa8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x555d15dcda18 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x555d15dce368 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x555d15dcdb68 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x555d15dcdbe8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x555d15dce280 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x555d15dce578 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x555d15dce430 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x555d15dce4a8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x555d15dce648 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x555d15dce798 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x555d15dce700 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x555d15dceb28 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x555d15dce858 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x555d15dce8d8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x555d15dce980 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x555d15dcea38 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x555d15dced50 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x555d15dcec00 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x555d15dcec78 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x555d15dcf068 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x555d15dcee00 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x555d15dcefc8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x555d15dceed8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15b75920 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15b75a38 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x555d15b75ac8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x555d15b75b98 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x555d15b75c80 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15b75e98 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d15b75d40 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b76048 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555d15b75f50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555d15b76190 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x555d15b76100 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x555d15b762d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d15b76248 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b76420 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x555d15b76390 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b764e8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x555d15b76630 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x555d15b765a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x555d15b766f8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x555d15b76840 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x555d15b767b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x555d15b769b8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555d15b768f8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b76b00 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x555d15b76a70 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b76bc8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x555d15b76d88 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d15b76c78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d15b76cf0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b76fd8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d15b76e48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15b76ec0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d15b77088 <col:86> "" ""
|-CXXMethodDecl 0x555d15b772f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x555d15b77168 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x555d15b771e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b774a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555d15b773b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555d15b77658 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x555d15b77560 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x555d15b77928 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555d15b77710 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555d15b77788 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d15b77800 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b77c08 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x555d15b779f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x555d15b77a68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15b77ae0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d15b77cc0 <col:115> "" ""
|-AccessSpecDecl 0x555d15b77d30 <line:84:3, col:10> col:3 private
|-FieldDecl 0x555d15b77d68 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15b78218 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555d15b78218
| `-ParmVarDecl 0x555d15b78328 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x555d15b783c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555d15b783c8
| `-ParmVarDecl 0x555d15b784d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x555d15baf1c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d15e53a40 <col:7>
|-CXXConstructorDecl 0x555d15baf2a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x555d15baf2a0
| `-ParmVarDecl 0x555d15baf3b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x555d15baf428 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x555d15baf428
| `-ParmVarDecl 0x555d15baf538 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x555d15e563b0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e42700 prev 0x555d15e30a10 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15e427f8 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x555d15e428e8 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x555d15e42998 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x555d15e42b18 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x555d15e42c98 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x555d15e42e18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x555d15e53ba8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d15e54418 <col:11>
|-CXXDestructorDecl 0x555d15e53c80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555d15e53db8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555d15e53db8
| `-ParmVarDecl 0x555d15e53ec8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x555d15e53f68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d15e53f68
| `-ParmVarDecl 0x555d15e54078 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x555d15e56da8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15e56eb8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x555d15e57138 <col:11>
|   `-ReturnStmt 0x555d15e57128 <col:11>
|     `-UnaryOperator 0x555d15e57110 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555d15e57100 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x555d15e56f28 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d15e56f28
  `-ParmVarDecl 0x555d15e57038 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e42e80 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15e42f98 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x555d15e43038 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x555d15e430a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x555d15e43108 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x555d15e43170 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x555d15e431d0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x555d15e43290 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x555d15e432f0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x555d15e43350 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x555d15e53ab8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x555d15e43038 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x555d15e54428 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x555d15e54480 <col:12>
|-CXXConstructorDecl 0x555d15e540e8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555d15e540e8
| `-ParmVarDecl 0x555d15e541f8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x555d15e54298 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555d15e54298
| `-ParmVarDecl 0x555d15e543a8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x555d15e56490 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e26a50 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555d15e26b68 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x555d15e26bf8 <col:16, col:22> col:16 public
|-EnumDecl 0x555d15e26c20 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x555d15e26d20 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x555d15e26e00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e26d00 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x555d15e26ce0 <col:21> 'int' 28
| `-EnumConstantDecl 0x555d15e26db0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x555d15e26e18 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e26d90 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x555d15e26d70 <col:22> 'int' 64
|-CXXMethodDecl 0x555d15e27158 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x555d15e26e40 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15e26ec0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x555d15e26f38 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15e26fb0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e27218 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555d15e27418 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x555d15e27290 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x555d15e27308 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e274c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555d15e27628 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x555d15e27538 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e276d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x555d15e27a00 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x555d15e27990 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x555d15e27930 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x555d15e278f0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x555d158552d0 'void'
|       |-PointerType 0x555d15b29ae0 'unsigned char *'
|       | `-BuiltinType 0x555d158553d0 'unsigned char'
|       |-TypedefType 0x555d158fa320 'size_t' sugar
|       | |-Typedef 0x555d158c5b20 'size_t'
|       | `-BuiltinType 0x555d15855430 'unsigned long'
|       `-PointerType 0x555d15855ad0 'void *'
|         `-BuiltinType 0x555d158552d0 'void'
|-CXXMethodDecl 0x555d15e27e78 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x555d15e27a70 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x555d15e27ae8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15e27b80 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x555d15e27c00 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x555d15e447e0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x555d15e447c8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x555d15e44790 <col:58> 'int' 0
| |-ParmVarDecl 0x555d15e27c80 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x555d15e44808 <col:76> 'int' 0
| |-ParmVarDecl 0x555d15e27d00 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x555d15e44828 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x555d15e27f48 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x555d15e27fc8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x555d15e28088 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x555d15e28128 <col:20>
| `-OptimizeNoneAttr 0x555d15e28180 <col:30>
|-CXXMethodDecl 0x555d15e281f8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x555d15e28298 <col:20>
| `-OptimizeNoneAttr 0x555d15e282f0 <col:30>
|-CXXMethodDecl 0x555d15e28368 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x555d15e28408 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x555d15e284b8 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x555d15e28558 <col:20>
| |-OptimizeNoneAttr 0x555d15e285b0 <col:30>
| `-WarnUnusedResultAttr 0x555d15e285d8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x555d15e28630 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x555d15e286d0 <col:20>
| `-OptimizeNoneAttr 0x555d15e28728 <col:30>
|-CXXMethodDecl 0x555d15e28778 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x555d15e28818 <col:20>
| `-OptimizeNoneAttr 0x555d15e28870 <col:30>
|-CXXMethodDecl 0x555d15e288b8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x555d15e28958 <col:20>
| `-OptimizeNoneAttr 0x555d15e289b0 <col:30>
|-CXXMethodDecl 0x555d15e289f8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e28ab8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e28b80 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e28c48 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e28d08 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e28e28 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x555d15e448f0 <col:54, line:99:5>
|   `-ReturnStmt 0x555d15e448e0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x555d15e448c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x555d15e44898 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d15e43688
|         `-CXXThisExpr 0x555d15e44888 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x555d15e28fc8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x555d15e28ed8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x555d15e449a0 <col:67, line:103:5>
|   `-BinaryOperator 0x555d15e44980 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555d15e44918 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d15e43688
|     | `-CXXThisExpr 0x555d15e44908 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555d15e44968 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e44948 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x555d15e28ed8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x555d15e290c0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x555d15e44a20 <col:33, line:107:5>
|   `-ReturnStmt 0x555d15e44a10 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x555d15e449f8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x555d15e449c8 <col:16> 'void *' lvalue ->_destructor_argument 0x555d15e436f0
|         `-CXXThisExpr 0x555d15e449b8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555d15e29180 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x555d15e45050 <col:25, line:113:5>
|   |-ParenExpr 0x555d15e44d98 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x555d15e44d68 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e44ad8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555d15e44ab0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x555d15e44a78 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x555d15e44a48 <col:24> '<bound member function type>' ->shared 0x555d15e281f8
|   |   |       `-ImplicitCastExpr 0x555d15e44a98 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x555d15e44a38 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555d15e44b38 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e44b18 <col:42> 'int' 0
|   |   `-CallExpr 0x555d15e44cc8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x555d15e44cb0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e44c90 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e44d08 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e44ba8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x555d15e44d20 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e44bd0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e44d38 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e44c08 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x555d15e44d50 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e44c78 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e44c60 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e44c28 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x555d15e44f98 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x555d15e44dc8 <col:2> 'unsigned char *' lvalue ->_head 0x555d15e43490
|   | | `-CXXThisExpr 0x555d15e44db8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x555d15e44f80 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x555d15e44f60 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x555d15e44e08 <col:10> 'unsigned char *' lvalue ->_data 0x555d15e434f8
|   |     | `-CXXThisExpr 0x555d15e44df8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x555d15e44f48 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x555d15e44f28 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x555d15e44e48 <col:18> 'unsigned char *' lvalue ->_tail 0x555d15e43560
|   |         | `-CXXThisExpr 0x555d15e44e38 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x555d15e44f10 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x555d15e44ef0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x555d15e44e88 <col:26> 'unsigned char *' lvalue ->_end 0x555d15e435c8
|   |             | `-CXXThisExpr 0x555d15e44e78 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x555d15e44ed8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x555d15e44eb8 <col:33> 'int' 0
|   `-BinaryOperator 0x555d15e45030 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x555d15e44fc8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x555d15e43688
|     | `-CXXThisExpr 0x555d15e44fb8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x555d15e45018 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x555d15e44ff8 <col:16> 'int' 0
|-CXXMethodDecl 0x555d15e292c0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d15e29230 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e29368 <col:20>
| |-OptimizeNoneAttr 0x555d15e293c0 <col:30>
| `-WarnUnusedResultAttr 0x555d15e293e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x555d15e294b8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d15e29428 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e29560 <col:20>
| |-OptimizeNoneAttr 0x555d15e295b8 <col:30>
| `-WarnUnusedResultAttr 0x555d15e295e0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x555d15e29718 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555d15e29620 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e297c0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x555d15e298c0 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x555d15e29830 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e29968 <col:20>
| `-OptimizeNoneAttr 0x555d15e299c0 <col:30>
|-CXXMethodDecl 0x555d15e29a88 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x555d15e299f8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e29b30 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x555d15e29c30 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x555d15e29ba0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x555d15e29cd8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x555d15e29dd8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x555d15e29d48 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e29e80 <col:20>
| `-OptimizeNoneAttr 0x555d15e29ed8 <col:30>
|-CXXMethodDecl 0x555d15e2a068 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x555d15e29f18 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x555d15e29f90 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x555d15e44848 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x555d15e2a118 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x555d15e2a318 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d15e2a190 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x555d15e2a208 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e2a528 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x555d15e2a3d8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d15e2a450 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e2a738 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x555d15e2a5e8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x555d15e2a668 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x555d15e44858 <col:39> 'int' 0
|-CXXMethodDecl 0x555d15e2a808 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x555d15e2a8d0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e2a998 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d15e2aa58 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e2ab20 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x555d15e2ac68 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x555d15e2abd8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x555d15e2ae38 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d15e2ad28 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x555d15e2ada0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e2af08 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x555d15e2afc8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x555d15e2b068 <col:20>
| `-OptimizeNoneAttr 0x555d15e2b0c0 <col:30>
|-CXXMethodDecl 0x555d15e2b110 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555d15e2b1b0 <col:20>
| `-OptimizeNoneAttr 0x555d15e2b208 <col:30>
|-CXXMethodDecl 0x555d15e2b258 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d15e2b318 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e2b3e0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x555d15e2b480 <col:20>
| `-OptimizeNoneAttr 0x555d15e2b4d8 <col:30>
|-CXXMethodDecl 0x555d15e2b628 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x555d15e2b518 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x555d15e2b590 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e2b778 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x555d15e2b6e8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e2b840 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x555d15e2b900 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x555d15e2b9a0 <col:20>
| `-OptimizeNoneAttr 0x555d15e2b9f8 <col:30>
|-CXXMethodDecl 0x555d15e2ba48 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x555d15e2bae8 <col:20>
| `-OptimizeNoneAttr 0x555d15e2bb40 <col:30>
|-CXXMethodDecl 0x555d15e2bb90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d15e2bc58 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x555d15e2bcf8 <col:20>
| `-OptimizeNoneAttr 0x555d15e2bd50 <col:30>
|-CXXMethodDecl 0x555d15e2bd98 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x555d15e2beb8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x555d15e2c028 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x555d15e2bf68 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x555d15e2c118 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x555d15e2c1b8 <col:20>
| `-OptimizeNoneAttr 0x555d15e2c210 <col:30>
|-CXXMethodDecl 0x555d15e2c260 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x555d15e2c320 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x555d15e2c558 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x555d15e2c3d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x555d15e2c448 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e2c608 <col:20>
| `-OptimizeNoneAttr 0x555d15e2fd70 <col:30>
|-CXXMethodDecl 0x555d15e2fe18 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x555d15e2feb8 <col:20>
| `-OptimizeNoneAttr 0x555d15e2ff10 <col:30>
|-CXXMethodDecl 0x555d15e2ff60 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x555d15e30000 <col:20>
| `-OptimizeNoneAttr 0x555d15e30058 <col:30>
|-CXXMethodDecl 0x555d15e300a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x555d15e30140 <col:20>
| `-OptimizeNoneAttr 0x555d15e30198 <col:30>
|-CXXMethodDecl 0x555d15e30298 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x555d15e301d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x555d15e30340 <col:20>
| `-OptimizeNoneAttr 0x555d15e30398 <col:30>
|-CXXMethodDecl 0x555d15e30558 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x555d15e303d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x555d15e30448 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e30608 <col:20>
| `-OptimizeNoneAttr 0x555d15e30660 <col:30>
|-CXXMethodDecl 0x555d15e30708 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x555d15e30828 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x555d15e30948 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x555d15e309e8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x555d15e30a10 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x555d15e30b38 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x555d15e30bd8 <col:20>
| `-OptimizeNoneAttr 0x555d15e30c30 <col:30>
|-CXXMethodDecl 0x555d15e30cd8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x555d15e30d78 <col:20>
| `-OptimizeNoneAttr 0x555d15e30dd0 <col:30>
|-AccessSpecDecl 0x555d15e30df8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x555d15e30e20 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x555d15e30f20 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x555d15e30f70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e30f00 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x555d15e30ee0 <col:14> 'int' 48
|-CXXMethodDecl 0x555d15e30fd8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x555d15e31078 <col:20>
| `-OptimizeNoneAttr 0x555d15e310d0 <col:30>
|-CXXMethodDecl 0x555d15e31148 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x555d15e311e8 <col:20>
| `-OptimizeNoneAttr 0x555d15e31240 <col:30>
|-CXXMethodDecl 0x555d15e31308 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x555d15e31278 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x555d15e314a8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x555d15e31648 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x555d15e31558 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x555d15e316f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x555d15e317f0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31ba0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e317d0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15e317b0 <col:9> 'int' 0
| |-EnumConstantDecl 0x555d15e31880 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31bb8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e31860 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x555d15e31840 <col:14> 'int' 1
| |-EnumConstantDecl 0x555d15e31910 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31bd0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e318f0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x555d15e318d0 <col:14> 'int' 2
| |-EnumConstantDecl 0x555d15e319a0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31be8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e31980 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x555d15e31960 <col:14> 'int' 3
| |-EnumConstantDecl 0x555d15e31a30 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31c00 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e31a10 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x555d15e319f0 <col:13> 'int' 4
| |-EnumConstantDecl 0x555d15e31ac0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x555d15e31c18 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e31aa0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x555d15e31a80 <col:13> 'int' 5
| `-EnumConstantDecl 0x555d15e31b50 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x555d15e31c30 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e31b30 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x555d15e31b10 <col:14> 'int' 6
|-CXXMethodDecl 0x555d15e31c98 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x555d15e31d38 <col:20>
| `-OptimizeNoneAttr 0x555d15e31d90 <col:30>
|-CXXMethodDecl 0x555d15e31e88 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x555d15e31dc8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x555d15e31f30 <col:20>
| `-OptimizeNoneAttr 0x555d15e31f88 <col:30>
|-CXXMethodDecl 0x555d15e31ff8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x555d15e32120 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x555d15e32298 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x555d15e321d0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x555d15e32360 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x555d15e32428 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x555d15e32568 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x555d15e324d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x555d15e32610 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x555d15e32710 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d15e32910 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e326f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15e326d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x555d15e327a0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d15e32928 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e32780 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x555d15e32760 <col:45> 'int' 4
| |-EnumConstantDecl 0x555d15e32830 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x555d15e32940 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e32810 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15e327f0 <col:24> 'int' 0
| `-EnumConstantDecl 0x555d15e328c0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x555d15e32958 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e328a0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x555d15e32880 <col:47> 'int' 16
|-CXXMethodDecl 0x555d15e329b8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x555d15e32b28 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x555d15e32a68 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x555d15e32bd0 <col:20>
| `-OptimizeNoneAttr 0x555d15e32c28 <col:30>
|-CXXMethodDecl 0x555d15e32c78 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x555d15e45170 <col:18, col:36>
|   `-ReturnStmt 0x555d15e45160 <col:20, col:33>
|     `-ImplicitCastExpr 0x555d15e45148 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x555d15e45128 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x555d15e450f8 <col:27> '<bound member function type>' ->xanno 0x555d15e30cd8
|           `-CXXThisExpr 0x555d15e450e8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x555d15e32d70 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x555d15e45280 <col:30, col:48>
|   `-ReturnStmt 0x555d15e45270 <col:32, col:45>
|     `-ImplicitCastExpr 0x555d15e45258 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x555d15e45238 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x555d15e45208 <col:39> '<bound member function type>' ->xanno 0x555d15e30b38
|           `-CXXThisExpr 0x555d15e451f8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x555d15e32e58 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x555d15e45418 <col:24, col:50>
|   `-ReturnStmt 0x555d15e45408 <col:26, col:47>
|     `-UnaryOperator 0x555d15e453f0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d15e453d0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d15e453b8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d15e45368 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x555d15e42998
|         |   `-CXXMemberCallExpr 0x555d15e45348 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x555d15e45318 <col:34> '<bound member function type>' ->xanno 0x555d15e30cd8
|         |       `-CXXThisExpr 0x555d15e45308 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x555d15e45398 <col:46> 'int' 0
|-CXXMethodDecl 0x555d15e32f48 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x555d15e455b0 <col:36, col:62>
|   `-ReturnStmt 0x555d15e455a0 <col:38, col:59>
|     `-UnaryOperator 0x555d15e45588 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d15e45568 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d15e45550 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d15e45500 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x555d15e42998
|         |   `-CXXMemberCallExpr 0x555d15e454e0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d15e454b0 <col:46> '<bound member function type>' ->xanno 0x555d15e30b38
|         |       `-CXXThisExpr 0x555d15e454a0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555d15e45530 <col:58> 'int' 0
|-CXXMethodDecl 0x555d15e33068 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x555d15e45748 <col:26, col:53>
|   `-ReturnStmt 0x555d15e45738 <col:28, col:50>
|     `-UnaryOperator 0x555d15e45720 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d15e45700 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x555d15e456e8 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d15e45698 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x555d15e42c98
|         |   `-CXXMemberCallExpr 0x555d15e45678 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x555d15e45648 <col:36> '<bound member function type>' ->xanno 0x555d15e30cd8
|         |       `-CXXThisExpr 0x555d15e45638 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x555d15e456c8 <col:49> 'int' 0
|-CXXMethodDecl 0x555d15e33188 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x555d15e45918 <col:38, col:65>
|   `-ReturnStmt 0x555d15e45908 <col:40, col:62>
|     `-UnaryOperator 0x555d15e458f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x555d15e458d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x555d15e458b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d15e45830 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x555d15e42c98
|         |   `-CXXMemberCallExpr 0x555d15e45810 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d15e457e0 <col:48> '<bound member function type>' ->xanno 0x555d15e30b38
|         |       `-CXXThisExpr 0x555d15e457d0 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x555d15e45860 <col:61> 'int' 0
|-CXXMethodDecl 0x555d15e33338 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x555d15e33240 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x555d15e45fe8 <col:34, line:463:5>
|   |-ParenExpr 0x555d15e45e30 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x555d15e45e00 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e45a68 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e45a38 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e45988 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e45970 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e45930 <col:23> 'int' lvalue ParmVar 0x555d15e33240 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e45950 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e45a18 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e459e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e459a8 <col:33> 'int' lvalue ParmVar 0x555d15e33240 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555d15e45a00 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555d15e459c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555d15e45ac8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e45aa8 <col:56> 'int' 0
|   |   `-CallExpr 0x555d15e45d60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555d15e45d48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e45d28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e45da0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e45bb8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555d15e45db8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e45be8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e45dd0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e45c20 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x555d15e45de8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e45d10 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e45cf8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e45cb8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x555d15e45fd8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x555d15e45fc0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x555d15e45fa0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x555d15e45f70 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x555d15e45f20 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x555d15e42998
|         |   `-CXXMemberCallExpr 0x555d15e45f00 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x555d15e45ed0 <col:9> '<bound member function type>' ->xanno 0x555d15e30b38
|         |       `-CXXThisExpr 0x555d15e45ec0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x555d15e45f88 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x555d15e45f50 <col:21> 'int' lvalue ParmVar 0x555d15e33240 'i' 'int'
|-CXXMethodDecl 0x555d15e33588 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x555d15e333f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x555d15e33470 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x555d15e46678 <col:40, line:472:5>
|   |-ParenExpr 0x555d15e46490 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x555d15e46460 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e46140 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e46110 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e46060 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e46048 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e46008 <col:23> 'int' lvalue ParmVar 0x555d15e333f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e46028 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e460f0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e460c0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e46080 <col:33> 'int' lvalue ParmVar 0x555d15e333f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x555d15e460d8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x555d15e460a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x555d15e461a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e46180 <col:56> 'int' 0
|   |   `-CallExpr 0x555d15e463c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x555d15e463a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e46388 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e46400 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e46210 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x555d15e46418 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e46240 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e46430 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e46278 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x555d15e46448 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e46370 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e46358 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e46318 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x555d15e46658 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x555d15e46600 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x555d15e465d0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x555d15e46580 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x555d15e42998
|     | |   `-CXXMemberCallExpr 0x555d15e46560 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x555d15e46530 <col:2> '<bound member function type>' ->xanno 0x555d15e30cd8
|     | |       `-CXXThisExpr 0x555d15e46520 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x555d15e465e8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x555d15e465b0 <col:14> 'int' lvalue ParmVar 0x555d15e333f8 'i' 'int'
|     `-ImplicitCastExpr 0x555d15e46640 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e46620 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x555d15e33470 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x555d15e33748 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x555d15e33650 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d15e46df8 <col:36, line:485:5>
|   |-ParenExpr 0x555d15e46b60 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e46b30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e46810 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e467e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e466f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e466d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e46698 <col:23> 'int' lvalue ParmVar 0x555d15e33650 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e466b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e467c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e467a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e46710 <col:33> 'int' lvalue ParmVar 0x555d15e33650 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e46788 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e46770 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e46730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e46750 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d15e46870 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e46850 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e46a90 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e46a78 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e46a58 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e46ad0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e468e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d15e46ae8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e46918 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e46b00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e46950 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x555d15e46b18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e46a40 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e46a28 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e469e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x555d15e46de8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x555d15e46dd0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x555d15e46db8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e46d88 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x555d15e46d28 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e46cf8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e46c70 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e46c50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e46c20 <col:61> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e46c10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e46d10 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e46ca0 <col:74> 'int' lvalue ParmVar 0x555d15e33650 'i' 'int'
|-CXXMethodDecl 0x555d15e33998 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x555d15e33808 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d15e33880 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x555d15e47548 <col:42, line:500:5>
|   |-ParenExpr 0x555d15e472e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e472b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e46f90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e46f60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e46e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e46e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e46e18 <col:23> 'int' lvalue ParmVar 0x555d15e33808 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e46e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e46f40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e46f28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e46e90 <col:33> 'int' lvalue ParmVar 0x555d15e33808 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e46f08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e46ef0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e46eb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e46ed0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d15e46ff0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e46fd0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e47210 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e471f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e471d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e47250 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e47060 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d15e47268 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e47098 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e47280 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e470d0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x555d15e47298 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e471c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e471a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e47168 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x555d15e47528 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x555d15e474d8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d15e474a8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x555d15e47450 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d15e47420 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d15e473d0 <col:48, col:57> 'char [48]' lvalue ->c 0x555d15e428e8
|     |     |   `-CXXMemberCallExpr 0x555d15e473b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d15e47380 <col:48> '<bound member function type>' ->xanno 0x555d15e30cd8
|     |     |       `-CXXThisExpr 0x555d15e47370 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d15e47438 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d15e47400 <col:61> 'int' lvalue ParmVar 0x555d15e33808 'i' 'int'
|     `-ImplicitCastExpr 0x555d15e47510 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e474f0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x555d15e33880 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x555d15e33b58 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x555d15e33a60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555d15e47ca8 <col:35, line:513:5>
|   |-ParenExpr 0x555d15e479b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e47988 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e476e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e476b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e475c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e475a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e47568 <col:23> 'int' lvalue ParmVar 0x555d15e33a60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e47588 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e47690 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e47678 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e475e0 <col:33> 'int' lvalue ParmVar 0x555d15e33a60 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e47658 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e47640 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e47600 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e47620 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d15e47740 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e47720 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e478e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e478d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e478b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e47928 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e477b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d15e47940 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e477e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e47958 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e47820 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x555d15e47970 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e47898 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e47880 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e47840 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x555d15e47c98 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x555d15e47c80 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x555d15e47c68 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e47c38 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x555d15e47bb0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e47b80 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e47b30 <col:60, col:69> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e47b10 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e47ae0 <col:60> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e47ad0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e47b98 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e47b60 <col:73> 'int' lvalue ParmVar 0x555d15e33a60 'i' 'int'
|-CXXMethodDecl 0x555d15e33da8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x555d15e33c18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d15e33c90 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x555d15e48388 <col:41, line:528:5>
|   |-ParenExpr 0x555d15e48118 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e480e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e47e40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e47e10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e47d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e47d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e47cc8 <col:23> 'int' lvalue ParmVar 0x555d15e33c18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e47ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e47df0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e47dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e47d40 <col:33> 'int' lvalue ParmVar 0x555d15e33c18 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e47db8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e47da0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e47d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e47d80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x555d15e47ea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e47e80 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e48048 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e48030 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e48010 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e48088 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e47f10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x555d15e480a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e47f48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e480b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e47f80 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x555d15e480d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e47ff8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e47fe0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e47fa0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x555d15e48368 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x555d15e48318 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d15e482e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x555d15e48288 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d15e48258 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d15e48208 <col:47, col:56> 'char [48]' lvalue ->c 0x555d15e428e8
|     |     |   `-CXXMemberCallExpr 0x555d15e481e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d15e481b8 <col:47> '<bound member function type>' ->xanno 0x555d15e30cd8
|     |     |       `-CXXThisExpr 0x555d15e481a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d15e48270 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d15e48238 <col:60> 'int' lvalue ParmVar 0x555d15e33c18 'i' 'int'
|     `-ImplicitCastExpr 0x555d15e48350 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e48330 <col:65> 'int16_t':'short' lvalue ParmVar 0x555d15e33c90 'x' 'int16_t':'short'
|-CXXMethodDecl 0x555d15e33f68 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x555d15e33e70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d15e48a58 <col:36, line:541:5>
|   |-ParenExpr 0x555d15e487f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e487c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e48520 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e484f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e48400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e483e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e483a8 <col:23> 'int' lvalue ParmVar 0x555d15e33e70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e483c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e484d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e484b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e48420 <col:33> 'int' lvalue ParmVar 0x555d15e33e70 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e48498 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e48480 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e48440 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e48460 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d15e48580 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e48560 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e48728 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e48710 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e486f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e48768 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e485f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d15e48780 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e48628 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e48798 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e48660 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x555d15e487b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e486d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e486c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e48680 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x555d15e48a48 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x555d15e48a30 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x555d15e48a18 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e489e8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x555d15e48990 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e48960 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e48910 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e488f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e488c0 <col:61> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e488b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e48978 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e48940 <col:74> 'int' lvalue ParmVar 0x555d15e33e70 'i' 'int'
|-CXXMethodDecl 0x555d15e34138 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x555d15e34028 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x555d15e340a0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x555d15e341e8 <col:20>
| `-OptimizeNoneAttr 0x555d15e34240 <col:30>
|-CXXMethodDecl 0x555d15e34378 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x555d15e34280 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x555d15e49128 <col:35, line:562:5>
|   |-ParenExpr 0x555d15e48ec8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e48e98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e48bf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e48bc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e48ad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e48ab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e48a78 <col:23> 'int' lvalue ParmVar 0x555d15e34280 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e48a98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e48ba0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e48b88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e48af0 <col:33> 'int' lvalue ParmVar 0x555d15e34280 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e48b68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e48b50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e48b10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e48b30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d15e48c50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e48c30 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e48df8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e48de0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e48dc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e48e38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e48cc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d15e48e50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e48cf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e48e68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e48d30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x555d15e48e80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e48da8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e48d90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e48d50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x555d15e49118 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x555d15e49100 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x555d15e490e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e490b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x555d15e49060 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e49030 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e48fe0 <col:60, col:69> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e48fc0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e48f90 <col:60> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e48f80 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e49048 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e49010 <col:73> 'int' lvalue ParmVar 0x555d15e34280 'i' 'int'
|-CXXMethodDecl 0x555d15e34588 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x555d15e34438 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d15e344b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x555d15e51af8 <col:41, line:577:5>
|   |-ParenExpr 0x555d15e51888 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e51858 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e515b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e51580 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e51490 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e49188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e49148 <col:23> 'int' lvalue ParmVar 0x555d15e34438 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e49168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e51560 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e51548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e514b0 <col:33> 'int' lvalue ParmVar 0x555d15e34438 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e51528 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e51510 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e514d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e514f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x555d15e51610 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e515f0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e517b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e517a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e51780 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e517f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e51680 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x555d15e51810 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e516b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e51828 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e516f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x555d15e51840 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e51768 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e51750 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e51710 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x555d15e51ad8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x555d15e51a88 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d15e51a58 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x555d15e519f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d15e519c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d15e51978 <col:47, col:56> 'char [48]' lvalue ->c 0x555d15e428e8
|     |     |   `-CXXMemberCallExpr 0x555d15e51958 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d15e51928 <col:47> '<bound member function type>' ->xanno 0x555d15e30cd8
|     |     |       `-CXXThisExpr 0x555d15e51918 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d15e519e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d15e519a8 <col:60> 'int' lvalue ParmVar 0x555d15e34438 'i' 'int'
|     `-ImplicitCastExpr 0x555d15e51ac0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e51aa0 <col:65> 'int32_t':'int' lvalue ParmVar 0x555d15e344b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x555d15e34748 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x555d15e34650 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x555d15e52228 <col:36, line:591:5>
|   |-ParenExpr 0x555d15e51f68 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e51f38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e51c90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e51c60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e51b70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e51b58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e51b18 <col:23> 'int' lvalue ParmVar 0x555d15e34650 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e51b38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e51c40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e51c28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e51b90 <col:33> 'int' lvalue ParmVar 0x555d15e34650 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e51c08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e51bf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e51bb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e51bd0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555d15e51cf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e51cd0 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e51e98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e51e80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e51e60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e51ed8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e51d60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555d15e51ef0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e51d98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e51f08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e51dd0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x555d15e51f20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e51e48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e51e30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e51df0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x555d15e52218 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x555d15e52200 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x555d15e521e8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e521b8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x555d15e52130 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e52100 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e520b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e52090 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e52060 <col:61> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e52050 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e52118 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e520e0 <col:74> 'int' lvalue ParmVar 0x555d15e34650 'i' 'int'
|-CXXMethodDecl 0x555d15e34998 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x555d15e34808 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d15e34880 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x555d15e52908 <col:42, line:606:5>
|   |-ParenExpr 0x555d15e52698 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x555d15e52668 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e523c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e52390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e522a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e52288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e52248 <col:23> 'int' lvalue ParmVar 0x555d15e34808 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e52268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e52370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x555d15e52358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e522c0 <col:33> 'int' lvalue ParmVar 0x555d15e34808 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e52338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e52320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e522e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x555d15e52300 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x555d15e52420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e52400 <col:60> 'int' 0
|   |   `-CallExpr 0x555d15e525c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x555d15e525b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e52590 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e52608 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e52490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x555d15e52620 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e524c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e52638 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e52500 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x555d15e52650 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e52578 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e52560 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e52520 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x555d15e528e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x555d15e52898 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d15e52868 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x555d15e52808 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d15e527d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d15e52788 <col:48, col:57> 'char [48]' lvalue ->c 0x555d15e428e8
|     |     |   `-CXXMemberCallExpr 0x555d15e52768 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d15e52738 <col:48> '<bound member function type>' ->xanno 0x555d15e30cd8
|     |     |       `-CXXThisExpr 0x555d15e52728 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d15e527f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d15e527b8 <col:61> 'int' lvalue ParmVar 0x555d15e34808 'i' 'int'
|     `-ImplicitCastExpr 0x555d15e528d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x555d15e528b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x555d15e34880 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x555d15e34b30 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x555d15e34a60 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x555d15e53178 <col:33, line:620:5>
|   |-ParenExpr 0x555d15e52ef0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x555d15e52ec0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e52b10 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e52ae0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e52980 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e52968 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e52928 <col:23> 'int' lvalue ParmVar 0x555d15e34a60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e52948 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e52ac0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555d15e52aa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e529a0 <col:33> 'int' lvalue ParmVar 0x555d15e34a60 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e52a88 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e52a70 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e529c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555d15e52a48 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555d15e52a30 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555d15e529f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555d15e52b70 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e52b50 <col:79> 'int' 0
|   |   `-CallExpr 0x555d15e52e20 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555d15e52e08 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e52de8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e52e60 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e52c58 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555d15e52e78 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e52ca0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e52e90 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e52cd8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x555d15e52ea8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e52dd0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e52db8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e52d78 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x555d15e53168 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x555d15e53150 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x555d15e53138 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x555d15e53108 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x555d15e53080 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x555d15e53050 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x555d15e53000 <col:67, col:76> 'char const[48]' lvalue ->c 0x555d15e428e8
|             |   `-CXXMemberCallExpr 0x555d15e52fe0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x555d15e52fb0 <col:67> '<bound member function type>' ->xanno 0x555d15e30b38
|             |       `-CXXThisExpr 0x555d15e52fa0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x555d15e53068 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x555d15e53030 <col:80> 'int' lvalue ParmVar 0x555d15e34a60 'i' 'int'
|-CXXMethodDecl 0x555d15e34d48 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x555d15e34bf0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x555d15e34c70 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x555d15e539a0 <col:45, line:635:5>
|   |-ParenExpr 0x555d15e536e8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x555d15e536b8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x555d15e53380 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x555d15e53350 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x555d15e531f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x555d15e531d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x555d15e53198 <col:23> 'int' lvalue ParmVar 0x555d15e34bf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x555d15e531b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x555d15e53330 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x555d15e53318 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x555d15e53210 <col:33> 'int' lvalue ParmVar 0x555d15e34bf0 'i' 'int'
|   |   |     `-BinaryOperator 0x555d15e532f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x555d15e532e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x555d15e53230 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x555d15e30f20 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x555d15e532b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x555d15e532a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x555d15e53268 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x555d15e533e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555d15e533c0 <col:79> 'int' 0
|   |   `-CallExpr 0x555d15e53618 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x555d15e53600 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555d15e535e0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555d158f1130 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555d15e53658 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e53450 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x555d15e53670 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555d15e53498 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x555d15e53688 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555d15e534d0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x555d15e536a0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555d15e535c8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555d15e535b0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555d15e53568 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x555d15e53980 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x555d15e538e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x555d15e538b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x555d15e53858 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x555d15e53828 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x555d15e537d8 <col:54, col:63> 'char [48]' lvalue ->c 0x555d15e428e8
|     |     |   `-CXXMemberCallExpr 0x555d15e537b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x555d15e53788 <col:54> '<bound member function type>' ->xanno 0x555d15e30cd8
|     |     |       `-CXXThisExpr 0x555d15e53778 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x555d15e53840 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x555d15e53808 <col:67> 'int' lvalue ParmVar 0x555d15e34bf0 'i' 'int'
|     `-CXXConstCastExpr 0x555d15e53950 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x555d15e53938 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x555d15e53900 <col:91> 'const void *' lvalue ParmVar 0x555d15e34c70 'x' 'const void *'
|-CXXMethodDecl 0x555d15e34e18 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x555d15e53a28 <col:34, line:640:5>
|   `-ReturnStmt 0x555d15e53a18 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x555d15e53a00 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x555d15e539d0 <col:16> 'Packet *' lvalue ->_data_packet 0x555d15e43428
|         `-CXXThisExpr 0x555d15e539c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x555d15e34f58 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x555d15e34ec8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555d15e44878 <col:46> 'bool' true
|-CXXMethodDecl 0x555d15e350d8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x555d15e35010 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x555d15e35180 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x555d15e35930 <line:660:22> "" ""
| |-EnumConstantDecl 0x555d15e35280 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e359a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35260 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x555d15e35240 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555d15e26d20 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555d15e35310 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e359b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e352f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x555d15e352d0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x555d15e26db0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x555d15e353a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e359d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35380 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15e35360 <col:21> 'int' 0
| |-EnumConstantDecl 0x555d15e35430 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e359e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35410 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x555d15e353f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x555d15e354c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e354a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x555d15e35480 <col:21> 'int' 16
| |-EnumConstantDecl 0x555d15e35550 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35530 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x555d15e35510 <col:19> 'int' 32
| |-EnumConstantDecl 0x555d15e355e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a30 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e355c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x555d15e355a0 <col:19> 'int' EnumConstant 0x555d15e35430 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555d15e35670 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35650 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x555d15e35630 <col:19> 'int' EnumConstant 0x555d15e35550 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x555d15e35740 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a60 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e35720 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x555d15e35700 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555d15e356c0 <col:23> 'int' EnumConstant 0x555d15e35670 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555d15e356e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x555d15e35810 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x555d15e35a78 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15e357f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x555d15e357d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x555d15e35790 <col:23> 'int' EnumConstant 0x555d15e35670 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x555d15e357b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x555d15e358e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x555d15e35a90 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555d15e358c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x555d15e358a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x555d15e35860 <col:23> 'int' EnumConstant 0x555d15e35670 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x555d15e35880 <col:40> 'int' 8
|-CXXMethodDecl 0x555d15e35ad0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x555d15e35b70 <col:68> "" ""
|-CXXMethodDecl 0x555d15e35c08 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x555d15e35ca8 <col:45> "" ""
|-CXXMethodDecl 0x555d15e35d40 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555d15e35de0 <col:57> "" ""
|-CXXMethodDecl 0x555d15e35e78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x555d15e35f18 <col:45> "" ""
|-CXXMethodDecl 0x555d15e35fb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x555d15e36050 <col:57> "" ""
|-CXXMethodDecl 0x555d15e360e0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x555d15e36180 <col:51> "" ""
|-CXXMethodDecl 0x555d15e36210 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555d15e362b0 <col:63> "" ""
|-CXXMethodDecl 0x555d15e36340 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x555d15e363e0 <col:53> "" ""
|-CXXMethodDecl 0x555d15e36470 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555d15e36510 <col:65> "" ""
|-CXXMethodDecl 0x555d15e36628 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555d15e36598 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x555d15e366d0 <col:61> "" ""
|-CXXMethodDecl 0x555d15e36868 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555d15e36758 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x555d15e367d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555d15e36918 <col:67> "" ""
|-CXXMethodDecl 0x555d15e36a30 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555d15e369a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d15e36ad8 <col:63> "" ""
|-CXXMethodDecl 0x555d15e36c70 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555d15e36b60 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d15e36bd8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555d15e36d20 <col:69> "" ""
|-CXXMethodDecl 0x555d15e36e38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555d15e36da8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d15e36ee0 <col:63> "" ""
|-CXXMethodDecl 0x555d15e37078 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555d15e36f68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d15e36fe0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d15e37128 <col:69> "" ""
|-CXXMethodDecl 0x555d15e37240 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x555d15e371b0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x555d15e372e8 <col:62> "" ""
|-CXXMethodDecl 0x555d15e37480 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555d15e37370 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d15e373e8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x555d15e37530 <col:68> "" ""
|-CXXMethodDecl 0x555d15e37648 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x555d15e375b8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x555d15e376f0 <col:63> "" ""
|-CXXMethodDecl 0x555d15e37888 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x555d15e37778 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x555d15e377f0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x555d15e37938 <col:69> "" ""
|-CXXMethodDecl 0x555d15e379c8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x555d15e37a68 <col:64> "" ""
|-CXXMethodDecl 0x555d15e37af8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x555d15e37b98 <col:52> "" ""
|-CXXMethodDecl 0x555d15e37c28 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x555d15e37cc8 <col:67> "" ""
|-CXXMethodDecl 0x555d15e411a0 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x555d15e41240 <col:55> "" ""
|-CXXMethodDecl 0x555d15e41358 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x555d15e412c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d15e41400 <col:58> "" ""
|-CXXMethodDecl 0x555d15e41598 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x555d15e41488 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d15e41500 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x555d15e41648 <col:62> "" ""
|-CXXMethodDecl 0x555d15e41760 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x555d15e416d0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d15e41808 <col:58> "" ""
|-CXXMethodDecl 0x555d15e419a0 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x555d15e41890 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d15e41908 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x555d15e41a50 <col:62> "" ""
|-CXXMethodDecl 0x555d15e41b68 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x555d15e41ad8 <col:34> col:37 'int'
| `-DeprecatedAttr 0x555d15e41c10 <col:60> "" ""
|-CXXMethodDecl 0x555d15e41da8 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x555d15e41c98 <col:34> col:37 'int'
| |-ParmVarDecl 0x555d15e41d10 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x555d15e41e58 <col:64> "" ""
|-CXXMethodDecl 0x555d15e41f70 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x555d15e41ee0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x555d15e42018 <col:58> "" ""
|-CXXMethodDecl 0x555d15e421b0 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x555d15e420a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d15e42118 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x555d15e42260 <col:62> "" ""
|-CXXMethodDecl 0x555d15e42378 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x555d15e422e8 <col:33> col:36 'int'
| `-DeprecatedAttr 0x555d15e42420 <col:59> "" ""
|-CXXMethodDecl 0x555d15e425b8 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x555d15e424a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x555d15e42520 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x555d15e42668 <col:63> "" ""
|-AccessSpecDecl 0x555d15e426d8 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x555d15e42700 prev 0x555d15e30a10 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d15e427f8 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x555d15e428e8 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x555d15e42998 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x555d15e42b18 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x555d15e42c98 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x555d15e42e18 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x555d15e53ba8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x555d15e54418 <col:11>
| |-CXXDestructorDecl 0x555d15e53c80 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x555d15e53db8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x555d15e53db8
| | `-ParmVarDecl 0x555d15e53ec8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x555d15e53f68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d15e53f68
| | `-ParmVarDecl 0x555d15e54078 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x555d15e56da8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x555d15e56eb8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x555d15e57138 <col:11>
| |   `-ReturnStmt 0x555d15e57128 <col:11>
| |     `-UnaryOperator 0x555d15e57110 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x555d15e57100 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x555d15e56f28 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x555d15e56f28
|   `-ParmVarDecl 0x555d15e57038 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x555d15e42e80 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555d15e42f98 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x555d15e43038 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x555d15e430a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x555d15e43108 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x555d15e43170 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x555d15e431d0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x555d15e43290 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x555d15e432f0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x555d15e43350 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x555d15e53ab8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x555d15e43038 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x555d15e54428 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x555d15e54480 <col:12>
| |-CXXConstructorDecl 0x555d15e540e8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x555d15e540e8
| | `-ParmVarDecl 0x555d15e541f8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x555d15e54298 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x555d15e54298
| | `-ParmVarDecl 0x555d15e543a8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x555d15e56490 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x555d15e433c8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x555d15e43428 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x555d15e43490 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x555d15e434f8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x555d15e43560 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x555d15e435c8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x555d15e43628 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x555d15e43688 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x555d15e436f0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x555d15e43778 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x555d15e433c8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x555d15e53a50 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555d15e43628 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x555d15e54490 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x555d15e544f0 <col:21, line:755:5>
|-CXXConstructorDecl 0x555d15e43918 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x555d15e43858 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x555d15e43a10 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x555d15e43bf8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x555d15e43b00 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x555d15e43ec8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x555d15e43cb0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15e43d28 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d15e43da0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e440e8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x555d15e43f98 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x555d15e44010 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x555d15e443b8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x555d15e441a8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x555d15e44220 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x555d15e44298 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x555d15e44510 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555d15e44480 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e44658 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x555d15e445c8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x555d15e44750 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether_vlan
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_vlan_proto
        14 |   uint16_t ether_vlan_tci
        16 |   uint16_t ether_vlan_encap_proto
           | [sizeof=18, dsize=18, align=1,
           |  nvsize=18, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e150c0 <../dummy_inc/clicknet/ether.h:65:1, line:71:1> line:65:8 referenced struct click_ether_vlan definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x555d15e154e8 <line:71:18>
|-CXXRecordDecl 0x555d15e151d8 <line:65:1, col:8> col:8 implicit struct click_ether_vlan
|-FieldDecl 0x555d15e152c8 <line:66:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x555d15e15378 <line:67:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x555d15e153d8 <line:68:5, col:14> col:14 referenced ether_vlan_proto 'uint16_t':'unsigned short'
|-FieldDecl 0x555d15e15438 <line:69:5, col:14> col:14 referenced ether_vlan_tci 'uint16_t':'unsigned short'
`-FieldDecl 0x555d15e15498 <line:70:5, col:14> col:14 ether_vlan_encap_proto 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15e54500 prev 0x555d15e269a0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x555d15e54638 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x555d15e546c8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x555d15e54770 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x555d15e54810 <col:20>
| `-OptimizeNoneAttr 0x555d15e54868 <col:30>
|-CXXMethodDecl 0x555d15e548b8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x555d15e54958 <col:20>
| `-OptimizeNoneAttr 0x555d15e549b0 <col:30>
|-CXXMethodDecl 0x555d15e54a00 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e54ac8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e54b90 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e54ca8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x555d15e54d70 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x555d15e54e10 <col:20>
| `-OptimizeNoneAttr 0x555d15e54e68 <col:30>
|-CXXMethodDecl 0x555d15e54ed8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x555d15e54f78 <col:20>
| `-OptimizeNoneAttr 0x555d15e54fd0 <col:30>
|-CXXMethodDecl 0x555d15e55078 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x555d15e55118 <col:20>
| `-OptimizeNoneAttr 0x555d15e55170 <col:30>
|-CXXMethodDecl 0x555d15e551c0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x555d15e552d8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x555d15e553f8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x555d15e55518 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x555d15e555e0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x555d15e55680 <col:62> "" ""
|-AccessSpecDecl 0x555d15e556f0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x555d15e55750 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x555d15e56348 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x555d15e56570 <col:29, col:31>
|-CXXMethodDecl 0x555d15e55818 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x555d15e55958 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x555d15e558c8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x555d15e55a50 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x555d15e56580 <col:23, col:25>
|-CXXMethodDecl 0x555d15e55c08 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x555d15e55b40 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x555d15e55ed8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x555d15e55cc0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x555d15e55d38 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x555d15e55db0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x555d15e56068 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x555d15e55fa0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x555d15e56160 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x555d15e561c8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x555d15e561c8
  `-ParmVarDecl 0x555d15e562d8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15dfbf00 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15dfc018 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x555d15dfc0a8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x555d15dfc2e8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x555d15dfc0e0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x555d15dfc160 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x555d15dfc1d8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x555d15dfc500 <col:81> 'const ArgContext' lvalue Var 0x555d15de1b18 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x555d15dfc440 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x555d15dfc3b0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x555d15dfc658 <col:35, line:1261:5>
|   `-ReturnStmt 0x555d15dfc648 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x555d15dfc630 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x555d15dfc600 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x555d15dfc5e8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x555d15dfc5c0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x555d15dfc5a0 <col:16, col:24> 'String' (CXXTemporary 0x555d15dfc5a0)
|               `-CXXConstructExpr 0x555d15dfc568 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x555d15dfc550 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x555d15dfc530 <col:23> 'bool' lvalue ParmVar 0x555d15dfc3b0 'x' 'bool'
|-CXXConstructorDecl 0x555d15edb298 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x555d15edb370 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555d15edb4a8 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x555d15edb4a8
| `-ParmVarDecl 0x555d15edb5b8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x555d15edb658 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x555d15edb768 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x555d15edc3c0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15dfc698 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x555d15dfc8f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x555d15edb1a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x555d15edb7d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x555d15edb7d8
| `-ParmVarDecl 0x555d15edb8e8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x555d15edb988 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15edba98 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x555d15edc3d0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555d15edc3a0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x555d15edc370 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x555d15edc340 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x555d15edba98 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x555d15edc440 <col:19>
`-CXXDestructorDecl 0x555d15edbb38 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15dea1d0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555d15dea2e8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x555d15dea378 <col:16, col:22> col:16 public
|-EnumDecl 0x555d15dea3a0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x555d15dea4a0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d15dea6f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15dea480 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x555d15dea460 <col:21> 'int' 0
| |-EnumConstantDecl 0x555d15dea530 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d15dea708 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15dea510 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x555d15dea4f0 <col:24> 'int' 22
| |-EnumConstantDecl 0x555d15dea5c0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d15dea720 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15dea5a0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x555d15dea580 <col:24> 'int' 34
| |-EnumConstantDecl 0x555d15dea650 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x555d15dea738 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x555d15dea630 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x555d15dea610 <col:25> 'int' 95
| `-EnumConstantDecl 0x555d15dea6a0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x555d15dec0b0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x555d15dec4e8 <col:7>
|-CXXConstructorDecl 0x555d15dec1b8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x555d15dec1b8
| `-ParmVarDecl 0x555d15dec2c8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x555d15dec368 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15dec478 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x555d15eeab20 <col:7>
`-CXXDestructorDecl 0x555d15dee5d8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555d15dea768 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x555d15dea8c8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x555d15dea958 <col:32, col:38> col:32 public
|-TypedefDecl 0x555d15dea990 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x555d159aa630 'uint32_t' sugar
|   |-Typedef 0x555d158be408 'uint32_t'
|   `-TypedefType 0x555d15897440 '__uint32_t' sugar
|     |-Typedef 0x555d15897038 '__uint32_t'
|     `-BuiltinType 0x555d15855410 'unsigned int'
|-CXXConstructorDecl 0x555d15deaad8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x555d15deaa00 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x555d15debfb8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555d15dec4f8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x555d15deb870 'base' 'int'
| | `-ImplicitCastExpr 0x555d15dec058 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x555d15dec018 <col:16> 'int' lvalue ParmVar 0x555d15deaa00 'b' 'int'
| `-CompoundStmt 0x555d15dec568 <col:19, line:1046:5>
|-CXXMethodDecl 0x555d15deafd0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x555d15deaba0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x555d15deac20 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x555d15deac98 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x555d15dead18 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x555d15deadd8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x555d15deae58 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x555d15deb428 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x555d15deb0a0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x555d15deb388 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x555d15deb148 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x555d15deb1e8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x555d15deb260 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x555d15debfd8 <col:82> 'const ArgContext' lvalue Var 0x555d15de1b18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x555d15ded488 <col:94, line:1067:5>
| |   |-DeclStmt 0x555d15dec6f8 <line:1054:9, col:64>
| |   | `-VarDecl 0x555d15dec588 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x555d15dec6b0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x555d15dec918 <line:1055:9, col:91>
| |   | `-VarDecl 0x555d15dec728 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x555d15dec8f0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x555d15dec8d0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x555d15dec880 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x555d15dec860 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x555d15dec808 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x555d15dec7b8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x555d15dec7e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x555d15dec848 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x555d15dec828 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x555d15dec8b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x555d15deca78 <line:1056:9, col:27>
| |   | `-VarDecl 0x555d15deca10 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x555d15deceb0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x555d15decde0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x555d15decd70 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x555d15bf1a30 0x555d15bafb20 0x555d15baf7d0 0x555d15baf0c0 0x555d15b80340 0x555d15b3c640
| |   | | |-CallExpr 0x555d15deccb0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x555d15decaa0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x555d15decb50 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x555d15decb20 <col:19, col:23> '<bound member function type>' .begin 0x555d15b9d4d8
| |   | | | |   `-DeclRefExpr 0x555d15decb00 <col:19> 'const String' lvalue ParmVar 0x555d15deb148 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x555d15decbc0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x555d15decb90 <col:32, col:36> '<bound member function type>' .end 0x555d15b9d6f0
| |   | | | |   `-DeclRefExpr 0x555d15decb70 <col:32> 'const String' lvalue ParmVar 0x555d15deb148 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x555d15decbe0 <col:43> 'const bool' lvalue Var 0x555d15dec588 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x555d15decc48 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x555d15decc28 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x555d15decc70 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x555d15deca10 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x555d15decc90 <col:73> 'const int' lvalue Var 0x555d15dec728 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x555d15decd50 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x555d15decd20 <col:16, col:20> '<bound member function type>' .end 0x555d15b9d6f0
| |   | |     `-DeclRefExpr 0x555d15decd00 <col:16> 'const String' lvalue ParmVar 0x555d15deb148 'str' 'const String &'
| |   | `-BinaryOperator 0x555d15dece90 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x555d15dece28 <col:13> 'int' lvalue ->status 0x555d15deb8d8
| |   |   | `-CXXThisExpr 0x555d15dece18 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x555d15dece78 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x555d15dece58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x555d15ded100 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x555d15decfe8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x555d15decfd0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x555d15decfb8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x555d15deced8 <col:13> 'int' lvalue ->status 0x555d15deb8d8
| |   | | |     `-CXXThisExpr 0x555d15decec8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x555d15decf98 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x555d15decf68 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x555d15decf18 <col:23> 'int' lvalue ->status 0x555d15deb8d8
| |   | |   |   `-CXXThisExpr 0x555d15decf08 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x555d15decf80 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x555d15decf48 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x555d15ded0e0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x555d15ded080 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x555d15ded028 <col:13, col:18> '<bound member function type>' .error 0x555d15d9e540
| |   |   | | `-DeclRefExpr 0x555d15ded008 <col:13> 'const ArgContext' lvalue ParmVar 0x555d15deb260 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x555d15ded0a8 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x555d15ded058 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x555d15ded0d0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x555d15ded0c0 <col:20> 'bool' false
| |   |-DeclStmt 0x555d15ded2d8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x555d15ded280 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x555d15ded210 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x555d15ded438 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x555d15ded2f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x555d15a92b78
| |   | |-DeclRefExpr 0x555d15ded338 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x555d15deca10 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x555d15ded408 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x555d15ded380 <col:64> 'V' lvalue ParmVar 0x555d15deb1e8 'result' 'V &'
| |   `-ReturnStmt 0x555d15ded478 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x555d15ded468 <col:16> 'bool' true
| `-CXXMethodDecl 0x555d15eee438 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x555d15eee210 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x555d15eee2e8 <col:46, col:49> col:49 used result 'unsigned short &'
|   |-ParmVarDecl 0x555d15eee350 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x555d15ef01c0 <col:94, line:1067:5>
|     |-DeclStmt 0x555d15eeec48 <line:1054:9, col:64>
|     | `-VarDecl 0x555d15eeea68 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x555d15eeebd8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x555d15eeeba8 <col:36, col:55> 'const bool' lvalue Var 0x555d15a7fed0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x555d15eeee28 <line:1055:9, col:91>
|     | `-VarDecl 0x555d15eeec60 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x555d15eeeda8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x555d15eeed90 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x555d15eeed70 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x555d15eeed50 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x555d15eeed30 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x555d15eeecf8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x555d15eeecd8 <col:36, col:44> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x555d15dec7e8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x555d15eeed18 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x555d15dec828 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x555d15dec8b0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x555d15eeefc0 <line:1056:9, col:27>
|     | `-VarDecl 0x555d15eeef58 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x555d15eef438 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x555d15eef3e0 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x555d15eef298 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x555d15eef268 <col:13> '<bound member function type>' ->parse 0x555d15deafd0
|     | | | | `-CXXThisExpr 0x555d15eef258 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x555d15eef0f8 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555d15eef0c8 <col:19, col:23> '<bound member function type>' .begin 0x555d15b9d4d8
|     | | | |   `-DeclRefExpr 0x555d15eef0a8 <col:19> 'const String' lvalue ParmVar 0x555d15eee210 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x555d15eef168 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555d15eef138 <col:32, col:36> '<bound member function type>' .end 0x555d15b9d6f0
|     | | | |   `-DeclRefExpr 0x555d15eef118 <col:32> 'const String' lvalue ParmVar 0x555d15eee210 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x555d15eef308 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x555d15eef2e8 <col:43> 'const bool' lvalue Var 0x555d15eeea68 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x555d15eef1f0 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x555d15eef1d8 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x555d15eef1b8 <col:58, col:66> 'unsigned long' sizeof 'unsigned short':'unsigned short'
|     | | | |-ImplicitCastExpr 0x555d15eef320 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x555d15eef218 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x555d15eeef58 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x555d15eef358 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x555d15eef338 <col:73> 'const int' lvalue Var 0x555d15eeec60 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x555d15eef3c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x555d15eef390 <col:16, col:20> '<bound member function type>' .end 0x555d15b9d6f0
|     | |     `-DeclRefExpr 0x555d15eef370 <col:16> 'const String' lvalue ParmVar 0x555d15eee210 'str' 'const String &'
|     | `-BinaryOperator 0x555d15eef418 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x555d15dece28 <col:13> 'int' lvalue ->status 0x555d15deb8d8
|     |   | `-CXXThisExpr 0x555d15dece18 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x555d15eef400 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x555d15dece58 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea530 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x555d15eef5b0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x555d15eef4d0 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x555d15eef4b8 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x555d15eef4a0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x555d15deced8 <col:13> 'int' lvalue ->status 0x555d15deb8d8
|     | | |     `-CXXThisExpr 0x555d15decec8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x555d15eef480 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x555d15eef450 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x555d15decf18 <col:23> 'int' lvalue ->status 0x555d15deb8d8
|     | |   |   `-CXXThisExpr 0x555d15decf08 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x555d15eef468 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x555d15decf48 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x555d15eef590 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x555d15eef540 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x555d15eef510 <col:13, col:18> '<bound member function type>' .error 0x555d15d9e540
|     |   | | `-DeclRefExpr 0x555d15eef4f0 <col:13> 'const ArgContext' lvalue ParmVar 0x555d15eee350 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x555d15eef568 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x555d15ded058 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x555d15eef580 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x555d15ded0c0 <col:20> 'bool' false
|     |-DeclStmt 0x555d15eefaf8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x555d15eefaa0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned short>::type':'unsigned short'
|     |   `-ElaboratedType 0x555d15eefa50 'typename make_unsigned<unsigned short>::type' sugar
|     |     `-TypedefType 0x555d15eefa30 'make_unsigned<unsigned short>::type' sugar
|     |       |-Typedef 0x555d15eef9c0 'type'
|     |       `-ElaboratedType 0x555d15eef970 'typename integer_traits<unsigned short>::unsigned_type' sugar
|     |         `-TypedefType 0x555d15eef950 'integer_traits<unsigned short>::unsigned_type' sugar
|     |           |-Typedef 0x555d15a80028 'unsigned_type'
|     |           `-BuiltinType 0x555d158553f0 'unsigned short'
|     |-CallExpr 0x555d15ef0150 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x555d15ef0138 <col:9> 'void (*)(const unsigned int *, unsigned short &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x555d15ef00b8 <col:9> 'void (const unsigned int *, unsigned short &)' lvalue Function 0x555d15eeff98 'extract_integer' 'void (const unsigned int *, unsigned short &)' (FunctionTemplate 0x555d15a92b78 'extract_integer')
|     | |-ImplicitCastExpr 0x555d15ef0198 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x555d15ef0180 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x555d15eefb58 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x555d15eeef58 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x555d15eefc28 <col:28, col:70> 'unsigned_v_type':'unsigned short' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x555d15eefbd8 <col:64> 'unsigned short':'unsigned short' lvalue ParmVar 0x555d15eee2e8 'result' 'unsigned short &'
|     `-ReturnStmt 0x555d15ef01b0 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x555d15ded468 <col:16> 'bool' true
|-FunctionTemplateDecl 0x555d15deb7e8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x555d15deb498 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x555d15deb748 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x555d15deb548 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x555d15deb5e8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x555d15deb660 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x555d15debff8 <col:71> 'const ArgContext' lvalue Var 0x555d15de1b18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x555d15dedbf8 <col:83, line:1083:5>
| |   |-DeclStmt 0x555d15ded550 <line:1071:9, col:12>
| |   | `-VarDecl 0x555d15ded4e8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x555d15dedbd0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x555d15ded7e0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x555d15ded668 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x555d15ded630 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x555d15ded578 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x555d15ded5d0 <col:31> 'const String' lvalue ParmVar 0x555d15deb548 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x555d15ded5f0 <col:36> 'V' lvalue Var 0x555d15ded4e8 'x' 'V'
| |     | |   `-DeclRefExpr 0x555d15ded610 <col:39> 'const ArgContext' lvalue ParmVar 0x555d15deb660 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x555d15ded7c0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x555d15ded7a0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x555d15ded788 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x555d15ded770 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x555d15ded690 <col:17> 'int' lvalue ->status 0x555d15deb8d8
| |     |     |     `-CXXThisExpr 0x555d15ded680 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x555d15ded750 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x555d15ded720 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x555d15ded6d0 <col:27> 'int' lvalue ->status 0x555d15deb8d8
| |     |       |   `-CXXThisExpr 0x555d15ded6c0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x555d15ded738 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x555d15ded700 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x555d15ded810 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x555d15ded800 <col:20> 'bool' false
| |     `-IfStmt 0x555d15dedba8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x555d15ded8b0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x555d15ded880 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x555d15ded830 <col:18> 'int' lvalue ->status 0x555d15deb8d8
| |       | |   `-CXXThisExpr 0x555d15ded820 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x555d15ded898 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x555d15ded860 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x555d15dedae8 <col:42, line:1079:9>
| |       | |-CallExpr 0x555d15deda90 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x555d15ded8e0 <line:1076:13> '<bound member function type>' ->range_error 0x555d15debee8
| |       | | | `-CXXThisExpr 0x555d15ded8d0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x555d15ded910 <col:25> 'const ArgContext' lvalue ParmVar 0x555d15deb660 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x555d15ded9f0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x555d15deda68 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x555d15deda48 <col:43> 'V' lvalue Var 0x555d15ded4e8 'x' 'V'
| |       | `-ReturnStmt 0x555d15dedad8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x555d15dedac8 <col:20> 'bool' false
| |       `-CompoundStmt 0x555d15dedb88 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x555d15dedb48 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x555d15dedb08 <col:13> 'V' lvalue ParmVar 0x555d15deb5e8 'result' 'V &'
| |         | `-DeclRefExpr 0x555d15dedb28 <col:22> 'V' lvalue Var 0x555d15ded4e8 'x' 'V'
| |         `-ReturnStmt 0x555d15dedb78 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x555d15dedb68 <col:20> 'bool' true
| `-CXXMethodDecl 0x555d15eeddf8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned short &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x555d15eedb90 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x555d15eedc68 <col:35, col:38> col:38 used result 'unsigned short &'
|   |-ParmVarDecl 0x555d15eedcd0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x555d15eeea48 <col:83, line:1083:5>
|     |-DeclStmt 0x555d15eee080 <line:1071:9, col:12>
|     | `-VarDecl 0x555d15eee018 <col:9, col:11> col:11 used x 'unsigned short':'unsigned short'
|     `-IfStmt 0x555d15eeea20 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x555d15eee6b0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x555d15eee5d8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x555d15eee5a0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x555d15eee558 <col:14> '<bound member function type>' ->parse_saturating 0x555d15eee438
|       | |   | `-CXXThisExpr 0x555d15eee548 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x555d15eee0f0 <col:31> 'const String' lvalue ParmVar 0x555d15eedb90 'str' 'const String &'
|       | |   |-DeclRefExpr 0x555d15eee110 <col:36> 'unsigned short':'unsigned short' lvalue Var 0x555d15eee018 'x' 'unsigned short':'unsigned short'
|       | |   `-DeclRefExpr 0x555d15eee130 <col:39> 'const ArgContext' lvalue ParmVar 0x555d15eedcd0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x555d15eee690 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x555d15eee670 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x555d15eee658 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x555d15eee640 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x555d15ded690 <col:17> 'int' lvalue ->status 0x555d15deb8d8
|       |     |     `-CXXThisExpr 0x555d15ded680 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x555d15eee620 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x555d15eee5f0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x555d15ded6d0 <col:27> 'int' lvalue ->status 0x555d15deb8d8
|       |       |   `-CXXThisExpr 0x555d15ded6c0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x555d15eee608 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x555d15ded700 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x555d15eee6d0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x555d15ded800 <col:20> 'bool' false
|       `-IfStmt 0x555d15eee9f8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x555d15eee710 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x555d15eee6e0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x555d15ded830 <col:18> 'int' lvalue ->status 0x555d15deb8d8
|         | |   `-CXXThisExpr 0x555d15ded820 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x555d15eee6f8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x555d15ded860 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x555d15dea5c0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x555d15eee930 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x555d15eee8a0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x555d15ded8e0 <line:1076:13> '<bound member function type>' ->range_error 0x555d15debee8
|         | | | `-CXXThisExpr 0x555d15ded8d0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x555d15eee730 <col:25> 'const ArgContext' lvalue ParmVar 0x555d15eedcd0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x555d15eee908 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x555d15eee8d8 <col:31, col:50> 'const bool' lvalue Var 0x555d15a7fed0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x555d15eee878 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x555d15eee860 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x555d15eee848 <col:43> 'unsigned short':'unsigned short' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x555d15eee828 <col:43> 'unsigned short':'unsigned short' lvalue Var 0x555d15eee018 'x' 'unsigned short':'unsigned short'
|         | `-ReturnStmt 0x555d15eee920 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x555d15dedac8 <col:20> 'bool' false
|         `-CompoundStmt 0x555d15eee9d8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x555d15eee9a8 <line:1080:13, col:22> 'unsigned short':'unsigned short' lvalue '='
|           | |-DeclRefExpr 0x555d15eee950 <col:13> 'unsigned short':'unsigned short' lvalue ParmVar 0x555d15eedc68 'result' 'unsigned short &'
|           | `-ImplicitCastExpr 0x555d15eee990 <col:22> 'unsigned short':'unsigned short' <LValueToRValue>
|           |   `-DeclRefExpr 0x555d15eee970 <col:22> 'unsigned short':'unsigned short' lvalue Var 0x555d15eee018 'x' 'unsigned short':'unsigned short'
|           `-ReturnStmt 0x555d15eee9c8 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x555d15dedb68 <col:20> 'bool' true
|-FieldDecl 0x555d15deb870 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x555d15deb8d8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x555d15deb928 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x555d15debbe0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x555d15deb968 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x555d15deb9e8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x555d15deba60 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x555d15debae0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x555d15debee8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x555d15debcb0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x555d15debd28 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x555d15debdc0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x555d15dee458 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x555d15dee458
| `-ParmVarDecl 0x555d15dee568 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x555d15dee6e8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15dee7f8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x555d15eeab30 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555d15eeab00 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x555d15eeaad0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d15eeaaa0 <col:7> 'IntArg' lvalue ParmVar 0x555d15dee7f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555d15deb870 'base' 'int'
| | `-ImplicitCastExpr 0x555d15eeac28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d15eeabf8 <col:7> 'int' xvalue .base 0x555d15deb870
| |     `-CXXStaticCastExpr 0x555d15eeabc8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d15eeab98 <col:7> 'IntArg' lvalue ParmVar 0x555d15dee7f8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x555d15deb8d8 'status' 'int'
| | `-ImplicitCastExpr 0x555d15eeacf8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x555d15eeacc8 <col:7> 'int' xvalue .status 0x555d15deb8d8
| |     `-CXXStaticCastExpr 0x555d15eeac98 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x555d15eeac68 <col:7> 'IntArg' lvalue ParmVar 0x555d15dee7f8 '' 'IntArg &&'
| `-CompoundStmt 0x555d15eead50 <col:7>
`-CXXDestructorDecl 0x555d15ee66c0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555d15df2420 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x555d15df2678 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x555d15ee65e8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555d15ee6b60 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x555d15ee6b40 <<invalid sloc>> 'int'
| `-CompoundStmt 0x555d15ee6bd0 <col:19>
|-CXXConstructorDecl 0x555d15ee67c8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x555d15ee67c8
| `-ParmVarDecl 0x555d15ee68d8 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x555d15ee6978 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x555d15ee6a88 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x555d15eead60 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x555d15eeaa80 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x555d15eeaa50 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x555d15eeaa20 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x555d15ee6a88 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x555d15eeadd0 <col:19>
`-CXXDestructorDecl 0x555d15ee6c10 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
