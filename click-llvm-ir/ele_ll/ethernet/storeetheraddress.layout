
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3daaca8 prev 0x5570a3da2448 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5570a3daada0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5570a3daae30 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5570a3daaea8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5570a3daaf68 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5570a3dab030 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5570a3dab1a8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5570a3dab0e0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5570a3dab250 <col:24>
| `-OptimizeNoneAttr 0x5570a3dab2a8 <col:34>
|-CXXMethodDecl 0x5570a3dab2f0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5570a3dab5a8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5570a3dab3a0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5570a3dab418 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5570a3dab498 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5570a3dab660 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5570a3dab698 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5570a3dab700 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5570a3dab788 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5570a3dabaa8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5570a3dab840 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5570a3dab8b8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5570a3dab930 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5570a3dab9b0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5570a3dabbc0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5570a3db3538 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5570a3db3538
| `-ParmVarDecl 0x5570a3db3648 <col:11> col:11 'const Element::Port &'
`-CXXConstructorDecl 0x5570a3db36e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5570a3db36e8
  `-ParmVarDecl 0x5570a3db37f8 <col:11> col:11 'Element::Port &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d9dcc0 prev 0x5570a3d9da40 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5570a3d9ddb8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5570a3d9de48 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5570a3d9dea8 <line:31:5, col:13> col:5 Element 'void ()'
|-CXXDestructorDecl 0x5570a3d9df98 <line:32:5, col:22> col:13 ~Element 'void ()' virtual noexcept-unevaluated 0x5570a3d9df98
|-VarDecl 0x5570a3d9e098 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5570a3d9e268 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5570a3d9e118 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5570a3d9e190 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5570a3d9e3f8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5570a3d9e330 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5570a3d9e4a0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d9e5d8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5570a3d9e510 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5570a3d9e778 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5570a3d9e6b8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5570a3d9e918 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5570a3d9e858 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5570a3d9e9c0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5570a3d9eac0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5570a3d9eba0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d9eaa0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5570a3d9ea80 <col:26> 'int' 1
| `-EnumConstantDecl 0x5570a3d9eb50 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5570a3d9ebb8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d9eb30 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5570a3d9eb10 <col:44> 'int' 2
|-CXXMethodDecl 0x5570a3d9ed00 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5570a3d9ebe8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5570a3d9ec68 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5570a3d9ee58 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5570a3d9edc8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5570a3d9f098 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5570a3d9ef18 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5570a3d9ef90 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5570a3d9f148 <col:20>
| `-OptimizeNoneAttr 0x5570a3d9f1a0 <col:30>
|-CXXMethodDecl 0x5570a3d9f2a8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5570a3d9f1e0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5570a3d9f350 <col:20>
| `-OptimizeNoneAttr 0x5570a3d9f3a8 <col:30>
|-CXXMethodDecl 0x5570a3d9f3f8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5570a3d9f4c0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5570a3d9f5d8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5570a3d9f660 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5570a3d9f6e8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5570a3d9f770 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5570a3d9f7f8 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5570a3d9f888 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5570a3d9f948 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5570a3d9f9d0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5570a3d9fa58 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5570a3d9fae0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5570a3d9fb68 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5570a3d9fbf0 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5570a3d9fc80 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5570a3d9fd40 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5570a3d9fdd0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5570a3d9ff20 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5570a3d9fe88 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5570a3da00b0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5570a3d9ffe0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5570a3da0360 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5570a3da0168 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5570a3da01e8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5570a3da0268 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5570a3da0418 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5570a3da0520 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5570a3da07b0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da0500 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3da04e0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5570a3da05b0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5570a3da07c8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da0590 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5570a3da0570 <col:32> 'int' 20
| |-EnumConstantDecl 0x5570a3da0640 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5570a3da07e0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da0620 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5570a3da0600 <col:38> 'int' 90
| |-EnumConstantDecl 0x5570a3da06d0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5570a3da07f8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da06b0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5570a3da0690 <col:35> 'int' 100
| `-EnumConstantDecl 0x5570a3da0760 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5570a3da0810 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3da0740 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5570a3da0720 <col:32> 'int' 2000
|-CXXMethodDecl 0x5570a3da0850 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5570a3da0c90 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5570a3da0b00 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5570a3da0b78 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3da0d60 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5570a3da0ee0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5570a3da0e10 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3da10e8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5570a3da0f98 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5570a3da1010 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3da11e8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5570a3da1288 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5570a3da1350 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da13e0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5570a3da1610 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da13c0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5570a3da13a0 <col:36> 'int' EnumConstant 0x5570a3da1350 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da1430 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da1480 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da14d0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da1520 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5570a3da1570 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5570a3da15c0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5570a3da16f8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5570a3da1638 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5570a3da17c0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5570a3da1880 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5570a3da1940 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5570a3da1a00 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5570a3da1b18 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5570a3da1be0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5570a3da1d60 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5570a3da1c90 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5570a3da1e88 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5570a3da2088 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5570a3da1f38 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5570a3da1fb8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5570a3daf9d8 <col:54, line:127:5>
|   |-ParenExpr 0x5570a3daf888 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5570a3daf858 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3daf548 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5570a3daf520 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5570a3daf508 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5570a3daf4f0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5570a3daf4c0 <col:31> 'Router *' lvalue ->_router 0x5570a3dad3a0
|   |   |         `-CXXThisExpr 0x5570a3daf4b0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5570a3daf5a8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3daf588 <col:48> 'int' 0
|   |   `-CallExpr 0x5570a3daf7b8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5570a3daf7a0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3daf780 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3daf7f8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3daf618 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5570a3daf810 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3daf638 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5570a3daf828 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3daf670 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5570a3daf840 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3daf768 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3daf750 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3daf708 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5570a3daf920 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5570a3daf8b8 <col:9> 'Router *' lvalue ->_router 0x5570a3dad3a0
|   | | `-CXXThisExpr 0x5570a3daf8a8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5570a3daf908 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5570a3daf8e8 <col:19> 'Router *' lvalue ParmVar 0x5570a3da1f38 'r' 'Router *'
|   `-BinaryOperator 0x5570a3daf9b8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5570a3daf950 <col:9> 'int' lvalue ->_eindex 0x5570a3dad408
|     | `-CXXThisExpr 0x5570a3daf940 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5570a3daf9a0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3daf980 <col:19> 'int' lvalue ParmVar 0x5570a3da1fb8 'eindex' 'int'
|-CXXMethodDecl 0x5570a3da2210 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5570a3da2148 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5570a3da22e0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5570a3da23a8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5570a3da2448 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5570a3da2698 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5570a3da2510 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5570a3da2590 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5570a3da2748 <col:20>
| `-OptimizeNoneAttr 0x5570a3da27a0 <col:30>
|-CXXMethodDecl 0x5570a3da28a8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5570a3da27e0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5570a3da2950 <col:20>
| `-OptimizeNoneAttr 0x5570a3da29a8 <col:30>
|-CXXMethodDecl 0x5570a3da2a78 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5570a3da29e8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5570a3da2b20 <col:20>
| `-OptimizeNoneAttr 0x5570a3da2b78 <col:30>
|-CXXMethodDecl 0x5570a3da2d08 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5570a3da2bb0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5570a3da2c30 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5570a3da2e98 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5570a3da2dd0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5570a3da2fe8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5570a3da2f58 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5570a3da3138 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5570a3da30a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5570a3da3288 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5570a3da31f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5570a3da3548 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5570a3da3340 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5570a3da33c0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5570a3da3468 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5570a3da3620 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5570a3da36e0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5570a3da39b0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5570a3da3860 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5570a3da38d8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3da3ad8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5570a3da3cb0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5570a3da3b90 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5570a3da3c10 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5570a3da3e98 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5570a3da3d78 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5570a3da3df8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5570a3da4208 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5570a3da3f58 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5570a3da3fd0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5570a3da4050 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5570a3daefc0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3daefa0 <col:106> 'int' 0
| `-ParmVarDecl 0x5570a3da40c8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daeff8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daefd8 <col:126> 'int' 0
|-CXXMethodDecl 0x5570a3da45a8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5570a3da42d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5570a3da4370 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5570a3da43f0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5570a3da4468 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daf030 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daf010 <col:114> 'int' 0
|-CXXMethodDecl 0x5570a3da4938 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5570a3da4680 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5570a3da46f8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5570a3da4778 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5570a3daf048 <col:96> 'int' 0
| `-ParmVarDecl 0x5570a3da47f0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daf088 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daf068 <col:116> 'int' 0
|-CXXMethodDecl 0x5570a3da4cb8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5570a3da4a08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5570a3da4a80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da4b00 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5570a3daf0c0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3daf0a0 <col:109> 'int' 0
| `-ParmVarDecl 0x5570a3da4b78 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daf0f8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daf0d8 <col:129> 'int' 0
|-CXXMethodDecl 0x5570a3da5038 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5570a3da4d88 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5570a3da4e00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da4e80 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5570a3da4ef8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daf130 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daf110 <col:117> 'int' 0
|-CXXMethodDecl 0x5570a3da53c8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5570a3da5110 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da5188 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da5208 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5570a3daf148 <col:99> 'int' 0
| `-ParmVarDecl 0x5570a3da5280 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5570a3daf188 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5570a3daf168 <col:119> 'int' 0
|-CXXMethodDecl 0x5570a3da57e8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5570a3da5498 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5570a3da5518 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5570a3da5590 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da5610 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5570a3daf1c0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3daf1a0 <col:108> 'int' 0
| `-ParmVarDecl 0x5570a3da5690 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5570a3daf1f8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5570a3daf1d8 <col:141> 'int' 0
|-CXXMethodDecl 0x5570a3da5c08 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5570a3da58c0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5570a3da5940 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5570a3da59b8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da5a38 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5570a3da5ab8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5570a3daf210 <col:121> 'int' 0
|-CXXMethodDecl 0x5570a3da6038 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5570a3da5ce8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5570a3da5d68 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5570a3da5de0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3da5e60 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5570a3daf230 <col:98> 'int' 0
| `-ParmVarDecl 0x5570a3da5ee0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5570a3daf250 <col:123> 'int' 0
|-CXXMethodDecl 0x5570a3da6300 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5570a3da6110 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5570a3da6190 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5570a3da6210 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5570a3daf270 <col:80> 'int' 0
|-EnumDecl 0x5570a3da63b8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5570a3da64c0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5570a3da6750 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da64a0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5570a3da6480 <col:42> 'int' 1
| |-EnumConstantDecl 0x5570a3da6550 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5570a3da6768 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da6530 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5570a3da6510 <col:40> 'int' 2
| |-EnumConstantDecl 0x5570a3da65e0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5570a3da6780 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da65c0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5570a3da65a0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5570a3da6670 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5570a3da6798 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3da6650 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5570a3da6630 <col:36> 'int' 7
| `-EnumConstantDecl 0x5570a3da6700 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5570a3da67b0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3da66e0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5570a3da66c0 <col:34> 'int' 6
|-CXXMethodDecl 0x5570a3da6a68 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5570a3da67d8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5570a3da6878 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5570a3da68f8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5570a3da6970 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5570a3daf328 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5570a3daf310 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5570a3daf2f8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5570a3daf2d8 <col:98, col:105> 'String' (CXXTemporary 0x5570a3daf2d8)
|           `-CXXTemporaryObjectExpr 0x5570a3daf2a0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5570a3da6d08 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5570a3da6b38 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5570a3da6bb0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5570a3da6c28 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5570a3daf3d8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5570a3daf3c0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5570a3daf3a8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5570a3daf388 <col:94, col:101> 'String' (CXXTemporary 0x5570a3daf388)
| |         `-CXXTemporaryObjectExpr 0x5570a3daf350 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5570a3dafbc0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5570a3dafb38 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5570a3dafb08 <col:9> '<bound member function type>' ->add_task_handlers 0x5570a3da6a68
|     | `-CXXThisExpr 0x5570a3dafaf8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5570a3dafb78 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5570a3dafa78 <col:27> 'Task *' lvalue ParmVar 0x5570a3da6b38 'task' 'Task *'
|     |-ImplicitCastExpr 0x5570a3dafb90 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5570a3dafa98 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5570a3da6bb0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5570a3dafba8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5570a3dafab8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5570a3da6700 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5570a3dafad8 <col:62> 'const String' lvalue ParmVar 0x5570a3da6c28 'prefix' 'const String &'
|-CXXMethodDecl 0x5570a3da6f18 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5570a3da6dd0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5570a3da6e48 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5570a3daf488 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5570a3daf470 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5570a3daf458 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5570a3daf438 <col:70, col:77> 'String' (CXXTemporary 0x5570a3daf438)
| |         `-CXXTemporaryObjectExpr 0x5570a3daf400 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5570a3dafd98 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5570a3dafd10 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5570a3dafce0 <col:9> '<bound member function type>' ->add_task_handlers 0x5570a3da6a68
|     | `-CXXThisExpr 0x5570a3dafcd0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5570a3dafd50 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5570a3dafc50 <col:27> 'Task *' lvalue ParmVar 0x5570a3da6dd0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5570a3dafd68 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5570a3dafc70 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5570a3dafd80 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5570a3dafc90 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5570a3da6700 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5570a3dafcb0 <col:57> 'const String' lvalue ParmVar 0x5570a3da6e48 'prefix' 'const String &'
|-CXXMethodDecl 0x5570a3da71f8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5570a3da6fe0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da7060 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da70d8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5570a3da74a8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5570a3da72c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da7348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da73c8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5570a3da7798 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5570a3da7578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da75f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da7670 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5570a3da7a48 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5570a3da7868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da78e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da7968 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5570a3da7cf8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5570a3da7b18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da7b98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da7c18 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5570a3da7fa8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5570a3da7dc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da7e48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da7ec0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5570a3da8258 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5570a3da8078 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da80f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da8178 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5570a3da8568 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5570a3da8380 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da8400 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da8480 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5570a3da8848 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5570a3da8638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da86b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da8760 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5570a3da8b28 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5570a3da8918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da8998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da8a40 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5570a3da8d90 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5570a3da8bf8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5570a3da8c78 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5570a3da8cf0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5570a3da9038 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5570a3da8e60 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5570a3da8ee0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5570a3da8f58 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5570a3da92e8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5570a3da9108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da9188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da9208 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5570a3da9598 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5570a3da93b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da9438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da94b0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5570a3da9848 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5570a3da9668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da96e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da9760 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5570a3da9b18 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5570a3da9918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da9998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5570a3da9a38 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5570a3da9e48 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5570a3da9be8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5570a3da9c68 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5570a3da9ce0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5570a3da9d58 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5570a3daf4a0 <col:93> 'bool' false
|-CXXMethodDecl 0x5570a3daa030 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5570a3da9f18 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5570a3da9f98 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5570a3daa208 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5570a3daa0f0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5570a3daa170 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5570a3daa4e8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5570a3daa2c8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5570a3daa340 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5570a3daa3c0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5570a3daa438 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3daa7d8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5570a3daa5b8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5570a3daa630 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5570a3daa6b0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5570a3daa728 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3daaa10 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5570a3daa8b0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5570a3daa930 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5570a3daabf8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5570a3daaad8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5570a3daab58 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5570a3daaca8 prev 0x5570a3da2448 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5570a3daada0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5570a3daae30 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5570a3daaea8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5570a3daaf68 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5570a3dab030 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5570a3dab1a8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5570a3dab0e0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5570a3dab250 <col:24>
| | `-OptimizeNoneAttr 0x5570a3dab2a8 <col:34>
| |-CXXMethodDecl 0x5570a3dab2f0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5570a3dab5a8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5570a3dab3a0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5570a3dab418 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5570a3dab498 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5570a3dab660 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5570a3dab698 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5570a3dab700 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5570a3dab788 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5570a3dabaa8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5570a3dab840 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5570a3dab8b8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5570a3dab930 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5570a3dab9b0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5570a3dabbc0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5570a3db3538 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5570a3db3538
| | `-ParmVarDecl 0x5570a3db3648 <col:11> col:11 'const Element::Port &'
| `-CXXConstructorDecl 0x5570a3db36e8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5570a3db36e8
|   `-ParmVarDecl 0x5570a3db37f8 <col:11> col:11 'Element::Port &&'
|-CXXMethodDecl 0x5570a3dabc38 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5570a3dabcd8 <col:38> "" ""
|-CXXMethodDecl 0x5570a3dabd68 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5570a3dabe08 <col:44> "" ""
|-AccessSpecDecl 0x5570a3dabe78 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5570a3dabea0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5570a3dabfa0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5570a3dabff0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3dabf80 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5570a3dabf60 <col:27> 'int' 4
|-FieldDecl 0x5570a3dac0a8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5570a3dac258 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5570a3dac310 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5570a3dad3a0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5570a3dad408 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5570a3dad558 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5570a3dad498 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5570a3dad708 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5570a3dad618 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5570a3dad8e8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5570a3dad7c8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5570a3dad848 <col:25> col:28 'int'
|-CXXMethodDecl 0x5570a3dadb90 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3dad9b0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5570a3dada30 <col:28> col:31 'int'
| `-ParmVarDecl 0x5570a3dadaa8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5570a3dadc48 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5570a3dadd10 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5570a3dadd60 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5570a3daddb0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5570a3dadf90 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5570a3dade40 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5570a3dadeb8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3dae238 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5570a3dae058 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5570a3dae0d8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5570a3dae150 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3dae458 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5570a3dae308 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5570a3dae388 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5570a3dae790 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5570a3dae518 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5570a3dae598 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5570a3dae610 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5570a3dae690 <col:57> col:60 'int'
|-CXXMethodDecl 0x5570a3dae978 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5570a3dae860 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5570a3dae8e0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5570a3daeac8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5570a3daea38 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5570a3daee48 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5570a3daeb88 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5570a3daec08 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5570a3daec80 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5570a3daed00 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5570a3daef60 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | class StoreEtherAddress
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint32_t _offset
       112 |   _Bool _use_anno
       113 |   uint8_t _anno
       114 |   class EtherAddress _address
       114 |     uint16_t [3] _data
           | [sizeof=120, dsize=120, align=8,
           |  nvsize=120, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3db66a8 prev 0x5570a3d9dc10 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5570a3db8118 <line:148:18>
|-CXXRecordDecl 0x5570a3db67a0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5570a3db6830 <col:22, col:28> col:22 public
|-TypedefDecl 0x5570a3db6868 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5570a39915c0 'uninitialized_type'
|   `-CXXRecord 0x5570a3991528 'uninitialized_type'
|-CXXConstructorDecl 0x5570a3db68f8 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x5570a3db8418 <col:27, line:16:5>
|   `-BinaryOperator 0x5570a3db83f8 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5570a3db8200 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5570a3db81e8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5570a3db8198 <col:2> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|     | |   `-CXXThisExpr 0x5570a3db8188 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5570a3db81c8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5570a3db83e0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5570a3db83c0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5570a3db8298 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5570a3db8280 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5570a3db8230 <col:13> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|         | |   `-CXXThisExpr 0x5570a3db8220 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5570a3db8260 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5570a3db83a8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5570a3db8388 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5570a3db8330 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5570a3db8318 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5570a3db82c8 <col:24> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|             | |   `-CXXThisExpr 0x5570a3db82b8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5570a3db82f8 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5570a3db8370 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5570a3db8350 <col:35> 'int' 0
|-CXXConstructorDecl 0x5570a3db6a48 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5570a3db69b8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5570a3db85e0 <col:61, line:24:5>
|   `-CallExpr 0x5570a3db8530 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5570a3db8518 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5570a3db84f8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5570a3a9b318 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5570a3db8580 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5570a3db8568 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5570a3db8488 <col:9> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|     |     `-CXXThisExpr 0x5570a3db8478 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5570a3db85b0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5570a3db8598 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5570a3db84b8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5570a3db69b8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5570a3db85c8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5570a3db84d8 <col:22> 'int' 6
|-CXXConstructorDecl 0x5570a3db6b98 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5570a3db6b08 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5570a3db8650 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5570a3db8628 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5570a3db85f8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5570a3db6b08 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5570a3db6c98 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5570a3db8d98 <col:42, line:34:5>
|   `-ReturnStmt 0x5570a3db8d88 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5570a3db8d70 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5570a3db8d40 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5570a3db8b78 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5570a3db8af0 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5570a3db89e0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5570a3db89c8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5570a3db8678 <col:22> 'int' 65535
|-CXXMethodDecl 0x5570a3db6d58 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5570a3db6df8 <col:59> "" ""
|-TypedefDecl 0x5570a3db6f78 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5570a3db6ef0 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5570a3d9dca0 'EtherAddress'
|   | `-CXXRecord 0x5570a3db66a8 'EtherAddress'
|   `-ParenType 0x5570a3db6e90 'bool () const' sugar
|     `-FunctionProtoType 0x5570a38e4340 'bool () const' const cdecl
|       `-BuiltinType 0x5570a383c340 'bool'
|-CXXConversionDecl 0x5570a3db70b8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5570a3db9178 <col:51, line:43:5>
|   `-ReturnStmt 0x5570a3db9168 <line:42:2, col:70>
|     `-ConditionalOperator 0x5570a3db9138 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5570a3db9060 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5570a3db8f78 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5570a3db8f30 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5570a3db8f18 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5570a3db8e60 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5570a3db8e48 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5570a3db8dc0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       | | |     |   `-CXXThisExpr 0x5570a3db8db0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5570a3db8df0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5570a3db8f60 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5570a3db8f48 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5570a3db8ef8 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5570a3db8ee0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5570a3db8e90 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       | |       |   `-CXXThisExpr 0x5570a3db8e80 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5570a3db8ec0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5570a3db9048 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5570a3db9030 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5570a3db9010 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5570a3db8ff8 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5570a3db8fa8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       |       |   `-CXXThisExpr 0x5570a3db8f98 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5570a3db8fd8 <col:39> 'int' 2
|       |-UnaryOperator 0x5570a3db90e8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5570a3db90b8 <col:45, col:59> 'bool () const' CXXMethod 0x5570a3db7188 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5570a3db9120 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5570a3db9100 <col:70> 'int' 0
|-CXXMethodDecl 0x5570a3db7188 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5570a3db9338 <col:34, line:51:5>
|   `-ReturnStmt 0x5570a3db9328 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5570a3db9310 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5570a3db92f0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5570a3db92d8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5570a3db92c0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5570a3db9280 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5570a3db9240 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5570a3db9210 <col:9> '<bound member function type>' ->data 0x5570a3db7620
|         |     |   `-CXXThisExpr 0x5570a3db9200 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5570a3db9260 <col:16> 'int' 0
|         `-IntegerLiteral 0x5570a3db92a0 <col:21> 'int' 1
|-CXXMethodDecl 0x5570a3db7248 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5570a3db94f8 <col:34, line:59:5>
|   `-ReturnStmt 0x5570a3db94e8 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5570a3db94d0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5570a3db94b0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5570a3db9498 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5570a3db9480 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5570a3db9440 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5570a3db9400 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5570a3db93d0 <col:9> '<bound member function type>' ->data 0x5570a3db7620
|         |     |   `-CXXThisExpr 0x5570a3db93c0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5570a3db9420 <col:16> 'int' 0
|         `-IntegerLiteral 0x5570a3db9460 <col:21> 'int' 2
|-CXXMethodDecl 0x5570a3db7308 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5570a3db97f8 <col:38, line:66:5>
|   `-ReturnStmt 0x5570a3db97e8 <line:65:2, col:43>
|     `-BinaryOperator 0x5570a3db97c8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5570a3db9788 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5570a3db96a0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5570a3db9658 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5570a3db9640 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5570a3db9588 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5570a3db9570 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5570a3db9520 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       | | |     |   `-CXXThisExpr 0x5570a3db9510 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5570a3db9550 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5570a3db9688 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5570a3db9670 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5570a3db9620 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5570a3db9608 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5570a3db95b8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       | |       |   `-CXXThisExpr 0x5570a3db95a8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5570a3db95e8 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5570a3db9770 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5570a3db9758 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5570a3db9738 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5570a3db9720 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5570a3db96d0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       |       |   `-CXXThisExpr 0x5570a3db96c0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5570a3db9700 <col:37> 'int' 2
|       `-IntegerLiteral 0x5570a3db97a8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5570a3db7488 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5570a3db73c0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5570a3db9948 <col:64, line:75:5>
|   `-ReturnStmt 0x5570a3db9938 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5570a3db9918 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5570a3db98e8 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5570a3db7308
|         `-CXXReinterpretCastExpr 0x5570a3db9858 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5570a3db9840 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5570a3db9810 <col:48> 'const unsigned char *' lvalue ParmVar 0x5570a3db73c0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5570a3db7558 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5570a3db9a10 <col:34, line:80:5>
|   `-ReturnStmt 0x5570a3db9a00 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5570a3db99d0 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5570a3db99b8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5570a3db9970 <col:43> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|           `-CXXThisExpr 0x5570a3db9960 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5570a3db7620 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5570a3db9ad8 <col:46, line:85:5>
|   `-ReturnStmt 0x5570a3db9ac8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5570a3db9a98 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5570a3db9a80 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5570a3db9a38 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|           `-CXXThisExpr 0x5570a3db9a28 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5570a3db7768 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5570a3db9b58 <col:42, line:91:5>
|   `-ReturnStmt 0x5570a3db9b48 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5570a3db9b30 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5570a3db9b00 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|         `-CXXThisExpr 0x5570a3db9af0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5570a3db7858 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5570a3db9f68 <col:36, line:97:5>
|   `-ReturnStmt 0x5570a3db9f58 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5570a3db9f38 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5570a3db9db8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5570a3db9d98 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5570a3db9d80 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5570a3db9d68 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5570a3db9be8 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5570a3db9bd0 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5570a3db9b80 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       |   |     |   `-CXXThisExpr 0x5570a3db9b70 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5570a3db9bb0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5570a3db9d48 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5570a3db9d28 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5570a3db9ce0 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5570a3db9cc8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5570a3db9cb0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5570a3db9c80 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5570a3db9c68 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5570a3db9c18 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|       |       |       |   `-CXXThisExpr 0x5570a3db9c08 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5570a3db9c48 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5570a3db9d08 <col:43> 'int' 16
|       `-ParenExpr 0x5570a3db9f18 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5570a3db9ef8 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5570a3db9eb0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5570a3db9e98 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5570a3db9e80 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5570a3db9e50 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5570a3db9e38 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5570a3db9de8 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5570a3db7f18
|           |       |   `-CXXThisExpr 0x5570a3db9dd8 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5570a3db9e18 <col:24> 'int' 0
|           `-IntegerLiteral 0x5570a3db9ed8 <col:30> 'int' 9
|-CXXMethodDecl 0x5570a3db7918 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5570a3dba078 <col:35, line:111:5>
|   `-ReturnStmt 0x5570a3dba068 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5570a3dba050 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5570a3dba020 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5570a3dba008 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5570a3db9fe8 <col:9, col:22> 'String' (CXXTemporary 0x5570a3db9fe8)
|             `-CXXMemberCallExpr 0x5570a3db9fc0 <col:9, col:22> 'String'
|               `-MemberExpr 0x5570a3db9f90 <col:9> '<bound member function type>' ->unparse_dash 0x5570a3db7a98
|                 `-CXXThisExpr 0x5570a3db9f80 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5570a3db79d8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5570a3db7a98 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5570a3db7b58 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5570a3db7bf8 <col:44> "" ""
|-CXXConversionDecl 0x5570a3db7c98 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5570a3db7d40 <col:51> "" ""
|-TypedefDecl 0x5570a3db7df8 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5570a3db7dc0 'const EtherAddress &'
|   `-QualType 0x5570a3d9dca1 'const EtherAddress' const
|     `-RecordType 0x5570a3d9dca0 'EtherAddress'
|       `-CXXRecord 0x5570a3db66a8 'EtherAddress'
|-AccessSpecDecl 0x5570a3db7e50 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5570a3db7f18 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5570a3db8068 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5570a3db7f78 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5570a3dba320 <col:30, line:146:5>
|   `-BinaryOperator 0x5570a3dba300 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5570a3dba108 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5570a3dba0f0 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5570a3dba0a0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|     | |   `-CXXThisExpr 0x5570a3dba090 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5570a3dba0d0 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5570a3dba2e8 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5570a3dba2c8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5570a3dba1a0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5570a3dba188 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5570a3dba138 <col:13> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|         | |   `-CXXThisExpr 0x5570a3dba128 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5570a3dba168 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5570a3dba2b0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5570a3dba290 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5570a3dba238 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5570a3dba220 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5570a3dba1d0 <col:24> 'uint16_t [3]' lvalue ->_data 0x5570a3db7f18
|             | |   `-CXXThisExpr 0x5570a3dba1c0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5570a3dba200 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5570a3dba278 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3dba258 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5570a3db7f78 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5570a3db8698 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5570a3db8698
| `-ParmVarDecl 0x5570a3db87a8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5570a3db8848 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3db8958 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5570a3db7f18 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5570a3db8ce0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5570a3db8c68 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5570a3db8c20 <col:7> 'uint16_t [3]' xvalue ._data 0x5570a3db7f18
| |   |   `-CXXStaticCastExpr 0x5570a3db8bf0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5570a3db8bc0 <col:7> 'EtherAddress' lvalue ParmVar 0x5570a3db8958 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5570a3db8cc8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5570a3db8ca8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5570a3db8c90 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5570a3db8c68 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5570a3db8c20 <col:7> 'uint16_t [3]' xvalue ._data 0x5570a3db7f18
| |       |     `-CXXStaticCastExpr 0x5570a3db8bf0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5570a3db8bc0 <col:7> 'EtherAddress' lvalue ParmVar 0x5570a3db8958 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5570a3db8c80 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5570a3db8d30 <col:7>
`-CXXDestructorDecl 0x5570a3db8a10 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d1db40 <../elements/ethernet/storeetheraddress.hh:34:1, line:52:1> line:34:7 class StoreEtherAddress definition
|-DefinitionData polymorphic
| |-DefaultConstructor exists non_trivial needs_implicit
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5570a3d1dc98 <col:1, col:7> col:7 implicit class StoreEtherAddress
|-AccessSpecDecl 0x5570a3d1dd28 <col:44, col:50> col:44 public
|-CXXMethodDecl 0x5570a3d1dda0 <line:36:5, col:66> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5570a3d9f3f8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5570a3d1ee88 <col:36, col:66>
|   `-ReturnStmt 0x5570a3d1ee78 <col:38, col:45>
|     `-ImplicitCastExpr 0x5570a3d1ee60 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5570a3d1ee30 <col:45> 'const char [18]' lvalue "StoreEtherAddress"
|-CXXMethodDecl 0x5570a3d1de68 <line:37:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5570a3d9f4c0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5570a3d1eee8 <col:36, col:58>
|   `-ReturnStmt 0x5570a3d1eed8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5570a3d1eec0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5570a3d1eea0 <col:45> 'const char []' lvalue Var 0x5570a3d9f7f8 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5570a3d1df30 <line:38:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5570a3d9f888 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5570a3d1ef48 <col:36, col:62>
|   `-ReturnStmt 0x5570a3d1ef38 <col:38, col:45>
|     `-ImplicitCastExpr 0x5570a3d1ef20 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5570a3d1ef00 <col:45> 'const char []' lvalue Var 0x5570a3d9fbf0 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x5570a3d1e230 <line:40:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5570a3da0c90 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5570a3d1e0b0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5570a3d1e128 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3d1e300 <line:41:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5570a3da0d60 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5570a3d1e440 <line:43:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5570a3d9e5d8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5570a3d1e3b0 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5570a3d1e4e8 <line:45:2, col:9> col:2 private
|-FieldDecl 0x5570a3d1e520 <line:47:5, col:14> col:14 referenced _offset 'uint32_t':'unsigned int'
|-FieldDecl 0x5570a3d1e580 <line:48:5, col:10> col:10 referenced _use_anno 'bool'
|-FieldDecl 0x5570a3d1e5e0 <line:49:5, col:13> col:13 referenced _anno 'uint8_t':'unsigned char'
|-FieldDecl 0x5570a3d1e640 <line:50:5, col:18> col:18 referenced _address 'EtherAddress'
|-CXXConstructorDecl 0x5570a3d1e6d0 <line:34:7> col:7 implicit StoreEtherAddress 'void (const StoreEtherAddress &)' inline default_delete noexcept-unevaluated 0x5570a3d1e6d0
| `-ParmVarDecl 0x5570a3d1e7e8 <col:7> col:7 'const StoreEtherAddress &'
|-CXXConstructorDecl 0x5570a3d1e888 <col:7> col:7 implicit StoreEtherAddress 'void (StoreEtherAddress &&)' inline default_delete noexcept-unevaluated 0x5570a3d1e888
| `-ParmVarDecl 0x5570a3d1e998 <col:7> col:7 'StoreEtherAddress &&'
|-CXXMethodDecl 0x5570a3d1ea38 <col:7> col:7 implicit operator= 'StoreEtherAddress &(const StoreEtherAddress &)' inline default_delete noexcept-unevaluated 0x5570a3d1ea38
| `-ParmVarDecl 0x5570a3d1eb48 <col:7> col:7 'const StoreEtherAddress &'
|-CXXMethodDecl 0x5570a3d1ebb8 <col:7> col:7 implicit operator= 'StoreEtherAddress &(StoreEtherAddress &&)' inline default_delete noexcept-unevaluated 0x5570a3d1ebb8
| `-ParmVarDecl 0x5570a3d1ecc8 <col:7> col:7 'StoreEtherAddress &&'
`-CXXDestructorDecl 0x5570a3d1ed50 <col:7> col:7 implicit ~StoreEtherAddress 'void ()' inline default noexcept-unevaluated 0x5570a3d1ed50
  `-Overrides: [ 0x5570a3d9df98 Element::~Element 'void ()' ]

Layout: <CGRecordLayout
  LLVMType:%class.StoreEtherAddress = type { %class.Element.base, i32, i8, i8, %class.EtherAddress }
  NonVirtualBaseLLVMType:%class.StoreEtherAddress = type { %class.Element.base, i32, i8, i8, %class.EtherAddress }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3b71b60 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5570a3b71c78 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5570a3b71d18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5570a3b71d78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5570a3b71dd8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5570a3b71e88 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3b72190 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3b722a8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5570a3b72350 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5570a3b723b8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5570a3b72448 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5570a3b784e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5570a3b78918 <col:12>
|-CXXConstructorDecl 0x5570a3b785e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3b786f8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5570a3b72350 'data' 'const char *'
| | `-ImplicitCastExpr 0x5570a3b7aea0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5570a3b7ae70 <col:12> 'const char *const' lvalue .data 0x5570a3b72350
| |     `-DeclRefExpr 0x5570a3b7ae50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5570a3b723b8 'length' 'int'
| | `-ImplicitCastExpr 0x5570a3b7af30 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5570a3b7af00 <col:12> 'const int' lvalue .length 0x5570a3b723b8
| |     `-DeclRefExpr 0x5570a3b7aee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5570a3b72448 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5570a3b7afc0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5570a3b7af90 <col:12> 'String::memo_t *const' lvalue .memo 0x5570a3b72448
| |     `-DeclRefExpr 0x5570a3b7af70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5570a3b7b018 <col:12>
|-CXXConstructorDecl 0x5570a3b78798 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b78798
| `-ParmVarDecl 0x5570a3b788a8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5570a3b7de00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5570a3b89818 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3b89928 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5570a3b89e40 <col:12>
|   |-BinaryOperator 0x5570a3b89c58 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5570a3b89c10 <col:12> 'const char *' lvalue ->data 0x5570a3b72350
|   | | `-CXXThisExpr 0x5570a3b89c00 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5570a3b89c40 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3b89bd0 <col:12> 'const char *const' lvalue .data 0x5570a3b72350
|   |     `-DeclRefExpr 0x5570a3b89bb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5570a3b89d20 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5570a3b89cd8 <col:12> 'int' lvalue ->length 0x5570a3b723b8
|   | | `-CXXThisExpr 0x5570a3b89cc8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5570a3b89d08 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3b89c98 <col:12> 'const int' lvalue .length 0x5570a3b723b8
|   |     `-DeclRefExpr 0x5570a3b89c78 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5570a3b89de8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5570a3b89da0 <col:12> 'String::memo_t *' lvalue ->memo 0x5570a3b72448
|   | | `-CXXThisExpr 0x5570a3b89d90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5570a3b89dd0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3b89d60 <col:12> 'String::memo_t *const' lvalue .memo 0x5570a3b72448
|   |     `-DeclRefExpr 0x5570a3b89d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5570a3b89e30 <col:12>
|     `-UnaryOperator 0x5570a3b89e18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3b89e08 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5570a3b89998 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b89998
  `-ParmVarDecl 0x5570a3b89aa8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3b690d0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5570a3b691e8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5570a3b69278 <col:16, col:22> col:16 public
|-TypedefDecl 0x5570a3b692b8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5570a383ce10 'const char *'
|   `-QualType 0x5570a383c361 'const char' const
|     `-BuiltinType 0x5570a383c360 'char'
|-TypedefDecl 0x5570a3b69340 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5570a3b69310 'String::const_iterator' sugar
|   |-Typedef 0x5570a3b692b8 'const_iterator'
|   `-PointerType 0x5570a383ce10 'const char *'
|     `-QualType 0x5570a383c361 'const char' const
|       `-BuiltinType 0x5570a383c360 'char'
|-TypedefDecl 0x5570a3b694b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5570a3b69420 'int (String::*)() const'
|   |-RecordType 0x5570a3b69160 'String'
|   | `-CXXRecord 0x5570a3b690d0 'String'
|   `-ParenType 0x5570a3b693c0 'int () const' sugar
|     `-FunctionProtoType 0x5570a3b3cf50 'int () const' const cdecl
|       `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3b69518 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5570a3991b50 'int64_t' sugar
|   |-Typedef 0x5570a38a52d0 'int64_t'
|   `-TypedefType 0x5570a387e540 '__int64_t' sugar
|     |-Typedef 0x5570a387e118 '__int64_t'
|     `-BuiltinType 0x5570a383c3e0 'long'
|-TypedefDecl 0x5570a3b69580 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5570a3991a70 'uint64_t' sugar
|   |-Typedef 0x5570a38a5470 'uint64_t'
|   `-TypedefType 0x5570a387e5d0 '__uint64_t' sugar
|     |-Typedef 0x5570a387e188 '__uint64_t'
|     `-BuiltinType 0x5570a383c480 'unsigned long'
|-TypedefDecl 0x5570a3b69610 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5570a3b695e0 'String::intmax_t' sugar
|   |-Typedef 0x5570a3b69518 'intmax_t'
|   `-TypedefType 0x5570a3991b50 'int64_t' sugar
|     |-Typedef 0x5570a38a52d0 'int64_t'
|     `-TypedefType 0x5570a387e540 '__int64_t' sugar
|       |-Typedef 0x5570a387e118 '__int64_t'
|       `-BuiltinType 0x5570a383c3e0 'long'
|-TypedefDecl 0x5570a3b696a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5570a3b69670 'String::uintmax_t' sugar
|   |-Typedef 0x5570a3b69580 'uintmax_t'
|   `-TypedefType 0x5570a3991a70 'uint64_t' sugar
|     |-Typedef 0x5570a38a5470 'uint64_t'
|     `-TypedefType 0x5570a387e5d0 '__uint64_t' sugar
|       |-Typedef 0x5570a387e188 '__uint64_t'
|       `-BuiltinType 0x5570a383c480 'unsigned long'
|-CXXConstructorDecl 0x5570a3b69760 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5570a3b69908 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5570a3b69848 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5570a3b69ab8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5570a3b699f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5570a3b69c10 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5570a3b69b80 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5570a3b69e28 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5570a3b69cd8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5570a3b69d58 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5570a3b6a048 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5570a3b69ef8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5570a3b69f78 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5570a3b6a268 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5570a3b6a118 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5570a3b6a198 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5570a3b6a488 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5570a3b6a338 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5570a3b6a3b8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5570a3b6a618 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5570a3b6a550 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5570a3b6a798 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5570a3b6a6d8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5570a3b6a928 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5570a3b6a860 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5570a3b6aa80 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5570a3b6a9f0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5570a3b6abd8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5570a3b6ab48 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5570a3b6ad30 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5570a3b6aca0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5570a3b6aeb8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5570a3b6adf8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5570a3b6b048 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5570a3b6af80 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5570a3b6b1d8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5570a3b6b110 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5570a3b6b368 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5570a3b6b2a0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5570a3b6b460 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5570a3b6b588 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5570a3b6b708 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5570a3b6b640 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5570a3b6b858 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5570a3b6b7c8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5570a3b6b910 <col:63> "" ""
|-CXXMethodDecl 0x5570a3b6ba58 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5570a3b6b998 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5570a3b6bc68 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5570a3b6bb18 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5570a3b6bb98 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5570a3b6be88 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5570a3b6bd30 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5570a3b6bdb0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5570a3b6c168 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5570a3b6bf48 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5570a3b6bfc8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5570a3b77fb0 <col:55> 'int' 10
| `-ParmVarDecl 0x5570a3b6c040 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5570a3b77fd0 <col:76> 'bool' true
|-CXXMethodDecl 0x5570a3b6c448 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5570a3b6c230 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5570a3b6c2b0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5570a3b77fe0 <col:56> 'int' 10
| `-ParmVarDecl 0x5570a3b6c328 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5570a3b78000 <col:77> 'bool' true
|-CXXMethodDecl 0x5570a3b6c550 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5570a3b6c618 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5570a3b6c6e0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5570a3b6c780 <col:20>
| `-OptimizeNoneAttr 0x5570a3b6c7d8 <col:30>
|-CXXConversionDecl 0x5570a3b6c8c8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5570a3b6c998 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5570a3b6ca58 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5570a3b6cb48 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5570a3b6cc08 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5570a3b6cd88 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5570a3b6ccc0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5570a3b6ced8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5570a3b6ce48 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5570a3b6cfc8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5570a3b6d088 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5570a3b6d2d8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5570a3b6d140 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5570a3b6d1c0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5570a3b6d538 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5570a3b6d3a0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5570a3b6d420 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5570a3b6d608 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3b6d818 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5570a3b6d6c0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5570a3b6d740 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5570a3b6da38 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5570a3b6d8e0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5570a3b6d960 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5570a3b6dbc8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5570a3b6db00 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5570a3b6dcb8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5570a3b6de28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5570a3b6dd68 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5570a3b6e038 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5570a3b6dee8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5570a3b6df68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5570a3b6e250 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5570a3b6e0f8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5570a3b6e170 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5570a3b6e3e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5570a3b6e310 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5570a3b6e600 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5570a3b6e4a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5570a3b6e520 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5570a3b6e750 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5570a3b6e6c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5570a3b6e928 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5570a3b6e810 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5570a3b6e890 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5570a3b6ea78 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5570a3b6e9e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5570a3b6ec90 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5570a3b6eb30 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5570a3b6ebb0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5570a3b78010 <col:39> 'int' 0
|-CXXMethodDecl 0x5570a3b6eeb0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5570a3b6ed50 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5570a3b6edd0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5570a3b78030 <col:48> 'int' 0
|-CXXMethodDecl 0x5570a3b6f090 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5570a3b6ef70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5570a3b6eff0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5570a3b78050 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5570a3b6f160 <line:129:5, col:20> col:12 used lower 'String () const'
|-CXXMethodDecl 0x5570a3b6f220 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5570a3b6f2e0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5570a3b6f3a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5570a3b6f460 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5570a3b6f608 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5570a3b6f510 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5570a3b6f788 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5570a3b6f6c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5570a3b6f960 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5570a3b6f848 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5570a3b6fad8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5570a3b6fa18 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5570a3b6fc20 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5570a3b6fb90 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5570a3b6fd70 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5570a3b6fce0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5570a3b6ff48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5570a3b6fe30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5570a3b6feb0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5570a3b70128 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5570a3b70010 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5570a3b70090 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5570a3b70278 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5570a3b701e8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5570a3b70488 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5570a3b70338 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5570a3b703b8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5570a3b705e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5570a3b70550 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5570a3b70740 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5570a3b706a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5570a3b707e8 <col:57> "" ""
|-CXXMethodDecl 0x5570a3b708f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5570a3b70868 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5570a3b70a48 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5570a3b709b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5570a3b70bc8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5570a3b70b00 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5570a3b70c90 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5570a3b70d50 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5570a3b70e10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5570a3b70eb0 <col:49> "" ""
|-CXXMethodDecl 0x5570a3b70f40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5570a3b71000 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5570a3b710f0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5570a3b711b8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5570a3b71278 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5570a3b71338 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5570a3b71430 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5570a3b714f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5570a3b715c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5570a3b71798 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5570a3b71678 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5570a3b716f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5570a3b719c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5570a3b71860 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5570a3b718e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5570a3b71ad0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5570a3b71b38 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5570a3b71b60 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5570a3b71c78 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5570a3b71d18 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5570a3b71d78 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5570a3b71dd8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5570a3b71e88 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5570a3b71ef0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5570a3b72128 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5570a3b72178 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3b72108 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5570a3b72018 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5570a3b71fc0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5570a3b72000 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5570a3b71fe0 <col:32> 'int' 8
|-CXXRecordDecl 0x5570a3b72190 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5570a3b722a8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5570a3b72350 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5570a3b723b8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5570a3b72448 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5570a3b784e0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5570a3b78918 <col:12>
| |-CXXConstructorDecl 0x5570a3b785e8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5570a3b786f8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5570a3b72350 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5570a3b7aea0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5570a3b7ae70 <col:12> 'const char *const' lvalue .data 0x5570a3b72350
| | |     `-DeclRefExpr 0x5570a3b7ae50 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5570a3b723b8 'length' 'int'
| | | `-ImplicitCastExpr 0x5570a3b7af30 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5570a3b7af00 <col:12> 'const int' lvalue .length 0x5570a3b723b8
| | |     `-DeclRefExpr 0x5570a3b7aee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5570a3b72448 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5570a3b7afc0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5570a3b7af90 <col:12> 'String::memo_t *const' lvalue .memo 0x5570a3b72448
| | |     `-DeclRefExpr 0x5570a3b7af70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b786f8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5570a3b7b018 <col:12>
| |-CXXConstructorDecl 0x5570a3b78798 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b78798
| | `-ParmVarDecl 0x5570a3b788a8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5570a3b7de00 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5570a3b89818 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5570a3b89928 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5570a3b89e40 <col:12>
| |   |-BinaryOperator 0x5570a3b89c58 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5570a3b89c10 <col:12> 'const char *' lvalue ->data 0x5570a3b72350
| |   | | `-CXXThisExpr 0x5570a3b89c00 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5570a3b89c40 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5570a3b89bd0 <col:12> 'const char *const' lvalue .data 0x5570a3b72350
| |   |     `-DeclRefExpr 0x5570a3b89bb0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5570a3b89d20 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5570a3b89cd8 <col:12> 'int' lvalue ->length 0x5570a3b723b8
| |   | | `-CXXThisExpr 0x5570a3b89cc8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5570a3b89d08 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5570a3b89c98 <col:12> 'const int' lvalue .length 0x5570a3b723b8
| |   |     `-DeclRefExpr 0x5570a3b89c78 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5570a3b89de8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5570a3b89da0 <col:12> 'String::memo_t *' lvalue ->memo 0x5570a3b72448
| |   | | `-CXXThisExpr 0x5570a3b89d90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5570a3b89dd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5570a3b89d60 <col:12> 'String::memo_t *const' lvalue .memo 0x5570a3b72448
| |   |     `-DeclRefExpr 0x5570a3b89d40 <col:12> 'const String::rep_t' lvalue ParmVar 0x5570a3b89928 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5570a3b89e30 <col:12>
| |     `-UnaryOperator 0x5570a3b89e18 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5570a3b89e08 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5570a3b89998 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b89998
|   `-ParmVarDecl 0x5570a3b89aa8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5570a3b724c0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5570a3b72708 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5570a3b72528 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5570a3b725a8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5570a3b72620 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5570a3b784a0 <col:79, line:261:5>
|   |-BinaryOperator 0x5570a3b78118 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5570a3b780b0 <col:2, col:5> 'const char *' lvalue .data 0x5570a3b72350
|   | | `-MemberExpr 0x5570a3b78080 <col:2> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|   | |   `-CXXThisExpr 0x5570a3b78070 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5570a3b78100 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5570a3b780e0 <col:12> 'const char *' lvalue ParmVar 0x5570a3b72528 'data' 'const char *'
|   |-BinaryOperator 0x5570a3b781e0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5570a3b78178 <col:2, col:5> 'int' lvalue .length 0x5570a3b723b8
|   | | `-MemberExpr 0x5570a3b78148 <col:2> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|   | |   `-CXXThisExpr 0x5570a3b78138 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5570a3b781c8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5570a3b781a8 <col:14> 'int' lvalue ParmVar 0x5570a3b725a8 'length' 'int'
|   `-IfStmt 0x5570a3b78488 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5570a3b78300 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5570a3b782e8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5570a3b782c8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5570a3b782a8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5570a3b78240 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|     |       | `-MemberExpr 0x5570a3b78210 <col:7> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|     |       |   `-CXXThisExpr 0x5570a3b78200 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5570a3b78290 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5570a3b78270 <col:17> 'String::memo_t *' lvalue ParmVar 0x5570a3b72620 'memo' 'String::memo_t *'
|     `-CallExpr 0x5570a3b78460 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5570a3b78448 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5570a3b78350 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5570a3b61138 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5570a3b783b8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5570a3b71d18
|         `-ImplicitCastExpr 0x5570a3b783a0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5570a3b78380 <col:27> 'String::memo_t *' lvalue ParmVar 0x5570a3b72620 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5570a3b729b8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5570a3b727d8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5570a3b72858 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5570a3b728d0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5570a3b724c0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5570a3b78928 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5570a3b78ab8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5570a3b78a20 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5570a3b78990 <col:2> '<bound member function type>' ->assign_memo 0x5570a3b72708
|     | `-ImplicitCastExpr 0x5570a3b78a58 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5570a3b78980 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5570a3b78a70 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5570a3b789c0 <col:14> 'const char *' lvalue ParmVar 0x5570a3b727d8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5570a3b78a88 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5570a3b789e0 <col:20> 'int' lvalue ParmVar 0x5570a3b72858 'length' 'int'
|     `-ImplicitCastExpr 0x5570a3b78aa0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3b78a00 <col:28> 'String::memo_t *' lvalue ParmVar 0x5570a3b728d0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5570a3b72b48 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5570a3b72a88 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5570a3b78d10 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5570a3b78c90 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5570a3b78ae0 <col:2> '<bound member function type>' ->assign_memo 0x5570a3b72708
|     | `-CXXThisExpr 0x5570a3b78ad0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5570a3b78cc8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5570a3b78b60 <col:14, col:19> 'const char *' lvalue .data 0x5570a3b72350
|     |   `-MemberExpr 0x5570a3b78b30 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5570a3b724c0
|     |     `-DeclRefExpr 0x5570a3b78b10 <col:14> 'const String' lvalue ParmVar 0x5570a3b72a88 'x' 'const String &'
|     |-ImplicitCastExpr 0x5570a3b78ce0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5570a3b78be0 <col:25, col:30> 'int' lvalue .length 0x5570a3b723b8
|     |   `-MemberExpr 0x5570a3b78bb0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5570a3b724c0
|     |     `-DeclRefExpr 0x5570a3b78b90 <col:25> 'const String' lvalue ParmVar 0x5570a3b72a88 'x' 'const String &'
|     `-ImplicitCastExpr 0x5570a3b78cf8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5570a3b78c60 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|         `-MemberExpr 0x5570a3b78c30 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5570a3b724c0
|           `-DeclRefExpr 0x5570a3b78c10 <col:38> 'const String' lvalue ParmVar 0x5570a3b72a88 'x' 'const String &'
|-CXXMethodDecl 0x5570a3b72c10 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5570a3b796d0 <col:31, line:278:5>
|   `-IfStmt 0x5570a3b796b8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5570a3b78db0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5570a3b78d98 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5570a3b78d68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|     |     `-MemberExpr 0x5570a3b78d38 <col:6> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|     |       `-CXXThisExpr 0x5570a3b78d28 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5570a3b79690 <col:15, line:277:2>
|       |-ParenExpr 0x5570a3b79260 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5570a3b79230 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5570a3b78ec0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5570a3b78ea8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5570a3b78e90 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5570a3b78e50 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5570a3b71d18
|       |   |       `-ImplicitCastExpr 0x5570a3b78e38 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5570a3b78e08 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|       |   |           `-MemberExpr 0x5570a3b78dd8 <col:27> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|       |   |             `-CXXThisExpr 0x5570a3b78dc8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5570a3b78f20 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5570a3b78f00 <col:54> 'int' 0
|       |   `-CallExpr 0x5570a3b79190 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5570a3b79178 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5570a3b790f8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5570a3b791d0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5570a3b79008 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5570a3b791e8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5570a3b79038 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5570a3b79200 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5570a3b79070 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5570a3b79218 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5570a3b790e0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5570a3b790c8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5570a3b79090 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5570a3b795b0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5570a3b79470 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5570a3b79458 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5570a3b793d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5570a3b62580 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5570a3b793a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5570a3b71d18
|       | |   `-ImplicitCastExpr 0x5570a3b79388 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5570a3b79358 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|       | |       `-MemberExpr 0x5570a3b79328 <col:40> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|       | |         `-CXXThisExpr 0x5570a3b79318 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5570a3b79570 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5570a3b79558 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5570a3b79498 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5570a3b773f0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5570a3b79598 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5570a3b794f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|       |       `-MemberExpr 0x5570a3b794c8 <col:15> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|       |         `-CXXThisExpr 0x5570a3b794b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5570a3b79670 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5570a3b79608 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5570a3b72448
|         | `-MemberExpr 0x5570a3b795d8 <col:6> 'String::rep_t' lvalue ->_r 0x5570a3b724c0
|         |   `-CXXThisExpr 0x5570a3b795c8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5570a3b79658 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5570a3b79638 <col:16> 'int' 0
|-CXXMethodDecl 0x5570a3b72ea8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5570a3b72cc8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5570a3b72d48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5570a3b72dc0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5570a3b72f80 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5570a3b731d0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5570a3b73038 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5570a3b730b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5570a3b73130 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5570a3b733b8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5570a3b732a0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5570a3b73320 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5570a3b734b8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5570a3b797a8 <col:41, line:286:5>
|   `-ReturnStmt 0x5570a3b79798 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5570a3b79768 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5570a3b79730 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5570a3b79718 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5570a3b796f8 <col:46> 'int' 1
|-CXXMethodDecl 0x5570a3b73758 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5570a3b73570 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5570a3b735f0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5570a3b73670 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5570a3b773f0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5570a3b73820 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5570a3b774c0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5570a3b77690 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5570a3b77578 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5570a3b775f8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5570a3b77750 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5570a3b77818 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5570a3b77918 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5570a3b77990 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5570a3b77a08 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5570a3b77a70 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5570a3b77b70 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5570a3b77bc0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3b77b50 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5570a3b77b30 <col:22> 'int' 14
|-CXXMethodDecl 0x5570a3b77dd8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5570a3b77bf0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5570a3b77c70 <col:38> col:41 'int'
| `-ParmVarDecl 0x5570a3b77cf0 <col:43> col:46 'int'
|-FriendDecl 0x5570a3b77ee0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5570a3b77f70 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3df83e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5570a3df85b8 prev 0x5570a3df83e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5570a3df8648 <col:46, col:52> col:46 public
|-TypedefDecl 0x5570a3df8670 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3df9fd0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5570a3df9f80 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5570a3df9f60 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5570a3df8888 'type'
|     `-SubstTemplateTypeParmType 0x5570a3df8850 'String' sugar
|       |-TemplateTypeParmType 0x5570a3b2c970 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b2c920 'T'
|       `-RecordType 0x5570a3b69160 'String'
|         `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfa088 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5570a3dfa050 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5570a3dfa030 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5570a3df9fd0 'type'
|     `-ElaboratedType 0x5570a3df9f80 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5570a3df9f60 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5570a3df8888 'type'
|         `-SubstTemplateTypeParmType 0x5570a3df8850 'String' sugar
|           |-TemplateTypeParmType 0x5570a3b2c970 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5570a3b2c920 'T'
|           `-RecordType 0x5570a3b69160 'String'
|             `-CXXRecord 0x5570a3b690d0 'String'
|-CXXMethodDecl 0x5570a3dfa208 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5570a3dfa118 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5570a3dfa2f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5570a3dfa3d8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5570a3dfa3d8
|-CXXMethodDecl 0x5570a3dfa6a8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5570a3dfa5b0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5570a3dfa8e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5570a3dfa760 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3dfa7d8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfaab8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5570a3dfa9a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3dfaa20 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfac18 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5570a3dface8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5570a3dfaf38 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5570a3dfada8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5570a3dfae20 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfb1c0 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5570a3dfb008 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5570a3dfb080 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfb388 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5570a3dfb290 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfb548 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5570a3dfb450 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfb600 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5570a3dfb6b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5570a3dfb8e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5570a3dfb760 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3dfb7d8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5570a3dfbb88 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5570a3dfba90 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5570a3dfbc50 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5570a3dfbca0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5570a3dfbcf0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3da0900 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5570a3df6e48 prev 0x5570a3da0900 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5570a3df8350 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5570a3df8300 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5570a3df82e0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5570a3df8190 'type'
|     `-SubstTemplateTypeParmType 0x5570a3df8020 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5570a3b02720 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5570a3b026c8 'F'
|       `-RecordType 0x5570a3df7c80 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5570a3df7ba0 'typed_array_memory'
|-FieldDecl 0x5570a3dfbd40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5570a3dfbd90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5570a3dfbdc8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|   |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5570a3b39c38 'T'
|   `-RecordType 0x5570a3b69160 'String'
|     `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfbe58 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5570a3dfbe20 'String &'
|   `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-RecordType 0x5570a3b69160 'String'
|       `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfbee8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5570a3dfbeb0 'const String &'
|   `-QualType 0x5570a3df6ee1 'const String' const
|     `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-RecordType 0x5570a3b69160 'String'
|         `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfbf78 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5570a3dfbf40 'String *'
|   `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-RecordType 0x5570a3b69160 'String'
|       `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfc008 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5570a3dfbfd0 'const String *'
|   `-QualType 0x5570a3df6ee1 'const String' const
|     `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-RecordType 0x5570a3b69160 'String'
|         `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfcc60 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5570a3dfcc10 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5570a3dfcbf0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5570a3dfcb28 'type'
|     `-LValueReferenceType 0x5570a3dfcaf0 'const String &'
|       `-QualType 0x5570a3dfc891 'const String' const
|         `-SubstTemplateTypeParmType 0x5570a3dfc890 'String' sugar
|           |-TemplateTypeParmType 0x5570a3b0c670 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5570a3b0c618 'T'
|           `-RecordType 0x5570a3b69160 'String'
|             `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfccc8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5570a3dfbeb0 'const String &'
|   `-QualType 0x5570a3df6ee1 'const String' const
|     `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-RecordType 0x5570a3b69160 'String'
|         `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfcd20 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3dfcd88 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5570a3dfbf40 'String *'
|   `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-RecordType 0x5570a3b69160 'String'
|       `-CXXRecord 0x5570a3b690d0 'String'
|-TypedefDecl 0x5570a3dfcdf0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5570a3dfbfd0 'const String *'
|   `-QualType 0x5570a3df6ee1 'const String' const
|     `-SubstTemplateTypeParmType 0x5570a3df6ee0 'String' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-RecordType 0x5570a3b69160 'String'
|         `-CXXRecord 0x5570a3b690d0 'String'
|-EnumDecl 0x5570a3dfce48 <line:134:5> col:5
| `-EnumConstantDecl 0x5570a3dfcf40 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5570a3dfcf20 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5570a3b3b318 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5570a3b3b2f0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5570a3b3b2d0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5570a3dfcfc8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5570a3dfd258 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3dfd080 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3dfd120 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5570a3dfd4e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5570a3dfd3d0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5570a3dfd7a8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5570a3dfd690 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5570a3dfdac0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5570a3dfd9a0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5570a3dfddd0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5570a3dfdcb0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5570a3dfe0c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3dfdf08 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3dfdf80 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5570a3dfe1e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5570a3dfe298 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfe2f0 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfe338 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5570a3dfe3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfe440 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfe508 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5570a3dfe5b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfe610 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfe658 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5570a3dfe708 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfe760 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfe7a8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5570a3dfe858 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfe8b0 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfe8f8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5570a3dfe9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3dfea00 <col:30> Inherited
|-CXXMethodDecl 0x5570a3dfea28 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5570a3dfead8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5570a3dfeb88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5570a3dfed48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3dfec38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3dfecb0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5570a3dfee98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3dfee08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3dff048 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5570a3dfef50 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5570a3dff100 <col:20>
| `-OptimizeNoneAttr 0x5570a3dff158 <col:30>
|-CXXMethodDecl 0x5570a3dff278 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5570a3dff180 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5570a3dff330 <col:20>
| `-OptimizeNoneAttr 0x5570a3dff388 <col:30>
|-CXXMethodDecl 0x5570a3dff440 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3dff3b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3dff588 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5570a3dff4f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3dff6b8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5570a3dff7b8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5570a3dff888 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5570a3dff958 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5570a3dffa98 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3dffa08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3dffbe0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5570a3dffb50 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3dffd28 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5570a3dffc98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5570a3dffde0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5570a3dffee0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5570a3dffe50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5570a3dfff98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5570a3e00058 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5570a3e00158 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5570a3e002d8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5570a3e00218 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5570a3e00a98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5570a3e00390 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5570a3e009f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5570a3e008f8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5570a3e00b78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5570a3e00cc8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5570a3e00c38 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5570a3e00d80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5570a3e00fc8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3e00e40 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5570a3e00eb8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5570a3e01158 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5570a3e01098 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5570a3e01368 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5570a3e01220 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5570a3e01298 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5570a3e01428 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5570a3e01688 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5570a3e01590 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5570a3e01758 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5570a3e01758

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e78f88 prev 0x5570a3e0c2e8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5570a3e79080 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5570a3e79110 <col:22, col:28> col:22 public
|-EnumDecl 0x5570a3e79138 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5570a3e79258 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79238 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5570a3e79220 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5570a3e79200 <col:14> 'int' 999
| |-EnumConstantDecl 0x5570a3e79300 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e792e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5570a3e792c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5570a3e792a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5570a3e79390 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79370 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5570a3e79350 <col:17> 'int' 0
| |-EnumConstantDecl 0x5570a3e79420 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79400 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5570a3e793e0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5570a3e794b0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79490 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5570a3e79470 <col:16> 'int' 2
| |-EnumConstantDecl 0x5570a3e79540 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79520 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5570a3e79500 <col:13> 'int' 3
| |-EnumConstantDecl 0x5570a3e795d0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e795b0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5570a3e79590 <col:15> 'int' 4
| |-EnumConstantDecl 0x5570a3e79660 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e79640 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5570a3e79620 <col:14> 'int' 5
| |-EnumConstantDecl 0x5570a3e796f0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5570a3e796d0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5570a3e796b0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5570a3e79780 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5570a3e79760 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5570a3e79740 <col:13> 'int' 7
|-VarDecl 0x5570a3e797f0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5570a3e79878 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5570a3e79900 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5570a3e79988 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5570a3e79a10 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5570a3e79a98 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5570a3e79b20 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5570a3e79ba8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5570a3e79c30 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5570a3e79cb8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5570a3e79d40 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5570a3e79e40 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5570a3e7f178 '_nerrors' 'int'
| | `-IntegerLiteral 0x5570a3e7f908 <line:128:13> 'int' 0
| `-CompoundStmt 0x5570a3e7f978 <col:16, line:129:5>
|-CXXDestructorDecl 0x5570a3e79f30 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5570a3e7f988 <col:29, line:132:5>
|-CXXMethodDecl 0x5570a3e7a0e8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5570a3e7a020 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3e7a1b0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5570a3e7a298 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5570a3e7f9e0 <col:44, line:161:5>
|   `-ReturnStmt 0x5570a3e7f9d0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5570a3e7f9b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3e7f998 <col:9> 'ErrorHandler *' lvalue Var 0x5570a3e7f1d8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3e7a3d8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5570a3e7a348 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5570a3e7a4a0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5570a3e7fa40 <col:43, line:173:5>
|   `-ReturnStmt 0x5570a3e7fa30 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5570a3e7fa18 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3e7f9f8 <col:9> 'ErrorHandler *' lvalue Var 0x5570a3e7f250 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5570a3e7a558 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5570a3e7a5d8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5570a3e7a6e8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7a658 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7a838 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7a7a8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7a990 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7a8f8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7aae8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7aa50 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7ac40 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7aba8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7ae50 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5570a3e7acf8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7ad78 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7b028 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5570a3e7af10 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7af90 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7b248 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5570a3e7b0e8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7b168 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7b428 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5570a3e7b308 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7b388 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7b608 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5570a3e7b4e8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7b568 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7b790 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5570a3e7b6c8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5570a3e7b960 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5570a3e7b848 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5570a3e7b8c0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5570a3e7fc98 <col:57, line:234:5>
|   `-ReturnStmt 0x5570a3e7fc88 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5570a3e7fc70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5570a3e7fc18 <col:9, col:41> 'int'
|         |-MemberExpr 0x5570a3e7fbe8 <col:9> '<bound member function type>' ->xmessage 0x5570a3e7b790
|         | `-CXXThisExpr 0x5570a3e7fbd8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5570a3e7fc58 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5570a3e7fc40 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5570a3e7fbb8 <col:18, col:40> 'String' (CXXTemporary 0x5570a3e7fbb8)
|               `-CallExpr 0x5570a3e7fb80 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5570a3e7fb68 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5570a3e7fae0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5570a3e7d958 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5570a3e7fb00 <col:31> 'const String' lvalue ParmVar 0x5570a3e7b8c0 'str' 'const String &'
|                 `-DeclRefExpr 0x5570a3e7fb20 <col:36> 'const String' lvalue ParmVar 0x5570a3e7b848 'anno' 'const String &'
|-CXXMethodDecl 0x5570a3e7bc40 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5570a3e7ba20 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5570a3e7baa0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5570a3e7bb18 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5570a3e7ff28 <col:68, line:243:5>
|   `-ReturnStmt 0x5570a3e7ff18 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5570a3e7ff00 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5570a3e7fea0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5570a3e7fe70 <col:9> '<bound member function type>' ->xmessage 0x5570a3e7b960
|         | `-CXXThisExpr 0x5570a3e7fe60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5570a3e7fd38 <col:18> 'const String' lvalue ParmVar 0x5570a3e7ba20 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5570a3e7fee8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5570a3e7fed0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5570a3e7fe40 <col:24, col:40> 'String' (CXXTemporary 0x5570a3e7fe40)
|               `-CXXMemberCallExpr 0x5570a3e7fdd8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5570a3e7fd68 <col:24> '<bound member function type>' ->vformat 0x5570a3e7ce20
|                 | `-CXXThisExpr 0x5570a3e7fd58 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5570a3e7fe08 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5570a3e7fd98 <col:32> 'const char *' lvalue ParmVar 0x5570a3e7baa0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5570a3e7fe20 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5570a3e7fdb8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5570a3e7bb18 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5570a3e7bee0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5570a3e7bd08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5570a3e7bd80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5570a3e7bdf8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5570a3e80268 <col:23, line:254:5>
|   `-ReturnStmt 0x5570a3e80258 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5570a3e80240 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5570a3e801e0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5570a3e801b0 <col:9> '<bound member function type>' ->xmessage 0x5570a3e7b960
|         | `-CXXThisExpr 0x5570a3e801a0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5570a3e80228 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5570a3e80210 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5570a3e80160 <col:18, col:65> 'String' (CXXTemporary 0x5570a3e80160)
|         |     `-CallExpr 0x5570a3e800f8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5570a3e800e0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5570a3e7ffc8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5570a3e7d958 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5570a3e7ffe8 <col:31> 'const String' lvalue ParmVar 0x5570a3e7bd80 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5570a3e80140 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5570a3e80128 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5570a3e800c0 <col:37, col:64> 'String' (CXXTemporary 0x5570a3e800c0)
|         |             `-CallExpr 0x5570a3e80090 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5570a3e80078 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5570a3e80008 <col:37> 'String (const String &)' lvalue CXXMethod 0x5570a3e7dfa8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5570a3e80028 <col:56> 'const String' lvalue ParmVar 0x5570a3e7bd08 'landmark' 'const String &'
|         `-DeclRefExpr 0x5570a3e80180 <col:68> 'const String' lvalue ParmVar 0x5570a3e7bdf8 'str' 'const String &'
|-CXXMethodDecl 0x5570a3e7c260 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5570a3e7bfa8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5570a3e7c020 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5570a3e7c0a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5570a3e7c118 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5570a3e80520 <col:34, line:267:5>
|   `-ReturnStmt 0x5570a3e80510 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5570a3e804f8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5570a3e80490 <col:9, col:51> 'int'
|         |-MemberExpr 0x5570a3e80460 <col:9> '<bound member function type>' ->xmessage 0x5570a3e7bee0
|         | `-CXXThisExpr 0x5570a3e80450 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5570a3e80308 <col:18> 'const String' lvalue ParmVar 0x5570a3e7bfa8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5570a3e80328 <col:28> 'const String' lvalue ParmVar 0x5570a3e7c020 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5570a3e804e0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5570a3e804c8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5570a3e80430 <col:34, col:50> 'String' (CXXTemporary 0x5570a3e80430)
|               `-CXXMemberCallExpr 0x5570a3e803c8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5570a3e80358 <col:34> '<bound member function type>' ->vformat 0x5570a3e7ce20
|                 | `-CXXThisExpr 0x5570a3e80348 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5570a3e803f8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5570a3e80388 <col:42> 'const char *' lvalue ParmVar 0x5570a3e7c0a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5570a3e80410 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5570a3e803a8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5570a3e7c118 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5570a3e7c370 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5570a3e805a0 <col:25, line:288:5>
|   `-ReturnStmt 0x5570a3e80590 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5570a3e80578 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5570a3e80548 <col:9> 'const int' lvalue ->_nerrors 0x5570a3e7f178
|         `-CXXThisExpr 0x5570a3e80538 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5570a3e7c580 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5570a3e7c428 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5570a3e7c4a8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7c868 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5570a3e7c648 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5570a3e7c6c8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5570a3e7c740 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5570a3e7ca00 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5570a3e7c938 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7cc48 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5570a3e7cac0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5570a3e7cb38 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5570a3e80800 <col:58, line:357:5>
|   `-ReturnStmt 0x5570a3e807f0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5570a3e807d8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5570a3e807a8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5570a3e80790 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5570a3e80770 <col:9, col:29> 'String' (CXXTemporary 0x5570a3e80770)
|             `-CallExpr 0x5570a3e80700 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5570a3e806e8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5570a3e80668 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5570a3e7c868 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5570a3e80608 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5570a3e80738 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5570a3e80628 <col:21> 'const char *' lvalue ParmVar 0x5570a3e7cac0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5570a3e80750 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5570a3e80648 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5570a3e7cb38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5570a3e7ce20 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5570a3e7cd10 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5570a3e7cd88 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5570a3e7cf78 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5570a3e7cee8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e7d0c0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5570a3e7d030 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5570a3e7d360 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5570a3e7d178 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5570a3e7d1f8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5570a3e7d270 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5570a3e7d4c0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5570a3e7d430 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5570a3e80918 <col:37, line:441:5>
|   `-IfStmt 0x5570a3e80900 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5570a3e80888 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5570a3e80858 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5570a3e80818 <col:6> 'int' lvalue ParmVar 0x5570a3e7d430 'level' 'int'
|     | `-ImplicitCastExpr 0x5570a3e80870 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5570a3e80838 <col:15> 'ErrorHandler::Level' EnumConstant 0x5570a3e79540 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5570a3e808e8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5570a3e808b8 <col:8> 'int' lvalue ->_nerrors 0x5570a3e7f178
|         `-CXXThisExpr 0x5570a3e808a8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5570a3e7d588 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5570a3e809b0 <col:26, line:448:5>
|   `-BinaryOperator 0x5570a3e80990 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5570a3e80940 <col:2> 'int' lvalue ->_nerrors 0x5570a3e7f178
|     | `-CXXThisExpr 0x5570a3e80930 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5570a3e80970 <col:13> 'int' 0
|-CXXMethodDecl 0x5570a3e7d750 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5570a3e7d640 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5570a3e7d6b8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5570a3e7d958 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5570a3e7d810 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5570a3e7d888 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5570a3e7dc08 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5570a3e7da18 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5570a3e7da98 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5570a3e7db18 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5570a3e7dcc0 <col:59> 0 0
|-CXXMethodDecl 0x5570a3e7de58 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5570a3e7dd38 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5570a3e7ddb8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5570a3e81020 <col:70, line:534:5>
|   |-DeclStmt 0x5570a3e80b20 <line:528:2, col:20>
|   | |-VarDecl 0x5570a3e809d8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5570a3e80a40 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5570a3e80a78 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5570a3e80ae0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5570a3e80bf0 <line:529:2, col:23>
|   | `-VarDecl 0x5570a3e80b50 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5570a3e80bd8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5570a3e80bb8 <col:18> 'const char *' lvalue ParmVar 0x5570a3e7dd38 'begin' 'const char *'
|   |-DoStmt 0x5570a3e80fb8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5570a3e80ee8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5570a3e80ed0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5570a3e80eb0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5570a3e80c08 <col:6> 'const char *' lvalue Var 0x5570a3e80b50 'x' 'const char *'
|   | |     `-CallExpr 0x5570a3e80e00 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5570a3e80de8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5570a3e80da0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5570a3e7f650 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5570a3e80e68 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5570a3e80e50 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5570a3e80cc0 <col:20, col:27> 'String' (CXXTemporary 0x5570a3e80cc0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5570a3e80c88 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5570a3e80e80 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5570a3e80ce0 <col:30> 'const char *' lvalue Var 0x5570a3e80b50 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5570a3e80e98 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5570a3e80d00 <col:33> 'const char *' lvalue ParmVar 0x5570a3e7ddb8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5570a3e80d40 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5570a3e80d20 <col:39> 'String' lvalue Var 0x5570a3e809d8 'name' 'String'
|   | |       |-UnaryOperator 0x5570a3e80d78 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5570a3e80d58 <col:46> 'String' lvalue Var 0x5570a3e80a78 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5570a3e80d90 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5570a3e80fa0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5570a3e80f88 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5570a3e80f68 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5570a3e80f38 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|   |         `-ImplicitCastExpr 0x5570a3e80f20 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5570a3e80f00 <col:11> 'String' lvalue Var 0x5570a3e809d8 'name' 'String'
|   `-ReturnStmt 0x5570a3e81010 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5570a3e80ff8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3e80fd8 <col:9> 'const char *' lvalue Var 0x5570a3e80b50 'x' 'const char *'
|-CXXMethodDecl 0x5570a3e7dfa8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5570a3e7df18 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5570a3e81628 <col:55, line:550:5>
|   `-IfStmt 0x5570a3e81600 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5570a3e81260 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5570a3e81248 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5570a3e81230 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5570a3e81210 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5570a3e811e0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|     | |       `-DeclRefExpr 0x5570a3e81080 <col:6> 'const String' lvalue ParmVar 0x5570a3e7df18 'x' 'const String &'
|     | `-BinaryOperator 0x5570a3e811c0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5570a3e81190 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5570a3e81140 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5570a3e81128 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5570a3e810e0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5570a3b86100 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5570a3e810a0 <col:11> 'const String' lvalue ParmVar 0x5570a3e7df18 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5570a3e810c0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5570a3e811a8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5570a3e81178 <col:19> 'char' 123
|     |-ReturnStmt 0x5570a3e812d0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5570a3e812a0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5570a3e81280 <col:13> 'const String' lvalue ParmVar 0x5570a3e7df18 'x' 'const String &'
|     `-IfStmt 0x5570a3e815d8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5570a3e81368 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5570a3e81350 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5570a3e81330 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5570a3e81300 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |       `-DeclRefExpr 0x5570a3e812e0 <col:11> 'const String' lvalue ParmVar 0x5570a3e7df18 'x' 'const String &'
|       |-ReturnStmt 0x5570a3e814f0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5570a3e814d8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5570a3e814a8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5570a3e81490 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5570a3e81470 <col:13, col:29> 'String' (CXXTemporary 0x5570a3e81470)
|       |         `-CallExpr 0x5570a3e81420 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5570a3e81408 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5570a3e81380 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5570a3e7d750 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5570a3e81450 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5570a3e813a0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5570a3e813c0 <col:28> 'const String' lvalue ParmVar 0x5570a3e7df18 'x' 'const String &'
|       `-ReturnStmt 0x5570a3e815c8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5570a3e815b0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5570a3e81580 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5570a3e81568 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5570a3e81548 <col:13, col:20> 'String' (CXXTemporary 0x5570a3e81548)
|                 `-CXXTemporaryObjectExpr 0x5570a3e81510 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5570a3e7e170 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5570a3e7e060 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5570a3e7e0d8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5570a3e7f8f8 <col:71> 'bool' false
|-CXXRecordDecl 0x5570a3e7e220 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5570a3e7e518 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5570a3e7e4b0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5570a3e7e450 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5570a3e7e410 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5570a3b69160 'String'
|       | `-CXXRecord 0x5570a3b690d0 'String'
|       |-BuiltinType 0x5570a383c3c0 'int'
|       `-DecayedType 0x5570a3e0d330 '__va_list_tag *' sugar
|         |-TypedefType 0x5570a3e0d300 'va_list' sugar
|         | |-Typedef 0x5570a3a5a210 'va_list'
|         | `-TypedefType 0x5570a3a5a1c0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5570a3991e08 '__gnuc_va_list'
|         |   `-TypedefType 0x5570a3991d70 '__builtin_va_list' sugar
|         |     |-Typedef 0x5570a387dc48 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5570a387dbf0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5570a383d110 '__va_list_tag'
|         |         `-CXXRecord 0x5570a383d078 '__va_list_tag'
|         `-PointerType 0x5570a3a5fab0 '__va_list_tag *'
|           `-RecordType 0x5570a383d110 '__va_list_tag'
|             `-CXXRecord 0x5570a383d078 '__va_list_tag'
|-EnumDecl 0x5570a3e7e570 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5570a3e7e670 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ebd0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e650 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5570a3e7e630 <col:16> 'int' 1
| |-EnumConstantDecl 0x5570a3e7e700 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ebe8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e6e0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5570a3e7e6c0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5570a3e7e790 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec00 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e770 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5570a3e7e750 <col:22> 'int' 4
| |-EnumConstantDecl 0x5570a3e7e820 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec18 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e800 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5570a3e7e7e0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5570a3e7e8b0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec30 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e890 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5570a3e7e870 <col:22> 'int' 16
| |-EnumConstantDecl 0x5570a3e7e940 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec48 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e920 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5570a3e7e900 <col:19> 'int' 32
| |-EnumConstantDecl 0x5570a3e7e9d0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec60 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7e9b0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5570a3e7e990 <col:17> 'int' 64
| |-EnumConstantDecl 0x5570a3e7ea60 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7ea40 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5570a3e7ea20 <col:14> 'int' 128
| |-EnumConstantDecl 0x5570a3e7eaf0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5570a3e7ec90 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e7ead0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5570a3e7eab0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5570a3e7eb80 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5570a3e7eca8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3e7eb60 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5570a3e7eb40 <col:12> 'int' 1024
|-CXXMethodDecl 0x5570a3e7ef08 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5570a3e7ecd0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5570a3e7edc0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5570a3e7f090 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5570a3e7efc8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5570a3e7f138 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5570a3e7f178 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5570a3e7f1d8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5570a3e7f250 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5570a3e7f650 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5570a3e7f2c8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5570a3e7f348 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5570a3e7f3c8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5570a3e7f440 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5570a3e7f4b8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5570a3e7f530 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5570a3e7f778 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5570a3e7f778
| `-ParmVarDecl 0x5570a3e7f888 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5570a3e81988 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5570a3e81988
  `-ParmVarDecl 0x5570a3e81a98 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e0c378 prev 0x5570a3dbba48 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3e0c470 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5570a3e0c500 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5570a3e0c638 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5570a3e0c538 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5570a3e0da60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3e0da40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5570a3e0d5d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5570a3e0daf0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3e0dab0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5570a3e0c538 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5570a3e0d640 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5570a3e0db70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3e0db30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5570a3e0d6a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5570a3e0dbb0 <col:54> 'bool' false
| `-CompoundStmt 0x5570a3e0dcb8 <col:61, line:38:5>
|   `-BinaryOperator 0x5570a3e0dc98 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5570a3e0dc30 <col:9> 'const Element *' lvalue ->_context 0x5570a3e0d578
|     | `-CXXThisExpr 0x5570a3e0dc20 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5570a3e0dc80 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5570a3e0dc60 <col:20> 'int' 0
|-CXXConstructorDecl 0x5570a3e0c848 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3e0c6f8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5570a3e0c770 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5570a3e0da98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3e0da78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5570a3e0d578 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5570a3e0dd10 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3e0dcd0 <col:20> 'const Element *' lvalue ParmVar 0x5570a3e0c6f8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5570a3e0d5d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5570a3e0dd90 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3e0dd50 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5570a3e0c770 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5570a3e0d640 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5570a3e0de10 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5570a3e0ddd0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5570a3e0d6a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5570a3e0de50 <col:73> 'bool' false
| `-CompoundStmt 0x5570a3e0dec8 <col:80, line:46:5>
|-CXXMethodDecl 0x5570a3e0c978 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5570a3e0df40 <col:36, line:51:5>
|   `-ReturnStmt 0x5570a3e0df30 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5570a3e0df18 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5570a3e0dee8 <col:16> 'const Element *const' lvalue ->_context 0x5570a3e0d578
|         `-CXXThisExpr 0x5570a3e0ded8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5570a3e0ca68 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5570a3e0dfc0 <col:32, line:57:5>
|   `-ReturnStmt 0x5570a3e0dfb0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5570a3e0df98 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5570a3e0df68 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5570a3e0d5d8
|         `-CXXThisExpr 0x5570a3e0df58 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5570a3e0cb28 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5570a3e0ccb0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5570a3e0cbe0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e0ce00 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5570a3e0cd70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e0cf50 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5570a3e0cec0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5570a3e0d158 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5570a3e0d008 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5570a3e0d080 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5570a3e0d488 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5570a3e0d218 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5570a3e0d298 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5570a3e0d360 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5570a3e0d540 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5570a3e0d578 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5570a3e0d5d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5570a3e0d640 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5570a3e0d6a0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5570a3e0d6f0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5570a3e0d6f0
| `-ParmVarDecl 0x5570a3e0d808 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5570a3e0d8a8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5570a3e0d8a8
| `-ParmVarDecl 0x5570a3e0d9b8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5570a3e89ef8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3e36700 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5570a3e368d8 prev 0x5570a3e36700 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5570a3e36968 <col:46, col:52> col:46 public
|-TypedefDecl 0x5570a3e36990 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e38560 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5570a3e38510 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5570a3e36e40 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5570a3e36d40 'type'
|     `-TemplateSpecializationType 0x5570a3e36cd0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5570a3e36bb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5570a3e36b90 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5570a3e36b70 <col:24> 'unsigned long' 4
|       `-RecordType 0x5570a3e36cb0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5570a3e36bd0 'char_array'
|-TypedefDecl 0x5570a3e38618 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5570a3e385e0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5570a3e385c0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5570a3e38560 'type'
|     `-ElaboratedType 0x5570a3e38510 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5570a3e36e40 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5570a3e36d40 'type'
|         `-TemplateSpecializationType 0x5570a3e36cd0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5570a3e36bb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5570a3e36b90 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5570a3e36b70 <col:24> 'unsigned long' 4
|           `-RecordType 0x5570a3e36cb0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5570a3e36bd0 'char_array'
|-CXXMethodDecl 0x5570a3e38798 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5570a3e386a8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5570a3e38888 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5570a3e38968 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5570a3e38c38 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5570a3e38b40 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5570a3e38e78 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5570a3e38cf0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3e38d68 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e39048 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5570a3e38f38 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3e38fb0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e391a8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5570a3e39278 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5570a3e394c8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5570a3e39338 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5570a3e393b0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e39728 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5570a3e39598 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5570a3e39610 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e398e8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5570a3e397f8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e39aa8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5570a3e399b0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e39b60 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5570a3e39c10 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5570a3e39e48 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5570a3e39cc0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5570a3e39d38 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5570a3e3a0e8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5570a3e39ff0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5570a3e3a1b0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5570a3e3a200 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5570a3e3a250 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3e35108 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5570a3e35318 prev 0x5570a3e35108 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5570a3e36670 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5570a3e36620 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5570a3e36600 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5570a3e364b0 'type'
|     `-SubstTemplateTypeParmType 0x5570a3e362d0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5570a3b01fa0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b01f48 'T'
|       `-RecordType 0x5570a3e35e20 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5570a3e35d38 'sized_array_memory'
|-FieldDecl 0x5570a3e406f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5570a3e40740 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5570a3e40778 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|   |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5570a3b39c38 'T'
|   `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e40808 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5570a3e407d0 'int &'
|   `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e408c8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5570a3e40890 'const int &'
|   `-QualType 0x5570a3e353b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e40958 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5570a3e40920 'int *'
|   `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e409e8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5570a3e409b0 'const int *'
|   `-QualType 0x5570a3e353b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e415d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5570a3e41580 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5570a3e41560 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5570a3e414f0 'type'
|     `-SubstTemplateTypeParmType 0x5570a3e412b0 'int' sugar
|       |-TemplateTypeParmType 0x5570a3b0cda0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b0cd50 'T'
|       `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e41638 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5570a3e40890 'const int &'
|   `-QualType 0x5570a3e353b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e41690 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e416f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5570a3e40920 'int *'
|   `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|     |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5570a3b39c38 'T'
|     `-BuiltinType 0x5570a383c3c0 'int'
|-TypedefDecl 0x5570a3e41760 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5570a3e409b0 'const int *'
|   `-QualType 0x5570a3e353b1 'const int' const
|     `-SubstTemplateTypeParmType 0x5570a3e353b0 'int' sugar
|       |-TemplateTypeParmType 0x5570a3b39c90 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5570a3b39c38 'T'
|       `-BuiltinType 0x5570a383c3c0 'int'
|-EnumDecl 0x5570a3e417b8 <line:134:5> col:5
| `-EnumConstantDecl 0x5570a3e418b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5570a3e41890 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5570a3b3b318 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5570a3b3b2f0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5570a3b3b2d0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5570a3e41938 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5570a3e41b88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3e419f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3e41a90 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5570a3e41e48 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5570a3e41d30 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5570a3e42108 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5570a3e41ff0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5570a3e42450 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5570a3e42330 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5570a3e42760 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5570a3e42640 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5570a3e42a50 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3e42898 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3e42910 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5570a3e42b78 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5570a3e42c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e42cb0 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e42cf8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5570a3e42da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e42e00 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e42ec8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5570a3e42f78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e42fd0 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e43018 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5570a3e430c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e43120 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e43168 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5570a3e43218 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e43270 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e432b8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5570a3e43368 <col:20> Inherited
| `-OptimizeNoneAttr 0x5570a3e433c0 <col:30> Inherited
|-CXXMethodDecl 0x5570a3e433e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5570a3e43498 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5570a3e43548 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5570a3e43708 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3e435f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5570a3e43670 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5570a3e43858 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3e437c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3e43a08 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5570a3e43910 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5570a3e43ac0 <col:20>
| `-OptimizeNoneAttr 0x5570a3e43b18 <col:30>
|-CXXMethodDecl 0x5570a3e43c38 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5570a3e43b40 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5570a3e43cf0 <col:20>
| `-OptimizeNoneAttr 0x5570a3e43d48 <col:30>
|-CXXMethodDecl 0x5570a3e43e00 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3e43d70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3e43f48 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5570a3e43eb8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3e44078 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5570a3e441a8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5570a3e44278 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5570a3e44348 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5570a3e44488 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5570a3e443f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3e445d0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5570a3e44540 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5570a3e44718 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5570a3e44688 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5570a3e447d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5570a3e448d0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5570a3e44840 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5570a3e44988 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5570a3e44a48 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5570a3e44b48 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5570a3e44cc8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5570a3e44c08 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5570a3e45488 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5570a3e44d80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5570a3e453e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5570a3e452e8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5570a3e45568 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5570a3e456b8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5570a3e45628 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5570a3e45770 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5570a3e459b8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5570a3e45830 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5570a3e458a8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5570a3e45b78 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5570a3e45a88 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5570a3e45dc8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5570a3e45c40 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5570a3e45cb8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5570a3e45e88 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5570a3e460e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5570a3e45ff0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5570a3e461b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e33278 prev 0x5570a3e12eb0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5570a3e33370 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5570a3e33460 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5570a3e58fd0 <col:16, line:828:9>
|-CXXDestructorDecl 0x5570a3e33550 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5570a3e58fe0 <col:25, line:830:9>
|-CXXMethodDecl 0x5570a3e33650 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5570a3e33700 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5570a3e337a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5570a3e337a8
| `-ParmVarDecl 0x5570a3e338b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5570a3e34078 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5570a3e34078
  `-ParmVarDecl 0x5570a3e34188 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e12ce8 prev 0x5570a3dbbad8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5570a3e12e20 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5570a3e12eb0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5570a3e12f60 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5570a3e13068 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5570a3e12f98 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5570a3e47778 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5570a3e47758 <col:31> 'int' 0
|-CXXConstructorDecl 0x5570a3e145c8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3e14440 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5570a3e144b8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5570a3e477b0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5570a3e47790 <col:59> 'int' 0
|-CXXConstructorDecl 0x5570a3e147a0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3e14690 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5570a3e14708 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5570a3e477e8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5570a3e477c8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5570a3e14b58 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5570a3e14940 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5570a3e149b8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5570a3e14a30 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5570a3e47820 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5570a3e47800 <col:31> 'int' 0
|-CXXConstructorDecl 0x5570a3e14d18 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5570a3e14c58 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5570a3e14e10 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5570a3e14fc8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5570a3e14f00 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5570a3e150b8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5570a3e47bd0 <col:24, line:291:5>
|   `-ReturnStmt 0x5570a3e47bc0 <line:290:9, col:79>
|     `-BinaryOperator 0x5570a3e47ba0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5570a3e47a78 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5570a3e479d0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5570a3e479b0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5570a3e478a8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5570a3e47890 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5570a3e47878 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5570a3e47848 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5570a3e350a0
|       | |   |       `-CXXThisExpr 0x5570a3e47838 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5570a3e47998 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5570a3e47980 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5570a3e47948 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5570a3e47918 <col:28, col:35> '<bound member function type>' ->size 0x5570a3dfea28
|       | |           `-ImplicitCastExpr 0x5570a3e47968 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5570a3e47900 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5570a3e478d0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5570a3e350a0
|       | |                 `-CXXThisExpr 0x5570a3e478c0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5570a3e47a60 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5570a3e47a48 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5570a3e47a30 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5570a3e47a00 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5570a3e46300
|       |         `-CXXThisExpr 0x5570a3e479f0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5570a3e47b80 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5570a3e47b68 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5570a3e47b50 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5570a3e47b10 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5570a3e47af8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5570a3e47aa8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5570a3e463b0
|         |     |   `-CXXThisExpr 0x5570a3e47a98 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5570a3e47ad8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5570a3e47b30 <col:79> 'int' 0
|-CXXMethodDecl 0x5570a3e15178 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5570a3e47da8 <col:32, line:296:5>
|   `-ReturnStmt 0x5570a3e47d98 <line:295:9, col:49>
|     `-BinaryOperator 0x5570a3e47d78 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5570a3e47c58 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5570a3e47c40 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5570a3e47c28 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5570a3e47bf8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5570a3e46300
|       |       `-CXXThisExpr 0x5570a3e47be8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5570a3e47d58 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5570a3e47d40 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5570a3e47d28 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5570a3e47ce8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5570a3e47cd0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5570a3e47c80 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5570a3e463b0
|         |     |   `-CXXThisExpr 0x5570a3e47c70 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5570a3e47cb0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5570a3e47d08 <col:49> 'int' 0
|-CXXMethodDecl 0x5570a3e15268 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5570a3e47fb8 <col:19, line:306:5>
|   |-IfStmt 0x5570a3e47ed8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5570a3e47e18 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5570a3e47e00 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5570a3e47dd0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5570a3e350a0
|   | |     `-CXXThisExpr 0x5570a3e47dc0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5570a3e47eb8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5570a3e47e88 <col:13, col:20> '<bound member function type>' ->clear 0x5570a3e01428
|   |     `-ImplicitCastExpr 0x5570a3e47e70 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5570a3e47e40 <col:13> 'Vector<String> *' lvalue ->_conf 0x5570a3e350a0
|   |         `-CXXThisExpr 0x5570a3e47e30 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5570a3e47f60 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5570a3e47f30 <col:9, col:16> '<bound member function type>' .clear 0x5570a3e45e88
|   |   `-MemberExpr 0x5570a3e47f00 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5570a3e462a0
|   |     `-CXXThisExpr 0x5570a3e47ef0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5570a3e47fa8 <line:305:9, col:17>
|     `-UnaryOperator 0x5570a3e47f90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e47f80 <col:17> 'Args *' this
|-CXXMethodDecl 0x5570a3e154e8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5570a3e153f0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5570a3e15668 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5570a3e155a0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5570a3e159e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5570a3e15710 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5570a3e15948 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5570a3e157b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5570a3e15830 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5570a3e482e0 <col:67, line:327:5>
|     |-WhileStmt 0x5570a3e48290 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5570a3e480a8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5570a3e48020 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5570a3dbb470 0x5570a3d5b878 0x5570a3ba4e58 0x5570a3ba4b30 0x5570a3b96310 0x5570a3b95fc0 0x5570a3b958b0 0x5570a3b68220 0x5570a3af46e0
|     | | |-DeclRefExpr 0x5570a3e47fe0 <col:16> 'Iter' lvalue ParmVar 0x5570a3e157b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5570a3e48000 <col:25> 'Iter' lvalue ParmVar 0x5570a3e15830 'end' 'Iter'
|     | `-CompoundStmt 0x5570a3e48270 <col:30, line:325:9>
|     |   |-CallExpr 0x5570a3e48210 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5570a3e480f0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5570a3e481e0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5570a3e48170 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|     |   |   `-DeclRefExpr 0x5570a3e48150 <col:24> 'Iter' lvalue ParmVar 0x5570a3e157b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5570a3e48258 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5570a3e48238 <col:15> 'Iter' lvalue ParmVar 0x5570a3e157b8 'begin' 'Iter'
|     `-ReturnStmt 0x5570a3e482d0 <line:326:9, col:17>
|       `-UnaryOperator 0x5570a3e482b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e482a8 <col:17> 'Args *' this
|-CXXMethodDecl 0x5570a3e15af0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5570a3e15a60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5570a3e15c38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5570a3e15ba8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5570a3e15d00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5570a3e483c0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5570a3e48360 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5570a3e48310 <col:9> '<bound member function type>' ->reset_from 0x5570a3e46728
|   | | `-CXXThisExpr 0x5570a3e48300 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5570a3e48340 <col:20> 'int' 0
|   `-ReturnStmt 0x5570a3e483b0 <line:352:9, col:17>
|     `-UnaryOperator 0x5570a3e48398 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e48388 <col:17> 'Args *' this
|-VarDecl 0x5570a3e15db8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5570a3e15e20 <col:38> 'int' 1
|-VarDecl 0x5570a3e15eb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5570a3e15f18 <col:39> 'int' 2
|-VarDecl 0x5570a3e15fa8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5570a3e16010 <col:39> 'int' 4
|-VarDecl 0x5570a3e160a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5570a3e16108 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5570a3e16488 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5570a3e16180 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e163e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5570a3e16230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e162d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e48518 <col:43, line:371:5>
|     `-ReturnStmt 0x5570a3e48508 <line:370:9, col:34>
|       `-CallExpr 0x5570a3e484d0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e483f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e48470 <col:21> 'const char *' lvalue ParmVar 0x5570a3e16230 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e48490 <col:30> 'int' 0
|         `-DeclRefExpr 0x5570a3e484b0 <col:33> 'T' lvalue ParmVar 0x5570a3e162d8 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e167b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5570a3e164f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e16718 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5570a3e165a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e16648 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e48668 <col:45, line:375:5>
|     `-ReturnStmt 0x5570a3e48658 <line:374:9, col:42>
|       `-CallExpr 0x5570a3e48620 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e48540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e485c0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e165a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e485e0 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5570a3e48600 <col:41> 'T' lvalue ParmVar 0x5570a3e16648 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e16ae8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5570a3e16820 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5570a3e16a48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5570a3e168d0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5570a3e16978 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5570a3e4a138 <col:45, line:379:5>
| |   `-ReturnStmt 0x5570a3e4a128 <line:378:9, col:43>
| |     `-CallExpr 0x5570a3e4a0f0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5570a3e4a010 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5570a3e4a090 <col:21> 'const char *' lvalue ParmVar 0x5570a3e168d0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5570a3e4a0b0 <col:30> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
| |       `-DeclRefExpr 0x5570a3e4a0d0 <col:42> 'T' lvalue ParmVar 0x5570a3e16978 'x' 'T &'
| `-CXXMethodDecl 0x5570a3e8a408 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, EtherAddress &)'
|   |-TemplateArgument type 'EtherAddress'
|   |-ParmVarDecl 0x5570a3e8a220 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5570a3e8a2f8 <col:39, col:42> col:42 x 'EtherAddress &'
|-FunctionTemplateDecl 0x5570a3e16e18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5570a3e16b50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e16d78 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5570a3e16c00 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e16ca8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4a338 <col:46, line:383:5>
|     `-ReturnStmt 0x5570a3e4a328 <line:382:9, col:55>
|       `-CallExpr 0x5570a3e4a2f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4a160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4a1e0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e16c00 'keyword' 'const char *'
|         |-BinaryOperator 0x5570a3e4a2b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5570a3e4a260 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5570a3e4a240 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5570a3e4a298 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5570a3e4a278 <col:42> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5570a3e4a2d0 <col:54> 'T' lvalue ParmVar 0x5570a3e16ca8 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e17218 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5570a3e16e80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e17178 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5570a3e16f30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e16fb0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e17058 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4a478 <col:54, line:388:5>
|     |-CallExpr 0x5570a3e4a400 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4a350 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5570a3e4a390 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4a3a0 <col:30> 'const char *' lvalue ParmVar 0x5570a3e16f30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4a3c0 <col:39> 'int' lvalue ParmVar 0x5570a3e16fb0 'flags' 'int'
|     | `-DeclRefExpr 0x5570a3e4a3e0 <col:46> 'T' lvalue ParmVar 0x5570a3e17058 'x' 'T &'
|     `-ReturnStmt 0x5570a3e4a468 <line:387:9, col:17>
|       `-UnaryOperator 0x5570a3e4a450 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4a440 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e176c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5570a3e17288 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e17308 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5570a3e17628 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e173c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e17468 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e17508 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4a5e8 <col:74, line:403:5>
|     `-ReturnStmt 0x5570a3e4a5d8 <line:402:9, col:56>
|       `-CallExpr 0x5570a3e4a598 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4a4a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4a518 <col:28> 'const char *' lvalue ParmVar 0x5570a3e173c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4a538 <col:37> 'int' 0
|         |-DeclRefExpr 0x5570a3e4a558 <col:40> 'T' lvalue ParmVar 0x5570a3e17468 'x' 'T &'
|         `-DeclRefExpr 0x5570a3e4a578 <col:43> 'const V' lvalue ParmVar 0x5570a3e17508 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5570a3e17b38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5570a3e17738 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e177b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5570a3e17a98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e17878 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e17918 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e179b8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4a750 <col:76, line:407:5>
|     `-ReturnStmt 0x5570a3e4a740 <line:406:9, col:65>
|       `-CallExpr 0x5570a3e4a700 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4a610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4a680 <col:28> 'const char *' lvalue ParmVar 0x5570a3e17878 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4a6a0 <col:37> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
|         |-DeclRefExpr 0x5570a3e4a6c0 <col:49> 'T' lvalue ParmVar 0x5570a3e17918 'x' 'T &'
|         `-DeclRefExpr 0x5570a3e4a6e0 <col:52> 'const V' lvalue ParmVar 0x5570a3e179b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5570a3e18088 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5570a3e17ba8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e17c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5570a3e17fe8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e17ce8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e17d68 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e17e08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e17ea8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4a8b8 <col:85, line:412:5>
|     |-CallExpr 0x5570a3e4a838 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4a768 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5570a3e4a7a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4a7b8 <col:37> 'const char *' lvalue ParmVar 0x5570a3e17ce8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4a7d8 <col:46> 'int' lvalue ParmVar 0x5570a3e17d68 'flags' 'int'
|     | |-DeclRefExpr 0x5570a3e4a7f8 <col:53> 'T' lvalue ParmVar 0x5570a3e17e08 'x' 'T &'
|     | `-DeclRefExpr 0x5570a3e4a818 <col:56> 'const V' lvalue ParmVar 0x5570a3e17ea8 'default_value' 'const V &'
|     `-ReturnStmt 0x5570a3e4a8a8 <line:411:9, col:17>
|       `-UnaryOperator 0x5570a3e4a890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4a880 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e18518 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5570a3e18100 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e18178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5570a3e18478 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5570a3e18238 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5570a3e182b0 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x5570a3e18358 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5570a3e4aa38 <col:53, line:425:5>
| |   `-ReturnStmt 0x5570a3e4aa28 <line:424:9, col:42>
| |     `-CallExpr 0x5570a3e4a9e8 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5570a3e4a8e8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5570a3e4a968 <col:21> 'const char *' lvalue ParmVar 0x5570a3e18238 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5570a3e4a988 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5570a3e4a9a8 <col:33> 'P' lvalue ParmVar 0x5570a3e182b0 'parser' 'P'
| |       `-DeclRefExpr 0x5570a3e4a9c8 <col:41> 'T' lvalue ParmVar 0x5570a3e18358 'x' 'T &'
| `-CXXMethodDecl 0x5570a3e8bb78 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5570a3e8b8e8 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e8b988 <col:37, col:39> col:39 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x5570a3e8ba58 <col:47, col:50> col:50 x 'int &'
|-FunctionTemplateDecl 0x5570a3e18968 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5570a3e18588 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e18608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e188c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e186c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e18740 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e187e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4abb0 <col:55, line:429:5>
|     `-ReturnStmt 0x5570a3e4aba0 <line:428:9, col:50>
|       `-CallExpr 0x5570a3e4ab60 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4aa60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4aae0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e186c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4ab00 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5570a3e4ab20 <col:41> 'P' lvalue ParmVar 0x5570a3e18740 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4ab40 <col:49> 'T' lvalue ParmVar 0x5570a3e187e8 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e18db8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5570a3e189d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e18a58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e18d18 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e18b18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e18b90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e18c38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4ad28 <col:55, line:433:5>
|     `-ReturnStmt 0x5570a3e4ad18 <line:432:9, col:51>
|       `-CallExpr 0x5570a3e4acd8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4abd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4ac58 <col:21> 'const char *' lvalue ParmVar 0x5570a3e18b18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4ac78 <col:30> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
|         |-DeclRefExpr 0x5570a3e4ac98 <col:42> 'P' lvalue ParmVar 0x5570a3e18b90 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4acb8 <col:50> 'T' lvalue ParmVar 0x5570a3e18c38 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e19208 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5570a3e18e28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e18ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5570a3e19168 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5570a3e18f68 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5570a3e18fe0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x5570a3e19088 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5570a3e4af50 <col:56, line:437:5>
| |   `-ReturnStmt 0x5570a3e4af40 <line:436:9, col:63>
| |     `-CallExpr 0x5570a3e4af00 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5570a3e4ad50 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5570a3e4add0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e18f68 'keyword' 'const char *'
| |       |-BinaryOperator 0x5570a3e4aea0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5570a3e4ae50 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5570a3e4ae30 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5570a3e4ae88 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5570a3e4ae68 <col:42> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5570a3e4aec0 <col:54> 'P' lvalue ParmVar 0x5570a3e18fe0 'parser' 'P'
| |       `-DeclRefExpr 0x5570a3e4aee0 <col:62> 'T' lvalue ParmVar 0x5570a3e19088 'x' 'T &'
| `-CXXMethodDecl 0x5570a3e8b018 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, WordArg, String &)'
|   |-TemplateArgument type 'WordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5570a3e8ad80 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e8ae28 <col:40, col:42> col:42 parser 'WordArg':'WordArg'
|   `-ParmVarDecl 0x5570a3e8aef8 <col:50, col:53> col:53 x 'String &'
|-FunctionTemplateDecl 0x5570a3e19738 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5570a3e19278 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e192f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e19698 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5570a3e193b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e19438 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e194b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e19558 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4b0b8 <col:64, line:442:5>
|     |-CallExpr 0x5570a3e4b038 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4af68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5570a3e4afa8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4afb8 <col:30> 'const char *' lvalue ParmVar 0x5570a3e193b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4afd8 <col:39> 'int' lvalue ParmVar 0x5570a3e19438 'flags' 'int'
|     | |-DeclRefExpr 0x5570a3e4aff8 <col:46> 'P' lvalue ParmVar 0x5570a3e194b0 'parser' 'P'
|     | `-DeclRefExpr 0x5570a3e4b018 <col:54> 'T' lvalue ParmVar 0x5570a3e19558 'x' 'T &'
|     `-ReturnStmt 0x5570a3e4b0a8 <line:441:9, col:17>
|       `-UnaryOperator 0x5570a3e4b090 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4b080 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e19d38 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5570a3e197b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e19828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5570a3e198a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5570a3e19c98 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e19970 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e199e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e19a88 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e19b58 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4b250 <col:84, line:458:5>
|     `-ReturnStmt 0x5570a3e4b240 <line:457:9, col:64>
|       `-CallExpr 0x5570a3e4b1f8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4b0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4b158 <col:28> 'const char *' lvalue ParmVar 0x5570a3e19970 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4b178 <col:37> 'int' 0
|         |-DeclRefExpr 0x5570a3e4b198 <col:40> 'P' lvalue ParmVar 0x5570a3e199e8 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4b1b8 <col:48> 'T' lvalue ParmVar 0x5570a3e19a88 'x' 'T &'
|         `-DeclRefExpr 0x5570a3e4b1d8 <col:51> 'const V' lvalue ParmVar 0x5570a3e19b58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5570a3e1a2b8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5570a3e19db0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e19e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5570a3e19ea8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5570a3e1a218 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e19f70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e19fe8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1a088 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e1a128 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4b3e0 <col:86, line:462:5>
|     `-ReturnStmt 0x5570a3e4b3d0 <line:461:9, col:73>
|       `-CallExpr 0x5570a3e4b388 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4b278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4b2e8 <col:28> 'const char *' lvalue ParmVar 0x5570a3e19f70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4b308 <col:37> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
|         |-DeclRefExpr 0x5570a3e4b328 <col:49> 'P' lvalue ParmVar 0x5570a3e19fe8 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4b348 <col:57> 'T' lvalue ParmVar 0x5570a3e1a088 'x' 'T &'
|         `-DeclRefExpr 0x5570a3e4b368 <col:60> 'const V' lvalue ParmVar 0x5570a3e1a128 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5570a3e1a918 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5570a3e1a330 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1a3a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5570a3e1a428 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5570a3e1a878 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e1a4f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1a570 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e1a5e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1a688 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e1a728 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5570a3e4b570 <col:95, line:467:5>
|     |-CallExpr 0x5570a3e4b4e8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4b3f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5570a3e4b438 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4b448 <col:37> 'const char *' lvalue ParmVar 0x5570a3e1a4f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4b468 <col:46> 'int' lvalue ParmVar 0x5570a3e1a570 'flags' 'int'
|     | |-DeclRefExpr 0x5570a3e4b488 <col:53> 'P' lvalue ParmVar 0x5570a3e1a5e8 'parser' 'P'
|     | |-DeclRefExpr 0x5570a3e4b4a8 <col:61> 'T' lvalue ParmVar 0x5570a3e1a688 'x' 'T &'
|     | `-DeclRefExpr 0x5570a3e4b4c8 <col:64> 'const V' lvalue ParmVar 0x5570a3e1a728 'default_value' 'const V &'
|     `-ReturnStmt 0x5570a3e4b560 <line:466:9, col:17>
|       `-UnaryOperator 0x5570a3e4b548 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4b538 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e1aef8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5570a3e1a998 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1aa18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e1aa98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e1ae58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e1ab60 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1abd8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1ac78 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5570a3e1ad18 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5570a3e4b718 <col:63, line:481:5>
|     `-ReturnStmt 0x5570a3e4b708 <line:480:9, col:47>
|       `-CallExpr 0x5570a3e4b6c0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4b5a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4b620 <col:21> 'const char *' lvalue ParmVar 0x5570a3e1ab60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4b640 <col:30> 'int' 0
|         |-DeclRefExpr 0x5570a3e4b660 <col:33> 'P' lvalue ParmVar 0x5570a3e1abd8 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4b680 <col:41> 'T1' lvalue ParmVar 0x5570a3e1ac78 'x1' 'T1 &'
|         `-DeclRefExpr 0x5570a3e4b6a0 <col:45> 'T2' lvalue ParmVar 0x5570a3e1ad18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5570a3e1b478 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5570a3e1af70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1afe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e1b068 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e1b3d8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e1b130 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1b1a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1b248 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5570a3e1b2e8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5570a3e4b8b8 <col:65, line:485:5>
|     `-ReturnStmt 0x5570a3e4b8a8 <line:484:9, col:55>
|       `-CallExpr 0x5570a3e4b860 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4b740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4b7c0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e1b130 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4b7e0 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5570a3e4b800 <col:41> 'P' lvalue ParmVar 0x5570a3e1b1a8 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4b820 <col:49> 'T1' lvalue ParmVar 0x5570a3e1b248 'x1' 'T1 &'
|         `-DeclRefExpr 0x5570a3e4b840 <col:53> 'T2' lvalue ParmVar 0x5570a3e1b2e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5570a3e1b9f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5570a3e1b4f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1b568 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e1b5e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e1b958 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e1b6b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1b728 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1b7c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5570a3e1b868 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5570a3e4ba58 <col:65, line:489:5>
|     `-ReturnStmt 0x5570a3e4ba48 <line:488:9, col:56>
|       `-CallExpr 0x5570a3e4ba00 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4b8e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4b960 <col:21> 'const char *' lvalue ParmVar 0x5570a3e1b6b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4b980 <col:30> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
|         |-DeclRefExpr 0x5570a3e4b9a0 <col:42> 'P' lvalue ParmVar 0x5570a3e1b728 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4b9c0 <col:50> 'T1' lvalue ParmVar 0x5570a3e1b7c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5570a3e4b9e0 <col:54> 'T2' lvalue ParmVar 0x5570a3e1b868 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5570a3e1bf78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5570a3e1ba70 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1bae8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e1bb68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e1bed8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e1bc30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1bca8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1bd48 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5570a3e1bde8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5570a3e4bca8 <col:66, line:493:5>
|     `-ReturnStmt 0x5570a3e4bc98 <line:492:9, col:68>
|       `-CallExpr 0x5570a3e4bc50 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4ba80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4bb00 <col:21> 'const char *' lvalue ParmVar 0x5570a3e1bc30 'keyword' 'const char *'
|         |-BinaryOperator 0x5570a3e4bbd0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5570a3e4bb80 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5570a3e4bb60 <col:30> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5570a3e4bbb8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5570a3e4bb98 <col:42> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5570a3e4bbf0 <col:54> 'P' lvalue ParmVar 0x5570a3e1bca8 'parser' 'P'
|         |-DeclRefExpr 0x5570a3e4bc10 <col:62> 'T1' lvalue ParmVar 0x5570a3e1bd48 'x1' 'T1 &'
|         `-DeclRefExpr 0x5570a3e4bc30 <col:66> 'T2' lvalue ParmVar 0x5570a3e1bde8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5570a3e21b78 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5570a3e1bff0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e1c068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e1c0e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e21ad8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e1c1b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e1c230 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e1c2a8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e1c348 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5570a3e21980 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5570a3e4be38 <col:74, line:498:5>
|     |-CallExpr 0x5570a3e4bdb0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4bcc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5570a3e4bd00 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4bd10 <col:30> 'const char *' lvalue ParmVar 0x5570a3e1c1b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4bd30 <col:39> 'int' lvalue ParmVar 0x5570a3e1c230 'flags' 'int'
|     | |-DeclRefExpr 0x5570a3e4bd50 <col:46> 'P' lvalue ParmVar 0x5570a3e1c2a8 'parser' 'P'
|     | |-DeclRefExpr 0x5570a3e4bd70 <col:54> 'T1' lvalue ParmVar 0x5570a3e1c348 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5570a3e4bd90 <col:58> 'T2' lvalue ParmVar 0x5570a3e21980 'x2' 'T2 &'
|     `-ReturnStmt 0x5570a3e4be28 <line:497:9, col:17>
|       `-UnaryOperator 0x5570a3e4be10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4be00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e21ed8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5570a3e21bf8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e21e38 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5570a3e21cb0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e21d28 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4bf80 <col:52, line:509:5>
|     `-ReturnStmt 0x5570a3e4bf70 <line:508:9, col:44>
|       `-CallExpr 0x5570a3e4bf38 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4be68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4bed8 <col:26> 'const char *' lvalue ParmVar 0x5570a3e21cb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4bef8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5570a3e4bf18 <col:38> 'P' lvalue ParmVar 0x5570a3e21d28 'parser' 'P'
|-FunctionTemplateDecl 0x5570a3e221d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5570a3e21f40 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e22138 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5570a3e21ff0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e22068 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4c0c0 <col:54, line:513:5>
|     `-ReturnStmt 0x5570a3e4c0b0 <line:512:9, col:52>
|       `-CallExpr 0x5570a3e4c078 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4bfa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c018 <col:26> 'const char *' lvalue ParmVar 0x5570a3e21ff0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c038 <col:35> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5570a3e4c058 <col:46> 'P' lvalue ParmVar 0x5570a3e22068 'parser' 'P'
|-FunctionTemplateDecl 0x5570a3e224d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5570a3e22240 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e22438 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5570a3e222f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e22368 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4c200 <col:54, line:517:5>
|     `-ReturnStmt 0x5570a3e4c1f0 <line:516:9, col:53>
|       `-CallExpr 0x5570a3e4c1b8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c158 <col:26> 'const char *' lvalue ParmVar 0x5570a3e222f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c178 <col:35> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int'
|         `-DeclRefExpr 0x5570a3e4c198 <col:47> 'P' lvalue ParmVar 0x5570a3e22368 'parser' 'P'
|-FunctionTemplateDecl 0x5570a3e227d8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5570a3e22540 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e22738 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5570a3e225f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e22668 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4c3f0 <col:55, line:521:5>
|     `-ReturnStmt 0x5570a3e4c3e0 <line:520:9, col:65>
|       `-CallExpr 0x5570a3e4c3a8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c298 <col:26> 'const char *' lvalue ParmVar 0x5570a3e225f0 'keyword' 'const char *'
|         |-BinaryOperator 0x5570a3e4c368 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5570a3e4c318 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5570a3e4c2f8 <col:35> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5570a3e4c350 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5570a3e4c330 <col:47> 'const int' lvalue Var 0x5570a3e15eb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5570a3e4c388 <col:59> 'P' lvalue ParmVar 0x5570a3e22668 'parser' 'P'
|-FunctionTemplateDecl 0x5570a3e22ba8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5570a3e22840 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e22b08 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5570a3e228f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e22970 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e229e8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4c530 <col:63, line:526:5>
|     |-CallExpr 0x5570a3e4c4b8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4c408 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5570a3e4c448 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4c458 <col:35> 'const char *' lvalue ParmVar 0x5570a3e228f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5570a3e4c478 <col:44> 'int' lvalue ParmVar 0x5570a3e22970 'flags' 'int'
|     | `-DeclRefExpr 0x5570a3e4c498 <col:51> 'P' lvalue ParmVar 0x5570a3e229e8 'parser' 'P'
|     `-ReturnStmt 0x5570a3e4c520 <line:525:9, col:17>
|       `-UnaryOperator 0x5570a3e4c508 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4c4f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e22ff8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5570a3e22c18 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e22c98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e22f58 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e22d58 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e22dd0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e22e78 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4c688 <col:58, line:541:5>
|     `-ReturnStmt 0x5570a3e4c678 <line:540:9, col:39>
|       `-CallExpr 0x5570a3e4c640 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c5e0 <col:21> 'const char *' lvalue ParmVar 0x5570a3e22d58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c600 <col:30> 'P' lvalue ParmVar 0x5570a3e22dd0 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4c620 <col:38> 'T' lvalue ParmVar 0x5570a3e22e78 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e23448 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5570a3e23068 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e230e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e233a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e231a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e23220 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e232c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4c7c0 <col:60, line:545:5>
|     `-ReturnStmt 0x5570a3e4c7b0 <line:544:9, col:41>
|       `-CallExpr 0x5570a3e4c778 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c6b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c718 <col:23> 'const char *' lvalue ParmVar 0x5570a3e231a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c738 <col:32> 'P' lvalue ParmVar 0x5570a3e23220 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4c758 <col:40> 'T' lvalue ParmVar 0x5570a3e232c8 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e23898 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5570a3e234b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e23538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e237f8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e235f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e23670 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e23718 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4c8f8 <col:60, line:549:5>
|     `-ReturnStmt 0x5570a3e4c8e8 <line:548:9, col:41>
|       `-CallExpr 0x5570a3e4c8b0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c7e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c850 <col:23> 'const char *' lvalue ParmVar 0x5570a3e235f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c870 <col:32> 'P' lvalue ParmVar 0x5570a3e23670 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4c890 <col:40> 'T' lvalue ParmVar 0x5570a3e23718 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e23ce8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5570a3e23908 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e23988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e23c48 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e23a48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e23ac0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e23b68 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4ca30 <col:61, line:553:5>
|     `-ReturnStmt 0x5570a3e4ca20 <line:552:9, col:42>
|       `-CallExpr 0x5570a3e4c9e8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4c920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4c988 <col:24> 'const char *' lvalue ParmVar 0x5570a3e23a48 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4c9a8 <col:33> 'P' lvalue ParmVar 0x5570a3e23ac0 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4c9c8 <col:41> 'T' lvalue ParmVar 0x5570a3e23b68 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e241c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5570a3e23d58 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e23dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e24128 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5570a3e23e98 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e23f18 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e23f90 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e24038 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4cba8 <col:69, line:557:5>
|     `-ReturnStmt 0x5570a3e4cb98 <line:556:9, col:46>
|       `-CallExpr 0x5570a3e4cb58 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4ca58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4cad8 <col:21> 'const char *' lvalue ParmVar 0x5570a3e23e98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4caf8 <col:30> 'int' lvalue ParmVar 0x5570a3e23f18 'flags' 'int'
|         |-DeclRefExpr 0x5570a3e4cb18 <col:37> 'P' lvalue ParmVar 0x5570a3e23f90 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4cb38 <col:45> 'T' lvalue ParmVar 0x5570a3e24038 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e244d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5570a3e24240 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e24438 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5570a3e242f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e24368 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4cce8 <col:56, line:571:5>
|     `-ReturnStmt 0x5570a3e4ccd8 <line:570:9, col:48>
|       `-CallExpr 0x5570a3e4cca0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4cbd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4cc40 <col:30> 'const char *' lvalue ParmVar 0x5570a3e242f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4cc60 <col:39> 'int' 0
|         `-DeclRefExpr 0x5570a3e4cc80 <col:42> 'P' lvalue ParmVar 0x5570a3e24368 'parser' 'P'
|-FunctionTemplateDecl 0x5570a3e24868 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5570a3e24540 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e247c8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5570a3e245f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e24670 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e246e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e4ceb8 <col:67, line:576:5>
|     |-CallExpr 0x5570a3e4ce40 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4cd00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5570a3e4cd40 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4cd50 <col:39> 'const char *' lvalue ParmVar 0x5570a3e245f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5570a3e4ce00 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5570a3e4cdb0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5570a3e4cd70 <col:48> 'int' lvalue ParmVar 0x5570a3e24670 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5570a3e4cde8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5570a3e4cdc8 <col:56> 'const int' lvalue Var 0x5570a3e160a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5570a3e4ce20 <col:68> 'P' lvalue ParmVar 0x5570a3e246e8 'parser' 'P'
|     `-ReturnStmt 0x5570a3e4cea8 <line:575:9, col:17>
|       `-UnaryOperator 0x5570a3e4ce90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4ce80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e24cb8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5570a3e248d8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e24958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e24c18 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5570a3e24a18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e24a90 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e24b38 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4d028 <col:62, line:592:5>
|     `-ReturnStmt 0x5570a3e4d018 <line:591:9, col:51>
|       `-CallExpr 0x5570a3e4cfd8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4cee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4cf58 <col:30> 'const char *' lvalue ParmVar 0x5570a3e24a18 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4cf78 <col:39> 'int' 0
|         |-DeclRefExpr 0x5570a3e4cf98 <col:42> 'P' lvalue ParmVar 0x5570a3e24a90 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4cfb8 <col:50> 'T' lvalue ParmVar 0x5570a3e24b38 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e25198 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5570a3e24d28 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e24da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e250f8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5570a3e24e68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e24ee8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e24f60 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e25008 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4d220 <col:73, line:597:5>
|     |-CallExpr 0x5570a3e4d1a0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4d040 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5570a3e4d080 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4d090 <col:39> 'const char *' lvalue ParmVar 0x5570a3e24e68 'keyword' 'const char *'
|     | |-BinaryOperator 0x5570a3e4d140 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5570a3e4d0f0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5570a3e4d0b0 <col:48> 'int' lvalue ParmVar 0x5570a3e24ee8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5570a3e4d128 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5570a3e4d108 <col:56> 'const int' lvalue Var 0x5570a3e160a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5570a3e4d160 <col:68> 'P' lvalue ParmVar 0x5570a3e24f60 'parser' 'P'
|     | `-DeclRefExpr 0x5570a3e4d180 <col:76> 'T' lvalue ParmVar 0x5570a3e25008 'x' 'T &'
|     `-ReturnStmt 0x5570a3e4d210 <line:596:9, col:17>
|       `-UnaryOperator 0x5570a3e4d1f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4d1e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e25748 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5570a3e25210 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e25288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e256a8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5570a3e25348 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e253c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e25580 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5570a3e4d390 <col:65, line:614:5>
|     `-ReturnStmt 0x5570a3e4d380 <line:613:9, col:46>
|       `-CallExpr 0x5570a3e4d340 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4d250 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4d2c0 <col:25> 'const char *' lvalue ParmVar 0x5570a3e25348 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4d2e0 <col:34> 'int' 0
|         |-DeclRefExpr 0x5570a3e4d300 <col:37> 'P' lvalue ParmVar 0x5570a3e253c0 'parser' 'P'
|         `-DeclRefExpr 0x5570a3e4d320 <col:45> 'Vector<T>' lvalue ParmVar 0x5570a3e25580 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5570a3e25b78 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5570a3e257b8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e25ad8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5570a3e25870 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e259c0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5570a3e4d5b0 <col:55, line:618:5>
|     `-ReturnStmt 0x5570a3e4d5a0 <line:617:9, col:55>
|       `-CallExpr 0x5570a3e4d560 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4d3b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4d428 <col:25> 'const char *' lvalue ParmVar 0x5570a3e25870 'keyword' 'const char *'
|         |-IntegerLiteral 0x5570a3e4d448 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5570a3e4d520 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5570a3e4d540 <col:54> 'Vector<T>' lvalue ParmVar 0x5570a3e259c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5570a3e26148 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5570a3e25be0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e25c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e260a8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5570a3e25d18 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e25d98 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e25e10 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e25f60 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5570a3e4d7a8 <col:76, line:623:5>
|     |-CallExpr 0x5570a3e4d728 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e4d5c8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5570a3e4d608 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5570a3e4d618 <col:34> 'const char *' lvalue ParmVar 0x5570a3e25d18 'keyword' 'const char *'
|     | |-BinaryOperator 0x5570a3e4d6c8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5570a3e4d678 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5570a3e4d638 <col:43> 'int' lvalue ParmVar 0x5570a3e25d98 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5570a3e4d6b0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5570a3e4d690 <col:51> 'const int' lvalue Var 0x5570a3e160a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5570a3e4d6e8 <col:63> 'P' lvalue ParmVar 0x5570a3e25e10 'parser' 'P'
|     | `-DeclRefExpr 0x5570a3e4d708 <col:71> 'Vector<T>' lvalue ParmVar 0x5570a3e25f60 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5570a3e4d798 <line:622:9, col:17>
|       `-UnaryOperator 0x5570a3e4d780 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4d770 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e26688 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5570a3e261c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e26238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e265e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5570a3e262f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e26378 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e264c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5570a3e4da10 <col:66, line:627:5>
|     `-ReturnStmt 0x5570a3e4da00 <line:626:9, col:59>
|       `-CallExpr 0x5570a3e4d9c0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5570a3e4d7d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5570a3e4d848 <col:25> 'const char *' lvalue ParmVar 0x5570a3e262f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5570a3e4d868 <col:34> 'int' lvalue ParmVar 0x5570a3e26378 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5570a3e4d980 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5570a3e4d9a0 <col:58> 'Vector<T>' lvalue ParmVar 0x5570a3e264c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5570a3e26718 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5570a3e4da90 <col:25, line:633:5>
|   `-ReturnStmt 0x5570a3e4da80 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5570a3e4da68 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5570a3e4da38 <col:16> 'const bool' lvalue ->_status 0x5570a3e34f08
|         `-CXXThisExpr 0x5570a3e4da28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5570a3e26898 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5570a3e267d0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5570a3e4db78 <col:27, line:639:5>
|   |-BinaryOperator 0x5570a3e4db20 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5570a3e4daa8 <col:9> 'bool' lvalue ParmVar 0x5570a3e267d0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5570a3e4db08 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3e4dad8 <col:13> 'bool' lvalue ->_status 0x5570a3e34f08
|   |     `-CXXThisExpr 0x5570a3e4dac8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5570a3e4db68 <line:638:9, col:17>
|     `-UnaryOperator 0x5570a3e4db50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e4db40 <col:17> 'Args *' this
|-CXXMethodDecl 0x5570a3e26a18 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5570a3e26958 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5570a3e4dc68 <col:39, line:644:5>
|   |-BinaryOperator 0x5570a3e4dc10 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5570a3e4db98 <col:9> 'bool' lvalue ParmVar 0x5570a3e26958 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5570a3e4dbf8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3e4dbc8 <col:13> 'const bool' lvalue ->_status 0x5570a3e34f08
|   |     `-CXXThisExpr 0x5570a3e4dbb8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5570a3e4dc58 <line:643:9, col:17>
|     `-UnaryOperator 0x5570a3e4dc40 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e4dc30 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5570a3e26ae0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5570a3e4dd10 <col:30, line:651:5>
|   `-ReturnStmt 0x5570a3e4dd00 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5570a3e4dce8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5570a3e4dcb8 <col:16> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|         `-ImplicitCastExpr 0x5570a3e4dc98 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5570a3e4dc88 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5570a3e26c28 <line:655:5, line:658:5> line:655:11 used read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5570a3e26b98 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5570a3e4de18 <col:32, line:658:5>
|   |-BinaryOperator 0x5570a3e4ddc0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5570a3e4dd28 <col:9> 'bool' lvalue ParmVar 0x5570a3e26b98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5570a3e4dda8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3e4dd78 <col:13> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|   |     `-ImplicitCastExpr 0x5570a3e4dd58 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5570a3e4dd48 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5570a3e4de08 <line:657:9, col:17>
|     `-UnaryOperator 0x5570a3e4ddf0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e4dde0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5570a3e26d78 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5570a3e26ce8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5570a3e4df28 <col:44, line:663:5>
|   |-BinaryOperator 0x5570a3e4ded0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5570a3e4de38 <col:9> 'bool' lvalue ParmVar 0x5570a3e26ce8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5570a3e4deb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5570a3e4de88 <col:13> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|   |     `-ImplicitCastExpr 0x5570a3e4de68 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5570a3e4de58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5570a3e4df18 <line:662:9, col:17>
|     `-UnaryOperator 0x5570a3e4df00 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3e4def0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5570a3e26e40 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5570a3e26f08 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5570a3e26fd0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5570a3e27098 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5570a3e273a8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5570a3e27138 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e27308 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5570a3e27218 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4e2e0 <col:19, line:706:5>
|     `-IfStmt 0x5570a3e4e2b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5570a3e4e028 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5570a3e4e1e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5570a3e4e1b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5570a3e4e178 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5570a3e4e080 <col:42> '<bound member function type>' ->simple_slot 0x5570a3e473e0
|       |     | `-CXXThisExpr 0x5570a3e4e070 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5570a3e4e118 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5570a3e4e0d0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5570a3ba98f8
|       |     | `-DeclRefExpr 0x5570a3e4e0b0 <col:55> 'T' lvalue ParmVar 0x5570a3e27218 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5570a3e4e158 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5570a3e4e2a8 <line:705:13, col:34>
|         `-CallExpr 0x5570a3e4e280 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5570a3e4e208 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5570a3e4e260 <col:33> 'T' lvalue ParmVar 0x5570a3e27218 'x' 'T &'
|-FunctionTemplateDecl 0x5570a3e27678 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5570a3e27408 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e275d8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5570a3e274e8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5570a3e4e6c0 <col:31, line:717:5>
|     |-DeclStmt 0x5570a3e4e420 <line:713:9, col:23>
|     | `-VarDecl 0x5570a3e4e308 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5570a3e4e3f8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5570a3e4e380 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5570a3e4e3d8 <col:21> 'T' lvalue ParmVar 0x5570a3e274e8 'x' 'T &'
|     |-IfStmt 0x5570a3e4e670 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5570a3e4e518 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5570a3e4e650 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5570a3e4e5f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5570a3e4e580 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|     |   | `-DeclRefExpr 0x5570a3e4e560 <col:14> 'T *' lvalue Var 0x5570a3e4e308 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5570a3e4e630 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5570a3e4e6a8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5570a3e4e688 <col:16> 'T *' lvalue Var 0x5570a3e4e308 's' 'T *'
|-FunctionTemplateDecl 0x5570a3e27a88 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5570a3e276d8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e27758 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5570a3e279e8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5570a3e27838 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5570a3e278d8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5570a3e4e9d0 <col:37, line:726:5>
|     |-IfStmt 0x5570a3e4e960 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5570a3e4e980 <line:723:13, col:26>
|     | | `-VarDecl 0x5570a3e4e728 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5570a3e4e818 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5570a3e4e7a0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5570a3e4e7f8 <col:25> 'T' lvalue ParmVar 0x5570a3e27838 'x' 'T &'
|     | |-DeclRefExpr 0x5570a3e4e840 <col:16> 'T *' lvalue Var 0x5570a3e4e728 's' 'T *'
|     | `-BinaryOperator 0x5570a3e4e940 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5570a3e4e8f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5570a3e4e880 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|     |   | `-DeclRefExpr 0x5570a3e4e860 <col:14> 'T *' lvalue Var 0x5570a3e4e728 's' 'T *'
|     |   `-DeclRefExpr 0x5570a3e4e920 <col:18> 'const V' lvalue ParmVar 0x5570a3e278d8 'value' 'const V &'
|     `-ReturnStmt 0x5570a3e4e9c0 <line:725:9, col:17>
|       `-UnaryOperator 0x5570a3e4e9a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5570a3e4e998 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5570a3e27e88 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5570a3e27af0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5570a3e27de8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5570a3e27ba0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e27c20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e27cc8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5570a3e4f7f0 <col:65, line:737:5>
|     |-DeclStmt 0x5570a3e4ea68 <line:732:9, col:26>
|     | `-VarDecl 0x5570a3e4ea00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5570a3e4f7b8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5570a3e4f7d8 <line:733:13, col:58>
|       | `-VarDecl 0x5570a3e4ea90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5570a3e4ec70 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5570a3e4ec40 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5570a3e4ec28 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5570a3e4ec08 <col:26, col:58> 'String' (CXXTemporary 0x5570a3e4ec08)
|       |           `-CXXMemberCallExpr 0x5570a3e4eb98 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5570a3e4eb08 <col:26> '<bound member function type>' ->find 0x5570a3e469f8
|       |             | `-CXXThisExpr 0x5570a3e4eaf8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5570a3e4ebd0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e4eb38 <col:31> 'const char *' lvalue ParmVar 0x5570a3e27ba0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5570a3e4ebe8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e4eb58 <col:40> 'int' lvalue ParmVar 0x5570a3e27c20 'flags' 'int'
|       |             `-DeclRefExpr 0x5570a3e4eb78 <col:47> 'Args::Slot *' lvalue Var 0x5570a3e4ea00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5570a3e4ed28 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5570a3e4ed10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5570a3e4ecf0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5570a3e4ecc0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |       `-ImplicitCastExpr 0x5570a3e4eca8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5570a3e4ec88 <col:20> 'String' lvalue Var 0x5570a3e4ea90 'str' 'String'
|       `-CompoundStmt 0x5570a3e4f798 <col:61, line:736:9>
|         |-DeclStmt 0x5570a3e4f1e0 <line:734:13, col:76>
|         | `-VarDecl 0x5570a3e4ed78 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5570a3e4f1b0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5570a3e4f120 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5570a3e4f168 <col:60> 'T' lvalue ParmVar 0x5570a3e27cc8 'variable' 'T &'
|         |     `-UnaryOperator 0x5570a3e4f198 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5570a3e4f188 <col:71> 'Args *' this
|         `-CallExpr 0x5570a3e4f768 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5570a3e4f208 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|           | `-CXXThisExpr 0x5570a3e4f1f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5570a3e4f728 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5570a3e4f238 <col:23> 'T *' lvalue Var 0x5570a3e4ed78 's' 'T *'
|           | `-CallExpr 0x5570a3e4f6e8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5570a3e4f4c0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5570a3e4f5c0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5570a3e4f5e0 <col:86> 'String' lvalue Var 0x5570a3e4ea90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5570a3e4f690 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5570a3e4f620 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|           |   | `-DeclRefExpr 0x5570a3e4f600 <col:92> 'T *' lvalue Var 0x5570a3e4ed78 's' 'T *'
|           |   `-UnaryOperator 0x5570a3e4f6d0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5570a3e4f6c0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5570a3e4f748 <col:103> 'Args::Slot *' lvalue Var 0x5570a3e4ea00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e283d8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5570a3e27ef8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e27f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5570a3e28338 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e28038 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e280b8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e28158 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5570a3e281f8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5570a3e50690 <col:88, line:745:5>
|     |-DeclStmt 0x5570a3e4f888 <line:741:9, col:26>
|     | `-VarDecl 0x5570a3e4f820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5570a3e4faa8 <line:742:9, col:55>
|     | `-VarDecl 0x5570a3e4f8b0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5570a3e4fa90 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5570a3e4fa60 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5570a3e4fa48 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5570a3e4fa28 <col:22, col:54> 'String' (CXXTemporary 0x5570a3e4fa28)
|     |           `-CXXMemberCallExpr 0x5570a3e4f9b8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5570a3e4f928 <col:22> '<bound member function type>' ->find 0x5570a3e469f8
|     |             | `-CXXThisExpr 0x5570a3e4f918 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5570a3e4f9f0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5570a3e4f958 <col:27> 'const char *' lvalue ParmVar 0x5570a3e28038 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5570a3e4fa08 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5570a3e4f978 <col:36> 'int' lvalue ParmVar 0x5570a3e280b8 'flags' 'int'
|     |             `-DeclRefExpr 0x5570a3e4f998 <col:43> 'Args::Slot *' lvalue Var 0x5570a3e4f820 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5570a3e4fe80 <line:743:9, col:72>
|     | `-VarDecl 0x5570a3e4faf8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5570a3e4fe50 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5570a3e4fdc0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5570a3e4fe08 <col:56> 'T' lvalue ParmVar 0x5570a3e28158 'variable' 'T &'
|     |     `-UnaryOperator 0x5570a3e4fe38 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5570a3e4fe28 <col:67> 'Args *' this
|     `-CallExpr 0x5570a3e50660 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5570a3e4fea8 <col:9> '<bound member function type>' ->postparse 0x5570a3e46c08
|       | `-CXXThisExpr 0x5570a3e4fe98 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5570a3e50620 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5570a3e4fed8 <col:19> 'T *' lvalue Var 0x5570a3e4faf8 's' 'T *'
|       | `-ParenExpr 0x5570a3e50600 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5570a3e505d0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5570a3e505b8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5570a3e505a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5570a3e50580 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5570a3e50550 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |     |       `-ImplicitCastExpr 0x5570a3e50538 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5570a3e4fef8 <col:25> 'String' lvalue Var 0x5570a3e4f8b0 'str' 'String'
|       |     |-CallExpr 0x5570a3e503a8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5570a3e50180 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5570a3e50280 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5570a3e502a0 <col:89> 'String' lvalue Var 0x5570a3e4f8b0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5570a3e50350 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5570a3e502e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|       |     | | `-DeclRefExpr 0x5570a3e502c0 <col:95> 'T *' lvalue Var 0x5570a3e4faf8 's' 'T *'
|       |     | `-UnaryOperator 0x5570a3e50390 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5570a3e50380 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5570a3e50518 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5570a3e504f8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5570a3e504c8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5570a3e50478 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5570a3e50408 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|       |         | | `-DeclRefExpr 0x5570a3e503e8 <col:109> 'T *' lvalue Var 0x5570a3e4faf8 's' 'T *'
|       |         | `-DeclRefExpr 0x5570a3e504a8 <col:113> 'const V' lvalue ParmVar 0x5570a3e281f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5570a3e504e8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5570a3e50640 <col:128> 'Args::Slot *' lvalue Var 0x5570a3e4f820 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e28908 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5570a3e28450 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e284c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e28868 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5570a3e28588 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e28608 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e28680 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e28728 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5570a3e51288 <col:75, line:754:5>
|     |-DeclStmt 0x5570a3e50738 <line:749:9, col:26>
|     | `-VarDecl 0x5570a3e506d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5570a3e51250 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5570a3e51270 <line:750:13, col:58>
|       | `-VarDecl 0x5570a3e50760 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5570a3e50940 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5570a3e50910 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5570a3e508f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5570a3e508d8 <col:26, col:58> 'String' (CXXTemporary 0x5570a3e508d8)
|       |           `-CXXMemberCallExpr 0x5570a3e50868 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5570a3e507d8 <col:26> '<bound member function type>' ->find 0x5570a3e469f8
|       |             | `-CXXThisExpr 0x5570a3e507c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5570a3e508a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e50808 <col:31> 'const char *' lvalue ParmVar 0x5570a3e28588 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5570a3e508b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e50828 <col:40> 'int' lvalue ParmVar 0x5570a3e28608 'flags' 'int'
|       |             `-DeclRefExpr 0x5570a3e50848 <col:47> 'Args::Slot *' lvalue Var 0x5570a3e506d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5570a3e509f8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5570a3e509e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5570a3e509c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5570a3e50990 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |       `-ImplicitCastExpr 0x5570a3e50978 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5570a3e50958 <col:20> 'String' lvalue Var 0x5570a3e50760 'str' 'String'
|       `-CompoundStmt 0x5570a3e51230 <col:61, line:753:9>
|         |-DeclStmt 0x5570a3e50dd0 <line:751:13, col:63>
|         | `-VarDecl 0x5570a3e50a48 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5570a3e50da0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5570a3e50d10 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5570a3e50d58 <col:47> 'T' lvalue ParmVar 0x5570a3e28728 'variable' 'T &'
|         |     `-UnaryOperator 0x5570a3e50d88 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5570a3e50d78 <col:58> 'Args *' this
|         `-CallExpr 0x5570a3e51200 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5570a3e50df8 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|           | `-CXXThisExpr 0x5570a3e50de8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5570a3e511c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5570a3e50e28 <col:23> 'T *' lvalue Var 0x5570a3e50a48 's' 'T *'
|           | `-CallExpr 0x5570a3e51180 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5570a3e51010 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5570a3e51058 <col:56> 'P' lvalue ParmVar 0x5570a3e28680 'parser' 'P'
|           |   |-DeclRefExpr 0x5570a3e51078 <col:64> 'String' lvalue Var 0x5570a3e50760 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5570a3e51128 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5570a3e510b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|           |   | `-DeclRefExpr 0x5570a3e51098 <col:70> 'T *' lvalue Var 0x5570a3e50a48 's' 'T *'
|           |   `-UnaryOperator 0x5570a3e51168 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5570a3e51158 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5570a3e511e0 <col:81> 'Args::Slot *' lvalue Var 0x5570a3e506d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e28f68 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5570a3e28980 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5570a3e289f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5570a3e28a78 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5570a3e28ec8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5570a3e28b40 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e28bc0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e28c38 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e28cd8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5570a3e28d78 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5570a3e553a0 <col:98, line:762:5>
|     |-DeclStmt 0x5570a3e51320 <line:758:9, col:26>
|     | `-VarDecl 0x5570a3e512b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5570a3e51540 <line:759:9, col:55>
|     | `-VarDecl 0x5570a3e51348 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5570a3e51528 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5570a3e514f8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5570a3e514e0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5570a3e514c0 <col:22, col:54> 'String' (CXXTemporary 0x5570a3e514c0)
|     |           `-CXXMemberCallExpr 0x5570a3e51450 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5570a3e513c0 <col:22> '<bound member function type>' ->find 0x5570a3e469f8
|     |             | `-CXXThisExpr 0x5570a3e513b0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5570a3e51488 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5570a3e513f0 <col:27> 'const char *' lvalue ParmVar 0x5570a3e28b40 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5570a3e514a0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5570a3e51410 <col:36> 'int' lvalue ParmVar 0x5570a3e28bc0 'flags' 'int'
|     |             `-DeclRefExpr 0x5570a3e51430 <col:43> 'Args::Slot *' lvalue Var 0x5570a3e512b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5570a3e51960 <line:760:9, col:59>
|     | `-VarDecl 0x5570a3e51598 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5570a3e51930 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5570a3e518a0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5570a3e518e8 <col:43> 'T' lvalue ParmVar 0x5570a3e28cd8 'variable' 'T &'
|     |     `-UnaryOperator 0x5570a3e51918 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5570a3e51908 <col:54> 'Args *' this
|     `-CallExpr 0x5570a3e55370 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5570a3e51988 <col:9> '<bound member function type>' ->postparse 0x5570a3e46c08
|       | `-CXXThisExpr 0x5570a3e51978 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5570a3e51fa8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5570a3e519b8 <col:19> 'T *' lvalue Var 0x5570a3e51598 's' 'T *'
|       | `-ParenExpr 0x5570a3e51f88 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5570a3e51f58 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5570a3e51f40 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5570a3e51f28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5570a3e51f08 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5570a3e51ed8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |     |       `-ImplicitCastExpr 0x5570a3e51ec0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5570a3e519d8 <col:25> 'String' lvalue Var 0x5570a3e51348 'str' 'String'
|       |     |-CallExpr 0x5570a3e51d30 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5570a3e51bc0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5570a3e51c08 <col:59> 'P' lvalue ParmVar 0x5570a3e28c38 'parser' 'P'
|       |     | |-DeclRefExpr 0x5570a3e51c28 <col:67> 'String' lvalue Var 0x5570a3e51348 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5570a3e51cd8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5570a3e51c68 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|       |     | | `-DeclRefExpr 0x5570a3e51c48 <col:73> 'T *' lvalue Var 0x5570a3e51598 's' 'T *'
|       |     | `-UnaryOperator 0x5570a3e51d18 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5570a3e51d08 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5570a3e51ea0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5570a3e51e80 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5570a3e51e50 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5570a3e51e00 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5570a3e51d90 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|       |         | | `-DeclRefExpr 0x5570a3e51d70 <col:87> 'T *' lvalue Var 0x5570a3e51598 's' 'T *'
|       |         | `-DeclRefExpr 0x5570a3e51e30 <col:91> 'const V' lvalue ParmVar 0x5570a3e28d78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5570a3e51e70 <col:98> 'bool' true
|       `-DeclRefExpr 0x5570a3e51fc8 <col:106> 'Args::Slot *' lvalue Var 0x5570a3e512b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e295d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5570a3e28fe8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e29068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5570a3e290e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5570a3e29538 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5570a3e291b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e29230 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e292a8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e29348 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5570a3e293e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5570a3e56378 <col:60, line:773:5>
|     |-DeclStmt 0x5570a3e55448 <line:767:9, col:26>
|     | `-VarDecl 0x5570a3e553e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5570a3e56340 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5570a3e56360 <line:768:13, col:58>
|       | `-VarDecl 0x5570a3e55470 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5570a3e55650 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5570a3e55620 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5570a3e55608 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5570a3e555e8 <col:26, col:58> 'String' (CXXTemporary 0x5570a3e555e8)
|       |           `-CXXMemberCallExpr 0x5570a3e55578 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5570a3e554e8 <col:26> '<bound member function type>' ->find 0x5570a3e469f8
|       |             | `-CXXThisExpr 0x5570a3e554d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5570a3e555b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e55518 <col:31> 'const char *' lvalue ParmVar 0x5570a3e291b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5570a3e555c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e55538 <col:40> 'int' lvalue ParmVar 0x5570a3e29230 'flags' 'int'
|       |             `-DeclRefExpr 0x5570a3e55558 <col:47> 'Args::Slot *' lvalue Var 0x5570a3e553e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5570a3e55708 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5570a3e556f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5570a3e556d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5570a3e556a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |       `-ImplicitCastExpr 0x5570a3e55688 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5570a3e55668 <col:20> 'String' lvalue Var 0x5570a3e55470 'str' 'String'
|       `-CompoundStmt 0x5570a3e56318 <col:61, line:772:9>
|         |-DeclStmt 0x5570a3e55a40 <line:769:13, col:66>
|         | `-VarDecl 0x5570a3e55758 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5570a3e55a10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5570a3e55980 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5570a3e559c8 <col:49> 'T1' lvalue ParmVar 0x5570a3e29348 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5570a3e559f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5570a3e559e8 <col:61> 'Args *' this
|         |-DeclStmt 0x5570a3e55db0 <line:770:13, col:66>
|         | `-VarDecl 0x5570a3e55ac8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5570a3e55d80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5570a3e55cf0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5570a3e55d38 <col:49> 'T2' lvalue ParmVar 0x5570a3e293e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5570a3e55d68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5570a3e55d58 <col:61> 'Args *' this
|         `-CallExpr 0x5570a3e562e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5570a3e55dd8 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|           | `-CXXThisExpr 0x5570a3e55dc8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5570a3e562a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5570a3e55e48 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5570a3e55e08 <col:23> 'T1 *' lvalue Var 0x5570a3e55758 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5570a3e55e28 <col:29> 'T2 *' lvalue Var 0x5570a3e55ac8 's2' 'T2 *'
|           | `-CallExpr 0x5570a3e56260 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5570a3e56030 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5570a3e56078 <col:63> 'P' lvalue ParmVar 0x5570a3e292a8 'parser' 'P'
|           |   |-DeclRefExpr 0x5570a3e56098 <col:71> 'String' lvalue Var 0x5570a3e55470 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5570a3e56148 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5570a3e560d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|           |   | `-DeclRefExpr 0x5570a3e560b8 <col:77> 'T1 *' lvalue Var 0x5570a3e55758 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5570a3e56208 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5570a3e56198 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|           |   | `-DeclRefExpr 0x5570a3e56178 <col:82> 'T2 *' lvalue Var 0x5570a3e55ac8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5570a3e56248 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5570a3e56238 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5570a3e562c8 <col:94> 'Args::Slot *' lvalue Var 0x5570a3e553e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e32380 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5570a3e29658 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e322e0 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5570a3e29710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e29790 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e29808 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e56890 <col:67, line:780:5>
|     |-DeclStmt 0x5570a3e56410 <line:777:9, col:26>
|     | `-VarDecl 0x5570a3e563a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5570a3e56858 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5570a3e56878 <line:778:13, col:58>
|       | `-VarDecl 0x5570a3e56438 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5570a3e56618 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5570a3e565e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5570a3e565d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5570a3e565b0 <col:26, col:58> 'String' (CXXTemporary 0x5570a3e565b0)
|       |           `-CXXMemberCallExpr 0x5570a3e56540 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5570a3e564b0 <col:26> '<bound member function type>' ->find 0x5570a3e469f8
|       |             | `-CXXThisExpr 0x5570a3e564a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5570a3e56578 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e564e0 <col:31> 'const char *' lvalue ParmVar 0x5570a3e29710 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5570a3e56590 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5570a3e56500 <col:40> 'int' lvalue ParmVar 0x5570a3e29790 'flags' 'int'
|       |             `-DeclRefExpr 0x5570a3e56520 <col:47> 'Args::Slot *' lvalue Var 0x5570a3e563a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5570a3e566d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5570a3e566b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5570a3e56698 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5570a3e56668 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|       |       `-ImplicitCastExpr 0x5570a3e56650 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5570a3e56630 <col:20> 'String' lvalue Var 0x5570a3e56438 'str' 'String'
|       `-CallExpr 0x5570a3e56828 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5570a3e566f8 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|         | `-CXXThisExpr 0x5570a3e566e8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5570a3e567d8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5570a3e56748 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5570a3e56728 <col:23> 'P' lvalue ParmVar 0x5570a3e29808 'parser' 'P'
|         | |-DeclRefExpr 0x5570a3e56790 <col:36> 'String' lvalue Var 0x5570a3e56438 'str' 'String'
|         | `-UnaryOperator 0x5570a3e567c0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5570a3e567b0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5570a3e56808 <col:49> 'Args::Slot *' lvalue Var 0x5570a3e563a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5570a3e32718 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5570a3e323f0 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5570a3e32678 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5570a3e324a0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e32520 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e32598 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5570a3e57200 <col:71, line:792:5>
|     |-DeclStmt 0x5570a3e56928 <line:784:9, col:26>
|     | `-VarDecl 0x5570a3e568c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5570a3e569f8 <line:785:9, col:29>
|     | `-VarDecl 0x5570a3e56958 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5570a3e569e0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5570a3e569c0 <col:28> 'int' 1
|     |-WhileStmt 0x5570a3e570b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5570a3e570d0 <line:786:16, col:61>
|     | | `-VarDecl 0x5570a3e56a20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5570a3e56c00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5570a3e56bd0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5570a3e56bb8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5570a3e56b98 <col:29, col:61> 'String' (CXXTemporary 0x5570a3e56b98)
|     | |           `-CXXMemberCallExpr 0x5570a3e56b28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5570a3e56a98 <col:29> '<bound member function type>' ->find 0x5570a3e469f8
|     | |             | `-CXXThisExpr 0x5570a3e56a88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5570a3e56b60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e56ac8 <col:34> 'const char *' lvalue ParmVar 0x5570a3e324a0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5570a3e56b78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e56ae8 <col:43> 'int' lvalue ParmVar 0x5570a3e32520 'flags' 'int'
|     | |             `-DeclRefExpr 0x5570a3e56b08 <col:50> 'Args::Slot *' lvalue Var 0x5570a3e568c0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5570a3e56cb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5570a3e56ca0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5570a3e56c80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5570a3e56c50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|     | |       `-ImplicitCastExpr 0x5570a3e56c38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5570a3e56c18 <col:23> 'String' lvalue Var 0x5570a3e56a20 'str' 'String'
|     | `-CompoundStmt 0x5570a3e57088 <col:64, line:790:9>
|     |   |-CallExpr 0x5570a3e56e10 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5570a3e56ce0 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|     |   | | `-CXXThisExpr 0x5570a3e56cd0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5570a3e56dc0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5570a3e56d30 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5570a3e56d10 <col:23> 'P' lvalue ParmVar 0x5570a3e32598 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5570a3e56d78 <col:36> 'String' lvalue Var 0x5570a3e56a20 'str' 'String'
|     |   | | `-UnaryOperator 0x5570a3e56da8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5570a3e56d98 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5570a3e56df0 <col:49> 'Args::Slot *' lvalue Var 0x5570a3e568c0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5570a3e56fa8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5570a3e56e40 <col:13> 'int' lvalue Var 0x5570a3e56958 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5570a3e56f90 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5570a3e56f70 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5570a3e56ed8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5570a3e56eb8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5570a3e56ea0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5570a3e56e60 <col:28> 'int' lvalue Var 0x5570a3e56958 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5570a3e56e80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5570a3e56f58 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5570a3e56f28 <col:49> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|     |   |         `-ImplicitCastExpr 0x5570a3e56f08 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5570a3e56ef8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5570a3e57058 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5570a3e56fc8 <col:13> 'int' lvalue ParmVar 0x5570a3e32520 'flags' 'int'
|     |     `-UnaryOperator 0x5570a3e57040 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5570a3e57028 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5570a3e57008 <col:23> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5570a3e571e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5570a3e57118 <col:9> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|       | `-ImplicitCastExpr 0x5570a3e570f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5570a3e570e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5570a3e571c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5570a3e571a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5570a3e57188 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5570a3e57148 <col:25> 'int' lvalue Var 0x5570a3e56958 'read_status' 'int'
|           `-IntegerLiteral 0x5570a3e57168 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5570a3e32bf8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5570a3e32788 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e32808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e32b58 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5570a3e328c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e32948 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e329c0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e32a68 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5570a3e58190 <col:84, line:805:5>
|     |-DeclStmt 0x5570a3e572a8 <line:796:9, col:26>
|     | `-VarDecl 0x5570a3e57240 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5570a3e57378 <line:797:9, col:29>
|     | `-VarDecl 0x5570a3e572d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5570a3e57360 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5570a3e57340 <col:28> 'int' 1
|     |-DeclStmt 0x5570a3e576b0 <line:798:9, col:71>
|     | `-VarDecl 0x5570a3e573c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5570a3e57680 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5570a3e575f0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5570a3e57638 <col:55> 'T' lvalue ParmVar 0x5570a3e32a68 'variable' 'T &'
|     |     `-UnaryOperator 0x5570a3e57668 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5570a3e57658 <col:66> 'Args *' this
|     |-WhileStmt 0x5570a3e58040 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5570a3e58060 <line:799:16, col:61>
|     | | `-VarDecl 0x5570a3e576d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5570a3e578b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5570a3e57888 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5570a3e57870 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5570a3e57850 <col:29, col:61> 'String' (CXXTemporary 0x5570a3e57850)
|     | |           `-CXXMemberCallExpr 0x5570a3e577e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5570a3e57750 <col:29> '<bound member function type>' ->find 0x5570a3e469f8
|     | |             | `-CXXThisExpr 0x5570a3e57740 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5570a3e57818 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e57780 <col:34> 'const char *' lvalue ParmVar 0x5570a3e328c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5570a3e57830 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e577a0 <col:43> 'int' lvalue ParmVar 0x5570a3e32948 'flags' 'int'
|     | |             `-DeclRefExpr 0x5570a3e577c0 <col:50> 'Args::Slot *' lvalue Var 0x5570a3e57240 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5570a3e57970 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5570a3e57958 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5570a3e57938 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5570a3e57908 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|     | |       `-ImplicitCastExpr 0x5570a3e578f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5570a3e578d0 <col:23> 'String' lvalue Var 0x5570a3e576d8 'str' 'String'
|     | `-CompoundStmt 0x5570a3e58018 <col:64, line:803:9>
|     |   |-CallExpr 0x5570a3e57da0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5570a3e57998 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|     |   | | `-CXXThisExpr 0x5570a3e57988 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5570a3e57d60 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5570a3e579c8 <col:23> 'T *' lvalue Var 0x5570a3e573c8 's' 'T *'
|     |   | | `-CallExpr 0x5570a3e57d20 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5570a3e57bb0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5570a3e57bf8 <col:56> 'P' lvalue ParmVar 0x5570a3e329c0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5570a3e57c18 <col:64> 'String' lvalue Var 0x5570a3e576d8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5570a3e57cc8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5570a3e57c58 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|     |   | |   | `-DeclRefExpr 0x5570a3e57c38 <col:70> 'T *' lvalue Var 0x5570a3e573c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5570a3e57d08 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5570a3e57cf8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5570a3e57d80 <col:81> 'Args::Slot *' lvalue Var 0x5570a3e57240 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5570a3e57f38 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5570a3e57dd0 <col:13> 'int' lvalue Var 0x5570a3e572d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5570a3e57f20 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5570a3e57f00 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5570a3e57e68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5570a3e57e48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5570a3e57e30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5570a3e57df0 <col:28> 'int' lvalue Var 0x5570a3e572d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5570a3e57e10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5570a3e57ee8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5570a3e57eb8 <col:49> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|     |   |         `-ImplicitCastExpr 0x5570a3e57e98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5570a3e57e88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5570a3e57fe8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5570a3e57f58 <col:13> 'int' lvalue ParmVar 0x5570a3e32948 'flags' 'int'
|     |     `-UnaryOperator 0x5570a3e57fd0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5570a3e57fb8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5570a3e57f98 <col:23> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5570a3e58170 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5570a3e580a8 <col:9> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|       | `-ImplicitCastExpr 0x5570a3e58088 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5570a3e58078 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5570a3e58150 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5570a3e58130 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5570a3e58118 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5570a3e580d8 <col:25> 'int' lvalue Var 0x5570a3e572d8 'read_status' 'int'
|           `-IntegerLiteral 0x5570a3e580f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5570a3e331d8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5570a3e32c70 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5570a3e32ce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5570a3e33138 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5570a3e32da8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5570a3e32e28 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5570a3e32ea0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5570a3e32ff0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5570a3e58f98 <col:87, line:821:5>
|     |-DeclStmt 0x5570a3e58240 <line:809:9, col:26>
|     | `-VarDecl 0x5570a3e581d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5570a3e58310 <line:810:9, col:29>
|     | `-VarDecl 0x5570a3e58270 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5570a3e582f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5570a3e582d8 <col:28> 'int' 1
|     |-DeclStmt 0x5570a3e58558 <line:811:9, col:38>
|     | `-VarDecl 0x5570a3e58440 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5570a3e58530 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5570a3e584b8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5570a3e58510 <col:29> 'Vector<T>' lvalue ParmVar 0x5570a3e32ff0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5570a3e58e48 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5570a3e58e68 <line:812:16, col:61>
|     | | `-VarDecl 0x5570a3e58580 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5570a3e58760 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5570a3e58730 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5570a3e58718 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5570a3e586f8 <col:29, col:61> 'String' (CXXTemporary 0x5570a3e586f8)
|     | |           `-CXXMemberCallExpr 0x5570a3e58688 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5570a3e585f8 <col:29> '<bound member function type>' ->find 0x5570a3e469f8
|     | |             | `-CXXThisExpr 0x5570a3e585e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5570a3e586c0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e58628 <col:34> 'const char *' lvalue ParmVar 0x5570a3e32da8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5570a3e586d8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5570a3e58648 <col:43> 'int' lvalue ParmVar 0x5570a3e32e28 'flags' 'int'
|     | |             `-DeclRefExpr 0x5570a3e58668 <col:50> 'Args::Slot *' lvalue Var 0x5570a3e581d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5570a3e58818 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5570a3e58800 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5570a3e587e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5570a3e587b0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5570a3b6c8c8
|     | |       `-ImplicitCastExpr 0x5570a3e58798 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5570a3e58778 <col:23> 'String' lvalue Var 0x5570a3e58580 'str' 'String'
|     | `-CompoundStmt 0x5570a3e58e10 <col:64, line:819:9>
|     |   |-DeclStmt 0x5570a3e588d8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5570a3e58840 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5570a3e588b8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5570a3e58a58 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5570a3e58900 <col:13> '<bound member function type>' ->postparse 0x5570a3e46c08
|     |   | | `-CXXThisExpr 0x5570a3e588f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5570a3e58a00 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5570a3e58950 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5570a3e58930 <col:23> 'P' lvalue ParmVar 0x5570a3e32ea0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5570a3e58998 <col:36> 'String' lvalue Var 0x5570a3e58580 'str' 'String'
|     |   | | |-DeclRefExpr 0x5570a3e589b8 <col:41> 'T' lvalue Var 0x5570a3e58840 'sx' 'T'
|     |   | | `-UnaryOperator 0x5570a3e589e8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5570a3e589d8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5570a3e58a38 <col:53> 'Args::Slot *' lvalue Var 0x5570a3e581d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5570a3e58bb0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5570a3e58ae8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5570a3e58ab8 <col:17> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|     |   | |   `-ImplicitCastExpr 0x5570a3e58a98 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5570a3e58a88 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5570a3e58b88 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5570a3e58b20 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5570a3e58b00 <col:17> 'Vector<T> *' lvalue Var 0x5570a3e58440 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5570a3e58b68 <col:30> 'T' lvalue Var 0x5570a3e58840 'sx' 'T'
|     |   |-BinaryOperator 0x5570a3e58d30 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5570a3e58bc8 <col:13> 'int' lvalue Var 0x5570a3e58270 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5570a3e58d18 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5570a3e58cf8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5570a3e58c60 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5570a3e58c40 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5570a3e58c28 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5570a3e58be8 <col:28> 'int' lvalue Var 0x5570a3e58270 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5570a3e58c08 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5570a3e58ce0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5570a3e58cb0 <col:49> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|     |   |         `-ImplicitCastExpr 0x5570a3e58c90 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5570a3e58c80 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5570a3e58de0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5570a3e58d50 <col:13> 'int' lvalue ParmVar 0x5570a3e32e28 'flags' 'int'
|     |     `-UnaryOperator 0x5570a3e58dc8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5570a3e58db0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5570a3e58d90 <col:23> 'const int' lvalue Var 0x5570a3e15db8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5570a3e58f78 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5570a3e58eb0 <col:9> 'bool' lvalue ->_read_status 0x5570a3e0d6a0
|       | `-ImplicitCastExpr 0x5570a3e58e90 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5570a3e58e80 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5570a3e58f58 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5570a3e58f38 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5570a3e58f20 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5570a3e58ee0 <col:25> 'int' lvalue Var 0x5570a3e58270 'read_status' 'int'
|           `-IntegerLiteral 0x5570a3e58f00 <col:40> 'int' 1
|-AccessSpecDecl 0x5570a3e33250 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5570a3e33278 prev 0x5570a3e12eb0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5570a3e33370 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5570a3e33460 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5570a3e58fd0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5570a3e33550 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5570a3e58fe0 <col:25, line:830:9>
| |-CXXMethodDecl 0x5570a3e33650 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5570a3e33700 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5570a3e337a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5570a3e337a8
| | `-ParmVarDecl 0x5570a3e338b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5570a3e34078 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5570a3e34078
|   `-ParmVarDecl 0x5570a3e34188 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5570a3e33928 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5570a3e33a88 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5570a3e33c80 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5570a3e33b30 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5570a3e33ba8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5570a3e591c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5570a3e33f38 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5570a3e59030 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5570a3e58ff0 <col:20> 'void *' lvalue ParmVar 0x5570a3e33b30 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5570a3e33fa0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5570a3e590b8 <col:32, col:45> 'char *' array Function 0x5570a398f558 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5570a3e590a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5570a3e59070 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5570a3e33ba8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5570a3e34000 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5570a3e59180 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5570a3e59140 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5570a3e33ba8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5570a3e59240 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5570a3e33d80 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5570a3e33550 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5570a3e592c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5570a3e592a8 <line:840:13, col:22> 'void' array Function 0x5570a398f8b8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5570a3e59290 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5570a3e59260 <col:22> 'char *' lvalue ->_slot 0x5570a3e33fa0
| |         `-CXXThisExpr 0x5570a3e59250 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5570a3e33e80 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5570a3e33650 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5570a3e594b8 <col:22, line:844:9>
| |   `-CallExpr 0x5570a3e59420 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5570a3e59408 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5570a3e593e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5570a3a9b318 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5570a3e59458 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5570a3e59338 <col:20> 'void *' lvalue ->_ptr 0x5570a3e33f38
| |     |   `-CXXThisExpr 0x5570a3e59328 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5570a3e59488 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5570a3e59470 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5570a3e59378 <col:26> 'char *' lvalue ->_slot 0x5570a3e33fa0
| |     |     `-CXXThisExpr 0x5570a3e59368 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5570a3e594a0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5570a3e593b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5570a3e34000
| |         `-CXXThisExpr 0x5570a3e593a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5570a3e33f38 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5570a3e33fa0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5570a3e34000 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5570a3e341f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5570a3e341f8
| | `-ParmVarDecl 0x5570a3e34308 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5570a3e343a8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5570a3e343a8
|   `-ParmVarDecl 0x5570a3e344b8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5570a3e34658 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5570a3e34528 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5570a3e345c8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5570a3e348f0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5570a3e34ae8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5570a3e349b8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5570a3e34c68 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5570a3e594f0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5570a3e594d0 <col:20> 'T *' lvalue ParmVar 0x5570a3e349b8 'ptr' 'T *'
|   | `-CompoundStmt 0x5570a3e59540 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5570a3e34bb8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5570a3e33650 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5570a3e596f0 <col:22, line:857:9>
|   |   `-CallExpr 0x5570a3e596c0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5570a3e59550 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5570a3b53a48 0x5570a3afdd78
|   |     |-CXXOperatorCallExpr 0x5570a3e59650 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5570a3e595e0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5570a3d609f8 0x5570a3d60618 0x5570a3d60248 0x5570a3d5fe68 0x5570a3d5fa88 0x5570a3d5f6b8
|   |     | `-MemberExpr 0x5570a3e595b0 <col:29> 'T *' lvalue ->_ptr 0x5570a3e34c68
|   |     |   `-CXXThisExpr 0x5570a3e595a0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5570a3e59690 <col:35> 'T' lvalue ->_slot 0x5570a3e34cc8
|   |       `-CXXThisExpr 0x5570a3e59680 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5570a3e34c68 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5570a3e34cc8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5570a3e34d30 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5570a3e34e30 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5570a3e34e80 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3e34e10 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5570a3e34df0 <col:31> 'int' 48
|-FieldDecl 0x5570a3e34ea8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5570a3e34f08 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5570a3e34f68 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5570a3e350a0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5570a3e462a0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5570a3e46300 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5570a3e463b0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5570a3e465d8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5570a3e464e0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5570a3e46728 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5570a3e46698 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5570a3e469f8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5570a3e467e8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5570a3e46868 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5570a3e46910 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5570a3e46c08 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5570a3e46ac0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5570a3e46b38 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5570a3e46cd8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5570a3e46e28 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5570a3e46d90 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5570a3e471b8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5570a3e46ee8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5570a3e46f68 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5570a3e47010 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5570a3e470c8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5570a3e473e0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5570a3e47290 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5570a3e47308 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5570a3e476f8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5570a3e47490 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5570a3e47658 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5570a3e47568 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e76b58 <../dummy_inc/click/args.hh:1369:1, line:1373:1> line:1369:7 referenced class WordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3e76c78 <col:1, col:7> col:7 implicit class WordArg
|-AccessSpecDecl 0x5570a3e76d08 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5570a3e76f70 <line:1370:5, line:1372:5> line:1370:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5570a3e76db0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5570a3e76e28 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5570a3e76ea0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5570a3e77040 <col:79> 'const ArgContext' lvalue Var 0x5570a3e59718 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5570a3e771b8 <col:91, line:1372:5>
|   `-ReturnStmt 0x5570a3e771a8 <line:1371:9, col:39>
|     `-CallExpr 0x5570a3e77158 <col:16, col:39> 'bool'
|       |-ImplicitCastExpr 0x5570a3e77140 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5570a3e77120 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5570a3e76aa0 'cp_word' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5570a3e770a8 <col:24> 'const String' lvalue ParmVar 0x5570a3e76db0 'str' 'const String &'
|       |-UnaryOperator 0x5570a3e770e8 <col:29, col:30> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5570a3e770c8 <col:30> 'String' lvalue ParmVar 0x5570a3e76e28 'result' 'String &'
|       `-ImplicitCastExpr 0x5570a3e77190 <col:38> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5570a3e77100 <col:38> 'int' 0
|-CXXConstructorDecl 0x5570a3e8a730 <line:1369:7> col:7 implicit referenced constexpr WordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5570a3e8a838 <col:7> col:7 implicit constexpr WordArg 'void (const WordArg &)' inline default trivial noexcept-unevaluated 0x5570a3e8a838
| `-ParmVarDecl 0x5570a3e8a948 <col:7> col:7 'const WordArg &'
|-CXXConstructorDecl 0x5570a3e8a9e8 <col:7> col:7 implicit used constexpr WordArg 'void (WordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3e8aaf8 <col:7> col:7 'WordArg &&'
| `-CompoundStmt 0x5570a3e8b220 <col:7>
`-CXXDestructorDecl 0x5570a3e8ab98 <col:7> col:7 implicit referenced ~WordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.WordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.WordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e73080 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3e73198 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x5570a3e73228 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5570a3e73338 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x5570a3e73268 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x5570a3e73688 'size' 'int'
| | `-ImplicitCastExpr 0x5570a3e73750 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3e73710 <col:16> 'int' lvalue ParmVar 0x5570a3e73268 's' 'int'
| `-CompoundStmt 0x5570a3e73798 <col:19, line:1297:5>
|-CXXMethodDecl 0x5570a3e73590 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x5570a3e733f8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5570a3e73478 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x5570a3e734f0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5570a3e736f0 <col:73> 'const ArgContext' lvalue Var 0x5570a3e59718 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x5570a3e73648 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x5570a3e73688 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x5570a3e8b358 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x5570a3e8b358
| `-ParmVarDecl 0x5570a3e8b468 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x5570a3e8b508 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3e8b618 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x5570a3e73688 'size' 'int'
| | `-ImplicitCastExpr 0x5570a3e8be28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5570a3e8bde0 <col:7> 'int' xvalue .size 0x5570a3e73688
| |     `-CXXStaticCastExpr 0x5570a3e8bdb0 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x5570a3e8bd80 <col:7> 'AnnoArg' lvalue ParmVar 0x5570a3e8b618 '' 'AnnoArg &&'
| `-CompoundStmt 0x5570a3e8be70 <col:7>
`-CXXDestructorDecl 0x5570a3e8b6b8 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e63840 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3e63958 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5570a3e639e8 <col:16, col:22> col:16 public
|-EnumDecl 0x5570a3e63a10 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5570a3e63b10 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5570a3e63d60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e63af0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3e63ad0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5570a3e63ba0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5570a3e63d78 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e63b80 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5570a3e63b60 <col:24> 'int' 22
| |-EnumConstantDecl 0x5570a3e63c30 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5570a3e63d90 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e63c10 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5570a3e63bf0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5570a3e63cc0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5570a3e63da8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3e63ca0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5570a3e63c80 <col:25> 'int' 95
| `-EnumConstantDecl 0x5570a3e63d10 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5570a3e65720 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5570a3e65b58 <col:7>
|-CXXConstructorDecl 0x5570a3e65828 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5570a3e65828
| `-ParmVarDecl 0x5570a3e65938 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5570a3e659d8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x5570a3e659d8
| `-ParmVarDecl 0x5570a3e65ae8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x5570a3e67c68 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3e63dd8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5570a3e63f38 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5570a3e63fc8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5570a3e64000 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5570a39918b0 'uint32_t' sugar
|   |-Typedef 0x5570a38a5408 'uint32_t'
|   `-TypedefType 0x5570a387e4b0 '__uint32_t' sugar
|     |-Typedef 0x5570a387e0a8 '__uint32_t'
|     `-BuiltinType 0x5570a383c460 'unsigned int'
|-CXXConstructorDecl 0x5570a3e64148 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5570a3e64070 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5570a3e65628 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5570a3e65b68 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5570a3e64ee0 'base' 'int'
| | `-ImplicitCastExpr 0x5570a3e656c8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3e65688 <col:16> 'int' lvalue ParmVar 0x5570a3e64070 'b' 'int'
| `-CompoundStmt 0x5570a3e65bd8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5570a3e64640 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5570a3e64210 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5570a3e64290 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5570a3e64308 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5570a3e64388 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5570a3e64448 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5570a3e644c8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5570a3e64a98 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5570a3e64710 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5570a3e649f8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x5570a3e647b8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x5570a3e64858 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x5570a3e648d0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x5570a3e65648 <col:82> 'const ArgContext' lvalue Var 0x5570a3e59718 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5570a3e66b08 <col:94, line:1067:5>
|     |-DeclStmt 0x5570a3e65d68 <line:1054:9, col:64>
|     | `-VarDecl 0x5570a3e65bf8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5570a3e65d20 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x5570a3e65f88 <line:1055:9, col:91>
|     | `-VarDecl 0x5570a3e65d98 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5570a3e65f60 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x5570a3e65f40 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x5570a3e65ef0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x5570a3e65ed0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x5570a3e65e78 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x5570a3e65e28 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x5570a3e65e58 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x5570a3e65eb8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x5570a3e65e98 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x5570a3e65f20 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5570a3e660e8 <line:1056:9, col:27>
|     | `-VarDecl 0x5570a3e66080 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x5570a3e66538 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x5570a3e66468 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5570a3e663e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5570a3dbb470 0x5570a3d5b878 0x5570a3ba4e58 0x5570a3ba4b30 0x5570a3b96310 0x5570a3b95fc0 0x5570a3b958b0 0x5570a3b68220 0x5570a3af46e0
|     | | |-CallExpr 0x5570a3e66320 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x5570a3e66110 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x5570a3e661c0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5570a3e66190 <col:19, col:23> '<bound member function type>' .begin 0x5570a3b85518
|     | | | |   `-DeclRefExpr 0x5570a3e66170 <col:19> 'const String' lvalue ParmVar 0x5570a3e647b8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5570a3e66230 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5570a3e66200 <col:32, col:36> '<bound member function type>' .end 0x5570a3b85730
|     | | | |   `-DeclRefExpr 0x5570a3e661e0 <col:32> 'const String' lvalue ParmVar 0x5570a3e647b8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x5570a3e66250 <col:43> 'const bool' lvalue Var 0x5570a3e65bf8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x5570a3e662b8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x5570a3e66298 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x5570a3e662e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5570a3e66080 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x5570a3e66300 <col:73> 'const int' lvalue Var 0x5570a3e65d98 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x5570a3e663c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5570a3e66390 <col:16, col:20> '<bound member function type>' .end 0x5570a3b85730
|     | |     `-DeclRefExpr 0x5570a3e66370 <col:16> 'const String' lvalue ParmVar 0x5570a3e647b8 'str' 'const String &'
|     | `-BinaryOperator 0x5570a3e66518 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5570a3e664b0 <col:13> 'int' lvalue ->status 0x5570a3e64f48
|     |   | `-CXXThisExpr 0x5570a3e664a0 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5570a3e66500 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5570a3e664e0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5570a3e63ba0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5570a3e66788 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5570a3e66670 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5570a3e66658 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5570a3e66640 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5570a3e66560 <col:13> 'int' lvalue ->status 0x5570a3e64f48
|     | | |     `-CXXThisExpr 0x5570a3e66550 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5570a3e66620 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5570a3e665f0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5570a3e665a0 <col:23> 'int' lvalue ->status 0x5570a3e64f48
|     | |   |   `-CXXThisExpr 0x5570a3e66590 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5570a3e66608 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5570a3e665d0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5570a3e63c30 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5570a3e66768 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5570a3e66708 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5570a3e666b0 <col:13, col:18> '<bound member function type>' .error 0x5570a3e0ccb0
|     |   | | `-DeclRefExpr 0x5570a3e66690 <col:13> 'const ArgContext' lvalue ParmVar 0x5570a3e648d0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5570a3e66730 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5570a3e666e0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5570a3e66758 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5570a3e66748 <col:20> 'bool' false
|     |-DeclStmt 0x5570a3e66958 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5570a3e66900 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x5570a3e66890 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x5570a3e66ab8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5570a3e66970 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5570a3b286a8
|     | |-DeclRefExpr 0x5570a3e669b8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5570a3e66080 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x5570a3e66a88 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5570a3e66a00 <col:64> 'V' lvalue ParmVar 0x5570a3e64858 'result' 'V &'
|     `-ReturnStmt 0x5570a3e66af8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5570a3e66ae8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5570a3e64e58 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5570a3e64b08 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5570a3e64db8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5570a3e64bb8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5570a3e64c58 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5570a3e64cd0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5570a3e65668 <col:71> 'const ArgContext' lvalue Var 0x5570a3e59718 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5570a3e67288 <col:83, line:1083:5>
| |   |-DeclStmt 0x5570a3e66bd0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5570a3e66b68 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5570a3e67260 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5570a3e66e70 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5570a3e66ce8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5570a3e66cb0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5570a3e66bf8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5570a3e66c50 <col:31> 'const String' lvalue ParmVar 0x5570a3e64bb8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5570a3e66c70 <col:36> 'V' lvalue Var 0x5570a3e66b68 'x' 'V'
| |     | |   `-DeclRefExpr 0x5570a3e66c90 <col:39> 'const ArgContext' lvalue ParmVar 0x5570a3e64cd0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5570a3e66e50 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5570a3e66e30 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5570a3e66e18 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5570a3e66e00 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5570a3e66d10 <col:17> 'int' lvalue ->status 0x5570a3e64f48
| |     |     |     `-CXXThisExpr 0x5570a3e66d00 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5570a3e66de0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5570a3e66db0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5570a3e66d50 <col:27> 'int' lvalue ->status 0x5570a3e64f48
| |     |       |   `-CXXThisExpr 0x5570a3e66d40 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5570a3e66dc8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5570a3e66d90 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5570a3e63c30 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5570a3e66ea0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5570a3e66e90 <col:20> 'bool' false
| |     `-IfStmt 0x5570a3e67238 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5570a3e66f40 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5570a3e66f10 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5570a3e66ec0 <col:18> 'int' lvalue ->status 0x5570a3e64f48
| |       | |   `-CXXThisExpr 0x5570a3e66eb0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5570a3e66f28 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5570a3e66ef0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5570a3e63c30 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5570a3e67178 <col:42, line:1079:9>
| |       | |-CallExpr 0x5570a3e67120 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5570a3e66f70 <line:1076:13> '<bound member function type>' ->range_error 0x5570a3e65558
| |       | | | `-CXXThisExpr 0x5570a3e66f60 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5570a3e66fa0 <col:25> 'const ArgContext' lvalue ParmVar 0x5570a3e64cd0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5570a3e67080 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5570a3e670f8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5570a3e670d8 <col:43> 'V' lvalue Var 0x5570a3e66b68 'x' 'V'
| |       | `-ReturnStmt 0x5570a3e67168 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5570a3e67158 <col:20> 'bool' false
| |       `-CompoundStmt 0x5570a3e67218 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5570a3e671d8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5570a3e67198 <col:13> 'V' lvalue ParmVar 0x5570a3e64c58 'result' 'V &'
| |         | `-DeclRefExpr 0x5570a3e671b8 <col:22> 'V' lvalue Var 0x5570a3e66b68 'x' 'V'
| |         `-ReturnStmt 0x5570a3e67208 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5570a3e671f8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5570a3e8cd08 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5570a3e8cae8 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x5570a3e8cbb8 <col:35, col:38> col:38 result 'unsigned int &'
|   `-ParmVarDecl 0x5570a3e8cc20 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x5570a3e65668 <col:71> 'const ArgContext' lvalue Var 0x5570a3e59718 'blank_args' 'const ArgContext'
|-FieldDecl 0x5570a3e64ee0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x5570a3e64f48 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5570a3e64f98 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5570a3e65250 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5570a3e64fd8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5570a3e65058 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5570a3e650d0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5570a3e65150 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5570a3e65558 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5570a3e65320 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5570a3e65398 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5570a3e65430 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5570a3e67ae8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5570a3e67ae8
| `-ParmVarDecl 0x5570a3e67bf8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5570a3e67d78 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x5570a3e67d78
| `-ParmVarDecl 0x5570a3e67e88 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x5570a3e8c890 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3b5c770 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3b5c888 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5570a3b5c918 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5570a3b5c9e8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5570a3b5cad0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3b5cce8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5570a3b5cb90 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5ce98 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5570a3b5cda0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5570a3b5cfe0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5570a3b5cf50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5570a3b5d128 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5570a3b5d098 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5d270 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5570a3b5d1e0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5d338 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5570a3b5d480 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5570a3b5d3f0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5570a3b5d548 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5570a3b5d690 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5570a3b5d600 <col:28> col:31 'int'
|-CXXMethodDecl 0x5570a3b5d808 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5570a3b5d748 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5d950 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5570a3b5d8c0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5da18 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5570a3b5dbd8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5570a3b5dac8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5570a3b5db40 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5de28 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5570a3b5dc98 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3b5dd10 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5570a3b5ded8 <col:86> "" ""
|-CXXMethodDecl 0x5570a3b5e148 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5570a3b5dfb8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5570a3b5e030 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5e2f8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5570a3b5e208 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5570a3b5e4a8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5570a3b5e3b0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5570a3b5e778 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5570a3b5e560 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5570a3b5e5d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5570a3b5e650 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b5ea58 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5570a3b5e840 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5570a3b5e8b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3b5e930 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5570a3b5eb10 <col:115> "" ""
|-AccessSpecDecl 0x5570a3b5eb80 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5570a3b5ebb8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3b600d0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5570a3b600d0
| `-ParmVarDecl 0x5570a3b601d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5570a3b60278 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b60278
| `-ParmVarDecl 0x5570a3b60388 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5570a3b959b8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5570a3d877b0 <col:7>
|-CXXConstructorDecl 0x5570a3b95a90 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5570a3b95a90
| `-ParmVarDecl 0x5570a3b95ba8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5570a3b95c18 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5570a3b95c18
| `-ParmVarDecl 0x5570a3b95d28 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5570a3d8a1b0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d76358 prev 0x5570a3d6b560 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3d76450 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5570a3d76540 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5570a3d76668 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5570a3d767e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5570a3d76968 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5570a3d76ae8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5570a3d87918 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5570a3d88188 <col:11>
|-CXXDestructorDecl 0x5570a3d879f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5570a3d87b28 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5570a3d87b28
| `-ParmVarDecl 0x5570a3d87c38 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5570a3d87cd8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5570a3d87cd8
| `-ParmVarDecl 0x5570a3d87de8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5570a3d8aba8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3d8acb8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5570a3d8af38 <col:11>
|   `-ReturnStmt 0x5570a3d8af28 <col:11>
|     `-UnaryOperator 0x5570a3d8af10 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5570a3d8af00 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5570a3d8ad28 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5570a3d8ad28
  `-ParmVarDecl 0x5570a3d8ae38 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d76b50 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3d76c68 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5570a3d76d08 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5570a3d76d70 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5570a3d76dd8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5570a3d76e40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5570a3d76ea0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5570a3d76f60 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5570a3d76fc0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5570a3d77020 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5570a3d87828 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5570a3d76d08 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5570a3d88198 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5570a3d881f0 <col:12>
|-CXXConstructorDecl 0x5570a3d87e58 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5570a3d87e58
| `-ParmVarDecl 0x5570a3d87f68 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5570a3d88008 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5570a3d88008
| `-ParmVarDecl 0x5570a3d88118 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5570a3d8a290 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d64c70 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5570a3d64d88 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5570a3d64e18 <col:16, col:22> col:16 public
|-EnumDecl 0x5570a3d64e40 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5570a3d64f40 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5570a3d65020 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d64f20 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5570a3d64f00 <col:21> 'int' 28
| `-EnumConstantDecl 0x5570a3d64fd0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5570a3d65038 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d64fb0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5570a3d64f90 <col:22> 'int' 64
|-CXXMethodDecl 0x5570a3d65378 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5570a3d65060 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3d650e0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5570a3d65158 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3d651d0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d65438 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d65638 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5570a3d654b0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5570a3d65528 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d656e8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d65848 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5570a3d65758 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d658f0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5570a3d65c50 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5570a3d65be0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5570a3d65b80 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5570a3d65b40 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5570a383c320 'void'
|       |-PointerType 0x5570a3ae5010 'unsigned char *'
|       | `-BuiltinType 0x5570a383c420 'unsigned char'
|       |-TypedefType 0x5570a38e1600 'size_t' sugar
|       | |-Typedef 0x5570a38acb20 'size_t'
|       | `-BuiltinType 0x5570a383c480 'unsigned long'
|       `-PointerType 0x5570a383cb20 'void *'
|         `-BuiltinType 0x5570a383c320 'void'
|-CXXMethodDecl 0x5570a3d660c8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5570a3d65cc0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5570a3d65d38 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3d65dd0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5570a3d65e50 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5570a3d807c0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5570a3d807a8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5570a3d80770 <col:58> 'int' 0
| |-ParmVarDecl 0x5570a3d65ed0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5570a3d807e8 <col:76> 'int' 0
| |-ParmVarDecl 0x5570a3d65f50 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5570a3d80808 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5570a3d66198 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d66218 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5570a3d662d8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5570a3d66378 <col:20>
| `-OptimizeNoneAttr 0x5570a3d663d0 <col:30>
|-CXXMethodDecl 0x5570a3d66448 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5570a3d664e8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d66540 <col:30>
|-CXXMethodDecl 0x5570a3d665b8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5570a3d66658 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d66708 <line:77:5, col:102> col:56 used uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5570a3d667a8 <col:20>
| |-OptimizeNoneAttr 0x5570a3d66800 <col:30>
| `-WarnUnusedResultAttr 0x5570a3d66828 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d66880 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5570a3d66920 <col:20>
| `-OptimizeNoneAttr 0x5570a3d66978 <col:30>
|-CXXMethodDecl 0x5570a3d669c8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5570a3d66a68 <col:20>
| `-OptimizeNoneAttr 0x5570a3d66ac0 <col:30>
|-CXXMethodDecl 0x5570a3d66b08 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5570a3d66ba8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d66c00 <col:30>
|-CXXMethodDecl 0x5570a3d66c48 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d66d08 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d66dd0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d66e98 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d66f58 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d67078 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5570a3d808d0 <col:54, line:99:5>
|   `-ReturnStmt 0x5570a3d808c0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5570a3d808a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5570a3d80878 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5570a3d77358
|         `-CXXThisExpr 0x5570a3d80868 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5570a3d67218 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5570a3d67128 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5570a3d80980 <col:67, line:103:5>
|   `-BinaryOperator 0x5570a3d80960 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5570a3d808f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5570a3d77358
|     | `-CXXThisExpr 0x5570a3d808e8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5570a3d80948 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d80928 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5570a3d67128 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5570a3d67310 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5570a3d80a00 <col:33, line:107:5>
|   `-ReturnStmt 0x5570a3d809f0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5570a3d809d8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5570a3d809a8 <col:16> 'void *' lvalue ->_destructor_argument 0x5570a3d773c0
|         `-CXXThisExpr 0x5570a3d80998 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5570a3d673d0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5570a3d81030 <col:25, line:113:5>
|   |-ParenExpr 0x5570a3d80d78 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5570a3d80d48 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d80ab8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5570a3d80a90 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5570a3d80a58 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5570a3d80a28 <col:24> '<bound member function type>' ->shared 0x5570a3d66448
|   |   |       `-ImplicitCastExpr 0x5570a3d80a78 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5570a3d80a18 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5570a3d80b18 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d80af8 <col:42> 'int' 0
|   |   `-CallExpr 0x5570a3d80ca8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d80c90 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d80c70 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d80ce8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d80b88 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5570a3d80d00 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d80bb0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d80d18 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d80be8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5570a3d80d30 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d80c58 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d80c40 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d80c08 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5570a3d80f78 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5570a3d80da8 <col:2> 'unsigned char *' lvalue ->_head 0x5570a3d77160
|   | | `-CXXThisExpr 0x5570a3d80d98 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5570a3d80f60 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5570a3d80f40 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5570a3d80de8 <col:10> 'unsigned char *' lvalue ->_data 0x5570a3d771c8
|   |     | `-CXXThisExpr 0x5570a3d80dd8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5570a3d80f28 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5570a3d80f08 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5570a3d80e28 <col:18> 'unsigned char *' lvalue ->_tail 0x5570a3d77230
|   |         | `-CXXThisExpr 0x5570a3d80e18 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5570a3d80ef0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5570a3d80ed0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5570a3d80e68 <col:26> 'unsigned char *' lvalue ->_end 0x5570a3d77298
|   |             | `-CXXThisExpr 0x5570a3d80e58 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5570a3d80eb8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5570a3d80e98 <col:33> 'int' 0
|   `-BinaryOperator 0x5570a3d81010 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5570a3d80fa8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5570a3d77358
|     | `-CXXThisExpr 0x5570a3d80f98 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5570a3d80ff8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5570a3d80fd8 <col:16> 'int' 0
|-CXXMethodDecl 0x5570a3d67510 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5570a3d67480 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d675b8 <col:20>
| |-OptimizeNoneAttr 0x5570a3d67610 <col:30>
| `-WarnUnusedResultAttr 0x5570a3d67638 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d67708 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5570a3d67678 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d677b0 <col:20>
| |-OptimizeNoneAttr 0x5570a3d67808 <col:30>
| `-WarnUnusedResultAttr 0x5570a3d67830 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d67968 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5570a3d67870 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d67a10 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d67b10 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5570a3d67a80 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d67bb8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d67c10 <col:30>
|-CXXMethodDecl 0x5570a3d67cd8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5570a3d67c48 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d67d80 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d67e80 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5570a3d67df0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5570a3d67f28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d68028 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5570a3d67f98 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d680d0 <col:20>
| `-OptimizeNoneAttr 0x5570a3d68128 <col:30>
|-CXXMethodDecl 0x5570a3d682b8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5570a3d68168 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5570a3d681e0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5570a3d80828 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5570a3d68368 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5570a3d68568 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d683e0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5570a3d68458 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d68778 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d68628 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5570a3d686a0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d68988 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5570a3d68838 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5570a3d688b8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5570a3d80838 <col:39> 'int' 0
|-CXXMethodDecl 0x5570a3d68a58 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5570a3d68b20 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d68be8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5570a3d68ca8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d68d70 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5570a3d68eb8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5570a3d68e28 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5570a3d69088 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d68f78 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5570a3d68ff0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d69158 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5570a3d69218 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5570a3d692b8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69310 <col:30>
|-CXXMethodDecl 0x5570a3d69360 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5570a3d69400 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69458 <col:30>
|-CXXMethodDecl 0x5570a3d694a8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5570a3d69568 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d69630 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5570a3d696d0 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69728 <col:30>
|-CXXMethodDecl 0x5570a3d69878 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d69768 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5570a3d697e0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d699c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5570a3d69938 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d69aa0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5570a3d69b60 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5570a3d69c00 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69c58 <col:30>
|-CXXMethodDecl 0x5570a3d69ca8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5570a3d69d48 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69da0 <col:30>
|-CXXMethodDecl 0x5570a3d69df0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5570a3d69eb8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5570a3d69f58 <col:20>
| `-OptimizeNoneAttr 0x5570a3d69fb0 <col:30>
|-CXXMethodDecl 0x5570a3d69ff8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5570a3d6a118 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5570a3d6a288 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5570a3d6a1c8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5570a3d6a378 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5570a3d6a418 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6a470 <col:30>
|-CXXMethodDecl 0x5570a3d6a4c0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5570a3d6a580 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5570a3d6a7b8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5570a3d6a630 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5570a3d6a6a8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d6a868 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6a8c0 <col:30>
|-CXXMethodDecl 0x5570a3d6a968 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5570a3d6aa08 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6aa60 <col:30>
|-CXXMethodDecl 0x5570a3d6aab0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5570a3d6ab50 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6aba8 <col:30>
|-CXXMethodDecl 0x5570a3d6abf0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5570a3d6ac90 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6ace8 <col:30>
|-CXXMethodDecl 0x5570a3d6ade8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5570a3d6ad20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5570a3d6ae90 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6aee8 <col:30>
|-CXXMethodDecl 0x5570a3d6b0a8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5570a3d6af20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5570a3d6af98 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d6b158 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6b1b0 <col:30>
|-CXXMethodDecl 0x5570a3d6b258 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5570a3d6b378 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5570a3d6b498 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5570a3d6b538 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5570a3d6b560 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5570a3d6b688 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5570a3d6b728 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6b780 <col:30>
|-CXXMethodDecl 0x5570a3d6b828 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5570a3d6b8c8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6b920 <col:30>
|-AccessSpecDecl 0x5570a3d6b948 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5570a3d6b970 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5570a3d6ba70 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5570a3d6bac0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d6ba50 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5570a3d6ba30 <col:14> 'int' 48
|-CXXMethodDecl 0x5570a3d6bb28 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5570a3d6bbc8 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6bc20 <col:30>
|-CXXMethodDecl 0x5570a3d6bc98 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5570a3d6bd38 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6bd90 <col:30>
|-CXXMethodDecl 0x5570a3d6be58 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5570a3d6bdc8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5570a3d6bff8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5570a3d6c198 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5570a3d6c0a8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5570a3d6c240 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5570a3d6c340 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c6f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c320 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3d6c300 <col:9> 'int' 0
| |-EnumConstantDecl 0x5570a3d6c3d0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c708 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c3b0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5570a3d6c390 <col:14> 'int' 1
| |-EnumConstantDecl 0x5570a3d6c460 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c720 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c440 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5570a3d6c420 <col:14> 'int' 2
| |-EnumConstantDecl 0x5570a3d6c4f0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c738 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c4d0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5570a3d6c4b0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5570a3d6c580 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c750 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c560 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5570a3d6c540 <col:13> 'int' 4
| |-EnumConstantDecl 0x5570a3d6c610 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5570a3d6c768 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6c5f0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5570a3d6c5d0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5570a3d6c6a0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5570a3d6c780 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d6c680 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5570a3d6c660 <col:14> 'int' 6
|-CXXMethodDecl 0x5570a3d6c7e8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5570a3d6c888 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6c8e0 <col:30>
|-CXXMethodDecl 0x5570a3d6c9d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5570a3d6c918 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5570a3d6ca80 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6cad8 <col:30>
|-CXXMethodDecl 0x5570a3d6cb48 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5570a3d6cc70 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5570a3d6cde8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5570a3d6cd20 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5570a3d6ceb0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5570a3d6cf78 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5570a3d6d0b8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5570a3d6d028 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5570a3d6d160 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5570a3d6d260 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5570a3d6d460 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6d240 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3d6d220 <col:23> 'int' 0
| |-EnumConstantDecl 0x5570a3d6d2f0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5570a3d6d478 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6d2d0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5570a3d6d2b0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5570a3d6d380 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5570a3d6d490 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6d360 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3d6d340 <col:24> 'int' 0
| `-EnumConstantDecl 0x5570a3d6d410 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5570a3d6d4a8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d6d3f0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5570a3d6d3d0 <col:47> 'int' 16
|-CXXMethodDecl 0x5570a3d6d508 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5570a3d6d678 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5570a3d6d5b8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5570a3d6d720 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6d778 <col:30>
|-CXXMethodDecl 0x5570a3d6d7c8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5570a3d81150 <col:18, col:36>
|   `-ReturnStmt 0x5570a3d81140 <col:20, col:33>
|     `-ImplicitCastExpr 0x5570a3d81128 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5570a3d81108 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5570a3d810d8 <col:27> '<bound member function type>' ->xanno 0x5570a3d6b828
|           `-CXXThisExpr 0x5570a3d810c8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5570a3d6d8c0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5570a3d81260 <col:30, col:48>
|   `-ReturnStmt 0x5570a3d81250 <col:32, col:45>
|     `-ImplicitCastExpr 0x5570a3d81238 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5570a3d81218 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5570a3d811e8 <col:39> '<bound member function type>' ->xanno 0x5570a3d6b688
|           `-CXXThisExpr 0x5570a3d811d8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5570a3d6d9a8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5570a3d813f8 <col:24, col:50>
|   `-ReturnStmt 0x5570a3d813e8 <col:26, col:47>
|     `-UnaryOperator 0x5570a3d813d0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5570a3d813b0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5570a3d81398 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5570a3d81348 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5570a3d76668
|         |   `-CXXMemberCallExpr 0x5570a3d81328 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5570a3d812f8 <col:34> '<bound member function type>' ->xanno 0x5570a3d6b828
|         |       `-CXXThisExpr 0x5570a3d812e8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5570a3d81378 <col:46> 'int' 0
|-CXXMethodDecl 0x5570a3d6dab0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5570a3d815c8 <col:36, col:62>
|   `-ReturnStmt 0x5570a3d815b8 <col:38, col:59>
|     `-UnaryOperator 0x5570a3d815a0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5570a3d81580 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5570a3d81568 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5570a3d814e0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5570a3d76668
|         |   `-CXXMemberCallExpr 0x5570a3d814c0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5570a3d81490 <col:46> '<bound member function type>' ->xanno 0x5570a3d6b688
|         |       `-CXXThisExpr 0x5570a3d81480 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5570a3d81510 <col:58> 'int' 0
|-CXXMethodDecl 0x5570a3d6dbc8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5570a3d81760 <col:26, col:53>
|   `-ReturnStmt 0x5570a3d81750 <col:28, col:50>
|     `-UnaryOperator 0x5570a3d81738 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5570a3d81718 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5570a3d81700 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5570a3d816b0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5570a3d76968
|         |   `-CXXMemberCallExpr 0x5570a3d81690 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5570a3d81660 <col:36> '<bound member function type>' ->xanno 0x5570a3d6b828
|         |       `-CXXThisExpr 0x5570a3d81650 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5570a3d816e0 <col:49> 'int' 0
|-CXXMethodDecl 0x5570a3d6dce8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5570a3d81938 <col:38, col:65>
|   `-ReturnStmt 0x5570a3d81928 <col:40, col:62>
|     `-UnaryOperator 0x5570a3d81910 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5570a3d818f0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5570a3d818d8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5570a3d81848 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5570a3d76968
|         |   `-CXXMemberCallExpr 0x5570a3d81828 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5570a3d817f8 <col:48> '<bound member function type>' ->xanno 0x5570a3d6b688
|         |       `-CXXThisExpr 0x5570a3d817e8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5570a3d81878 <col:61> 'int' 0
|-CXXMethodDecl 0x5570a3d6de98 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5570a3d6dda0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5570a3d82008 <col:34, line:463:5>
|   |-ParenExpr 0x5570a3d81e50 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5570a3d81e20 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d81a88 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d81a58 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d819a8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d81990 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d81950 <col:23> 'int' lvalue ParmVar 0x5570a3d6dda0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d81970 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d81a38 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d81a08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d819c8 <col:33> 'int' lvalue ParmVar 0x5570a3d6dda0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5570a3d81a20 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5570a3d819e8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5570a3d81ae8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d81ac8 <col:56> 'int' 0
|   |   `-CallExpr 0x5570a3d81d80 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d81d68 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d81d48 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d81dc0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d81bd8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5570a3d81dd8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d81c08 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d81df0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d81c40 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5570a3d81e08 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d81d30 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d81d18 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d81cd8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5570a3d81ff8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5570a3d81fe0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5570a3d81fc0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5570a3d81f90 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5570a3d81f40 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5570a3d76668
|         |   `-CXXMemberCallExpr 0x5570a3d81f20 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5570a3d81ef0 <col:9> '<bound member function type>' ->xanno 0x5570a3d6b688
|         |       `-CXXThisExpr 0x5570a3d81ee0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5570a3d81fa8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5570a3d81f70 <col:21> 'int' lvalue ParmVar 0x5570a3d6dda0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6e0e8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5570a3d6df58 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5570a3d6dfd0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5570a3d82698 <col:40, line:472:5>
|   |-ParenExpr 0x5570a3d824b0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5570a3d82480 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d82160 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d82130 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d82080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d82068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d82028 <col:23> 'int' lvalue ParmVar 0x5570a3d6df58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d82048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d82110 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d820e0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d820a0 <col:33> 'int' lvalue ParmVar 0x5570a3d6df58 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5570a3d820f8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5570a3d820c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5570a3d821c0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d821a0 <col:56> 'int' 0
|   |   `-CallExpr 0x5570a3d823e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d823c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d823a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d82420 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d82230 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5570a3d82438 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d82260 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d82450 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d82298 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5570a3d82468 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d82390 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d82378 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d82338 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5570a3d82678 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5570a3d82620 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5570a3d825f0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5570a3d825a0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5570a3d76668
|     | |   `-CXXMemberCallExpr 0x5570a3d82580 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5570a3d82550 <col:2> '<bound member function type>' ->xanno 0x5570a3d6b828
|     | |       `-CXXThisExpr 0x5570a3d82540 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5570a3d82608 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5570a3d825d0 <col:14> 'int' lvalue ParmVar 0x5570a3d6df58 'i' 'int'
|     `-ImplicitCastExpr 0x5570a3d82660 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d82640 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5570a3d6dfd0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5570a3d6e2a8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5570a3d6e1b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5570a3d82e18 <col:36, line:485:5>
|   |-ParenExpr 0x5570a3d82b80 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d82b50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d82830 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d82800 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d82710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d826f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d826b8 <col:23> 'int' lvalue ParmVar 0x5570a3d6e1b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d826d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d827e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d827c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d82730 <col:33> 'int' lvalue ParmVar 0x5570a3d6e1b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d827a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d82790 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d82750 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d82770 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5570a3d82890 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d82870 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d82ab0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d82a98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d82a78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d82af0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d82900 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5570a3d82b08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d82938 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d82b20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d82970 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5570a3d82b38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d82a60 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d82a48 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d82a08 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5570a3d82e08 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5570a3d82df0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d82dd8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d82da8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d82d48 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d82d18 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d82c90 <col:61, col:70> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d82c70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d82c40 <col:61> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d82c30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d82d30 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d82cc0 <col:74> 'int' lvalue ParmVar 0x5570a3d6e1b0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6e4f8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5570a3d6e368 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5570a3d6e3e0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5570a3d83568 <col:42, line:500:5>
|   |-ParenExpr 0x5570a3d83300 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d832d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d82fb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d82f80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d82e90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d82e78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d82e38 <col:23> 'int' lvalue ParmVar 0x5570a3d6e368 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d82e58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d82f60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d82f48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d82eb0 <col:33> 'int' lvalue ParmVar 0x5570a3d6e368 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d82f28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d82f10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d82ed0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d82ef0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5570a3d83010 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d82ff0 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d83230 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d83218 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d831f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d83270 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d83080 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5570a3d83288 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d830b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d832a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d830f0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5570a3d832b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d831e0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d831c8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d83188 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5570a3d83548 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5570a3d834f8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5570a3d834c8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5570a3d83470 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5570a3d83440 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5570a3d833f0 <col:48, col:57> 'char [48]' lvalue ->c 0x5570a3d76540
|     |     |   `-CXXMemberCallExpr 0x5570a3d833d0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5570a3d833a0 <col:48> '<bound member function type>' ->xanno 0x5570a3d6b828
|     |     |       `-CXXThisExpr 0x5570a3d83390 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5570a3d83458 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5570a3d83420 <col:61> 'int' lvalue ParmVar 0x5570a3d6e368 'i' 'int'
|     `-ImplicitCastExpr 0x5570a3d83530 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d83510 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5570a3d6e3e0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5570a3d6e6b8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5570a3d6e5c0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5570a3d83cc8 <col:35, line:513:5>
|   |-ParenExpr 0x5570a3d839d8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d839a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d83700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d836d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d835e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d835c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d83588 <col:23> 'int' lvalue ParmVar 0x5570a3d6e5c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d835a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d836b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d83698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d83600 <col:33> 'int' lvalue ParmVar 0x5570a3d6e5c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d83678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d83660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d83620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d83640 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5570a3d83760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d83740 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d83908 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d838f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d838d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d83948 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d837d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5570a3d83960 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d83808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d83978 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d83840 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5570a3d83990 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d838b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d838a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d83860 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5570a3d83cb8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5570a3d83ca0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d83c88 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d83c58 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d83bd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d83ba0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d83b50 <col:60, col:69> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d83b30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d83b00 <col:60> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d83af0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d83bb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d83b80 <col:73> 'int' lvalue ParmVar 0x5570a3d6e5c0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6e908 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5570a3d6e778 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5570a3d6e7f0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5570a3d843e8 <col:41, line:528:5>
|   |-ParenExpr 0x5570a3d84170 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d84140 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d83e60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d83e30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d83d40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d83d28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d83ce8 <col:23> 'int' lvalue ParmVar 0x5570a3d6e778 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d83d08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d83e10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d83df8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d83d60 <col:33> 'int' lvalue ParmVar 0x5570a3d6e778 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d83dd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d83dc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d83d80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d83da0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5570a3d83ec0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d83ea0 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d840a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d84088 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d84068 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d840e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d83f30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5570a3d840f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d83f68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d84110 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d83fa0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5570a3d84128 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d84050 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d84038 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d83ff8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5570a3d843c8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5570a3d84378 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5570a3d84348 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5570a3d842f0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5570a3d842b0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5570a3d84260 <col:47, col:56> 'char [48]' lvalue ->c 0x5570a3d76540
|     |     |   `-CXXMemberCallExpr 0x5570a3d84240 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5570a3d84210 <col:47> '<bound member function type>' ->xanno 0x5570a3d6b828
|     |     |       `-CXXThisExpr 0x5570a3d84200 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5570a3d842c8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5570a3d84290 <col:60> 'int' lvalue ParmVar 0x5570a3d6e778 'i' 'int'
|     `-ImplicitCastExpr 0x5570a3d843b0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d84390 <col:65> 'int16_t':'short' lvalue ParmVar 0x5570a3d6e7f0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5570a3d6eac8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5570a3d6e9d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5570a3d84ab8 <col:36, line:541:5>
|   |-ParenExpr 0x5570a3d84858 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d84828 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d84580 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d84550 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d84460 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d84448 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d84408 <col:23> 'int' lvalue ParmVar 0x5570a3d6e9d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d84428 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d84530 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d84518 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d84480 <col:33> 'int' lvalue ParmVar 0x5570a3d6e9d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d844f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d844e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d844a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d844c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5570a3d845e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d845c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d84788 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d84770 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d84750 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d847c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d84650 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5570a3d847e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d84688 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d847f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d846c0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5570a3d84810 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d84738 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d84720 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d846e0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5570a3d84aa8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5570a3d84a90 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d84a78 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d84a48 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d849f0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d849c0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d84970 <col:61, col:70> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d84950 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d84920 <col:61> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d84910 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d849d8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d849a0 <col:74> 'int' lvalue ParmVar 0x5570a3d6e9d0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6ec98 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5570a3d6eb88 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5570a3d6ec00 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5570a3d6ed48 <col:20>
| `-OptimizeNoneAttr 0x5570a3d6eda0 <col:30>
|-CXXMethodDecl 0x5570a3d6eed8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5570a3d6ede0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5570a3d85188 <col:35, line:562:5>
|   |-ParenExpr 0x5570a3d84f28 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d84ef8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d84c50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d84c20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d84b30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d84b18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d84ad8 <col:23> 'int' lvalue ParmVar 0x5570a3d6ede0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d84af8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d84c00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d84be8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d84b50 <col:33> 'int' lvalue ParmVar 0x5570a3d6ede0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d84bc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d84bb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d84b70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d84b90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5570a3d84cb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d84c90 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d84e58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d84e40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d84e20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d84e98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d84d20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5570a3d84eb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d84d58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d84ec8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d84d90 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5570a3d84ee0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d84e08 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d84df0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d84db0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5570a3d85178 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5570a3d85160 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d85148 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d85118 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d850c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d85090 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d85040 <col:60, col:69> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d85020 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d84ff0 <col:60> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d84fe0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d850a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d85070 <col:73> 'int' lvalue ParmVar 0x5570a3d6ede0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6f0e8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5570a3d6ef98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5570a3d6f010 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5570a3d85868 <col:41, line:577:5>
|   |-ParenExpr 0x5570a3d855f8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d855c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d85320 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d852f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d85200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d851e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d851a8 <col:23> 'int' lvalue ParmVar 0x5570a3d6ef98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d851c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d852d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d852b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d85220 <col:33> 'int' lvalue ParmVar 0x5570a3d6ef98 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d85298 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d85280 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d85240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d85260 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5570a3d85380 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d85360 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d85528 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d85510 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d854f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d85568 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d853f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5570a3d85580 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d85428 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d85598 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d85460 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5570a3d855b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d854d8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d854c0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d85480 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5570a3d85848 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5570a3d857f8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5570a3d857c8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5570a3d85768 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5570a3d85738 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5570a3d856e8 <col:47, col:56> 'char [48]' lvalue ->c 0x5570a3d76540
|     |     |   `-CXXMemberCallExpr 0x5570a3d856c8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5570a3d85698 <col:47> '<bound member function type>' ->xanno 0x5570a3d6b828
|     |     |       `-CXXThisExpr 0x5570a3d85688 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5570a3d85750 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5570a3d85718 <col:60> 'int' lvalue ParmVar 0x5570a3d6ef98 'i' 'int'
|     `-ImplicitCastExpr 0x5570a3d85830 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d85810 <col:65> 'int32_t':'int' lvalue ParmVar 0x5570a3d6f010 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5570a3d6f2a8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5570a3d6f1b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5570a3d85f98 <col:36, line:591:5>
|   |-ParenExpr 0x5570a3d85cd8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d85ca8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d85a00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d859d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d858e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d858c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d85888 <col:23> 'int' lvalue ParmVar 0x5570a3d6f1b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d858a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d859b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d85998 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d85900 <col:33> 'int' lvalue ParmVar 0x5570a3d6f1b0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d85978 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d85960 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d85920 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d85940 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5570a3d85a60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d85a40 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d85c08 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d85bf0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d85bd0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d85c48 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d85ad0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5570a3d85c60 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d85b08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d85c78 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d85b40 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5570a3d85c90 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d85bb8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d85ba0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d85b60 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5570a3d85f88 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5570a3d85f70 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d85f58 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d85f28 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d85ea0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d85e70 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d85e20 <col:61, col:70> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d85e00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d85dd0 <col:61> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d85dc0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d85e88 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d85e50 <col:74> 'int' lvalue ParmVar 0x5570a3d6f1b0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6f4f8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5570a3d6f368 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5570a3d6f3e0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5570a3d86678 <col:42, line:606:5>
|   |-ParenExpr 0x5570a3d86408 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5570a3d863d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d86130 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d86100 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d86010 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d85ff8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d85fb8 <col:23> 'int' lvalue ParmVar 0x5570a3d6f368 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d85fd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d860e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5570a3d860c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d86030 <col:33> 'int' lvalue ParmVar 0x5570a3d6f368 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d860a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d86090 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d86050 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5570a3d86070 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5570a3d86190 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d86170 <col:60> 'int' 0
|   |   `-CallExpr 0x5570a3d86338 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d86320 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d86300 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d86378 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d86200 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5570a3d86390 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d86238 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d863a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d86270 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5570a3d863c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d862e8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d862d0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d86290 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5570a3d86658 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5570a3d86608 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5570a3d865d8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5570a3d86578 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5570a3d86548 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5570a3d864f8 <col:48, col:57> 'char [48]' lvalue ->c 0x5570a3d76540
|     |     |   `-CXXMemberCallExpr 0x5570a3d864d8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5570a3d864a8 <col:48> '<bound member function type>' ->xanno 0x5570a3d6b828
|     |     |       `-CXXThisExpr 0x5570a3d86498 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5570a3d86560 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5570a3d86528 <col:61> 'int' lvalue ParmVar 0x5570a3d6f368 'i' 'int'
|     `-ImplicitCastExpr 0x5570a3d86640 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5570a3d86620 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5570a3d6f3e0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5570a3d6f690 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5570a3d6f5c0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5570a3d86ee8 <col:33, line:620:5>
|   |-ParenExpr 0x5570a3d86c60 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5570a3d86c30 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d86880 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d86850 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d866f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d866d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d86698 <col:23> 'int' lvalue ParmVar 0x5570a3d6f5c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d866b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d86830 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5570a3d86818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d86710 <col:33> 'int' lvalue ParmVar 0x5570a3d6f5c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d867f8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d867e0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d86730 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5570a3d867b8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5570a3d867a0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5570a3d86768 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5570a3d868e0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d868c0 <col:79> 'int' 0
|   |   `-CallExpr 0x5570a3d86b90 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d86b78 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d86b58 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d86bd0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d869c8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5570a3d86be8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d86a10 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d86c00 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d86a48 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5570a3d86c18 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d86b40 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d86b28 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d86ae8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5570a3d86ed8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5570a3d86ec0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5570a3d86ea8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5570a3d86e78 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5570a3d86df0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5570a3d86dc0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5570a3d86d70 <col:67, col:76> 'char const[48]' lvalue ->c 0x5570a3d76540
|             |   `-CXXMemberCallExpr 0x5570a3d86d50 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5570a3d86d20 <col:67> '<bound member function type>' ->xanno 0x5570a3d6b688
|             |       `-CXXThisExpr 0x5570a3d86d10 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5570a3d86dd8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5570a3d86da0 <col:80> 'int' lvalue ParmVar 0x5570a3d6f5c0 'i' 'int'
|-CXXMethodDecl 0x5570a3d6f8a8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5570a3d6f750 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5570a3d6f7d0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5570a3d87710 <col:45, line:635:5>
|   |-ParenExpr 0x5570a3d87458 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5570a3d87428 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5570a3d870f0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5570a3d870c0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5570a3d86f60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5570a3d86f48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5570a3d86f08 <col:23> 'int' lvalue ParmVar 0x5570a3d6f750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5570a3d86f28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5570a3d870a0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5570a3d87088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5570a3d86f80 <col:33> 'int' lvalue ParmVar 0x5570a3d6f750 'i' 'int'
|   |   |     `-BinaryOperator 0x5570a3d87068 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5570a3d87050 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5570a3d86fa0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5570a3d6ba70 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5570a3d87028 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5570a3d87010 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5570a3d86fd8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5570a3d87150 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5570a3d87130 <col:79> 'int' 0
|   |   `-CallExpr 0x5570a3d87388 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5570a3d87370 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5570a3d87350 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5570a38d83c0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5570a3d873c8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d871c0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5570a3d873e0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5570a3d87208 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5570a3d873f8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5570a3d87240 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5570a3d87410 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5570a3d87338 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5570a3d87320 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5570a3d872d8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5570a3d876f0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5570a3d87658 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5570a3d87628 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5570a3d875c8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5570a3d87598 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5570a3d87548 <col:54, col:63> 'char [48]' lvalue ->c 0x5570a3d76540
|     |     |   `-CXXMemberCallExpr 0x5570a3d87528 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5570a3d874f8 <col:54> '<bound member function type>' ->xanno 0x5570a3d6b828
|     |     |       `-CXXThisExpr 0x5570a3d874e8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5570a3d875b0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5570a3d87578 <col:67> 'int' lvalue ParmVar 0x5570a3d6f750 'i' 'int'
|     `-CXXConstCastExpr 0x5570a3d876c0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5570a3d876a8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5570a3d87670 <col:91> 'const void *' lvalue ParmVar 0x5570a3d6f7d0 'x' 'const void *'
|-CXXMethodDecl 0x5570a3d6f978 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5570a3d87798 <col:34, line:640:5>
|   `-ReturnStmt 0x5570a3d87788 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5570a3d87770 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5570a3d87740 <col:16> 'Packet *' lvalue ->_data_packet 0x5570a3d770f8
|         `-CXXThisExpr 0x5570a3d87730 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5570a3d6fab8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5570a3d6fa28 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5570a3d80858 <col:46> 'bool' true
|-CXXMethodDecl 0x5570a3d6fc38 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5570a3d6fb70 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5570a3d6fce0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5570a3d70490 <line:660:22> "" ""
| |-EnumConstantDecl 0x5570a3d6fde0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70500 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6fdc0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5570a3d6fda0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5570a3d64f40 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5570a3d6fe70 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70518 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6fe50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5570a3d6fe30 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5570a3d64fd0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5570a3d6ff00 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70530 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6fee0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5570a3d6fec0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5570a3d6ff90 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70548 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d6ff70 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5570a3d6ff50 <col:19> 'int' 16
| |-EnumConstantDecl 0x5570a3d70020 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70560 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d70000 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5570a3d6ffe0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5570a3d700b0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70578 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d70090 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5570a3d70070 <col:19> 'int' 32
| |-EnumConstantDecl 0x5570a3d70140 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d70590 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d70120 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5570a3d70100 <col:19> 'int' EnumConstant 0x5570a3d6ff90 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5570a3d701d0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d705a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d701b0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5570a3d70190 <col:19> 'int' EnumConstant 0x5570a3d700b0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5570a3d702a0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d705c0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d70280 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5570a3d70260 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5570a3d70220 <col:23> 'int' EnumConstant 0x5570a3d701d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5570a3d70240 <col:40> 'int' 2
| |-EnumConstantDecl 0x5570a3d70370 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5570a3d705d8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5570a3d70350 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5570a3d70330 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5570a3d702f0 <col:23> 'int' EnumConstant 0x5570a3d701d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5570a3d70310 <col:40> 'int' 4
| `-EnumConstantDecl 0x5570a3d70440 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5570a3d705f0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5570a3d70420 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5570a3d70400 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5570a3d703c0 <col:23> 'int' EnumConstant 0x5570a3d701d0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5570a3d703e0 <col:40> 'int' 8
|-CXXMethodDecl 0x5570a3d70630 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5570a3d706d0 <col:68> "" ""
|-CXXMethodDecl 0x5570a3d70768 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5570a3d70808 <col:45> "" ""
|-CXXMethodDecl 0x5570a3d708a0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5570a3d70940 <col:57> "" ""
|-CXXMethodDecl 0x5570a3d709d8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5570a3d70a78 <col:45> "" ""
|-CXXMethodDecl 0x5570a3d70b10 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5570a3d70bb0 <col:57> "" ""
|-CXXMethodDecl 0x5570a3d70c40 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5570a3d70ce0 <col:51> "" ""
|-CXXMethodDecl 0x5570a3d70d70 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5570a3d70e10 <col:63> "" ""
|-CXXMethodDecl 0x5570a3d70ea0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5570a3d70f40 <col:53> "" ""
|-CXXMethodDecl 0x5570a3d70fd0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5570a3d71070 <col:65> "" ""
|-CXXMethodDecl 0x5570a3d71188 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5570a3d710f8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5570a3d71230 <col:61> "" ""
|-CXXMethodDecl 0x5570a3d713c8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5570a3d712b8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5570a3d71330 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5570a3d71478 <col:67> "" ""
|-CXXMethodDecl 0x5570a3d71590 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5570a3d71500 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5570a3d71638 <col:63> "" ""
|-CXXMethodDecl 0x5570a3d717d0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5570a3d716c0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5570a3d71738 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5570a3d71880 <col:69> "" ""
|-CXXMethodDecl 0x5570a3d71998 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5570a3d71908 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5570a3d71a40 <col:63> "" ""
|-CXXMethodDecl 0x5570a3d74118 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d74008 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5570a3d74080 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5570a3d741c8 <col:69> "" ""
|-CXXMethodDecl 0x5570a3d742e0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5570a3d74250 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5570a3d74388 <col:62> "" ""
|-CXXMethodDecl 0x5570a3d74520 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5570a3d74410 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5570a3d74488 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5570a3d745d0 <col:68> "" ""
|-CXXMethodDecl 0x5570a3d746e8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5570a3d74658 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5570a3d74790 <col:63> "" ""
|-CXXMethodDecl 0x5570a3d74928 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5570a3d74818 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5570a3d74890 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5570a3d749d8 <col:69> "" ""
|-CXXMethodDecl 0x5570a3d74a68 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5570a3d74b08 <col:64> "" ""
|-CXXMethodDecl 0x5570a3d74b98 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5570a3d74c38 <col:52> "" ""
|-CXXMethodDecl 0x5570a3d74cc8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5570a3d74d68 <col:67> "" ""
|-CXXMethodDecl 0x5570a3d74df8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5570a3d74e98 <col:55> "" ""
|-CXXMethodDecl 0x5570a3d74fb0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5570a3d74f20 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5570a3d75058 <col:58> "" ""
|-CXXMethodDecl 0x5570a3d751f0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5570a3d750e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5570a3d75158 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5570a3d752a0 <col:62> "" ""
|-CXXMethodDecl 0x5570a3d753b8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5570a3d75328 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5570a3d75460 <col:58> "" ""
|-CXXMethodDecl 0x5570a3d755f8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5570a3d754e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5570a3d75560 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5570a3d756a8 <col:62> "" ""
|-CXXMethodDecl 0x5570a3d757c0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5570a3d75730 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5570a3d75868 <col:60> "" ""
|-CXXMethodDecl 0x5570a3d75a00 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5570a3d758f0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5570a3d75968 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5570a3d75ab0 <col:64> "" ""
|-CXXMethodDecl 0x5570a3d75bc8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5570a3d75b38 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5570a3d75c70 <col:58> "" ""
|-CXXMethodDecl 0x5570a3d75e08 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5570a3d75cf8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5570a3d75d70 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5570a3d75eb8 <col:62> "" ""
|-CXXMethodDecl 0x5570a3d75fd0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5570a3d75f40 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5570a3d76078 <col:59> "" ""
|-CXXMethodDecl 0x5570a3d76210 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5570a3d76100 <col:33> col:36 'int'
| |-ParmVarDecl 0x5570a3d76178 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5570a3d762c0 <col:63> "" ""
|-AccessSpecDecl 0x5570a3d76330 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5570a3d76358 prev 0x5570a3d6b560 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5570a3d76450 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5570a3d76540 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5570a3d76668 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5570a3d767e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5570a3d76968 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5570a3d76ae8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5570a3d87918 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5570a3d88188 <col:11>
| |-CXXDestructorDecl 0x5570a3d879f0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5570a3d87b28 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5570a3d87b28
| | `-ParmVarDecl 0x5570a3d87c38 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5570a3d87cd8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5570a3d87cd8
| | `-ParmVarDecl 0x5570a3d87de8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5570a3d8aba8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5570a3d8acb8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5570a3d8af38 <col:11>
| |   `-ReturnStmt 0x5570a3d8af28 <col:11>
| |     `-UnaryOperator 0x5570a3d8af10 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5570a3d8af00 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5570a3d8ad28 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5570a3d8ad28
|   `-ParmVarDecl 0x5570a3d8ae38 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5570a3d76b50 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5570a3d76c68 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5570a3d76d08 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5570a3d76d70 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5570a3d76dd8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5570a3d76e40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5570a3d76ea0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5570a3d76f60 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5570a3d76fc0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5570a3d77020 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5570a3d87828 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5570a3d76d08 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5570a3d88198 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5570a3d881f0 <col:12>
| |-CXXConstructorDecl 0x5570a3d87e58 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5570a3d87e58
| | `-ParmVarDecl 0x5570a3d87f68 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5570a3d88008 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5570a3d88008
| | `-ParmVarDecl 0x5570a3d88118 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5570a3d8a290 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5570a3d77098 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5570a3d770f8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5570a3d77160 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5570a3d771c8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5570a3d77230 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5570a3d77298 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5570a3d772f8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5570a3d77358 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5570a3d773c0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5570a3d77448 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5570a3d77098 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5570a3d877c0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5570a3d772f8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5570a3d88200 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5570a3d88260 <col:21, line:755:5>
|-CXXConstructorDecl 0x5570a3d775e8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5570a3d77528 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5570a3d776e0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5570a3d778c8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5570a3d777d0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5570a3d77b98 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5570a3d77980 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3d779f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5570a3d77a70 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d77db8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5570a3d77c68 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5570a3d77ce0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5570a3d80398 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5570a3d77e78 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5570a3d77ef0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5570a3d77f68 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5570a3d804f0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5570a3d80460 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d80638 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5570a3d805a8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5570a3d80730 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3d88300 prev 0x5570a3d64bc0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5570a3d88438 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5570a3d884c8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5570a3d88570 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5570a3d88610 <col:20>
| `-OptimizeNoneAttr 0x5570a3d88668 <col:30>
|-CXXMethodDecl 0x5570a3d886b8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5570a3d88758 <col:20>
| `-OptimizeNoneAttr 0x5570a3d887b0 <col:30>
|-CXXMethodDecl 0x5570a3d88800 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d888c8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d88990 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d88aa8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5570a3d88b70 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5570a3d88c10 <col:20>
| `-OptimizeNoneAttr 0x5570a3d88c68 <col:30>
|-CXXMethodDecl 0x5570a3d88cd8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5570a3d88d78 <col:20>
| `-OptimizeNoneAttr 0x5570a3d88dd0 <col:30>
|-CXXMethodDecl 0x5570a3d88e78 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5570a3d88f18 <col:20>
| `-OptimizeNoneAttr 0x5570a3d88f70 <col:30>
|-CXXMethodDecl 0x5570a3d88fc0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5570a3d890d8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5570a3d891f8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5570a3d89318 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5570a3d893e0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5570a3d89480 <col:62> "" ""
|-AccessSpecDecl 0x5570a3d894f0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5570a3d89550 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5570a3d8a148 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5570a3d8a370 <col:29, col:31>
|-CXXMethodDecl 0x5570a3d89618 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5570a3d89758 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5570a3d896c8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5570a3d89850 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5570a3d8a380 <col:23, col:25>
|-CXXMethodDecl 0x5570a3d89a08 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5570a3d89940 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5570a3d89cd8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5570a3d89ac0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5570a3d89b38 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5570a3d89bb0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5570a3d89e68 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5570a3d89da0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5570a3d89f60 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5570a3d89fc8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5570a3d89fc8
  `-ParmVarDecl 0x5570a3d8a0d8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5570a3dbbc08 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5570a3dbbd28 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5570a3dbbdb8 <col:25, col:31> col:25 public
|-TypedefDecl 0x5570a3dbbdf0 <line:206:5, col:18> col:18 referenced enable_direct_parse 'void'
| `-BuiltinType 0x5570a383c320 'void'
|-CXXConstructorDecl 0x5570a3dbbf38 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5570a3dbbe60 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5570a3dbd1c0 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5570a3dbcaf0 'flags_' 'int'
| | `-ImplicitCastExpr 0x5570a3dbd260 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3dbd220 <col:45> 'int' lvalue ParmVar 0x5570a3dbbe60 'flags' 'int'
| `-CompoundStmt 0x5570a3dbd2a8 <col:52, col:53>
|-CXXMethodDecl 0x5570a3dbc1f8 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5570a3dbbff8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5570a3dbc098 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5570a3dbc110 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5570a3dbd1e0 <col:88> 'const ArgContext' lvalue Var 0x5570a3dbbba0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5570a3d1cf38 <col:100, line:210:5>
|   `-ReturnStmt 0x5570a3d1cf28 <line:209:9, col:46>
|     `-CallExpr 0x5570a3d1ced0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5570a3d1ceb8 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5570a3d1ce70 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5570a3dbcdb8 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5570a3dbd320 <col:22> 'const String' lvalue ParmVar 0x5570a3dbbff8 'str' 'const String &'
|       |-DeclRefExpr 0x5570a3dbd340 <col:27> 'EtherAddress' lvalue ParmVar 0x5570a3dbc098 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5570a3dbd360 <col:34> 'const ArgContext' lvalue ParmVar 0x5570a3dbc110 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5570a3d1cf10 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5570a3dbd390 <col:40> 'int' lvalue ->flags_ 0x5570a3dbcaf0
|           `-CXXThisExpr 0x5570a3dbd380 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5570a3dbc498 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5570a3dbc2c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5570a3dbc340 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5570a3dbc3b8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5570a3dbd200 <col:89> 'const ArgContext' lvalue Var 0x5570a3dbbba0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5570a3d1d110 <col:101, line:213:5>
|   `-ReturnStmt 0x5570a3d1d100 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5570a3d1d0c8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5570a3d1d098 <col:9> '<bound member function type>' ->parse 0x5570a3dbc1f8
|       | `-CXXThisExpr 0x5570a3d1d088 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5570a3d1cfb8 <col:15> 'const String' lvalue ParmVar 0x5570a3dbc2c0 'str' 'const String &'
|       |-UnaryOperator 0x5570a3d1d050 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5570a3d1d020 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5570a3d1d008 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5570a3d1cfd8 <col:54> 'unsigned char *' lvalue ParmVar 0x5570a3dbc340 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5570a3d1d068 <col:62> 'const ArgContext' lvalue ParmVar 0x5570a3dbc3b8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5570a3dbc758 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5570a3dbc560 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5570a3dbc5d8 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5570a3dbc678 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5570a3d1d2f8 <col:82, line:216:5>
|   `-ReturnStmt 0x5570a3d1d2e8 <line:215:9, col:53>
|     `-CallExpr 0x5570a3d1d290 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5570a3d1d278 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5570a3d1d230 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5570a3dbd0e8 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5570a3d1d190 <col:29> 'const String' lvalue ParmVar 0x5570a3dbc560 'str' 'const String &'
|       |-DeclRefExpr 0x5570a3d1d1b0 <col:34> 'EtherAddress' lvalue ParmVar 0x5570a3dbc5d8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5570a3d1d1d0 <col:41> 'Args' lvalue ParmVar 0x5570a3dbc678 'args' 'Args &'
|       `-ImplicitCastExpr 0x5570a3d1d2d0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5570a3d1d200 <col:47> 'int' lvalue ->flags_ 0x5570a3dbcaf0
|           `-CXXThisExpr 0x5570a3d1d1f0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5570a3dbc9f8 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5570a3dbc820 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5570a3dbc8a0 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5570a3dbc918 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5570a3d1d4d0 <col:83, line:219:5>
|   `-ReturnStmt 0x5570a3d1d4c0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5570a3d1d488 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5570a3d1d458 <col:9> '<bound member function type>' ->direct_parse 0x5570a3dbc758
|       | `-CXXThisExpr 0x5570a3d1d448 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5570a3d1d378 <col:22> 'const String' lvalue ParmVar 0x5570a3dbc820 'str' 'const String &'
|       |-UnaryOperator 0x5570a3d1d410 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5570a3d1d3e0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5570a3d1d3c8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5570a3d1d398 <col:61> 'unsigned char *' lvalue ParmVar 0x5570a3dbc8a0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5570a3d1d428 <col:69> 'Args' lvalue ParmVar 0x5570a3dbc918 'args' 'Args &'
|-AccessSpecDecl 0x5570a3dbcab0 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5570a3dbcaf0 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5570a3dbcdb8 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5570a3dbcb50 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5570a3dbcbc8 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5570a3dbcc40 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5570a3dbccc0 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5570a3dbd0e8 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5570a3dbce88 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5570a3dbcf00 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5570a3dbcf78 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5570a3dbcff8 <col:82, col:86> col:86 flags 'int'
|-CXXDestructorDecl 0x5570a3ecaf70 <line:205:7> col:7 implicit ~EtherAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5570a3ecb0a8 <col:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5570a3ecb0a8
| `-ParmVarDecl 0x5570a3ecb1b8 <col:7> col:7 'const EtherAddressArg &'
`-CXXConstructorDecl 0x5570a3ecb258 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5570a3ecb368 <col:7> col:7 used 'EtherAddressArg &&'
  |-CXXCtorInitializer Field 0x5570a3dbcaf0 'flags_' 'int'
  | `-ImplicitCastExpr 0x5570a3ecc148 <col:7> 'int' <LValueToRValue>
  |   `-MemberExpr 0x5570a3ecc100 <col:7> 'int' xvalue .flags_ 0x5570a3dbcaf0
  |     `-CXXStaticCastExpr 0x5570a3ecc0d0 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
  |       `-DeclRefExpr 0x5570a3ecc0a0 <col:7> 'EtherAddressArg' lvalue ParmVar 0x5570a3ecb368 '' 'EtherAddressArg &&'
  `-CompoundStmt 0x5570a3ecc190 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3d1d510 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x5570a3d1d768 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5570a3ecae98 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5570a3ecb770 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5570a3ecb750 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5570a3ecb7e0 <col:19>
|-CXXConstructorDecl 0x5570a3ecb3d8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x5570a3ecb3d8
| `-ParmVarDecl 0x5570a3ecb4e8 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x5570a3ecb588 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5570a3ecb698 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5570a3ecc1a0 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5570a3ecc080 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x5570a3ecc050 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x5570a3ecc020 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x5570a3ecb698 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x5570a3ecc210 <col:19>
`-CXXDestructorDecl 0x5570a3ecb820 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5570a3ed6a58 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5570a3ed6e58 prev 0x5570a3ed6a58 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5570a3ed7050 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5570a3ed6f58 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5570a3ed7f98 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5570a3ed71d0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5570a3ed7f58 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5570a3ed7f18 <col:20> 'String *' lvalue ParmVar 0x5570a3ed6f58 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5570a3ed7230 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5570a3ed7ff8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5570a3e59540 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5570a3ed7110 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5570a3e33650 Slot::store 'void ()' ]
| `-CompoundStmt 0x5570a3eddbd8 <col:22, line:857:9>
|   `-CallExpr 0x5570a3eddb90 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5570a3eddb78 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5570a3eddaf8 <col:13> 'void (String &, const String &)' lvalue Function 0x5570a3edd9d8 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x5570a3afdd78 'assign_consume')
|     |-UnaryOperator 0x5570a3ed8188 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5570a3ed8170 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5570a3ed8140 <col:29> 'String *' lvalue ->_ptr 0x5570a3ed71d0
|     |     `-CXXThisExpr 0x5570a3ed8130 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5570a3eddbc0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5570a3ed81b0 <col:35> 'String':'String' lvalue ->_slot 0x5570a3ed7230
|         `-CXXThisExpr 0x5570a3ed81a0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5570a3ed71d0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5570a3ed7230 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5570a3ed72a8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5570a3ed72a8
| `-ParmVarDecl 0x5570a3ed73b8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5570a3ed7458 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5570a3ed7458
| `-ParmVarDecl 0x5570a3ed7568 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5570a3ed7608 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5570a3ed7608
| `-ParmVarDecl 0x5570a3ed7718 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5570a3ed7788 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5570a3ed7788
| `-ParmVarDecl 0x5570a3ed7898 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5570a3ed7920 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5570a3e33550 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5570a3ed8060 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
