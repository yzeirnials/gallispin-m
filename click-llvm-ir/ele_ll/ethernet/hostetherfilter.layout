
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523255e48 prev 0x55a52324d5e8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a523255f40 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55a523255fd0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55a523256048 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55a523256108 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55a5232561d0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55a523256348 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55a523256280 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55a5232563f0 <col:24>
| `-OptimizeNoneAttr 0x55a523256448 <col:34>
|-CXXMethodDecl 0x55a523256490 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55a523256748 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55a523256540 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a5232565b8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55a523256638 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55a523256800 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55a523256838 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55a5232568a0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55a523256928 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55a523256c48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55a5232569e0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55a523256a58 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55a523256ad0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55a523256b50 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55a523256d60 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55a52325e6d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a52325e6d8
| `-ParmVarDecl 0x55a52325e7e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55a52325e888 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a52325e888
| `-ParmVarDecl 0x55a52325e998 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55a523337460 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523248e60 prev 0x55a523248be0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a523248f58 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55a523248fe8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55a523249048 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55a523249138 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55a523249238 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55a523249408 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55a5232492b8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55a523249330 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55a523249598 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55a5232494d0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55a523249640 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55a523249778 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55a5232496b0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55a523249918 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55a523249858 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55a523249ab8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55a5232499f8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55a523249b60 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55a523249c60 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55a523249d40 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523249c40 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55a523249c20 <col:26> 'int' 1
| `-EnumConstantDecl 0x55a523249cf0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55a523249d58 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523249cd0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55a523249cb0 <col:44> 'int' 2
|-CXXMethodDecl 0x55a523249ea0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55a523249d88 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55a523249e08 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55a523249ff8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55a523249f68 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55a52324a238 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55a52324a0b8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55a52324a130 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55a52324a2e8 <col:20>
| `-OptimizeNoneAttr 0x55a52324a340 <col:30>
|-CXXMethodDecl 0x55a52324a448 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55a52324a380 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55a52324a4f0 <col:20>
| `-OptimizeNoneAttr 0x55a52324a548 <col:30>
|-CXXMethodDecl 0x55a52324a598 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55a52324a660 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55a52324a778 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55a52324a800 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55a52324a888 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55a52324a910 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55a52324a998 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55a52324aa28 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55a52324aae8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55a52324ab70 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55a52324abf8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55a52324ac80 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55a52324ad08 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55a52324ad90 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55a52324ae20 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55a52324aee0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55a52324af70 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55a52324b0c0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55a52324b028 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55a52324b250 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55a52324b180 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55a52324b500 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55a52324b308 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55a52324b388 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55a52324b408 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55a52324b5b8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55a52324b6c0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a52324b950 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52324b6a0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55a52324b680 <col:33> 'int' 0
| |-EnumConstantDecl 0x55a52324b750 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a52324b968 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52324b730 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55a52324b710 <col:32> 'int' 20
| |-EnumConstantDecl 0x55a52324b7e0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a52324b980 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52324b7c0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55a52324b7a0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55a52324b870 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55a52324b998 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52324b850 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55a52324b830 <col:35> 'int' 100
| `-EnumConstantDecl 0x55a52324b900 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55a52324b9b0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a52324b8e0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55a52324b8c0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55a52324b9f0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55a52324be30 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a52324bca0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55a52324bd18 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a52324bf00 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55a52324c080 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55a52324bfb0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a52324c288 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a52324c138 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55a52324c1b0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a52324c388 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55a52324c428 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55a52324c4f0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c580 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55a52324c7b0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52324c560 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55a52324c540 <col:36> 'int' EnumConstant 0x55a52324c4f0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c5d0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c620 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c670 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c6c0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55a52324c710 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55a52324c760 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55a52324c898 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55a52324c7d8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55a52324c960 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55a52324ca20 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55a52324cae0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55a52324cba0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55a52324ccb8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55a52324cd80 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55a52324cf00 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55a52324ce30 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55a52324d028 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55a52324d228 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55a52324d0d8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55a52324d158 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55a52325ab78 <col:54, line:127:5>
|   |-ParenExpr 0x55a52325aa28 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55a52325a9f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55a52325a6e8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a52325a6c0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55a52325a6a8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55a52325a690 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55a52325a660 <col:31> 'Router *' lvalue ->_router 0x55a523258540
|   |   |         `-CXXThisExpr 0x55a52325a650 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a52325a748 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52325a728 <col:48> 'int' 0
|   |   `-CallExpr 0x55a52325a958 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55a52325a940 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52325a920 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52325a998 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52325a7b8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55a52325a9b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52325a7d8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55a52325a9c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52325a810 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55a52325a9e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52325a908 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52325a8f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52325a8a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55a52325aac0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55a52325aa58 <col:9> 'Router *' lvalue ->_router 0x55a523258540
|   | | `-CXXThisExpr 0x55a52325aa48 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55a52325aaa8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a52325aa88 <col:19> 'Router *' lvalue ParmVar 0x55a52324d0d8 'r' 'Router *'
|   `-BinaryOperator 0x55a52325ab58 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55a52325aaf0 <col:9> 'int' lvalue ->_eindex 0x55a5232585a8
|     | `-CXXThisExpr 0x55a52325aae0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55a52325ab40 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a52325ab20 <col:19> 'int' lvalue ParmVar 0x55a52324d158 'eindex' 'int'
|-CXXMethodDecl 0x55a52324d3b0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55a52324d2e8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55a52324d480 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55a52324d548 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55a52324d5e8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55a52324d838 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55a52324d6b0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55a52324d730 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55a52324d8e8 <col:20>
| `-OptimizeNoneAttr 0x55a52324d940 <col:30>
|-CXXMethodDecl 0x55a52324da48 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a52324d980 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55a52324daf0 <col:20>
| `-OptimizeNoneAttr 0x55a52324db48 <col:30>
|-CXXMethodDecl 0x55a52324dc18 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55a52324db88 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55a52324dcc0 <col:20>
| `-OptimizeNoneAttr 0x55a52324dd18 <col:30>
|-CXXMethodDecl 0x55a52324dea8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55a52324dd50 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55a52324ddd0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55a52324e038 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a52324df70 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a52324e188 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a52324e0f8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55a52324e2d8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55a52324e248 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a52324e428 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55a52324e398 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55a52324e6e8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55a52324e4e0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55a52324e560 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55a52324e608 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55a52324e7c0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55a52324e880 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55a52324eb50 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55a52324ea00 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55a52324ea78 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55a52324ec78 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55a52324ee50 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55a52324ed30 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55a52324edb0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55a52324f038 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55a52324ef18 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55a52324ef98 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55a52324f3a8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a52324f0f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a52324f170 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a52324f1f0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a52325a160 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a52325a140 <col:106> 'int' 0
| `-ParmVarDecl 0x55a52324f268 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a198 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a178 <col:126> 'int' 0
|-CXXMethodDecl 0x55a52324f748 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a52324f478 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a52324f510 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a52324f590 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55a52324f608 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a1d0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a1b0 <col:114> 'int' 0
|-CXXMethodDecl 0x55a52324fad8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a52324f820 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55a52324f898 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55a52324f918 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55a52325a1e8 <col:96> 'int' 0
| `-ParmVarDecl 0x55a52324f990 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a228 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a208 <col:116> 'int' 0
|-CXXMethodDecl 0x55a52324fe58 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55a52324fba8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a52324fc20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a52324fca0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a52325a260 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a52325a240 <col:109> 'int' 0
| `-ParmVarDecl 0x55a52324fd18 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a298 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a278 <col:129> 'int' 0
|-CXXMethodDecl 0x55a5232501d8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a52324ff28 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55a52324ffa0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a523250020 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55a523250098 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a2d0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a2b0 <col:117> 'int' 0
|-CXXMethodDecl 0x55a523250568 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55a5232502b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523250328 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232503a8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55a52325a2e8 <col:99> 'int' 0
| `-ParmVarDecl 0x55a523250420 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55a52325a328 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55a52325a308 <col:119> 'int' 0
|-CXXMethodDecl 0x55a523250988 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55a523250638 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a5232506b8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a523250730 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232507b0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55a52325a360 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55a52325a340 <col:108> 'int' 0
| `-ParmVarDecl 0x55a523250830 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55a52325a398 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55a52325a378 <col:141> 'int' 0
|-CXXMethodDecl 0x55a523250da8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a523250a60 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55a523250ae0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55a523250b58 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a523250bd8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55a523250c58 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a52325a3b0 <col:121> 'int' 0
|-CXXMethodDecl 0x55a5232511d8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55a523250e88 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55a523250f08 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55a523250f80 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55a523251000 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55a52325a3d0 <col:98> 'int' 0
| `-ParmVarDecl 0x55a523251080 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55a52325a3f0 <col:123> 'int' 0
|-CXXMethodDecl 0x55a5232514a0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55a5232512b0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55a523251330 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55a5232513b0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55a52325a410 <col:80> 'int' 0
|-EnumDecl 0x55a523251558 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55a523251660 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a5232518f0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523251640 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55a523251620 <col:42> 'int' 1
| |-EnumConstantDecl 0x55a5232516f0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a523251908 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232516d0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55a5232516b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a523251780 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a523251920 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523251760 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55a523251740 <col:44> 'int' 4
| |-EnumConstantDecl 0x55a523251810 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55a523251938 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232517f0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55a5232517d0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55a5232518a0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55a523251950 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523251880 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55a523251860 <col:34> 'int' 6
|-CXXMethodDecl 0x55a523251c08 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55a523251978 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55a523251a18 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a523251a98 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55a523251b10 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55a52325a4c8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55a52325a4b0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55a52325a498 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55a52325a478 <col:98, col:105> 'String' (CXXTemporary 0x55a52325a478)
|           `-CXXTemporaryObjectExpr 0x55a52325a440 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55a523251ea8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55a523251cd8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a523251d50 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55a523251dc8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a52325a578 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a52325a560 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a52325a548 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a52325a528 <col:94, col:101> 'String' (CXXTemporary 0x55a52325a528)
| |         `-CXXTemporaryObjectExpr 0x55a52325a4f0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55a52325ad60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55a52325acd8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55a52325aca8 <col:9> '<bound member function type>' ->add_task_handlers 0x55a523251c08
|     | `-CXXThisExpr 0x55a52325ac98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a52325ad18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a52325ac18 <col:27> 'Task *' lvalue ParmVar 0x55a523251cd8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a52325ad30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a52325ac38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55a523251d50 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55a52325ad48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a52325ac58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a5232518a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a52325ac78 <col:62> 'const String' lvalue ParmVar 0x55a523251dc8 'prefix' 'const String &'
|-CXXMethodDecl 0x55a5232520b8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55a523251f70 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55a523251fe8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55a52325a628 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55a52325a610 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55a52325a5f8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55a52325a5d8 <col:70, col:77> 'String' (CXXTemporary 0x55a52325a5d8)
| |         `-CXXTemporaryObjectExpr 0x55a52325a5a0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55a52325af38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55a52325aeb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55a52325ae80 <col:9> '<bound member function type>' ->add_task_handlers 0x55a523251c08
|     | `-CXXThisExpr 0x55a52325ae70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55a52325aef0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a52325adf0 <col:27> 'Task *' lvalue ParmVar 0x55a523251f70 'task' 'Task *'
|     |-ImplicitCastExpr 0x55a52325af08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55a52325ae10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55a52325af20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55a52325ae30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55a5232518a0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55a52325ae50 <col:57> 'const String' lvalue ParmVar 0x55a523251fe8 'prefix' 'const String &'
|-CXXMethodDecl 0x55a523252398 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55a523252180 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523252200 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523252278 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55a523252648 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55a523252468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a5232524e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523252568 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55a523252938 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a523252718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523252798 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523252810 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55a523252be8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55a523252a08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523252a88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523252b08 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55a523252e98 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55a523252cb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523252d38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523252db8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55a523253148 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55a523252f68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523252fe8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523253060 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55a5232533f8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55a523253218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523253298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523253318 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55a523253708 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55a523253520 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a5232535a0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523253620 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55a5232539e8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55a5232537d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523253858 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523253900 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55a523253cc8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55a523253ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523253b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523253be0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55a523253f30 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55a523253d98 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a523253e18 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a523253e90 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55a5232541d8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55a523254000 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55a523254080 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55a5232540f8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55a523254488 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55a5232542a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523254328 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a5232543a8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55a523254738 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55a523254558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a5232545d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523254650 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55a5232549e8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55a523254808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523254888 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523254900 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55a523254cb8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55a523254ab8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523254b38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55a523254bd8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55a523254fe8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55a523254d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55a523254e08 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55a523254e80 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55a523254ef8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a52325a640 <col:93> 'bool' false
|-CXXMethodDecl 0x55a5232551d0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a5232550b8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55a523255138 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55a5232553a8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a523255290 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55a523255310 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55a523255688 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a523255468 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55a5232554e0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55a523255560 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55a5232555d8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55a523255978 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55a523255758 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55a5232557d0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55a523255850 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55a5232558c8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55a523255bb0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55a523255a50 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55a523255ad0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55a523255d98 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55a523255c78 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55a523255cf8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55a523255e48 prev 0x55a52324d5e8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a523255f40 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55a523255fd0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55a523256048 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55a523256108 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55a5232561d0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55a523256348 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55a523256280 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55a5232563f0 <col:24>
| | `-OptimizeNoneAttr 0x55a523256448 <col:34>
| |-CXXMethodDecl 0x55a523256490 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55a523256748 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55a523256540 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a5232565b8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55a523256638 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55a523256800 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55a523256838 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55a5232568a0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55a523256928 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55a523256c48 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55a5232569e0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55a523256a58 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55a523256ad0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55a523256b50 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55a523256d60 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55a52325e6d8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55a52325e6d8
| | `-ParmVarDecl 0x55a52325e7e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55a52325e888 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55a52325e888
| | `-ParmVarDecl 0x55a52325e998 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55a523337460 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a523256dd8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55a523256e78 <col:38> "" ""
|-CXXMethodDecl 0x55a523256f08 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55a523256fa8 <col:44> "" ""
|-AccessSpecDecl 0x55a523257018 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55a523257040 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55a523257140 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55a523257190 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523257120 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55a523257100 <col:27> 'int' 4
|-FieldDecl 0x55a523257248 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55a5232573f8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55a5232574b0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55a523258540 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55a5232585a8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55a5232586f8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55a523258638 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55a5232588a8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55a5232587b8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55a523258a88 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55a523258968 <col:20> col:23 'int'
| `-ParmVarDecl 0x55a5232589e8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55a523258d30 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55a523258b50 <col:23> col:26 'int'
| |-ParmVarDecl 0x55a523258bd0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55a523258c48 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55a523258de8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55a523258eb0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55a523258f00 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55a523258f50 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55a523259130 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55a523258fe0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55a523259058 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a5232593d8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55a5232591f8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55a523259278 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55a5232592f0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55a5232595f8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55a5232594a8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55a523259528 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55a523259930 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55a5232596b8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55a523259738 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55a5232597b0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55a523259830 <col:57> col:60 'int'
|-CXXMethodDecl 0x55a523259b18 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55a523259a00 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55a523259a80 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55a523259c68 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55a523259bd8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55a523259fe8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55a523259d28 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55a523259da8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55a523259e20 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55a523259ea0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55a52325a100 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | class HostEtherFilter
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
   108:0-0 |   _Bool _drop_own
   108:1-1 |   _Bool _drop_other
       112 |   int _offset
       116 |   class EtherAddress _addr
       116 |     uint16_t [3] _data
           | [sizeof=128, dsize=122, align=8,
           |  nvsize=122, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523261848 prev 0x55a523248db0 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55a5232632b8 <line:148:18>
|-CXXRecordDecl 0x55a523261940 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55a5232619d0 <col:22, col:28> col:22 public
|-TypedefDecl 0x55a523261a08 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55a522e3c740 'uninitialized_type'
|   `-CXXRecord 0x55a522e3c6a8 'uninitialized_type'
|-CXXConstructorDecl 0x55a523261a98 <line:14:5, line:16:5> line:14:12 used EtherAddress 'void ()' inline
| `-CompoundStmt 0x55a5232635b8 <col:27, line:16:5>
|   `-BinaryOperator 0x55a523263598 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55a5232633a0 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55a523263388 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a523263338 <col:2> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|     | |   `-CXXThisExpr 0x55a523263328 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55a523263368 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55a523263580 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55a523263560 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55a523263438 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55a523263420 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55a5232633d0 <col:13> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|         | |   `-CXXThisExpr 0x55a5232633c0 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55a523263400 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55a523263548 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55a523263528 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55a5232634d0 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55a5232634b8 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55a523263468 <col:24> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|             | |   `-CXXThisExpr 0x55a523263458 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55a523263498 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55a523263510 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55a5232634f0 <col:35> 'int' 0
|-CXXConstructorDecl 0x55a523261be8 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55a523261b58 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55a523263780 <col:61, line:24:5>
|   `-CallExpr 0x55a5232636d0 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55a5232636b8 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55a523263698 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a522f464b8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55a523263720 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55a523263708 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55a523263628 <col:9> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|     |     `-CXXThisExpr 0x55a523263618 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55a523263750 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55a523263738 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a523263658 <col:16> 'const unsigned char *' lvalue ParmVar 0x55a523261b58 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55a523263768 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55a523263678 <col:22> 'int' 6
|-CXXConstructorDecl 0x55a523261d38 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55a523261ca8 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55a5232637f0 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55a5232637c8 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55a523263798 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55a523261ca8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55a523261e38 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55a523263f38 <col:42, line:34:5>
|   `-ReturnStmt 0x55a523263f28 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55a523263f10 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55a523263ee0 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55a523263d18 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55a523263c90 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55a523263b80 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55a523263b68 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55a523263818 <col:22> 'int' 65535
|-CXXMethodDecl 0x55a523261ef8 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55a523261f98 <col:59> "" ""
|-TypedefDecl 0x55a523262118 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55a523262090 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55a523248e40 'EtherAddress'
|   | `-CXXRecord 0x55a523261848 'EtherAddress'
|   `-ParenType 0x55a523262030 'bool () const' sugar
|     `-FunctionProtoType 0x55a522d8f4c0 'bool () const' const cdecl
|       `-BuiltinType 0x55a522ce7330 'bool'
|-CXXConversionDecl 0x55a523262258 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55a523264318 <col:51, line:43:5>
|   `-ReturnStmt 0x55a523264308 <line:42:2, col:70>
|     `-ConditionalOperator 0x55a5232642d8 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55a523264200 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55a523264118 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55a5232640d0 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55a5232640b8 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55a523264000 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55a523263fe8 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55a523263f60 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       | | |     |   `-CXXThisExpr 0x55a523263f50 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55a523263f90 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55a523264100 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55a5232640e8 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55a523264098 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55a523264080 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55a523264030 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       | |       |   `-CXXThisExpr 0x55a523264020 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55a523264060 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55a5232641e8 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55a5232641d0 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55a5232641b0 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55a523264198 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55a523264148 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       |       |   `-CXXThisExpr 0x55a523264138 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55a523264178 <col:39> 'int' 2
|       |-UnaryOperator 0x55a523264288 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55a523264258 <col:45, col:59> 'bool () const' CXXMethod 0x55a523262328 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55a5232642c0 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55a5232642a0 <col:70> 'int' 0
|-CXXMethodDecl 0x55a523262328 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55a5232644d8 <col:34, line:51:5>
|   `-ReturnStmt 0x55a5232644c8 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55a5232644b0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55a523264490 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55a523264478 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a523264460 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a523264420 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55a5232643e0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55a5232643b0 <col:9> '<bound member function type>' ->data 0x55a5232627c0
|         |     |   `-CXXThisExpr 0x55a5232643a0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55a523264400 <col:16> 'int' 0
|         `-IntegerLiteral 0x55a523264440 <col:21> 'int' 1
|-CXXMethodDecl 0x55a5232623e8 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55a523264698 <col:34, line:59:5>
|   `-ReturnStmt 0x55a523264688 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55a523264670 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55a523264650 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55a523264638 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a523264620 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a5232645e0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55a5232645a0 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55a523264570 <col:9> '<bound member function type>' ->data 0x55a5232627c0
|         |     |   `-CXXThisExpr 0x55a523264560 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55a5232645c0 <col:16> 'int' 0
|         `-IntegerLiteral 0x55a523264600 <col:21> 'int' 2
|-CXXMethodDecl 0x55a5232624a8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55a523264998 <col:38, line:66:5>
|   `-ReturnStmt 0x55a523264988 <line:65:2, col:43>
|     `-BinaryOperator 0x55a523264968 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55a523264928 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55a523264840 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55a5232647f8 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55a5232647e0 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55a523264728 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55a523264710 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55a5232646c0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       | | |     |   `-CXXThisExpr 0x55a5232646b0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55a5232646f0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55a523264828 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55a523264810 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55a5232647c0 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55a5232647a8 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55a523264758 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       | |       |   `-CXXThisExpr 0x55a523264748 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55a523264788 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55a523264910 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55a5232648f8 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55a5232648d8 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55a5232648c0 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55a523264870 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       |       |   `-CXXThisExpr 0x55a523264860 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55a5232648a0 <col:37> 'int' 2
|       `-IntegerLiteral 0x55a523264948 <col:43> 'int' 196605
|-CXXMethodDecl 0x55a523262628 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55a523262560 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55a523264ae8 <col:64, line:75:5>
|   `-ReturnStmt 0x55a523264ad8 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55a523264ab8 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55a523264a88 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55a5232624a8
|         `-CXXReinterpretCastExpr 0x55a5232649f8 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55a5232649e0 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55a5232649b0 <col:48> 'const unsigned char *' lvalue ParmVar 0x55a523262560 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55a5232626f8 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55a523264bb0 <col:34, line:80:5>
|   `-ReturnStmt 0x55a523264ba0 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a523264b70 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55a523264b58 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55a523264b10 <col:43> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|           `-CXXThisExpr 0x55a523264b00 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55a5232627c0 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55a523264c78 <col:46, line:85:5>
|   `-ReturnStmt 0x55a523264c68 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55a523264c38 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55a523264c20 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55a523264bd8 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|           `-CXXThisExpr 0x55a523264bc8 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a523262908 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55a523264cf8 <col:42, line:91:5>
|   `-ReturnStmt 0x55a523264ce8 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55a523264cd0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55a523264ca0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|         `-CXXThisExpr 0x55a523264c90 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a5232629f8 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55a523265108 <col:36, line:97:5>
|   `-ReturnStmt 0x55a5232650f8 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55a5232650d8 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55a523264f58 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55a523264f38 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55a523264f20 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55a523264f08 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55a523264d88 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55a523264d70 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55a523264d20 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       |   |     |   `-CXXThisExpr 0x55a523264d10 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55a523264d50 <col:16> 'int' 2
|       |   `-ParenExpr 0x55a523264ee8 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55a523264ec8 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55a523264e80 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55a523264e68 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55a523264e50 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55a523264e20 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55a523264e08 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55a523264db8 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|       |       |       |   `-CXXThisExpr 0x55a523264da8 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55a523264de8 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55a523264ea8 <col:43> 'int' 16
|       `-ParenExpr 0x55a5232650b8 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55a523265098 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55a523265050 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55a523265038 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55a523265020 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55a523264ff0 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55a523264fd8 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55a523264f88 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55a5232630b8
|           |       |   `-CXXThisExpr 0x55a523264f78 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55a523264fb8 <col:24> 'int' 0
|           `-IntegerLiteral 0x55a523265078 <col:30> 'int' 9
|-CXXMethodDecl 0x55a523262ab8 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55a523265218 <col:35, line:111:5>
|   `-ReturnStmt 0x55a523265208 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55a5232651f0 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55a5232651c0 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a5232651a8 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55a523265188 <col:9, col:22> 'String' (CXXTemporary 0x55a523265188)
|             `-CXXMemberCallExpr 0x55a523265160 <col:9, col:22> 'String'
|               `-MemberExpr 0x55a523265130 <col:9> '<bound member function type>' ->unparse_dash 0x55a523262c38
|                 `-CXXThisExpr 0x55a523265120 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55a523262b78 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55a523262c38 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55a523262cf8 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55a523262d98 <col:44> "" ""
|-CXXConversionDecl 0x55a523262e38 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55a523262ee0 <col:51> "" ""
|-TypedefDecl 0x55a523262f98 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55a523262f60 'const EtherAddress &'
|   `-QualType 0x55a523248e41 'const EtherAddress' const
|     `-RecordType 0x55a523248e40 'EtherAddress'
|       `-CXXRecord 0x55a523261848 'EtherAddress'
|-AccessSpecDecl 0x55a523262ff0 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55a5232630b8 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55a523263208 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55a523263118 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a5232654c0 <col:30, line:146:5>
|   `-BinaryOperator 0x55a5232654a0 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55a5232652a8 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55a523265290 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a523265240 <col:2> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|     | |   `-CXXThisExpr 0x55a523265230 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55a523265270 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55a523265488 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55a523265468 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55a523265340 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55a523265328 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55a5232652d8 <col:13> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|         | |   `-CXXThisExpr 0x55a5232652c8 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55a523265308 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55a523265450 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55a523265430 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55a5232653d8 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55a5232653c0 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55a523265370 <col:24> 'uint16_t [3]' lvalue ->_data 0x55a5232630b8
|             | |   `-CXXThisExpr 0x55a523265360 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55a5232653a0 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55a523265418 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55a5232653f8 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a523263118 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55a523263838 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55a523263838
| `-ParmVarDecl 0x55a523263948 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55a5232639e8 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523263af8 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55a5232630b8 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55a523263e80 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55a523263e08 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55a523263dc0 <col:7> 'uint16_t [3]' xvalue ._data 0x55a5232630b8
| |   |   `-CXXStaticCastExpr 0x55a523263d90 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55a523263d60 <col:7> 'EtherAddress' lvalue ParmVar 0x55a523263af8 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55a523263e68 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55a523263e48 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55a523263e30 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55a523263e08 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55a523263dc0 <col:7> 'uint16_t [3]' xvalue ._data 0x55a5232630b8
| |       |     `-CXXStaticCastExpr 0x55a523263d90 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55a523263d60 <col:7> 'EtherAddress' lvalue ParmVar 0x55a523263af8 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55a523263e20 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55a523263ed0 <col:7>
`-CXXDestructorDecl 0x55a523263bb0 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5231c8ce0 <../elements/ethernet/hostetherfilter.hh:50:1, line:72:1> line:50:7 class HostEtherFilter definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55a5231c8e38 <col:1, col:7> col:7 implicit referenced class HostEtherFilter
|-AccessSpecDecl 0x55a5231c8ec8 <col:42, col:48> col:42 public
|-CXXConstructorDecl 0x55a5231c8f50 <line:52:3, col:19> col:3 HostEtherFilter 'void ()'
|-CXXDestructorDecl 0x55a5231c9040 <line:53:3, col:20> col:3 ~HostEtherFilter 'void ()' noexcept-unevaluated 0x55a5231c9040
| `-Overrides: [ 0x55a523249138 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55a5231c9170 <line:55:3, col:62> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55a52324a598 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55a5231c9f28 <col:34, col:62>
|   `-ReturnStmt 0x55a5231c9f18 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a5231c9f00 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55a5231c9ed8 <col:43> 'const char [16]' lvalue "HostEtherFilter"
|-CXXMethodDecl 0x55a5231c9238 <line:56:3, col:56> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55a52324a660 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55a5231c9f88 <col:34, col:56>
|   `-ReturnStmt 0x55a5231c9f78 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a5231c9f60 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a5231c9f40 <col:43> 'const char []' lvalue Var 0x55a52324a998 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55a5231c9300 <line:57:3, col:60> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55a52324aa28 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55a5231c9fe8 <col:34, col:60>
|   `-ReturnStmt 0x55a5231c9fd8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55a5231c9fc0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55a5231c9fa0 <col:43> 'const char []' lvalue Var 0x55a52324ad90 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55a5231c95d0 <line:59:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55a52324be30 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55a5231c9480 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55a5231c94f8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55a5231c96a0 <line:60:3, col:52> col:8 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55a52324e880 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55a5231ca020 <col:37, col:52>
|   `-ReturnStmt 0x55a5231ca010 <col:39, col:46>
|     `-CXXBoolLiteralExpr 0x55a5231ca000 <col:46> 'bool' true
|-CXXMethodDecl 0x55a5231c97e0 <line:62:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55a523249778 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55a5231c9750 <col:25, col:32> col:33 'Packet *'
|-CXXMethodDecl 0x55a5231c98a8 <line:63:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55a52324bf00 Element::add_handlers 'void ()' ]
|-AccessSpecDecl 0x55a5231c9948 <line:65:2, col:9> col:2 private
|-FieldDecl 0x55a5231c99c0 <line:67:3, col:20> col:8 _drop_own 'bool'
| `-ConstantExpr 0x55a5231c99a0 <col:20> 'int' Int: 1
|   `-IntegerLiteral 0x55a5231c9970 <col:20> 'int' 1
|-FieldDecl 0x55a5231c9a60 <line:68:3, col:22> col:8 _drop_other 'bool'
| `-ConstantExpr 0x55a5231c9a40 <col:22> 'int' Int: 1
|   `-IntegerLiteral 0x55a5231c9a10 <col:22> 'int' 1
|-FieldDecl 0x55a5231c9ac8 <line:69:3, col:7> col:7 _offset 'int'
|-FieldDecl 0x55a5231c9b28 <line:70:3, col:16> col:16 _addr 'EtherAddress'
|-CXXConstructorDecl 0x55a5231c9ba8 <line:50:7> col:7 implicit HostEtherFilter 'void (const HostEtherFilter &)' inline default_delete noexcept-unevaluated 0x55a5231c9ba8
| `-ParmVarDecl 0x55a5231c9cb8 <col:7> col:7 'const HostEtherFilter &'
`-CXXMethodDecl 0x55a5231c9d58 <col:7> col:7 implicit operator= 'HostEtherFilter &(const HostEtherFilter &)' inline default_delete noexcept-unevaluated 0x55a5231c9d58
  `-ParmVarDecl 0x55a5231c9e68 <col:7> col:7 'const HostEtherFilter &'

Layout: <CGRecordLayout
  LLVMType:%class.HostEtherFilter = type <{ %class.Element.base, i8, [3 x i8], i32, %class.EtherAddress, [6 x i8] }>
  NonVirtualBaseLLVMType:%class.HostEtherFilter.base = type <{ %class.Element.base, i8, [3 x i8], i32, %class.EtherAddress }>
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:108>
    <CGBitFieldInfo Offset:1 Size:1 IsSigned:0 StorageSize:8 StorageOffset:108>
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52301cd00 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55a52301ce18 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55a52301ceb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55a52301cf18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55a52301cf78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55a52301d028 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52301d330 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a52301d448 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55a52301d4f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55a52301d558 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55a52301d5e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55a523023680 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a523023ab8 <col:12>
|-CXXConstructorDecl 0x55a523023788 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523023898 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a52301d4f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55a523026040 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55a523026010 <col:12> 'const char *const' lvalue .data 0x55a52301d4f0
| |     `-DeclRefExpr 0x55a523025ff0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a52301d558 'length' 'int'
| | `-ImplicitCastExpr 0x55a5230260d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a5230260a0 <col:12> 'const int' lvalue .length 0x55a52301d558
| |     `-DeclRefExpr 0x55a523026080 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55a52301d5e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55a523026160 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55a523026130 <col:12> 'String::memo_t *const' lvalue .memo 0x55a52301d5e8
| |     `-DeclRefExpr 0x55a523026110 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| `-CompoundStmt 0x55a5230261b8 <col:12>
|-CXXConstructorDecl 0x55a523023938 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a523023938
| `-ParmVarDecl 0x55a523023a48 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55a523028fa0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55a5230349b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523034ac8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55a523034fe0 <col:12>
|   |-BinaryOperator 0x55a523034df8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a523034db0 <col:12> 'const char *' lvalue ->data 0x55a52301d4f0
|   | | `-CXXThisExpr 0x55a523034da0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a523034de0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55a523034d70 <col:12> 'const char *const' lvalue .data 0x55a52301d4f0
|   |     `-DeclRefExpr 0x55a523034d50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a523034ec0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55a523034e78 <col:12> 'int' lvalue ->length 0x55a52301d558
|   | | `-CXXThisExpr 0x55a523034e68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a523034ea8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55a523034e38 <col:12> 'const int' lvalue .length 0x55a52301d558
|   |     `-DeclRefExpr 0x55a523034e18 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55a523034f88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55a523034f40 <col:12> 'String::memo_t *' lvalue ->memo 0x55a52301d5e8
|   | | `-CXXThisExpr 0x55a523034f30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55a523034f70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55a523034f00 <col:12> 'String::memo_t *const' lvalue .memo 0x55a52301d5e8
|   |     `-DeclRefExpr 0x55a523034ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55a523034fd0 <col:12>
|     `-UnaryOperator 0x55a523034fb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a523034fa8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55a523034b38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a523034b38
  `-ParmVarDecl 0x55a523034c48 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523014270 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a523014388 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55a523014418 <col:16, col:22> col:16 public
|-TypedefDecl 0x55a523014458 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55a522ce7e00 'const char *'
|   `-QualType 0x55a522ce7351 'const char' const
|     `-BuiltinType 0x55a522ce7350 'char'
|-TypedefDecl 0x55a5230144e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55a5230144b0 'String::const_iterator' sugar
|   |-Typedef 0x55a523014458 'const_iterator'
|   `-PointerType 0x55a522ce7e00 'const char *'
|     `-QualType 0x55a522ce7351 'const char' const
|       `-BuiltinType 0x55a522ce7350 'char'
|-TypedefDecl 0x55a523014650 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55a5230145c0 'int (String::*)() const'
|   |-RecordType 0x55a523014300 'String'
|   | `-CXXRecord 0x55a523014270 'String'
|   `-ParenType 0x55a523014560 'int () const' sugar
|     `-FunctionProtoType 0x55a522fe80f0 'int () const' const cdecl
|       `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5230146b8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55a522e3ccd0 'int64_t' sugar
|   |-Typedef 0x55a522d502a0 'int64_t'
|   `-TypedefType 0x55a522d29510 '__int64_t' sugar
|     |-Typedef 0x55a522d290e8 '__int64_t'
|     `-BuiltinType 0x55a522ce73d0 'long'
|-TypedefDecl 0x55a523014720 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55a522e3cbf0 'uint64_t' sugar
|   |-Typedef 0x55a522d50440 'uint64_t'
|   `-TypedefType 0x55a522d295a0 '__uint64_t' sugar
|     |-Typedef 0x55a522d29158 '__uint64_t'
|     `-BuiltinType 0x55a522ce7470 'unsigned long'
|-TypedefDecl 0x55a5230147b0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55a523014780 'String::intmax_t' sugar
|   |-Typedef 0x55a5230146b8 'intmax_t'
|   `-TypedefType 0x55a522e3ccd0 'int64_t' sugar
|     |-Typedef 0x55a522d502a0 'int64_t'
|     `-TypedefType 0x55a522d29510 '__int64_t' sugar
|       |-Typedef 0x55a522d290e8 '__int64_t'
|       `-BuiltinType 0x55a522ce73d0 'long'
|-TypedefDecl 0x55a523014840 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55a523014810 'String::uintmax_t' sugar
|   |-Typedef 0x55a523014720 'uintmax_t'
|   `-TypedefType 0x55a522e3cbf0 'uint64_t' sugar
|     |-Typedef 0x55a522d50440 'uint64_t'
|     `-TypedefType 0x55a522d295a0 '__uint64_t' sugar
|       |-Typedef 0x55a522d29158 '__uint64_t'
|       `-BuiltinType 0x55a522ce7470 'unsigned long'
|-CXXConstructorDecl 0x55a523014900 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55a523014aa8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55a5230149e8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55a523014c58 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55a523014b98 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55a523014db0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55a523014d20 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55a523014fc8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a523014e78 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55a523014ef8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55a5230151e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55a523015098 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55a523015118 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55a523015408 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a5230152b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55a523015338 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55a523015628 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55a5230154d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55a523015558 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55a5230157b8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55a5230156f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55a523015938 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55a523015878 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55a523015ac8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55a523015a00 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55a523015c20 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55a523015b90 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55a523015d78 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55a523015ce8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55a523015ed0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55a523015e40 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55a523016058 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55a523015f98 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55a5230161e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55a523016120 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55a523016378 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55a5230162b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55a523016508 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55a523016440 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55a523016600 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55a523016728 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55a5230168a8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55a5230167e0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55a5230169f8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55a523016968 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55a523016ab0 <col:63> "" ""
|-CXXMethodDecl 0x55a523016bf8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55a523016b38 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55a523016e08 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55a523016cb8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55a523016d38 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55a523017028 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55a523016ed0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55a523016f50 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55a523017308 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55a5230170e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55a523017168 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55a523023150 <col:55> 'int' 10
| `-ParmVarDecl 0x55a5230171e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a523023170 <col:76> 'bool' true
|-CXXMethodDecl 0x55a5230175e8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55a5230173d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55a523017450 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55a523023180 <col:56> 'int' 10
| `-ParmVarDecl 0x55a5230174c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a5230231a0 <col:77> 'bool' true
|-CXXMethodDecl 0x55a5230176f0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55a5230177b8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55a523017880 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55a523017920 <col:20>
| `-OptimizeNoneAttr 0x55a523017978 <col:30>
|-CXXConversionDecl 0x55a523017a68 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55a523017b38 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55a523017bf8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55a523017ce8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a523017da8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55a523017f28 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55a523017e60 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55a523018078 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55a523017fe8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55a523018168 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55a523018228 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55a523018478 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55a5230182e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55a523018360 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55a5230186d8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55a523018540 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55a5230185c0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55a5230187a8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55a5230189b8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55a523018860 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55a5230188e0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55a523018bd8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55a523018a80 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55a523018b00 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55a523018d68 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55a523018ca0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55a523018e58 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55a523018fc8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a523018f08 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a5230191d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55a523019088 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a523019108 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a5230193f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55a523019298 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55a523019310 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55a523019580 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55a5230194b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a5230197a0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55a523019640 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55a5230196c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a5230198f0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55a523019860 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55a523019ac8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a5230199b0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a523019a30 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55a523019c18 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55a523019b88 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55a523019e30 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55a523019cd0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55a523019d50 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55a5230231b0 <col:39> 'int' 0
|-CXXMethodDecl 0x55a52301a050 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55a523019ef0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55a523019f70 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55a5230231d0 <col:48> 'int' 0
|-CXXMethodDecl 0x55a52301a230 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55a52301a110 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55a52301a190 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55a5230231f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55a52301a300 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55a52301a3c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55a52301a480 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55a52301a540 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55a52301a600 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55a52301a7a8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a52301a6b0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55a52301a928 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55a52301a860 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55a52301ab00 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a52301a9e8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55a52301ac78 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55a52301abb8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55a52301adc0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55a52301ad30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55a52301af10 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55a52301ae80 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55a52301b0e8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55a52301afd0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55a52301b050 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55a52301b2c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55a52301b1b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55a52301b230 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55a52301b418 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55a52301b388 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55a52301b628 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55a52301b4d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55a52301b558 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55a52301b788 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55a52301b6f0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55a52301b8e0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55a52301b848 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55a52301b988 <col:57> "" ""
|-CXXMethodDecl 0x55a52301ba98 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55a52301ba08 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55a52301bbe8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55a52301bb58 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55a52301bd68 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55a52301bca0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55a52301be30 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55a52301bef0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55a52301bfb0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55a52301c050 <col:49> "" ""
|-CXXMethodDecl 0x55a52301c0e0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55a52301c1a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55a52301c290 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55a52301c358 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55a52301c418 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55a52301c4d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55a52301c5d0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55a52301c698 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55a52301c760 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55a52301c938 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55a52301c818 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55a52301c898 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55a52301cb60 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55a52301ca00 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55a52301ca80 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55a52301cc70 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55a52301ccd8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55a52301cd00 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55a52301ce18 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55a52301ceb8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55a52301cf18 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55a52301cf78 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55a52301d028 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55a52301d090 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55a52301d2c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55a52301d318 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a52301d2a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55a52301d1b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55a52301d160 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55a52301d1a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55a52301d180 <col:32> 'int' 8
|-CXXRecordDecl 0x55a52301d330 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a52301d448 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55a52301d4f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55a52301d558 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55a52301d5e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55a523023680 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a523023ab8 <col:12>
| |-CXXConstructorDecl 0x55a523023788 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a523023898 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a52301d4f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55a523026040 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55a523026010 <col:12> 'const char *const' lvalue .data 0x55a52301d4f0
| | |     `-DeclRefExpr 0x55a523025ff0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a52301d558 'length' 'int'
| | | `-ImplicitCastExpr 0x55a5230260d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55a5230260a0 <col:12> 'const int' lvalue .length 0x55a52301d558
| | |     `-DeclRefExpr 0x55a523026080 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55a52301d5e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55a523026160 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55a523026130 <col:12> 'String::memo_t *const' lvalue .memo 0x55a52301d5e8
| | |     `-DeclRefExpr 0x55a523026110 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523023898 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55a5230261b8 <col:12>
| |-CXXConstructorDecl 0x55a523023938 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a523023938
| | `-ParmVarDecl 0x55a523023a48 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55a523028fa0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55a5230349b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a523034ac8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55a523034fe0 <col:12>
| |   |-BinaryOperator 0x55a523034df8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55a523034db0 <col:12> 'const char *' lvalue ->data 0x55a52301d4f0
| |   | | `-CXXThisExpr 0x55a523034da0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a523034de0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a523034d70 <col:12> 'const char *const' lvalue .data 0x55a52301d4f0
| |   |     `-DeclRefExpr 0x55a523034d50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a523034ec0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55a523034e78 <col:12> 'int' lvalue ->length 0x55a52301d558
| |   | | `-CXXThisExpr 0x55a523034e68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a523034ea8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55a523034e38 <col:12> 'const int' lvalue .length 0x55a52301d558
| |   |     `-DeclRefExpr 0x55a523034e18 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55a523034f88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55a523034f40 <col:12> 'String::memo_t *' lvalue ->memo 0x55a52301d5e8
| |   | | `-CXXThisExpr 0x55a523034f30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55a523034f70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55a523034f00 <col:12> 'String::memo_t *const' lvalue .memo 0x55a52301d5e8
| |   |     `-DeclRefExpr 0x55a523034ee0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55a523034ac8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55a523034fd0 <col:12>
| |     `-UnaryOperator 0x55a523034fb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a523034fa8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55a523034b38 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55a523034b38
|   `-ParmVarDecl 0x55a523034c48 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55a52301d660 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55a52301d8a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55a52301d6c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55a52301d748 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55a52301d7c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55a523023640 <col:79, line:261:5>
|   |-BinaryOperator 0x55a5230232b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55a523023250 <col:2, col:5> 'const char *' lvalue .data 0x55a52301d4f0
|   | | `-MemberExpr 0x55a523023220 <col:2> 'String::rep_t' lvalue ->_r 0x55a52301d660
|   | |   `-CXXThisExpr 0x55a523023210 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a5230232a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a523023280 <col:12> 'const char *' lvalue ParmVar 0x55a52301d6c8 'data' 'const char *'
|   |-BinaryOperator 0x55a523023380 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55a523023318 <col:2, col:5> 'int' lvalue .length 0x55a52301d558
|   | | `-MemberExpr 0x55a5230232e8 <col:2> 'String::rep_t' lvalue ->_r 0x55a52301d660
|   | |   `-CXXThisExpr 0x55a5230232d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55a523023368 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55a523023348 <col:14> 'int' lvalue ParmVar 0x55a52301d748 'length' 'int'
|   `-IfStmt 0x55a523023628 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55a5230234a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a523023488 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55a523023468 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55a523023448 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55a5230233e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|     |       | `-MemberExpr 0x55a5230233b0 <col:7> 'String::rep_t' lvalue ->_r 0x55a52301d660
|     |       |   `-CXXThisExpr 0x55a5230233a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55a523023430 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a523023410 <col:17> 'String::memo_t *' lvalue ParmVar 0x55a52301d7c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55a523023600 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55a5230235e8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a5230234f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55a52300c2d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55a523023558 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a52301ceb8
|         `-ImplicitCastExpr 0x55a523023540 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55a523023520 <col:27> 'String::memo_t *' lvalue ParmVar 0x55a52301d7c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55a52301db58 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55a52301d978 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55a52301d9f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55a52301da70 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55a52301d660 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55a523023ac8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55a523023c58 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55a523023bc0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55a523023b30 <col:2> '<bound member function type>' ->assign_memo 0x55a52301d8a8
|     | `-ImplicitCastExpr 0x55a523023bf8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55a523023b20 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55a523023c10 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55a523023b60 <col:14> 'const char *' lvalue ParmVar 0x55a52301d978 'data' 'const char *'
|     |-ImplicitCastExpr 0x55a523023c28 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55a523023b80 <col:20> 'int' lvalue ParmVar 0x55a52301d9f8 'length' 'int'
|     `-ImplicitCastExpr 0x55a523023c40 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55a523023ba0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55a52301da70 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55a52301dce8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55a52301dc28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55a523023eb0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55a523023e30 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55a523023c80 <col:2> '<bound member function type>' ->assign_memo 0x55a52301d8a8
|     | `-CXXThisExpr 0x55a523023c70 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55a523023e68 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55a523023d00 <col:14, col:19> 'const char *' lvalue .data 0x55a52301d4f0
|     |   `-MemberExpr 0x55a523023cd0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55a52301d660
|     |     `-DeclRefExpr 0x55a523023cb0 <col:14> 'const String' lvalue ParmVar 0x55a52301dc28 'x' 'const String &'
|     |-ImplicitCastExpr 0x55a523023e80 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55a523023d80 <col:25, col:30> 'int' lvalue .length 0x55a52301d558
|     |   `-MemberExpr 0x55a523023d50 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55a52301d660
|     |     `-DeclRefExpr 0x55a523023d30 <col:25> 'const String' lvalue ParmVar 0x55a52301dc28 'x' 'const String &'
|     `-ImplicitCastExpr 0x55a523023e98 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55a523023e00 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|         `-MemberExpr 0x55a523023dd0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55a52301d660
|           `-DeclRefExpr 0x55a523023db0 <col:38> 'const String' lvalue ParmVar 0x55a52301dc28 'x' 'const String &'
|-CXXMethodDecl 0x55a52301ddb0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55a523024870 <col:31, line:278:5>
|   `-IfStmt 0x55a523024858 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55a523023f50 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55a523023f38 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55a523023f08 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|     |     `-MemberExpr 0x55a523023ed8 <col:6> 'String::rep_t' lvalue ->_r 0x55a52301d660
|     |       `-CXXThisExpr 0x55a523023ec8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55a523024830 <col:15, line:277:2>
|       |-ParenExpr 0x55a523024400 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55a5230243d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55a523024060 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55a523024048 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55a523024030 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55a523023ff0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a52301ceb8
|       |   |       `-ImplicitCastExpr 0x55a523023fd8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55a523023fa8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|       |   |           `-MemberExpr 0x55a523023f78 <col:27> 'String::rep_t' lvalue ->_r 0x55a52301d660
|       |   |             `-CXXThisExpr 0x55a523023f68 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55a5230240c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55a5230240a0 <col:54> 'int' 0
|       |   `-CallExpr 0x55a523024330 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55a523024318 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55a523024298 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55a523024370 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a5230241a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55a523024388 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55a5230241d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55a5230243a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55a523024210 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55a5230243b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55a523024280 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55a523024268 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55a523024230 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55a523024750 <line:274:6, line:275:22>
|       | |-CallExpr 0x55a523024610 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55a5230245f8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55a523024570 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55a52300d720 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55a523024540 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55a52301ceb8
|       | |   `-ImplicitCastExpr 0x55a523024528 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55a5230244f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|       | |       `-MemberExpr 0x55a5230244c8 <col:40> 'String::rep_t' lvalue ->_r 0x55a52301d660
|       | |         `-CXXThisExpr 0x55a5230244b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55a523024710 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55a5230246f8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55a523024638 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55a523022590 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55a523024738 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55a523024698 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|       |       `-MemberExpr 0x55a523024668 <col:15> 'String::rep_t' lvalue ->_r 0x55a52301d660
|       |         `-CXXThisExpr 0x55a523024658 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55a523024810 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55a5230247a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55a52301d5e8
|         | `-MemberExpr 0x55a523024778 <col:6> 'String::rep_t' lvalue ->_r 0x55a52301d660
|         |   `-CXXThisExpr 0x55a523024768 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55a5230247f8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55a5230247d8 <col:16> 'int' 0
|-CXXMethodDecl 0x55a52301e048 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55a52301de68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a52301dee8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a52301df60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55a52301e120 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55a52301e370 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55a52301e1d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55a52301e258 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55a52301e2d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a52301e558 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55a52301e440 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55a52301e4c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55a52301e658 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55a523024948 <col:41, line:286:5>
|   `-ReturnStmt 0x55a523024938 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55a523024908 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55a5230248d0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55a5230248b8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55a523024898 <col:46> 'int' 1
|-CXXMethodDecl 0x55a52301e8f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55a52301e710 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55a52301e790 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55a52301e810 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55a523022590 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55a52301e9c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55a523022660 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55a523022830 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55a523022718 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55a523022798 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55a5230228f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55a5230229b8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55a523022ab8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55a523022b30 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55a523022ba8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55a523022c10 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55a523022d10 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55a523022d60 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523022cf0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55a523022cd0 <col:22> 'int' 14
|-CXXMethodDecl 0x55a523022f78 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55a523022d90 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55a523022e10 <col:38> col:41 'int'
| `-ParmVarDecl 0x55a523022e90 <col:43> col:46 'int'
|-FriendDecl 0x55a523023080 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55a523023110 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5232a36c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55a5232a3898 prev 0x55a5232a36c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a5232a3928 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a5232a3950 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232a52b0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55a5232a5260 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55a5232a5240 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55a5232a3b68 'type'
|     `-SubstTemplateTypeParmType 0x55a5232a3b30 'String' sugar
|       |-TemplateTypeParmType 0x55a522fd7b10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fd7ac0 'T'
|       `-RecordType 0x55a523014300 'String'
|         `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a5368 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55a5232a5330 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55a5232a5310 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a5232a52b0 'type'
|     `-ElaboratedType 0x55a5232a5260 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55a5232a5240 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55a5232a3b68 'type'
|         `-SubstTemplateTypeParmType 0x55a5232a3b30 'String' sugar
|           |-TemplateTypeParmType 0x55a522fd7b10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a522fd7ac0 'T'
|           `-RecordType 0x55a523014300 'String'
|             `-CXXRecord 0x55a523014270 'String'
|-CXXMethodDecl 0x55a5232a54e8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55a5232a53f8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55a5232a55d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a5232a56b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55a5232a56b8
|-CXXMethodDecl 0x55a5232a5988 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a5232a5890 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55a5232a5bc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a5232a5a40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232a5ab8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a5d98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a5232a5c88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232a5d00 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a5ef8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a5232a5fc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55a5232a6218 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a5232a6088 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a5232a6100 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a6478 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55a5232a62e8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55a5232a6360 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a6658 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a5232a6560 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a6818 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55a5232a6720 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a68d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5232a6980 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a5232a6bb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55a5232a6a30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232a6aa8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55a5232a6e58 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55a5232a6d60 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55a5232a6f20 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55a5232a6f70 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a5232a6fc0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a52324baa0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55a5232a2128 prev 0x55a52324baa0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a5232a3630 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55a5232a35e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55a5232a35c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55a5232a3470 'type'
|     `-SubstTemplateTypeParmType 0x55a5232a3300 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55a522fad8c0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55a522fad868 'F'
|       `-RecordType 0x55a5232a2f60 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55a5232a2e80 'typed_array_memory'
|-FieldDecl 0x55a5232a7010 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55a5232a7060 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a5232a7098 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|   |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|   `-RecordType 0x55a523014300 'String'
|     `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a7128 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55a5232a70f0 'String &'
|   `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-RecordType 0x55a523014300 'String'
|       `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a71b8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55a5232a7180 'const String &'
|   `-QualType 0x55a5232a21c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-RecordType 0x55a523014300 'String'
|         `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a7248 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55a5232a7210 'String *'
|   `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-RecordType 0x55a523014300 'String'
|       `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a72d8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55a5232a72a0 'const String *'
|   `-QualType 0x55a5232a21c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-RecordType 0x55a523014300 'String'
|         `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a7f30 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55a5232a7ee0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55a5232a7ec0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55a5232a7df8 'type'
|     `-LValueReferenceType 0x55a5232a7dc0 'const String &'
|       `-QualType 0x55a5232a7b61 'const String' const
|         `-SubstTemplateTypeParmType 0x55a5232a7b60 'String' sugar
|           |-TemplateTypeParmType 0x55a522fb7810 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55a522fb77b8 'T'
|           `-RecordType 0x55a523014300 'String'
|             `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a7f98 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55a5232a7180 'const String &'
|   `-QualType 0x55a5232a21c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-RecordType 0x55a523014300 'String'
|         `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a7ff0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232a8058 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55a5232a7210 'String *'
|   `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-RecordType 0x55a523014300 'String'
|       `-CXXRecord 0x55a523014270 'String'
|-TypedefDecl 0x55a5232a80c0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55a5232a72a0 'const String *'
|   `-QualType 0x55a5232a21c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55a5232a21c0 'String' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-RecordType 0x55a523014300 'String'
|         `-CXXRecord 0x55a523014270 'String'
|-EnumDecl 0x55a5232a8118 <line:134:5> col:5
| `-EnumConstantDecl 0x55a5232a8210 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a5232a81f0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a522fe64b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a522fe6490 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a522fe6470 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a5232a8298 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a5232a8528 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232a8350 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232a83f0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55a5232a87b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55a5232a86a0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55a5232a8a78 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55a5232a8960 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a5232a8d90 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55a5232a8c70 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55a5232a90a0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55a5232a8f80 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55a5232a9390 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232a91d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232a9250 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a5232a94b8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a5232a9568 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a95c0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a9608 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55a5232a96b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a9710 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a97d8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a5232a9888 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a98e0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a9928 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a5232a99d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a9a30 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a9a78 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a5232a9b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a9b80 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a9bc8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55a5232a9c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232a9cd0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232a9cf8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a5232a9da8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a5232a9e58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a5232aa018 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232a9f08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232a9f80 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a5232aa168 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232aa0d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232aa318 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55a5232aa220 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a5232aa3d0 <col:20>
| `-OptimizeNoneAttr 0x55a5232aa428 <col:30>
|-CXXMethodDecl 0x55a5232aa548 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55a5232aa450 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a5232aa600 <col:20>
| `-OptimizeNoneAttr 0x55a5232aa658 <col:30>
|-CXXMethodDecl 0x55a5232aa710 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232aa680 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232aa858 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a5232aa7c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232aa988 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55a5232aaa88 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55a5232aab58 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55a5232aac28 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55a5232aad68 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232aacd8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232aaeb0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a5232aae20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232aaff8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a5232aaf68 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a5232ab0b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a5232ab1b0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a5232ab120 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a5232ab268 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a5232ab328 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55a5232ab428 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55a5232ab5a8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a5232ab4e8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55a5232abd68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a5232ab660 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55a5232abcc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55a5232abbc8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55a5232abe48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5232abf98 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55a5232abf08 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a5232ac050 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a5232ac298 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232ac110 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a5232ac188 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55a5232ac428 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55a5232ac368 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a5232ac638 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55a5232ac4f0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55a5232ac568 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55a5232ac6f8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a5232ac958 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55a5232ac860 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55a5232aca28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55a5232aca28

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523324398 prev 0x55a5232b7618 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a523324490 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55a523324520 <col:22, col:28> col:22 public
|-EnumDecl 0x55a523324548 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55a523324668 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324648 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55a523324630 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a523324610 <col:14> 'int' 999
| |-EnumConstantDecl 0x55a523324710 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a5233246f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55a5233246d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55a5233246b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a5233247a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324780 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55a523324760 <col:17> 'int' 0
| |-EnumConstantDecl 0x55a523324830 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324810 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55a5233247f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55a5233248c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a5233248a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55a523324880 <col:16> 'int' 2
| |-EnumConstantDecl 0x55a523324950 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324930 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55a523324910 <col:13> 'int' 3
| |-EnumConstantDecl 0x55a5233249e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a5233249c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55a5233249a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55a523324a70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324a50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55a523324a30 <col:14> 'int' 5
| |-EnumConstantDecl 0x55a523324b00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55a523324ae0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55a523324ac0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55a523324b90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55a523324b70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55a523324b50 <col:13> 'int' 7
|-VarDecl 0x55a523324c00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55a523324c88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55a523324d10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55a523324d98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55a523324e20 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55a523324ea8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55a523324f30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55a523324fb8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55a523325040 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55a5233250c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55a523325150 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55a523325250 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55a52332a588 '_nerrors' 'int'
| | `-IntegerLiteral 0x55a52332ad18 <line:128:13> 'int' 0
| `-CompoundStmt 0x55a52332ad88 <col:16, line:129:5>
|-CXXDestructorDecl 0x55a523325340 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55a52332ad98 <col:29, line:132:5>
|-CXXMethodDecl 0x55a5233254f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55a523325430 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a5233255c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a5233256a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a52332adf0 <col:44, line:161:5>
|   `-ReturnStmt 0x55a52332ade0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55a52332adc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a52332ada8 <col:9> 'ErrorHandler *' lvalue Var 0x55a52332a5e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55a5233257e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55a523325758 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55a5233258b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55a52332ae50 <col:43, line:173:5>
|   `-ReturnStmt 0x55a52332ae40 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55a52332ae28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55a52332ae08 <col:9> 'ErrorHandler *' lvalue Var 0x55a52332a660 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55a523325968 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55a5233259e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55a523325af8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55a523325a68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a523325c48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55a523325bb8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a523325da0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55a523325d08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55a523325ef8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55a523325e60 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a523326050 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55a523325fb8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55a523326260 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a523326108 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55a523326188 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55a523326438 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a523326320 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55a5233263a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55a523326658 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a5233264f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55a523326578 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55a523326838 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a523326718 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a523326798 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a523326a18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55a5233268f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55a523326978 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55a523326ba0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55a523326ad8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55a523326d70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55a523326c58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a523326cd0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55a52332b0a8 <col:57, line:234:5>
|   `-ReturnStmt 0x55a52332b098 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55a52332b080 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a52332b028 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a52332aff8 <col:9> '<bound member function type>' ->xmessage 0x55a523326ba0
|         | `-CXXThisExpr 0x55a52332afe8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55a52332b068 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a52332b050 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a52332afc8 <col:18, col:40> 'String' (CXXTemporary 0x55a52332afc8)
|               `-CallExpr 0x55a52332af90 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55a52332af78 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55a52332aef0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a523328d68 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55a52332af10 <col:31> 'const String' lvalue ParmVar 0x55a523326cd0 'str' 'const String &'
|                 `-DeclRefExpr 0x55a52332af30 <col:36> 'const String' lvalue ParmVar 0x55a523326c58 'anno' 'const String &'
|-CXXMethodDecl 0x55a523327050 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a523326e30 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55a523326eb0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55a523326f28 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a52332b338 <col:68, line:243:5>
|   `-ReturnStmt 0x55a52332b328 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55a52332b310 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55a52332b2b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55a52332b280 <col:9> '<bound member function type>' ->xmessage 0x55a523326d70
|         | `-CXXThisExpr 0x55a52332b270 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a52332b148 <col:18> 'const String' lvalue ParmVar 0x55a523326e30 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a52332b2f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a52332b2e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a52332b250 <col:24, col:40> 'String' (CXXTemporary 0x55a52332b250)
|               `-CXXMemberCallExpr 0x55a52332b1e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55a52332b178 <col:24> '<bound member function type>' ->vformat 0x55a523328230
|                 | `-CXXThisExpr 0x55a52332b168 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a52332b218 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a52332b1a8 <col:32> 'const char *' lvalue ParmVar 0x55a523326eb0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a52332b230 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a52332b1c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a523326f28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a5233272f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55a523327118 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a523327190 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a523327208 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55a52332b678 <col:23, line:254:5>
|   `-ReturnStmt 0x55a52332b668 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55a52332b650 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55a52332b5f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55a52332b5c0 <col:9> '<bound member function type>' ->xmessage 0x55a523326d70
|         | `-CXXThisExpr 0x55a52332b5b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55a52332b638 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55a52332b620 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55a52332b570 <col:18, col:65> 'String' (CXXTemporary 0x55a52332b570)
|         |     `-CallExpr 0x55a52332b508 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55a52332b4f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55a52332b3d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55a523328d68 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55a52332b3f8 <col:31> 'const String' lvalue ParmVar 0x55a523327190 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55a52332b550 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55a52332b538 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55a52332b4d0 <col:37, col:64> 'String' (CXXTemporary 0x55a52332b4d0)
|         |             `-CallExpr 0x55a52332b4a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55a52332b488 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55a52332b418 <col:37> 'String (const String &)' lvalue CXXMethod 0x55a5233293b8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55a52332b438 <col:56> 'const String' lvalue ParmVar 0x55a523327118 'landmark' 'const String &'
|         `-DeclRefExpr 0x55a52332b590 <col:68> 'const String' lvalue ParmVar 0x55a523327208 'str' 'const String &'
|-CXXMethodDecl 0x55a523327670 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55a5233273b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55a523327430 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55a5233274b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55a523327528 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a52332b930 <col:34, line:267:5>
|   `-ReturnStmt 0x55a52332b920 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55a52332b908 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55a52332b8a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55a52332b870 <col:9> '<bound member function type>' ->xmessage 0x55a5233272f0
|         | `-CXXThisExpr 0x55a52332b860 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55a52332b718 <col:18> 'const String' lvalue ParmVar 0x55a5233273b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55a52332b738 <col:28> 'const String' lvalue ParmVar 0x55a523327430 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55a52332b8f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55a52332b8d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55a52332b840 <col:34, col:50> 'String' (CXXTemporary 0x55a52332b840)
|               `-CXXMemberCallExpr 0x55a52332b7d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55a52332b768 <col:34> '<bound member function type>' ->vformat 0x55a523328230
|                 | `-CXXThisExpr 0x55a52332b758 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55a52332b808 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55a52332b798 <col:42> 'const char *' lvalue ParmVar 0x55a5233274b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55a52332b820 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55a52332b7b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a523327528 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a523327780 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55a52332b9b0 <col:25, line:288:5>
|   `-ReturnStmt 0x55a52332b9a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55a52332b988 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55a52332b958 <col:9> 'const int' lvalue ->_nerrors 0x55a52332a588
|         `-CXXThisExpr 0x55a52332b948 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a523327990 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55a523327838 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55a5233278b8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55a523327c78 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a523327a58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55a523327ad8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55a523327b50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a523327e10 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55a523327d48 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55a523328058 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55a523327ed0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55a523327f48 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55a52332bc10 <col:58, line:357:5>
|   `-ReturnStmt 0x55a52332bc00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55a52332bbe8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55a52332bbb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a52332bba0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55a52332bb80 <col:9, col:29> 'String' (CXXTemporary 0x55a52332bb80)
|             `-CallExpr 0x55a52332bb10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55a52332baf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55a52332ba78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55a523327c78 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55a52332ba18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55a52332bb48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55a52332ba38 <col:21> 'const char *' lvalue ParmVar 0x55a523327ed0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55a52332bb60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55a52332ba58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55a523327f48 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a523328230 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55a523328120 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55a523328198 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55a523328388 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55a5233282f8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55a5233284d0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55a523328440 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55a523328770 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55a523328588 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55a523328608 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55a523328680 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55a5233288d0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55a523328840 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55a52332bd28 <col:37, line:441:5>
|   `-IfStmt 0x55a52332bd10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55a52332bc98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55a52332bc68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55a52332bc28 <col:6> 'int' lvalue ParmVar 0x55a523328840 'level' 'int'
|     | `-ImplicitCastExpr 0x55a52332bc80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55a52332bc48 <col:15> 'ErrorHandler::Level' EnumConstant 0x55a523324950 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55a52332bcf8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55a52332bcc8 <col:8> 'int' lvalue ->_nerrors 0x55a52332a588
|         `-CXXThisExpr 0x55a52332bcb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55a523328998 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55a52332bdc0 <col:26, line:448:5>
|   `-BinaryOperator 0x55a52332bda0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55a52332bd50 <col:2> 'int' lvalue ->_nerrors 0x55a52332a588
|     | `-CXXThisExpr 0x55a52332bd40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55a52332bd80 <col:13> 'int' 0
|-CXXMethodDecl 0x55a523328b60 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55a523328a50 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55a523328ac8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55a523328d68 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55a523328c20 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55a523328c98 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55a523329018 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55a523328e28 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55a523328ea8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55a523328f28 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55a5233290d0 <col:59> 0 0
|-CXXMethodDecl 0x55a523329268 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55a523329148 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55a5233291c8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55a52332c430 <col:70, line:534:5>
|   |-DeclStmt 0x55a52332bf30 <line:528:2, col:20>
|   | |-VarDecl 0x55a52332bde8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55a52332be50 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55a52332be88 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55a52332bef0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55a52332c000 <line:529:2, col:23>
|   | `-VarDecl 0x55a52332bf60 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55a52332bfe8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55a52332bfc8 <col:18> 'const char *' lvalue ParmVar 0x55a523329148 'begin' 'const char *'
|   |-DoStmt 0x55a52332c3c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55a52332c2f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55a52332c2e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55a52332c2c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55a52332c018 <col:6> 'const char *' lvalue Var 0x55a52332bf60 'x' 'const char *'
|   | |     `-CallExpr 0x55a52332c210 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55a52332c1f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55a52332c1b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55a52332aa60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55a52332c278 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55a52332c260 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55a52332c0d0 <col:20, col:27> 'String' (CXXTemporary 0x55a52332c0d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55a52332c098 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55a52332c290 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a52332c0f0 <col:30> 'const char *' lvalue Var 0x55a52332bf60 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55a52332c2a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55a52332c110 <col:33> 'const char *' lvalue ParmVar 0x55a5233291c8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55a52332c150 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a52332c130 <col:39> 'String' lvalue Var 0x55a52332bde8 'name' 'String'
|   | |       |-UnaryOperator 0x55a52332c188 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55a52332c168 <col:46> 'String' lvalue Var 0x55a52332be88 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55a52332c1a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55a52332c3b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55a52332c398 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55a52332c378 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55a52332c348 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|   |         `-ImplicitCastExpr 0x55a52332c330 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55a52332c310 <col:11> 'String' lvalue Var 0x55a52332bde8 'name' 'String'
|   `-ReturnStmt 0x55a52332c420 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55a52332c408 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55a52332c3e8 <col:9> 'const char *' lvalue Var 0x55a52332bf60 'x' 'const char *'
|-CXXMethodDecl 0x55a5233293b8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55a523329328 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55a52332ca38 <col:55, line:550:5>
|   `-IfStmt 0x55a52332ca10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55a52332c670 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55a52332c658 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a52332c640 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a52332c620 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a52332c5f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|     | |       `-DeclRefExpr 0x55a52332c490 <col:6> 'const String' lvalue ParmVar 0x55a523329328 'x' 'const String &'
|     | `-BinaryOperator 0x55a52332c5d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55a52332c5a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55a52332c550 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55a52332c538 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55a52332c4f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55a5230312a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55a52332c4b0 <col:11> 'const String' lvalue ParmVar 0x55a523329328 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55a52332c4d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55a52332c5b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55a52332c588 <col:19> 'char' 123
|     |-ReturnStmt 0x55a52332c6e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55a52332c6b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55a52332c690 <col:13> 'const String' lvalue ParmVar 0x55a523329328 'x' 'const String &'
|     `-IfStmt 0x55a52332c9e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55a52332c778 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a52332c760 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a52332c740 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a52332c710 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |       `-DeclRefExpr 0x55a52332c6f0 <col:11> 'const String' lvalue ParmVar 0x55a523329328 'x' 'const String &'
|       |-ReturnStmt 0x55a52332c900 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55a52332c8e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55a52332c8b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55a52332c8a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55a52332c880 <col:13, col:29> 'String' (CXXTemporary 0x55a52332c880)
|       |         `-CallExpr 0x55a52332c830 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55a52332c818 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55a52332c790 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55a523328b60 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55a52332c860 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55a52332c7b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55a52332c7d0 <col:28> 'const String' lvalue ParmVar 0x55a523329328 'x' 'const String &'
|       `-ReturnStmt 0x55a52332c9d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55a52332c9c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55a52332c990 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55a52332c978 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55a52332c958 <col:13, col:20> 'String' (CXXTemporary 0x55a52332c958)
|                 `-CXXTemporaryObjectExpr 0x55a52332c920 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55a523329580 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55a523329470 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55a5233294e8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a52332ad08 <col:71> 'bool' false
|-CXXRecordDecl 0x55a523329630 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55a523329928 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55a5233298c0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55a523329860 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55a523329820 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55a523014300 'String'
|       | `-CXXRecord 0x55a523014270 'String'
|       |-BuiltinType 0x55a522ce73b0 'int'
|       `-DecayedType 0x55a5232b8660 '__va_list_tag *' sugar
|         |-TypedefType 0x55a5232b8630 'va_list' sugar
|         | |-Typedef 0x55a522f053b0 'va_list'
|         | `-TypedefType 0x55a522f05360 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55a522e3cf88 '__gnuc_va_list'
|         |   `-TypedefType 0x55a522e3cef0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55a522d28c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55a522d28bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55a522ce8100 '__va_list_tag'
|         |         `-CXXRecord 0x55a522ce8068 '__va_list_tag'
|         `-PointerType 0x55a522f0ac50 '__va_list_tag *'
|           `-RecordType 0x55a522ce8100 '__va_list_tag'
|             `-CXXRecord 0x55a522ce8068 '__va_list_tag'
|-EnumDecl 0x55a523329980 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55a523329a80 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a523329fe0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329a60 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55a523329a40 <col:16> 'int' 1
| |-EnumConstantDecl 0x55a523329b10 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a523329ff8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329af0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55a523329ad0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55a523329ba0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a010 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329b80 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55a523329b60 <col:22> 'int' 4
| |-EnumConstantDecl 0x55a523329c30 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a028 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329c10 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55a523329bf0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55a523329cc0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a040 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329ca0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55a523329c80 <col:22> 'int' 16
| |-EnumConstantDecl 0x55a523329d50 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a058 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329d30 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a523329d10 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a523329de0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a070 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329dc0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55a523329da0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55a523329e70 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a088 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329e50 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55a523329e30 <col:14> 'int' 128
| |-EnumConstantDecl 0x55a523329f00 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55a52332a0a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523329ee0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55a523329ec0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55a523329f90 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55a52332a0b8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523329f70 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55a523329f50 <col:12> 'int' 1024
|-CXXMethodDecl 0x55a52332a318 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55a52332a0e0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55a52332a1d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55a52332a4a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55a52332a3d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55a52332a548 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55a52332a588 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55a52332a5e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55a52332a660 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55a52332aa60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55a52332a6d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55a52332a758 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55a52332a7d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55a52332a850 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55a52332a8c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55a52332a940 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55a52332ab88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55a52332ab88
| `-ParmVarDecl 0x55a52332ac98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55a52332cd98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55a52332cd98
  `-ParmVarDecl 0x55a52332cea8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5232b76a8 prev 0x55a523266be8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a5232b77a0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55a5232b7830 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55a5232b7968 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55a5232b7868 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a5232b8d90 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a5232b8d70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a5232b8908 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a5232b8e20 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5232b8de0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55a5232b7868 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a5232b8970 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a5232b8ea0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a5232b8e60 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55a5232b89d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a5232b8ee0 <col:54> 'bool' false
| `-CompoundStmt 0x55a5232b8fe8 <col:61, line:38:5>
|   `-BinaryOperator 0x55a5232b8fc8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55a5232b8f60 <col:9> 'const Element *' lvalue ->_context 0x55a5232b88a8
|     | `-CXXThisExpr 0x55a5232b8f50 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55a5232b8fb0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55a5232b8f90 <col:20> 'int' 0
|-CXXConstructorDecl 0x55a5232b7b78 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232b7a28 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55a5232b7aa0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55a5232b8dc8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55a5232b8da8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55a5232b88a8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55a5232b9040 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5232b9000 <col:20> 'const Element *' lvalue ParmVar 0x55a5232b7a28 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55a5232b8908 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55a5232b90c0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5232b9080 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55a5232b7aa0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55a5232b8970 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55a5232b9140 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55a5232b9100 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55a5232b89d0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55a5232b9180 <col:73> 'bool' false
| `-CompoundStmt 0x55a5232b91f8 <col:80, line:46:5>
|-CXXMethodDecl 0x55a5232b7ca8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55a5232b9270 <col:36, line:51:5>
|   `-ReturnStmt 0x55a5232b9260 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55a5232b9248 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55a5232b9218 <col:16> 'const Element *const' lvalue ->_context 0x55a5232b88a8
|         `-CXXThisExpr 0x55a5232b9208 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a5232b7d98 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55a5232b92f0 <col:32, line:57:5>
|   `-ReturnStmt 0x55a5232b92e0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55a5232b92c8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55a5232b9298 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55a5232b8908
|         `-CXXThisExpr 0x55a5232b9288 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55a5232b7e58 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55a5232b7fe0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a5232b7f10 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55a5232b8130 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a5232b80a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a5232b8280 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55a5232b81f0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55a5232b8488 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55a5232b8338 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55a5232b83b0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55a5232b87b8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55a5232b8548 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55a5232b85c8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55a5232b8690 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55a5232b8870 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55a5232b88a8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55a5232b8908 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55a5232b8970 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55a5232b89d0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55a5232b8a20 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a5232b8a20
| `-ParmVarDecl 0x55a5232b8b38 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55a5232b8bd8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55a5232b8bd8
| `-ParmVarDecl 0x55a5232b8ce8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55a5233381a0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5232e1b10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55a5232e1ce8 prev 0x55a5232e1b10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55a5232e1d78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55a5232e1da0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232e3970 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55a5232e3920 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55a5232e2250 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55a5232e2150 'type'
|     `-TemplateSpecializationType 0x55a5232e20e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55a5232e1fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55a5232e1fa0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55a5232e1f80 <col:24> 'unsigned long' 4
|       `-RecordType 0x55a5232e20c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55a5232e1fe0 'char_array'
|-TypedefDecl 0x55a5232e3a28 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55a5232e39f0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55a5232e39d0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55a5232e3970 'type'
|     `-ElaboratedType 0x55a5232e3920 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55a5232e2250 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55a5232e2150 'type'
|         `-TemplateSpecializationType 0x55a5232e20e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55a5232e1fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55a5232e1fa0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55a5232e1f80 <col:24> 'unsigned long' 4
|           `-RecordType 0x55a5232e20c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55a5232e1fe0 'char_array'
|-CXXMethodDecl 0x55a5232e3ba8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55a5232e3ab8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55a5232e3c98 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55a5232e3d78 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55a5232e4048 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a5232e3f50 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55a5232e4288 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a5232e4100 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232e4178 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e4458 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a5232e4348 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232e43c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e45b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a5232e4688 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55a5232e48d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a5232e4748 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a5232e47c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e4b38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55a5232e49a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55a5232e4a20 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e4cf8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a5232e4c08 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e4eb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55a5232e4dc0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e4f70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5232e5020 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55a5232e5258 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55a5232e50d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55a5232e5148 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55a5232e54f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55a5232e5400 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55a5232e55c0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55a5232e5610 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55a5232e5660 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5232e0518 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55a5232e0728 prev 0x55a5232e0518 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55a5232e1a80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55a5232e1a30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55a5232e1a10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55a5232e18c0 'type'
|     `-SubstTemplateTypeParmType 0x55a5232e16e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55a522fad140 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fad0e8 'T'
|       `-RecordType 0x55a5232e1230 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55a5232e1148 'sized_array_memory'
|-FieldDecl 0x55a5232ebb00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55a5232ebb50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55a5232ebb88 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|   |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|   `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ebc18 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55a5232ebbe0 'int &'
|   `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ebcd8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55a5232ebca0 'const int &'
|   `-QualType 0x55a5232e07c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ebd68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55a5232ebd30 'int *'
|   `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ebdf8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55a5232ebdc0 'const int *'
|   `-QualType 0x55a5232e07c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ec9e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55a5232ec990 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55a5232ec970 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55a5232ec900 'type'
|     `-SubstTemplateTypeParmType 0x55a5232ec6c0 'int' sugar
|       |-TemplateTypeParmType 0x55a522fb7f40 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fb7ef0 'T'
|       `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232eca48 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55a5232ebca0 'const int &'
|   `-QualType 0x55a5232e07c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ecaa0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ecb08 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55a5232ebd30 'int *'
|   `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|     |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|     `-BuiltinType 0x55a522ce73b0 'int'
|-TypedefDecl 0x55a5232ecb70 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55a5232ebdc0 'const int *'
|   `-QualType 0x55a5232e07c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55a5232e07c0 'int' sugar
|       |-TemplateTypeParmType 0x55a522fe4e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55a522fe4dd8 'T'
|       `-BuiltinType 0x55a522ce73b0 'int'
|-EnumDecl 0x55a5232ecbc8 <line:134:5> col:5
| `-EnumConstantDecl 0x55a5232eccc0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55a5232ecca0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55a522fe64b8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55a522fe6490 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55a522fe6470 <col:40> 'int' 1
|-CXXConstructorDecl 0x55a5232ecd48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55a5232ecf98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232ece00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232ecea0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55a5232ed258 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55a5232ed140 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55a5232ed518 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55a5232ed400 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a5232ed860 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55a5232ed740 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55a5232edb70 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55a5232eda50 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55a5232ede60 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232edca8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232edd20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5232edf88 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a5232ee068 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee0c0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee108 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55a5232ee1b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee210 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee2d8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a5232ee388 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee3e0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee428 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a5232ee4d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee530 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee578 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a5232ee628 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee680 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee6c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55a5232ee778 <col:20> Inherited
| `-OptimizeNoneAttr 0x55a5232ee7d0 <col:30> Inherited
|-CXXMethodDecl 0x55a5232ee7f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a5232ee8a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55a5232ee958 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55a5232eeb18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232eea08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55a5232eea80 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5232eec68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232eebd8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232eee18 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55a5232eed20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a5232eeed0 <col:20>
| `-OptimizeNoneAttr 0x55a5232eef28 <col:30>
|-CXXMethodDecl 0x55a5232ef048 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55a5232eef50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55a5232ef100 <col:20>
| `-OptimizeNoneAttr 0x55a5232ef158 <col:30>
|-CXXMethodDecl 0x55a5232ef210 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232ef180 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232ef358 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a5232ef2c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232ef488 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55a5232ef5b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55a5232ef688 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55a5232ef758 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55a5232ef898 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55a5232ef808 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232ef9e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55a5232ef950 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55a5232efb28 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55a5232efa98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a5232efbe0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55a5232efce0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55a5232efc50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55a5232efd98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55a5232efe58 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55a5232eff58 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55a5232f00d8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a5232f0018 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55a5232f0898 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55a5232f0190 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55a5232f07f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55a5232f06f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55a5232f0978 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55a5232f0ac8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55a5232f0a38 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5232f0b80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55a5232f0dc8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55a5232f0c40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a5232f0cb8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55a5232f0f88 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55a5232f0e98 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a5232f11d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55a5232f1050 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55a5232f10c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55a5232f1298 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55a5232f14f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55a5232f1400 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55a5232f15c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5232de688 prev 0x55a5232be1e0 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a5232de780 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55a5232de870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55a5233043e0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55a5232de960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55a5233043f0 <col:25, line:830:9>
|-CXXMethodDecl 0x55a5232dea60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55a5232deb10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55a5232debb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a5232debb8
| `-ParmVarDecl 0x55a5232decc8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55a5232df488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a5232df488
  `-ParmVarDecl 0x55a5232df598 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5232be018 prev 0x55a523266c78 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55a5232be150 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55a5232be1e0 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55a5232be290 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55a5232be398 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55a5232be2c8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5232f2b88 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5232f2b68 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a5232bf918 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232bf790 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55a5232bf808 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5232f2bc0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5232f2ba0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55a5232bfaf0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232bf9e0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55a5232bfa58 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5232f2bf8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5232f2bd8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55a5232bfea8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55a5232bfc90 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55a5232bfd08 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55a5232bfd80 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55a5232f2c30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55a5232f2c10 <col:31> 'int' 0
|-CXXConstructorDecl 0x55a5232c0068 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55a5232bffa8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55a5232c0160 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55a5232c0318 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55a5232c0250 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55a5232c0408 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55a5232f2fe0 <col:24, line:291:5>
|   `-ReturnStmt 0x55a5232f2fd0 <line:290:9, col:79>
|     `-BinaryOperator 0x55a5232f2fb0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55a5232f2e88 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55a5232f2de0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55a5232f2dc0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55a5232f2cb8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55a5232f2ca0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55a5232f2c88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55a5232f2c58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55a5232e04b0
|       | |   |       `-CXXThisExpr 0x55a5232f2c48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55a5232f2da8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55a5232f2d90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55a5232f2d58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55a5232f2d28 <col:28, col:35> '<bound member function type>' ->size 0x55a5232a9cf8
|       | |           `-ImplicitCastExpr 0x55a5232f2d78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55a5232f2d10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55a5232f2ce0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55a5232e04b0
|       | |                 `-CXXThisExpr 0x55a5232f2cd0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55a5232f2e70 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55a5232f2e58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55a5232f2e40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55a5232f2e10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55a5232f1710
|       |         `-CXXThisExpr 0x55a5232f2e00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55a5232f2f90 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55a5232f2f78 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a5232f2f60 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a5232f2f20 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a5232f2f08 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a5232f2eb8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a5232f17c0
|         |     |   `-CXXThisExpr 0x55a5232f2ea8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a5232f2ee8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55a5232f2f40 <col:79> 'int' 0
|-CXXMethodDecl 0x55a5232c04c8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55a5232f31b8 <col:32, line:296:5>
|   `-ReturnStmt 0x55a5232f31a8 <line:295:9, col:49>
|     `-BinaryOperator 0x55a5232f3188 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55a5232f3068 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55a5232f3050 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55a5232f3038 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55a5232f3008 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55a5232f1710
|       |       `-CXXThisExpr 0x55a5232f2ff8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55a5232f3168 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55a5232f3150 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55a5232f3138 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55a5232f30f8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55a5232f30e0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55a5232f3090 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55a5232f17c0
|         |     |   `-CXXThisExpr 0x55a5232f3080 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55a5232f30c0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55a5232f3118 <col:49> 'int' 0
|-CXXMethodDecl 0x55a5232c05b8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55a5232f33c8 <col:19, line:306:5>
|   |-IfStmt 0x55a5232f32e8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55a5232f3228 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55a5232f3210 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55a5232f31e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a5232e04b0
|   | |     `-CXXThisExpr 0x55a5232f31d0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55a5232f32c8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55a5232f3298 <col:13, col:20> '<bound member function type>' ->clear 0x55a5232ac6f8
|   |     `-ImplicitCastExpr 0x55a5232f3280 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55a5232f3250 <col:13> 'Vector<String> *' lvalue ->_conf 0x55a5232e04b0
|   |         `-CXXThisExpr 0x55a5232f3240 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55a5232f3370 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55a5232f3340 <col:9, col:16> '<bound member function type>' .clear 0x55a5232f1298
|   |   `-MemberExpr 0x55a5232f3310 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55a5232f16b0
|   |     `-CXXThisExpr 0x55a5232f3300 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55a5232f33b8 <line:305:9, col:17>
|     `-UnaryOperator 0x55a5232f33a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f3390 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a5232c0838 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55a5232c0740 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55a5232c09b8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55a5232c08f0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55a5232c0d38 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55a5232c0a60 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55a5232c0c98 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55a5232c0b08 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55a5232c0b80 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55a5232f36f0 <col:67, line:327:5>
|     |-WhileStmt 0x55a5232f36a0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55a5232f34b8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55a5232f3430 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a523266610 0x55a523206a18 0x55a52304fff8 0x55a52304fcd0 0x55a5230414b0 0x55a523041160 0x55a523040a50 0x55a5230133c0 0x55a522f9f880
|     | | |-DeclRefExpr 0x55a5232f33f0 <col:16> 'Iter' lvalue ParmVar 0x55a5232c0b08 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55a5232f3410 <col:25> 'Iter' lvalue ParmVar 0x55a5232c0b80 'end' 'Iter'
|     | `-CompoundStmt 0x55a5232f3680 <col:30, line:325:9>
|     |   |-CallExpr 0x55a5232f3620 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55a5232f3500 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55a5232f35f0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55a5232f3580 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|     |   |   `-DeclRefExpr 0x55a5232f3560 <col:24> 'Iter' lvalue ParmVar 0x55a5232c0b08 'begin' 'Iter'
|     |   `-UnaryOperator 0x55a5232f3668 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55a5232f3648 <col:15> 'Iter' lvalue ParmVar 0x55a5232c0b08 'begin' 'Iter'
|     `-ReturnStmt 0x55a5232f36e0 <line:326:9, col:17>
|       `-UnaryOperator 0x55a5232f36c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f36b8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a5232c0e40 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55a5232c0db0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55a5232c0f88 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55a5232c0ef8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55a5232c1050 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55a5232f37d0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55a5232f3770 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55a5232f3720 <col:9> '<bound member function type>' ->reset_from 0x55a5232f1b38
|   | | `-CXXThisExpr 0x55a5232f3710 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55a5232f3750 <col:20> 'int' 0
|   `-ReturnStmt 0x55a5232f37c0 <line:352:9, col:17>
|     `-UnaryOperator 0x55a5232f37a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f3798 <col:17> 'Args *' this
|-VarDecl 0x55a5232c1108 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a5232c1170 <col:38> 'int' 1
|-VarDecl 0x55a5232c1200 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a5232c1268 <col:39> 'int' 2
|-VarDecl 0x55a5232c12f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a5232c1360 <col:39> 'int' 4
|-VarDecl 0x55a5232c13f0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55a5232c1458 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55a5232c17d8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55a5232c14d0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a5232c1738 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a5232c1580 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a5232c1628 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55a5232f3928 <col:43, line:371:5>
| |   `-ReturnStmt 0x55a5232f3918 <line:370:9, col:34>
| |     `-CallExpr 0x55a5232f38e0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a5232f3800 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a5232f3880 <col:21> 'const char *' lvalue ParmVar 0x55a5232c1580 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55a5232f38a0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55a5232f38c0 <col:33> 'T' lvalue ParmVar 0x55a5232c1628 'x' 'T &'
| `-CXXMethodDecl 0x55a523339178 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a523338f98 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55a523339068 <col:37, col:40> col:40 x 'unsigned int &'
|-FunctionTemplateDecl 0x55a5232c1b08 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55a5232c1840 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232c1a68 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55a5232c18f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c1998 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f3a78 <col:45, line:375:5>
|     `-ReturnStmt 0x55a5232f3a68 <line:374:9, col:42>
|       `-CallExpr 0x55a5232f3a30 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f3950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f39d0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c18f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f39f0 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a5232f3a10 <col:41> 'T' lvalue ParmVar 0x55a5232c1998 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232c1e38 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55a5232c1b70 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a5232c1d98 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a5232c1c20 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a5232c1cc8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55a5232f5548 <col:45, line:379:5>
| |   `-ReturnStmt 0x55a5232f5538 <line:378:9, col:43>
| |     `-CallExpr 0x55a5232f5500 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a5232f5420 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a5232f54a0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c1c20 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55a5232f54c0 <col:30> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
| |       `-DeclRefExpr 0x55a5232f54e0 <col:42> 'T' lvalue ParmVar 0x55a5232c1cc8 'x' 'T &'
| `-CXXMethodDecl 0x55a523338b08 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x55a523338920 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55a5233389f8 <col:39, col:42> col:42 x 'bool &'
|-FunctionTemplateDecl 0x55a5232c2168 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55a5232c1ea0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55a5232c20c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55a5232c1f50 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55a5232c1ff8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55a5232f5748 <col:46, line:383:5>
| |   `-ReturnStmt 0x55a5232f5738 <line:382:9, col:55>
| |     `-CallExpr 0x55a5232f5700 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55a5232f5570 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55a5232f55f0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c1f50 'keyword' 'const char *'
| |       |-BinaryOperator 0x55a5232f56c0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55a5232f5670 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55a5232f5650 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55a5232f56a8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55a5232f5688 <col:42> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55a5232f56e0 <col:54> 'T' lvalue ParmVar 0x55a5232c1ff8 'x' 'T &'
| `-CXXMethodDecl 0x55a523338628 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, EtherAddress &)'
|   |-TemplateArgument type 'EtherAddress'
|   |-ParmVarDecl 0x55a523338440 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55a523338518 <col:40, col:43> col:43 x 'EtherAddress &'
|-FunctionTemplateDecl 0x55a5232c2568 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55a5232c21d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232c24c8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55a5232c2280 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c2300 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232c23a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f5888 <col:54, line:388:5>
|     |-CallExpr 0x55a5232f5810 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f5760 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a5232f57a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f57b0 <col:30> 'const char *' lvalue ParmVar 0x55a5232c2280 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f57d0 <col:39> 'int' lvalue ParmVar 0x55a5232c2300 'flags' 'int'
|     | `-DeclRefExpr 0x55a5232f57f0 <col:46> 'T' lvalue ParmVar 0x55a5232c23a8 'x' 'T &'
|     `-ReturnStmt 0x55a5232f5878 <line:387:9, col:17>
|       `-UnaryOperator 0x55a5232f5860 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f5850 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232c2a18 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55a5232c25d8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232c2658 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5232c2978 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c2718 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c27b8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c2858 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f59f8 <col:74, line:403:5>
|     `-ReturnStmt 0x55a5232f59e8 <line:402:9, col:56>
|       `-CallExpr 0x55a5232f59a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f58b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f5928 <col:28> 'const char *' lvalue ParmVar 0x55a5232c2718 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f5948 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a5232f5968 <col:40> 'T' lvalue ParmVar 0x55a5232c27b8 'x' 'T &'
|         `-DeclRefExpr 0x55a5232f5988 <col:43> 'const V' lvalue ParmVar 0x55a5232c2858 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a5232c2e88 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a5232c2a88 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232c2b08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5232c2de8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c2bc8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c2c68 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c2d08 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f5b60 <col:76, line:407:5>
|     `-ReturnStmt 0x55a5232f5b50 <line:406:9, col:65>
|       `-CallExpr 0x55a5232f5b10 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f5a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f5a90 <col:28> 'const char *' lvalue ParmVar 0x55a5232c2bc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f5ab0 <col:37> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
|         |-DeclRefExpr 0x55a5232f5ad0 <col:49> 'T' lvalue ParmVar 0x55a5232c2c68 'x' 'T &'
|         `-DeclRefExpr 0x55a5232f5af0 <col:52> 'const V' lvalue ParmVar 0x55a5232c2d08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a5232c33d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55a5232c2ef8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232c2f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5232c3338 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c3038 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c30b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232c3158 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c31f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f5cc8 <col:85, line:412:5>
|     |-CallExpr 0x55a5232f5c48 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f5b78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a5232f5bb8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f5bc8 <col:37> 'const char *' lvalue ParmVar 0x55a5232c3038 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f5be8 <col:46> 'int' lvalue ParmVar 0x55a5232c30b8 'flags' 'int'
|     | |-DeclRefExpr 0x55a5232f5c08 <col:53> 'T' lvalue ParmVar 0x55a5232c3158 'x' 'T &'
|     | `-DeclRefExpr 0x55a5232f5c28 <col:56> 'const V' lvalue ParmVar 0x55a5232c31f8 'default_value' 'const V &'
|     `-ReturnStmt 0x55a5232f5cb8 <line:411:9, col:17>
|       `-UnaryOperator 0x55a5232f5ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f5c90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232c3868 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55a5232c3450 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c34c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232c37c8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232c3588 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c3600 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c36a8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f5e48 <col:53, line:425:5>
|     `-ReturnStmt 0x55a5232f5e38 <line:424:9, col:42>
|       `-CallExpr 0x55a5232f5df8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f5cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f5d78 <col:21> 'const char *' lvalue ParmVar 0x55a5232c3588 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f5d98 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a5232f5db8 <col:33> 'P' lvalue ParmVar 0x55a5232c3600 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f5dd8 <col:41> 'T' lvalue ParmVar 0x55a5232c36a8 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232c3cb8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55a5232c38d8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c3958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232c3c18 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232c3a18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c3a90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c3b38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f5fc0 <col:55, line:429:5>
|     `-ReturnStmt 0x55a5232f5fb0 <line:428:9, col:50>
|       `-CallExpr 0x55a5232f5f70 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f5e70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f5ef0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c3a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f5f10 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a5232f5f30 <col:41> 'P' lvalue ParmVar 0x55a5232c3a90 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f5f50 <col:49> 'T' lvalue ParmVar 0x55a5232c3b38 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232c4108 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55a5232c3d28 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c3da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232c4068 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232c3e68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c3ee0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c3f88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f6138 <col:55, line:433:5>
|     `-ReturnStmt 0x55a5232f6128 <line:432:9, col:51>
|       `-CallExpr 0x55a5232f60e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f5fe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6068 <col:21> 'const char *' lvalue ParmVar 0x55a5232c3e68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f6088 <col:30> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
|         |-DeclRefExpr 0x55a5232f60a8 <col:42> 'P' lvalue ParmVar 0x55a5232c3ee0 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f60c8 <col:50> 'T' lvalue ParmVar 0x55a5232c3f88 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232c4558 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55a5232c4178 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c41f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232c44b8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232c42b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c4330 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c43d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f6360 <col:56, line:437:5>
|     `-ReturnStmt 0x55a5232f6350 <line:436:9, col:63>
|       `-CallExpr 0x55a5232f6310 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f6160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f61e0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c42b8 'keyword' 'const char *'
|         |-BinaryOperator 0x55a5232f62b0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a5232f6260 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a5232f6240 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a5232f6298 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a5232f6278 <col:42> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a5232f62d0 <col:54> 'P' lvalue ParmVar 0x55a5232c4330 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f62f0 <col:62> 'T' lvalue ParmVar 0x55a5232c43d8 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232c4a88 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55a5232c45c8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c4648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232c49e8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a5232c4708 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c4788 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232c4800 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c48a8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f64c8 <col:64, line:442:5>
|     |-CallExpr 0x55a5232f6448 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f6378 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a5232f63b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f63c8 <col:30> 'const char *' lvalue ParmVar 0x55a5232c4708 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f63e8 <col:39> 'int' lvalue ParmVar 0x55a5232c4788 'flags' 'int'
|     | |-DeclRefExpr 0x55a5232f6408 <col:46> 'P' lvalue ParmVar 0x55a5232c4800 'parser' 'P'
|     | `-DeclRefExpr 0x55a5232f6428 <col:54> 'T' lvalue ParmVar 0x55a5232c48a8 'x' 'T &'
|     `-ReturnStmt 0x55a5232f64b8 <line:441:9, col:17>
|       `-UnaryOperator 0x55a5232f64a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f6490 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232c5088 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55a5232c4b00 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c4b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a5232c4bf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5232c4fe8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c4cc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c4d38 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c4dd8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c4ea8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f6660 <col:84, line:458:5>
|     `-ReturnStmt 0x55a5232f6650 <line:457:9, col:64>
|       `-CallExpr 0x55a5232f6608 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f64f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6568 <col:28> 'const char *' lvalue ParmVar 0x55a5232c4cc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f6588 <col:37> 'int' 0
|         |-DeclRefExpr 0x55a5232f65a8 <col:40> 'P' lvalue ParmVar 0x55a5232c4d38 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f65c8 <col:48> 'T' lvalue ParmVar 0x55a5232c4dd8 'x' 'T &'
|         `-DeclRefExpr 0x55a5232f65e8 <col:51> 'const V' lvalue ParmVar 0x55a5232c4ea8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a5232c5608 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55a5232c5100 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c5178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a5232c51f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5232c5568 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c52c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c5338 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c53d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c5478 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f67f0 <col:86, line:462:5>
|     `-ReturnStmt 0x55a5232f67e0 <line:461:9, col:73>
|       `-CallExpr 0x55a5232f6798 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f6688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f66f8 <col:28> 'const char *' lvalue ParmVar 0x55a5232c52c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f6718 <col:37> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
|         |-DeclRefExpr 0x55a5232f6738 <col:49> 'P' lvalue ParmVar 0x55a5232c5338 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f6758 <col:57> 'T' lvalue ParmVar 0x55a5232c53d8 'x' 'T &'
|         `-DeclRefExpr 0x55a5232f6778 <col:60> 'const V' lvalue ParmVar 0x55a5232c5478 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55a5232c5c68 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55a5232c5680 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c56f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55a5232c5778 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5232c5bc8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5232c5840 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c58c0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232c5938 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c59d8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232c5a78 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55a5232f6980 <col:95, line:467:5>
|     |-CallExpr 0x55a5232f68f8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f6808 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55a5232f6848 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f6858 <col:37> 'const char *' lvalue ParmVar 0x55a5232c5840 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f6878 <col:46> 'int' lvalue ParmVar 0x55a5232c58c0 'flags' 'int'
|     | |-DeclRefExpr 0x55a5232f6898 <col:53> 'P' lvalue ParmVar 0x55a5232c5938 'parser' 'P'
|     | |-DeclRefExpr 0x55a5232f68b8 <col:61> 'T' lvalue ParmVar 0x55a5232c59d8 'x' 'T &'
|     | `-DeclRefExpr 0x55a5232f68d8 <col:64> 'const V' lvalue ParmVar 0x55a5232c5a78 'default_value' 'const V &'
|     `-ReturnStmt 0x55a5232f6970 <line:466:9, col:17>
|       `-UnaryOperator 0x55a5232f6958 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f6948 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232c6248 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55a5232c5ce8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c5d68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232c5de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232c61a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232c5eb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c5f28 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c5fc8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5232c6068 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5232f6b28 <col:63, line:481:5>
|     `-ReturnStmt 0x55a5232f6b18 <line:480:9, col:47>
|       `-CallExpr 0x55a5232f6ad0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f69b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6a30 <col:21> 'const char *' lvalue ParmVar 0x55a5232c5eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f6a50 <col:30> 'int' 0
|         |-DeclRefExpr 0x55a5232f6a70 <col:33> 'P' lvalue ParmVar 0x55a5232c5f28 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f6a90 <col:41> 'T1' lvalue ParmVar 0x55a5232c5fc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a5232f6ab0 <col:45> 'T2' lvalue ParmVar 0x55a5232c6068 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a5232c67c8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55a5232c62c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c6338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232c63b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232c6728 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232c6480 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c64f8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c6598 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5232c6638 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5232f6cc8 <col:65, line:485:5>
|     `-ReturnStmt 0x55a5232f6cb8 <line:484:9, col:55>
|       `-CallExpr 0x55a5232f6c70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f6b50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6bd0 <col:21> 'const char *' lvalue ParmVar 0x55a5232c6480 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f6bf0 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int'
|         |-DeclRefExpr 0x55a5232f6c10 <col:41> 'P' lvalue ParmVar 0x55a5232c64f8 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f6c30 <col:49> 'T1' lvalue ParmVar 0x55a5232c6598 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a5232f6c50 <col:53> 'T2' lvalue ParmVar 0x55a5232c6638 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a5232c6d48 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55a5232c6840 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c68b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232c6938 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232c6ca8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232c6a00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c6a78 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c6b18 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5232c6bb8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5232f6e68 <col:65, line:489:5>
|     `-ReturnStmt 0x55a5232f6e58 <line:488:9, col:56>
|       `-CallExpr 0x55a5232f6e10 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f6cf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6d70 <col:21> 'const char *' lvalue ParmVar 0x55a5232c6a00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f6d90 <col:30> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
|         |-DeclRefExpr 0x55a5232f6db0 <col:42> 'P' lvalue ParmVar 0x55a5232c6a78 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f6dd0 <col:50> 'T1' lvalue ParmVar 0x55a5232c6b18 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a5232f6df0 <col:54> 'T2' lvalue ParmVar 0x55a5232c6bb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a5232c72c8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55a5232c6dc0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c6e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232c6eb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232c7228 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232c6f80 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c6ff8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c7098 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5232c7138 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5232f70b8 <col:66, line:493:5>
|     `-ReturnStmt 0x55a5232f70a8 <line:492:9, col:68>
|       `-CallExpr 0x55a5232f7060 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f6e90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f6f10 <col:21> 'const char *' lvalue ParmVar 0x55a5232c6f80 'keyword' 'const char *'
|         |-BinaryOperator 0x55a5232f6fe0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55a5232f6f90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a5232f6f70 <col:30> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a5232f6fc8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a5232f6fa8 <col:42> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55a5232f7000 <col:54> 'P' lvalue ParmVar 0x55a5232c6ff8 'parser' 'P'
|         |-DeclRefExpr 0x55a5232f7020 <col:62> 'T1' lvalue ParmVar 0x55a5232c7098 'x1' 'T1 &'
|         `-DeclRefExpr 0x55a5232f7040 <col:66> 'T2' lvalue ParmVar 0x55a5232c7138 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55a5232ccf78 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55a5232c7340 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232c73b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232c7438 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232cced8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232c7500 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232c7580 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232c75f8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232c7698 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55a5232ccd80 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55a5232f7248 <col:74, line:498:5>
|     |-CallExpr 0x55a5232f71c0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f70d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55a5232f7110 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f7120 <col:30> 'const char *' lvalue ParmVar 0x55a5232c7500 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f7140 <col:39> 'int' lvalue ParmVar 0x55a5232c7580 'flags' 'int'
|     | |-DeclRefExpr 0x55a5232f7160 <col:46> 'P' lvalue ParmVar 0x55a5232c75f8 'parser' 'P'
|     | |-DeclRefExpr 0x55a5232f7180 <col:54> 'T1' lvalue ParmVar 0x55a5232c7698 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55a5232f71a0 <col:58> 'T2' lvalue ParmVar 0x55a5232ccd80 'x2' 'T2 &'
|     `-ReturnStmt 0x55a5232f7238 <line:497:9, col:17>
|       `-UnaryOperator 0x55a5232f7220 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f7210 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232cd2d8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55a5232ccff8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cd238 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a5232cd0b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cd128 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f7390 <col:52, line:509:5>
|     `-ReturnStmt 0x55a5232f7380 <line:508:9, col:44>
|       `-CallExpr 0x55a5232f7348 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f72e8 <col:26> 'const char *' lvalue ParmVar 0x55a5232cd0b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f7308 <col:35> 'int' 0
|         `-DeclRefExpr 0x55a5232f7328 <col:38> 'P' lvalue ParmVar 0x55a5232cd128 'parser' 'P'
|-FunctionTemplateDecl 0x55a5232cd5d8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55a5232cd340 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cd538 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a5232cd3f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cd468 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f74d0 <col:54, line:513:5>
|     `-ReturnStmt 0x55a5232f74c0 <line:512:9, col:52>
|       `-CallExpr 0x55a5232f7488 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f73b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7428 <col:26> 'const char *' lvalue ParmVar 0x55a5232cd3f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7448 <col:35> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int'
|         `-DeclRefExpr 0x55a5232f7468 <col:46> 'P' lvalue ParmVar 0x55a5232cd468 'parser' 'P'
|-FunctionTemplateDecl 0x55a5232cd8d8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55a5232cd640 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cd838 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a5232cd6f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cd768 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f7610 <col:54, line:517:5>
|     `-ReturnStmt 0x55a5232f7600 <line:516:9, col:53>
|       `-CallExpr 0x55a5232f75c8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f74f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7568 <col:26> 'const char *' lvalue ParmVar 0x55a5232cd6f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7588 <col:35> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int'
|         `-DeclRefExpr 0x55a5232f75a8 <col:47> 'P' lvalue ParmVar 0x55a5232cd768 'parser' 'P'
|-FunctionTemplateDecl 0x55a5232cdbd8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a5232cd940 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cdb38 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a5232cd9f0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cda68 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f7800 <col:55, line:521:5>
|     `-ReturnStmt 0x55a5232f77f0 <line:520:9, col:65>
|       `-CallExpr 0x55a5232f77b8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7638 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f76a8 <col:26> 'const char *' lvalue ParmVar 0x55a5232cd9f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55a5232f7778 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55a5232f7728 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55a5232f7708 <col:35> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55a5232f7760 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55a5232f7740 <col:47> 'const int' lvalue Var 0x55a5232c1200 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55a5232f7798 <col:59> 'P' lvalue ParmVar 0x55a5232cda68 'parser' 'P'
|-FunctionTemplateDecl 0x55a5232cdfa8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55a5232cdc40 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cdf08 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a5232cdcf0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cdd70 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232cdde8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f7940 <col:63, line:526:5>
|     |-CallExpr 0x55a5232f78c8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f7818 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55a5232f7858 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f7868 <col:35> 'const char *' lvalue ParmVar 0x55a5232cdcf0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55a5232f7888 <col:44> 'int' lvalue ParmVar 0x55a5232cdd70 'flags' 'int'
|     | `-DeclRefExpr 0x55a5232f78a8 <col:51> 'P' lvalue ParmVar 0x55a5232cdde8 'parser' 'P'
|     `-ReturnStmt 0x55a5232f7930 <line:525:9, col:17>
|       `-UnaryOperator 0x55a5232f7918 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f7908 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232ce3f8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55a5232ce018 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232ce098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232ce358 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232ce158 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232ce1d0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232ce278 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f7a98 <col:58, line:541:5>
|     `-ReturnStmt 0x55a5232f7a88 <line:540:9, col:39>
|       `-CallExpr 0x55a5232f7a50 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f79f0 <col:21> 'const char *' lvalue ParmVar 0x55a5232ce158 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7a10 <col:30> 'P' lvalue ParmVar 0x55a5232ce1d0 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f7a30 <col:38> 'T' lvalue ParmVar 0x55a5232ce278 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232ce848 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55a5232ce468 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232ce4e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232ce7a8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232ce5a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232ce620 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232ce6c8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f7bd0 <col:60, line:545:5>
|     `-ReturnStmt 0x55a5232f7bc0 <line:544:9, col:41>
|       `-CallExpr 0x55a5232f7b88 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7ac0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7b28 <col:23> 'const char *' lvalue ParmVar 0x55a5232ce5a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7b48 <col:32> 'P' lvalue ParmVar 0x55a5232ce620 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f7b68 <col:40> 'T' lvalue ParmVar 0x55a5232ce6c8 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232cec98 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55a5232ce8b8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232ce938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232cebf8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232ce9f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cea70 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232ceb18 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f7d08 <col:60, line:549:5>
|     `-ReturnStmt 0x55a5232f7cf8 <line:548:9, col:41>
|       `-CallExpr 0x55a5232f7cc0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7c60 <col:23> 'const char *' lvalue ParmVar 0x55a5232ce9f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7c80 <col:32> 'P' lvalue ParmVar 0x55a5232cea70 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f7ca0 <col:40> 'T' lvalue ParmVar 0x55a5232ceb18 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232cf0e8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55a5232ced08 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232ced88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232cf048 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232cee48 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232ceec0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232cef68 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f7e40 <col:61, line:553:5>
|     `-ReturnStmt 0x55a5232f7e30 <line:552:9, col:42>
|       `-CallExpr 0x55a5232f7df8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7d30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7d98 <col:24> 'const char *' lvalue ParmVar 0x55a5232cee48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7db8 <col:33> 'P' lvalue ParmVar 0x55a5232ceec0 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f7dd8 <col:41> 'T' lvalue ParmVar 0x55a5232cef68 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232cf5c8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55a5232cf158 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232cf1d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232cf528 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a5232cf298 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cf318 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232cf390 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232cf438 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f7fb8 <col:69, line:557:5>
|     `-ReturnStmt 0x55a5232f7fa8 <line:556:9, col:46>
|       `-CallExpr 0x55a5232f7f68 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f7ee8 <col:21> 'const char *' lvalue ParmVar 0x55a5232cf298 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f7f08 <col:30> 'int' lvalue ParmVar 0x55a5232cf318 'flags' 'int'
|         |-DeclRefExpr 0x55a5232f7f28 <col:37> 'P' lvalue ParmVar 0x55a5232cf390 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f7f48 <col:45> 'T' lvalue ParmVar 0x55a5232cf438 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232cf8d8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55a5232cf640 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cf838 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55a5232cf6f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cf768 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f80f8 <col:56, line:571:5>
|     `-ReturnStmt 0x55a5232f80e8 <line:570:9, col:48>
|       `-CallExpr 0x55a5232f80b0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f7fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f8050 <col:30> 'const char *' lvalue ParmVar 0x55a5232cf6f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f8070 <col:39> 'int' 0
|         `-DeclRefExpr 0x55a5232f8090 <col:42> 'P' lvalue ParmVar 0x55a5232cf768 'parser' 'P'
|-FunctionTemplateDecl 0x55a5232cfc68 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55a5232cf940 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232cfbc8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55a5232cf9f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cfa70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232cfae8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a5232f82c8 <col:67, line:576:5>
|     |-CallExpr 0x55a5232f8250 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f8110 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a5232f8150 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f8160 <col:39> 'const char *' lvalue ParmVar 0x55a5232cf9f0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a5232f8210 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a5232f81c0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a5232f8180 <col:48> 'int' lvalue ParmVar 0x55a5232cfa70 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a5232f81f8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a5232f81d8 <col:56> 'const int' lvalue Var 0x55a5232c13f0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55a5232f8230 <col:68> 'P' lvalue ParmVar 0x55a5232cfae8 'parser' 'P'
|     `-ReturnStmt 0x55a5232f82b8 <line:575:9, col:17>
|       `-UnaryOperator 0x55a5232f82a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f8290 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232d00b8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55a5232cfcd8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232cfd58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d0018 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55a5232cfe18 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232cfe90 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232cff38 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f8438 <col:62, line:592:5>
|     `-ReturnStmt 0x55a5232f8428 <line:591:9, col:51>
|       `-CallExpr 0x55a5232f83e8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f82f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f8368 <col:30> 'const char *' lvalue ParmVar 0x55a5232cfe18 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f8388 <col:39> 'int' 0
|         |-DeclRefExpr 0x55a5232f83a8 <col:42> 'P' lvalue ParmVar 0x55a5232cfe90 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f83c8 <col:50> 'T' lvalue ParmVar 0x55a5232cff38 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232d0598 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55a5232d0128 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d01a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d04f8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a5232d0268 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d02e8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d0360 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d0408 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f8630 <col:73, line:597:5>
|     |-CallExpr 0x55a5232f85b0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f8450 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55a5232f8490 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f84a0 <col:39> 'const char *' lvalue ParmVar 0x55a5232d0268 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a5232f8550 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a5232f8500 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a5232f84c0 <col:48> 'int' lvalue ParmVar 0x55a5232d02e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a5232f8538 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a5232f8518 <col:56> 'const int' lvalue Var 0x55a5232c13f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a5232f8570 <col:68> 'P' lvalue ParmVar 0x55a5232d0360 'parser' 'P'
|     | `-DeclRefExpr 0x55a5232f8590 <col:76> 'T' lvalue ParmVar 0x55a5232d0408 'x' 'T &'
|     `-ReturnStmt 0x55a5232f8620 <line:596:9, col:17>
|       `-UnaryOperator 0x55a5232f8608 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f85f8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232d0b48 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55a5232d0610 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d0688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d0aa8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a5232d0748 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d07c0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d0980 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5232f87a0 <col:65, line:614:5>
|     `-ReturnStmt 0x55a5232f8790 <line:613:9, col:46>
|       `-CallExpr 0x55a5232f8750 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f8660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f86d0 <col:25> 'const char *' lvalue ParmVar 0x55a5232d0748 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f86f0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55a5232f8710 <col:37> 'P' lvalue ParmVar 0x55a5232d07c0 'parser' 'P'
|         `-DeclRefExpr 0x55a5232f8730 <col:45> 'Vector<T>' lvalue ParmVar 0x55a5232d0980 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a5232d0f78 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55a5232d0bb8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232d0ed8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55a5232d0c70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d0dc0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5232f89c0 <col:55, line:618:5>
|     `-ReturnStmt 0x55a5232f89b0 <line:617:9, col:55>
|       `-CallExpr 0x55a5232f8970 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f87c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f8838 <col:25> 'const char *' lvalue ParmVar 0x55a5232d0c70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55a5232f8858 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55a5232f8930 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a5232f8950 <col:54> 'Vector<T>' lvalue ParmVar 0x55a5232d0dc0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55a5232d1548 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55a5232d0fe0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d1058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d14a8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a5232d1118 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d1198 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d1210 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d1360 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5232f8bb8 <col:76, line:623:5>
|     |-CallExpr 0x55a5232f8b38 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55a5232f89d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55a5232f8a18 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55a5232f8a28 <col:34> 'const char *' lvalue ParmVar 0x55a5232d1118 'keyword' 'const char *'
|     | |-BinaryOperator 0x55a5232f8ad8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55a5232f8a88 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55a5232f8a48 <col:43> 'int' lvalue ParmVar 0x55a5232d1198 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55a5232f8ac0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55a5232f8aa0 <col:51> 'const int' lvalue Var 0x55a5232c13f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55a5232f8af8 <col:63> 'P' lvalue ParmVar 0x55a5232d1210 'parser' 'P'
|     | `-DeclRefExpr 0x55a5232f8b18 <col:71> 'Vector<T>' lvalue ParmVar 0x55a5232d1360 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55a5232f8ba8 <line:622:9, col:17>
|       `-UnaryOperator 0x55a5232f8b90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f8b80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232d1a88 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55a5232d15c0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d1638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d19e8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55a5232d16f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d1778 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d18c0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55a5232f8e20 <col:66, line:627:5>
|     `-ReturnStmt 0x55a5232f8e10 <line:626:9, col:59>
|       `-CallExpr 0x55a5232f8dd0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55a5232f8be8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55a5232f8c58 <col:25> 'const char *' lvalue ParmVar 0x55a5232d16f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55a5232f8c78 <col:34> 'int' lvalue ParmVar 0x55a5232d1778 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55a5232f8d90 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55a5232f8db0 <col:58> 'Vector<T>' lvalue ParmVar 0x55a5232d18c0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55a5232d1b18 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55a5232f8ea0 <col:25, line:633:5>
|   `-ReturnStmt 0x55a5232f8e90 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55a5232f8e78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a5232f8e48 <col:16> 'const bool' lvalue ->_status 0x55a5232e0318
|         `-CXXThisExpr 0x55a5232f8e38 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a5232d1c98 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55a5232d1bd0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55a5232f8f88 <col:27, line:639:5>
|   |-BinaryOperator 0x55a5232f8f30 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5232f8eb8 <col:9> 'bool' lvalue ParmVar 0x55a5232d1bd0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a5232f8f18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5232f8ee8 <col:13> 'bool' lvalue ->_status 0x55a5232e0318
|   |     `-CXXThisExpr 0x55a5232f8ed8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a5232f8f78 <line:638:9, col:17>
|     `-UnaryOperator 0x55a5232f8f60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f8f50 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a5232d1e18 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a5232d1d58 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55a5232f9078 <col:39, line:644:5>
|   |-BinaryOperator 0x55a5232f9020 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5232f8fa8 <col:9> 'bool' lvalue ParmVar 0x55a5232d1d58 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a5232f9008 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5232f8fd8 <col:13> 'const bool' lvalue ->_status 0x55a5232e0318
|   |     `-CXXThisExpr 0x55a5232f8fc8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a5232f9068 <line:643:9, col:17>
|     `-UnaryOperator 0x55a5232f9050 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f9040 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a5232d1ee0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55a5232f9120 <col:30, line:651:5>
|   `-ReturnStmt 0x55a5232f9110 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55a5232f90f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55a5232f90c8 <col:16> 'bool' lvalue ->_read_status 0x55a5232b89d0
|         `-ImplicitCastExpr 0x55a5232f90a8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55a5232f9098 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55a5232d2028 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55a5232d1f98 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55a5232f9228 <col:32, line:658:5>
|   |-BinaryOperator 0x55a5232f91d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5232f9138 <col:9> 'bool' lvalue ParmVar 0x55a5232d1f98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a5232f91b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5232f9188 <col:13> 'bool' lvalue ->_read_status 0x55a5232b89d0
|   |     `-ImplicitCastExpr 0x55a5232f9168 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a5232f9158 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55a5232f9218 <line:657:9, col:17>
|     `-UnaryOperator 0x55a5232f9200 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f91f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55a5232d2178 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55a5232d20e8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55a5232f9338 <col:44, line:663:5>
|   |-BinaryOperator 0x55a5232f92e0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55a5232f9248 <col:9> 'bool' lvalue ParmVar 0x55a5232d20e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55a5232f92c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55a5232f9298 <col:13> 'bool' lvalue ->_read_status 0x55a5232b89d0
|   |     `-ImplicitCastExpr 0x55a5232f9278 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55a5232f9268 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55a5232f9328 <line:662:9, col:17>
|     `-UnaryOperator 0x55a5232f9310 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232f9300 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55a5232d2240 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55a5232d2308 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55a5232d23d0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55a5232d2498 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55a5232d27a8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55a5232d2538 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232d2708 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55a5232d2618 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f96f0 <col:19, line:706:5>
|     `-IfStmt 0x55a5232f96c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55a5232f9438 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55a5232f95f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55a5232f95c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55a5232f9588 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55a5232f9490 <col:42> '<bound member function type>' ->simple_slot 0x55a5232f27f0
|       |     | `-CXXThisExpr 0x55a5232f9480 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55a5232f9528 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55a5232f94e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55a523054a98
|       |     | `-DeclRefExpr 0x55a5232f94c0 <col:55> 'T' lvalue ParmVar 0x55a5232d2618 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55a5232f9568 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55a5232f96b8 <line:705:13, col:34>
|         `-CallExpr 0x55a5232f9690 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55a5232f9618 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55a5232f9670 <col:33> 'T' lvalue ParmVar 0x55a5232d2618 'x' 'T &'
|-FunctionTemplateDecl 0x55a5232d2a78 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55a5232d2808 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232d29d8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55a5232d28e8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55a5232f9ad0 <col:31, line:717:5>
|     |-DeclStmt 0x55a5232f9830 <line:713:9, col:23>
|     | `-VarDecl 0x55a5232f9718 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55a5232f9808 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a5232f9790 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a5232f97e8 <col:21> 'T' lvalue ParmVar 0x55a5232d28e8 'x' 'T &'
|     |-IfStmt 0x55a5232f9a80 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55a5232f9928 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55a5232f9a60 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a5232f9a00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a5232f9990 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|     |   | `-DeclRefExpr 0x55a5232f9970 <col:14> 'T *' lvalue Var 0x55a5232f9718 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55a5232f9a40 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55a5232f9ab8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55a5232f9a98 <col:16> 'T *' lvalue Var 0x55a5232f9718 's' 'T *'
|-FunctionTemplateDecl 0x55a5232d2e88 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55a5232d2ad8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232d2b58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5232d2de8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55a5232d2c38 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55a5232d2cd8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55a5232f9de0 <col:37, line:726:5>
|     |-IfStmt 0x55a5232f9d70 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55a5232f9d90 <line:723:13, col:26>
|     | | `-VarDecl 0x55a5232f9b38 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55a5232f9c28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55a5232f9bb0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55a5232f9c08 <col:25> 'T' lvalue ParmVar 0x55a5232d2c38 'x' 'T &'
|     | |-DeclRefExpr 0x55a5232f9c50 <col:16> 'T *' lvalue Var 0x55a5232f9b38 's' 'T *'
|     | `-BinaryOperator 0x55a5232f9d50 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55a5232f9d00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55a5232f9c90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|     |   | `-DeclRefExpr 0x55a5232f9c70 <col:14> 'T *' lvalue Var 0x55a5232f9b38 's' 'T *'
|     |   `-DeclRefExpr 0x55a5232f9d30 <col:18> 'const V' lvalue ParmVar 0x55a5232d2cd8 'value' 'const V &'
|     `-ReturnStmt 0x55a5232f9dd0 <line:725:9, col:17>
|       `-UnaryOperator 0x55a5232f9db8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55a5232f9da8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55a5232d3288 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55a5232d2ef0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55a5232d31e8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55a5232d2fa0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d3020 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d30c8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55a5232fac00 <col:65, line:737:5>
|     |-DeclStmt 0x55a5232f9e78 <line:732:9, col:26>
|     | `-VarDecl 0x55a5232f9e10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a5232fabc8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55a5232fabe8 <line:733:13, col:58>
|       | `-VarDecl 0x55a5232f9ea0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a5232fa080 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a5232fa050 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a5232fa038 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5232fa018 <col:26, col:58> 'String' (CXXTemporary 0x55a5232fa018)
|       |           `-CXXMemberCallExpr 0x55a5232f9fa8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5232f9f18 <col:26> '<bound member function type>' ->find 0x55a5232f1e08
|       |             | `-CXXThisExpr 0x55a5232f9f08 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a5232f9fe0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5232f9f48 <col:31> 'const char *' lvalue ParmVar 0x55a5232d2fa0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a5232f9ff8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5232f9f68 <col:40> 'int' lvalue ParmVar 0x55a5232d3020 'flags' 'int'
|       |             `-DeclRefExpr 0x55a5232f9f88 <col:47> 'Args::Slot *' lvalue Var 0x55a5232f9e10 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a5232fa138 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a5232fa120 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a5232fa100 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a5232fa0d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |       `-ImplicitCastExpr 0x55a5232fa0b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a5232fa098 <col:20> 'String' lvalue Var 0x55a5232f9ea0 'str' 'String'
|       `-CompoundStmt 0x55a5232faba8 <col:61, line:736:9>
|         |-DeclStmt 0x55a5232fa5f0 <line:734:13, col:76>
|         | `-VarDecl 0x55a5232fa188 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a5232fa5c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a5232fa530 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a5232fa578 <col:60> 'T' lvalue ParmVar 0x55a5232d30c8 'variable' 'T &'
|         |     `-UnaryOperator 0x55a5232fa5a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a5232fa598 <col:71> 'Args *' this
|         `-CallExpr 0x55a5232fab78 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55a5232fa618 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|           | `-CXXThisExpr 0x55a5232fa608 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a5232fab38 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a5232fa648 <col:23> 'T *' lvalue Var 0x55a5232fa188 's' 'T *'
|           | `-CallExpr 0x55a5232faaf8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a5232fa8d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55a5232fa9d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55a5232fa9f0 <col:86> 'String' lvalue Var 0x55a5232f9ea0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a5232faaa0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a5232faa30 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|           |   | `-DeclRefExpr 0x55a5232faa10 <col:92> 'T *' lvalue Var 0x55a5232fa188 's' 'T *'
|           |   `-UnaryOperator 0x55a5232faae0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a5232faad0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55a5232fab58 <col:103> 'Args::Slot *' lvalue Var 0x55a5232f9e10 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232d37d8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a5232d32f8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232d3378 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55a5232d3738 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55a5232d3438 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d34b8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d3558 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55a5232d35f8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55a5232fbaa0 <col:88, line:745:5>
|     |-DeclStmt 0x55a5232fac98 <line:741:9, col:26>
|     | `-VarDecl 0x55a5232fac30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a5232faeb8 <line:742:9, col:55>
|     | `-VarDecl 0x55a5232facc0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a5232faea0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a5232fae70 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a5232fae58 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a5232fae38 <col:22, col:54> 'String' (CXXTemporary 0x55a5232fae38)
|     |           `-CXXMemberCallExpr 0x55a5232fadc8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a5232fad38 <col:22> '<bound member function type>' ->find 0x55a5232f1e08
|     |             | `-CXXThisExpr 0x55a5232fad28 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a5232fae00 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a5232fad68 <col:27> 'const char *' lvalue ParmVar 0x55a5232d3438 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a5232fae18 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a5232fad88 <col:36> 'int' lvalue ParmVar 0x55a5232d34b8 'flags' 'int'
|     |             `-DeclRefExpr 0x55a5232fada8 <col:43> 'Args::Slot *' lvalue Var 0x55a5232fac30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a5232fb290 <line:743:9, col:72>
|     | `-VarDecl 0x55a5232faf08 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a5232fb260 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a5232fb1d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a5232fb218 <col:56> 'T' lvalue ParmVar 0x55a5232d3558 'variable' 'T &'
|     |     `-UnaryOperator 0x55a5232fb248 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a5232fb238 <col:67> 'Args *' this
|     `-CallExpr 0x55a5232fba70 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55a5232fb2b8 <col:9> '<bound member function type>' ->postparse 0x55a5232f2018
|       | `-CXXThisExpr 0x55a5232fb2a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a5232fba30 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a5232fb2e8 <col:19> 'T *' lvalue Var 0x55a5232faf08 's' 'T *'
|       | `-ParenExpr 0x55a5232fba10 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55a5232fb9e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a5232fb9c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a5232fb9b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a5232fb990 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a5232fb960 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |     |       `-ImplicitCastExpr 0x55a5232fb948 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a5232fb308 <col:25> 'String' lvalue Var 0x55a5232facc0 'str' 'String'
|       |     |-CallExpr 0x55a5232fb7b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a5232fb590 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55a5232fb690 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55a5232fb6b0 <col:89> 'String' lvalue Var 0x55a5232facc0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a5232fb760 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a5232fb6f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|       |     | | `-DeclRefExpr 0x55a5232fb6d0 <col:95> 'T *' lvalue Var 0x55a5232faf08 's' 'T *'
|       |     | `-UnaryOperator 0x55a5232fb7a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a5232fb790 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55a5232fb928 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55a5232fb908 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a5232fb8d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a5232fb888 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a5232fb818 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|       |         | | `-DeclRefExpr 0x55a5232fb7f8 <col:109> 'T *' lvalue Var 0x55a5232faf08 's' 'T *'
|       |         | `-DeclRefExpr 0x55a5232fb8b8 <col:113> 'const V' lvalue ParmVar 0x55a5232d35f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a5232fb8f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55a5232fba50 <col:128> 'Args::Slot *' lvalue Var 0x55a5232fac30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232d3d08 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55a5232d3850 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d38c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232d3c68 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a5232d3988 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d3a08 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d3a80 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d3b28 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55a5232fc698 <col:75, line:754:5>
|     |-DeclStmt 0x55a5232fbb48 <line:749:9, col:26>
|     | `-VarDecl 0x55a5232fbae0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a5232fc660 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55a5232fc680 <line:750:13, col:58>
|       | `-VarDecl 0x55a5232fbb70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a5232fbd50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a5232fbd20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a5232fbd08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5232fbce8 <col:26, col:58> 'String' (CXXTemporary 0x55a5232fbce8)
|       |           `-CXXMemberCallExpr 0x55a5232fbc78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5232fbbe8 <col:26> '<bound member function type>' ->find 0x55a5232f1e08
|       |             | `-CXXThisExpr 0x55a5232fbbd8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a5232fbcb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5232fbc18 <col:31> 'const char *' lvalue ParmVar 0x55a5232d3988 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a5232fbcc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5232fbc38 <col:40> 'int' lvalue ParmVar 0x55a5232d3a08 'flags' 'int'
|       |             `-DeclRefExpr 0x55a5232fbc58 <col:47> 'Args::Slot *' lvalue Var 0x55a5232fbae0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a5232fbe08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a5232fbdf0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a5232fbdd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a5232fbda0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |       `-ImplicitCastExpr 0x55a5232fbd88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a5232fbd68 <col:20> 'String' lvalue Var 0x55a5232fbb70 'str' 'String'
|       `-CompoundStmt 0x55a5232fc640 <col:61, line:753:9>
|         |-DeclStmt 0x55a5232fc1e0 <line:751:13, col:63>
|         | `-VarDecl 0x55a5232fbe58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55a5232fc1b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a5232fc120 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a5232fc168 <col:47> 'T' lvalue ParmVar 0x55a5232d3b28 'variable' 'T &'
|         |     `-UnaryOperator 0x55a5232fc198 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a5232fc188 <col:58> 'Args *' this
|         `-CallExpr 0x55a5232fc610 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55a5232fc208 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|           | `-CXXThisExpr 0x55a5232fc1f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a5232fc5d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55a5232fc238 <col:23> 'T *' lvalue Var 0x55a5232fbe58 's' 'T *'
|           | `-CallExpr 0x55a5232fc590 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a5232fc420 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a5232fc468 <col:56> 'P' lvalue ParmVar 0x55a5232d3a80 'parser' 'P'
|           |   |-DeclRefExpr 0x55a5232fc488 <col:64> 'String' lvalue Var 0x55a5232fbb70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a5232fc538 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a5232fc4c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|           |   | `-DeclRefExpr 0x55a5232fc4a8 <col:70> 'T *' lvalue Var 0x55a5232fbe58 's' 'T *'
|           |   `-UnaryOperator 0x55a5232fc578 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a5232fc568 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55a5232fc5f0 <col:81> 'Args::Slot *' lvalue Var 0x55a5232fbae0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232d4368 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55a5232d3d80 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55a5232d3df8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55a5232d3e78 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55a5232d42c8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55a5232d3f40 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d3fc0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d4038 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d40d8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55a5232d4178 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55a5233007b0 <col:98, line:762:5>
|     |-DeclStmt 0x55a5232fc730 <line:758:9, col:26>
|     | `-VarDecl 0x55a5232fc6c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a5232fc950 <line:759:9, col:55>
|     | `-VarDecl 0x55a5232fc758 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55a5232fc938 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55a5232fc908 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55a5232fc8f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55a5232fc8d0 <col:22, col:54> 'String' (CXXTemporary 0x55a5232fc8d0)
|     |           `-CXXMemberCallExpr 0x55a5232fc860 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55a5232fc7d0 <col:22> '<bound member function type>' ->find 0x55a5232f1e08
|     |             | `-CXXThisExpr 0x55a5232fc7c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55a5232fc898 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a5232fc800 <col:27> 'const char *' lvalue ParmVar 0x55a5232d3f40 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55a5232fc8b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55a5232fc820 <col:36> 'int' lvalue ParmVar 0x55a5232d3fc0 'flags' 'int'
|     |             `-DeclRefExpr 0x55a5232fc840 <col:43> 'Args::Slot *' lvalue Var 0x55a5232fc6c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55a5232fcd70 <line:760:9, col:59>
|     | `-VarDecl 0x55a5232fc9a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a5232fcd40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a5232fccb0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55a5232fccf8 <col:43> 'T' lvalue ParmVar 0x55a5232d40d8 'variable' 'T &'
|     |     `-UnaryOperator 0x55a5232fcd28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a5232fcd18 <col:54> 'Args *' this
|     `-CallExpr 0x55a523300780 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55a5232fcd98 <col:9> '<bound member function type>' ->postparse 0x55a5232f2018
|       | `-CXXThisExpr 0x55a5232fcd88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55a5232fd3b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55a5232fcdc8 <col:19> 'T *' lvalue Var 0x55a5232fc9a8 's' 'T *'
|       | `-ParenExpr 0x55a5232fd398 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55a5232fd368 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55a5232fd350 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55a5232fd338 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55a5232fd318 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55a5232fd2e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |     |       `-ImplicitCastExpr 0x55a5232fd2d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55a5232fcde8 <col:25> 'String' lvalue Var 0x55a5232fc758 'str' 'String'
|       |     |-CallExpr 0x55a5232fd140 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55a5232fcfd0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55a5232fd018 <col:59> 'P' lvalue ParmVar 0x55a5232d4038 'parser' 'P'
|       |     | |-DeclRefExpr 0x55a5232fd038 <col:67> 'String' lvalue Var 0x55a5232fc758 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55a5232fd0e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55a5232fd078 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|       |     | | `-DeclRefExpr 0x55a5232fd058 <col:73> 'T *' lvalue Var 0x55a5232fc9a8 's' 'T *'
|       |     | `-UnaryOperator 0x55a5232fd128 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55a5232fd118 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55a5232fd2b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55a5232fd290 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55a5232fd260 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55a5232fd210 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55a5232fd1a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|       |         | | `-DeclRefExpr 0x55a5232fd180 <col:87> 'T *' lvalue Var 0x55a5232fc9a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55a5232fd240 <col:91> 'const V' lvalue ParmVar 0x55a5232d4178 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55a5232fd280 <col:98> 'bool' true
|       `-DeclRefExpr 0x55a5232fd3d8 <col:106> 'Args::Slot *' lvalue Var 0x55a5232fc6c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232d49d8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55a5232d43e8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232d4468 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55a5232d44e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55a5232d4938 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55a5232d45b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d4630 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d46a8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232d4748 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55a5232d47e8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55a523301788 <col:60, line:773:5>
|     |-DeclStmt 0x55a523300858 <line:767:9, col:26>
|     | `-VarDecl 0x55a5233007f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a523301750 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55a523301770 <line:768:13, col:58>
|       | `-VarDecl 0x55a523300880 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a523300a60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a523300a30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a523300a18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5233009f8 <col:26, col:58> 'String' (CXXTemporary 0x55a5233009f8)
|       |           `-CXXMemberCallExpr 0x55a523300988 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5233008f8 <col:26> '<bound member function type>' ->find 0x55a5232f1e08
|       |             | `-CXXThisExpr 0x55a5233008e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a5233009c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a523300928 <col:31> 'const char *' lvalue ParmVar 0x55a5232d45b0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a5233009d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a523300948 <col:40> 'int' lvalue ParmVar 0x55a5232d4630 'flags' 'int'
|       |             `-DeclRefExpr 0x55a523300968 <col:47> 'Args::Slot *' lvalue Var 0x55a5233007f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a523300b18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a523300b00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a523300ae0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a523300ab0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |       `-ImplicitCastExpr 0x55a523300a98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a523300a78 <col:20> 'String' lvalue Var 0x55a523300880 'str' 'String'
|       `-CompoundStmt 0x55a523301728 <col:61, line:772:9>
|         |-DeclStmt 0x55a523300e50 <line:769:13, col:66>
|         | `-VarDecl 0x55a523300b68 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55a523300e20 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a523300d90 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a523300dd8 <col:49> 'T1' lvalue ParmVar 0x55a5232d4748 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55a523300e08 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a523300df8 <col:61> 'Args *' this
|         |-DeclStmt 0x55a5233011c0 <line:770:13, col:66>
|         | `-VarDecl 0x55a523300ed8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55a523301190 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55a523301100 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55a523301148 <col:49> 'T2' lvalue ParmVar 0x55a5232d47e8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55a523301178 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55a523301168 <col:61> 'Args *' this
|         `-CallExpr 0x55a5233016f8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55a5233011e8 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|           | `-CXXThisExpr 0x55a5233011d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55a5233016b8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55a523301258 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55a523301218 <col:23> 'T1 *' lvalue Var 0x55a523300b68 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55a523301238 <col:29> 'T2 *' lvalue Var 0x55a523300ed8 's2' 'T2 *'
|           | `-CallExpr 0x55a523301670 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55a523301440 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55a523301488 <col:63> 'P' lvalue ParmVar 0x55a5232d46a8 'parser' 'P'
|           |   |-DeclRefExpr 0x55a5233014a8 <col:71> 'String' lvalue Var 0x55a523300880 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55a523301558 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a5233014e8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|           |   | `-DeclRefExpr 0x55a5233014c8 <col:77> 'T1 *' lvalue Var 0x55a523300b68 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55a523301618 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55a5233015a8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|           |   | `-DeclRefExpr 0x55a523301588 <col:82> 'T2 *' lvalue Var 0x55a523300ed8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55a523301658 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55a523301648 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55a5233016d8 <col:94> 'Args::Slot *' lvalue Var 0x55a5233007f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232dd790 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55a5232d4a58 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232dd6f0 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a5232d4b10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232d4b90 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232d4c08 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55a523301ca0 <col:67, line:780:5>
|     |-DeclStmt 0x55a523301820 <line:777:9, col:26>
|     | `-VarDecl 0x55a5233017b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55a523301c68 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55a523301c88 <line:778:13, col:58>
|       | `-VarDecl 0x55a523301848 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55a523301a28 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55a5233019f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55a5233019e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55a5233019c0 <col:26, col:58> 'String' (CXXTemporary 0x55a5233019c0)
|       |           `-CXXMemberCallExpr 0x55a523301950 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55a5233018c0 <col:26> '<bound member function type>' ->find 0x55a5232f1e08
|       |             | `-CXXThisExpr 0x55a5233018b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55a523301988 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a5233018f0 <col:31> 'const char *' lvalue ParmVar 0x55a5232d4b10 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55a5233019a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55a523301910 <col:40> 'int' lvalue ParmVar 0x55a5232d4b90 'flags' 'int'
|       |             `-DeclRefExpr 0x55a523301930 <col:47> 'Args::Slot *' lvalue Var 0x55a5233017b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55a523301ae0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55a523301ac8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55a523301aa8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55a523301a78 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|       |       `-ImplicitCastExpr 0x55a523301a60 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55a523301a40 <col:20> 'String' lvalue Var 0x55a523301848 'str' 'String'
|       `-CallExpr 0x55a523301c38 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55a523301b08 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|         | `-CXXThisExpr 0x55a523301af8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55a523301be8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55a523301b58 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55a523301b38 <col:23> 'P' lvalue ParmVar 0x55a5232d4c08 'parser' 'P'
|         | |-DeclRefExpr 0x55a523301ba0 <col:36> 'String' lvalue Var 0x55a523301848 'str' 'String'
|         | `-UnaryOperator 0x55a523301bd0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55a523301bc0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55a523301c18 <col:49> 'Args::Slot *' lvalue Var 0x55a5233017b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55a5232ddb28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a5232dd800 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55a5232dda88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55a5232dd8b0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232dd930 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232dd9a8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55a523302610 <col:71, line:792:5>
|     |-DeclStmt 0x55a523301d38 <line:784:9, col:26>
|     | `-VarDecl 0x55a523301cd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a523301e08 <line:785:9, col:29>
|     | `-VarDecl 0x55a523301d68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a523301df0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a523301dd0 <col:28> 'int' 1
|     |-WhileStmt 0x55a5233024c0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55a5233024e0 <line:786:16, col:61>
|     | | `-VarDecl 0x55a523301e30 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a523302010 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a523301fe0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a523301fc8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a523301fa8 <col:29, col:61> 'String' (CXXTemporary 0x55a523301fa8)
|     | |           `-CXXMemberCallExpr 0x55a523301f38 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a523301ea8 <col:29> '<bound member function type>' ->find 0x55a5232f1e08
|     | |             | `-CXXThisExpr 0x55a523301e98 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a523301f70 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523301ed8 <col:34> 'const char *' lvalue ParmVar 0x55a5232dd8b0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a523301f88 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523301ef8 <col:43> 'int' lvalue ParmVar 0x55a5232dd930 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a523301f18 <col:50> 'Args::Slot *' lvalue Var 0x55a523301cd0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a5233020c8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a5233020b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a523302090 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a523302060 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|     | |       `-ImplicitCastExpr 0x55a523302048 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a523302028 <col:23> 'String' lvalue Var 0x55a523301e30 'str' 'String'
|     | `-CompoundStmt 0x55a523302498 <col:64, line:790:9>
|     |   |-CallExpr 0x55a523302220 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55a5233020f0 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|     |   | | `-CXXThisExpr 0x55a5233020e0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a5233021d0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a523302140 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a523302120 <col:23> 'P' lvalue ParmVar 0x55a5232dd9a8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a523302188 <col:36> 'String' lvalue Var 0x55a523301e30 'str' 'String'
|     |   | | `-UnaryOperator 0x55a5233021b8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a5233021a8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55a523302200 <col:49> 'Args::Slot *' lvalue Var 0x55a523301cd0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a5233023b8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a523302250 <col:13> 'int' lvalue Var 0x55a523301d68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a5233023a0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a523302380 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a5233022e8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a5233022c8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a5233022b0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a523302270 <col:28> 'int' lvalue Var 0x55a523301d68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a523302290 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a523302368 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a523302338 <col:49> 'bool' lvalue ->_read_status 0x55a5232b89d0
|     |   |         `-ImplicitCastExpr 0x55a523302318 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a523302308 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a523302468 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a5233023d8 <col:13> 'int' lvalue ParmVar 0x55a5232dd930 'flags' 'int'
|     |     `-UnaryOperator 0x55a523302450 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a523302438 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a523302418 <col:23> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a5233025f0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a523302528 <col:9> 'bool' lvalue ->_read_status 0x55a5232b89d0
|       | `-ImplicitCastExpr 0x55a523302508 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a5233024f8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a5233025d0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a5233025b0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a523302598 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a523302558 <col:25> 'int' lvalue Var 0x55a523301d68 'read_status' 'int'
|           `-IntegerLiteral 0x55a523302578 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a5232de008 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55a5232ddb98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232ddc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232ddf68 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55a5232ddcd8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232ddd58 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232dddd0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232dde78 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55a5233035a0 <col:84, line:805:5>
|     |-DeclStmt 0x55a5233026b8 <line:796:9, col:26>
|     | `-VarDecl 0x55a523302650 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a523302788 <line:797:9, col:29>
|     | `-VarDecl 0x55a5233026e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a523302770 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a523302750 <col:28> 'int' 1
|     |-DeclStmt 0x55a523302ac0 <line:798:9, col:71>
|     | `-VarDecl 0x55a5233027d8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55a523302a90 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55a523302a00 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55a523302a48 <col:55> 'T' lvalue ParmVar 0x55a5232dde78 'variable' 'T &'
|     |     `-UnaryOperator 0x55a523302a78 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55a523302a68 <col:66> 'Args *' this
|     |-WhileStmt 0x55a523303450 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55a523303470 <line:799:16, col:61>
|     | | `-VarDecl 0x55a523302ae8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a523302cc8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a523302c98 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a523302c80 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a523302c60 <col:29, col:61> 'String' (CXXTemporary 0x55a523302c60)
|     | |           `-CXXMemberCallExpr 0x55a523302bf0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a523302b60 <col:29> '<bound member function type>' ->find 0x55a5232f1e08
|     | |             | `-CXXThisExpr 0x55a523302b50 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a523302c28 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523302b90 <col:34> 'const char *' lvalue ParmVar 0x55a5232ddcd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a523302c40 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523302bb0 <col:43> 'int' lvalue ParmVar 0x55a5232ddd58 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a523302bd0 <col:50> 'Args::Slot *' lvalue Var 0x55a523302650 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a523302d80 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a523302d68 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a523302d48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a523302d18 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|     | |       `-ImplicitCastExpr 0x55a523302d00 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a523302ce0 <col:23> 'String' lvalue Var 0x55a523302ae8 'str' 'String'
|     | `-CompoundStmt 0x55a523303428 <col:64, line:803:9>
|     |   |-CallExpr 0x55a5233031b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55a523302da8 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|     |   | | `-CXXThisExpr 0x55a523302d98 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55a523303170 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55a523302dd8 <col:23> 'T *' lvalue Var 0x55a5233027d8 's' 'T *'
|     |   | | `-CallExpr 0x55a523303130 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55a523302fc0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55a523303008 <col:56> 'P' lvalue ParmVar 0x55a5232dddd0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55a523303028 <col:64> 'String' lvalue Var 0x55a523302ae8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55a5233030d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55a523303068 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|     |   | |   | `-DeclRefExpr 0x55a523303048 <col:70> 'T *' lvalue Var 0x55a5233027d8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55a523303118 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55a523303108 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55a523303190 <col:81> 'Args::Slot *' lvalue Var 0x55a523302650 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55a523303348 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a5233031e0 <col:13> 'int' lvalue Var 0x55a5233026e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a523303330 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a523303310 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a523303278 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a523303258 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a523303240 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a523303200 <col:28> 'int' lvalue Var 0x55a5233026e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a523303220 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a5233032f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a5233032c8 <col:49> 'bool' lvalue ->_read_status 0x55a5232b89d0
|     |   |         `-ImplicitCastExpr 0x55a5233032a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a523303298 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a5233033f8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a523303368 <col:13> 'int' lvalue ParmVar 0x55a5232ddd58 'flags' 'int'
|     |     `-UnaryOperator 0x55a5233033e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a5233033c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a5233033a8 <col:23> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a523303580 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a5233034b8 <col:9> 'bool' lvalue ->_read_status 0x55a5232b89d0
|       | `-ImplicitCastExpr 0x55a523303498 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a523303488 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a523303560 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a523303540 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a523303528 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a5233034e8 <col:25> 'int' lvalue Var 0x55a5233026e8 'read_status' 'int'
|           `-IntegerLiteral 0x55a523303508 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55a5232de5e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55a5232de080 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55a5232de0f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55a5232de548 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55a5232de1b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55a5232de238 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55a5232de2b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55a5232de400 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55a5233043a8 <col:87, line:821:5>
|     |-DeclStmt 0x55a523303650 <line:809:9, col:26>
|     | `-VarDecl 0x55a5233035e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55a523303720 <line:810:9, col:29>
|     | `-VarDecl 0x55a523303680 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55a523303708 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55a5233036e8 <col:28> 'int' 1
|     |-DeclStmt 0x55a523303968 <line:811:9, col:38>
|     | `-VarDecl 0x55a523303850 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55a523303940 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55a5233038c8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55a523303920 <col:29> 'Vector<T>' lvalue ParmVar 0x55a5232de400 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55a523304258 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55a523304278 <line:812:16, col:61>
|     | | `-VarDecl 0x55a523303990 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55a523303b70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55a523303b40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55a523303b28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55a523303b08 <col:29, col:61> 'String' (CXXTemporary 0x55a523303b08)
|     | |           `-CXXMemberCallExpr 0x55a523303a98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55a523303a08 <col:29> '<bound member function type>' ->find 0x55a5232f1e08
|     | |             | `-CXXThisExpr 0x55a5233039f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55a523303ad0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523303a38 <col:34> 'const char *' lvalue ParmVar 0x55a5232de1b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55a523303ae8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55a523303a58 <col:43> 'int' lvalue ParmVar 0x55a5232de238 'flags' 'int'
|     | |             `-DeclRefExpr 0x55a523303a78 <col:50> 'Args::Slot *' lvalue Var 0x55a5233035e8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55a523303c28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55a523303c10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55a523303bf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55a523303bc0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55a523017a68
|     | |       `-ImplicitCastExpr 0x55a523303ba8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55a523303b88 <col:23> 'String' lvalue Var 0x55a523303990 'str' 'String'
|     | `-CompoundStmt 0x55a523304220 <col:64, line:819:9>
|     |   |-DeclStmt 0x55a523303ce8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55a523303c50 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55a523303cc8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55a523303e68 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55a523303d10 <col:13> '<bound member function type>' ->postparse 0x55a5232f2018
|     |   | | `-CXXThisExpr 0x55a523303d00 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55a523303e10 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55a523303d60 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55a523303d40 <col:23> 'P' lvalue ParmVar 0x55a5232de2b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55a523303da8 <col:36> 'String' lvalue Var 0x55a523303990 'str' 'String'
|     |   | | |-DeclRefExpr 0x55a523303dc8 <col:41> 'T' lvalue Var 0x55a523303c50 'sx' 'T'
|     |   | | `-UnaryOperator 0x55a523303df8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55a523303de8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55a523303e48 <col:53> 'Args::Slot *' lvalue Var 0x55a5233035e8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55a523303fc0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55a523303ef8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55a523303ec8 <col:17> 'bool' lvalue ->_read_status 0x55a5232b89d0
|     |   | |   `-ImplicitCastExpr 0x55a523303ea8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55a523303e98 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55a523303f98 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55a523303f30 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55a523303f10 <col:17> 'Vector<T> *' lvalue Var 0x55a523303850 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55a523303f78 <col:30> 'T' lvalue Var 0x55a523303c50 'sx' 'T'
|     |   |-BinaryOperator 0x55a523304140 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55a523303fd8 <col:13> 'int' lvalue Var 0x55a523303680 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55a523304128 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55a523304108 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55a523304070 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55a523304050 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55a523304038 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55a523303ff8 <col:28> 'int' lvalue Var 0x55a523303680 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55a523304018 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55a5233040f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55a5233040c0 <col:49> 'bool' lvalue ->_read_status 0x55a5232b89d0
|     |   |         `-ImplicitCastExpr 0x55a5233040a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55a523304090 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55a5233041f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55a523304160 <col:13> 'int' lvalue ParmVar 0x55a5232de238 'flags' 'int'
|     |     `-UnaryOperator 0x55a5233041d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55a5233041c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55a5233041a0 <col:23> 'const int' lvalue Var 0x55a5232c1108 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55a523304388 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55a5233042c0 <col:9> 'bool' lvalue ->_read_status 0x55a5232b89d0
|       | `-ImplicitCastExpr 0x55a5233042a0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55a523304290 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55a523304368 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55a523304348 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55a523304330 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55a5233042f0 <col:25> 'int' lvalue Var 0x55a523303680 'read_status' 'int'
|           `-IntegerLiteral 0x55a523304310 <col:40> 'int' 1
|-AccessSpecDecl 0x55a5232de660 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55a5232de688 prev 0x55a5232be1e0 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55a5232de780 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55a5232de870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55a5233043e0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55a5232de960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55a5233043f0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55a5232dea60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55a5232deb10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55a5232debb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55a5232debb8
| | `-ParmVarDecl 0x55a5232decc8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55a5232df488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55a5232df488
|   `-ParmVarDecl 0x55a5232df598 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55a5232ded38 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55a5232dee98 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55a5232df090 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55a5232def40 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55a5232defb8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55a5233045d0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55a5232df348 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55a523304440 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a523304400 <col:20> 'void *' lvalue ParmVar 0x55a5232def40 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55a5232df3b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55a5233044c8 <col:32, col:45> 'char *' array Function 0x55a522e3a6d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55a5233044b0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55a523304480 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55a5232defb8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55a5232df410 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55a523304590 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55a523304550 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55a5232defb8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55a523304650 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55a5232df190 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55a5232de960 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55a5233046d8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55a5233046b8 <line:840:13, col:22> 'void' array Function 0x55a522e3aa38 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55a5233046a0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55a523304670 <col:22> 'char *' lvalue ->_slot 0x55a5232df3b0
| |         `-CXXThisExpr 0x55a523304660 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55a5232df290 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55a5232dea60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55a5233048c8 <col:22, line:844:9>
| |   `-CallExpr 0x55a523304830 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55a523304818 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55a5233047f8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55a522f464b8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55a523304868 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55a523304748 <col:20> 'void *' lvalue ->_ptr 0x55a5232df348
| |     |   `-CXXThisExpr 0x55a523304738 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55a523304898 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55a523304880 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55a523304788 <col:26> 'char *' lvalue ->_slot 0x55a5232df3b0
| |     |     `-CXXThisExpr 0x55a523304778 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55a5233048b0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55a5233047c8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55a5232df410
| |         `-CXXThisExpr 0x55a5233047b8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55a5232df348 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55a5232df3b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55a5232df410 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55a5232df608 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a5232df608
| | `-ParmVarDecl 0x55a5232df718 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55a5232df7b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55a5232df7b8
|   `-ParmVarDecl 0x55a5232df8c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55a5232dfa68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55a5232df938 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55a5232df9d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55a5232dfd00 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55a5232dfef8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55a5232dfdc8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55a5232e0078 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55a523304900 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55a5233048e0 <col:20> 'T *' lvalue ParmVar 0x55a5232dfdc8 'ptr' 'T *'
|   | `-CompoundStmt 0x55a523304950 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55a5232dffc8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55a5232dea60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55a523304b00 <col:22, line:857:9>
|   |   `-CallExpr 0x55a523304ad0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55a523304960 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55a522ffebe8 0x55a522fa8f18
|   |     |-CXXOperatorCallExpr 0x55a523304a60 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55a5233049f0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55a52320bb98 0x55a52320b7b8 0x55a52320b3e8 0x55a52320b008 0x55a52320ac28 0x55a52320a858
|   |     | `-MemberExpr 0x55a5233049c0 <col:29> 'T *' lvalue ->_ptr 0x55a5232e0078
|   |     |   `-CXXThisExpr 0x55a5233049b0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55a523304aa0 <col:35> 'T' lvalue ->_slot 0x55a5232e00d8
|   |       `-CXXThisExpr 0x55a523304a90 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55a5232e0078 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55a5232e00d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55a5232e0140 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55a5232e0240 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55a5232e0290 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a5232e0220 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55a5232e0200 <col:31> 'int' 48
|-FieldDecl 0x55a5232e02b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55a5232e0318 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55a5232e0378 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55a5232e04b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55a5232f16b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55a5232f1710 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55a5232f17c0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55a5232f19e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55a5232f18f0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55a5232f1b38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55a5232f1aa8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55a5232f1e08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55a5232f1bf8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55a5232f1c78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55a5232f1d20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55a5232f2018 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55a5232f1ed0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55a5232f1f48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55a5232f20e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55a5232f2238 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55a5232f21a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55a5232f25c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55a5232f22f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55a5232f2378 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55a5232f2420 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55a5232f24d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55a5232f27f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55a5232f26a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55a5232f2718 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55a5232f2b08 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55a5232f28a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55a5232f2a68 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55a5232f2978 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523007910 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a523007a28 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55a523007ab8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55a523007b88 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55a523007c70 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523007e88 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a523007d30 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523008038 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a523007f40 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a523008180 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55a5230080f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55a5230082c8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a523008238 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523008410 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55a523008380 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a5230084d8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55a523008620 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55a523008590 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a5230086e8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55a523008830 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55a5230087a0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55a5230089a8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a5230088e8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523008af0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55a523008a60 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523008bb8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55a523008d78 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a523008c68 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a523008ce0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523008fc8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a523008e38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523008eb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a523009078 <col:86> "" ""
|-CXXMethodDecl 0x55a5230092e8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55a523009158 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55a5230091d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523009498 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a5230093a8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a523009648 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55a523009550 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55a523009918 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a523009700 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a523009778 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a5230097f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523009bf8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55a5230099e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55a523009a58 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523009ad0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a523009cb0 <col:115> "" ""
|-AccessSpecDecl 0x55a523009d20 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55a523009d58 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a52300b270 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a52300b270
| `-ParmVarDecl 0x55a52300b378 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55a52300b418 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a52300b418
| `-ParmVarDecl 0x55a52300b528 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55a523040b58 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a523232950 <col:7>
|-CXXConstructorDecl 0x55a523040c30 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55a523040c30
| `-ParmVarDecl 0x55a523040d48 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55a523040db8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55a523040db8
| `-ParmVarDecl 0x55a523040ec8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55a523235350 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a5232214f8 prev 0x55a523216700 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a5232215f0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55a5232216e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55a523221808 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55a523221988 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55a523221b08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55a523221c88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55a523232ab8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a523233328 <col:11>
|-CXXDestructorDecl 0x55a523232b90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a523232cc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a523232cc8
| `-ParmVarDecl 0x55a523232dd8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55a523232e78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a523232e78
| `-ParmVarDecl 0x55a523232f88 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55a523235d48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523235e58 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55a5232360d8 <col:11>
|   `-ReturnStmt 0x55a5232360c8 <col:11>
|     `-UnaryOperator 0x55a5232360b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55a5232360a0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55a523235ec8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a523235ec8
  `-ParmVarDecl 0x55a523235fd8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523221cf0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a523221e08 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55a523221ea8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55a523221f10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55a523221f78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55a523221fe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55a523222040 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55a523222100 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55a523222160 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55a5232221c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55a5232329c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55a523221ea8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55a523233338 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55a523233390 <col:12>
|-CXXConstructorDecl 0x55a523232ff8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a523232ff8
| `-ParmVarDecl 0x55a523233108 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55a5232331a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a5232331a8
| `-ParmVarDecl 0x55a5232332b8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55a523235430 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52320fe10 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55a52320ff28 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55a52320ffb8 <col:16, col:22> col:16 public
|-EnumDecl 0x55a52320ffe0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55a5232100e0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55a5232101c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232100c0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55a5232100a0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55a523210170 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55a5232101d8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523210150 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55a523210130 <col:22> 'int' 64
|-CXXMethodDecl 0x55a523210518 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55a523210200 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523210280 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55a5232102f8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523210370 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a5232105d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a5232107d8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55a523210650 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55a5232106c8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a523210888 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a5232109e8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55a5232108f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a523210a90 <col:72> warn_unused_result ""
|-TypedefDecl 0x55a523210df0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55a523210d80 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55a523210d20 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55a523210ce0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55a522ce7310 'void'
|       |-PointerType 0x55a522f901b0 'unsigned char *'
|       | `-BuiltinType 0x55a522ce7410 'unsigned char'
|       |-TypedefType 0x55a522d8c780 'size_t' sugar
|       | |-Typedef 0x55a522d57af0 'size_t'
|       | `-BuiltinType 0x55a522ce7470 'unsigned long'
|       `-PointerType 0x55a522ce7b10 'void *'
|         `-BuiltinType 0x55a522ce7310 'void'
|-CXXMethodDecl 0x55a523211268 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55a523210e60 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55a523210ed8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523210f70 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55a523210ff0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55a52322b960 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55a52322b948 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55a52322b910 <col:58> 'int' 0
| |-ParmVarDecl 0x55a523211070 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55a52322b988 <col:76> 'int' 0
| |-ParmVarDecl 0x55a5232110f0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55a52322b9a8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55a523211338 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55a5232113b8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55a523211478 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55a523211518 <col:20>
| `-OptimizeNoneAttr 0x55a523211570 <col:30>
|-CXXMethodDecl 0x55a5232115e8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55a523211688 <col:20>
| `-OptimizeNoneAttr 0x55a5232116e0 <col:30>
|-CXXMethodDecl 0x55a523211758 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55a5232117f8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55a5232118a8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55a523211948 <col:20>
| |-OptimizeNoneAttr 0x55a5232119a0 <col:30>
| `-WarnUnusedResultAttr 0x55a5232119c8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55a523211a20 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a523211ac0 <col:20>
| `-OptimizeNoneAttr 0x55a523211b18 <col:30>
|-CXXMethodDecl 0x55a523211b68 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55a523211c08 <col:20>
| `-OptimizeNoneAttr 0x55a523211c60 <col:30>
|-CXXMethodDecl 0x55a523211ca8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55a523211d48 <col:20>
| `-OptimizeNoneAttr 0x55a523211da0 <col:30>
|-CXXMethodDecl 0x55a523211de8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523211ea8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523211f70 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a523212038 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a5232120f8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523212218 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55a52322ba70 <col:54, line:99:5>
|   `-ReturnStmt 0x55a52322ba60 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55a52322ba48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55a52322ba18 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a5232224f8
|         `-CXXThisExpr 0x55a52322ba08 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a5232123b8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55a5232122c8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55a52322bb20 <col:67, line:103:5>
|   `-BinaryOperator 0x55a52322bb00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a52322ba98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a5232224f8
|     | `-CXXThisExpr 0x55a52322ba88 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a52322bae8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55a52322bac8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55a5232122c8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55a5232124b0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55a52322bba0 <col:33, line:107:5>
|   `-ReturnStmt 0x55a52322bb90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55a52322bb78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55a52322bb48 <col:16> 'void *' lvalue ->_destructor_argument 0x55a523222560
|         `-CXXThisExpr 0x55a52322bb38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a523212570 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55a52322c1d0 <col:25, line:113:5>
|   |-ParenExpr 0x55a52322bf18 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55a52322bee8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322bc58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55a52322bc30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55a52322bbf8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55a52322bbc8 <col:24> '<bound member function type>' ->shared 0x55a5232115e8
|   |   |       `-ImplicitCastExpr 0x55a52322bc18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55a52322bbb8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55a52322bcb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322bc98 <col:42> 'int' 0
|   |   `-CallExpr 0x55a52322be48 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55a52322be30 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322be10 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322be88 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322bd28 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55a52322bea0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322bd50 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322beb8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322bd88 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55a52322bed0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322bdf8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322bde0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322bda8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55a52322c118 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55a52322bf48 <col:2> 'unsigned char *' lvalue ->_head 0x55a523222300
|   | | `-CXXThisExpr 0x55a52322bf38 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55a52322c100 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55a52322c0e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55a52322bf88 <col:10> 'unsigned char *' lvalue ->_data 0x55a523222368
|   |     | `-CXXThisExpr 0x55a52322bf78 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55a52322c0c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55a52322c0a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55a52322bfc8 <col:18> 'unsigned char *' lvalue ->_tail 0x55a5232223d0
|   |         | `-CXXThisExpr 0x55a52322bfb8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55a52322c090 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55a52322c070 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55a52322c008 <col:26> 'unsigned char *' lvalue ->_end 0x55a523222438
|   |             | `-CXXThisExpr 0x55a52322bff8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55a52322c058 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55a52322c038 <col:33> 'int' 0
|   `-BinaryOperator 0x55a52322c1b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55a52322c148 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55a5232224f8
|     | `-CXXThisExpr 0x55a52322c138 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55a52322c198 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55a52322c178 <col:16> 'int' 0
|-CXXMethodDecl 0x55a5232126b0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a523212620 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523212758 <col:20>
| |-OptimizeNoneAttr 0x55a5232127b0 <col:30>
| `-WarnUnusedResultAttr 0x55a5232127d8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55a5232128a8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a523212818 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523212950 <col:20>
| |-OptimizeNoneAttr 0x55a5232129a8 <col:30>
| `-WarnUnusedResultAttr 0x55a5232129d0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55a523212b08 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a523212a10 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a523212bb0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55a523212cb0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55a523212c20 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523212d58 <col:20>
| `-OptimizeNoneAttr 0x55a523212db0 <col:30>
|-CXXMethodDecl 0x55a523212e78 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55a523212de8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a523212f20 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55a523213020 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55a523212f90 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55a5232130c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55a5232131c8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55a523213138 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523213270 <col:20>
| `-OptimizeNoneAttr 0x55a5232132c8 <col:30>
|-CXXMethodDecl 0x55a523213458 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55a523213308 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55a523213380 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55a52322b9c8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55a523213508 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55a523213708 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a523213580 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55a5232135f8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523213918 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55a5232137c8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a523213840 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523213b28 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55a5232139d8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55a523213a58 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55a52322b9d8 <col:39> 'int' 0
|-CXXMethodDecl 0x55a523213bf8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55a523213cc0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55a523213d88 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a523213e48 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523213f10 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55a523214058 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55a523213fc8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55a523214228 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a523214118 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55a523214190 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a5232142f8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55a5232143b8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55a523214458 <col:20>
| `-OptimizeNoneAttr 0x55a5232144b0 <col:30>
|-CXXMethodDecl 0x55a523214500 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a5232145a0 <col:20>
| `-OptimizeNoneAttr 0x55a5232145f8 <col:30>
|-CXXMethodDecl 0x55a523214648 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a523214708 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a5232147d0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55a523214870 <col:20>
| `-OptimizeNoneAttr 0x55a5232148c8 <col:30>
|-CXXMethodDecl 0x55a523214a18 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55a523214908 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55a523214980 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523214b68 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55a523214ad8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523214c40 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55a523214d00 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55a523214da0 <col:20>
| `-OptimizeNoneAttr 0x55a523214df8 <col:30>
|-CXXMethodDecl 0x55a523214e48 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55a523214ee8 <col:20>
| `-OptimizeNoneAttr 0x55a523214f40 <col:30>
|-CXXMethodDecl 0x55a523214f90 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a523215058 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55a5232150f8 <col:20>
| `-OptimizeNoneAttr 0x55a523215150 <col:30>
|-CXXMethodDecl 0x55a523215198 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55a5232152b8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55a523215428 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55a523215368 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55a523215518 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55a5232155b8 <col:20>
| `-OptimizeNoneAttr 0x55a523215610 <col:30>
|-CXXMethodDecl 0x55a523215660 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55a523215720 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55a523215958 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55a5232157d0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55a523215848 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523215a08 <col:20>
| `-OptimizeNoneAttr 0x55a523215a60 <col:30>
|-CXXMethodDecl 0x55a523215b08 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55a523215ba8 <col:20>
| `-OptimizeNoneAttr 0x55a523215c00 <col:30>
|-CXXMethodDecl 0x55a523215c50 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55a523215cf0 <col:20>
| `-OptimizeNoneAttr 0x55a523215d48 <col:30>
|-CXXMethodDecl 0x55a523215d90 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55a523215e30 <col:20>
| `-OptimizeNoneAttr 0x55a523215e88 <col:30>
|-CXXMethodDecl 0x55a523215f88 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55a523215ec0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55a523216030 <col:20>
| `-OptimizeNoneAttr 0x55a523216088 <col:30>
|-CXXMethodDecl 0x55a523216248 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55a5232160c0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55a523216138 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a5232162f8 <col:20>
| `-OptimizeNoneAttr 0x55a523216350 <col:30>
|-CXXMethodDecl 0x55a5232163f8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55a523216518 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55a523216638 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55a5232166d8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55a523216700 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55a523216828 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55a5232168c8 <col:20>
| `-OptimizeNoneAttr 0x55a523216920 <col:30>
|-CXXMethodDecl 0x55a5232169c8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55a523216a68 <col:20>
| `-OptimizeNoneAttr 0x55a523216ac0 <col:30>
|-AccessSpecDecl 0x55a523216ae8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55a523216b10 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55a523216c10 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55a523216c60 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523216bf0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55a523216bd0 <col:14> 'int' 48
|-CXXMethodDecl 0x55a523216cc8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55a523216d68 <col:20>
| `-OptimizeNoneAttr 0x55a523216dc0 <col:30>
|-CXXMethodDecl 0x55a523216e38 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55a523216ed8 <col:20>
| `-OptimizeNoneAttr 0x55a523216f30 <col:30>
|-CXXMethodDecl 0x55a523216ff8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55a523216f68 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55a523217198 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55a523217338 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55a523217248 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55a5232173e0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55a5232174e0 <line:369:2, col:9> col:2 referenced HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a523217890 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232174c0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55a5232174a0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55a523217570 <line:370:2, col:14> col:2 referenced BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a5232178a8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523217550 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55a523217530 <col:14> 'int' 1
| |-EnumConstantDecl 0x55a523217600 <line:372:2, col:14> col:2 referenced MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a5232178c0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232175e0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55a5232175c0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55a523217690 <line:374:2, col:14> col:2 referenced OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a5232178d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523217670 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55a523217650 <col:14> 'int' 3
| |-EnumConstantDecl 0x55a523217720 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a5232178f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523217700 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55a5232176e0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55a5232177b0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55a523217908 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523217790 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55a523217770 <col:13> 'int' 5
| `-EnumConstantDecl 0x55a523217840 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55a523217920 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523217820 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55a523217800 <col:14> 'int' 6
|-CXXMethodDecl 0x55a523217988 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55a523217a28 <col:20>
| `-OptimizeNoneAttr 0x55a523217a80 <col:30>
|-CXXMethodDecl 0x55a523217b78 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55a523217ab8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55a523217c20 <col:20>
| `-OptimizeNoneAttr 0x55a523217c78 <col:30>
|-CXXMethodDecl 0x55a523217ce8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55a523217e10 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55a523217f88 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55a523217ec0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55a523218050 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55a523218118 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55a523218258 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55a5232181c8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55a523218300 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55a523218400 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a523218600 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a5232183e0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55a5232183c0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55a523218490 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a523218618 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523218470 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55a523218450 <col:45> 'int' 4
| |-EnumConstantDecl 0x55a523218520 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55a523218630 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a523218500 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55a5232184e0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55a5232185b0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55a523218648 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a523218590 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55a523218570 <col:47> 'int' 16
|-CXXMethodDecl 0x55a5232186a8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55a523218818 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55a523218758 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55a5232188c0 <col:20>
| `-OptimizeNoneAttr 0x55a523218918 <col:30>
|-CXXMethodDecl 0x55a523218968 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55a52322c2f0 <col:18, col:36>
|   `-ReturnStmt 0x55a52322c2e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55a52322c2c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a52322c2a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55a52322c278 <col:27> '<bound member function type>' ->xanno 0x55a5232169c8
|           `-CXXThisExpr 0x55a52322c268 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55a523218a60 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55a52322c400 <col:30, col:48>
|   `-ReturnStmt 0x55a52322c3f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55a52322c3d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55a52322c3b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55a52322c388 <col:39> '<bound member function type>' ->xanno 0x55a523216828
|           `-CXXThisExpr 0x55a52322c378 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55a523218b48 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55a52322c598 <col:24, col:50>
|   `-ReturnStmt 0x55a52322c588 <col:26, col:47>
|     `-UnaryOperator 0x55a52322c570 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a52322c550 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a52322c538 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a52322c4e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55a523221808
|         |   `-CXXMemberCallExpr 0x55a52322c4c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a52322c498 <col:34> '<bound member function type>' ->xanno 0x55a5232169c8
|         |       `-CXXThisExpr 0x55a52322c488 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a52322c518 <col:46> 'int' 0
|-CXXMethodDecl 0x55a523218c50 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55a52322c768 <col:36, col:62>
|   `-ReturnStmt 0x55a52322c758 <col:38, col:59>
|     `-UnaryOperator 0x55a52322c740 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a52322c720 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a52322c708 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a52322c680 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55a523221808
|         |   `-CXXMemberCallExpr 0x55a52322c660 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a52322c630 <col:46> '<bound member function type>' ->xanno 0x55a523216828
|         |       `-CXXThisExpr 0x55a52322c620 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a52322c6b0 <col:58> 'int' 0
|-CXXMethodDecl 0x55a523218d68 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55a52322c900 <col:26, col:53>
|   `-ReturnStmt 0x55a52322c8f0 <col:28, col:50>
|     `-UnaryOperator 0x55a52322c8d8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a52322c8b8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a52322c8a0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a52322c850 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55a523221b08
|         |   `-CXXMemberCallExpr 0x55a52322c830 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55a52322c800 <col:36> '<bound member function type>' ->xanno 0x55a5232169c8
|         |       `-CXXThisExpr 0x55a52322c7f0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55a52322c880 <col:49> 'int' 0
|-CXXMethodDecl 0x55a523218e88 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55a52322cad8 <col:38, col:65>
|   `-ReturnStmt 0x55a52322cac8 <col:40, col:62>
|     `-UnaryOperator 0x55a52322cab0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55a52322ca90 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55a52322ca78 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a52322c9e8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55a523221b08
|         |   `-CXXMemberCallExpr 0x55a52322c9c8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a52322c998 <col:48> '<bound member function type>' ->xanno 0x55a523216828
|         |       `-CXXThisExpr 0x55a52322c988 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55a52322ca18 <col:61> 'int' 0
|-CXXMethodDecl 0x55a523219038 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55a523218f40 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55a52322d1a8 <col:34, line:463:5>
|   |-ParenExpr 0x55a52322cff0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a52322cfc0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322cc28 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322cbf8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322cb48 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322cb30 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322caf0 <col:23> 'int' lvalue ParmVar 0x55a523218f40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322cb10 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322cbd8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322cba8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322cb68 <col:33> 'int' lvalue ParmVar 0x55a523218f40 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a52322cbc0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a52322cb88 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a52322cc88 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322cc68 <col:56> 'int' 0
|   |   `-CallExpr 0x55a52322cf20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a52322cf08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322cee8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322cf60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322cd78 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a52322cf78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322cda8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322cf90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322cde0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55a52322cfa8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322ced0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322ceb8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322ce78 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55a52322d198 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55a52322d180 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55a52322d160 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55a52322d130 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55a52322d0e0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55a523221808
|         |   `-CXXMemberCallExpr 0x55a52322d0c0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55a52322d090 <col:9> '<bound member function type>' ->xanno 0x55a523216828
|         |       `-CXXThisExpr 0x55a52322d080 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55a52322d148 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55a52322d110 <col:21> 'int' lvalue ParmVar 0x55a523218f40 'i' 'int'
|-CXXMethodDecl 0x55a523219288 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55a5232190f8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55a523219170 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55a52322d838 <col:40, line:472:5>
|   |-ParenExpr 0x55a52322d650 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55a52322d620 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322d300 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322d2d0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322d220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322d208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322d1c8 <col:23> 'int' lvalue ParmVar 0x55a5232190f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322d1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322d2b0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322d280 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322d240 <col:33> 'int' lvalue ParmVar 0x55a5232190f8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55a52322d298 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55a52322d260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55a52322d360 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322d340 <col:56> 'int' 0
|   |   `-CallExpr 0x55a52322d580 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55a52322d568 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322d548 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322d5c0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322d3d0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55a52322d5d8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322d400 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322d5f0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322d438 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55a52322d608 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322d530 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322d518 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322d4d8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55a52322d818 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55a52322d7c0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55a52322d790 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55a52322d740 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55a523221808
|     | |   `-CXXMemberCallExpr 0x55a52322d720 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55a52322d6f0 <col:2> '<bound member function type>' ->xanno 0x55a5232169c8
|     | |       `-CXXThisExpr 0x55a52322d6e0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55a52322d7a8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55a52322d770 <col:14> 'int' lvalue ParmVar 0x55a5232190f8 'i' 'int'
|     `-ImplicitCastExpr 0x55a52322d800 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55a52322d7e0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55a523219170 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55a523219448 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55a523219350 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a52322dfb8 <col:36, line:485:5>
|   |-ParenExpr 0x55a52322dd20 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a52322dcf0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322d9d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322d9a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322d8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322d898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322d858 <col:23> 'int' lvalue ParmVar 0x55a523219350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322d878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322d980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322d968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322d8d0 <col:33> 'int' lvalue ParmVar 0x55a523219350 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322d948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322d930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322d8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322d910 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a52322da30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322da10 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322dc50 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322dc38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322dc18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322dc90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322daa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a52322dca8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322dad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322dcc0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322db10 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55a52322dcd8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322dc00 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322dbe8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322dba8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55a52322dfa8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55a52322df90 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55a52322df78 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a52322df48 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55a52322dee8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a52322deb8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a52322de30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a52322de10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a52322dde0 <col:61> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a52322ddd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a52322ded0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a52322de60 <col:74> 'int' lvalue ParmVar 0x55a523219350 'i' 'int'
|-CXXMethodDecl 0x55a523219698 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55a523219508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a523219580 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55a52322e708 <col:42, line:500:5>
|   |-ParenExpr 0x55a52322e4a0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a52322e470 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322e150 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322e120 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322e030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322e018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322dfd8 <col:23> 'int' lvalue ParmVar 0x55a523219508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322dff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322e100 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322e0e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322e050 <col:33> 'int' lvalue ParmVar 0x55a523219508 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322e0c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322e0b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322e070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322e090 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a52322e1b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322e190 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322e3d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322e3b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322e398 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322e410 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322e220 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a52322e428 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322e258 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322e440 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322e290 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55a52322e458 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322e380 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322e368 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322e328 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55a52322e6e8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55a52322e698 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a52322e668 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a52322e610 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a52322e5e0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a52322e590 <col:48, col:57> 'char [48]' lvalue ->c 0x55a5232216e0
|     |     |   `-CXXMemberCallExpr 0x55a52322e570 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a52322e540 <col:48> '<bound member function type>' ->xanno 0x55a5232169c8
|     |     |       `-CXXThisExpr 0x55a52322e530 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a52322e5f8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a52322e5c0 <col:61> 'int' lvalue ParmVar 0x55a523219508 'i' 'int'
|     `-ImplicitCastExpr 0x55a52322e6d0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55a52322e6b0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55a523219580 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55a523219858 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55a523219760 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a52322ee68 <col:35, line:513:5>
|   |-ParenExpr 0x55a52322eb78 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a52322eb48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322e8a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322e870 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322e780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322e768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322e728 <col:23> 'int' lvalue ParmVar 0x55a523219760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322e748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322e850 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322e838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322e7a0 <col:33> 'int' lvalue ParmVar 0x55a523219760 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322e818 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322e800 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322e7c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322e7e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a52322e900 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322e8e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322eaa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322ea90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322ea70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322eae8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322e970 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a52322eb00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322e9a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322eb18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322e9e0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55a52322eb30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322ea58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322ea40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322ea00 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55a52322ee58 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55a52322ee40 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55a52322ee28 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a52322edf8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55a52322ed70 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a52322ed40 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a52322ecf0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a52322ecd0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a52322eca0 <col:60> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a52322ec90 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a52322ed58 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a52322ed20 <col:73> 'int' lvalue ParmVar 0x55a523219760 'i' 'int'
|-CXXMethodDecl 0x55a523219aa8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55a523219918 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a523219990 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55a52322f588 <col:41, line:528:5>
|   |-ParenExpr 0x55a52322f310 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a52322f2e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322f000 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322efd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322eee0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322eec8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322ee88 <col:23> 'int' lvalue ParmVar 0x55a523219918 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322eea8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322efb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322ef98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322ef00 <col:33> 'int' lvalue ParmVar 0x55a523219918 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322ef78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322ef60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322ef20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322ef40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55a52322f060 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322f040 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322f240 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322f228 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322f208 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322f280 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322f0d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55a52322f298 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322f108 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322f2b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322f140 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55a52322f2c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322f1f0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322f1d8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322f198 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55a52322f568 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55a52322f518 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a52322f4e8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55a52322f490 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a52322f450 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a52322f400 <col:47, col:56> 'char [48]' lvalue ->c 0x55a5232216e0
|     |     |   `-CXXMemberCallExpr 0x55a52322f3e0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a52322f3b0 <col:47> '<bound member function type>' ->xanno 0x55a5232169c8
|     |     |       `-CXXThisExpr 0x55a52322f3a0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a52322f468 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a52322f430 <col:60> 'int' lvalue ParmVar 0x55a523219918 'i' 'int'
|     `-ImplicitCastExpr 0x55a52322f550 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55a52322f530 <col:65> 'int16_t':'short' lvalue ParmVar 0x55a523219990 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55a523219c68 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55a523219b70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a52322fc58 <col:36, line:541:5>
|   |-ParenExpr 0x55a52322f9f8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a52322f9c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322f720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322f6f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322f600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322f5e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322f5a8 <col:23> 'int' lvalue ParmVar 0x55a523219b70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322f5c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322f6d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322f6b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322f620 <col:33> 'int' lvalue ParmVar 0x55a523219b70 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322f698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322f680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322f640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322f660 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a52322f780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322f760 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322f928 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322f910 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322f8f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a52322f968 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322f7f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a52322f980 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322f828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a52322f998 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322f860 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55a52322f9b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322f8d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322f8c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322f880 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55a52322fc48 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55a52322fc30 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55a52322fc18 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a52322fbe8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55a52322fb90 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a52322fb60 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a52322fb10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a52322faf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a52322fac0 <col:61> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a52322fab0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a52322fb78 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a52322fb40 <col:74> 'int' lvalue ParmVar 0x55a523219b70 'i' 'int'
|-CXXMethodDecl 0x55a523219e38 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55a523219d28 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55a523219da0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55a523219ee8 <col:20>
| `-OptimizeNoneAttr 0x55a523219f40 <col:30>
|-CXXMethodDecl 0x55a52321a078 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55a523219f80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55a523230328 <col:35, line:562:5>
|   |-ParenExpr 0x55a5232300c8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a523230098 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a52322fdf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a52322fdc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a52322fcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a52322fcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a52322fc78 <col:23> 'int' lvalue ParmVar 0x55a523219f80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a52322fc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a52322fda0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a52322fd88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a52322fcf0 <col:33> 'int' lvalue ParmVar 0x55a523219f80 'i' 'int'
|   |   |     `-BinaryOperator 0x55a52322fd68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a52322fd50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a52322fd10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a52322fd30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a52322fe50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a52322fe30 <col:60> 'int' 0
|   |   `-CallExpr 0x55a52322fff8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a52322ffe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a52322ffc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523230038 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322fec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a523230050 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a52322fef8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523230068 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a52322ff30 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55a523230080 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a52322ffa8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a52322ff90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a52322ff50 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55a523230318 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55a523230300 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55a5232302e8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a5232302b8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55a523230260 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a523230230 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a5232301e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a5232301c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a523230190 <col:60> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a523230180 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a523230248 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a523230210 <col:73> 'int' lvalue ParmVar 0x55a523219f80 'i' 'int'
|-CXXMethodDecl 0x55a52321a288 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55a52321a138 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a52321a1b0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55a523230a08 <col:41, line:577:5>
|   |-ParenExpr 0x55a523230798 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a523230768 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a5232304c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a523230490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a5232303a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a523230388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a523230348 <col:23> 'int' lvalue ParmVar 0x55a52321a138 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a523230368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a523230470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a523230458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a5232303c0 <col:33> 'int' lvalue ParmVar 0x55a52321a138 'i' 'int'
|   |   |     `-BinaryOperator 0x55a523230438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a523230420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a5232303e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a523230400 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55a523230520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a523230500 <col:60> 'int' 0
|   |   `-CallExpr 0x55a5232306c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a5232306b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a523230690 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523230708 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523230590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55a523230720 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a5232305c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523230738 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a523230600 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55a523230750 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a523230678 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a523230660 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a523230620 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55a5232309e8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55a523230998 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a523230968 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55a523230908 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a5232308d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a523230888 <col:47, col:56> 'char [48]' lvalue ->c 0x55a5232216e0
|     |     |   `-CXXMemberCallExpr 0x55a523230868 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a523230838 <col:47> '<bound member function type>' ->xanno 0x55a5232169c8
|     |     |       `-CXXThisExpr 0x55a523230828 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a5232308f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a5232308b8 <col:60> 'int' lvalue ParmVar 0x55a52321a138 'i' 'int'
|     `-ImplicitCastExpr 0x55a5232309d0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55a5232309b0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55a52321a1b0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55a52321a448 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55a52321a350 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55a523231138 <col:36, line:591:5>
|   |-ParenExpr 0x55a523230e78 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a523230e48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a523230ba0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a523230b70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a523230a80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a523230a68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a523230a28 <col:23> 'int' lvalue ParmVar 0x55a52321a350 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a523230a48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a523230b50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a523230b38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a523230aa0 <col:33> 'int' lvalue ParmVar 0x55a52321a350 'i' 'int'
|   |   |     `-BinaryOperator 0x55a523230b18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a523230b00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a523230ac0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a523230ae0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a523230c00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a523230be0 <col:60> 'int' 0
|   |   `-CallExpr 0x55a523230da8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a523230d90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a523230d70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523230de8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523230c70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a523230e00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523230ca8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523230e18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a523230ce0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55a523230e30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a523230d58 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a523230d40 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a523230d00 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55a523231128 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55a523231110 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55a5232310f8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a5232310c8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55a523231040 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a523231010 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a523230fc0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a523230fa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a523230f70 <col:61> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a523230f60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a523231028 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a523230ff0 <col:74> 'int' lvalue ParmVar 0x55a52321a350 'i' 'int'
|-CXXMethodDecl 0x55a52321a698 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55a52321a508 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a52321a580 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55a523231818 <col:42, line:606:5>
|   |-ParenExpr 0x55a5232315a8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55a523231578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55a5232312d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a5232312a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a5232311b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a523231198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a523231158 <col:23> 'int' lvalue ParmVar 0x55a52321a508 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a523231178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a523231280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55a523231268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a5232311d0 <col:33> 'int' lvalue ParmVar 0x55a52321a508 'i' 'int'
|   |   |     `-BinaryOperator 0x55a523231248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a523231230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a5232311f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55a523231210 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55a523231330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a523231310 <col:60> 'int' 0
|   |   `-CallExpr 0x55a5232314d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55a5232314c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a5232314a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523231518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a5232313a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55a523231530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a5232313d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523231548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a523231410 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55a523231560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a523231488 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a523231470 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a523231430 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55a5232317f8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55a5232317a8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a523231778 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55a523231718 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a5232316e8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a523231698 <col:48, col:57> 'char [48]' lvalue ->c 0x55a5232216e0
|     |     |   `-CXXMemberCallExpr 0x55a523231678 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a523231648 <col:48> '<bound member function type>' ->xanno 0x55a5232169c8
|     |     |       `-CXXThisExpr 0x55a523231638 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a523231700 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a5232316c8 <col:61> 'int' lvalue ParmVar 0x55a52321a508 'i' 'int'
|     `-ImplicitCastExpr 0x55a5232317e0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55a5232317c0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55a52321a580 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55a52321a830 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55a52321a760 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55a523232088 <col:33, line:620:5>
|   |-ParenExpr 0x55a523231e00 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a523231dd0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a523231a20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a5232319f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a523231890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a523231878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a523231838 <col:23> 'int' lvalue ParmVar 0x55a52321a760 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a523231858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a5232319d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a5232319b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a5232318b0 <col:33> 'int' lvalue ParmVar 0x55a52321a760 'i' 'int'
|   |   |     `-BinaryOperator 0x55a523231998 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a523231980 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a5232318d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a523231958 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a523231940 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a523231908 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a523231a80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a523231a60 <col:79> 'int' 0
|   |   `-CallExpr 0x55a523231d30 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a523231d18 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a523231cf8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523231d70 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523231b68 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a523231d88 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523231bb0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523231da0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a523231be8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55a523231db8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a523231ce0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a523231cc8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a523231c88 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55a523232078 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55a523232060 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55a523232048 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55a523232018 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55a523231f90 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55a523231f60 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55a523231f10 <col:67, col:76> 'char const[48]' lvalue ->c 0x55a5232216e0
|             |   `-CXXMemberCallExpr 0x55a523231ef0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55a523231ec0 <col:67> '<bound member function type>' ->xanno 0x55a523216828
|             |       `-CXXThisExpr 0x55a523231eb0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55a523231f78 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55a523231f40 <col:80> 'int' lvalue ParmVar 0x55a52321a760 'i' 'int'
|-CXXMethodDecl 0x55a52321aa48 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55a52321a8f0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55a52321a970 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55a5232328b0 <col:45, line:635:5>
|   |-ParenExpr 0x55a5232325f8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55a5232325c8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55a523232290 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55a523232260 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55a523232100 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55a5232320e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55a5232320a8 <col:23> 'int' lvalue ParmVar 0x55a52321a8f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55a5232320c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55a523232240 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55a523232228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55a523232120 <col:33> 'int' lvalue ParmVar 0x55a52321a8f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55a523232208 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55a5232321f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55a523232140 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55a523216c10 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55a5232321c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55a5232321b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55a523232178 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55a5232322f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55a5232322d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55a523232528 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55a523232510 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55a5232324f0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55a522d83540 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55a523232568 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a523232360 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55a523232580 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55a5232323a8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55a523232598 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55a5232323e0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55a5232325b0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55a5232324d8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55a5232324c0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55a523232478 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55a523232890 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55a5232327f8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55a5232327c8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55a523232768 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55a523232738 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55a5232326e8 <col:54, col:63> 'char [48]' lvalue ->c 0x55a5232216e0
|     |     |   `-CXXMemberCallExpr 0x55a5232326c8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55a523232698 <col:54> '<bound member function type>' ->xanno 0x55a5232169c8
|     |     |       `-CXXThisExpr 0x55a523232688 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55a523232750 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55a523232718 <col:67> 'int' lvalue ParmVar 0x55a52321a8f0 'i' 'int'
|     `-CXXConstCastExpr 0x55a523232860 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55a523232848 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55a523232810 <col:91> 'const void *' lvalue ParmVar 0x55a52321a970 'x' 'const void *'
|-CXXMethodDecl 0x55a52321ab18 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55a523232938 <col:34, line:640:5>
|   `-ReturnStmt 0x55a523232928 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55a523232910 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55a5232328e0 <col:16> 'Packet *' lvalue ->_data_packet 0x55a523222298
|         `-CXXThisExpr 0x55a5232328d0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55a52321ac58 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55a52321abc8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55a52322b9f8 <col:46> 'bool' true
|-CXXMethodDecl 0x55a52321add8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55a52321ad10 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55a52321ae80 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55a52321b630 <line:660:22> "" ""
| |-EnumConstantDecl 0x55a52321af80 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b6a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321af60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55a52321af40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a5232100e0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a52321b010 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b6b8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321aff0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55a52321afd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55a523210170 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55a52321b0a0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b6d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b080 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a52321b060 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a52321b130 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b6e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b110 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55a52321b0f0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55a52321b1c0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b700 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b1a0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55a52321b180 <col:21> 'int' 16
| |-EnumConstantDecl 0x55a52321b250 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b718 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b230 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55a52321b210 <col:19> 'int' 32
| |-EnumConstantDecl 0x55a52321b2e0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b730 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b2c0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55a52321b2a0 <col:19> 'int' EnumConstant 0x55a52321b130 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a52321b370 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b748 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b350 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55a52321b330 <col:19> 'int' EnumConstant 0x55a52321b250 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55a52321b440 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b760 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b420 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55a52321b400 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a52321b3c0 <col:23> 'int' EnumConstant 0x55a52321b370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a52321b3e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55a52321b510 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55a52321b778 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52321b4f0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55a52321b4d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55a52321b490 <col:23> 'int' EnumConstant 0x55a52321b370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55a52321b4b0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55a52321b5e0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55a52321b790 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55a52321b5c0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55a52321b5a0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55a52321b560 <col:23> 'int' EnumConstant 0x55a52321b370 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55a52321b580 <col:40> 'int' 8
|-CXXMethodDecl 0x55a52321b7d0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55a52321b870 <col:68> "" ""
|-CXXMethodDecl 0x55a52321b908 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55a52321b9a8 <col:45> "" ""
|-CXXMethodDecl 0x55a52321ba40 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a52321bae0 <col:57> "" ""
|-CXXMethodDecl 0x55a52321bb78 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55a52321bc18 <col:45> "" ""
|-CXXMethodDecl 0x55a52321bcb0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55a52321bd50 <col:57> "" ""
|-CXXMethodDecl 0x55a52321bde0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a52321be80 <col:51> "" ""
|-CXXMethodDecl 0x55a52321bf10 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a52321bfb0 <col:63> "" ""
|-CXXMethodDecl 0x55a52321c040 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a52321c0e0 <col:53> "" ""
|-CXXMethodDecl 0x55a52321c170 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a52321c210 <col:65> "" ""
|-CXXMethodDecl 0x55a52321c328 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a52321c298 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55a52321c3d0 <col:61> "" ""
|-CXXMethodDecl 0x55a52321c568 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a52321c458 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55a52321c4d0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a52321c618 <col:67> "" ""
|-CXXMethodDecl 0x55a52321c730 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a52321c6a0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a52321c7d8 <col:63> "" ""
|-CXXMethodDecl 0x55a52321c970 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a52321c860 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a52321c8d8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a52321ca20 <col:69> "" ""
|-CXXMethodDecl 0x55a52321cb38 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a52321caa8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a52321cbe0 <col:63> "" ""
|-CXXMethodDecl 0x55a52321f2b8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a52321f1a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a52321f220 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a52321f368 <col:69> "" ""
|-CXXMethodDecl 0x55a52321f480 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a52321f3f0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55a52321f528 <col:62> "" ""
|-CXXMethodDecl 0x55a52321f6c0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a52321f5b0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a52321f628 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55a52321f770 <col:68> "" ""
|-CXXMethodDecl 0x55a52321f888 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55a52321f7f8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55a52321f930 <col:63> "" ""
|-CXXMethodDecl 0x55a52321fac8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55a52321f9b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55a52321fa30 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55a52321fb78 <col:69> "" ""
|-CXXMethodDecl 0x55a52321fc08 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55a52321fca8 <col:64> "" ""
|-CXXMethodDecl 0x55a52321fd38 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55a52321fdd8 <col:52> "" ""
|-CXXMethodDecl 0x55a52321fe68 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55a52321ff08 <col:67> "" ""
|-CXXMethodDecl 0x55a52321ff98 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55a523220038 <col:55> "" ""
|-CXXMethodDecl 0x55a523220150 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55a5232200c0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a5232201f8 <col:58> "" ""
|-CXXMethodDecl 0x55a523220390 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55a523220280 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a5232202f8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55a523220440 <col:62> "" ""
|-CXXMethodDecl 0x55a523220558 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55a5232204c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a523220600 <col:58> "" ""
|-CXXMethodDecl 0x55a523220798 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55a523220688 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a523220700 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55a523220848 <col:62> "" ""
|-CXXMethodDecl 0x55a523220960 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55a5232208d0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55a523220a08 <col:60> "" ""
|-CXXMethodDecl 0x55a523220ba0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55a523220a90 <col:34> col:37 'int'
| |-ParmVarDecl 0x55a523220b08 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55a523220c50 <col:64> "" ""
|-CXXMethodDecl 0x55a523220d68 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55a523220cd8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55a523220e10 <col:58> "" ""
|-CXXMethodDecl 0x55a523220fa8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55a523220e98 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a523220f10 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55a523221058 <col:62> "" ""
|-CXXMethodDecl 0x55a523221170 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55a5232210e0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55a523221218 <col:59> "" ""
|-CXXMethodDecl 0x55a5232213b0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55a5232212a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55a523221318 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55a523221460 <col:63> "" ""
|-AccessSpecDecl 0x55a5232214d0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55a5232214f8 prev 0x55a523216700 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a5232215f0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55a5232216e0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55a523221808 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55a523221988 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55a523221b08 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55a523221c88 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55a523232ab8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55a523233328 <col:11>
| |-CXXDestructorDecl 0x55a523232b90 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55a523232cc8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55a523232cc8
| | `-ParmVarDecl 0x55a523232dd8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55a523232e78 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a523232e78
| | `-ParmVarDecl 0x55a523232f88 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55a523235d48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55a523235e58 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55a5232360d8 <col:11>
| |   `-ReturnStmt 0x55a5232360c8 <col:11>
| |     `-UnaryOperator 0x55a5232360b0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55a5232360a0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55a523235ec8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55a523235ec8
|   `-ParmVarDecl 0x55a523235fd8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55a523221cf0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55a523221e08 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55a523221ea8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55a523221f10 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55a523221f78 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55a523221fe0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55a523222040 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55a523222100 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55a523222160 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55a5232221c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55a5232329c8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55a523221ea8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55a523233338 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55a523233390 <col:12>
| |-CXXConstructorDecl 0x55a523232ff8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55a523232ff8
| | `-ParmVarDecl 0x55a523233108 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55a5232331a8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55a5232331a8
| | `-ParmVarDecl 0x55a5232332b8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55a523235430 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55a523222238 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55a523222298 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55a523222300 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55a523222368 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55a5232223d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55a523222438 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55a523222498 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55a5232224f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55a523222560 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55a5232225e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55a523222238 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55a523232960 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a523222498 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55a5232333a0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55a523233400 <col:21, line:755:5>
|-CXXConstructorDecl 0x55a523222788 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55a5232226c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55a523222880 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55a523222a68 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55a523222970 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55a523222d38 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55a523222b20 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55a523222b98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55a523222c10 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a523222f58 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55a523222e08 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55a523222e80 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55a52322b538 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55a523223018 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55a523223090 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55a523223108 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55a52322b690 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a52322b600 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55a52322b7d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55a52322b748 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55a52322b8d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523334c48 prev 0x55a52320f8b0 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55a523335008 <line:21:18>
|-CXXRecordDecl 0x55a523334d40 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55a523334ea8 <line:18:5, col:26> col:13 referenced ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55a523334f58 <line:19:5, col:26> col:13 referenced ether_shost 'uint8_t [6]'
`-FieldDecl 0x55a523334fb8 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a523266da8 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a523266ec8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x55a523266f58 <col:25, col:31> col:25 public
|-TypedefDecl 0x55a523266f90 <line:206:5, col:18> col:18 referenced enable_direct_parse 'void'
| `-BuiltinType 0x55a522ce7310 'void'
|-CXXConstructorDecl 0x55a5232670d8 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x55a523267000 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x55a523268360 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x55a523267c90 'flags_' 'int'
| | `-ImplicitCastExpr 0x55a523268400 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a5232683c0 <col:45> 'int' lvalue ParmVar 0x55a523267000 'flags' 'int'
| `-CompoundStmt 0x55a523268448 <col:52, col:53>
|-CXXMethodDecl 0x55a523267398 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x55a523267198 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a523267238 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x55a5232672b0 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a523268380 <col:88> 'const ArgContext' lvalue Var 0x55a523266d40 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a5231c80d8 <col:100, line:210:5>
|   `-ReturnStmt 0x55a5231c80c8 <line:209:9, col:46>
|     `-CallExpr 0x55a5231c8070 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x55a5231c8058 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a5231c8010 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x55a523267f58 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x55a5232684c0 <col:22> 'const String' lvalue ParmVar 0x55a523267198 'str' 'const String &'
|       |-DeclRefExpr 0x55a5232684e0 <col:27> 'EtherAddress' lvalue ParmVar 0x55a523267238 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55a523268500 <col:34> 'const ArgContext' lvalue ParmVar 0x55a5232672b0 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x55a5231c80b0 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x55a523268530 <col:40> 'int' lvalue ->flags_ 0x55a523267c90
|           `-CXXThisExpr 0x55a523268520 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55a523267638 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x55a523267460 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55a5232674e0 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x55a523267558 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55a5232683a0 <col:89> 'const ArgContext' lvalue Var 0x55a523266d40 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55a5231c82b0 <col:101, line:213:5>
|   `-ReturnStmt 0x55a5231c82a0 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x55a5231c8268 <col:9, col:66> 'bool'
|       |-MemberExpr 0x55a5231c8238 <col:9> '<bound member function type>' ->parse 0x55a523267398
|       | `-CXXThisExpr 0x55a5231c8228 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55a5231c8158 <col:15> 'const String' lvalue ParmVar 0x55a523267460 'str' 'const String &'
|       |-UnaryOperator 0x55a5231c81f0 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55a5231c81c0 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55a5231c81a8 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55a5231c8178 <col:54> 'unsigned char *' lvalue ParmVar 0x55a5232674e0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55a5231c8208 <col:62> 'const ArgContext' lvalue ParmVar 0x55a523267558 'args' 'const ArgContext &'
|-CXXMethodDecl 0x55a5232678f8 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x55a523267700 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55a523267778 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x55a523267818 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x55a5231c8498 <col:82, line:216:5>
|   `-ReturnStmt 0x55a5231c8488 <line:215:9, col:53>
|     `-CallExpr 0x55a5231c8430 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x55a5231c8418 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55a5231c83d0 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x55a523268288 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x55a5231c8330 <col:29> 'const String' lvalue ParmVar 0x55a523267700 'str' 'const String &'
|       |-DeclRefExpr 0x55a5231c8350 <col:34> 'EtherAddress' lvalue ParmVar 0x55a523267778 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x55a5231c8370 <col:41> 'Args' lvalue ParmVar 0x55a523267818 'args' 'Args &'
|       `-ImplicitCastExpr 0x55a5231c8470 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x55a5231c83a0 <col:47> 'int' lvalue ->flags_ 0x55a523267c90
|           `-CXXThisExpr 0x55a5231c8390 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x55a523267b98 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x55a5232679c0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x55a523267a40 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x55a523267ab8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x55a5231c8670 <col:83, line:219:5>
|   `-ReturnStmt 0x55a5231c8660 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x55a5231c8628 <col:9, col:73> 'bool'
|       |-MemberExpr 0x55a5231c85f8 <col:9> '<bound member function type>' ->direct_parse 0x55a5232678f8
|       | `-CXXThisExpr 0x55a5231c85e8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x55a5231c8518 <col:22> 'const String' lvalue ParmVar 0x55a5232679c0 'str' 'const String &'
|       |-UnaryOperator 0x55a5231c85b0 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x55a5231c8580 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x55a5231c8568 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x55a5231c8538 <col:61> 'unsigned char *' lvalue ParmVar 0x55a523267a40 'value' 'unsigned char *'
|       `-DeclRefExpr 0x55a5231c85c8 <col:69> 'Args' lvalue ParmVar 0x55a523267ab8 'args' 'Args &'
|-AccessSpecDecl 0x55a523267c50 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55a523267c90 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x55a523267f58 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x55a523267cf0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a523267d68 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x55a523267de0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x55a523267e60 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x55a523268288 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x55a523268028 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x55a5232680a0 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x55a523268118 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x55a523268198 <col:82, col:86> col:86 flags 'int'
|-CXXDestructorDecl 0x55a52337dd30 <line:205:7> col:7 implicit ~EtherAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a52337de68 <col:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x55a52337de68
| `-ParmVarDecl 0x55a52337df78 <col:7> col:7 'const EtherAddressArg &'
`-CXXConstructorDecl 0x55a52337e018 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a52337e128 <col:7> col:7 used 'EtherAddressArg &&'
  |-CXXCtorInitializer Field 0x55a523267c90 'flags_' 'int'
  | `-ImplicitCastExpr 0x55a52337ef08 <col:7> 'int' <LValueToRValue>
  |   `-MemberExpr 0x55a52337eec0 <col:7> 'int' xvalue .flags_ 0x55a523267c90
  |     `-CXXStaticCastExpr 0x55a52337ee90 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
  |       `-DeclRefExpr 0x55a52337ee60 <col:7> 'EtherAddressArg' lvalue ParmVar 0x55a52337e128 '' 'EtherAddressArg &&'
  `-CompoundStmt 0x55a52337ef50 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a5231c86b0 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x55a5231c8908 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a52337dc48 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55a52337e530 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55a52337e510 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55a52337e5a0 <col:19>
|-CXXConstructorDecl 0x55a52337e198 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x55a52337e198
| `-ParmVarDecl 0x55a52337e2a8 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x55a52337e348 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a52337e458 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x55a52337ef60 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a52337ee40 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x55a52337ee10 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x55a52337ede0 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x55a52337e458 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x55a52337efd0 <col:19>
`-CXXDestructorDecl 0x55a52337e5e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52331c870 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a52331c988 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55a52331ca18 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55a52331cc58 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55a52331ca50 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55a52331cad0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55a52331cb48 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55a52331ce70 <col:81> 'const ArgContext' lvalue Var 0x55a523304b28 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55a52331cdb0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55a52331cd20 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55a52331cfc8 <col:35, line:1261:5>
|   `-ReturnStmt 0x55a52331cfb8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55a52331cfa0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55a52331cf70 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55a52331cf58 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55a52331cf30 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55a52331cf10 <col:16, col:24> 'String' (CXXTemporary 0x55a52331cf10)
|               `-CXXConstructExpr 0x55a52331ced8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55a52331cec0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55a52331cea0 <col:23> 'bool' lvalue ParmVar 0x55a52331cd20 'x' 'bool'
|-CXXConstructorDecl 0x55a523383f88 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55a523384060 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a523384198 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55a523384198
| `-ParmVarDecl 0x55a5233842a8 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x55a523384348 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55a523384458 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x55a5233850b0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a52331d008 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55a52331d268 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a523383e98 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55a5233844c8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55a5233844c8
| `-ParmVarDecl 0x55a5233845d8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55a523384678 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523384788 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55a5233850c0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a523385090 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55a523385060 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55a523385030 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55a523384788 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55a523385130 <col:19>
`-CXXDestructorDecl 0x55a523384828 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52330ec50 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55a52330ed68 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55a52330edf8 <col:16, col:22> col:16 public
|-EnumDecl 0x55a52330ee20 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55a52330ef20 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a52330f170 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52330ef00 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55a52330eee0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55a52330efb0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a52330f188 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52330ef90 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55a52330ef70 <col:24> 'int' 22
| |-EnumConstantDecl 0x55a52330f040 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a52330f1a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52330f020 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55a52330f000 <col:24> 'int' 34
| |-EnumConstantDecl 0x55a52330f0d0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55a52330f1b8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55a52330f0b0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55a52330f090 <col:25> 'int' 95
| `-EnumConstantDecl 0x55a52330f120 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55a523310b30 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55a523310f68 <col:7>
|-CXXConstructorDecl 0x55a523310c38 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55a523310c38
| `-ParmVarDecl 0x55a523310d48 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55a523310de8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523310ef8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55a52338fc70 <col:7>
`-CXXDestructorDecl 0x55a523313078 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55a52330f1e8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55a52330f348 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55a52330f3d8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55a52330f410 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55a522e3ca30 'uint32_t' sugar
|   |-Typedef 0x55a522d503d8 'uint32_t'
|   `-TypedefType 0x55a522d29480 '__uint32_t' sugar
|     |-Typedef 0x55a522d29078 '__uint32_t'
|     `-BuiltinType 0x55a522ce7450 'unsigned int'
|-CXXConstructorDecl 0x55a52330f558 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55a52330f480 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55a523310a38 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a523310f78 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55a5233102f0 'base' 'int'
| | `-ImplicitCastExpr 0x55a523310ad8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55a523310a98 <col:16> 'int' lvalue ParmVar 0x55a52330f480 'b' 'int'
| `-CompoundStmt 0x55a523310fe8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55a52330fa50 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55a52330f620 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55a52330f6a0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55a52330f718 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55a52330f798 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55a52330f858 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55a52330f8d8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55a52330fea8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55a52330fb20 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a52330fe08 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a52330fbc8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55a52330fc68 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55a52330fce0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a523310a58 <col:82> 'const ArgContext' lvalue Var 0x55a523304b28 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a523311f18 <col:94, line:1067:5>
| |   |-DeclStmt 0x55a523311178 <line:1054:9, col:64>
| |   | `-VarDecl 0x55a523311008 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55a523311130 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55a523311398 <line:1055:9, col:91>
| |   | `-VarDecl 0x55a5233111a8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55a523311370 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55a523311350 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55a523311300 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55a5233112e0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55a523311288 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55a523311238 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55a523311268 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55a5233112c8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55a5233112a8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55a523311330 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55a5233114f8 <line:1056:9, col:27>
| |   | `-VarDecl 0x55a523311490 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55a523311948 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55a523311878 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55a5233117f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55a523266610 0x55a523206a18 0x55a52304fff8 0x55a52304fcd0 0x55a5230414b0 0x55a523041160 0x55a523040a50 0x55a5230133c0 0x55a522f9f880
| |   | | |-CallExpr 0x55a523311730 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55a523311520 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55a5233115d0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a5233115a0 <col:19, col:23> '<bound member function type>' .begin 0x55a5230306b8
| |   | | | |   `-DeclRefExpr 0x55a523311580 <col:19> 'const String' lvalue ParmVar 0x55a52330fbc8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55a523311640 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55a523311610 <col:32, col:36> '<bound member function type>' .end 0x55a5230308d0
| |   | | | |   `-DeclRefExpr 0x55a5233115f0 <col:32> 'const String' lvalue ParmVar 0x55a52330fbc8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55a523311660 <col:43> 'const bool' lvalue Var 0x55a523311008 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55a5233116c8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55a5233116a8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55a5233116f0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a523311490 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55a523311710 <col:73> 'const int' lvalue Var 0x55a5233111a8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55a5233117d0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55a5233117a0 <col:16, col:20> '<bound member function type>' .end 0x55a5230308d0
| |   | |     `-DeclRefExpr 0x55a523311780 <col:16> 'const String' lvalue ParmVar 0x55a52330fbc8 'str' 'const String &'
| |   | `-BinaryOperator 0x55a523311928 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55a5233118c0 <col:13> 'int' lvalue ->status 0x55a523310358
| |   |   | `-CXXThisExpr 0x55a5233118b0 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55a523311910 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55a5233118f0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330efb0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55a523311b98 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55a523311a80 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55a523311a68 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55a523311a50 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55a523311970 <col:13> 'int' lvalue ->status 0x55a523310358
| |   | | |     `-CXXThisExpr 0x55a523311960 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55a523311a30 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55a523311a00 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55a5233119b0 <col:23> 'int' lvalue ->status 0x55a523310358
| |   | |   |   `-CXXThisExpr 0x55a5233119a0 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55a523311a18 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55a5233119e0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55a523311b78 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55a523311b18 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55a523311ac0 <col:13, col:18> '<bound member function type>' .error 0x55a5232b7fe0
| |   |   | | `-DeclRefExpr 0x55a523311aa0 <col:13> 'const ArgContext' lvalue ParmVar 0x55a52330fce0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55a523311b40 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55a523311af0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55a523311b68 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55a523311b58 <col:20> 'bool' false
| |   |-DeclStmt 0x55a523311d68 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55a523311d10 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55a523311ca0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55a523311ec8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55a523311d80 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55a522fd3848
| |   | |-DeclRefExpr 0x55a523311dc8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55a523311490 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55a523311e98 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55a523311e10 <col:64> 'V' lvalue ParmVar 0x55a52330fc68 'result' 'V &'
| |   `-ReturnStmt 0x55a523311f08 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55a523311ef8 <col:16> 'bool' true
| `-CXXMethodDecl 0x55a5233978b8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a523397690 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55a523397768 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a5233977d0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55a523399650 <col:94, line:1067:5>
|     |-DeclStmt 0x55a5233980c8 <line:1054:9, col:64>
|     | `-VarDecl 0x55a523397ee8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55a523398058 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55a523398028 <col:36, col:55> 'const bool' lvalue Var 0x55a522fc2a60 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55a5233982a8 <line:1055:9, col:91>
|     | `-VarDecl 0x55a5233980e0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55a523398228 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55a523398210 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55a5233981f0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55a5233981d0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55a5233981b0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55a523398178 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55a523398158 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55a523311268 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55a523398198 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55a5233112a8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55a523311330 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55a523398440 <line:1056:9, col:27>
|     | `-VarDecl 0x55a5233983d8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55a5233988d0 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55a523398878 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55a523398730 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55a523398700 <col:13> '<bound member function type>' ->parse 0x55a52330fa50
|     | | | | `-CXXThisExpr 0x55a5233986f0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55a523398590 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a523398560 <col:19, col:23> '<bound member function type>' .begin 0x55a5230306b8
|     | | | |   `-DeclRefExpr 0x55a523398540 <col:19> 'const String' lvalue ParmVar 0x55a523397690 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55a523398600 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55a5233985d0 <col:32, col:36> '<bound member function type>' .end 0x55a5230308d0
|     | | | |   `-DeclRefExpr 0x55a5233985b0 <col:32> 'const String' lvalue ParmVar 0x55a523397690 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55a5233987a0 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55a523398780 <col:43> 'const bool' lvalue Var 0x55a523397ee8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55a523398688 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55a523398670 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55a523398650 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55a5233987b8 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55a5233986b0 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55a5233983d8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55a5233987f0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55a5233987d0 <col:73> 'const int' lvalue Var 0x55a5233980e0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55a523398858 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55a523398828 <col:16, col:20> '<bound member function type>' .end 0x55a5230308d0
|     | |     `-DeclRefExpr 0x55a523398808 <col:16> 'const String' lvalue ParmVar 0x55a523397690 'str' 'const String &'
|     | `-BinaryOperator 0x55a5233988b0 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55a5233118c0 <col:13> 'int' lvalue ->status 0x55a523310358
|     |   | `-CXXThisExpr 0x55a5233118b0 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55a523398898 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55a5233118f0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330efb0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55a523398a48 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55a523398968 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55a523398950 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55a523398938 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55a523311970 <col:13> 'int' lvalue ->status 0x55a523310358
|     | | |     `-CXXThisExpr 0x55a523311960 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55a523398918 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55a5233988e8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55a5233119b0 <col:23> 'int' lvalue ->status 0x55a523310358
|     | |   |   `-CXXThisExpr 0x55a5233119a0 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55a523398900 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55a5233119e0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55a523398a28 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55a5233989d8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55a5233989a8 <col:13, col:18> '<bound member function type>' .error 0x55a5232b7fe0
|     |   | | `-DeclRefExpr 0x55a523398988 <col:13> 'const ArgContext' lvalue ParmVar 0x55a5233977d0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55a523398a00 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55a523311af0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55a523398a18 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55a523311b58 <col:20> 'bool' false
|     |-DeclStmt 0x55a523398f88 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55a523398f30 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55a523398ee0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55a523398ec0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55a523398e50 'type'
|     |       `-ElaboratedType 0x55a523398e00 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55a523398de0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55a522fc2bb8 'unsigned_type'
|     |           `-BuiltinType 0x55a522ce7450 'unsigned int'
|     |-CallExpr 0x55a5233995e0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55a5233995c8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55a523399548 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55a523399428 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55a522fd3848 'extract_integer')
|     | |-ImplicitCastExpr 0x55a523399628 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55a523399610 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55a523398fe8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55a5233983d8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55a5233990b8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55a523399068 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a523397768 'result' 'unsigned int &'
|     `-ReturnStmt 0x55a523399640 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55a523311ef8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55a523310268 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55a52330ff18 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55a5233101c8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55a52330ffc8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55a523310068 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55a5233100e0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55a523310a78 <col:71> 'const ArgContext' lvalue Var 0x55a523304b28 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55a523312698 <col:83, line:1083:5>
| |   |-DeclStmt 0x55a523311fe0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55a523311f78 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55a523312670 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55a523312280 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55a5233120f8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55a5233120c0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55a523312008 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55a523312060 <col:31> 'const String' lvalue ParmVar 0x55a52330ffc8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55a523312080 <col:36> 'V' lvalue Var 0x55a523311f78 'x' 'V'
| |     | |   `-DeclRefExpr 0x55a5233120a0 <col:39> 'const ArgContext' lvalue ParmVar 0x55a5233100e0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55a523312260 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55a523312240 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55a523312228 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55a523312210 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55a523312120 <col:17> 'int' lvalue ->status 0x55a523310358
| |     |     |     `-CXXThisExpr 0x55a523312110 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55a5233121f0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55a5233121c0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55a523312160 <col:27> 'int' lvalue ->status 0x55a523310358
| |     |       |   `-CXXThisExpr 0x55a523312150 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55a5233121d8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55a5233121a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55a5233122b0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55a5233122a0 <col:20> 'bool' false
| |     `-IfStmt 0x55a523312648 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55a523312350 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55a523312320 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55a5233122d0 <col:18> 'int' lvalue ->status 0x55a523310358
| |       | |   `-CXXThisExpr 0x55a5233122c0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55a523312338 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55a523312300 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55a523312588 <col:42, line:1079:9>
| |       | |-CallExpr 0x55a523312530 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55a523312380 <line:1076:13> '<bound member function type>' ->range_error 0x55a523310968
| |       | | | `-CXXThisExpr 0x55a523312370 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55a5233123b0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a5233100e0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55a523312490 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55a523312508 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55a5233124e8 <col:43> 'V' lvalue Var 0x55a523311f78 'x' 'V'
| |       | `-ReturnStmt 0x55a523312578 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55a523312568 <col:20> 'bool' false
| |       `-CompoundStmt 0x55a523312628 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55a5233125e8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55a5233125a8 <col:13> 'V' lvalue ParmVar 0x55a523310068 'result' 'V &'
| |         | `-DeclRefExpr 0x55a5233125c8 <col:22> 'V' lvalue Var 0x55a523311f78 'x' 'V'
| |         `-ReturnStmt 0x55a523312618 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55a523312608 <col:20> 'bool' true
| `-CXXMethodDecl 0x55a523397278 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55a523397050 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55a523397128 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55a523397190 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55a523397ec8 <col:83, line:1083:5>
|     |-DeclStmt 0x55a523397500 <line:1071:9, col:12>
|     | `-VarDecl 0x55a523397498 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55a523397ea0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55a523397b30 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55a523397a58 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55a523397a20 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55a5233979d8 <col:14> '<bound member function type>' ->parse_saturating 0x55a5233978b8
|       | |   | `-CXXThisExpr 0x55a5233979c8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55a523397570 <col:31> 'const String' lvalue ParmVar 0x55a523397050 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55a523397590 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55a523397498 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55a5233975b0 <col:39> 'const ArgContext' lvalue ParmVar 0x55a523397190 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55a523397b10 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55a523397af0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55a523397ad8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55a523397ac0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55a523312120 <col:17> 'int' lvalue ->status 0x55a523310358
|       |     |     `-CXXThisExpr 0x55a523312110 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55a523397aa0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55a523397a70 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55a523312160 <col:27> 'int' lvalue ->status 0x55a523310358
|       |       |   `-CXXThisExpr 0x55a523312150 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55a523397a88 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55a5233121a0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55a523397b50 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55a5233122a0 <col:20> 'bool' false
|       `-IfStmt 0x55a523397e78 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55a523397b90 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55a523397b60 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55a5233122d0 <col:18> 'int' lvalue ->status 0x55a523310358
|         | |   `-CXXThisExpr 0x55a5233122c0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55a523397b78 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55a523312300 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55a52330f040 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55a523397db0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55a523397d20 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55a523312380 <line:1076:13> '<bound member function type>' ->range_error 0x55a523310968
|         | | | `-CXXThisExpr 0x55a523312370 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55a523397bb0 <col:25> 'const ArgContext' lvalue ParmVar 0x55a523397190 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55a523397d88 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55a523397d58 <col:31, col:50> 'const bool' lvalue Var 0x55a522fc2a60 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55a523397cf8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55a523397ce0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55a523397cc8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55a523397ca8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55a523397498 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55a523397da0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55a523312568 <col:20> 'bool' false
|         `-CompoundStmt 0x55a523397e58 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55a523397e28 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55a523397dd0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55a523397128 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55a523397e10 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55a523397df0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55a523397498 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55a523397e48 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55a523312608 <col:20> 'bool' true
|-FieldDecl 0x55a5233102f0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55a523310358 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55a5233103a8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55a523310660 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55a5233103e8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55a523310468 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55a5233104e0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55a523310560 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55a523310968 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55a523310730 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55a5233107a8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55a523310840 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55a523312ef8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55a523312ef8
| `-ParmVarDecl 0x55a523313008 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55a523313188 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a523313298 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55a52338fc80 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a52338fc50 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55a52338fc20 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a52338fbf0 <col:7> 'IntArg' lvalue ParmVar 0x55a523313298 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a5233102f0 'base' 'int'
| | `-ImplicitCastExpr 0x55a52338fd78 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a52338fd48 <col:7> 'int' xvalue .base 0x55a5233102f0
| |     `-CXXStaticCastExpr 0x55a52338fd18 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a52338fce8 <col:7> 'IntArg' lvalue ParmVar 0x55a523313298 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55a523310358 'status' 'int'
| | `-ImplicitCastExpr 0x55a52338fe48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55a52338fe18 <col:7> 'int' xvalue .status 0x55a523310358
| |     `-CXXStaticCastExpr 0x55a52338fde8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55a52338fdb8 <col:7> 'IntArg' lvalue ParmVar 0x55a523313298 '' 'IntArg &&'
| `-CompoundStmt 0x55a52338fea0 <col:7>
`-CXXDestructorDecl 0x55a52338ede0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55a523317490 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55a5233176e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55a52338ed08 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a52338f280 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55a52338f260 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55a52338f2f0 <col:19>
|-CXXConstructorDecl 0x55a52338eee8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55a52338eee8
| `-ParmVarDecl 0x55a52338eff8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55a52338f098 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55a52338f1a8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55a52338feb0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55a52338fbd0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55a52338fba0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55a52338fb70 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55a52338f1a8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55a523394180 <col:19>
`-CXXDestructorDecl 0x55a52338f330 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
