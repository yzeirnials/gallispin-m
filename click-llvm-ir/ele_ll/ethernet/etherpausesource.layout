
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc75cad8 prev 0x5599cc754278 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc75cbd0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5599cc75cc60 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5599cc75ccd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5599cc75cd98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5599cc75ce60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5599cc75cfd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5599cc75cf10 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5599cc75d080 <col:24>
| `-OptimizeNoneAttr 0x5599cc75d0d8 <col:34>
|-CXXMethodDecl 0x5599cc75d120 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5599cc75d3d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5599cc75d1d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5599cc75d248 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5599cc75d2c8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5599cc75d490 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5599cc75d4c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5599cc75d530 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5599cc75d5b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5599cc75d8d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5599cc75d670 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5599cc75d6e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5599cc75d760 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5599cc75d7e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5599cc75d9f0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5599cc765368 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5599cc765368
| `-ParmVarDecl 0x5599cc765478 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5599cc765518 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5599cc765518
| `-ParmVarDecl 0x5599cc765628 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5599cc859768 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc74faf0 prev 0x5599cc74f870 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc74fbe8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5599cc74fc78 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5599cc74fcd8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5599cc74fdc8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5599cc74fec8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5599cc750098 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5599cc74ff48 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5599cc74ffc0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5599cc750228 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5599cc750160 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5599cc7502d0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5599cc750408 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5599cc750340 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5599cc7505a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5599cc7504e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5599cc750748 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5599cc750688 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5599cc7507f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5599cc7508f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5599cc7509d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7508d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5599cc7508b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5599cc750980 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5599cc7509e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc750960 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5599cc750940 <col:44> 'int' 2
|-CXXMethodDecl 0x5599cc750b30 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5599cc750a18 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5599cc750a98 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5599cc750c88 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5599cc750bf8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5599cc750ec8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5599cc750d48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5599cc750dc0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5599cc750f78 <col:20>
| `-OptimizeNoneAttr 0x5599cc750fd0 <col:30>
|-CXXMethodDecl 0x5599cc7510d8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5599cc751010 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5599cc751180 <col:20>
| `-OptimizeNoneAttr 0x5599cc7511d8 <col:30>
|-CXXMethodDecl 0x5599cc751228 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5599cc7512f0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5599cc751408 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5599cc751490 <line:56:5, col:33> col:23 used PORTS_0_1 'const char []' static
|-VarDecl 0x5599cc751518 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5599cc7515a0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5599cc751628 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5599cc7516b8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5599cc751778 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5599cc751800 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5599cc751888 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5599cc751910 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5599cc751998 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5599cc751a20 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5599cc751ab0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5599cc751b70 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5599cc751c00 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5599cc751d50 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5599cc751cb8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5599cc751ee0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5599cc751e10 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5599cc752190 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5599cc751f98 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5599cc752018 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5599cc752098 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5599cc752248 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5599cc752350 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5599cc7525e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc752330 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc752310 <col:33> 'int' 0
| |-EnumConstantDecl 0x5599cc7523e0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5599cc7525f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7523c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5599cc7523a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5599cc752470 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5599cc752610 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc752450 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5599cc752430 <col:38> 'int' 90
| |-EnumConstantDecl 0x5599cc752500 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5599cc752628 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7524e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5599cc7524c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5599cc752590 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5599cc752640 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc752570 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5599cc752550 <col:32> 'int' 2000
|-CXXMethodDecl 0x5599cc752680 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5599cc752ac0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5599cc752930 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5599cc7529a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc752b90 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5599cc752d10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5599cc752c40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc752f18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5599cc752dc8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5599cc752e40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc753018 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5599cc7530b8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5599cc753180 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc753210 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5599cc753440 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7531f0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5599cc7531d0 <col:36> 'int' EnumConstant 0x5599cc753180 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc753260 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc7532b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc753300 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc753350 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5599cc7533a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5599cc7533f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5599cc753528 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5599cc753468 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5599cc7535f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5599cc7536b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5599cc753770 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5599cc753830 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5599cc753948 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5599cc753a10 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5599cc753b90 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5599cc753ac0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5599cc753cb8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5599cc753eb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5599cc753d68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5599cc753de8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5599cc761808 <col:54, line:127:5>
|   |-ParenExpr 0x5599cc7616b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5599cc761688 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc761378 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5599cc761350 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5599cc761338 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5599cc761320 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5599cc7612f0 <col:31> 'Router *' lvalue ->_router 0x5599cc75f1d0
|   |   |         `-CXXThisExpr 0x5599cc7612e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5599cc7613d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc7613b8 <col:48> 'int' 0
|   |   `-CallExpr 0x5599cc7615e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7615d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc7615b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc761628 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc761448 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5599cc761640 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc761468 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5599cc761658 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc7614a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5599cc761670 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc761598 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc761580 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc761538 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5599cc761750 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5599cc7616e8 <col:9> 'Router *' lvalue ->_router 0x5599cc75f1d0
|   | | `-CXXThisExpr 0x5599cc7616d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5599cc761738 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5599cc761718 <col:19> 'Router *' lvalue ParmVar 0x5599cc753d68 'r' 'Router *'
|   `-BinaryOperator 0x5599cc7617e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5599cc761780 <col:9> 'int' lvalue ->_eindex 0x5599cc75f238
|     | `-CXXThisExpr 0x5599cc761770 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5599cc7617d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc7617b0 <col:19> 'int' lvalue ParmVar 0x5599cc753de8 'eindex' 'int'
|-CXXMethodDecl 0x5599cc754040 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5599cc753f78 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5599cc754110 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5599cc7541d8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5599cc754278 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5599cc7544c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5599cc754340 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5599cc7543c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5599cc754578 <col:20>
| `-OptimizeNoneAttr 0x5599cc7545d0 <col:30>
|-CXXMethodDecl 0x5599cc7546d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5599cc754610 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5599cc754780 <col:20>
| `-OptimizeNoneAttr 0x5599cc7547d8 <col:30>
|-CXXMethodDecl 0x5599cc7548a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5599cc754818 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5599cc754950 <col:20>
| `-OptimizeNoneAttr 0x5599cc7549a8 <col:30>
|-CXXMethodDecl 0x5599cc754b38 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5599cc7549e0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5599cc754a60 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5599cc754cc8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5599cc754c00 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5599cc754e18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5599cc754d88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5599cc754f68 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5599cc754ed8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5599cc7550b8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5599cc755028 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5599cc755378 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5599cc755170 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5599cc7551f0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5599cc755298 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5599cc755450 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5599cc755510 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5599cc7557e0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5599cc755690 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5599cc755708 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc755908 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5599cc755ae0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5599cc7559c0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5599cc755a40 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5599cc755cc8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5599cc755ba8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5599cc755c28 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5599cc756038 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5599cc755d88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5599cc755e00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5599cc755e80 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5599cc760df0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc760dd0 <col:106> 'int' 0
| `-ParmVarDecl 0x5599cc755ef8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760e28 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760e08 <col:126> 'int' 0
|-CXXMethodDecl 0x5599cc7563d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5599cc756108 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5599cc7561a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5599cc756220 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5599cc756298 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760e60 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760e40 <col:114> 'int' 0
|-CXXMethodDecl 0x5599cc756768 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5599cc7564b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5599cc756528 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5599cc7565a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5599cc760e78 <col:96> 'int' 0
| `-ParmVarDecl 0x5599cc756620 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760eb8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760e98 <col:116> 'int' 0
|-CXXMethodDecl 0x5599cc756ae8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5599cc756838 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5599cc7568b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc756930 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5599cc760ef0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc760ed0 <col:109> 'int' 0
| `-ParmVarDecl 0x5599cc7569a8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760f28 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760f08 <col:129> 'int' 0
|-CXXMethodDecl 0x5599cc756e68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5599cc756bb8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5599cc756c30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc756cb0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5599cc756d28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760f60 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760f40 <col:117> 'int' 0
|-CXXMethodDecl 0x5599cc7571f8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5599cc756f40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc756fb8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc757038 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5599cc760f78 <col:99> 'int' 0
| `-ParmVarDecl 0x5599cc7570b0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5599cc760fb8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5599cc760f98 <col:119> 'int' 0
|-CXXMethodDecl 0x5599cc757618 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5599cc7572c8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5599cc757348 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5599cc7573c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc757440 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5599cc760ff0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc760fd0 <col:108> 'int' 0
| `-ParmVarDecl 0x5599cc7574c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5599cc761028 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5599cc761008 <col:141> 'int' 0
|-CXXMethodDecl 0x5599cc757a38 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5599cc7576f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5599cc757770 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5599cc7577e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc757868 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5599cc7578e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5599cc761040 <col:121> 'int' 0
|-CXXMethodDecl 0x5599cc757e68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5599cc757b18 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5599cc757b98 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5599cc757c10 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc757c90 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5599cc761060 <col:98> 'int' 0
| `-ParmVarDecl 0x5599cc757d10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5599cc761080 <col:123> 'int' 0
|-CXXMethodDecl 0x5599cc758130 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5599cc757f40 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5599cc757fc0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5599cc758040 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5599cc7610a0 <col:80> 'int' 0
|-EnumDecl 0x5599cc7581e8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5599cc7582f0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5599cc758580 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7582d0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5599cc7582b0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5599cc758380 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5599cc758598 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc758360 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5599cc758340 <col:40> 'int' 2
| |-EnumConstantDecl 0x5599cc758410 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5599cc7585b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7583f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5599cc7583d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5599cc7584a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5599cc7585c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc758480 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5599cc758460 <col:36> 'int' 7
| `-EnumConstantDecl 0x5599cc758530 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5599cc7585e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc758510 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5599cc7584f0 <col:34> 'int' 6
|-CXXMethodDecl 0x5599cc758898 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5599cc758608 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5599cc7586a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5599cc758728 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5599cc7587a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5599cc761158 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5599cc761140 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5599cc761128 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5599cc761108 <col:98, col:105> 'String' (CXXTemporary 0x5599cc761108)
|           `-CXXTemporaryObjectExpr 0x5599cc7610d0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5599cc758b38 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5599cc758968 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5599cc7589e0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5599cc758a58 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5599cc761208 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5599cc7611f0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5599cc7611d8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5599cc7611b8 <col:94, col:101> 'String' (CXXTemporary 0x5599cc7611b8)
| |         `-CXXTemporaryObjectExpr 0x5599cc761180 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5599cc7619f0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5599cc761968 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5599cc761938 <col:9> '<bound member function type>' ->add_task_handlers 0x5599cc758898
|     | `-CXXThisExpr 0x5599cc761928 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5599cc7619a8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc7618a8 <col:27> 'Task *' lvalue ParmVar 0x5599cc758968 'task' 'Task *'
|     |-ImplicitCastExpr 0x5599cc7619c0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc7618c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5599cc7589e0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5599cc7619d8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5599cc7618e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5599cc758530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5599cc761908 <col:62> 'const String' lvalue ParmVar 0x5599cc758a58 'prefix' 'const String &'
|-CXXMethodDecl 0x5599cc758d48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5599cc758c00 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5599cc758c78 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5599cc7612b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5599cc7612a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5599cc761288 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5599cc761268 <col:70, col:77> 'String' (CXXTemporary 0x5599cc761268)
| |         `-CXXTemporaryObjectExpr 0x5599cc761230 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5599cc761bc8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5599cc761b40 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5599cc761b10 <col:9> '<bound member function type>' ->add_task_handlers 0x5599cc758898
|     | `-CXXThisExpr 0x5599cc761b00 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5599cc761b80 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc761a80 <col:27> 'Task *' lvalue ParmVar 0x5599cc758c00 'task' 'Task *'
|     |-ImplicitCastExpr 0x5599cc761b98 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5599cc761aa0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5599cc761bb0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5599cc761ac0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5599cc758530 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5599cc761ae0 <col:57> 'const String' lvalue ParmVar 0x5599cc758c78 'prefix' 'const String &'
|-CXXMethodDecl 0x5599cc759028 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5599cc758e10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc758e90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc758f08 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5599cc7592d8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5599cc7590f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc759178 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc7591f8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5599cc7595c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5599cc7593a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc759428 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc7594a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5599cc759878 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5599cc759698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc759718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc759798 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5599cc759b28 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5599cc759948 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc7599c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc759a48 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5599cc759dd8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5599cc759bf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc759c78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc759cf0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5599cc75a088 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5599cc759ea8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc759f28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc759fa8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5599cc75a398 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5599cc75a1b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75a230 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75a2b0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5599cc75a678 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5599cc75a468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75a4e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75a590 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5599cc75a958 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5599cc75a748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75a7c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75a870 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5599cc75abc0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5599cc75aa28 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5599cc75aaa8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5599cc75ab20 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5599cc75ae68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5599cc75ac90 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5599cc75ad10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5599cc75ad88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5599cc75b118 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5599cc75af38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75afb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75b038 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5599cc75b3c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5599cc75b1e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75b268 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75b2e0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5599cc75b678 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5599cc75b498 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75b518 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75b590 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5599cc75b948 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5599cc75b748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75b7c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5599cc75b868 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5599cc75bc78 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5599cc75ba18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5599cc75ba98 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5599cc75bb10 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5599cc75bb88 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc7612d0 <col:93> 'bool' false
|-CXXMethodDecl 0x5599cc75be60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5599cc75bd48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5599cc75bdc8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5599cc75c038 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5599cc75bf20 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5599cc75bfa0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5599cc75c318 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5599cc75c0f8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5599cc75c170 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5599cc75c1f0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5599cc75c268 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc75c608 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5599cc75c3e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5599cc75c460 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5599cc75c4e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5599cc75c558 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc75c840 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5599cc75c6e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5599cc75c760 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5599cc75ca28 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5599cc75c908 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5599cc75c988 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5599cc75cad8 prev 0x5599cc754278 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5599cc75cbd0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5599cc75cc60 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5599cc75ccd8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5599cc75cd98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5599cc75ce60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5599cc75cfd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5599cc75cf10 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5599cc75d080 <col:24>
| | `-OptimizeNoneAttr 0x5599cc75d0d8 <col:34>
| |-CXXMethodDecl 0x5599cc75d120 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5599cc75d3d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5599cc75d1d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5599cc75d248 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5599cc75d2c8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5599cc75d490 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5599cc75d4c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5599cc75d530 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5599cc75d5b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5599cc75d8d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5599cc75d670 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5599cc75d6e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5599cc75d760 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5599cc75d7e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5599cc75d9f0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5599cc765368 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5599cc765368
| | `-ParmVarDecl 0x5599cc765478 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5599cc765518 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5599cc765518
| | `-ParmVarDecl 0x5599cc765628 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5599cc859768 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5599cc75da68 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5599cc75db08 <col:38> "" ""
|-CXXMethodDecl 0x5599cc75db98 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5599cc75dc38 <col:44> "" ""
|-AccessSpecDecl 0x5599cc75dca8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5599cc75dcd0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5599cc75ddd0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5599cc75de20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc75ddb0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5599cc75dd90 <col:27> 'int' 4
|-FieldDecl 0x5599cc75ded8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5599cc75e088 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5599cc75e140 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5599cc75f1d0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5599cc75f238 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5599cc75f388 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5599cc75f2c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5599cc75f538 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5599cc75f448 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5599cc75f718 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5599cc75f5f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5599cc75f678 <col:25> col:28 'int'
|-CXXMethodDecl 0x5599cc75f9c0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc75f7e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5599cc75f860 <col:28> col:31 'int'
| `-ParmVarDecl 0x5599cc75f8d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5599cc75fa78 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5599cc75fb40 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5599cc75fb90 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5599cc75fbe0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5599cc75fdc0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5599cc75fc70 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5599cc75fce8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc760068 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5599cc75fe88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5599cc75ff08 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5599cc75ff80 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc760288 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5599cc760138 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5599cc7601b8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5599cc7605c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5599cc760348 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5599cc7603c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5599cc760440 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5599cc7604c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5599cc7607a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5599cc760690 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5599cc760710 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5599cc7608f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5599cc760868 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5599cc760c78 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5599cc7609b8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5599cc760a38 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5599cc760ab0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5599cc760b30 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5599cc760d90 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherPauseSource
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _count
       112 |   int _limit
       116 |   _Bool _active
       120 |   uint32_t _interval
       128 |   class Packet * _packet
       136 |   class Timer _timer
       136 |     int _schedpos1
       144 |     class Timestamp _expiry_s
       144 |       union Timestamp::rep_t _t
       144 |         int64_t x
       152 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       152 |       TimerCallback callback
       160 |     void * _thunk
       168 |     class Element * _owner
       176 |     class RouterThread * _thread
           | [sizeof=184, dsize=184, align=8,
           |  nvsize=184, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc50e5a0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc50e6b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5599cc50e748 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5599cc50e818 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5599cc50e900 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc50eb18 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5599cc50e9c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50ecc8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5599cc50ebd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5599cc50ee10 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5599cc50ed80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5599cc50ef58 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5599cc50eec8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50f0a0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5599cc50f010 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50f168 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5599cc50f2b0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5599cc50f220 <col:28> col:31 'int'
|-CXXMethodDecl 0x5599cc50f378 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5599cc50f4c0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5599cc50f430 <col:28> col:31 'int'
|-CXXMethodDecl 0x5599cc50f638 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5599cc50f578 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50f780 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5599cc50f6f0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50f848 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5599cc50fa08 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5599cc50f8f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc50f970 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc50fc58 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5599cc50fac8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc50fb40 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc50fd08 <col:86> "" ""
|-CXXMethodDecl 0x5599cc50ff78 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc50fde8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5599cc50fe60 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc510128 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5599cc510038 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5599cc5102d8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5599cc5101e0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5599cc5105a8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc510390 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5599cc510408 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc510480 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc510888 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc510670 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5599cc5106e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc510760 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc510940 <col:115> "" ""
|-AccessSpecDecl 0x5599cc5109b0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5599cc5109e8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc511f00 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5599cc511f00
| `-ParmVarDecl 0x5599cc512008 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5599cc5120a8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5599cc5120a8
| `-ParmVarDecl 0x5599cc5121b8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5599cc5477e8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5599cc7395e0 <col:7>
|-CXXConstructorDecl 0x5599cc5478c0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5599cc5478c0
| `-ParmVarDecl 0x5599cc5479d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5599cc547a48 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5599cc547a48
| `-ParmVarDecl 0x5599cc547b58 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5599cc73bfe0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc728188 prev 0x5599cc71d390 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc728280 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5599cc728370 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5599cc728498 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5599cc728618 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5599cc728798 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5599cc728918 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5599cc739748 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5599cc739fb8 <col:11>
|-CXXDestructorDecl 0x5599cc739820 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5599cc739958 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5599cc739958
| `-ParmVarDecl 0x5599cc739a68 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5599cc739b08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5599cc739b08
| `-ParmVarDecl 0x5599cc739c18 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5599cc73c9d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc73cae8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5599cc73cd68 <col:11>
|   `-ReturnStmt 0x5599cc73cd58 <col:11>
|     `-UnaryOperator 0x5599cc73cd40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc73cd30 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5599cc73cb58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5599cc73cb58
  `-ParmVarDecl 0x5599cc73cc68 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc728980 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc728a98 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5599cc728b38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5599cc728ba0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5599cc728c08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5599cc728c70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5599cc728cd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5599cc728d90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5599cc728df0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5599cc728e50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5599cc739658 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5599cc728b38 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5599cc739fc8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5599cc73a020 <col:12>
|-CXXConstructorDecl 0x5599cc739c88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5599cc739c88
| `-ParmVarDecl 0x5599cc739d98 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5599cc739e38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5599cc739e38
| `-ParmVarDecl 0x5599cc739f48 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5599cc73c0c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc716aa0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc716bb8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5599cc716c48 <col:16, col:22> col:16 public
|-EnumDecl 0x5599cc716c70 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5599cc716d70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5599cc716e50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc716d50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5599cc716d30 <col:21> 'int' 28
| `-EnumConstantDecl 0x5599cc716e00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5599cc716e68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc716de0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5599cc716dc0 <col:22> 'int' 64
|-CXXMethodDecl 0x5599cc7171a8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5599cc716e90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc716f10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5599cc716f88 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc717000 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc717268 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5599cc717468 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc7172e0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5599cc717358 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc717518 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5599cc717678 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5599cc717588 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc717720 <col:72> warn_unused_result ""
|-TypedefDecl 0x5599cc717a80 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5599cc717a10 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5599cc7179b0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5599cc717970 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5599cc1ed310 'void'
|       |-PointerType 0x5599cc496e40 'unsigned char *'
|       | `-BuiltinType 0x5599cc1ed410 'unsigned char'
|       |-TypedefType 0x5599cc293410 'size_t' sugar
|       | |-Typedef 0x5599cc25daf0 'size_t'
|       | `-BuiltinType 0x5599cc1ed470 'unsigned long'
|       `-PointerType 0x5599cc1edb10 'void *'
|         `-BuiltinType 0x5599cc1ed310 'void'
|-CXXMethodDecl 0x5599cc717ef8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5599cc717af0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5599cc717b68 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc717c00 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5599cc717c80 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5599cc7325f0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5599cc7325d8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5599cc7325a0 <col:58> 'int' 0
| |-ParmVarDecl 0x5599cc717d00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5599cc732618 <col:76> 'int' 0
| |-ParmVarDecl 0x5599cc717d80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5599cc732638 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5599cc717fc8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5599cc718048 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5599cc718108 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5599cc7181a8 <col:20>
| `-OptimizeNoneAttr 0x5599cc718200 <col:30>
|-CXXMethodDecl 0x5599cc718278 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5599cc718318 <col:20>
| `-OptimizeNoneAttr 0x5599cc718370 <col:30>
|-CXXMethodDecl 0x5599cc7183e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5599cc718488 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5599cc718538 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5599cc7185d8 <col:20>
| |-OptimizeNoneAttr 0x5599cc718630 <col:30>
| `-WarnUnusedResultAttr 0x5599cc718658 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5599cc7186b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5599cc718750 <col:20>
| `-OptimizeNoneAttr 0x5599cc7187a8 <col:30>
|-CXXMethodDecl 0x5599cc7187f8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5599cc718898 <col:20>
| `-OptimizeNoneAttr 0x5599cc7188f0 <col:30>
|-CXXMethodDecl 0x5599cc718938 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5599cc7189d8 <col:20>
| `-OptimizeNoneAttr 0x5599cc718a30 <col:30>
|-CXXMethodDecl 0x5599cc718a78 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc718b38 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc718c00 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc718cc8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc718d88 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc718ea8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5599cc732700 <col:54, line:99:5>
|   `-ReturnStmt 0x5599cc7326f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5599cc7326d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5599cc7326a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5599cc729188
|         `-CXXThisExpr 0x5599cc732698 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5599cc719048 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5599cc718f58 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5599cc7327b0 <col:67, line:103:5>
|   `-BinaryOperator 0x5599cc732790 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5599cc732728 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5599cc729188
|     | `-CXXThisExpr 0x5599cc732718 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5599cc732778 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc732758 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5599cc718f58 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5599cc719140 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5599cc732830 <col:33, line:107:5>
|   `-ReturnStmt 0x5599cc732820 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5599cc732808 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5599cc7327d8 <col:16> 'void *' lvalue ->_destructor_argument 0x5599cc7291f0
|         `-CXXThisExpr 0x5599cc7327c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5599cc719200 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5599cc732e60 <col:25, line:113:5>
|   |-ParenExpr 0x5599cc732ba8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5599cc732b78 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc7328e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5599cc7328c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5599cc732888 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5599cc732858 <col:24> '<bound member function type>' ->shared 0x5599cc718278
|   |   |       `-ImplicitCastExpr 0x5599cc7328a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5599cc732848 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5599cc732948 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc732928 <col:42> 'int' 0
|   |   `-CallExpr 0x5599cc732ad8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5599cc732ac0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc732aa0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc732b18 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc7329b8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5599cc732b30 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc7329e0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc732b48 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc732a18 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5599cc732b60 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc732a88 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc732a70 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc732a38 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5599cc732da8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5599cc732bd8 <col:2> 'unsigned char *' lvalue ->_head 0x5599cc728f90
|   | | `-CXXThisExpr 0x5599cc732bc8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5599cc732d90 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5599cc732d70 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5599cc732c18 <col:10> 'unsigned char *' lvalue ->_data 0x5599cc728ff8
|   |     | `-CXXThisExpr 0x5599cc732c08 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5599cc732d58 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5599cc732d38 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5599cc732c58 <col:18> 'unsigned char *' lvalue ->_tail 0x5599cc729060
|   |         | `-CXXThisExpr 0x5599cc732c48 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5599cc732d20 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5599cc732d00 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5599cc732c98 <col:26> 'unsigned char *' lvalue ->_end 0x5599cc7290c8
|   |             | `-CXXThisExpr 0x5599cc732c88 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5599cc732ce8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5599cc732cc8 <col:33> 'int' 0
|   `-BinaryOperator 0x5599cc732e40 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5599cc732dd8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5599cc729188
|     | `-CXXThisExpr 0x5599cc732dc8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5599cc732e28 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5599cc732e08 <col:16> 'int' 0
|-CXXMethodDecl 0x5599cc719340 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5599cc7192b0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc7193e8 <col:20>
| |-OptimizeNoneAttr 0x5599cc719440 <col:30>
| `-WarnUnusedResultAttr 0x5599cc719468 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5599cc719538 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5599cc7194a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc7195e0 <col:20>
| |-OptimizeNoneAttr 0x5599cc719638 <col:30>
| `-WarnUnusedResultAttr 0x5599cc719660 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5599cc719798 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5599cc7196a0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc719840 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5599cc719940 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5599cc7198b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc7199e8 <col:20>
| `-OptimizeNoneAttr 0x5599cc719a40 <col:30>
|-CXXMethodDecl 0x5599cc719b08 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5599cc719a78 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc719bb0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5599cc719cb0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5599cc719c20 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5599cc719d58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5599cc719e58 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5599cc719dc8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc719f00 <col:20>
| `-OptimizeNoneAttr 0x5599cc719f58 <col:30>
|-CXXMethodDecl 0x5599cc71a0e8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5599cc719f98 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5599cc71a010 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5599cc732658 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5599cc71a198 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5599cc71a398 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5599cc71a210 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5599cc71a288 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc71a5a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5599cc71a458 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc71a4d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc71a7b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5599cc71a668 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5599cc71a6e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5599cc732668 <col:39> 'int' 0
|-CXXMethodDecl 0x5599cc71a888 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5599cc71a950 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc71aa18 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5599cc71aad8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc71aba0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5599cc71ace8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5599cc71ac58 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5599cc71aeb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5599cc71ada8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5599cc71ae20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc71af88 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5599cc71b048 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5599cc71b0e8 <col:20>
| `-OptimizeNoneAttr 0x5599cc71b140 <col:30>
|-CXXMethodDecl 0x5599cc71b190 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5599cc71b230 <col:20>
| `-OptimizeNoneAttr 0x5599cc71b288 <col:30>
|-CXXMethodDecl 0x5599cc71b2d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5599cc71b398 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc71b460 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5599cc71b500 <col:20>
| `-OptimizeNoneAttr 0x5599cc71b558 <col:30>
|-CXXMethodDecl 0x5599cc71b6a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5599cc71b598 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5599cc71b610 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc71b7f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5599cc71b768 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc71b8d0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5599cc71b990 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5599cc71ba30 <col:20>
| `-OptimizeNoneAttr 0x5599cc71ba88 <col:30>
|-CXXMethodDecl 0x5599cc71bad8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5599cc71bb78 <col:20>
| `-OptimizeNoneAttr 0x5599cc71bbd0 <col:30>
|-CXXMethodDecl 0x5599cc71bc20 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5599cc71bce8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5599cc71bd88 <col:20>
| `-OptimizeNoneAttr 0x5599cc71bde0 <col:30>
|-CXXMethodDecl 0x5599cc71be28 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5599cc71bf48 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5599cc71c0b8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5599cc71bff8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5599cc71c1a8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5599cc71c248 <col:20>
| `-OptimizeNoneAttr 0x5599cc71c2a0 <col:30>
|-CXXMethodDecl 0x5599cc71c2f0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5599cc71c3b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc71c5e8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5599cc71c460 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5599cc71c4d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc71c698 <col:20>
| `-OptimizeNoneAttr 0x5599cc71c6f0 <col:30>
|-CXXMethodDecl 0x5599cc71c798 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5599cc71c838 <col:20>
| `-OptimizeNoneAttr 0x5599cc71c890 <col:30>
|-CXXMethodDecl 0x5599cc71c8e0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5599cc71c980 <col:20>
| `-OptimizeNoneAttr 0x5599cc71c9d8 <col:30>
|-CXXMethodDecl 0x5599cc71ca20 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5599cc71cac0 <col:20>
| `-OptimizeNoneAttr 0x5599cc71cb18 <col:30>
|-CXXMethodDecl 0x5599cc71cc18 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5599cc71cb50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5599cc71ccc0 <col:20>
| `-OptimizeNoneAttr 0x5599cc71cd18 <col:30>
|-CXXMethodDecl 0x5599cc71ced8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5599cc71cd50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5599cc71cdc8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc71cf88 <col:20>
| `-OptimizeNoneAttr 0x5599cc71cfe0 <col:30>
|-CXXMethodDecl 0x5599cc71d088 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5599cc71d1a8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5599cc71d2c8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5599cc71d368 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5599cc71d390 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5599cc71d4b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5599cc71d558 <col:20>
| `-OptimizeNoneAttr 0x5599cc71d5b0 <col:30>
|-CXXMethodDecl 0x5599cc71d658 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5599cc71d6f8 <col:20>
| `-OptimizeNoneAttr 0x5599cc71d750 <col:30>
|-AccessSpecDecl 0x5599cc71d778 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5599cc71d7a0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5599cc71d8a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5599cc71d8f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc71d880 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5599cc71d860 <col:14> 'int' 48
|-CXXMethodDecl 0x5599cc71d958 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5599cc71d9f8 <col:20>
| `-OptimizeNoneAttr 0x5599cc71da50 <col:30>
|-CXXMethodDecl 0x5599cc71dac8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5599cc71db68 <col:20>
| `-OptimizeNoneAttr 0x5599cc71dbc0 <col:30>
|-CXXMethodDecl 0x5599cc71dc88 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5599cc71dbf8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5599cc71de28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5599cc71dfc8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5599cc71ded8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5599cc71e070 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5599cc71e170 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e520 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e150 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc71e130 <col:9> 'int' 0
| |-EnumConstantDecl 0x5599cc71e200 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e538 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e1e0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5599cc71e1c0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5599cc71e290 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e550 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e270 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5599cc71e250 <col:14> 'int' 2
| |-EnumConstantDecl 0x5599cc71e320 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e568 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e300 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5599cc71e2e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5599cc71e3b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e580 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e390 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5599cc71e370 <col:13> 'int' 4
| |-EnumConstantDecl 0x5599cc71e440 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5599cc71e598 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71e420 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5599cc71e400 <col:13> 'int' 5
| `-EnumConstantDecl 0x5599cc71e4d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5599cc71e5b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc71e4b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5599cc71e490 <col:14> 'int' 6
|-CXXMethodDecl 0x5599cc71e618 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5599cc71e6b8 <col:20>
| `-OptimizeNoneAttr 0x5599cc71e710 <col:30>
|-CXXMethodDecl 0x5599cc71e808 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5599cc71e748 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5599cc71e8b0 <col:20>
| `-OptimizeNoneAttr 0x5599cc71e908 <col:30>
|-CXXMethodDecl 0x5599cc71e978 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5599cc71eaa0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5599cc71ec18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5599cc71eb50 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5599cc71ece0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5599cc71eda8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5599cc71eee8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5599cc71ee58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5599cc71ef90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5599cc71f090 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5599cc71f290 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71f070 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc71f050 <col:23> 'int' 0
| |-EnumConstantDecl 0x5599cc71f120 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5599cc71f2a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71f100 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5599cc71f0e0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5599cc71f1b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5599cc71f2c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc71f190 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc71f170 <col:24> 'int' 0
| `-EnumConstantDecl 0x5599cc71f240 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5599cc71f2d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc71f220 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5599cc71f200 <col:47> 'int' 16
|-CXXMethodDecl 0x5599cc71f338 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5599cc71f4a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5599cc71f3e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5599cc71f550 <col:20>
| `-OptimizeNoneAttr 0x5599cc71f5a8 <col:30>
|-CXXMethodDecl 0x5599cc71f5f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5599cc732f80 <col:18, col:36>
|   `-ReturnStmt 0x5599cc732f70 <col:20, col:33>
|     `-ImplicitCastExpr 0x5599cc732f58 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5599cc732f38 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5599cc732f08 <col:27> '<bound member function type>' ->xanno 0x5599cc71d658
|           `-CXXThisExpr 0x5599cc732ef8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5599cc71f6f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5599cc733090 <col:30, col:48>
|   `-ReturnStmt 0x5599cc733080 <col:32, col:45>
|     `-ImplicitCastExpr 0x5599cc733068 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5599cc733048 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5599cc733018 <col:39> '<bound member function type>' ->xanno 0x5599cc71d4b8
|           `-CXXThisExpr 0x5599cc733008 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5599cc71f7d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5599cc733228 <col:24, col:50>
|   `-ReturnStmt 0x5599cc733218 <col:26, col:47>
|     `-UnaryOperator 0x5599cc733200 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5599cc7331e0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5599cc7331c8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5599cc733178 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5599cc728498
|         |   `-CXXMemberCallExpr 0x5599cc733158 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5599cc733128 <col:34> '<bound member function type>' ->xanno 0x5599cc71d658
|         |       `-CXXThisExpr 0x5599cc733118 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5599cc7331a8 <col:46> 'int' 0
|-CXXMethodDecl 0x5599cc71f8e0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5599cc7333f8 <col:36, col:62>
|   `-ReturnStmt 0x5599cc7333e8 <col:38, col:59>
|     `-UnaryOperator 0x5599cc7333d0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5599cc7333b0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5599cc733398 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5599cc733310 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5599cc728498
|         |   `-CXXMemberCallExpr 0x5599cc7332f0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5599cc7332c0 <col:46> '<bound member function type>' ->xanno 0x5599cc71d4b8
|         |       `-CXXThisExpr 0x5599cc7332b0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5599cc733340 <col:58> 'int' 0
|-CXXMethodDecl 0x5599cc71f9f8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5599cc733590 <col:26, col:53>
|   `-ReturnStmt 0x5599cc733580 <col:28, col:50>
|     `-UnaryOperator 0x5599cc733568 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5599cc733548 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5599cc733530 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5599cc7334e0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5599cc728798
|         |   `-CXXMemberCallExpr 0x5599cc7334c0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5599cc733490 <col:36> '<bound member function type>' ->xanno 0x5599cc71d658
|         |       `-CXXThisExpr 0x5599cc733480 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5599cc733510 <col:49> 'int' 0
|-CXXMethodDecl 0x5599cc71fb18 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5599cc733768 <col:38, col:65>
|   `-ReturnStmt 0x5599cc733758 <col:40, col:62>
|     `-UnaryOperator 0x5599cc733740 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5599cc733720 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5599cc733708 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5599cc733678 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5599cc728798
|         |   `-CXXMemberCallExpr 0x5599cc733658 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5599cc733628 <col:48> '<bound member function type>' ->xanno 0x5599cc71d4b8
|         |       `-CXXThisExpr 0x5599cc733618 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5599cc7336a8 <col:61> 'int' 0
|-CXXMethodDecl 0x5599cc71fcc8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5599cc71fbd0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5599cc733e38 <col:34, line:463:5>
|   |-ParenExpr 0x5599cc733c80 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5599cc733c50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc7338b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc733888 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc7337d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc7337c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc733780 <col:23> 'int' lvalue ParmVar 0x5599cc71fbd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc7337a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc733868 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc733838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc7337f8 <col:33> 'int' lvalue ParmVar 0x5599cc71fbd0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5599cc733850 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5599cc733818 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5599cc733918 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc7338f8 <col:56> 'int' 0
|   |   `-CallExpr 0x5599cc733bb0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5599cc733b98 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc733b78 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc733bf0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc733a08 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5599cc733c08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc733a38 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc733c20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc733a70 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5599cc733c38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc733b60 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc733b48 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc733b08 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5599cc733e28 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5599cc733e10 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5599cc733df0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5599cc733dc0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5599cc733d70 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5599cc728498
|         |   `-CXXMemberCallExpr 0x5599cc733d50 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5599cc733d20 <col:9> '<bound member function type>' ->xanno 0x5599cc71d4b8
|         |       `-CXXThisExpr 0x5599cc733d10 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5599cc733dd8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5599cc733da0 <col:21> 'int' lvalue ParmVar 0x5599cc71fbd0 'i' 'int'
|-CXXMethodDecl 0x5599cc71ff18 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5599cc71fd88 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5599cc71fe00 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5599cc7344c8 <col:40, line:472:5>
|   |-ParenExpr 0x5599cc7342e0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5599cc7342b0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc733f90 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc733f60 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc733eb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc733e98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc733e58 <col:23> 'int' lvalue ParmVar 0x5599cc71fd88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc733e78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc733f40 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc733f10 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc733ed0 <col:33> 'int' lvalue ParmVar 0x5599cc71fd88 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5599cc733f28 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5599cc733ef0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5599cc733ff0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc733fd0 <col:56> 'int' 0
|   |   `-CallExpr 0x5599cc734210 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7341f8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc7341d8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc734250 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734060 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5599cc734268 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734090 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc734280 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc7340c8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5599cc734298 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc7341c0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc7341a8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc734168 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5599cc7344a8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5599cc734450 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5599cc734420 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5599cc7343d0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5599cc728498
|     | |   `-CXXMemberCallExpr 0x5599cc7343b0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5599cc734380 <col:2> '<bound member function type>' ->xanno 0x5599cc71d658
|     | |       `-CXXThisExpr 0x5599cc734370 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5599cc734438 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5599cc734400 <col:14> 'int' lvalue ParmVar 0x5599cc71fd88 'i' 'int'
|     `-ImplicitCastExpr 0x5599cc734490 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc734470 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5599cc71fe00 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5599cc7200d8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5599cc71ffe0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5599cc734c48 <col:36, line:485:5>
|   |-ParenExpr 0x5599cc7349b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc734980 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc734660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc734630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc734540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc734528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc7344e8 <col:23> 'int' lvalue ParmVar 0x5599cc71ffe0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc734508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc734610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc7345f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc734560 <col:33> 'int' lvalue ParmVar 0x5599cc71ffe0 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc7345d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc7345c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc734580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc7345a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5599cc7346c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc7346a0 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc7348e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7348c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc7348a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc734920 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5599cc734938 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc734950 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc7347a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5599cc734968 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc734890 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc734878 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc734838 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5599cc734c38 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5599cc734c20 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5599cc734c08 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc734bd8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5599cc734b78 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc734b48 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc734ac0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc734aa0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc734a70 <col:61> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc734a60 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc734b60 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc734af0 <col:74> 'int' lvalue ParmVar 0x5599cc71ffe0 'i' 'int'
|-CXXMethodDecl 0x5599cc720328 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5599cc720198 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5599cc720210 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5599cc735398 <col:42, line:500:5>
|   |-ParenExpr 0x5599cc735130 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc735100 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc734de0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc734db0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc734cc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc734ca8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc734c68 <col:23> 'int' lvalue ParmVar 0x5599cc720198 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc734c88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc734d90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc734d78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc734ce0 <col:33> 'int' lvalue ParmVar 0x5599cc720198 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc734d58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc734d40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc734d00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc734d20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5599cc734e40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc734e20 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc735060 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc735048 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc735028 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc7350a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734eb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5599cc7350b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc734ee8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc7350d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc734f20 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5599cc7350e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc735010 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc734ff8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc734fb8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5599cc735378 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5599cc735328 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5599cc7352f8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5599cc7352a0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5599cc735270 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5599cc735220 <col:48, col:57> 'char [48]' lvalue ->c 0x5599cc728370
|     |     |   `-CXXMemberCallExpr 0x5599cc735200 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5599cc7351d0 <col:48> '<bound member function type>' ->xanno 0x5599cc71d658
|     |     |       `-CXXThisExpr 0x5599cc7351c0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5599cc735288 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5599cc735250 <col:61> 'int' lvalue ParmVar 0x5599cc720198 'i' 'int'
|     `-ImplicitCastExpr 0x5599cc735360 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc735340 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5599cc720210 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5599cc7204e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5599cc7203f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5599cc735af8 <col:35, line:513:5>
|   |-ParenExpr 0x5599cc735808 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc7357d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc735530 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc735500 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc735410 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc7353f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc7353b8 <col:23> 'int' lvalue ParmVar 0x5599cc7203f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc7353d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc7354e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc7354c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc735430 <col:33> 'int' lvalue ParmVar 0x5599cc7203f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc7354a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc735490 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc735450 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc735470 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5599cc735590 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc735570 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc735738 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc735720 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc735700 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc735778 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc735600 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5599cc735790 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc735638 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc7357a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc735670 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5599cc7357c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc7356e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc7356d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc735690 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5599cc735ae8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5599cc735ad0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5599cc735ab8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc735a88 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5599cc735a00 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc7359d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc735980 <col:60, col:69> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc735960 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc735930 <col:60> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc735920 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc7359e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc7359b0 <col:73> 'int' lvalue ParmVar 0x5599cc7203f0 'i' 'int'
|-CXXMethodDecl 0x5599cc720738 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5599cc7205a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5599cc720620 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5599cc736218 <col:41, line:528:5>
|   |-ParenExpr 0x5599cc735fa0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc735f70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc735c90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc735c60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc735b70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc735b58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc735b18 <col:23> 'int' lvalue ParmVar 0x5599cc7205a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc735b38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc735c40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc735c28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc735b90 <col:33> 'int' lvalue ParmVar 0x5599cc7205a8 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc735c08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc735bf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc735bb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc735bd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5599cc735cf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc735cd0 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc735ed0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc735eb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc735e98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc735f10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc735d60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5599cc735f28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc735d98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc735f40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc735dd0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5599cc735f58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc735e80 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc735e68 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc735e28 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5599cc7361f8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5599cc7361a8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5599cc736178 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5599cc736120 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5599cc7360e0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5599cc736090 <col:47, col:56> 'char [48]' lvalue ->c 0x5599cc728370
|     |     |   `-CXXMemberCallExpr 0x5599cc736070 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5599cc736040 <col:47> '<bound member function type>' ->xanno 0x5599cc71d658
|     |     |       `-CXXThisExpr 0x5599cc736030 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5599cc7360f8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5599cc7360c0 <col:60> 'int' lvalue ParmVar 0x5599cc7205a8 'i' 'int'
|     `-ImplicitCastExpr 0x5599cc7361e0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc7361c0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5599cc720620 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5599cc7208f8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5599cc720800 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5599cc7368e8 <col:36, line:541:5>
|   |-ParenExpr 0x5599cc736688 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc736658 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc7363b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc736380 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc736290 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc736278 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc736238 <col:23> 'int' lvalue ParmVar 0x5599cc720800 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc736258 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc736360 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc736348 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc7362b0 <col:33> 'int' lvalue ParmVar 0x5599cc720800 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc736328 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc736310 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc7362d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc7362f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5599cc736410 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc7363f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc7365b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7365a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc736580 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc7365f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc736480 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5599cc736610 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc7364b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc736628 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc7364f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5599cc736640 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc736568 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc736550 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc736510 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5599cc7368d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5599cc7368c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5599cc7368a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc736878 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5599cc736820 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc7367f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc7367a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc736780 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc736750 <col:61> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc736740 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc736808 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc7367d0 <col:74> 'int' lvalue ParmVar 0x5599cc720800 'i' 'int'
|-CXXMethodDecl 0x5599cc720ac8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5599cc7209b8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5599cc720a30 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5599cc720b78 <col:20>
| `-OptimizeNoneAttr 0x5599cc720bd0 <col:30>
|-CXXMethodDecl 0x5599cc720d08 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5599cc720c10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5599cc736fb8 <col:35, line:562:5>
|   |-ParenExpr 0x5599cc736d58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc736d28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc736a80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc736a50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc736960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc736948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc736908 <col:23> 'int' lvalue ParmVar 0x5599cc720c10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc736928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc736a30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc736a18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc736980 <col:33> 'int' lvalue ParmVar 0x5599cc720c10 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc7369f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc7369e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc7369a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc7369c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5599cc736ae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc736ac0 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc736c88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc736c70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc736c50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc736cc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc736b50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5599cc736ce0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc736b88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc736cf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc736bc0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5599cc736d10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc736c38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc736c20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc736be0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5599cc736fa8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5599cc736f90 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5599cc736f78 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc736f48 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5599cc736ef0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc736ec0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc736e70 <col:60, col:69> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc736e50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc736e20 <col:60> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc736e10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc736ed8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc736ea0 <col:73> 'int' lvalue ParmVar 0x5599cc720c10 'i' 'int'
|-CXXMethodDecl 0x5599cc720f18 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5599cc720dc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5599cc720e40 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5599cc737698 <col:41, line:577:5>
|   |-ParenExpr 0x5599cc737428 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc7373f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc737150 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc737120 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc737030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc737018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc736fd8 <col:23> 'int' lvalue ParmVar 0x5599cc720dc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc736ff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc737100 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc7370e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc737050 <col:33> 'int' lvalue ParmVar 0x5599cc720dc8 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc7370c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc7370b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc737070 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc737090 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5599cc7371b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc737190 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc737358 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc737340 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc737320 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc737398 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc737220 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5599cc7373b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc737258 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc7373c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc737290 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5599cc7373e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc737308 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc7372f0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc7372b0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5599cc737678 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5599cc737628 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5599cc7375f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5599cc737598 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5599cc737568 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5599cc737518 <col:47, col:56> 'char [48]' lvalue ->c 0x5599cc728370
|     |     |   `-CXXMemberCallExpr 0x5599cc7374f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5599cc7374c8 <col:47> '<bound member function type>' ->xanno 0x5599cc71d658
|     |     |       `-CXXThisExpr 0x5599cc7374b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5599cc737580 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5599cc737548 <col:60> 'int' lvalue ParmVar 0x5599cc720dc8 'i' 'int'
|     `-ImplicitCastExpr 0x5599cc737660 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc737640 <col:65> 'int32_t':'int' lvalue ParmVar 0x5599cc720e40 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5599cc7210d8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5599cc720fe0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5599cc737dc8 <col:36, line:591:5>
|   |-ParenExpr 0x5599cc737b08 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc737ad8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc737830 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc737800 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc737710 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc7376f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc7376b8 <col:23> 'int' lvalue ParmVar 0x5599cc720fe0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc7376d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc7377e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc7377c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc737730 <col:33> 'int' lvalue ParmVar 0x5599cc720fe0 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc7377a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc737790 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc737750 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc737770 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5599cc737890 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc737870 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc737a38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc737a20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc737a00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc737a78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc737900 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5599cc737a90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc737938 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc737aa8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc737970 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5599cc737ac0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc7379e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc7379d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc737990 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5599cc737db8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5599cc737da0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5599cc737d88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc737d58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5599cc737cd0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc737ca0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc737c50 <col:61, col:70> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc737c30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc737c00 <col:61> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc737bf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc737cb8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc737c80 <col:74> 'int' lvalue ParmVar 0x5599cc720fe0 'i' 'int'
|-CXXMethodDecl 0x5599cc721328 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5599cc721198 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5599cc721210 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5599cc7384a8 <col:42, line:606:5>
|   |-ParenExpr 0x5599cc738238 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5599cc738208 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc737f60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc737f30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc737e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc737e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc737de8 <col:23> 'int' lvalue ParmVar 0x5599cc721198 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc737e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc737f10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5599cc737ef8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc737e60 <col:33> 'int' lvalue ParmVar 0x5599cc721198 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc737ed8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc737ec0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc737e80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5599cc737ea0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5599cc737fc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc737fa0 <col:60> 'int' 0
|   |   `-CallExpr 0x5599cc738168 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5599cc738150 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc738130 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc7381a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc738030 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5599cc7381c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc738068 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc7381d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc7380a0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5599cc7381f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc738118 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc738100 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc7380c0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5599cc738488 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5599cc738438 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5599cc738408 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5599cc7383a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5599cc738378 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5599cc738328 <col:48, col:57> 'char [48]' lvalue ->c 0x5599cc728370
|     |     |   `-CXXMemberCallExpr 0x5599cc738308 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5599cc7382d8 <col:48> '<bound member function type>' ->xanno 0x5599cc71d658
|     |     |       `-CXXThisExpr 0x5599cc7382c8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5599cc738390 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5599cc738358 <col:61> 'int' lvalue ParmVar 0x5599cc721198 'i' 'int'
|     `-ImplicitCastExpr 0x5599cc738470 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc738450 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5599cc721210 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5599cc7214c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5599cc7213f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5599cc738d18 <col:33, line:620:5>
|   |-ParenExpr 0x5599cc738a90 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5599cc738a60 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc7386b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc738680 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc738520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc738508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc7384c8 <col:23> 'int' lvalue ParmVar 0x5599cc7213f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc7384e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc738660 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5599cc738648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc738540 <col:33> 'int' lvalue ParmVar 0x5599cc7213f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc738628 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc738610 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc738560 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5599cc7385e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5599cc7385d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5599cc738598 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5599cc738710 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc7386f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5599cc7389c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7389a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc738988 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc738a00 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc7387f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5599cc738a18 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc738840 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc738a30 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc738878 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5599cc738a48 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc738970 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc738958 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc738918 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5599cc738d08 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5599cc738cf0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5599cc738cd8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5599cc738ca8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5599cc738c20 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5599cc738bf0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5599cc738ba0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5599cc728370
|             |   `-CXXMemberCallExpr 0x5599cc738b80 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5599cc738b50 <col:67> '<bound member function type>' ->xanno 0x5599cc71d4b8
|             |       `-CXXThisExpr 0x5599cc738b40 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5599cc738c08 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc738bd0 <col:80> 'int' lvalue ParmVar 0x5599cc7213f0 'i' 'int'
|-CXXMethodDecl 0x5599cc7216d8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5599cc721580 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5599cc721600 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5599cc739540 <col:45, line:635:5>
|   |-ParenExpr 0x5599cc739288 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5599cc739258 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5599cc738f20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5599cc738ef0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5599cc738d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5599cc738d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5599cc738d38 <col:23> 'int' lvalue ParmVar 0x5599cc721580 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5599cc738d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5599cc738ed0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5599cc738eb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5599cc738db0 <col:33> 'int' lvalue ParmVar 0x5599cc721580 'i' 'int'
|   |   |     `-BinaryOperator 0x5599cc738e98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5599cc738e80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5599cc738dd0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5599cc71d8a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5599cc738e58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5599cc738e40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5599cc738e08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5599cc738f80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5599cc738f60 <col:79> 'int' 0
|   |   `-CallExpr 0x5599cc7391b8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5599cc7391a0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc739180 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5599cc7391f8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc738ff0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5599cc739210 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5599cc739038 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5599cc739228 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5599cc739070 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5599cc739240 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5599cc739168 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5599cc739150 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5599cc739108 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5599cc739520 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5599cc739488 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5599cc739458 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5599cc7393f8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5599cc7393c8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5599cc739378 <col:54, col:63> 'char [48]' lvalue ->c 0x5599cc728370
|     |     |   `-CXXMemberCallExpr 0x5599cc739358 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5599cc739328 <col:54> '<bound member function type>' ->xanno 0x5599cc71d658
|     |     |       `-CXXThisExpr 0x5599cc739318 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5599cc7393e0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5599cc7393a8 <col:67> 'int' lvalue ParmVar 0x5599cc721580 'i' 'int'
|     `-CXXConstCastExpr 0x5599cc7394f0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5599cc7394d8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5599cc7394a0 <col:91> 'const void *' lvalue ParmVar 0x5599cc721600 'x' 'const void *'
|-CXXMethodDecl 0x5599cc7217a8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5599cc7395c8 <col:34, line:640:5>
|   `-ReturnStmt 0x5599cc7395b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5599cc7395a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5599cc739570 <col:16> 'Packet *' lvalue ->_data_packet 0x5599cc728f28
|         `-CXXThisExpr 0x5599cc739560 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5599cc7218e8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5599cc721858 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc732688 <col:46> 'bool' true
|-CXXMethodDecl 0x5599cc721a68 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5599cc7219a0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5599cc721b10 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5599cc7222c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5599cc721c10 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722330 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721bf0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5599cc721bd0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5599cc716d70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5599cc721ca0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722348 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721c80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5599cc721c60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5599cc716e00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5599cc721d30 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722360 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721d10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc721cf0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5599cc721dc0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722378 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721da0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5599cc721d80 <col:19> 'int' 16
| |-EnumConstantDecl 0x5599cc721e50 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722390 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721e30 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5599cc721e10 <col:21> 'int' 16
| |-EnumConstantDecl 0x5599cc721ee0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc7223a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721ec0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5599cc721ea0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5599cc721f70 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc7223c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721f50 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5599cc721f30 <col:19> 'int' EnumConstant 0x5599cc721dc0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5599cc722000 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc7223d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc721fe0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5599cc721fc0 <col:19> 'int' EnumConstant 0x5599cc721ee0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5599cc7220d0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc7223f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc7220b0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5599cc722090 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5599cc722050 <col:23> 'int' EnumConstant 0x5599cc722000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5599cc722070 <col:40> 'int' 2
| |-EnumConstantDecl 0x5599cc7221a0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5599cc722408 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc722180 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5599cc722160 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5599cc722120 <col:23> 'int' EnumConstant 0x5599cc722000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5599cc722140 <col:40> 'int' 4
| `-EnumConstantDecl 0x5599cc722270 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5599cc722420 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc722250 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5599cc722230 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5599cc7221f0 <col:23> 'int' EnumConstant 0x5599cc722000 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5599cc722210 <col:40> 'int' 8
|-CXXMethodDecl 0x5599cc722460 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5599cc722500 <col:68> "" ""
|-CXXMethodDecl 0x5599cc722598 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5599cc722638 <col:45> "" ""
|-CXXMethodDecl 0x5599cc7226d0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5599cc722770 <col:57> "" ""
|-CXXMethodDecl 0x5599cc722808 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5599cc7228a8 <col:45> "" ""
|-CXXMethodDecl 0x5599cc722940 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5599cc7229e0 <col:57> "" ""
|-CXXMethodDecl 0x5599cc722a70 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5599cc722b10 <col:51> "" ""
|-CXXMethodDecl 0x5599cc722ba0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5599cc722c40 <col:63> "" ""
|-CXXMethodDecl 0x5599cc722cd0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5599cc722d70 <col:53> "" ""
|-CXXMethodDecl 0x5599cc722e00 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5599cc722ea0 <col:65> "" ""
|-CXXMethodDecl 0x5599cc722fb8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5599cc722f28 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5599cc723060 <col:61> "" ""
|-CXXMethodDecl 0x5599cc7231f8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5599cc7230e8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5599cc723160 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5599cc7232a8 <col:67> "" ""
|-CXXMethodDecl 0x5599cc7233c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5599cc723330 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5599cc723468 <col:63> "" ""
|-CXXMethodDecl 0x5599cc723600 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5599cc7234f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5599cc723568 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5599cc7236b0 <col:69> "" ""
|-CXXMethodDecl 0x5599cc7237c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5599cc723738 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5599cc723870 <col:63> "" ""
|-CXXMethodDecl 0x5599cc725f48 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5599cc725e38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5599cc725eb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc725ff8 <col:69> "" ""
|-CXXMethodDecl 0x5599cc726110 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5599cc726080 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5599cc7261b8 <col:62> "" ""
|-CXXMethodDecl 0x5599cc726350 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5599cc726240 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5599cc7262b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5599cc726400 <col:68> "" ""
|-CXXMethodDecl 0x5599cc726518 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5599cc726488 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5599cc7265c0 <col:63> "" ""
|-CXXMethodDecl 0x5599cc726758 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5599cc726648 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5599cc7266c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5599cc726808 <col:69> "" ""
|-CXXMethodDecl 0x5599cc726898 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5599cc726938 <col:64> "" ""
|-CXXMethodDecl 0x5599cc7269c8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5599cc726a68 <col:52> "" ""
|-CXXMethodDecl 0x5599cc726af8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5599cc726b98 <col:67> "" ""
|-CXXMethodDecl 0x5599cc726c28 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5599cc726cc8 <col:55> "" ""
|-CXXMethodDecl 0x5599cc726de0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5599cc726d50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5599cc726e88 <col:58> "" ""
|-CXXMethodDecl 0x5599cc727020 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5599cc726f10 <col:33> col:36 'int'
| |-ParmVarDecl 0x5599cc726f88 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5599cc7270d0 <col:62> "" ""
|-CXXMethodDecl 0x5599cc7271e8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5599cc727158 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5599cc727290 <col:58> "" ""
|-CXXMethodDecl 0x5599cc727428 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5599cc727318 <col:33> col:36 'int'
| |-ParmVarDecl 0x5599cc727390 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5599cc7274d8 <col:62> "" ""
|-CXXMethodDecl 0x5599cc7275f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5599cc727560 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5599cc727698 <col:60> "" ""
|-CXXMethodDecl 0x5599cc727830 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5599cc727720 <col:34> col:37 'int'
| |-ParmVarDecl 0x5599cc727798 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5599cc7278e0 <col:64> "" ""
|-CXXMethodDecl 0x5599cc7279f8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5599cc727968 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5599cc727aa0 <col:58> "" ""
|-CXXMethodDecl 0x5599cc727c38 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5599cc727b28 <col:33> col:36 'int'
| |-ParmVarDecl 0x5599cc727ba0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5599cc727ce8 <col:62> "" ""
|-CXXMethodDecl 0x5599cc727e00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5599cc727d70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5599cc727ea8 <col:59> "" ""
|-CXXMethodDecl 0x5599cc728040 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5599cc727f30 <col:33> col:36 'int'
| |-ParmVarDecl 0x5599cc727fa8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc7280f0 <col:63> "" ""
|-AccessSpecDecl 0x5599cc728160 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5599cc728188 prev 0x5599cc71d390 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5599cc728280 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5599cc728370 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5599cc728498 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5599cc728618 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5599cc728798 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5599cc728918 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5599cc739748 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5599cc739fb8 <col:11>
| |-CXXDestructorDecl 0x5599cc739820 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5599cc739958 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5599cc739958
| | `-ParmVarDecl 0x5599cc739a68 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5599cc739b08 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5599cc739b08
| | `-ParmVarDecl 0x5599cc739c18 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5599cc73c9d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc73cae8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5599cc73cd68 <col:11>
| |   `-ReturnStmt 0x5599cc73cd58 <col:11>
| |     `-UnaryOperator 0x5599cc73cd40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5599cc73cd30 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5599cc73cb58 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5599cc73cb58
|   `-ParmVarDecl 0x5599cc73cc68 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5599cc728980 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5599cc728a98 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5599cc728b38 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5599cc728ba0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5599cc728c08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5599cc728c70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5599cc728cd0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5599cc728d90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5599cc728df0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5599cc728e50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5599cc739658 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5599cc728b38 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5599cc739fc8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5599cc73a020 <col:12>
| |-CXXConstructorDecl 0x5599cc739c88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5599cc739c88
| | `-ParmVarDecl 0x5599cc739d98 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5599cc739e38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5599cc739e38
| | `-ParmVarDecl 0x5599cc739f48 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5599cc73c0c0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5599cc728ec8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5599cc728f28 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5599cc728f90 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5599cc728ff8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5599cc729060 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5599cc7290c8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5599cc729128 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5599cc729188 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5599cc7291f0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5599cc729278 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5599cc728ec8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5599cc7395f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5599cc729128 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5599cc73a030 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5599cc73a090 <col:21, line:755:5>
|-CXXConstructorDecl 0x5599cc729418 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5599cc729358 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5599cc729510 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5599cc7296f8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5599cc729600 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5599cc7299c8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5599cc7297b0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc729828 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc7298a0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc729be8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5599cc729a98 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5599cc729b10 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5599cc7321c8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5599cc729ca8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5599cc729d20 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5599cc729d98 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5599cc732320 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5599cc732290 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc732468 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5599cc7323d8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5599cc732560 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc6e8420 prev 0x5599cc6df260 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc6e8518 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5599cc6e85b8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5599cc6ef380 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5599cc6ef768 <col:11>
|-CXXConstructorDecl 0x5599cc6ef460 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc6ef548 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5599cc6efeb0 <col:11>
|-CXXConstructorDecl 0x5599cc6ef5e8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc6ef6f8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5599cc6f1708 <col:11>
|-CXXDestructorDecl 0x5599cc6f0a18 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5599cc3f75c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc3f76d8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5599cc3f7fa0 <col:11>
|   `-ReturnStmt 0x5599cc3f7f90 <col:11>
|     `-UnaryOperator 0x5599cc3f7f78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc3f7f68 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5599cc3f7748 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5599cc3f7858 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5599cc785a40 <col:11>
    `-ReturnStmt 0x5599cc785a30 <col:11>
      `-UnaryOperator 0x5599cc785a18 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5599cc785a08 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc6de418 prev 0x5599cc6de128 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc6de510 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5599cc6de5a0 <col:19, col:25> col:19 public
|-TypedefDecl 0x5599cc6de5d8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5599cc3437a0 'int32_t' sugar
|   |-Typedef 0x5599cc256238 'int32_t'
|   `-TypedefType 0x5599cc22f3f0 '__int32_t' sugar
|     |-Typedef 0x5599cc22f008 '__int32_t'
|     `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc6de640 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5599cc343960 'int64_t' sugar
|   |-Typedef 0x5599cc2562a0 'int64_t'
|   `-TypedefType 0x5599cc22f510 '__int64_t' sugar
|     |-Typedef 0x5599cc22f0e8 '__int64_t'
|     `-BuiltinType 0x5599cc1ed3d0 'long'
|-EnumDecl 0x5599cc6de698 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5599cc6de810 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5599cc6de7f0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5599cc6de7c8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5599cc6de7b0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5599cc6de780 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5599cc6de908 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5599cc6de8e8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5599cc6de8c0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5599cc6de8a8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5599cc6de880 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5599cc6de860 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5599cc6de958 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5599cc6dea60 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6defb0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6dea40 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5599cc6dea20 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5599cc6deaf0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6defc8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6dead0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5599cc6deab0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5599cc6deb80 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6defe0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6deb60 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5599cc6deb40 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5599cc6dec10 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6deff8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6debf0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5599cc6debd0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5599cc6deca0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6df010 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6dec80 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5599cc6dec60 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5599cc6ded30 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6df028 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6ded10 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5599cc6decf0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5599cc6dedc0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6df040 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6deda0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5599cc6ded80 <col:26> 'int' EnumConstant 0x5599cc6dea60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5599cc6dee90 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5599cc6df058 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6dee70 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5599cc6dee50 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5599cc6dee10 <col:27> 'int' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5599cc6dee30 <col:44> 'int' EnumConstant 0x5599cc6ded30 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5599cc6def60 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5599cc6df070 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc6def40 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5599cc6def20 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5599cc6deee0 <col:27> 'int' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5599cc6def00 <col:44> 'int' EnumConstant 0x5599cc6dec10 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5599cc6df088 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5599cc6df190 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5599cc6df1e0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc6df170 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5599cc6df150 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5599cc6df208 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5599cc3433d0 'uninitialized_type'
|   `-CXXRecord 0x5599cc343338 'uninitialized_type'
|-CXXRecordDecl 0x5599cc6df260 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5599cc6df370 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6ef778 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6ef898 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5599cc6ef850 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5599cc6ef7e0 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6ef7d0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5599cc6ef810 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5599cc6ef880 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5599cc6ef830 <col:19> 'int' 0
|-CXXConstructorDecl 0x5599cc6df5b8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6df430 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5599cc6df4a8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb0b0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb090 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6ef8b0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6efa00 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5599cc6ef988 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5599cc6ef918 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6ef908 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc6ef9d0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5599cc6ef9b8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5599cc6ef948 <col:16> 'long' lvalue ParmVar 0x5599cc6df430 'sec' 'long'
|     `-ImplicitCastExpr 0x5599cc6ef9e8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc6ef968 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6df4a8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5599cc6df818 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6df688 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5599cc6df700 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb0e8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb0c8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6efa18 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6efb50 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5599cc6efaf0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5599cc6efa80 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6efa70 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc6efb20 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc6efab0 <col:16> 'int' lvalue ParmVar 0x5599cc6df688 'sec' 'int'
|     `-ImplicitCastExpr 0x5599cc6efb38 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc6efad0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6df700 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5599cc6dfa78 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6df8e8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5599cc6df960 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb120 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb100 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6efb68 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6efcb8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5599cc6efc40 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5599cc6efbd0 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6efbc0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc6efc88 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5599cc6efc70 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5599cc6efc00 <col:16> 'unsigned long' lvalue ParmVar 0x5599cc6df8e8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5599cc6efca0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc6efc20 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6df960 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5599cc6e0c10 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6dfb48 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5599cc6dfbc0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb158 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb138 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6efcd0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6efe20 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5599cc6efda8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5599cc6efd38 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6efd28 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc6efdf0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5599cc6efdd8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5599cc6efd68 <col:16> 'unsigned int' lvalue ParmVar 0x5599cc6dfb48 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5599cc6efe08 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc6efd88 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6dfbc0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5599cc6e0d70 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5599cc6e0ce0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5599cc6e0f08 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5599cc6e0e48 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5599cc6e1138 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5599cc6e1040 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5599cc6e12e8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5599cc6e1228 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6efec0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5599cc6efe38 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5599cc6e1228 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5599cc6eff20 <col:19, line:214:5>
|-CXXConstructorDecl 0x5599cc6e14b8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5599cc6e13f8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6eff30 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc6effe0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5599cc6effb8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5599cc6eff88 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5599cc6e13f8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5599cc6e16a8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5599cc6e1620 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5599cc6de1c0 'Timestamp'
|   | `-CXXRecord 0x5599cc6de418 'Timestamp'
|   `-ParenType 0x5599cc6e15c0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5599cc6e1590 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5599cc6de760 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5599cc6de5d8 'seconds_type'
|         `-TypedefType 0x5599cc3437a0 'int32_t' sugar
|           |-Typedef 0x5599cc256238 'int32_t'
|           `-TypedefType 0x5599cc22f3f0 '__int32_t' sugar
|             |-Typedef 0x5599cc22f008 '__int32_t'
|             `-BuiltinType 0x5599cc1ed3b0 'int'
|-CXXConversionDecl 0x5599cc6e17e8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5599cc6e18b8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5599cc6f00e8 <col:37, line:231:5>
|   `-ReturnStmt 0x5599cc6f00d8 <line:227:9, col:23>
|     `-BinaryOperator 0x5599cc6f00b8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5599cc6f0088 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5599cc6f0038 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5599cc6e85b8
|       |   `-MemberExpr 0x5599cc6f0008 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|       |     `-CXXThisExpr 0x5599cc6efff8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5599cc6f00a0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5599cc6f0068 <col:23> 'int' 0
|-CXXMethodDecl 0x5599cc6e1978 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5599cc6e1a38 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc6e1af8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc6e1bb8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc6e1c78 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc6e1de8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5599cc6e1d28 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5599cc6e1f30 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5599cc6e1ea0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e1ff8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5599cc6e2098 <col:54> "" ""
|-CXXMethodDecl 0x5599cc6e2128 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5599cc6e21c8 <col:54> "" ""
|-CXXMethodDecl 0x5599cc6e2258 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5599cc6e22f8 <col:54> "" ""
|-CXXMethodDecl 0x5599cc6e23f8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5599cc6e24c8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5599cc6e25f8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5599cc6e26f0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5599cc6e2828 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5599cc6f0300 <col:39, line:271:5>
|   `-ReturnStmt 0x5599cc6f02f0 <line:267:9, col:61>
|     `-CallExpr 0x5599cc6f0290 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5599cc6f0278 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc6f0100 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5599cc6e9898 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5599cc6f02c0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5599cc6f0160 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5599cc6e85b8
|       |   `-MemberExpr 0x5599cc6f0130 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|       |     `-CXXThisExpr 0x5599cc6f0120 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5599cc6f02d8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5599cc6f0200 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5599cc6f01d0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5599cc6f0190 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5599cc6f01e8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5599cc6f01b0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6ded30 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e28e8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5599cc6f04c0 <col:39, line:279:5>
|   `-ReturnStmt 0x5599cc6f04b0 <line:275:9, col:61>
|     `-CallExpr 0x5599cc6f0450 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5599cc6f0438 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc6f0318 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5599cc6e9898 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5599cc6f0480 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5599cc6f0378 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5599cc6e85b8
|       |   `-MemberExpr 0x5599cc6f0348 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|       |     `-CXXThisExpr 0x5599cc6f0338 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5599cc6f0498 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5599cc6f0418 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5599cc6f03e8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5599cc6f03a8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5599cc6f0400 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5599cc6f03c8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dec10 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e29a8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5599cc6f0658 <col:39, line:287:5>
|   `-ReturnStmt 0x5599cc6f0648 <line:283:9, col:53>
|     `-BinaryOperator 0x5599cc6f0628 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5599cc6f05f8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5599cc6f0518 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5599cc6e85b8
|       |   `-MemberExpr 0x5599cc6f04e8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|       |     `-CXXThisExpr 0x5599cc6f04d8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5599cc6f0610 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5599cc6f05d8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5599cc6f05b8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc6f0588 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc6f0548 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dea60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc6f05a0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc6f0568 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e2a98 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5599cc6f18f0 <col:40, line:293:5>
|   |-DeclStmt 0x5599cc6f07a0 <line:291:9, col:48>
|   | `-VarDecl 0x5599cc6f0680 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5599cc6f0780 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5599cc6f0728 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5599cc6f06f8 <col:22> '<bound member function type>' ->subsec 0x5599cc6e1a38
|   |     |   `-CXXThisExpr 0x5599cc6f06e8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5599cc6f0768 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5599cc6f0748 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dee90 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5599cc6f18e0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5599cc6f18c8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f1898 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f1880 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5599cc6f1860 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5599cc6f1830 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5599cc6f15c8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5599cc6f15b0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5599cc6f07b8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5599cc6f0680 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5599cc6f17d0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5599cc6f17b8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5599cc6f1788 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5599cc6f15e0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5599cc6f1550 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5599cc6f1538 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5599cc6f14e8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc6de368 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5599cc6f1488 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5599cc6f07e8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5599cc6f07d8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5599cc6f14d0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5599cc6f14b8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5599cc6f0ca8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5599cc6f0810 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5599cc6f08a0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5599cc6f0870 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5599cc6f0830 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dee90 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5599cc6f0888 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5599cc6f0850 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5599cc6f0680 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5599cc6f1800 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5599cc6f1598 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5599cc6f1588 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5599cc6e2b58 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5599cc6f1e48 <col:40, line:302:5>
|   |-DeclStmt 0x5599cc6f1a40 <line:297:9, col:48>
|   | `-VarDecl 0x5599cc6f1920 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5599cc6f1a20 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5599cc6f19c8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5599cc6f1998 <col:22> '<bound member function type>' ->subsec 0x5599cc6e1a38
|   |     |   `-CXXThisExpr 0x5599cc6f1988 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5599cc6f1a08 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5599cc6f19e8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6def60 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5599cc6f1e38 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5599cc6f1e20 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f1df0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f1dd8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5599cc6f1db8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5599cc6f1d88 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5599cc6f1cb0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5599cc6f1c98 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5599cc6f1a58 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5599cc6f1920 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5599cc6f1d28 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5599cc6f1d10 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5599cc6f1ce0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5599cc6f1cc8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5599cc6f1c38 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5599cc6f1c20 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5599cc6f1c00 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc6de368 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5599cc6f1ba0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5599cc6f1a88 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5599cc6f1a78 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5599cc6f1be8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5599cc6f1bd0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5599cc6f1b60 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5599cc6f1ab0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5599cc6f1b40 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5599cc6f1b10 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5599cc6f1ad0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6def60 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5599cc6f1b28 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5599cc6f1af0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5599cc6f1920 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5599cc6f1d58 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5599cc6f1c80 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5599cc6f1c70 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5599cc6e2c18 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5599cc6f1ed0 <col:40, line:306:5>
|   `-ReturnStmt 0x5599cc6f1ec0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5599cc6f1e90 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5599cc6f1e78 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc6f1e68 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5599cc6e2db8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5599cc6e2cc8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e2f88 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5599cc6e2e90 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5599cc6e3078 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5599cc6e31e8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5599cc6e3128 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5599cc6f2018 <col:56, line:320:5>
|   `-ReturnStmt 0x5599cc6f2008 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5599cc6f1ff0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f1fc0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f1fa8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5599cc6f1f68 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5599cc6f1f38 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5599cc6f1ef8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e3128 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5599cc6f1f50 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5599cc6f1f18 <col:31> 'int' 0
|-CXXMethodDecl 0x5599cc6e3428 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e32a0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e3318 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc6f21e8 <col:72, line:326:5>
|   `-ReturnStmt 0x5599cc6f21d8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5599cc6f21c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f2190 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f2178 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5599cc6f2138 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5599cc6f2120 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5599cc6f2040 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e32a0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5599cc6f20e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5599cc6f20c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5599cc6f2060 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5599cc6e7d10 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5599cc6f2108 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5599cc6f2080 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e3318 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e35d8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5599cc6e34e8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5599cc6f28b0 <col:56, line:337:5>
|   |-DeclStmt 0x5599cc6f24e8 <line:329:9, col:51>
|   | `-VarDecl 0x5599cc6f2210 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5599cc6f24d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5599cc6f24a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5599cc6f2488 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5599cc6f2470 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5599cc6f2440 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5599cc6f2428 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5599cc6f2410 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5599cc6f2300 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5599cc6f26a0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5599cc6f2550 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5599cc6e85b8
|   | | `-MemberExpr 0x5599cc6f2520 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5599cc6e9568
|   | |   `-DeclRefExpr 0x5599cc6f2500 <col:9> 'Timestamp' lvalue Var 0x5599cc6f2210 't' 'Timestamp'
|   | `-BinaryOperator 0x5599cc6f2680 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5599cc6f2650 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5599cc6f2580 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5599cc6e34e8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5599cc6f2668 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5599cc6f2630 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5599cc6f2610 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5599cc6f25e0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5599cc6f25a0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5599cc6f25f8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5599cc6f25c0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6ded30 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5599cc6f2898 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5599cc6f2868 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5599cc6f2850 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5599cc6f2830 <col:16> 'Timestamp' lvalue Var 0x5599cc6f2210 't' 'Timestamp'
|-CXXMethodDecl 0x5599cc6e37a0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e3690 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e3708 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc6f2a68 <col:72, line:343:5>
|   `-ReturnStmt 0x5599cc6f2a58 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5599cc6f2a40 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f2a10 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f29f8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5599cc6f29b8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5599cc6f29a0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5599cc6f28e8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e3690 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5599cc6f2960 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5599cc6f2948 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5599cc6f2908 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5599cc6e7e58 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5599cc6f2988 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5599cc6f2928 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e3708 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e38f0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5599cc6e3860 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5599cc6f2eb0 <col:56, line:354:5>
|   |-DeclStmt 0x5599cc6f2c58 <line:346:9, col:51>
|   | `-VarDecl 0x5599cc6f2a90 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5599cc6f2c40 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5599cc6f2c10 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5599cc6f2bf8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5599cc6f2be0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5599cc6f2bb0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5599cc6f2b98 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5599cc6f2b80 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5599cc6f2b50 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5599cc6f2e10 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5599cc6f2cc0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5599cc6e85b8
|   | | `-MemberExpr 0x5599cc6f2c90 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5599cc6e9568
|   | |   `-DeclRefExpr 0x5599cc6f2c70 <col:9> 'Timestamp' lvalue Var 0x5599cc6f2a90 't' 'Timestamp'
|   | `-BinaryOperator 0x5599cc6f2df0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5599cc6f2dc0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5599cc6f2cf0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5599cc6e3860 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5599cc6f2dd8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5599cc6f2da0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5599cc6f2d80 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5599cc6f2d50 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5599cc6f2d10 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5599cc6f2d68 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5599cc6f2d30 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dec10 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5599cc6f2e98 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5599cc6f2e68 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5599cc6f2e50 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5599cc6f2e30 <col:16> 'Timestamp' lvalue Var 0x5599cc6f2a90 't' 'Timestamp'
|-CXXMethodDecl 0x5599cc6e3ab8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e39a8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e3a20 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc6f3068 <col:72, line:360:5>
|   `-ReturnStmt 0x5599cc6f3058 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5599cc6f3040 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6f3010 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6f2ff8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5599cc6f2fb8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5599cc6f2fa0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5599cc6f2ee8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e39a8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5599cc6f2f60 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5599cc6f2f48 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5599cc6f2f08 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5599cc6e7fa0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5599cc6f2f88 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5599cc6f2f28 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e3a20 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e3c08 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5599cc6e3b78 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5599cc6ff9d8 <col:56, line:371:5>
|   |-DeclStmt 0x5599cc6f3258 <line:363:9, col:51>
|   | `-VarDecl 0x5599cc6f3090 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5599cc6f3240 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5599cc6f3210 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5599cc6f31f8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5599cc6f31e0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5599cc6f31b0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5599cc6f3198 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5599cc6f3180 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5599cc6f3150 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5599cc6ff938 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5599cc6f32c0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5599cc6e85b8
|   | | `-MemberExpr 0x5599cc6f3290 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5599cc6e9568
|   | |   `-DeclRefExpr 0x5599cc6f3270 <col:9> 'Timestamp' lvalue Var 0x5599cc6f3090 't' 'Timestamp'
|   | `-CallExpr 0x5599cc6ff8d8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5599cc6ff8c0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5599cc6f32f0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5599cc6e9898 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5599cc6ff908 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5599cc6f3310 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5599cc6e3b78 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5599cc6ff920 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5599cc6ff8a0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5599cc6ff870 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5599cc6f3330 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dea60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5599cc6ff888 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5599cc6f3350 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5599cc6ff9c0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5599cc6ff990 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5599cc6ff978 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5599cc6ff958 <col:16> 'Timestamp' lvalue Var 0x5599cc6f3090 't' 'Timestamp'
|-CXXMethodDecl 0x5599cc6e3cf8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5599cc6ffb18 <col:39, line:377:5>
|   `-ReturnStmt 0x5599cc6ffb08 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5599cc6ffaf0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc6ffac0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc6ffaa8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5599cc6ffa68 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5599cc6ffa10 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5599cc6ffa50 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5599cc6ffa30 <col:29> 'int' 1
|-CXXMethodDecl 0x5599cc6e3db8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5599cc6ffbf8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5599cc6ffbb0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5599cc6ffb40 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6ffb30 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5599cc6ffb70 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5599cc6ffbe0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5599cc6ffb90 <col:19> 'int' 0
|-CXXMethodDecl 0x5599cc6e3fb8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e3e68 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e3ee0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb190 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb170 <col:60> 'int' 0
| `-CompoundStmt 0x5599cc6ffdf0 <col:63, line:395:5>
|   `-BinaryOperator 0x5599cc6ffdd0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5599cc6ffc50 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5599cc6e85b8
|     | `-MemberExpr 0x5599cc6ffc20 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|     |   `-CXXThisExpr 0x5599cc6ffc10 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5599cc6ffdb0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5599cc6ffd40 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5599cc6ffce0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5599cc6ffcc8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5599cc6ffcb0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5599cc6ffc80 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e3e68 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5599cc6ffd28 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5599cc6ffd08 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5599cc6ffd98 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5599cc6ffd80 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5599cc6ffd60 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e3ee0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e4188 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e4078 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e40f0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc6fff48 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5599cc6fff00 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5599cc6ffe18 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6ffe08 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc6fff30 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc6ffe48 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e4078 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5599cc6ffec0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5599cc6ffea8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc6ffe68 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5599cc6e7e58 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5599cc6ffee8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc6ffe88 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e40f0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e4358 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e4248 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e42c0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc7000a0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5599cc700058 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5599cc6fff70 <col:9> '<bound member function type>' ->assign 0x5599cc6e3fb8
|     | `-CXXThisExpr 0x5599cc6fff60 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5599cc700088 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc6fffa0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5599cc6e4248 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5599cc700018 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5599cc700000 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc6fffc0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5599cc6e7fa0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5599cc700040 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc6fffe0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e42c0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e4528 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e4418 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e4490 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5599cc6eb1c8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5599cc6eb1a8 <col:57> 'int' 0
| `-DeprecatedAttr 0x5599cc6e45d8 <col:75> "" ""
|-CXXMethodDecl 0x5599cc6e4768 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e4658 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e46d0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc6e4818 <col:74> "" ""
|-CXXMethodDecl 0x5599cc6e49a8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5599cc6e4898 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5599cc6e4910 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc6e4a58 <col:74> "" ""
|-CXXMethodDecl 0x5599cc6e4ae8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5599cc6e4b88 <col:42> "" ""
|-CXXMethodDecl 0x5599cc6e73c0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5599cc6e72a0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5599cc6e7320 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5599cc6e7490 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e7550 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5599cc6e75f0 <col:20>
| `-OptimizeNoneAttr 0x5599cc6e7648 <col:30>
|-CXXMethodDecl 0x5599cc6e7690 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e7750 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5599cc6e7810 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e78d0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5599cc6e7990 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e7a50 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5599cc6e7b10 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5599cc6e7bd0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5599cc6e7d10 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e7c80 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc7001e8 <col:58, line:512:5>
|   `-ReturnStmt 0x5599cc7001d8 <line:511:9, col:53>
|     `-BinaryOperator 0x5599cc7001b8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5599cc700188 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc7000b8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e7c80 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc7001a0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc700168 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5599cc700148 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc700118 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc7000d8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc700130 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc7000f8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6ded30 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e7e58 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e7dc8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700330 <col:58, line:516:5>
|   `-ReturnStmt 0x5599cc700320 <line:515:9, col:53>
|     `-BinaryOperator 0x5599cc700300 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5599cc7002d0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc700200 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e7dc8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc7002e8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc7002b0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5599cc700290 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc700260 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc700220 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc700278 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc700240 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dec10 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e7fa0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e7f10 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700478 <col:58, line:520:5>
|   `-ReturnStmt 0x5599cc700468 <line:519:9, col:53>
|     `-BinaryOperator 0x5599cc700448 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5599cc700418 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc700348 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e7f10 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc700430 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc7003f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5599cc7003d8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc7003a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc700368 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dea60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc7003c0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc700388 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e80e8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e8058 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc7005c0 <col:60, line:524:5>
|   `-ReturnStmt 0x5599cc7005b0 <line:523:9, col:55>
|     `-BinaryOperator 0x5599cc700590 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5599cc700560 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc700490 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e8058 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc700578 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc700540 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5599cc700520 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc7004f0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc7004b0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc700508 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc7004d0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6ded30 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e8230 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e81a0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700708 <col:60, line:528:5>
|   `-ReturnStmt 0x5599cc7006f8 <line:527:9, col:55>
|     `-BinaryOperator 0x5599cc7006d8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5599cc7006a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc7005d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e81a0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc7006c0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc700688 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5599cc700668 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc700638 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc7005f8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc700650 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc700618 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dec10 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5599cc6e8378 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e82e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700850 <col:60, line:532:5>
|   `-ReturnStmt 0x5599cc700840 <line:531:9, col:55>
|     `-BinaryOperator 0x5599cc700820 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5599cc7007f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc700720 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e82e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5599cc700808 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5599cc7007d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5599cc7007b0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5599cc700780 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5599cc700740 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dea60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5599cc700798 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5599cc700760 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5599cc6dedc0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5599cc6e8420 prev 0x5599cc6df260 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5599cc6e8518 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5599cc6e85b8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5599cc6ef380 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5599cc6ef768 <col:11>
| |-CXXConstructorDecl 0x5599cc6ef460 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc6ef548 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5599cc6efeb0 <col:11>
| |-CXXConstructorDecl 0x5599cc6ef5e8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc6ef6f8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5599cc6f1708 <col:11>
| |-CXXDestructorDecl 0x5599cc6f0a18 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5599cc3f75c8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc3f76d8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5599cc3f7fa0 <col:11>
| |   `-ReturnStmt 0x5599cc3f7f90 <col:11>
| |     `-UnaryOperator 0x5599cc3f7f78 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5599cc3f7f68 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5599cc3f7748 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5599cc3f7858 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5599cc785a40 <col:11>
|     `-ReturnStmt 0x5599cc785a30 <col:11>
|       `-UnaryOperator 0x5599cc785a18 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc785a08 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5599cc6e8620 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5599cc6e8720 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5599cc6e8920 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6e8700 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc6e86e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5599cc6e87b0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5599cc6e8938 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6e8790 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5599cc6e8770 <col:23> 'int' 1
| |-EnumConstantDecl 0x5599cc6e8840 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5599cc6e8950 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc6e8820 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5599cc6e8800 <col:23> 'int' 2
| `-EnumConstantDecl 0x5599cc6e88d0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5599cc6e8968 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc6e88b0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5599cc6e8890 <col:27> 'int' 3
|-CXXMethodDecl 0x5599cc6e89a8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5599cc6e8a70 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5599cc6e8c78 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5599cc6e8b20 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5599cc6e8ba0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5599cc6eb1e0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5599cc6e8e88 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5599cc6e8d38 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5599cc6e8db0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5599cc6e8f58 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5599cc6e9018 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5599cc6e9188 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5599cc6e90c8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5599cc6e9250 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e9310 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5599cc6e93d0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5599cc6e9490 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5599cc6e9530 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5599cc6e9568 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5599cc6e95d8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5599cc700868 <col:27, line:684:5>
|-CXXMethodDecl 0x5599cc6e9698 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5599cc700878 <col:27, line:696:5>
|-CXXMethodDecl 0x5599cc6e9898 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e9748 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5599cc6e97c0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700a00 <col:66, line:700:5>
|   `-ReturnStmt 0x5599cc7009f0 <line:699:9, col:31>
|     `-CallExpr 0x5599cc700990 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5599cc700978 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc700928 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5599cc56bc48 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5599cc7009c0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5599cc7008e8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5599cc6e9748 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5599cc7009d8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc700908 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e97c0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc6e9c08 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5599cc6e9958 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5599cc6e99d0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5599cc6e9a48 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5599cc6e9ac0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc700d50 <col:64, line:707:5>
|   |-DeclStmt 0x5599cc700a90 <line:704:9, col:24>
|   | `-VarDecl 0x5599cc700a28 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5599cc700ca0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5599cc700aa8 <col:9> 'int32_t':'int' lvalue ParmVar 0x5599cc6e99d0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5599cc700c88 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5599cc700c20 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5599cc700c08 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5599cc700b88 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5599cc570f18 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5599cc700c58 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5599cc700b28 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5599cc6e9a48 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5599cc700c70 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5599cc700b48 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc6e9ac0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5599cc700b68 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5599cc700a28 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5599cc700d30 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5599cc700cc0 <col:9> 'int32_t':'int' lvalue ParmVar 0x5599cc6e9958 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5599cc700d18 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5599cc700d00 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc700ce0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5599cc700a28 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5599cc6e9ea8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5599cc6e9cd8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5599cc6e9d50 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5599cc6e9dc8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5599cc6ea148 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5599cc6e9f70 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5599cc6e9fe8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5599cc6ea060 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5599cc6ea2d8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5599cc6ea210 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5599cc6ea4d8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5599cc6ea390 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5599cc6ea408 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5599cc6ea7a8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5599cc6ea6e8 parent 0x5599cc1ed2b8 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5599cc6ea598 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5599cc6ea610 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5599cc6ea9c8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5599cc6ea908 parent 0x5599cc1ed2b8 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5599cc6ea7f8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5599cc6ea870 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5599cc6eab90 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5599cc6eaad8 parent 0x5599cc1ed2b8 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5599cc6eaa18 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5599cc6eae18 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5599cc6ead58 parent 0x5599cc1ed2b8 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5599cc6eac08 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5599cc6eac80 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5599cc6eb038 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5599cc6eaf78 parent 0x5599cc1ed2b8 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5599cc6eae68 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5599cc6eaee0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5599cc6f08c0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc6f09a8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6f1418 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5599cc6f13d0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5599cc6e9568
| |     `-DeclRefExpr 0x5599cc6f13b0 <col:7> 'const Timestamp' lvalue ParmVar 0x5599cc6f09a8 '' 'const Timestamp &'
| `-CompoundStmt 0x5599cc6f1478 <col:7>
|-CXXConstructorDecl 0x5599cc6f0b28 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc6f0c38 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5599cc6e9568 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5599cc6f1718 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5599cc6f16c0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5599cc6e9568
| |     `-CXXStaticCastExpr 0x5599cc6f1690 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc6f1660 <col:7> 'Timestamp' lvalue ParmVar 0x5599cc6f0c38 '' 'Timestamp &&'
| `-CompoundStmt 0x5599cc6f1778 <col:7>
|-CXXDestructorDecl 0x5599cc6f0ce8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5599cc3f7418 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc3f7528 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5599cc3f8018 <col:7>
|   |-CXXMemberCallExpr 0x5599cc3f7fb8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5599cc3f7ef8 <col:7> '<bound member function type>' .operator= 0x5599cc3f75c8
|   | | `-MemberExpr 0x5599cc3f7e08 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
|   | |   `-CXXThisExpr 0x5599cc3f7df8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5599cc3f7ec8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5599cc6e9568
|   |   `-DeclRefExpr 0x5599cc3f7ea8 <col:7> 'const Timestamp' lvalue ParmVar 0x5599cc3f7528 '' 'const Timestamp &'
|   `-ReturnStmt 0x5599cc3f8008 <col:7>
|     `-UnaryOperator 0x5599cc3f7ff0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc3f7fe0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5599cc3f78c8 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5599cc3f79d8 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5599cc785ab8 <col:7>
    |-CXXMemberCallExpr 0x5599cc785a58 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5599cc7859c0 <col:7> '<bound member function type>' .operator= 0x5599cc3f7748
    | | `-MemberExpr 0x5599cc785890 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5599cc6e9568
    | |   `-CXXThisExpr 0x5599cc785880 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5599cc785990 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5599cc6e9568
    |   `-CXXStaticCastExpr 0x5599cc785960 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5599cc785930 <col:7> 'Timestamp' lvalue ParmVar 0x5599cc3f79d8 '' 'Timestamp &&'
    `-ReturnStmt 0x5599cc785aa8 <col:7>
      `-UnaryOperator 0x5599cc785a90 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5599cc785a80 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc782a98 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5599cc782bc8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5599cc7836b8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc76d2c8 prev 0x5599cc74f710 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc76d3c0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5599cc76d450 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5599cc76d4b0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5599cc76d558 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5599cc76d678 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5599cc859290 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5599cc859290
| |-CXXConstructorDecl 0x5599cc859370 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x5599cc859370
| | `-ParmVarDecl 0x5599cc859458 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x5599cc8594f8 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x5599cc8594f8
|   `-ParmVarDecl 0x5599cc859608 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x5599cc76d818 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5599cc76d758 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5599cc76da68 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5599cc76d8d8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5599cc76d958 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5599cc76dbf8 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x5599cc76db30 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5599cc76dd78 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5599cc76dcb8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5599cc76df28 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5599cc76de68 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5599cc76e020 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5599cc783890 <col:21, line:58:5>
|   `-IfStmt 0x5599cc783878 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5599cc7837e0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5599cc7837b0 <col:6> '<bound member function type>' ->scheduled 0x5599cc76e878
|     |   `-ImplicitCastExpr 0x5599cc783800 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5599cc7837a0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5599cc783858 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5599cc783828 <col:6> '<bound member function type>' ->unschedule 0x5599cc781f40
|         `-CXXThisExpr 0x5599cc783818 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5599cc76e120 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5599cc783a30 <col:26, line:65:5>
|   |-BinaryOperator 0x5599cc783950 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5599cc7838e8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5599cc782bc8
|   | | `-MemberExpr 0x5599cc7838b8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5599cc782c88
|   | |   `-CXXThisExpr 0x5599cc7838a8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5599cc783938 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5599cc783918 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5599cc7830e8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5599cc783a10 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5599cc783980 <col:2> 'void *' lvalue ->_thunk 0x5599cc782d08
|     | `-CXXThisExpr 0x5599cc783970 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5599cc7839e8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5599cc7839b0 <col:20> 'int' 1
|-CXXMethodDecl 0x5599cc76e260 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5599cc76e1d0 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5599cc783b90 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5599cc783a80 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5599cc783a50 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5599cc76e1d0 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5599cc783b70 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5599cc783b40 <col:2> '<bound member function type>' ->assign 0x5599cc76e120
|       `-CXXThisExpr 0x5599cc783b30 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5599cc76e430 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5599cc76e318 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5599cc76e398 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5599cc783d10 <col:58, line:79:5>
|   |-BinaryOperator 0x5599cc783c58 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5599cc783bf0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5599cc782bc8
|   | | `-MemberExpr 0x5599cc783bc0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5599cc782c88
|   | |   `-CXXThisExpr 0x5599cc783bb0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5599cc783c40 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5599cc783c20 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5599cc76e318 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5599cc783cf0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5599cc783c88 <col:2> 'void *' lvalue ->_thunk 0x5599cc782d08
|     | `-CXXThisExpr 0x5599cc783c78 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5599cc783cd8 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc783cb8 <col:11> 'void *' lvalue ParmVar 0x5599cc76e398 'user_data' 'void *'
|-CXXMethodDecl 0x5599cc76e580 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5599cc76e4f0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5599cc783ea8 <col:35, line:87:5>
|   |-BinaryOperator 0x5599cc783dd8 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5599cc783d70 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5599cc782bc8
|   | | `-MemberExpr 0x5599cc783d40 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5599cc782c88
|   | |   `-CXXThisExpr 0x5599cc783d30 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5599cc783dc0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5599cc783da0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5599cc7832c0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5599cc783e88 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5599cc783e08 <col:2> 'void *' lvalue ->_thunk 0x5599cc782d08
|     | `-CXXThisExpr 0x5599cc783df8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5599cc783e70 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5599cc783e58 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc783e38 <col:11> 'Element *' lvalue ParmVar 0x5599cc76e4f0 'element' 'Element *'
|-CXXMethodDecl 0x5599cc76e6c8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5599cc76e638 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5599cc784040 <col:29, line:94:5>
|   |-BinaryOperator 0x5599cc783f70 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5599cc783f08 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5599cc782bc8
|   | | `-MemberExpr 0x5599cc783ed8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5599cc782c88
|   | |   `-CXXThisExpr 0x5599cc783ec8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5599cc783f58 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5599cc783f38 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5599cc783498 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5599cc784020 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5599cc783fa0 <col:2> 'void *' lvalue ->_thunk 0x5599cc782d08
|     | `-CXXThisExpr 0x5599cc783f90 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5599cc784008 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5599cc783ff0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5599cc783fd0 <col:11> 'Task *' lvalue ParmVar 0x5599cc76e638 'task' 'Task *'
|-CXXMethodDecl 0x5599cc76e7b8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5599cc784120 <col:37, line:100:5>
|   `-ReturnStmt 0x5599cc784110 <line:99:2, col:19>
|     `-BinaryOperator 0x5599cc7840f0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5599cc7840c0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5599cc784070 <col:9> 'Element *const' lvalue ->_owner 0x5599cc782d68
|       |   `-CXXThisExpr 0x5599cc784060 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5599cc7840d8 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5599cc7840a0 <col:19> 'int' 0
|-CXXMethodDecl 0x5599cc76e878 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5599cc7841e0 <col:35, line:105:5>
|   `-ReturnStmt 0x5599cc7841d0 <line:104:2, col:23>
|     `-BinaryOperator 0x5599cc7841b0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5599cc784198 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5599cc784148 <col:9> 'const int' lvalue ->_schedpos1 0x5599cc7829e8
|       |   `-CXXThisExpr 0x5599cc784138 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5599cc784178 <col:23> 'int' 0
|-CXXMethodDecl 0x5599cc76e938 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5599cc784248 <col:51, line:118:5>
|   `-ReturnStmt 0x5599cc784238 <line:117:2, col:9>
|     `-MemberExpr 0x5599cc784208 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|       `-CXXThisExpr 0x5599cc7841f8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5599cc76e9f8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5599cc7847a0 <col:37, line:136:5>
|   `-IfStmt 0x5599cc784778 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5599cc784308 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5599cc7842f0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5599cc7842d0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5599cc7842a0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5599cc6e17e8
|     |       `-MemberExpr 0x5599cc784270 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|     |         `-CXXThisExpr 0x5599cc784260 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5599cc7846e8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5599cc7846d0 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5599cc7846a0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5599cc784688 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5599cc784650 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5599cc784638 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5599cc784618 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc70ffc0 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5599cc7845b8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5599cc7845a0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5599cc7844c8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5599cc7844b0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5599cc784490 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc70fc80 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5599cc784430 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5599cc784330 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|     |         |     |   `-CXXThisExpr 0x5599cc784320 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5599cc784478 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5599cc784460 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5599cc784410 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5599cc7843f8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5599cc784398 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5599cc7032e0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5599cc784600 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5599cc7845e8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5599cc784580 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5599cc784568 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5599cc784538 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5599cc55e830 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5599cc784768 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5599cc784738 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5599cc784708 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|           `-CXXThisExpr 0x5599cc7846f8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5599cc76eab8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5599cc784888 <col:35, line:141:5>
|   `-ReturnStmt 0x5599cc784878 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5599cc784840 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5599cc784810 <col:9, col:17> '<bound member function type>' ->router 0x5599cc761e70
|         `-ImplicitCastExpr 0x5599cc784860 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5599cc7847f8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5599cc7847c8 <col:9> 'Element *const' lvalue ->_owner 0x5599cc782d68
|               `-CXXThisExpr 0x5599cc7847b8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5599cc76eb78 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5599cc784908 <col:37, line:146:5>
|   `-ReturnStmt 0x5599cc7848f8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5599cc7848e0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5599cc7848b0 <col:9> 'Element *const' lvalue ->_owner 0x5599cc782d68
|         `-CXXThisExpr 0x5599cc7848a0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5599cc76ec38 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5599cc784988 <col:41, line:151:5>
|   `-ReturnStmt 0x5599cc784978 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5599cc784960 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5599cc784930 <col:9> 'RouterThread *const' lvalue ->_thread 0x5599cc782dc8
|         `-CXXThisExpr 0x5599cc784920 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5599cc76ed00 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5599cc76eef8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5599cc76edb0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5599cc76ee28 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc7836a8 <col:50> 'bool' false
|-CXXMethodDecl 0x5599cc76f078 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5599cc76efb8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5599cc781230 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5599cc76f130 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5599cc781378 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5599cc7812e8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5599cc7814c0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5599cc781430 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5599cc781608 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5599cc781578 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5599cc7816d0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5599cc784af0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5599cc784ad8 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5599cc784a80 <col:2, col:47> 'void'
|       |-MemberExpr 0x5599cc7849b0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5599cc781230
|       | `-CXXThisExpr 0x5599cc7849a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc784ac0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc784aa8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5599cc784a60 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5599cc784a48 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5599cc784a18 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5599cc55e830 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5599cc781810 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5599cc781780 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5599cc781958 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc7818c8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc784c78 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5599cc784c60 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5599cc784c08 <col:2, col:40> 'void'
|       |-MemberExpr 0x5599cc784b18 <col:2> '<bound member function type>' ->schedule_after 0x5599cc781810
|       | `-CXXThisExpr 0x5599cc784b08 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc784c48 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc784c30 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5599cc784bc8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5599cc784b98 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5599cc784b58 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc7818c8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5599cc784bb0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5599cc784b78 <col:38> 'int' 0
|-CXXMethodDecl 0x5599cc781aa0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc781a10 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc784ee8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5599cc784ed0 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5599cc784e78 <col:2, col:49> 'void'
|       |-MemberExpr 0x5599cc784ca0 <col:2> '<bound member function type>' ->schedule_after 0x5599cc781810
|       | `-CXXThisExpr 0x5599cc784c90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc784eb8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc784ea0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5599cc784e20 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5599cc784e08 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5599cc784d78 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5599cc6e35d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5599cc784e60 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5599cc784e48 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5599cc784d58 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc781a10 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc781be8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5599cc781b58 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5599cc7850c8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5599cc7850b0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5599cc785058 <col:2, col:38> 'void'
|       |-MemberExpr 0x5599cc784f10 <col:2> '<bound member function type>' ->schedule_at_steady 0x5599cc781230
|       | `-CXXThisExpr 0x5599cc784f00 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc785098 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc785080 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5599cc785020 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5599cc785008 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5599cc784fe8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc70fc80 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5599cc784fb8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5599cc784fa0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5599cc784f50 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|             |     `-CXXThisExpr 0x5599cc784f40 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5599cc784f80 <col:33> 'const Timestamp' lvalue ParmVar 0x5599cc781b58 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5599cc781d30 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc781ca0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc7853a0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5599cc785388 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5599cc785330 <col:2, col:79> 'void'
|       |-MemberExpr 0x5599cc7850f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5599cc781230
|       | `-CXXThisExpr 0x5599cc7850e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc785370 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc785358 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5599cc7852f0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5599cc785228 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5599cc785210 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5599cc7851a0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5599cc785170 <col:31, col:41> '<bound member function type>' .sec 0x5599cc560328
|             | |     `-ImplicitCastExpr 0x5599cc7851c0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5599cc785140 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|             | |         `-CXXThisExpr 0x5599cc785130 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5599cc7851f8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5599cc7851d8 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc781ca0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5599cc7852b8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5599cc785288 <col:60, col:70> '<bound member function type>' .subsec 0x5599cc560a20
|                 `-ImplicitCastExpr 0x5599cc7852d8 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5599cc785258 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|                     `-CXXThisExpr 0x5599cc785248 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5599cc781e78 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc781de8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5599cc7856d8 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5599cc7856c0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5599cc785668 <col:2, col:65> 'void'
|       |-MemberExpr 0x5599cc7853c8 <col:2> '<bound member function type>' ->schedule_at_steady 0x5599cc781230
|       | `-CXXThisExpr 0x5599cc7853b8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc7856a8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5599cc785690 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5599cc785630 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5599cc785618 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5599cc7855f8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5599cc70fc80 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5599cc785598 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5599cc785580 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5599cc785408 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|             |     `-CXXThisExpr 0x5599cc7853f8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5599cc7855e0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5599cc7855c8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5599cc785528 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5599cc785510 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5599cc7854e0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5599cc6e35d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5599cc785568 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5599cc785550 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5599cc7854c0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5599cc781de8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc781f40 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5599cc782000 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5599cc785ba0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5599cc785730 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5599cc785700 <col:2> '<bound member function type>' ->unschedule 0x5599cc781f40
|   |   `-CXXThisExpr 0x5599cc7856f0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5599cc785b88 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5599cc785b50 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5599cc785b38 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc7857e8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5599cc3f78c8 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5599cc785760 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5599cc782a48
|       | `-CXXThisExpr 0x5599cc785750 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5599cc7857d0 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5599cc7857a0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5599cc7820c0 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5599cc785ef8 <col:42, line:310:5>
|   |-IfStmt 0x5599cc785d40 <line:306:2, line:307:23>
|   | |-CallExpr 0x5599cc785c70 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5599cc785c58 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5599cc785bf8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5599cc701750 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5599cc785d30 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5599cc785d18 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5599cc785ce8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5599cc785cd0 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5599cc785ca0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5599cc785ee8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5599cc785ed0 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5599cc785ea0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc785e88 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5599cc785e48 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5599cc785e30 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5599cc785e00 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5599cc6e38f0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5599cc785e70 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5599cc785de0 <col:30> 'int' 500
|-CXXMethodDecl 0x5599cc782200 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc782170 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc7822a8 <col:69> "" ""
|-CXXMethodDecl 0x5599cc7823b8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc782328 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc782460 <col:70> "" ""
|-CXXMethodDecl 0x5599cc782570 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc7824e0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc782618 <col:71> "" ""
|-CXXMethodDecl 0x5599cc782728 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5599cc782698 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5599cc7827d0 <col:72> "" ""
|-EnumDecl 0x5599cc782840 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5599cc782940 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5599cc782990 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc782920 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5599cc782900 <col:25> 'int' 1
|-AccessSpecDecl 0x5599cc7829a8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5599cc7829e8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5599cc782a48 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5599cc782a98 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5599cc782bc8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5599cc7836b8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5599cc782c88 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5599cc782d08 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5599cc782d68 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5599cc782dc8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5599cc782f18 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5599cc782e28 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5599cc7830e8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5599cc782fd0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5599cc783050 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5599cc7832c0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5599cc7831a8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5599cc783228 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5599cc783498 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5599cc783380 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5599cc783400 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5599cc783668 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc787210 <../elements/ethernet/etherpausesource.hh:72:1, line:105:1> line:72:7 class EtherPauseSource definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5599cc787368 <col:1, col:7> col:7 implicit referenced class EtherPauseSource
|-AccessSpecDecl 0x5599cc7873f8 <col:43, col:49> col:43 public
|-VarDecl 0x5599cc787438 <line:74:5, col:38> col:27 NO_LIMIT 'const unsigned int' static cinit
| `-IntegerLiteral 0x5599cc7874a0 <col:38> 'unsigned int' 4294967295
|-CXXConstructorDecl 0x5599cc787580 <line:76:5, col:22> col:5 EtherPauseSource 'void ()'
|-CXXDestructorDecl 0x5599cc787670 <line:77:5, col:23> col:5 ~EtherPauseSource 'void ()' noexcept-unevaluated 0x5599cc787670
| `-Overrides: [ 0x5599cc74fdc8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5599cc7877a0 <line:79:5, col:65> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5599cc751228 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5599cc789408 <col:36, col:65>
|   `-ReturnStmt 0x5599cc7893f8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5599cc7893e0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5599cc7893b8 <col:45> 'const char [17]' lvalue "EtherPauseSource"
|-CXXMethodDecl 0x5599cc787868 <line:80:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5599cc7512f0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5599cc789468 <col:36, col:56>
|   `-ReturnStmt 0x5599cc789458 <col:38, col:45>
|     `-ImplicitCastExpr 0x5599cc789440 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5599cc789420 <col:45> 'const char []' lvalue Var 0x5599cc751490 'PORTS_0_1' 'const char []'
|-CXXMethodDecl 0x5599cc787b40 <line:82:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5599cc752ac0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5599cc7879f0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x5599cc787a68 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc787c98 <line:83:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5599cc752d10 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5599cc787c00 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc787de0 <line:84:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5599cc753528 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5599cc787d50 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x5599cc787ea8 <line:85:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5599cc752b90 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5599cc787fe8 <line:87:5, col:27> col:10 run_timer 'void (Timer *)'
| |-Overrides: [ 0x5599cc750748 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x5599cc787f58 <col:20, col:26> col:27 'Timer *'
|-CXXMethodDecl 0x5599cc788138 <line:88:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x5599cc750228 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x5599cc7880a8 <col:18> col:21 'int'
|-AccessSpecDecl 0x5599cc7881e0 <line:90:3, col:10> col:3 private
|-FieldDecl 0x5599cc788220 <line:92:5, col:9> col:9 _count 'int'
|-FieldDecl 0x5599cc788288 <line:93:5, col:9> col:9 _limit 'int'
|-FieldDecl 0x5599cc7882e8 <line:94:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x5599cc788348 <line:95:5, col:14> col:14 _interval 'uint32_t':'unsigned int'
|-FieldDecl 0x5599cc7883a8 <line:96:5, col:13> col:13 _packet 'Packet *'
|-FieldDecl 0x5599cc788408 <line:97:5, col:11> col:11 _timer 'Timer'
|-EnumDecl 0x5599cc788458 <line:99:5, col:73> col:5
| |-EnumConstantDecl 0x5599cc788520 <col:12> col:12 h_limit 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
| |-EnumConstantDecl 0x5599cc788570 <col:21> col:21 h_active 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
| |-EnumConstantDecl 0x5599cc7885c0 <col:31> col:31 h_src 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
| |-EnumConstantDecl 0x5599cc788610 <col:38> col:38 h_dst 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
| |-EnumConstantDecl 0x5599cc788660 <col:45> col:45 h_pausetime 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
| `-EnumConstantDecl 0x5599cc7886b0 <col:58> col:58 h_reset_counts 'EtherPauseSource::(anonymous enum at ../elements/ethernet/etherpausesource.hh:99:5)'
|-CXXMethodDecl 0x5599cc7889d0 <line:100:5, col:92> col:9 rewrite_packet 'int (const void *, uint32_t, uint32_t, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc788718 <col:24, col:36> col:36 data 'const void *'
| |-ParmVarDecl 0x5599cc788790 <col:42, col:51> col:51 offset 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc788808 <col:59, col:68> col:68 size 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc788880 <col:74, col:88> col:88 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc788ab0 <line:101:5, col:22> col:10 check_awake 'void ()'
|-CXXMethodDecl 0x5599cc788c78 <line:102:5, col:53> col:19 reader 'String (Element *, void *)' static
| |-ParmVarDecl 0x5599cc788b60 <col:26, col:35> col:35 e 'Element *'
| `-ParmVarDecl 0x5599cc788be0 <col:38, col:44> col:44 user_data 'void *'
|-CXXMethodDecl 0x5599cc788f58 <line:103:5, col:89> col:16 writer 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5599cc788d38 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5599cc788db0 <col:42, col:51> col:51 e 'Element *'
| |-ParmVarDecl 0x5599cc788e30 <col:54, col:60> col:60 user_data 'void *'
| `-ParmVarDecl 0x5599cc788ea8 <col:71, col:85> col:85 errh 'ErrorHandler *'
|-CXXConstructorDecl 0x5599cc789048 <line:72:7> col:7 implicit EtherPauseSource 'void (const EtherPauseSource &)' inline default_delete noexcept-unevaluated 0x5599cc789048
| `-ParmVarDecl 0x5599cc789158 <col:7> col:7 'const EtherPauseSource &'
`-CXXMethodDecl 0x5599cc789240 <col:7> col:7 implicit operator= 'EtherPauseSource &(const EtherPauseSource &)' inline default_delete noexcept-unevaluated 0x5599cc789240
  `-ParmVarDecl 0x5599cc789348 <col:7> col:7 'const EtherPauseSource &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherPauseSource = type { %class.Element.base, i32, i32, i8, i32, %class.Packet*, %class.Timer }
  NonVirtualBaseLLVMType:%class.EtherPauseSource = type { %class.Element.base, i32, i32, i8, i32, %class.Packet*, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc523990 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5599cc523aa8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5599cc523b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5599cc523ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5599cc523c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5599cc523cb8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc523fc0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc5240d8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5599cc524180 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5599cc5241e8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5599cc524278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5599cc52a310 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5599cc52a748 <col:12>
|-CXXConstructorDecl 0x5599cc52a418 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc52a528 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5599cc524180 'data' 'const char *'
| | `-ImplicitCastExpr 0x5599cc52ccd0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5599cc52cca0 <col:12> 'const char *const' lvalue .data 0x5599cc524180
| |     `-DeclRefExpr 0x5599cc52cc80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5599cc5241e8 'length' 'int'
| | `-ImplicitCastExpr 0x5599cc52cd60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5599cc52cd30 <col:12> 'const int' lvalue .length 0x5599cc5241e8
| |     `-DeclRefExpr 0x5599cc52cd10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5599cc524278 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5599cc52cdf0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5599cc52cdc0 <col:12> 'String::memo_t *const' lvalue .memo 0x5599cc524278
| |     `-DeclRefExpr 0x5599cc52cda0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| `-CompoundStmt 0x5599cc52ce48 <col:12>
|-CXXConstructorDecl 0x5599cc52a5c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5599cc52a5c8
| `-ParmVarDecl 0x5599cc52a6d8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5599cc52fc30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5599cc53b648 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc53b758 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5599cc53bc70 <col:12>
|   |-BinaryOperator 0x5599cc53ba88 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5599cc53ba40 <col:12> 'const char *' lvalue ->data 0x5599cc524180
|   | | `-CXXThisExpr 0x5599cc53ba30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5599cc53ba70 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc53ba00 <col:12> 'const char *const' lvalue .data 0x5599cc524180
|   |     `-DeclRefExpr 0x5599cc53b9e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5599cc53bb50 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5599cc53bb08 <col:12> 'int' lvalue ->length 0x5599cc5241e8
|   | | `-CXXThisExpr 0x5599cc53baf8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5599cc53bb38 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc53bac8 <col:12> 'const int' lvalue .length 0x5599cc5241e8
|   |     `-DeclRefExpr 0x5599cc53baa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5599cc53bc18 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5599cc53bbd0 <col:12> 'String::memo_t *' lvalue ->memo 0x5599cc524278
|   | | `-CXXThisExpr 0x5599cc53bbc0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5599cc53bc00 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc53bb90 <col:12> 'String::memo_t *const' lvalue .memo 0x5599cc524278
|   |     `-DeclRefExpr 0x5599cc53bb70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5599cc53bc60 <col:12>
|     `-UnaryOperator 0x5599cc53bc48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc53bc38 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5599cc53b7c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5599cc53b7c8
  `-ParmVarDecl 0x5599cc53b8d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc51af00 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc51b018 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5599cc51b0a8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5599cc51b0e8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5599cc1ede00 'const char *'
|   `-QualType 0x5599cc1ed351 'const char' const
|     `-BuiltinType 0x5599cc1ed350 'char'
|-TypedefDecl 0x5599cc51b170 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5599cc51b140 'String::const_iterator' sugar
|   |-Typedef 0x5599cc51b0e8 'const_iterator'
|   `-PointerType 0x5599cc1ede00 'const char *'
|     `-QualType 0x5599cc1ed351 'const char' const
|       `-BuiltinType 0x5599cc1ed350 'char'
|-TypedefDecl 0x5599cc51b2e0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5599cc51b250 'int (String::*)() const'
|   |-RecordType 0x5599cc51af90 'String'
|   | `-CXXRecord 0x5599cc51af00 'String'
|   `-ParenType 0x5599cc51b1f0 'int () const' sugar
|     `-FunctionProtoType 0x5599cc4eed80 'int () const' const cdecl
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc51b348 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5599cc343960 'int64_t' sugar
|   |-Typedef 0x5599cc2562a0 'int64_t'
|   `-TypedefType 0x5599cc22f510 '__int64_t' sugar
|     |-Typedef 0x5599cc22f0e8 '__int64_t'
|     `-BuiltinType 0x5599cc1ed3d0 'long'
|-TypedefDecl 0x5599cc51b3b0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5599cc343880 'uint64_t' sugar
|   |-Typedef 0x5599cc256440 'uint64_t'
|   `-TypedefType 0x5599cc22f5a0 '__uint64_t' sugar
|     |-Typedef 0x5599cc22f158 '__uint64_t'
|     `-BuiltinType 0x5599cc1ed470 'unsigned long'
|-TypedefDecl 0x5599cc51b440 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5599cc51b410 'String::intmax_t' sugar
|   |-Typedef 0x5599cc51b348 'intmax_t'
|   `-TypedefType 0x5599cc343960 'int64_t' sugar
|     |-Typedef 0x5599cc2562a0 'int64_t'
|     `-TypedefType 0x5599cc22f510 '__int64_t' sugar
|       |-Typedef 0x5599cc22f0e8 '__int64_t'
|       `-BuiltinType 0x5599cc1ed3d0 'long'
|-TypedefDecl 0x5599cc51b4d0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5599cc51b4a0 'String::uintmax_t' sugar
|   |-Typedef 0x5599cc51b3b0 'uintmax_t'
|   `-TypedefType 0x5599cc343880 'uint64_t' sugar
|     |-Typedef 0x5599cc256440 'uint64_t'
|     `-TypedefType 0x5599cc22f5a0 '__uint64_t' sugar
|       |-Typedef 0x5599cc22f158 '__uint64_t'
|       `-BuiltinType 0x5599cc1ed470 'unsigned long'
|-CXXConstructorDecl 0x5599cc51b590 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5599cc51b738 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5599cc51b678 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5599cc51b8e8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5599cc51b828 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5599cc51ba40 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5599cc51b9b0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5599cc51bc58 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5599cc51bb08 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5599cc51bb88 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5599cc51be78 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5599cc51bd28 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5599cc51bda8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5599cc51c098 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5599cc51bf48 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5599cc51bfc8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5599cc51c2b8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5599cc51c168 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5599cc51c1e8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5599cc51c448 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5599cc51c380 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5599cc51c5c8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5599cc51c508 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5599cc51c758 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5599cc51c690 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5599cc51c8b0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5599cc51c820 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5599cc51ca08 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5599cc51c978 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5599cc51cb60 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5599cc51cad0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5599cc51cce8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5599cc51cc28 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5599cc51ce78 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5599cc51cdb0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5599cc51d008 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5599cc51cf40 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5599cc51d198 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5599cc51d0d0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5599cc51d290 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5599cc51d3b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5599cc51d538 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5599cc51d470 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5599cc51d688 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5599cc51d5f8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5599cc51d740 <col:63> "" ""
|-CXXMethodDecl 0x5599cc51d888 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5599cc51d7c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5599cc51da98 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5599cc51d948 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5599cc51d9c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5599cc51dcb8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5599cc51db60 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5599cc51dbe0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5599cc51df98 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5599cc51dd78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5599cc51ddf8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5599cc529de0 <col:55> 'int' 10
| `-ParmVarDecl 0x5599cc51de70 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc529e00 <col:76> 'bool' true
|-CXXMethodDecl 0x5599cc51e278 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5599cc51e060 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5599cc51e0e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5599cc529e10 <col:56> 'int' 10
| `-ParmVarDecl 0x5599cc51e158 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc529e30 <col:77> 'bool' true
|-CXXMethodDecl 0x5599cc51e380 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5599cc51e448 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5599cc51e510 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5599cc51e5b0 <col:20>
| `-OptimizeNoneAttr 0x5599cc51e608 <col:30>
|-CXXConversionDecl 0x5599cc51e6f8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5599cc51e7c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5599cc51e888 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5599cc51e978 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5599cc51ea38 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5599cc51ebb8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5599cc51eaf0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5599cc51ed08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5599cc51ec78 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5599cc51edf8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5599cc51eeb8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5599cc51f108 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5599cc51ef70 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5599cc51eff0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5599cc51f368 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5599cc51f1d0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5599cc51f250 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5599cc51f438 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5599cc51f648 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5599cc51f4f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5599cc51f570 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5599cc51f868 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5599cc51f710 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5599cc51f790 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5599cc51f9f8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5599cc51f930 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5599cc51fae8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5599cc51fc58 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5599cc51fb98 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5599cc51fe68 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5599cc51fd18 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5599cc51fd98 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5599cc520080 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5599cc51ff28 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5599cc51ffa0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5599cc520210 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5599cc520140 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5599cc520430 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5599cc5202d0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5599cc520350 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5599cc520580 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5599cc5204f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5599cc520758 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5599cc520640 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5599cc5206c0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5599cc5208a8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5599cc520818 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5599cc520ac0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5599cc520960 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5599cc5209e0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5599cc529e40 <col:39> 'int' 0
|-CXXMethodDecl 0x5599cc520ce0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5599cc520b80 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5599cc520c00 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5599cc529e60 <col:48> 'int' 0
|-CXXMethodDecl 0x5599cc520ec0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5599cc520da0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5599cc520e20 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5599cc529e80 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5599cc520f90 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5599cc521050 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5599cc521110 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5599cc5211d0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5599cc521290 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5599cc521438 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5599cc521340 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5599cc5215b8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5599cc5214f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5599cc521790 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5599cc521678 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5599cc521908 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5599cc521848 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5599cc521a50 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5599cc5219c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5599cc521ba0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5599cc521b10 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5599cc521d78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5599cc521c60 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5599cc521ce0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5599cc521f58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5599cc521e40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5599cc521ec0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5599cc5220a8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5599cc522018 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5599cc5222b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5599cc522168 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5599cc5221e8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5599cc522418 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5599cc522380 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5599cc522570 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5599cc5224d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5599cc522618 <col:57> "" ""
|-CXXMethodDecl 0x5599cc522728 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5599cc522698 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5599cc522878 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5599cc5227e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5599cc5229f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5599cc522930 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5599cc522ac0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5599cc522b80 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5599cc522c40 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5599cc522ce0 <col:49> "" ""
|-CXXMethodDecl 0x5599cc522d70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5599cc522e30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5599cc522f20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5599cc522fe8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5599cc5230a8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5599cc523168 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5599cc523260 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5599cc523328 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5599cc5233f0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5599cc5235c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5599cc5234a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5599cc523528 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5599cc5237f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5599cc523690 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5599cc523710 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5599cc523900 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5599cc523968 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5599cc523990 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5599cc523aa8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5599cc523b48 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5599cc523ba8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5599cc523c08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5599cc523cb8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5599cc523d20 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5599cc523f58 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5599cc523fa8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc523f38 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5599cc523e48 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5599cc523df0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5599cc523e30 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5599cc523e10 <col:32> 'int' 8
|-CXXRecordDecl 0x5599cc523fc0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5599cc5240d8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5599cc524180 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5599cc5241e8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5599cc524278 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5599cc52a310 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5599cc52a748 <col:12>
| |-CXXConstructorDecl 0x5599cc52a418 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc52a528 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5599cc524180 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5599cc52ccd0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5599cc52cca0 <col:12> 'const char *const' lvalue .data 0x5599cc524180
| | |     `-DeclRefExpr 0x5599cc52cc80 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5599cc5241e8 'length' 'int'
| | | `-ImplicitCastExpr 0x5599cc52cd60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5599cc52cd30 <col:12> 'const int' lvalue .length 0x5599cc5241e8
| | |     `-DeclRefExpr 0x5599cc52cd10 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5599cc524278 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5599cc52cdf0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5599cc52cdc0 <col:12> 'String::memo_t *const' lvalue .memo 0x5599cc524278
| | |     `-DeclRefExpr 0x5599cc52cda0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc52a528 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5599cc52ce48 <col:12>
| |-CXXConstructorDecl 0x5599cc52a5c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5599cc52a5c8
| | `-ParmVarDecl 0x5599cc52a6d8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5599cc52fc30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5599cc53b648 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5599cc53b758 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5599cc53bc70 <col:12>
| |   |-BinaryOperator 0x5599cc53ba88 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5599cc53ba40 <col:12> 'const char *' lvalue ->data 0x5599cc524180
| |   | | `-CXXThisExpr 0x5599cc53ba30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5599cc53ba70 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5599cc53ba00 <col:12> 'const char *const' lvalue .data 0x5599cc524180
| |   |     `-DeclRefExpr 0x5599cc53b9e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5599cc53bb50 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5599cc53bb08 <col:12> 'int' lvalue ->length 0x5599cc5241e8
| |   | | `-CXXThisExpr 0x5599cc53baf8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5599cc53bb38 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5599cc53bac8 <col:12> 'const int' lvalue .length 0x5599cc5241e8
| |   |     `-DeclRefExpr 0x5599cc53baa8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5599cc53bc18 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5599cc53bbd0 <col:12> 'String::memo_t *' lvalue ->memo 0x5599cc524278
| |   | | `-CXXThisExpr 0x5599cc53bbc0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5599cc53bc00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5599cc53bb90 <col:12> 'String::memo_t *const' lvalue .memo 0x5599cc524278
| |   |     `-DeclRefExpr 0x5599cc53bb70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5599cc53b758 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5599cc53bc60 <col:12>
| |     `-UnaryOperator 0x5599cc53bc48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5599cc53bc38 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5599cc53b7c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5599cc53b7c8
|   `-ParmVarDecl 0x5599cc53b8d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5599cc5242f0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5599cc524538 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5599cc524358 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5599cc5243d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5599cc524450 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5599cc52a2d0 <col:79, line:261:5>
|   |-BinaryOperator 0x5599cc529f48 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5599cc529ee0 <col:2, col:5> 'const char *' lvalue .data 0x5599cc524180
|   | | `-MemberExpr 0x5599cc529eb0 <col:2> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|   | |   `-CXXThisExpr 0x5599cc529ea0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5599cc529f30 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5599cc529f10 <col:12> 'const char *' lvalue ParmVar 0x5599cc524358 'data' 'const char *'
|   |-BinaryOperator 0x5599cc52a010 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5599cc529fa8 <col:2, col:5> 'int' lvalue .length 0x5599cc5241e8
|   | | `-MemberExpr 0x5599cc529f78 <col:2> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|   | |   `-CXXThisExpr 0x5599cc529f68 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5599cc529ff8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5599cc529fd8 <col:14> 'int' lvalue ParmVar 0x5599cc5243d8 'length' 'int'
|   `-IfStmt 0x5599cc52a2b8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5599cc52a130 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5599cc52a118 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5599cc52a0f8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5599cc52a0d8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5599cc52a070 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5599cc524278
|     |       | `-MemberExpr 0x5599cc52a040 <col:7> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|     |       |   `-CXXThisExpr 0x5599cc52a030 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5599cc52a0c0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5599cc52a0a0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5599cc524450 'memo' 'String::memo_t *'
|     `-CallExpr 0x5599cc52a290 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5599cc52a278 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc52a180 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5599cc512f68 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5599cc52a1e8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5599cc523b48
|         `-ImplicitCastExpr 0x5599cc52a1d0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5599cc52a1b0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5599cc524450 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5599cc5247e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5599cc524608 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5599cc524688 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5599cc524700 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5599cc5242f0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5599cc52a758 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5599cc52a8e8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5599cc52a850 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5599cc52a7c0 <col:2> '<bound member function type>' ->assign_memo 0x5599cc524538
|     | `-ImplicitCastExpr 0x5599cc52a888 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5599cc52a7b0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5599cc52a8a0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc52a7f0 <col:14> 'const char *' lvalue ParmVar 0x5599cc524608 'data' 'const char *'
|     |-ImplicitCastExpr 0x5599cc52a8b8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5599cc52a810 <col:20> 'int' lvalue ParmVar 0x5599cc524688 'length' 'int'
|     `-ImplicitCastExpr 0x5599cc52a8d0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc52a830 <col:28> 'String::memo_t *' lvalue ParmVar 0x5599cc524700 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5599cc524978 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5599cc5248b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5599cc52ab40 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5599cc52aac0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5599cc52a910 <col:2> '<bound member function type>' ->assign_memo 0x5599cc524538
|     | `-CXXThisExpr 0x5599cc52a900 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5599cc52aaf8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5599cc52a990 <col:14, col:19> 'const char *' lvalue .data 0x5599cc524180
|     |   `-MemberExpr 0x5599cc52a960 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5599cc5242f0
|     |     `-DeclRefExpr 0x5599cc52a940 <col:14> 'const String' lvalue ParmVar 0x5599cc5248b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5599cc52ab10 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5599cc52aa10 <col:25, col:30> 'int' lvalue .length 0x5599cc5241e8
|     |   `-MemberExpr 0x5599cc52a9e0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5599cc5242f0
|     |     `-DeclRefExpr 0x5599cc52a9c0 <col:25> 'const String' lvalue ParmVar 0x5599cc5248b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5599cc52ab28 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5599cc52aa90 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5599cc524278
|         `-MemberExpr 0x5599cc52aa60 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5599cc5242f0
|           `-DeclRefExpr 0x5599cc52aa40 <col:38> 'const String' lvalue ParmVar 0x5599cc5248b8 'x' 'const String &'
|-CXXMethodDecl 0x5599cc524a40 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5599cc52b500 <col:31, line:278:5>
|   `-IfStmt 0x5599cc52b4e8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5599cc52abe0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5599cc52abc8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5599cc52ab98 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5599cc524278
|     |     `-MemberExpr 0x5599cc52ab68 <col:6> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|     |       `-CXXThisExpr 0x5599cc52ab58 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5599cc52b4c0 <col:15, line:277:2>
|       |-ParenExpr 0x5599cc52b090 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5599cc52b060 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5599cc52acf0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5599cc52acd8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5599cc52acc0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5599cc52ac80 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5599cc523b48
|       |   |       `-ImplicitCastExpr 0x5599cc52ac68 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5599cc52ac38 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5599cc524278
|       |   |           `-MemberExpr 0x5599cc52ac08 <col:27> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|       |   |             `-CXXThisExpr 0x5599cc52abf8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5599cc52ad50 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5599cc52ad30 <col:54> 'int' 0
|       |   `-CallExpr 0x5599cc52afc0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5599cc52afa8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5599cc52af28 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5599cc28a1d0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5599cc52b000 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5599cc52ae38 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5599cc52b018 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5599cc52ae68 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5599cc52b030 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5599cc52aea0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5599cc52b048 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5599cc52af10 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5599cc52aef8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5599cc52aec0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5599cc52b3e0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5599cc52b2a0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5599cc52b288 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5599cc52b200 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5599cc5143b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5599cc52b1d0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5599cc523b48
|       | |   `-ImplicitCastExpr 0x5599cc52b1b8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5599cc52b188 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5599cc524278
|       | |       `-MemberExpr 0x5599cc52b158 <col:40> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|       | |         `-CXXThisExpr 0x5599cc52b148 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5599cc52b3a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5599cc52b388 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5599cc52b2c8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5599cc529220 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5599cc52b3c8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5599cc52b328 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5599cc524278
|       |       `-MemberExpr 0x5599cc52b2f8 <col:15> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|       |         `-CXXThisExpr 0x5599cc52b2e8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5599cc52b4a0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5599cc52b438 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5599cc524278
|         | `-MemberExpr 0x5599cc52b408 <col:6> 'String::rep_t' lvalue ->_r 0x5599cc5242f0
|         |   `-CXXThisExpr 0x5599cc52b3f8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5599cc52b488 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5599cc52b468 <col:16> 'int' 0
|-CXXMethodDecl 0x5599cc524cd8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5599cc524af8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5599cc524b78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5599cc524bf0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5599cc524db0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5599cc525000 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5599cc524e68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5599cc524ee8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5599cc524f60 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5599cc5251e8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5599cc5250d0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5599cc525150 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5599cc5252e8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5599cc52b5d8 <col:41, line:286:5>
|   `-ReturnStmt 0x5599cc52b5c8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5599cc52b598 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5599cc52b560 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5599cc52b548 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5599cc52b528 <col:46> 'int' 1
|-CXXMethodDecl 0x5599cc525588 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5599cc5253a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5599cc525420 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5599cc5254a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5599cc529220 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5599cc525650 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5599cc5292f0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5599cc5294c0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5599cc5293a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5599cc529428 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5599cc529580 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5599cc529648 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5599cc529748 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5599cc5297c0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5599cc529838 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5599cc5298a0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5599cc5299a0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5599cc5299f0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc529980 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5599cc529960 <col:22> 'int' 14
|-CXXMethodDecl 0x5599cc529c08 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5599cc529a20 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5599cc529aa0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5599cc529b20 <col:43> col:46 'int'
|-FriendDecl 0x5599cc529d10 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5599cc529da0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc7b4c30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5599cc7b4e08 prev 0x5599cc7b4c30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5599cc7b4e98 <col:46, col:52> col:46 public
|-TypedefDecl 0x5599cc7b4ec0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7b6820 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5599cc7b67d0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5599cc7b67b0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5599cc7b50d8 'type'
|     `-SubstTemplateTypeParmType 0x5599cc7b50a0 'String' sugar
|       |-TemplateTypeParmType 0x5599cc4de7a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4de750 'T'
|       `-RecordType 0x5599cc51af90 'String'
|         `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b68d8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5599cc7b68a0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5599cc7b6880 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5599cc7b6820 'type'
|     `-ElaboratedType 0x5599cc7b67d0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5599cc7b67b0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5599cc7b50d8 'type'
|         `-SubstTemplateTypeParmType 0x5599cc7b50a0 'String' sugar
|           |-TemplateTypeParmType 0x5599cc4de7a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5599cc4de750 'T'
|           `-RecordType 0x5599cc51af90 'String'
|             `-CXXRecord 0x5599cc51af00 'String'
|-CXXMethodDecl 0x5599cc7b6a58 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5599cc7b6968 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5599cc7b6b48 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5599cc7b6c28 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5599cc7b6c28
|-CXXMethodDecl 0x5599cc7b6ef8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5599cc7b6e00 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5599cc7b7138 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5599cc7b6fb0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7b7028 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b7308 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5599cc7b71f8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7b7270 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b7468 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5599cc7b7538 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5599cc7b7788 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5599cc7b75f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5599cc7b7670 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b79e8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5599cc7b7858 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5599cc7b78d0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b7ba8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5599cc7b7ab8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b7d68 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5599cc7b7c70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b7e20 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5599cc7b7ed0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5599cc7b8108 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5599cc7b7f80 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7b7ff8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5599cc7b83a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5599cc7b82b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5599cc7b8470 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5599cc7b84c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5599cc7b8510 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc752730 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5599cc7b3698 prev 0x5599cc752730 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5599cc7b4ba0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5599cc7b4b50 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5599cc7b4b30 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5599cc7b49e0 'type'
|     `-SubstTemplateTypeParmType 0x5599cc7b4870 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5599cc4b4550 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5599cc4b44f8 'F'
|       `-RecordType 0x5599cc7b44d0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5599cc7b43f0 'typed_array_memory'
|-FieldDecl 0x5599cc7b8560 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5599cc7b85b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5599cc7b85e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|   |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5599cc4eba68 'T'
|   `-RecordType 0x5599cc51af90 'String'
|     `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b8678 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5599cc7b8640 'String &'
|   `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-RecordType 0x5599cc51af90 'String'
|       `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b8708 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5599cc7b86d0 'const String &'
|   `-QualType 0x5599cc7b3731 'const String' const
|     `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-RecordType 0x5599cc51af90 'String'
|         `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b8798 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5599cc7b8760 'String *'
|   `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-RecordType 0x5599cc51af90 'String'
|       `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b8828 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5599cc7b87f0 'const String *'
|   `-QualType 0x5599cc7b3731 'const String' const
|     `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-RecordType 0x5599cc51af90 'String'
|         `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b9480 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5599cc7b9430 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5599cc7b9410 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5599cc7b9348 'type'
|     `-LValueReferenceType 0x5599cc7b9310 'const String &'
|       `-QualType 0x5599cc7b90b1 'const String' const
|         `-SubstTemplateTypeParmType 0x5599cc7b90b0 'String' sugar
|           |-TemplateTypeParmType 0x5599cc4be4a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5599cc4be448 'T'
|           `-RecordType 0x5599cc51af90 'String'
|             `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b94e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5599cc7b86d0 'const String &'
|   `-QualType 0x5599cc7b3731 'const String' const
|     `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-RecordType 0x5599cc51af90 'String'
|         `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b9540 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7b95a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5599cc7b8760 'String *'
|   `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-RecordType 0x5599cc51af90 'String'
|       `-CXXRecord 0x5599cc51af00 'String'
|-TypedefDecl 0x5599cc7b9610 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5599cc7b87f0 'const String *'
|   `-QualType 0x5599cc7b3731 'const String' const
|     `-SubstTemplateTypeParmType 0x5599cc7b3730 'String' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-RecordType 0x5599cc51af90 'String'
|         `-CXXRecord 0x5599cc51af00 'String'
|-EnumDecl 0x5599cc7b9668 <line:134:5> col:5
| `-EnumConstantDecl 0x5599cc7b9760 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5599cc7b9740 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5599cc4ed148 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5599cc4ed120 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5599cc4ed100 <col:40> 'int' 1
|-CXXConstructorDecl 0x5599cc7b97e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5599cc7b9a98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7b98c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7b9960 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5599cc7b9d28 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5599cc7b9c10 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5599cc7b9fe8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5599cc7b9ed0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5599cc7ba300 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5599cc7ba1e0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5599cc7ba610 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5599cc7ba4f0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5599cc7ba900 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7ba748 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7ba7c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5599cc7baa28 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5599cc7baad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bab30 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bab78 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5599cc7bac28 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bac80 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bad48 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7badf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bae50 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bae98 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7baf48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bafa0 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bafe8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7bb098 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bb0f0 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bb138 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7bb1e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7bb240 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7bb268 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5599cc7bb318 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5599cc7bb3c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5599cc7bb588 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7bb478 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7bb4f0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5599cc7bb6d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc7bb648 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7bb888 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5599cc7bb790 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5599cc7bb940 <col:20>
| `-OptimizeNoneAttr 0x5599cc7bb998 <col:30>
|-CXXMethodDecl 0x5599cc7bbab8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5599cc7bb9c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5599cc7bbb70 <col:20>
| `-OptimizeNoneAttr 0x5599cc7bbbc8 <col:30>
|-CXXMethodDecl 0x5599cc7bbc80 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc7bbbf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7bbdc8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5599cc7bbd38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7bbef8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5599cc7bbff8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5599cc7bc0c8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5599cc7bc198 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5599cc7bc2d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc7bc248 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7bc420 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5599cc7bc390 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7bc568 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5599cc7bc4d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5599cc7bc620 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5599cc7bc720 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5599cc7bc690 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5599cc7bc7d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5599cc7bc898 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5599cc7bc998 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5599cc7bcb18 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5599cc7bca58 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5599cc7bd2d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5599cc7bcbd0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5599cc7bd238 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5599cc7bd138 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5599cc7bd3b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5599cc7bd508 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5599cc7bd478 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5599cc7bd5c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5599cc7bd808 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7bd680 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5599cc7bd6f8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5599cc7bd998 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5599cc7bd8d8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5599cc7bdba8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5599cc7bda60 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5599cc7bdad8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5599cc7bdc68 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5599cc7bdec8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5599cc7bddd0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5599cc7bdf98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5599cc7bdf98

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc83e4b0 prev 0x5599cc7c8b38 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc83e5a8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5599cc83e638 <col:22, col:28> col:22 public
|-EnumDecl 0x5599cc83e660 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5599cc83e778 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83e758 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5599cc83e740 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5599cc83e720 <col:14> 'int' 999
| |-EnumConstantDecl 0x5599cc83e820 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83e800 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5599cc83e7e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5599cc83e7c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5599cc83e8b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83e890 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5599cc83e870 <col:17> 'int' 0
| |-EnumConstantDecl 0x5599cc83e940 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83e920 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5599cc83e900 <col:13> 'int' 1
| |-EnumConstantDecl 0x5599cc83e9d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83e9b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5599cc83e990 <col:16> 'int' 2
| |-EnumConstantDecl 0x5599cc83ea60 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83ea40 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5599cc83ea20 <col:13> 'int' 3
| |-EnumConstantDecl 0x5599cc83eaf0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83ead0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5599cc83eab0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5599cc83eb80 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83eb60 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5599cc83eb40 <col:14> 'int' 5
| |-EnumConstantDecl 0x5599cc83ec10 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5599cc83ebf0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5599cc83ebd0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5599cc83eca0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5599cc83ec80 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5599cc83ec60 <col:13> 'int' 7
|-VarDecl 0x5599cc83ed10 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5599cc83ed98 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5599cc83ee20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5599cc83eea8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5599cc83ef30 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5599cc83efb8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5599cc83f040 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5599cc83f0c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5599cc83f150 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5599cc83f1d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5599cc83f260 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5599cc83f360 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5599cc84e668 '_nerrors' 'int'
| | `-IntegerLiteral 0x5599cc84edf8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5599cc84ee68 <col:16, line:129:5>
|-CXXDestructorDecl 0x5599cc83f450 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5599cc84ee78 <col:29, line:132:5>
|-CXXMethodDecl 0x5599cc83f608 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5599cc83f540 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc83f6d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5599cc83f7b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5599cc84eed0 <col:44, line:161:5>
|   `-ReturnStmt 0x5599cc84eec0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5599cc84eea8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc84ee88 <col:9> 'ErrorHandler *' lvalue Var 0x5599cc84e6c8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc83f8f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5599cc83f868 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5599cc83f9c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5599cc84ef30 <col:43, line:173:5>
|   `-ReturnStmt 0x5599cc84ef20 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5599cc84ef08 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc84eee8 <col:9> 'ErrorHandler *' lvalue Var 0x5599cc84e740 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5599cc83fa78 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5599cc83faf8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5599cc83fc08 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5599cc83fb78 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5599cc83fd58 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5599cc83fcc8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5599cc83feb0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5599cc83fe18 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840008 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5599cc83ff70 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840160 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5599cc8400c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840370 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5599cc840218 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5599cc840298 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840548 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5599cc840430 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5599cc8404b0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840768 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5599cc840608 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5599cc840688 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840948 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5599cc840828 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5599cc8408a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840b28 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5599cc840a08 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5599cc840a88 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5599cc840cb0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5599cc840be8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5599cc840e80 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5599cc840d68 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5599cc840de0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5599cc84f188 <col:57, line:234:5>
|   `-ReturnStmt 0x5599cc84f178 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5599cc84f160 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5599cc84f108 <col:9, col:41> 'int'
|         |-MemberExpr 0x5599cc84f0d8 <col:9> '<bound member function type>' ->xmessage 0x5599cc840cb0
|         | `-CXXThisExpr 0x5599cc84f0c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5599cc84f148 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5599cc84f130 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5599cc84f0a8 <col:18, col:40> 'String' (CXXTemporary 0x5599cc84f0a8)
|               `-CallExpr 0x5599cc84f070 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5599cc84f058 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5599cc84efd0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5599cc842e78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5599cc84eff0 <col:31> 'const String' lvalue ParmVar 0x5599cc840de0 'str' 'const String &'
|                 `-DeclRefExpr 0x5599cc84f010 <col:36> 'const String' lvalue ParmVar 0x5599cc840d68 'anno' 'const String &'
|-CXXMethodDecl 0x5599cc841160 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5599cc840f40 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5599cc840fc0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5599cc841038 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5599cc84f418 <col:68, line:243:5>
|   `-ReturnStmt 0x5599cc84f408 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5599cc84f3f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5599cc84f390 <col:9, col:41> 'int'
|         |-MemberExpr 0x5599cc84f360 <col:9> '<bound member function type>' ->xmessage 0x5599cc840e80
|         | `-CXXThisExpr 0x5599cc84f350 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5599cc84f228 <col:18> 'const String' lvalue ParmVar 0x5599cc840f40 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5599cc84f3d8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5599cc84f3c0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5599cc84f330 <col:24, col:40> 'String' (CXXTemporary 0x5599cc84f330)
|               `-CXXMemberCallExpr 0x5599cc84f2c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5599cc84f258 <col:24> '<bound member function type>' ->vformat 0x5599cc842340
|                 | `-CXXThisExpr 0x5599cc84f248 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5599cc84f2f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5599cc84f288 <col:32> 'const char *' lvalue ParmVar 0x5599cc840fc0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5599cc84f310 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5599cc84f2a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5599cc841038 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5599cc841400 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5599cc841228 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5599cc8412a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5599cc841318 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5599cc84f758 <col:23, line:254:5>
|   `-ReturnStmt 0x5599cc84f748 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5599cc84f730 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5599cc84f6d0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5599cc84f6a0 <col:9> '<bound member function type>' ->xmessage 0x5599cc840e80
|         | `-CXXThisExpr 0x5599cc84f690 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5599cc84f718 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5599cc84f700 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5599cc84f650 <col:18, col:65> 'String' (CXXTemporary 0x5599cc84f650)
|         |     `-CallExpr 0x5599cc84f5e8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5599cc84f5d0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5599cc84f4b8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5599cc842e78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5599cc84f4d8 <col:31> 'const String' lvalue ParmVar 0x5599cc8412a0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5599cc84f630 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5599cc84f618 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5599cc84f5b0 <col:37, col:64> 'String' (CXXTemporary 0x5599cc84f5b0)
|         |             `-CallExpr 0x5599cc84f580 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5599cc84f568 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5599cc84f4f8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5599cc8434c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5599cc84f518 <col:56> 'const String' lvalue ParmVar 0x5599cc841228 'landmark' 'const String &'
|         `-DeclRefExpr 0x5599cc84f670 <col:68> 'const String' lvalue ParmVar 0x5599cc841318 'str' 'const String &'
|-CXXMethodDecl 0x5599cc841780 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5599cc8414c8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5599cc841540 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5599cc8415c0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5599cc841638 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5599cc84fa10 <col:34, line:267:5>
|   `-ReturnStmt 0x5599cc84fa00 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5599cc84f9e8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5599cc84f980 <col:9, col:51> 'int'
|         |-MemberExpr 0x5599cc84f950 <col:9> '<bound member function type>' ->xmessage 0x5599cc841400
|         | `-CXXThisExpr 0x5599cc84f940 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5599cc84f7f8 <col:18> 'const String' lvalue ParmVar 0x5599cc8414c8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5599cc84f818 <col:28> 'const String' lvalue ParmVar 0x5599cc841540 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5599cc84f9d0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5599cc84f9b8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5599cc84f920 <col:34, col:50> 'String' (CXXTemporary 0x5599cc84f920)
|               `-CXXMemberCallExpr 0x5599cc84f8b8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5599cc84f848 <col:34> '<bound member function type>' ->vformat 0x5599cc842340
|                 | `-CXXThisExpr 0x5599cc84f838 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5599cc84f8e8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5599cc84f878 <col:42> 'const char *' lvalue ParmVar 0x5599cc8415c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5599cc84f900 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5599cc84f898 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5599cc841638 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5599cc841890 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5599cc84fa90 <col:25, line:288:5>
|   `-ReturnStmt 0x5599cc84fa80 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5599cc84fa68 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5599cc84fa38 <col:9> 'const int' lvalue ->_nerrors 0x5599cc84e668
|         `-CXXThisExpr 0x5599cc84fa28 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5599cc841aa0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5599cc841948 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5599cc8419c8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5599cc841d88 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5599cc841b68 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5599cc841be8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5599cc841c60 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5599cc841f20 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5599cc841e58 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5599cc842168 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5599cc841fe0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5599cc842058 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5599cc84fcf0 <col:58, line:357:5>
|   `-ReturnStmt 0x5599cc84fce0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5599cc84fcc8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5599cc84fc98 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5599cc84fc80 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5599cc84fc60 <col:9, col:29> 'String' (CXXTemporary 0x5599cc84fc60)
|             `-CallExpr 0x5599cc84fbf0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5599cc84fbd8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5599cc84fb58 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5599cc841d88 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5599cc84faf8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5599cc84fc28 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5599cc84fb18 <col:21> 'const char *' lvalue ParmVar 0x5599cc841fe0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5599cc84fc40 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5599cc84fb38 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5599cc842058 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5599cc842340 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5599cc842230 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5599cc8422a8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5599cc842498 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5599cc842408 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5599cc8425e0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5599cc842550 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5599cc842880 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5599cc842698 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5599cc842718 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5599cc842790 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5599cc8429e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5599cc842950 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5599cc84fe08 <col:37, line:441:5>
|   `-IfStmt 0x5599cc84fdf0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5599cc84fd78 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5599cc84fd48 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5599cc84fd08 <col:6> 'int' lvalue ParmVar 0x5599cc842950 'level' 'int'
|     | `-ImplicitCastExpr 0x5599cc84fd60 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5599cc84fd28 <col:15> 'ErrorHandler::Level' EnumConstant 0x5599cc83ea60 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5599cc84fdd8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5599cc84fda8 <col:8> 'int' lvalue ->_nerrors 0x5599cc84e668
|         `-CXXThisExpr 0x5599cc84fd98 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5599cc842aa8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5599cc84fea0 <col:26, line:448:5>
|   `-BinaryOperator 0x5599cc84fe80 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5599cc84fe30 <col:2> 'int' lvalue ->_nerrors 0x5599cc84e668
|     | `-CXXThisExpr 0x5599cc84fe20 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5599cc84fe60 <col:13> 'int' 0
|-CXXMethodDecl 0x5599cc842c70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5599cc842b60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5599cc842bd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5599cc842e78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5599cc842d30 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5599cc842da8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5599cc843128 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5599cc842f38 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5599cc842fb8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5599cc843038 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5599cc8431e0 <col:59> 0 0
|-CXXMethodDecl 0x5599cc843378 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5599cc843258 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5599cc8432d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5599cc850510 <col:70, line:534:5>
|   |-DeclStmt 0x5599cc850010 <line:528:2, col:20>
|   | |-VarDecl 0x5599cc84fec8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5599cc84ff30 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5599cc84ff68 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5599cc84ffd0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5599cc8500e0 <line:529:2, col:23>
|   | `-VarDecl 0x5599cc850040 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5599cc8500c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5599cc8500a8 <col:18> 'const char *' lvalue ParmVar 0x5599cc843258 'begin' 'const char *'
|   |-DoStmt 0x5599cc8504a8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5599cc8503d8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5599cc8503c0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5599cc8503a0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5599cc8500f8 <col:6> 'const char *' lvalue Var 0x5599cc850040 'x' 'const char *'
|   | |     `-CallExpr 0x5599cc8502f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5599cc8502d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5599cc850290 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5599cc84eb40 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5599cc850358 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5599cc850340 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5599cc8501b0 <col:20, col:27> 'String' (CXXTemporary 0x5599cc8501b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5599cc850178 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5599cc850370 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5599cc8501d0 <col:30> 'const char *' lvalue Var 0x5599cc850040 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5599cc850388 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5599cc8501f0 <col:33> 'const char *' lvalue ParmVar 0x5599cc8432d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5599cc850230 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5599cc850210 <col:39> 'String' lvalue Var 0x5599cc84fec8 'name' 'String'
|   | |       |-UnaryOperator 0x5599cc850268 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5599cc850248 <col:46> 'String' lvalue Var 0x5599cc84ff68 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5599cc850280 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5599cc850490 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5599cc850478 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5599cc850458 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5599cc850428 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|   |         `-ImplicitCastExpr 0x5599cc850410 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5599cc8503f0 <col:11> 'String' lvalue Var 0x5599cc84fec8 'name' 'String'
|   `-ReturnStmt 0x5599cc850500 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5599cc8504e8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5599cc8504c8 <col:9> 'const char *' lvalue Var 0x5599cc850040 'x' 'const char *'
|-CXXMethodDecl 0x5599cc8434c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5599cc843438 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5599cc850b18 <col:55, line:550:5>
|   `-IfStmt 0x5599cc850af0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5599cc850750 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5599cc850738 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5599cc850720 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5599cc850700 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5599cc8506d0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|     | |       `-DeclRefExpr 0x5599cc850570 <col:6> 'const String' lvalue ParmVar 0x5599cc843438 'x' 'const String &'
|     | `-BinaryOperator 0x5599cc8506b0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5599cc850680 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5599cc850630 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5599cc850618 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5599cc8505d0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5599cc537f30 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5599cc850590 <col:11> 'const String' lvalue ParmVar 0x5599cc843438 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5599cc8505b0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5599cc850698 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5599cc850668 <col:19> 'char' 123
|     |-ReturnStmt 0x5599cc8507c0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5599cc850790 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5599cc850770 <col:13> 'const String' lvalue ParmVar 0x5599cc843438 'x' 'const String &'
|     `-IfStmt 0x5599cc850ac8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5599cc850858 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5599cc850840 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5599cc850820 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5599cc8507f0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |       `-DeclRefExpr 0x5599cc8507d0 <col:11> 'const String' lvalue ParmVar 0x5599cc843438 'x' 'const String &'
|       |-ReturnStmt 0x5599cc8509e0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5599cc8509c8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5599cc850998 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5599cc850980 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5599cc850960 <col:13, col:29> 'String' (CXXTemporary 0x5599cc850960)
|       |         `-CallExpr 0x5599cc850910 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5599cc8508f8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5599cc850870 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5599cc842c70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5599cc850940 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5599cc850890 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5599cc8508b0 <col:28> 'const String' lvalue ParmVar 0x5599cc843438 'x' 'const String &'
|       `-ReturnStmt 0x5599cc850ab8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5599cc850aa0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5599cc850a70 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5599cc850a58 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5599cc850a38 <col:13, col:20> 'String' (CXXTemporary 0x5599cc850a38)
|                 `-CXXTemporaryObjectExpr 0x5599cc850a00 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5599cc843690 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5599cc843580 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5599cc8435f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5599cc84ede8 <col:71> 'bool' false
|-CXXRecordDecl 0x5599cc843740 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5599cc843a38 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5599cc8439d0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5599cc843970 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5599cc843930 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5599cc51af90 'String'
|       | `-CXXRecord 0x5599cc51af00 'String'
|       |-BuiltinType 0x5599cc1ed3b0 'int'
|       `-DecayedType 0x5599cc7cd5b0 '__va_list_tag *' sugar
|         |-TypedefType 0x5599cc7cd580 'va_list' sugar
|         | |-Typedef 0x5599cc40c040 'va_list'
|         | `-TypedefType 0x5599cc40bff0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5599cc343c18 '__gnuc_va_list'
|         |   `-TypedefType 0x5599cc343b80 '__builtin_va_list' sugar
|         |     |-Typedef 0x5599cc22ec18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5599cc22ebc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5599cc1ee100 '__va_list_tag'
|         |         `-CXXRecord 0x5599cc1ee068 '__va_list_tag'
|         `-PointerType 0x5599cc4118e0 '__va_list_tag *'
|           `-RecordType 0x5599cc1ee100 '__va_list_tag'
|             `-CXXRecord 0x5599cc1ee068 '__va_list_tag'
|-EnumDecl 0x5599cc843a90 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5599cc843b90 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc8440f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843b70 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5599cc843b50 <col:16> 'int' 1
| |-EnumConstantDecl 0x5599cc843c20 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc844108 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843c00 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5599cc843be0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5599cc843cb0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc844120 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843c90 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5599cc843c70 <col:22> 'int' 4
| |-EnumConstantDecl 0x5599cc843d40 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc844138 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843d20 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5599cc843d00 <col:17> 'int' 8
| |-EnumConstantDecl 0x5599cc843dd0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc84e170 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843db0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5599cc843d90 <col:22> 'int' 16
| |-EnumConstantDecl 0x5599cc843e60 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc84e188 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843e40 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5599cc843e20 <col:19> 'int' 32
| |-EnumConstantDecl 0x5599cc843ef0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc84e1a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843ed0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5599cc843eb0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5599cc843f80 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc84e1b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843f60 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5599cc843f40 <col:14> 'int' 128
| |-EnumConstantDecl 0x5599cc844010 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5599cc84e1d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc843ff0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5599cc843fd0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5599cc8440a0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5599cc84e1e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc844080 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5599cc844060 <col:12> 'int' 1024
|-CXXMethodDecl 0x5599cc84e3f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5599cc84e210 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5599cc84e2b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5599cc84e580 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5599cc84e4b8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5599cc84e628 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5599cc84e668 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5599cc84e6c8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5599cc84e740 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5599cc84eb40 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5599cc84e7b8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5599cc84e838 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5599cc84e8b8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5599cc84e930 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5599cc84e9a8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5599cc84ea20 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5599cc84ec68 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5599cc84ec68
| `-ParmVarDecl 0x5599cc84ed78 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5599cc850e78 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5599cc850e78
  `-ParmVarDecl 0x5599cc850f88 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc8344d8 prev 0x5599cc7962e0 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5599cc835f48 <line:148:18>
|-CXXRecordDecl 0x5599cc8345d0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5599cc834660 <col:22, col:28> col:22 public
|-TypedefDecl 0x5599cc834698 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5599cc3433d0 'uninitialized_type'
|   `-CXXRecord 0x5599cc343338 'uninitialized_type'
|-CXXConstructorDecl 0x5599cc834728 <line:14:5, line:16:5> line:14:12 used EtherAddress 'void ()' inline
| `-CompoundStmt 0x5599cc836248 <col:27, line:16:5>
|   `-BinaryOperator 0x5599cc836228 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5599cc836030 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5599cc836018 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5599cc835fc8 <col:2> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|     | |   `-CXXThisExpr 0x5599cc835fb8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5599cc835ff8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5599cc836210 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5599cc8361f0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5599cc8360c8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5599cc8360b0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5599cc836060 <col:13> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|         | |   `-CXXThisExpr 0x5599cc836050 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5599cc836090 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5599cc8361d8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5599cc8361b8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5599cc836160 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5599cc836148 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5599cc8360f8 <col:24> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|             | |   `-CXXThisExpr 0x5599cc8360e8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5599cc836128 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5599cc8361a0 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5599cc836180 <col:35> 'int' 0
|-CXXConstructorDecl 0x5599cc834878 <line:22:5, line:24:5> line:22:21 used EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5599cc8347e8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5599cc836410 <col:61, line:24:5>
|   `-CallExpr 0x5599cc836360 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5599cc836348 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5599cc836328 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5599cc44d148 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5599cc8363b0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5599cc836398 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5599cc8362b8 <col:9> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|     |     `-CXXThisExpr 0x5599cc8362a8 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5599cc8363e0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5599cc8363c8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5599cc8362e8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5599cc8347e8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5599cc8363f8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5599cc836308 <col:22> 'int' 6
|-CXXConstructorDecl 0x5599cc8349c8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5599cc834938 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5599cc836480 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5599cc836458 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5599cc836428 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5599cc834938 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5599cc834ac8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5599cc836bc8 <col:42, line:34:5>
|   `-ReturnStmt 0x5599cc836bb8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5599cc836ba0 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5599cc836b70 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5599cc8369a8 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5599cc836920 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5599cc836810 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5599cc8367f8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5599cc8364a8 <col:22> 'int' 65535
|-CXXMethodDecl 0x5599cc834b88 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5599cc834c28 <col:59> "" ""
|-TypedefDecl 0x5599cc834da8 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5599cc834d20 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5599cc74fad0 'EtherAddress'
|   | `-CXXRecord 0x5599cc8344d8 'EtherAddress'
|   `-ParenType 0x5599cc834cc0 'bool () const' sugar
|     `-FunctionProtoType 0x5599cc296150 'bool () const' const cdecl
|       `-BuiltinType 0x5599cc1ed330 'bool'
|-CXXConversionDecl 0x5599cc834ee8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5599cc836fa8 <col:51, line:43:5>
|   `-ReturnStmt 0x5599cc836f98 <line:42:2, col:70>
|     `-ConditionalOperator 0x5599cc836f68 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5599cc836e90 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5599cc836da8 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5599cc836d60 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5599cc836d48 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5599cc836c90 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5599cc836c78 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5599cc836bf0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       | | |     |   `-CXXThisExpr 0x5599cc836be0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5599cc836c20 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5599cc836d90 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5599cc836d78 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5599cc836d28 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5599cc836d10 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5599cc836cc0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       | |       |   `-CXXThisExpr 0x5599cc836cb0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5599cc836cf0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5599cc836e78 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5599cc836e60 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5599cc836e40 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5599cc836e28 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5599cc836dd8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       |       |   `-CXXThisExpr 0x5599cc836dc8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5599cc836e08 <col:39> 'int' 2
|       |-UnaryOperator 0x5599cc836f18 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5599cc836ee8 <col:45, col:59> 'bool () const' CXXMethod 0x5599cc834fb8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5599cc836f50 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5599cc836f30 <col:70> 'int' 0
|-CXXMethodDecl 0x5599cc834fb8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5599cc837168 <col:34, line:51:5>
|   `-ReturnStmt 0x5599cc837158 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5599cc837140 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5599cc837120 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5599cc837108 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5599cc8370f0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5599cc8370b0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5599cc837070 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5599cc837040 <col:9> '<bound member function type>' ->data 0x5599cc835450
|         |     |   `-CXXThisExpr 0x5599cc837030 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5599cc837090 <col:16> 'int' 0
|         `-IntegerLiteral 0x5599cc8370d0 <col:21> 'int' 1
|-CXXMethodDecl 0x5599cc835078 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5599cc837328 <col:34, line:59:5>
|   `-ReturnStmt 0x5599cc837318 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5599cc837300 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5599cc8372e0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5599cc8372c8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5599cc8372b0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5599cc837270 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5599cc837230 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5599cc837200 <col:9> '<bound member function type>' ->data 0x5599cc835450
|         |     |   `-CXXThisExpr 0x5599cc8371f0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5599cc837250 <col:16> 'int' 0
|         `-IntegerLiteral 0x5599cc837290 <col:21> 'int' 2
|-CXXMethodDecl 0x5599cc835138 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5599cc837628 <col:38, line:66:5>
|   `-ReturnStmt 0x5599cc837618 <line:65:2, col:43>
|     `-BinaryOperator 0x5599cc8375f8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5599cc8375b8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5599cc8374d0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5599cc837488 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5599cc837470 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5599cc8373b8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5599cc8373a0 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5599cc837350 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       | | |     |   `-CXXThisExpr 0x5599cc837340 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5599cc837380 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5599cc8374b8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5599cc8374a0 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5599cc837450 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5599cc837438 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5599cc8373e8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       | |       |   `-CXXThisExpr 0x5599cc8373d8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5599cc837418 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5599cc8375a0 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5599cc837588 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5599cc837568 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5599cc837550 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5599cc837500 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       |       |   `-CXXThisExpr 0x5599cc8374f0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5599cc837530 <col:37> 'int' 2
|       `-IntegerLiteral 0x5599cc8375d8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5599cc8352b8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5599cc8351f0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5599cc837778 <col:64, line:75:5>
|   `-ReturnStmt 0x5599cc837768 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5599cc837748 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5599cc837718 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5599cc835138
|         `-CXXReinterpretCastExpr 0x5599cc837688 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5599cc837670 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5599cc837640 <col:48> 'const unsigned char *' lvalue ParmVar 0x5599cc8351f0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5599cc835388 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5599cc837840 <col:34, line:80:5>
|   `-ReturnStmt 0x5599cc837830 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5599cc837800 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5599cc8377e8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5599cc8377a0 <col:43> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|           `-CXXThisExpr 0x5599cc837790 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5599cc835450 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5599cc837908 <col:46, line:85:5>
|   `-ReturnStmt 0x5599cc8378f8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5599cc8378c8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5599cc8378b0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5599cc837868 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|           `-CXXThisExpr 0x5599cc837858 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5599cc835598 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5599cc837988 <col:42, line:91:5>
|   `-ReturnStmt 0x5599cc837978 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5599cc837960 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5599cc837930 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|         `-CXXThisExpr 0x5599cc837920 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5599cc835688 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5599cc837d98 <col:36, line:97:5>
|   `-ReturnStmt 0x5599cc837d88 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5599cc837d68 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5599cc837be8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5599cc837bc8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5599cc837bb0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5599cc837b98 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5599cc837a18 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5599cc837a00 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5599cc8379b0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       |   |     |   `-CXXThisExpr 0x5599cc8379a0 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5599cc8379e0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5599cc837b78 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5599cc837b58 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5599cc837b10 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5599cc837af8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5599cc837ae0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5599cc837ab0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5599cc837a98 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5599cc837a48 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|       |       |       |   `-CXXThisExpr 0x5599cc837a38 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5599cc837a78 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5599cc837b38 <col:43> 'int' 16
|       `-ParenExpr 0x5599cc837d48 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5599cc837d28 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5599cc837ce0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5599cc837cc8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5599cc837cb0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5599cc837c80 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5599cc837c68 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5599cc837c18 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5599cc835d48
|           |       |   `-CXXThisExpr 0x5599cc837c08 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5599cc837c48 <col:24> 'int' 0
|           `-IntegerLiteral 0x5599cc837d08 <col:30> 'int' 9
|-CXXMethodDecl 0x5599cc835748 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5599cc837ea8 <col:35, line:111:5>
|   `-ReturnStmt 0x5599cc837e98 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5599cc837e80 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5599cc837e50 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5599cc837e38 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5599cc837e18 <col:9, col:22> 'String' (CXXTemporary 0x5599cc837e18)
|             `-CXXMemberCallExpr 0x5599cc837df0 <col:9, col:22> 'String'
|               `-MemberExpr 0x5599cc837dc0 <col:9> '<bound member function type>' ->unparse_dash 0x5599cc8358c8
|                 `-CXXThisExpr 0x5599cc837db0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5599cc835808 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5599cc8358c8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5599cc835988 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5599cc835a28 <col:44> "" ""
|-CXXConversionDecl 0x5599cc835ac8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5599cc835b70 <col:51> "" ""
|-TypedefDecl 0x5599cc835c28 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5599cc835bf0 'const EtherAddress &'
|   `-QualType 0x5599cc74fad1 'const EtherAddress' const
|     `-RecordType 0x5599cc74fad0 'EtherAddress'
|       `-CXXRecord 0x5599cc8344d8 'EtherAddress'
|-AccessSpecDecl 0x5599cc835c80 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5599cc835d48 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5599cc835e98 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5599cc835da8 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5599cc838150 <col:30, line:146:5>
|   `-BinaryOperator 0x5599cc838130 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5599cc837f38 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5599cc837f20 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5599cc837ed0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|     | |   `-CXXThisExpr 0x5599cc837ec0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5599cc837f00 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5599cc838118 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5599cc8380f8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5599cc837fd0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5599cc837fb8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5599cc837f68 <col:13> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|         | |   `-CXXThisExpr 0x5599cc837f58 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5599cc837f98 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5599cc8380e0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5599cc8380c0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5599cc838068 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5599cc838050 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5599cc838000 <col:24> 'uint16_t [3]' lvalue ->_data 0x5599cc835d48
|             | |   `-CXXThisExpr 0x5599cc837ff0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5599cc838030 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5599cc8380a8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5599cc838088 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5599cc835da8 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5599cc8364c8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5599cc8364c8
| `-ParmVarDecl 0x5599cc8365d8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5599cc836678 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc836788 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5599cc835d48 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5599cc836b10 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5599cc836a98 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5599cc836a50 <col:7> 'uint16_t [3]' xvalue ._data 0x5599cc835d48
| |   |   `-CXXStaticCastExpr 0x5599cc836a20 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5599cc8369f0 <col:7> 'EtherAddress' lvalue ParmVar 0x5599cc836788 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5599cc836af8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5599cc836ad8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5599cc836ac0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5599cc836a98 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5599cc836a50 <col:7> 'uint16_t [3]' xvalue ._data 0x5599cc835d48
| |       |     `-CXXStaticCastExpr 0x5599cc836a20 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5599cc8369f0 <col:7> 'EtherAddress' lvalue ParmVar 0x5599cc836788 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5599cc836ab0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5599cc836b60 <col:7>
`-CXXDestructorDecl 0x5599cc836840 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc7c8bc8 prev 0x5599cc7151d8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc7c8cc0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5599cc7c8d50 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5599cc7c8e88 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5599cc7c8d88 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5599cc7cdce0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc7cdcc0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc7cd858 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5599cc7cdd70 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc7cdd30 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5599cc7c8d88 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5599cc7cd8c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5599cc7cddf0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc7cddb0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc7cd920 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5599cc7cde30 <col:54> 'bool' false
| `-CompoundStmt 0x5599cc7cdf38 <col:61, line:38:5>
|   `-BinaryOperator 0x5599cc7cdf18 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5599cc7cdeb0 <col:9> 'const Element *' lvalue ->_context 0x5599cc7cd7f8
|     | `-CXXThisExpr 0x5599cc7cdea0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5599cc7cdf00 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5599cc7cdee0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5599cc7c9098 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc7c8f48 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5599cc7c8fc0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5599cc7cdd18 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc7cdcf8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc7cd7f8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5599cc7cdf90 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc7cdf50 <col:20> 'const Element *' lvalue ParmVar 0x5599cc7c8f48 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5599cc7cd858 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5599cc7ce010 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc7cdfd0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5599cc7c8fc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5599cc7cd8c0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5599cc7ce090 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5599cc7ce050 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc7cd920 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5599cc7ce0d0 <col:73> 'bool' false
| `-CompoundStmt 0x5599cc7ce148 <col:80, line:46:5>
|-CXXMethodDecl 0x5599cc7c91c8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5599cc7ce1c0 <col:36, line:51:5>
|   `-ReturnStmt 0x5599cc7ce1b0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5599cc7ce198 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5599cc7ce168 <col:16> 'const Element *const' lvalue ->_context 0x5599cc7cd7f8
|         `-CXXThisExpr 0x5599cc7ce158 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5599cc7c92b8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5599cc7ce240 <col:32, line:57:5>
|   `-ReturnStmt 0x5599cc7ce230 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5599cc7ce218 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5599cc7ce1e8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5599cc7cd858
|         `-CXXThisExpr 0x5599cc7ce1d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5599cc7c9378 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5599cc7c9500 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5599cc7c9430 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5599cc7c9650 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5599cc7c95c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5599cc7c97a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5599cc7c9710 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5599cc7cd3d8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5599cc7c9858 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5599cc7cd300 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5599cc7cd708 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5599cc7cd498 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5599cc7cd518 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5599cc7cd5e0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5599cc7cd7c0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5599cc7cd7f8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5599cc7cd858 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5599cc7cd8c0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5599cc7cd920 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5599cc7cd970 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5599cc7cd970
| `-ParmVarDecl 0x5599cc7cda88 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5599cc7cdb28 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5599cc7cdb28
| `-ParmVarDecl 0x5599cc7cdc38 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5599cc85ab18 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc7f5a30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5599cc7f5c08 prev 0x5599cc7f5a30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5599cc7f5c98 <col:46, col:52> col:46 public
|-TypedefDecl 0x5599cc7f5cc0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7f7890 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5599cc7f7840 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5599cc7f6170 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5599cc7f6070 'type'
|     `-TemplateSpecializationType 0x5599cc7f6000 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5599cc7f5ee0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5599cc7f5ec0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5599cc7f5ea0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5599cc7f5fe0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5599cc7f5f00 'char_array'
|-TypedefDecl 0x5599cc7f7948 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5599cc7f7910 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5599cc7f78f0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5599cc7f7890 'type'
|     `-ElaboratedType 0x5599cc7f7840 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5599cc7f6170 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5599cc7f6070 'type'
|         `-TemplateSpecializationType 0x5599cc7f6000 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5599cc7f5ee0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5599cc7f5ec0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5599cc7f5ea0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5599cc7f5fe0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5599cc7f5f00 'char_array'
|-CXXMethodDecl 0x5599cc7f7ac8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5599cc7f79d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5599cc7f7bb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5599cc7f7c98 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5599cc7f7f68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5599cc7f7e70 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5599cc7f81a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5599cc7f8020 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7f8098 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f8378 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5599cc7f8268 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7f82e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f84d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5599cc7f85a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5599cc7f87f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5599cc7f8668 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5599cc7f86e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f8a58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5599cc7f88c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5599cc7f8940 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f8c18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5599cc7f8b28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f8dd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5599cc7f8ce0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f8e90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5599cc7f8f40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5599cc7f9178 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5599cc7f8ff0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5599cc7f9068 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5599cc7f9418 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5599cc7f9320 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5599cc7f94e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5599cc7f9530 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5599cc7f9580 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc7f4438 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5599cc7f4648 prev 0x5599cc7f4438 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5599cc7f59a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5599cc7f5950 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5599cc7f5930 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5599cc7f57e0 'type'
|     `-SubstTemplateTypeParmType 0x5599cc7f5600 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5599cc4b3dd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4b3d78 'T'
|       `-RecordType 0x5599cc7f5150 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5599cc7f5068 'sized_array_memory'
|-FieldDecl 0x5599cc7f95d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5599cc7f9620 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5599cc7f9658 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|   |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5599cc4eba68 'T'
|   `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7f96e8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5599cc7f96b0 'int &'
|   `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7f97a8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5599cc7f9770 'const int &'
|   `-QualType 0x5599cc7f46e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7f9838 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5599cc7f9800 'int *'
|   `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7f98c8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5599cc7f9890 'const int *'
|   `-QualType 0x5599cc7f46e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7fa4b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5599cc7fa460 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5599cc7fa440 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5599cc7fa3d0 'type'
|     `-SubstTemplateTypeParmType 0x5599cc7fa190 'int' sugar
|       |-TemplateTypeParmType 0x5599cc4bebd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4beb80 'T'
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7fa518 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5599cc7f9770 'const int &'
|   `-QualType 0x5599cc7f46e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7fa570 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7fa5d8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5599cc7f9800 'int *'
|   `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|     |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5599cc4eba68 'T'
|     `-BuiltinType 0x5599cc1ed3b0 'int'
|-TypedefDecl 0x5599cc7fa640 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5599cc7f9890 'const int *'
|   `-QualType 0x5599cc7f46e1 'const int' const
|     `-SubstTemplateTypeParmType 0x5599cc7f46e0 'int' sugar
|       |-TemplateTypeParmType 0x5599cc4ebac0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5599cc4eba68 'T'
|       `-BuiltinType 0x5599cc1ed3b0 'int'
|-EnumDecl 0x5599cc7fa698 <line:134:5> col:5
| `-EnumConstantDecl 0x5599cc7fa790 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5599cc7fa770 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5599cc4ed148 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5599cc4ed120 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5599cc4ed100 <col:40> 'int' 1
|-CXXConstructorDecl 0x5599cc7fa818 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5599cc7faa68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7fa8d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7fa970 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5599cc7fad28 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5599cc7fac10 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5599cc7fafe8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5599cc7faed0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5599cc7fb330 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5599cc7fb210 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5599cc7fe600 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5599cc7fe4e0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5599cc7fe8f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7fe738 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7fe7b0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5599cc7fea18 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5599cc7feaf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7feb50 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7feb98 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5599cc7fec48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7feca0 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7fed68 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7fee18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7fee70 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7feeb8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7fef68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7fefc0 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7ff008 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7ff0b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7ff110 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7ff158 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5599cc7ff208 <col:20> Inherited
| `-OptimizeNoneAttr 0x5599cc7ff260 <col:30> Inherited
|-CXXMethodDecl 0x5599cc7ff288 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5599cc7ff338 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5599cc7ff3e8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5599cc7ff5a8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc7ff498 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5599cc7ff510 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5599cc7ff6f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc7ff668 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7ff8a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5599cc7ff7b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5599cc7ff960 <col:20>
| `-OptimizeNoneAttr 0x5599cc7ff9b8 <col:30>
|-CXXMethodDecl 0x5599cc7ffad8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5599cc7ff9e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5599cc7ffb90 <col:20>
| `-OptimizeNoneAttr 0x5599cc7ffbe8 <col:30>
|-CXXMethodDecl 0x5599cc7ffca0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc7ffc10 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7ffde8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5599cc7ffd58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc7fff18 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5599cc800048 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5599cc800118 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5599cc8001e8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5599cc800328 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5599cc800298 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc800470 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5599cc8003e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5599cc8005b8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5599cc800528 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5599cc800670 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5599cc800770 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5599cc8006e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5599cc800828 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5599cc8008e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5599cc8009e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5599cc800b68 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5599cc800aa8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5599cc801328 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5599cc800c20 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5599cc801288 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5599cc801188 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5599cc801408 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5599cc801558 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5599cc8014c8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5599cc801610 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5599cc801858 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5599cc8016d0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5599cc801748 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5599cc801a18 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5599cc801928 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5599cc801c68 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5599cc801ae0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5599cc801b58 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5599cc801d28 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5599cc801f88 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5599cc801e90 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5599cc802058 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc7e7448 prev 0x5599cc7d3158 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5599cc7e7540 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5599cc7e7630 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5599cc815e90 <col:16, line:828:9>
|-CXXDestructorDecl 0x5599cc7e7720 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5599cc815ea0 <col:25, line:830:9>
|-CXXMethodDecl 0x5599cc7e7820 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5599cc7e78d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5599cc7e7978 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5599cc7e7978
| `-ParmVarDecl 0x5599cc7e7a88 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5599cc7e8248 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5599cc7e8248
  `-ParmVarDecl 0x5599cc7f34b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc7d2f68 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5599cc7d30c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5599cc7d3158 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5599cc7d3210 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5599cc7d3318 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5599cc7d3248 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5599cc803618 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5599cc8035f8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5599cc7d3638 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc7d34b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5599cc7d3528 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5599cc803650 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5599cc803630 <col:59> 'int' 0
|-CXXConstructorDecl 0x5599cc7d3810 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc7d3700 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5599cc7d3778 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5599cc803688 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5599cc803668 <col:55> 'int' 0
|-CXXConstructorDecl 0x5599cc7d3bc8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5599cc7d39b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5599cc7d3a28 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5599cc7d3aa0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5599cc8036c0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5599cc8036a0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5599cc7d3d88 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5599cc7d3cc8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5599cc7d3e80 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5599cc7d4068 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5599cc7d3f70 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5599cc7d4158 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5599cc803a70 <col:24, line:291:5>
|   `-ReturnStmt 0x5599cc803a60 <line:290:9, col:79>
|     `-BinaryOperator 0x5599cc803a40 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5599cc803918 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5599cc803870 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5599cc803850 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5599cc803748 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5599cc803730 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5599cc803718 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5599cc8036e8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5599cc7f43d0
|       | |   |       `-CXXThisExpr 0x5599cc8036d8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5599cc803838 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5599cc803820 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5599cc8037e8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5599cc8037b8 <col:28, col:35> '<bound member function type>' ->size 0x5599cc7bb268
|       | |           `-ImplicitCastExpr 0x5599cc803808 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5599cc8037a0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5599cc803770 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5599cc7f43d0
|       | |                 `-CXXThisExpr 0x5599cc803760 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5599cc803900 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5599cc8038e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5599cc8038d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5599cc8038a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5599cc8021a0
|       |         `-CXXThisExpr 0x5599cc803890 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5599cc803a20 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5599cc803a08 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5599cc8039f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5599cc8039b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5599cc803998 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5599cc803948 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5599cc802250
|         |     |   `-CXXThisExpr 0x5599cc803938 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5599cc803978 <col:73> 'int' 0
|         `-IntegerLiteral 0x5599cc8039d0 <col:79> 'int' 0
|-CXXMethodDecl 0x5599cc7d4218 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5599cc803c48 <col:32, line:296:5>
|   `-ReturnStmt 0x5599cc803c38 <line:295:9, col:49>
|     `-BinaryOperator 0x5599cc803c18 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5599cc803af8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5599cc803ae0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5599cc803ac8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5599cc803a98 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5599cc8021a0
|       |       `-CXXThisExpr 0x5599cc803a88 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5599cc803bf8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5599cc803be0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5599cc803bc8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5599cc803b88 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5599cc803b70 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5599cc803b20 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5599cc802250
|         |     |   `-CXXThisExpr 0x5599cc803b10 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5599cc803b50 <col:43> 'int' 0
|         `-IntegerLiteral 0x5599cc803ba8 <col:49> 'int' 0
|-CXXMethodDecl 0x5599cc7d4308 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5599cc803e58 <col:19, line:306:5>
|   |-IfStmt 0x5599cc803d78 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5599cc803cb8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5599cc803ca0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5599cc803c70 <col:13> 'Vector<String> *' lvalue ->_conf 0x5599cc7f43d0
|   | |     `-CXXThisExpr 0x5599cc803c60 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5599cc803d58 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5599cc803d28 <col:13, col:20> '<bound member function type>' ->clear 0x5599cc7bdc68
|   |     `-ImplicitCastExpr 0x5599cc803d10 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5599cc803ce0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5599cc7f43d0
|   |         `-CXXThisExpr 0x5599cc803cd0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5599cc803e00 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5599cc803dd0 <col:9, col:16> '<bound member function type>' .clear 0x5599cc801d28
|   |   `-MemberExpr 0x5599cc803da0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5599cc802140
|   |     `-CXXThisExpr 0x5599cc803d90 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5599cc803e48 <line:305:9, col:17>
|     `-UnaryOperator 0x5599cc803e30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc803e20 <col:17> 'Args *' this
|-CXXMethodDecl 0x5599cc7d4588 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5599cc7d4490 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5599cc7d4708 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5599cc7d4640 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5599cc7d4a88 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5599cc7d47b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5599cc7d49e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5599cc7d4858 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5599cc7d48d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5599cc804178 <col:67, line:327:5>
|     |-WhileStmt 0x5599cc804128 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5599cc803f40 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5599cc803ec0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5599cc70d6a8 0x5599cc556c88 0x5599cc556960 0x5599cc548140 0x5599cc547df0 0x5599cc5476e0 0x5599cc51a050 0x5599cc4a6510
|     | | |-DeclRefExpr 0x5599cc803e80 <col:16> 'Iter' lvalue ParmVar 0x5599cc7d4858 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5599cc803ea0 <col:25> 'Iter' lvalue ParmVar 0x5599cc7d48d0 'end' 'Iter'
|     | `-CompoundStmt 0x5599cc804108 <col:30, line:325:9>
|     |   |-CallExpr 0x5599cc8040a8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5599cc803f88 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5599cc804078 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5599cc804008 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|     |   |   `-DeclRefExpr 0x5599cc803fe8 <col:24> 'Iter' lvalue ParmVar 0x5599cc7d4858 'begin' 'Iter'
|     |   `-UnaryOperator 0x5599cc8040f0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5599cc8040d0 <col:15> 'Iter' lvalue ParmVar 0x5599cc7d4858 'begin' 'Iter'
|     `-ReturnStmt 0x5599cc804168 <line:326:9, col:17>
|       `-UnaryOperator 0x5599cc804150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc804140 <col:17> 'Args *' this
|-CXXMethodDecl 0x5599cc7d4b90 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5599cc7d4b00 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5599cc7d4cd8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5599cc7d4c48 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5599cc7d4da0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5599cc804258 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5599cc8041f8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5599cc8041a8 <col:9> '<bound member function type>' ->reset_from 0x5599cc8025c8
|   | | `-CXXThisExpr 0x5599cc804198 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5599cc8041d8 <col:20> 'int' 0
|   `-ReturnStmt 0x5599cc804248 <line:352:9, col:17>
|     `-UnaryOperator 0x5599cc804230 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc804220 <col:17> 'Args *' this
|-VarDecl 0x5599cc7d4e58 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5599cc7d4ec0 <col:38> 'int' 1
|-VarDecl 0x5599cc7d4f50 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5599cc7d4fb8 <col:39> 'int' 2
|-VarDecl 0x5599cc7d5048 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5599cc7d50b0 <col:39> 'int' 4
|-VarDecl 0x5599cc7d5140 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5599cc7d51a8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5599cc7d5568 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5599cc7d5220 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5599cc7d54c8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5599cc7d5310 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5599cc7d53b8 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x5599cc8043b0 <col:43, line:371:5>
| |   `-ReturnStmt 0x5599cc8043a0 <line:370:9, col:34>
| |     `-CallExpr 0x5599cc804368 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5599cc804288 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5599cc804308 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d5310 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5599cc804328 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5599cc804348 <col:33> 'T' lvalue ParmVar 0x5599cc7d53b8 'x' 'T &'
| |-CXXMethodDecl 0x5599cc85b8a8 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, EtherAddress &)'
| | |-TemplateArgument type 'EtherAddress'
| | |-ParmVarDecl 0x5599cc85b708 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5599cc85b7d8 <col:37, col:40> col:40 x 'EtherAddress &'
| |-CXXMethodDecl 0x5599cc85bd48 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, int &)'
| | |-TemplateArgument type 'int'
| | |-ParmVarDecl 0x5599cc85bb60 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x5599cc85bc38 <col:37, col:40> col:40 x 'int &'
| `-CXXMethodDecl 0x5599cc85c1d8 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5599cc85bff8 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5599cc85c0c8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x5599cc7d5898 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5599cc7d55d0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7d57f8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5599cc7d5680 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d5728 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5599cc804500 <col:45, line:375:5>
|     `-ReturnStmt 0x5599cc8044f0 <line:374:9, col:42>
|       `-CallExpr 0x5599cc8044b8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8043d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc804458 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d5680 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc804478 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int'
|         `-DeclRefExpr 0x5599cc804498 <col:41> 'T' lvalue ParmVar 0x5599cc7d5728 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7d5bc8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5599cc7d5900 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7d5b28 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5599cc7d59b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d5a58 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5599cc804650 <col:45, line:379:5>
|     `-ReturnStmt 0x5599cc804640 <line:378:9, col:43>
|       `-CallExpr 0x5599cc804608 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc804528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc8045a8 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d59b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc8045c8 <col:30> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         `-DeclRefExpr 0x5599cc8045e8 <col:42> 'T' lvalue ParmVar 0x5599cc7d5a58 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7d5ef8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5599cc7d5c30 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5599cc7d5e58 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5599cc7d5ce0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5599cc7d5d88 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5599cc804850 <col:46, line:383:5>
| |   `-ReturnStmt 0x5599cc804840 <line:382:9, col:55>
| |     `-CallExpr 0x5599cc804808 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5599cc804678 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5599cc8046f8 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d5ce0 'keyword' 'const char *'
| |       |-BinaryOperator 0x5599cc8047c8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5599cc804778 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5599cc804758 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5599cc8047b0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5599cc804790 <col:42> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5599cc8047e8 <col:54> 'T' lvalue ParmVar 0x5599cc7d5d88 'x' 'T &'
| |-CXXMethodDecl 0x5599cc85af88 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, EtherAddress &)'
| | |-TemplateArgument type 'EtherAddress'
| | |-ParmVarDecl 0x5599cc85ada0 <col:19, col:31> col:31 keyword 'const char *'
| | `-ParmVarDecl 0x5599cc85ae78 <col:40, col:43> col:43 x 'EtherAddress &'
| `-CXXMethodDecl 0x5599cc85b3f8 <col:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned short &)'
|   |-TemplateArgument type 'unsigned short'
|   |-ParmVarDecl 0x5599cc85b210 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5599cc85b2e8 <col:40, col:43> col:43 x 'unsigned short &'
|-FunctionTemplateDecl 0x5599cc7d62f8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5599cc7d5f60 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7d6258 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5599cc7d6010 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d6090 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7d6138 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5599cc804990 <col:54, line:388:5>
|     |-CallExpr 0x5599cc804918 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc804868 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5599cc8048a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5599cc8048b8 <col:30> 'const char *' lvalue ParmVar 0x5599cc7d6010 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc8048d8 <col:39> 'int' lvalue ParmVar 0x5599cc7d6090 'flags' 'int'
|     | `-DeclRefExpr 0x5599cc8048f8 <col:46> 'T' lvalue ParmVar 0x5599cc7d6138 'x' 'T &'
|     `-ReturnStmt 0x5599cc804980 <line:387:9, col:17>
|       `-UnaryOperator 0x5599cc804968 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc804958 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7d67a8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5599cc7d6368 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7d63e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5599cc7d6708 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d64a8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d6548 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d65e8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc804b00 <col:74, line:403:5>
|     `-ReturnStmt 0x5599cc804af0 <line:402:9, col:56>
|       `-CallExpr 0x5599cc804ab0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8049c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc804a30 <col:28> 'const char *' lvalue ParmVar 0x5599cc7d64a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc804a50 <col:37> 'int' 0
|         |-DeclRefExpr 0x5599cc804a70 <col:40> 'T' lvalue ParmVar 0x5599cc7d6548 'x' 'T &'
|         `-DeclRefExpr 0x5599cc804a90 <col:43> 'const V' lvalue ParmVar 0x5599cc7d65e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5599cc7d6c18 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5599cc7d6818 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7d6898 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5599cc7d6b78 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d6958 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d69f8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d6a98 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc804c68 <col:76, line:407:5>
|     `-ReturnStmt 0x5599cc804c58 <line:406:9, col:65>
|       `-CallExpr 0x5599cc804c18 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc804b28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc804b98 <col:28> 'const char *' lvalue ParmVar 0x5599cc7d6958 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc804bb8 <col:37> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         |-DeclRefExpr 0x5599cc804bd8 <col:49> 'T' lvalue ParmVar 0x5599cc7d69f8 'x' 'T &'
|         `-DeclRefExpr 0x5599cc804bf8 <col:52> 'const V' lvalue ParmVar 0x5599cc7d6a98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5599cc7d7168 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5599cc7d6c88 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7d6d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5599cc7d70c8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d6dc8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d6e48 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7d6ee8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d6f88 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc804dd0 <col:85, line:412:5>
|     |-CallExpr 0x5599cc804d50 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc804c80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5599cc804cc0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5599cc804cd0 <col:37> 'const char *' lvalue ParmVar 0x5599cc7d6dc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc804cf0 <col:46> 'int' lvalue ParmVar 0x5599cc7d6e48 'flags' 'int'
|     | |-DeclRefExpr 0x5599cc804d10 <col:53> 'T' lvalue ParmVar 0x5599cc7d6ee8 'x' 'T &'
|     | `-DeclRefExpr 0x5599cc804d30 <col:56> 'const V' lvalue ParmVar 0x5599cc7d6f88 'default_value' 'const V &'
|     `-ReturnStmt 0x5599cc804dc0 <line:411:9, col:17>
|       `-UnaryOperator 0x5599cc804da8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc804d98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7d75f8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5599cc7d71e0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d7258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x5599cc7d7558 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x5599cc7d7318 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5599cc7d7390 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x5599cc7d7438 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x5599cc804f50 <col:53, line:425:5>
| |   `-ReturnStmt 0x5599cc804f40 <line:424:9, col:42>
| |     `-CallExpr 0x5599cc804f00 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5599cc804e00 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5599cc804e80 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d7318 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5599cc804ea0 <col:30> 'int' 0
| |       |-DeclRefExpr 0x5599cc804ec0 <col:33> 'P' lvalue ParmVar 0x5599cc7d7390 'parser' 'P'
| |       `-DeclRefExpr 0x5599cc804ee0 <col:41> 'T' lvalue ParmVar 0x5599cc7d7438 'x' 'T &'
| `-CXXMethodDecl 0x5599cc85cca8 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, SecondsArg, unsigned int &)'
|   |-TemplateArgument type 'SecondsArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5599cc85ca18 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x5599cc85cab8 <col:37, col:39> col:39 parser 'SecondsArg':'SecondsArg'
|   `-ParmVarDecl 0x5599cc85cb88 <col:47, col:50> col:50 x 'unsigned int &'
|-FunctionTemplateDecl 0x5599cc7d7a48 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5599cc7d7668 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d76e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7d79a8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7d77a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d7820 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d78c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5599cc8050c8 <col:55, line:429:5>
|     `-ReturnStmt 0x5599cc8050b8 <line:428:9, col:50>
|       `-CallExpr 0x5599cc805078 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc804f78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc804ff8 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d77a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc805018 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int'
|         |-DeclRefExpr 0x5599cc805038 <col:41> 'P' lvalue ParmVar 0x5599cc7d7820 'parser' 'P'
|         `-DeclRefExpr 0x5599cc805058 <col:49> 'T' lvalue ParmVar 0x5599cc7d78c8 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7d7e98 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5599cc7d7ab8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d7b38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7d7df8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7d7bf8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d7c70 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d7d18 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5599cc805240 <col:55, line:433:5>
|     `-ReturnStmt 0x5599cc805230 <line:432:9, col:51>
|       `-CallExpr 0x5599cc8051f0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8050f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805170 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d7bf8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc805190 <col:30> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         |-DeclRefExpr 0x5599cc8051b0 <col:42> 'P' lvalue ParmVar 0x5599cc7d7c70 'parser' 'P'
|         `-DeclRefExpr 0x5599cc8051d0 <col:50> 'T' lvalue ParmVar 0x5599cc7d7d18 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7d82e8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5599cc7d7f08 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d7f88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7d8248 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7d8048 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d80c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d8168 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5599cc805468 <col:56, line:437:5>
|     `-ReturnStmt 0x5599cc805458 <line:436:9, col:63>
|       `-CallExpr 0x5599cc805418 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc8052e8 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d8048 'keyword' 'const char *'
|         |-BinaryOperator 0x5599cc8053b8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5599cc805368 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5599cc805348 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5599cc8053a0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5599cc805380 <col:42> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5599cc8053d8 <col:54> 'P' lvalue ParmVar 0x5599cc7d80c0 'parser' 'P'
|         `-DeclRefExpr 0x5599cc8053f8 <col:62> 'T' lvalue ParmVar 0x5599cc7d8168 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7d8818 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5599cc7d8358 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d83d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7d8778 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5599cc7d8498 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d8518 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7d8590 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d8638 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5599cc8055d0 <col:64, line:442:5>
|     |-CallExpr 0x5599cc805550 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc805480 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5599cc8054c0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5599cc8054d0 <col:30> 'const char *' lvalue ParmVar 0x5599cc7d8498 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc8054f0 <col:39> 'int' lvalue ParmVar 0x5599cc7d8518 'flags' 'int'
|     | |-DeclRefExpr 0x5599cc805510 <col:46> 'P' lvalue ParmVar 0x5599cc7d8590 'parser' 'P'
|     | `-DeclRefExpr 0x5599cc805530 <col:54> 'T' lvalue ParmVar 0x5599cc7d8638 'x' 'T &'
|     `-ReturnStmt 0x5599cc8055c0 <line:441:9, col:17>
|       `-UnaryOperator 0x5599cc8055a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc805598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7d8e18 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5599cc7d8890 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d8908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5599cc7d8988 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5599cc7d8d78 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d8a50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d8ac8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d8b68 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d8c38 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc805768 <col:84, line:458:5>
|     `-ReturnStmt 0x5599cc805758 <line:457:9, col:64>
|       `-CallExpr 0x5599cc805710 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805670 <col:28> 'const char *' lvalue ParmVar 0x5599cc7d8a50 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc805690 <col:37> 'int' 0
|         |-DeclRefExpr 0x5599cc8056b0 <col:40> 'P' lvalue ParmVar 0x5599cc7d8ac8 'parser' 'P'
|         |-DeclRefExpr 0x5599cc8056d0 <col:48> 'T' lvalue ParmVar 0x5599cc7d8b68 'x' 'T &'
|         `-DeclRefExpr 0x5599cc8056f0 <col:51> 'const V' lvalue ParmVar 0x5599cc7d8c38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5599cc7d9398 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5599cc7d8e90 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d8f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5599cc7d8f88 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5599cc7d92f8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d9050 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d90c8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d9168 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d9208 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc8058f8 <col:86, line:462:5>
|     `-ReturnStmt 0x5599cc8058e8 <line:461:9, col:73>
|       `-CallExpr 0x5599cc8058a0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805790 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805800 <col:28> 'const char *' lvalue ParmVar 0x5599cc7d9050 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc805820 <col:37> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         |-DeclRefExpr 0x5599cc805840 <col:49> 'P' lvalue ParmVar 0x5599cc7d90c8 'parser' 'P'
|         |-DeclRefExpr 0x5599cc805860 <col:57> 'T' lvalue ParmVar 0x5599cc7d9168 'x' 'T &'
|         `-DeclRefExpr 0x5599cc805880 <col:60> 'const V' lvalue ParmVar 0x5599cc7d9208 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5599cc7d99f8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5599cc7d9410 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d9488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5599cc7d9508 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5599cc7d9958 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7d95d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d9650 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7d96c8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d9768 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7d9808 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5599cc805a88 <col:95, line:467:5>
|     |-CallExpr 0x5599cc805a00 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc805910 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5599cc805950 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5599cc805960 <col:37> 'const char *' lvalue ParmVar 0x5599cc7d95d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc805980 <col:46> 'int' lvalue ParmVar 0x5599cc7d9650 'flags' 'int'
|     | |-DeclRefExpr 0x5599cc8059a0 <col:53> 'P' lvalue ParmVar 0x5599cc7d96c8 'parser' 'P'
|     | |-DeclRefExpr 0x5599cc8059c0 <col:61> 'T' lvalue ParmVar 0x5599cc7d9768 'x' 'T &'
|     | `-DeclRefExpr 0x5599cc8059e0 <col:64> 'const V' lvalue ParmVar 0x5599cc7d9808 'default_value' 'const V &'
|     `-ReturnStmt 0x5599cc805a78 <line:466:9, col:17>
|       `-UnaryOperator 0x5599cc805a60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc805a50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7d9fd8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5599cc7d9a78 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7d9af8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7d9b78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7d9f38 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7d9c40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7d9cb8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7d9d58 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5599cc7d9df8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5599cc805c30 <col:63, line:481:5>
|     `-ReturnStmt 0x5599cc805c20 <line:480:9, col:47>
|       `-CallExpr 0x5599cc805bd8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805ab8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805b38 <col:21> 'const char *' lvalue ParmVar 0x5599cc7d9c40 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc805b58 <col:30> 'int' 0
|         |-DeclRefExpr 0x5599cc805b78 <col:33> 'P' lvalue ParmVar 0x5599cc7d9cb8 'parser' 'P'
|         |-DeclRefExpr 0x5599cc805b98 <col:41> 'T1' lvalue ParmVar 0x5599cc7d9d58 'x1' 'T1 &'
|         `-DeclRefExpr 0x5599cc805bb8 <col:45> 'T2' lvalue ParmVar 0x5599cc7d9df8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5599cc7da558 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5599cc7da050 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7da0c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7da148 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7da4b8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7da210 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7da288 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7da328 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5599cc7da3c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5599cc805dd0 <col:65, line:485:5>
|     `-ReturnStmt 0x5599cc805dc0 <line:484:9, col:55>
|       `-CallExpr 0x5599cc805d78 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805cd8 <col:21> 'const char *' lvalue ParmVar 0x5599cc7da210 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc805cf8 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int'
|         |-DeclRefExpr 0x5599cc805d18 <col:41> 'P' lvalue ParmVar 0x5599cc7da288 'parser' 'P'
|         |-DeclRefExpr 0x5599cc805d38 <col:49> 'T1' lvalue ParmVar 0x5599cc7da328 'x1' 'T1 &'
|         `-DeclRefExpr 0x5599cc805d58 <col:53> 'T2' lvalue ParmVar 0x5599cc7da3c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5599cc7daad8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5599cc7da5d0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7da648 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7da6c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7daa38 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7da790 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7da808 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7da8a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5599cc7da948 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5599cc805f70 <col:65, line:489:5>
|     `-ReturnStmt 0x5599cc805f60 <line:488:9, col:56>
|       `-CallExpr 0x5599cc805f18 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc805e78 <col:21> 'const char *' lvalue ParmVar 0x5599cc7da790 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc805e98 <col:30> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         |-DeclRefExpr 0x5599cc805eb8 <col:42> 'P' lvalue ParmVar 0x5599cc7da808 'parser' 'P'
|         |-DeclRefExpr 0x5599cc805ed8 <col:50> 'T1' lvalue ParmVar 0x5599cc7da8a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5599cc805ef8 <col:54> 'T2' lvalue ParmVar 0x5599cc7da948 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5599cc7db058 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5599cc7dab50 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7dabc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7dac48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7dafb8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7dad10 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dad88 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7dae28 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5599cc7daec8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5599cc8061c0 <col:66, line:493:5>
|     `-ReturnStmt 0x5599cc8061b0 <line:492:9, col:68>
|       `-CallExpr 0x5599cc806168 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc805f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc806018 <col:21> 'const char *' lvalue ParmVar 0x5599cc7dad10 'keyword' 'const char *'
|         |-BinaryOperator 0x5599cc8060e8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5599cc806098 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5599cc806078 <col:30> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5599cc8060d0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5599cc8060b0 <col:42> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5599cc806108 <col:54> 'P' lvalue ParmVar 0x5599cc7dad88 'parser' 'P'
|         |-DeclRefExpr 0x5599cc806128 <col:62> 'T1' lvalue ParmVar 0x5599cc7dae28 'x1' 'T1 &'
|         `-DeclRefExpr 0x5599cc806148 <col:66> 'T2' lvalue ParmVar 0x5599cc7daec8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5599cc7db6b8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5599cc7db0d0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7db148 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7db1c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7db618 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7db290 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7db310 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7db388 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7db428 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5599cc7db4c8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5599cc806350 <col:74, line:498:5>
|     |-CallExpr 0x5599cc8062c8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc8061d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5599cc806218 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5599cc806228 <col:30> 'const char *' lvalue ParmVar 0x5599cc7db290 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc806248 <col:39> 'int' lvalue ParmVar 0x5599cc7db310 'flags' 'int'
|     | |-DeclRefExpr 0x5599cc806268 <col:46> 'P' lvalue ParmVar 0x5599cc7db388 'parser' 'P'
|     | |-DeclRefExpr 0x5599cc806288 <col:54> 'T1' lvalue ParmVar 0x5599cc7db428 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5599cc8062a8 <col:58> 'T2' lvalue ParmVar 0x5599cc7db4c8 'x2' 'T2 &'
|     `-ReturnStmt 0x5599cc806340 <line:497:9, col:17>
|       `-UnaryOperator 0x5599cc806328 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc806318 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7dba18 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5599cc7db738 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7db978 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5599cc7db7f0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7db868 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5599cc8080a8 <col:52, line:509:5>
|     `-ReturnStmt 0x5599cc808098 <line:508:9, col:44>
|       `-CallExpr 0x5599cc808060 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc806380 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc8063f0 <col:26> 'const char *' lvalue ParmVar 0x5599cc7db7f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc806410 <col:35> 'int' 0
|         `-DeclRefExpr 0x5599cc808040 <col:38> 'P' lvalue ParmVar 0x5599cc7db868 'parser' 'P'
|-FunctionTemplateDecl 0x5599cc7dbd18 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5599cc7dba80 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7dbc78 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5599cc7dbb30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dbba8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5599cc8081e8 <col:54, line:513:5>
|     `-ReturnStmt 0x5599cc8081d8 <line:512:9, col:52>
|       `-CallExpr 0x5599cc8081a0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8080d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808140 <col:26> 'const char *' lvalue ParmVar 0x5599cc7dbb30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808160 <col:35> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int'
|         `-DeclRefExpr 0x5599cc808180 <col:46> 'P' lvalue ParmVar 0x5599cc7dbba8 'parser' 'P'
|-FunctionTemplateDecl 0x5599cc7dc018 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5599cc7dbd80 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7dbf78 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5599cc7dbe30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dbea8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5599cc808328 <col:54, line:517:5>
|     `-ReturnStmt 0x5599cc808318 <line:516:9, col:53>
|       `-CallExpr 0x5599cc8082e0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808210 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808280 <col:26> 'const char *' lvalue ParmVar 0x5599cc7dbe30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc8082a0 <col:35> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int'
|         `-DeclRefExpr 0x5599cc8082c0 <col:47> 'P' lvalue ParmVar 0x5599cc7dbea8 'parser' 'P'
|-FunctionTemplateDecl 0x5599cc7dc318 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5599cc7dc080 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7dc278 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5599cc7dc130 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dc1a8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5599cc808518 <col:55, line:521:5>
|     `-ReturnStmt 0x5599cc808508 <line:520:9, col:65>
|       `-CallExpr 0x5599cc8084d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc8083c0 <col:26> 'const char *' lvalue ParmVar 0x5599cc7dc130 'keyword' 'const char *'
|         |-BinaryOperator 0x5599cc808490 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5599cc808440 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5599cc808420 <col:35> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5599cc808478 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5599cc808458 <col:47> 'const int' lvalue Var 0x5599cc7d4f50 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5599cc8084b0 <col:59> 'P' lvalue ParmVar 0x5599cc7dc1a8 'parser' 'P'
|-FunctionTemplateDecl 0x5599cc7dc6e8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5599cc7dc380 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7dc648 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5599cc7dc430 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dc4b0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7dc528 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5599cc808658 <col:63, line:526:5>
|     |-CallExpr 0x5599cc8085e0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc808530 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5599cc808570 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5599cc808580 <col:35> 'const char *' lvalue ParmVar 0x5599cc7dc430 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5599cc8085a0 <col:44> 'int' lvalue ParmVar 0x5599cc7dc4b0 'flags' 'int'
|     | `-DeclRefExpr 0x5599cc8085c0 <col:51> 'P' lvalue ParmVar 0x5599cc7dc528 'parser' 'P'
|     `-ReturnStmt 0x5599cc808648 <line:525:9, col:17>
|       `-UnaryOperator 0x5599cc808630 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc808620 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7dcb38 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5599cc7dc758 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7dc7d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7dca98 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7dc898 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dc910 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7dc9b8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5599cc8087b0 <col:58, line:541:5>
|     `-ReturnStmt 0x5599cc8087a0 <line:540:9, col:39>
|       `-CallExpr 0x5599cc808768 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808708 <col:21> 'const char *' lvalue ParmVar 0x5599cc7dc898 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808728 <col:30> 'P' lvalue ParmVar 0x5599cc7dc910 'parser' 'P'
|         `-DeclRefExpr 0x5599cc808748 <col:38> 'T' lvalue ParmVar 0x5599cc7dc9b8 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7dcf88 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5599cc7dcba8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7dcc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7dcee8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7dcce8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dcd60 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7dce08 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5599cc8088e8 <col:60, line:545:5>
|     `-ReturnStmt 0x5599cc8088d8 <line:544:9, col:41>
|       `-CallExpr 0x5599cc8088a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8087d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808840 <col:23> 'const char *' lvalue ParmVar 0x5599cc7dcce8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808860 <col:32> 'P' lvalue ParmVar 0x5599cc7dcd60 'parser' 'P'
|         `-DeclRefExpr 0x5599cc808880 <col:40> 'T' lvalue ParmVar 0x5599cc7dce08 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e0418 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5599cc7dcff8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7dd078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e0378 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7dd138 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7dd1b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7dd258 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5599cc808a20 <col:60, line:549:5>
|     `-ReturnStmt 0x5599cc808a10 <line:548:9, col:41>
|       `-CallExpr 0x5599cc8089d8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808978 <col:23> 'const char *' lvalue ParmVar 0x5599cc7dd138 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808998 <col:32> 'P' lvalue ParmVar 0x5599cc7dd1b0 'parser' 'P'
|         `-DeclRefExpr 0x5599cc8089b8 <col:40> 'T' lvalue ParmVar 0x5599cc7dd258 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e0868 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5599cc7e0488 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e0508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e07c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7e05c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e0640 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e06e8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5599cc808b58 <col:61, line:553:5>
|     `-ReturnStmt 0x5599cc808b48 <line:552:9, col:42>
|       `-CallExpr 0x5599cc808b10 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808ab0 <col:24> 'const char *' lvalue ParmVar 0x5599cc7e05c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808ad0 <col:33> 'P' lvalue ParmVar 0x5599cc7e0640 'parser' 'P'
|         `-DeclRefExpr 0x5599cc808af0 <col:41> 'T' lvalue ParmVar 0x5599cc7e06e8 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e0d48 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5599cc7e08d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e0958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e0ca8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5599cc7e0a18 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e0a98 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e0b10 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e0bb8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5599cc808cd0 <col:69, line:557:5>
|     `-ReturnStmt 0x5599cc808cc0 <line:556:9, col:46>
|       `-CallExpr 0x5599cc808c80 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808b80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808c00 <col:21> 'const char *' lvalue ParmVar 0x5599cc7e0a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc808c20 <col:30> 'int' lvalue ParmVar 0x5599cc7e0a98 'flags' 'int'
|         |-DeclRefExpr 0x5599cc808c40 <col:37> 'P' lvalue ParmVar 0x5599cc7e0b10 'parser' 'P'
|         `-DeclRefExpr 0x5599cc808c60 <col:45> 'T' lvalue ParmVar 0x5599cc7e0bb8 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e1058 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e0dc0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7e0fb8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5599cc7e0e70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e0ee8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5599cc808e10 <col:56, line:571:5>
|     `-ReturnStmt 0x5599cc808e00 <line:570:9, col:48>
|       `-CallExpr 0x5599cc808dc8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc808cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc808d68 <col:30> 'const char *' lvalue ParmVar 0x5599cc7e0e70 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc808d88 <col:39> 'int' 0
|         `-DeclRefExpr 0x5599cc808da8 <col:42> 'P' lvalue ParmVar 0x5599cc7e0ee8 'parser' 'P'
|-FunctionTemplateDecl 0x5599cc7e13e8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e10c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7e1348 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5599cc7e1170 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e11f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e1268 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5599cc808fe0 <col:67, line:576:5>
|     |-CallExpr 0x5599cc808f68 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc808e28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5599cc808e68 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5599cc808e78 <col:39> 'const char *' lvalue ParmVar 0x5599cc7e1170 'keyword' 'const char *'
|     | |-BinaryOperator 0x5599cc808f28 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5599cc808ed8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5599cc808e98 <col:48> 'int' lvalue ParmVar 0x5599cc7e11f0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5599cc808f10 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5599cc808ef0 <col:56> 'const int' lvalue Var 0x5599cc7d5140 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5599cc808f48 <col:68> 'P' lvalue ParmVar 0x5599cc7e1268 'parser' 'P'
|     `-ReturnStmt 0x5599cc808fd0 <line:575:9, col:17>
|       `-UnaryOperator 0x5599cc808fb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc808fa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7e1838 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e1458 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e14d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e1798 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5599cc7e1598 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e1610 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e16b8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5599cc809150 <col:62, line:592:5>
|     `-ReturnStmt 0x5599cc809140 <line:591:9, col:51>
|       `-CallExpr 0x5599cc809100 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc809010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc809080 <col:30> 'const char *' lvalue ParmVar 0x5599cc7e1598 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc8090a0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5599cc8090c0 <col:42> 'P' lvalue ParmVar 0x5599cc7e1610 'parser' 'P'
|         `-DeclRefExpr 0x5599cc8090e0 <col:50> 'T' lvalue ParmVar 0x5599cc7e16b8 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e1d18 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e18a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e1928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e1c78 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5599cc7e19e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e1a68 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e1ae0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e1b88 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5599cc809348 <col:73, line:597:5>
|     |-CallExpr 0x5599cc8092c8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc809168 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5599cc8091a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5599cc8091b8 <col:39> 'const char *' lvalue ParmVar 0x5599cc7e19e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5599cc809268 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5599cc809218 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5599cc8091d8 <col:48> 'int' lvalue ParmVar 0x5599cc7e1a68 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5599cc809250 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5599cc809230 <col:56> 'const int' lvalue Var 0x5599cc7d5140 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5599cc809288 <col:68> 'P' lvalue ParmVar 0x5599cc7e1ae0 'parser' 'P'
|     | `-DeclRefExpr 0x5599cc8092a8 <col:76> 'T' lvalue ParmVar 0x5599cc7e1b88 'x' 'T &'
|     `-ReturnStmt 0x5599cc809338 <line:596:9, col:17>
|       `-UnaryOperator 0x5599cc809320 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc809310 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7e22c8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5599cc7e1d90 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e1e08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e2228 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5599cc7e1ec8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e1f40 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e2100 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5599cc8094b8 <col:65, line:614:5>
|     `-ReturnStmt 0x5599cc8094a8 <line:613:9, col:46>
|       `-CallExpr 0x5599cc809468 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc809378 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc8093e8 <col:25> 'const char *' lvalue ParmVar 0x5599cc7e1ec8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc809408 <col:34> 'int' 0
|         |-DeclRefExpr 0x5599cc809428 <col:37> 'P' lvalue ParmVar 0x5599cc7e1f40 'parser' 'P'
|         `-DeclRefExpr 0x5599cc809448 <col:45> 'Vector<T>' lvalue ParmVar 0x5599cc7e2100 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5599cc7e26f8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5599cc7e2338 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7e2658 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5599cc7e23f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e2540 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5599cc8096d0 <col:55, line:618:5>
|     `-ReturnStmt 0x5599cc8096c0 <line:617:9, col:55>
|       `-CallExpr 0x5599cc809680 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8094e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc809550 <col:25> 'const char *' lvalue ParmVar 0x5599cc7e23f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5599cc809570 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5599cc809640 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5599cc809660 <col:54> 'Vector<T>' lvalue ParmVar 0x5599cc7e2540 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5599cc7e2cc8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5599cc7e2760 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e27d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e2c28 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5599cc7e2898 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e2918 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e2990 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e2ae0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5599cc8098c8 <col:76, line:623:5>
|     |-CallExpr 0x5599cc809848 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc8096e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5599cc809728 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5599cc809738 <col:34> 'const char *' lvalue ParmVar 0x5599cc7e2898 'keyword' 'const char *'
|     | |-BinaryOperator 0x5599cc8097e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5599cc809798 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5599cc809758 <col:43> 'int' lvalue ParmVar 0x5599cc7e2918 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5599cc8097d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5599cc8097b0 <col:51> 'const int' lvalue Var 0x5599cc7d5140 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5599cc809808 <col:63> 'P' lvalue ParmVar 0x5599cc7e2990 'parser' 'P'
|     | `-DeclRefExpr 0x5599cc809828 <col:71> 'Vector<T>' lvalue ParmVar 0x5599cc7e2ae0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5599cc8098b8 <line:622:9, col:17>
|       `-UnaryOperator 0x5599cc8098a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc809890 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7e3208 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5599cc7e2d40 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e2db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e3168 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5599cc7e2e78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e2ef8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e3040 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5599cc809b30 <col:66, line:627:5>
|     `-ReturnStmt 0x5599cc809b20 <line:626:9, col:59>
|       `-CallExpr 0x5599cc809ae0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5599cc8098f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5599cc809968 <col:25> 'const char *' lvalue ParmVar 0x5599cc7e2e78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5599cc809988 <col:34> 'int' lvalue ParmVar 0x5599cc7e2ef8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5599cc809aa0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5599cc809ac0 <col:58> 'Vector<T>' lvalue ParmVar 0x5599cc7e3040 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5599cc7e3298 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5599cc809bb0 <col:25, line:633:5>
|   `-ReturnStmt 0x5599cc809ba0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5599cc809b88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5599cc809b58 <col:16> 'const bool' lvalue ->_status 0x5599cc7f4238
|         `-CXXThisExpr 0x5599cc809b48 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5599cc7e3418 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5599cc7e3350 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5599cc809c98 <col:27, line:639:5>
|   |-BinaryOperator 0x5599cc809c40 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5599cc809bc8 <col:9> 'bool' lvalue ParmVar 0x5599cc7e3350 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5599cc809c28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc809bf8 <col:13> 'bool' lvalue ->_status 0x5599cc7f4238
|   |     `-CXXThisExpr 0x5599cc809be8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5599cc809c88 <line:638:9, col:17>
|     `-UnaryOperator 0x5599cc809c70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc809c60 <col:17> 'Args *' this
|-CXXMethodDecl 0x5599cc7e3598 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5599cc7e34d8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5599cc809d88 <col:39, line:644:5>
|   |-BinaryOperator 0x5599cc809d30 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5599cc809cb8 <col:9> 'bool' lvalue ParmVar 0x5599cc7e34d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5599cc809d18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc809ce8 <col:13> 'const bool' lvalue ->_status 0x5599cc7f4238
|   |     `-CXXThisExpr 0x5599cc809cd8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5599cc809d78 <line:643:9, col:17>
|     `-UnaryOperator 0x5599cc809d60 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc809d50 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5599cc7e3660 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5599cc809e30 <col:30, line:651:5>
|   `-ReturnStmt 0x5599cc809e20 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5599cc809e08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5599cc809dd8 <col:16> 'bool' lvalue ->_read_status 0x5599cc7cd920
|         `-ImplicitCastExpr 0x5599cc809db8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5599cc809da8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5599cc7e37a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5599cc7e3718 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5599cc809f38 <col:32, line:658:5>
|   |-BinaryOperator 0x5599cc809ee0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5599cc809e48 <col:9> 'bool' lvalue ParmVar 0x5599cc7e3718 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5599cc809ec8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc809e98 <col:13> 'bool' lvalue ->_read_status 0x5599cc7cd920
|   |     `-ImplicitCastExpr 0x5599cc809e78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5599cc809e68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5599cc809f28 <line:657:9, col:17>
|     `-UnaryOperator 0x5599cc809f10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc809f00 <col:17> 'Args *' this
|-CXXMethodDecl 0x5599cc7e38f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5599cc7e3868 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5599cc80a048 <col:44, line:663:5>
|   |-BinaryOperator 0x5599cc809ff0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5599cc809f58 <col:9> 'bool' lvalue ParmVar 0x5599cc7e3868 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5599cc809fd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5599cc809fa8 <col:13> 'bool' lvalue ->_read_status 0x5599cc7cd920
|   |     `-ImplicitCastExpr 0x5599cc809f88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5599cc809f78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5599cc80a038 <line:662:9, col:17>
|     `-UnaryOperator 0x5599cc80a020 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5599cc80a010 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5599cc7e39c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5599cc7e3a88 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5599cc7e3b50 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5599cc7e3c18 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5599cc7e3f28 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5599cc7e3cb8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7e3e88 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5599cc7e3d98 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5599cc80a400 <col:19, line:706:5>
|     `-IfStmt 0x5599cc80a3d8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5599cc80a148 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5599cc80a308 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5599cc80a2d8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5599cc80a298 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5599cc80a1a0 <col:42> '<bound member function type>' ->simple_slot 0x5599cc803280
|       |     | `-CXXThisExpr 0x5599cc80a190 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5599cc80a238 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5599cc80a1f0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5599cc55b728
|       |     | `-DeclRefExpr 0x5599cc80a1d0 <col:55> 'T' lvalue ParmVar 0x5599cc7e3d98 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5599cc80a278 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5599cc80a3c8 <line:705:13, col:34>
|         `-CallExpr 0x5599cc80a3a0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5599cc80a328 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5599cc80a380 <col:33> 'T' lvalue ParmVar 0x5599cc7e3d98 'x' 'T &'
|-FunctionTemplateDecl 0x5599cc7e41f8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5599cc7e3f88 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7e4158 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5599cc7e4068 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5599cc80a7e0 <col:31, line:717:5>
|     |-DeclStmt 0x5599cc80a540 <line:713:9, col:23>
|     | `-VarDecl 0x5599cc80a428 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5599cc80a518 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5599cc80a4a0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5599cc80a4f8 <col:21> 'T' lvalue ParmVar 0x5599cc7e4068 'x' 'T &'
|     |-IfStmt 0x5599cc80a790 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5599cc80a638 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5599cc80a770 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5599cc80a710 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5599cc80a6a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|     |   | `-DeclRefExpr 0x5599cc80a680 <col:14> 'T *' lvalue Var 0x5599cc80a428 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5599cc80a750 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5599cc80a7c8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5599cc80a7a8 <col:16> 'T *' lvalue Var 0x5599cc80a428 's' 'T *'
|-FunctionTemplateDecl 0x5599cc7e4608 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5599cc7e4258 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7e42d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5599cc7e4568 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5599cc7e43b8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5599cc7e4458 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5599cc80aaf0 <col:37, line:726:5>
|     |-IfStmt 0x5599cc80aa80 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5599cc80aaa0 <line:723:13, col:26>
|     | | `-VarDecl 0x5599cc80a848 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5599cc80a938 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5599cc80a8c0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5599cc80a918 <col:25> 'T' lvalue ParmVar 0x5599cc7e43b8 'x' 'T &'
|     | |-DeclRefExpr 0x5599cc80a960 <col:16> 'T *' lvalue Var 0x5599cc80a848 's' 'T *'
|     | `-BinaryOperator 0x5599cc80aa60 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5599cc80aa10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5599cc80a9a0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|     |   | `-DeclRefExpr 0x5599cc80a980 <col:14> 'T *' lvalue Var 0x5599cc80a848 's' 'T *'
|     |   `-DeclRefExpr 0x5599cc80aa40 <col:18> 'const V' lvalue ParmVar 0x5599cc7e4458 'value' 'const V &'
|     `-ReturnStmt 0x5599cc80aae0 <line:725:9, col:17>
|       `-UnaryOperator 0x5599cc80aac8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5599cc80aab8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5599cc7e4a08 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5599cc7e4670 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5599cc7e4968 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5599cc7e4720 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e47a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e4848 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5599cc80b910 <col:65, line:737:5>
|     |-DeclStmt 0x5599cc80ab88 <line:732:9, col:26>
|     | `-VarDecl 0x5599cc80ab20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5599cc80b8d8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5599cc80b8f8 <line:733:13, col:58>
|       | `-VarDecl 0x5599cc80abb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5599cc80ad90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5599cc80ad60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5599cc80ad48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5599cc80ad28 <col:26, col:58> 'String' (CXXTemporary 0x5599cc80ad28)
|       |           `-CXXMemberCallExpr 0x5599cc80acb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5599cc80ac28 <col:26> '<bound member function type>' ->find 0x5599cc802898
|       |             | `-CXXThisExpr 0x5599cc80ac18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5599cc80acf0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80ac58 <col:31> 'const char *' lvalue ParmVar 0x5599cc7e4720 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5599cc80ad08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80ac78 <col:40> 'int' lvalue ParmVar 0x5599cc7e47a0 'flags' 'int'
|       |             `-DeclRefExpr 0x5599cc80ac98 <col:47> 'Args::Slot *' lvalue Var 0x5599cc80ab20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5599cc80ae48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5599cc80ae30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5599cc80ae10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5599cc80ade0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |       `-ImplicitCastExpr 0x5599cc80adc8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5599cc80ada8 <col:20> 'String' lvalue Var 0x5599cc80abb0 'str' 'String'
|       `-CompoundStmt 0x5599cc80b8b8 <col:61, line:736:9>
|         |-DeclStmt 0x5599cc80b300 <line:734:13, col:76>
|         | `-VarDecl 0x5599cc80ae98 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5599cc80b2d0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5599cc80b240 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5599cc80b288 <col:60> 'T' lvalue ParmVar 0x5599cc7e4848 'variable' 'T &'
|         |     `-UnaryOperator 0x5599cc80b2b8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5599cc80b2a8 <col:71> 'Args *' this
|         `-CallExpr 0x5599cc80b888 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5599cc80b328 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|           | `-CXXThisExpr 0x5599cc80b318 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5599cc80b848 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5599cc80b358 <col:23> 'T *' lvalue Var 0x5599cc80ae98 's' 'T *'
|           | `-CallExpr 0x5599cc80b808 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5599cc80b5e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5599cc80b6e0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5599cc80b700 <col:86> 'String' lvalue Var 0x5599cc80abb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5599cc80b7b0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5599cc80b740 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|           |   | `-DeclRefExpr 0x5599cc80b720 <col:92> 'T *' lvalue Var 0x5599cc80ae98 's' 'T *'
|           |   `-UnaryOperator 0x5599cc80b7f0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5599cc80b7e0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5599cc80b868 <col:103> 'Args::Slot *' lvalue Var 0x5599cc80ab20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e4f58 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5599cc7e4a78 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7e4af8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5599cc7e4eb8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7e4bb8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e4c38 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e4cd8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5599cc7e4d78 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5599cc80c7b0 <col:88, line:745:5>
|     |-DeclStmt 0x5599cc80b9a8 <line:741:9, col:26>
|     | `-VarDecl 0x5599cc80b940 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5599cc80bbc8 <line:742:9, col:55>
|     | `-VarDecl 0x5599cc80b9d0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5599cc80bbb0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5599cc80bb80 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5599cc80bb68 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5599cc80bb48 <col:22, col:54> 'String' (CXXTemporary 0x5599cc80bb48)
|     |           `-CXXMemberCallExpr 0x5599cc80bad8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5599cc80ba48 <col:22> '<bound member function type>' ->find 0x5599cc802898
|     |             | `-CXXThisExpr 0x5599cc80ba38 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5599cc80bb10 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5599cc80ba78 <col:27> 'const char *' lvalue ParmVar 0x5599cc7e4bb8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5599cc80bb28 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5599cc80ba98 <col:36> 'int' lvalue ParmVar 0x5599cc7e4c38 'flags' 'int'
|     |             `-DeclRefExpr 0x5599cc80bab8 <col:43> 'Args::Slot *' lvalue Var 0x5599cc80b940 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5599cc80bfa0 <line:743:9, col:72>
|     | `-VarDecl 0x5599cc80bc18 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5599cc80bf70 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5599cc80bee0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5599cc80bf28 <col:56> 'T' lvalue ParmVar 0x5599cc7e4cd8 'variable' 'T &'
|     |     `-UnaryOperator 0x5599cc80bf58 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5599cc80bf48 <col:67> 'Args *' this
|     `-CallExpr 0x5599cc80c780 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5599cc80bfc8 <col:9> '<bound member function type>' ->postparse 0x5599cc802aa8
|       | `-CXXThisExpr 0x5599cc80bfb8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5599cc80c740 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5599cc80bff8 <col:19> 'T *' lvalue Var 0x5599cc80bc18 's' 'T *'
|       | `-ParenExpr 0x5599cc80c720 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5599cc80c6f0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5599cc80c6d8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5599cc80c6c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5599cc80c6a0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5599cc80c670 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |     |       `-ImplicitCastExpr 0x5599cc80c658 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5599cc80c018 <col:25> 'String' lvalue Var 0x5599cc80b9d0 'str' 'String'
|       |     |-CallExpr 0x5599cc80c4c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5599cc80c2a0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5599cc80c3a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5599cc80c3c0 <col:89> 'String' lvalue Var 0x5599cc80b9d0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5599cc80c470 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5599cc80c400 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|       |     | | `-DeclRefExpr 0x5599cc80c3e0 <col:95> 'T *' lvalue Var 0x5599cc80bc18 's' 'T *'
|       |     | `-UnaryOperator 0x5599cc80c4b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5599cc80c4a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5599cc80c638 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5599cc80c618 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5599cc80c5e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5599cc80c598 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5599cc80c528 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|       |         | | `-DeclRefExpr 0x5599cc80c508 <col:109> 'T *' lvalue Var 0x5599cc80bc18 's' 'T *'
|       |         | `-DeclRefExpr 0x5599cc80c5c8 <col:113> 'const V' lvalue ParmVar 0x5599cc7e4d78 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5599cc80c608 <col:120> 'bool' true
|       `-DeclRefExpr 0x5599cc80c760 <col:128> 'Args::Slot *' lvalue Var 0x5599cc80b940 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e5488 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5599cc7e4fd0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e5048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e53e8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5599cc7e5108 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e5188 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e5200 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e52a8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5599cc80d3a8 <col:75, line:754:5>
|     |-DeclStmt 0x5599cc80c858 <line:749:9, col:26>
|     | `-VarDecl 0x5599cc80c7f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5599cc80d370 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5599cc80d390 <line:750:13, col:58>
|       | `-VarDecl 0x5599cc80c880 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5599cc80ca60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5599cc80ca30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5599cc80ca18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5599cc80c9f8 <col:26, col:58> 'String' (CXXTemporary 0x5599cc80c9f8)
|       |           `-CXXMemberCallExpr 0x5599cc80c988 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5599cc80c8f8 <col:26> '<bound member function type>' ->find 0x5599cc802898
|       |             | `-CXXThisExpr 0x5599cc80c8e8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5599cc80c9c0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80c928 <col:31> 'const char *' lvalue ParmVar 0x5599cc7e5108 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5599cc80c9d8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80c948 <col:40> 'int' lvalue ParmVar 0x5599cc7e5188 'flags' 'int'
|       |             `-DeclRefExpr 0x5599cc80c968 <col:47> 'Args::Slot *' lvalue Var 0x5599cc80c7f0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5599cc80cb18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5599cc80cb00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5599cc80cae0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5599cc80cab0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |       `-ImplicitCastExpr 0x5599cc80ca98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5599cc80ca78 <col:20> 'String' lvalue Var 0x5599cc80c880 'str' 'String'
|       `-CompoundStmt 0x5599cc80d350 <col:61, line:753:9>
|         |-DeclStmt 0x5599cc80cef0 <line:751:13, col:63>
|         | `-VarDecl 0x5599cc80cb68 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5599cc80cec0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5599cc80ce30 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5599cc80ce78 <col:47> 'T' lvalue ParmVar 0x5599cc7e52a8 'variable' 'T &'
|         |     `-UnaryOperator 0x5599cc80cea8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5599cc80ce98 <col:58> 'Args *' this
|         `-CallExpr 0x5599cc80d320 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5599cc80cf18 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|           | `-CXXThisExpr 0x5599cc80cf08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5599cc80d2e0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5599cc80cf48 <col:23> 'T *' lvalue Var 0x5599cc80cb68 's' 'T *'
|           | `-CallExpr 0x5599cc80d2a0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5599cc80d130 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5599cc80d178 <col:56> 'P' lvalue ParmVar 0x5599cc7e5200 'parser' 'P'
|           |   |-DeclRefExpr 0x5599cc80d198 <col:64> 'String' lvalue Var 0x5599cc80c880 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5599cc80d248 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5599cc80d1d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|           |   | `-DeclRefExpr 0x5599cc80d1b8 <col:70> 'T *' lvalue Var 0x5599cc80cb68 's' 'T *'
|           |   `-UnaryOperator 0x5599cc80d288 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5599cc80d278 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5599cc80d300 <col:81> 'Args::Slot *' lvalue Var 0x5599cc80c7f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e5ae8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5599cc7e5500 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5599cc7e5578 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5599cc7e55f8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5599cc7e5a48 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5599cc7e56c0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e5740 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e57b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e5858 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5599cc7e58f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5599cc80e138 <col:98, line:762:5>
|     |-DeclStmt 0x5599cc80d440 <line:758:9, col:26>
|     | `-VarDecl 0x5599cc80d3d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5599cc80d660 <line:759:9, col:55>
|     | `-VarDecl 0x5599cc80d468 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5599cc80d648 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5599cc80d618 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5599cc80d600 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5599cc80d5e0 <col:22, col:54> 'String' (CXXTemporary 0x5599cc80d5e0)
|     |           `-CXXMemberCallExpr 0x5599cc80d570 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5599cc80d4e0 <col:22> '<bound member function type>' ->find 0x5599cc802898
|     |             | `-CXXThisExpr 0x5599cc80d4d0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5599cc80d5a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5599cc80d510 <col:27> 'const char *' lvalue ParmVar 0x5599cc7e56c0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5599cc80d5c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5599cc80d530 <col:36> 'int' lvalue ParmVar 0x5599cc7e5740 'flags' 'int'
|     |             `-DeclRefExpr 0x5599cc80d550 <col:43> 'Args::Slot *' lvalue Var 0x5599cc80d3d8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5599cc80da80 <line:760:9, col:59>
|     | `-VarDecl 0x5599cc80d6b8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5599cc80da50 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5599cc80d9c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5599cc80da08 <col:43> 'T' lvalue ParmVar 0x5599cc7e5858 'variable' 'T &'
|     |     `-UnaryOperator 0x5599cc80da38 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5599cc80da28 <col:54> 'Args *' this
|     `-CallExpr 0x5599cc80e108 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5599cc80daa8 <col:9> '<bound member function type>' ->postparse 0x5599cc802aa8
|       | `-CXXThisExpr 0x5599cc80da98 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5599cc80e0c8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5599cc80dad8 <col:19> 'T *' lvalue Var 0x5599cc80d6b8 's' 'T *'
|       | `-ParenExpr 0x5599cc80e0a8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5599cc80e078 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5599cc80e060 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5599cc80e048 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5599cc80e028 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5599cc80dff8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |     |       `-ImplicitCastExpr 0x5599cc80dfe0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5599cc80daf8 <col:25> 'String' lvalue Var 0x5599cc80d468 'str' 'String'
|       |     |-CallExpr 0x5599cc80de50 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5599cc80dce0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5599cc80dd28 <col:59> 'P' lvalue ParmVar 0x5599cc7e57b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5599cc80dd48 <col:67> 'String' lvalue Var 0x5599cc80d468 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5599cc80ddf8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5599cc80dd88 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|       |     | | `-DeclRefExpr 0x5599cc80dd68 <col:73> 'T *' lvalue Var 0x5599cc80d6b8 's' 'T *'
|       |     | `-UnaryOperator 0x5599cc80de38 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5599cc80de28 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5599cc80dfc0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5599cc80dfa0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5599cc80df70 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5599cc80df20 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5599cc80deb0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|       |         | | `-DeclRefExpr 0x5599cc80de90 <col:87> 'T *' lvalue Var 0x5599cc80d6b8 's' 'T *'
|       |         | `-DeclRefExpr 0x5599cc80df50 <col:91> 'const V' lvalue ParmVar 0x5599cc7e58f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5599cc80df90 <col:98> 'bool' true
|       `-DeclRefExpr 0x5599cc80e0e8 <col:106> 'Args::Slot *' lvalue Var 0x5599cc80d3d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e6158 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5599cc7e5b68 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e5be8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5599cc7e5c68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5599cc7e60b8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5599cc7e5d30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e5db0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e5e28 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e5ec8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5599cc7e5f68 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5599cc80f118 <col:60, line:773:5>
|     |-DeclStmt 0x5599cc80e1e0 <line:767:9, col:26>
|     | `-VarDecl 0x5599cc80e178 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5599cc80f0e0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5599cc80f100 <line:768:13, col:58>
|       | `-VarDecl 0x5599cc80e208 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5599cc80e3e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5599cc80e3b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5599cc80e3a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5599cc80e380 <col:26, col:58> 'String' (CXXTemporary 0x5599cc80e380)
|       |           `-CXXMemberCallExpr 0x5599cc80e310 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5599cc80e280 <col:26> '<bound member function type>' ->find 0x5599cc802898
|       |             | `-CXXThisExpr 0x5599cc80e270 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5599cc80e348 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80e2b0 <col:31> 'const char *' lvalue ParmVar 0x5599cc7e5d30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5599cc80e360 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80e2d0 <col:40> 'int' lvalue ParmVar 0x5599cc7e5db0 'flags' 'int'
|       |             `-DeclRefExpr 0x5599cc80e2f0 <col:47> 'Args::Slot *' lvalue Var 0x5599cc80e178 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5599cc80e4a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5599cc80e488 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5599cc80e468 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5599cc80e438 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |       `-ImplicitCastExpr 0x5599cc80e420 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5599cc80e400 <col:20> 'String' lvalue Var 0x5599cc80e208 'str' 'String'
|       `-CompoundStmt 0x5599cc80f0b8 <col:61, line:772:9>
|         |-DeclStmt 0x5599cc80e7e0 <line:769:13, col:66>
|         | `-VarDecl 0x5599cc80e4f8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5599cc80e7b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5599cc80e720 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5599cc80e768 <col:49> 'T1' lvalue ParmVar 0x5599cc7e5ec8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5599cc80e798 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5599cc80e788 <col:61> 'Args *' this
|         |-DeclStmt 0x5599cc80eb50 <line:770:13, col:66>
|         | `-VarDecl 0x5599cc80e868 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5599cc80eb20 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5599cc80ea90 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5599cc80ead8 <col:49> 'T2' lvalue ParmVar 0x5599cc7e5f68 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5599cc80eb08 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5599cc80eaf8 <col:61> 'Args *' this
|         `-CallExpr 0x5599cc80f088 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5599cc80eb78 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|           | `-CXXThisExpr 0x5599cc80eb68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5599cc80f048 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5599cc80ebe8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5599cc80eba8 <col:23> 'T1 *' lvalue Var 0x5599cc80e4f8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5599cc80ebc8 <col:29> 'T2 *' lvalue Var 0x5599cc80e868 's2' 'T2 *'
|           | `-CallExpr 0x5599cc80f000 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5599cc80edd0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5599cc80ee18 <col:63> 'P' lvalue ParmVar 0x5599cc7e5e28 'parser' 'P'
|           |   |-DeclRefExpr 0x5599cc80ee38 <col:71> 'String' lvalue Var 0x5599cc80e208 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5599cc80eee8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5599cc80ee78 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|           |   | `-DeclRefExpr 0x5599cc80ee58 <col:77> 'T1 *' lvalue Var 0x5599cc80e4f8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5599cc80efa8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5599cc80ef38 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|           |   | `-DeclRefExpr 0x5599cc80ef18 <col:82> 'T2 *' lvalue Var 0x5599cc80e868 's2' 'T2 *'
|           |   `-UnaryOperator 0x5599cc80efe8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5599cc80efd8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5599cc80f068 <col:94> 'Args::Slot *' lvalue Var 0x5599cc80e178 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e6548 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5599cc7e61d8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7e64a8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5599cc7e6290 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e6310 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e6388 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5599cc80f630 <col:67, line:780:5>
|     |-DeclStmt 0x5599cc80f1b0 <line:777:9, col:26>
|     | `-VarDecl 0x5599cc80f148 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5599cc80f5f8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5599cc80f618 <line:778:13, col:58>
|       | `-VarDecl 0x5599cc80f1d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5599cc80f3b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5599cc80f388 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5599cc80f370 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5599cc80f350 <col:26, col:58> 'String' (CXXTemporary 0x5599cc80f350)
|       |           `-CXXMemberCallExpr 0x5599cc80f2e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5599cc80f250 <col:26> '<bound member function type>' ->find 0x5599cc802898
|       |             | `-CXXThisExpr 0x5599cc80f240 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5599cc80f318 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80f280 <col:31> 'const char *' lvalue ParmVar 0x5599cc7e6290 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5599cc80f330 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5599cc80f2a0 <col:40> 'int' lvalue ParmVar 0x5599cc7e6310 'flags' 'int'
|       |             `-DeclRefExpr 0x5599cc80f2c0 <col:47> 'Args::Slot *' lvalue Var 0x5599cc80f148 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5599cc80f470 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5599cc80f458 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5599cc80f438 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5599cc80f408 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|       |       `-ImplicitCastExpr 0x5599cc80f3f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5599cc80f3d0 <col:20> 'String' lvalue Var 0x5599cc80f1d8 'str' 'String'
|       `-CallExpr 0x5599cc80f5c8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5599cc80f498 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|         | `-CXXThisExpr 0x5599cc80f488 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5599cc80f578 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5599cc80f4e8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5599cc80f4c8 <col:23> 'P' lvalue ParmVar 0x5599cc7e6388 'parser' 'P'
|         | |-DeclRefExpr 0x5599cc80f530 <col:36> 'String' lvalue Var 0x5599cc80f1d8 'str' 'String'
|         | `-UnaryOperator 0x5599cc80f560 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5599cc80f550 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5599cc80f5a8 <col:49> 'Args::Slot *' lvalue Var 0x5599cc80f148 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5599cc7e68e8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e65b8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5599cc7e6848 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5599cc7e6670 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e66f0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e6768 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5599cc80ffa0 <col:71, line:792:5>
|     |-DeclStmt 0x5599cc80f6c8 <line:784:9, col:26>
|     | `-VarDecl 0x5599cc80f660 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5599cc80f798 <line:785:9, col:29>
|     | `-VarDecl 0x5599cc80f6f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5599cc80f780 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5599cc80f760 <col:28> 'int' 1
|     |-WhileStmt 0x5599cc80fe50 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5599cc80fe70 <line:786:16, col:61>
|     | | `-VarDecl 0x5599cc80f7c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5599cc80f9a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5599cc80f970 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5599cc80f958 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5599cc80f938 <col:29, col:61> 'String' (CXXTemporary 0x5599cc80f938)
|     | |           `-CXXMemberCallExpr 0x5599cc80f8c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5599cc80f838 <col:29> '<bound member function type>' ->find 0x5599cc802898
|     | |             | `-CXXThisExpr 0x5599cc80f828 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5599cc80f900 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc80f868 <col:34> 'const char *' lvalue ParmVar 0x5599cc7e6670 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5599cc80f918 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc80f888 <col:43> 'int' lvalue ParmVar 0x5599cc7e66f0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5599cc80f8a8 <col:50> 'Args::Slot *' lvalue Var 0x5599cc80f660 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5599cc80fa58 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5599cc80fa40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5599cc80fa20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5599cc80f9f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|     | |       `-ImplicitCastExpr 0x5599cc80f9d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5599cc80f9b8 <col:23> 'String' lvalue Var 0x5599cc80f7c0 'str' 'String'
|     | `-CompoundStmt 0x5599cc80fe28 <col:64, line:790:9>
|     |   |-CallExpr 0x5599cc80fbb0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5599cc80fa80 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|     |   | | `-CXXThisExpr 0x5599cc80fa70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5599cc80fb60 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5599cc80fad0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5599cc80fab0 <col:23> 'P' lvalue ParmVar 0x5599cc7e6768 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5599cc80fb18 <col:36> 'String' lvalue Var 0x5599cc80f7c0 'str' 'String'
|     |   | | `-UnaryOperator 0x5599cc80fb48 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5599cc80fb38 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5599cc80fb90 <col:49> 'Args::Slot *' lvalue Var 0x5599cc80f660 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5599cc80fd48 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5599cc80fbe0 <col:13> 'int' lvalue Var 0x5599cc80f6f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5599cc80fd30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5599cc80fd10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5599cc80fc78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5599cc80fc58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5599cc80fc40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5599cc80fc00 <col:28> 'int' lvalue Var 0x5599cc80f6f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5599cc80fc20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5599cc80fcf8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5599cc80fcc8 <col:49> 'bool' lvalue ->_read_status 0x5599cc7cd920
|     |   |         `-ImplicitCastExpr 0x5599cc80fca8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5599cc80fc98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5599cc80fdf8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5599cc80fd68 <col:13> 'int' lvalue ParmVar 0x5599cc7e66f0 'flags' 'int'
|     |     `-UnaryOperator 0x5599cc80fde0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5599cc80fdc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5599cc80fda8 <col:23> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5599cc80ff80 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5599cc80feb8 <col:9> 'bool' lvalue ->_read_status 0x5599cc7cd920
|       | `-ImplicitCastExpr 0x5599cc80fe98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5599cc80fe88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5599cc80ff60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5599cc80ff40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5599cc80ff28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5599cc80fee8 <col:25> 'int' lvalue Var 0x5599cc80f6f8 'read_status' 'int'
|           `-IntegerLiteral 0x5599cc80ff08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5599cc7e6dc8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5599cc7e6958 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e69d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e6d28 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5599cc7e6a98 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e6b18 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e6b90 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e6c38 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5599cc815050 <col:84, line:805:5>
|     |-DeclStmt 0x5599cc814168 <line:796:9, col:26>
|     | `-VarDecl 0x5599cc814100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5599cc814238 <line:797:9, col:29>
|     | `-VarDecl 0x5599cc814198 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5599cc814220 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5599cc814200 <col:28> 'int' 1
|     |-DeclStmt 0x5599cc814570 <line:798:9, col:71>
|     | `-VarDecl 0x5599cc814288 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5599cc814540 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5599cc8144b0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5599cc8144f8 <col:55> 'T' lvalue ParmVar 0x5599cc7e6c38 'variable' 'T &'
|     |     `-UnaryOperator 0x5599cc814528 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5599cc814518 <col:66> 'Args *' this
|     |-WhileStmt 0x5599cc814f00 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5599cc814f20 <line:799:16, col:61>
|     | | `-VarDecl 0x5599cc814598 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5599cc814778 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5599cc814748 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5599cc814730 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5599cc814710 <col:29, col:61> 'String' (CXXTemporary 0x5599cc814710)
|     | |           `-CXXMemberCallExpr 0x5599cc8146a0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5599cc814610 <col:29> '<bound member function type>' ->find 0x5599cc802898
|     | |             | `-CXXThisExpr 0x5599cc814600 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5599cc8146d8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc814640 <col:34> 'const char *' lvalue ParmVar 0x5599cc7e6a98 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5599cc8146f0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc814660 <col:43> 'int' lvalue ParmVar 0x5599cc7e6b18 'flags' 'int'
|     | |             `-DeclRefExpr 0x5599cc814680 <col:50> 'Args::Slot *' lvalue Var 0x5599cc814100 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5599cc814830 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5599cc814818 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5599cc8147f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5599cc8147c8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|     | |       `-ImplicitCastExpr 0x5599cc8147b0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5599cc814790 <col:23> 'String' lvalue Var 0x5599cc814598 'str' 'String'
|     | `-CompoundStmt 0x5599cc814ed8 <col:64, line:803:9>
|     |   |-CallExpr 0x5599cc814c60 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5599cc814858 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|     |   | | `-CXXThisExpr 0x5599cc814848 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5599cc814c20 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5599cc814888 <col:23> 'T *' lvalue Var 0x5599cc814288 's' 'T *'
|     |   | | `-CallExpr 0x5599cc814be0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5599cc814a70 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5599cc814ab8 <col:56> 'P' lvalue ParmVar 0x5599cc7e6b90 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5599cc814ad8 <col:64> 'String' lvalue Var 0x5599cc814598 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5599cc814b88 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5599cc814b18 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|     |   | |   | `-DeclRefExpr 0x5599cc814af8 <col:70> 'T *' lvalue Var 0x5599cc814288 's' 'T *'
|     |   | |   `-UnaryOperator 0x5599cc814bc8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5599cc814bb8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5599cc814c40 <col:81> 'Args::Slot *' lvalue Var 0x5599cc814100 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5599cc814df8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5599cc814c90 <col:13> 'int' lvalue Var 0x5599cc814198 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5599cc814de0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5599cc814dc0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5599cc814d28 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5599cc814d08 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5599cc814cf0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5599cc814cb0 <col:28> 'int' lvalue Var 0x5599cc814198 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5599cc814cd0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5599cc814da8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5599cc814d78 <col:49> 'bool' lvalue ->_read_status 0x5599cc7cd920
|     |   |         `-ImplicitCastExpr 0x5599cc814d58 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5599cc814d48 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5599cc814ea8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5599cc814e18 <col:13> 'int' lvalue ParmVar 0x5599cc7e6b18 'flags' 'int'
|     |     `-UnaryOperator 0x5599cc814e90 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5599cc814e78 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5599cc814e58 <col:23> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5599cc815030 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5599cc814f68 <col:9> 'bool' lvalue ->_read_status 0x5599cc7cd920
|       | `-ImplicitCastExpr 0x5599cc814f48 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5599cc814f38 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5599cc815010 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5599cc814ff0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5599cc814fd8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5599cc814f98 <col:25> 'int' lvalue Var 0x5599cc814198 'read_status' 'int'
|           `-IntegerLiteral 0x5599cc814fb8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5599cc7e73a8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5599cc7e6e40 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5599cc7e6eb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5599cc7e7308 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5599cc7e6f78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5599cc7e6ff8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5599cc7e7070 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5599cc7e71c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5599cc815e58 <col:87, line:821:5>
|     |-DeclStmt 0x5599cc815100 <line:809:9, col:26>
|     | `-VarDecl 0x5599cc815098 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5599cc8151d0 <line:810:9, col:29>
|     | `-VarDecl 0x5599cc815130 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5599cc8151b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5599cc815198 <col:28> 'int' 1
|     |-DeclStmt 0x5599cc815418 <line:811:9, col:38>
|     | `-VarDecl 0x5599cc815300 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5599cc8153f0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5599cc815378 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5599cc8153d0 <col:29> 'Vector<T>' lvalue ParmVar 0x5599cc7e71c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5599cc815d08 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5599cc815d28 <line:812:16, col:61>
|     | | `-VarDecl 0x5599cc815440 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5599cc815620 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5599cc8155f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5599cc8155d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5599cc8155b8 <col:29, col:61> 'String' (CXXTemporary 0x5599cc8155b8)
|     | |           `-CXXMemberCallExpr 0x5599cc815548 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5599cc8154b8 <col:29> '<bound member function type>' ->find 0x5599cc802898
|     | |             | `-CXXThisExpr 0x5599cc8154a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5599cc815580 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc8154e8 <col:34> 'const char *' lvalue ParmVar 0x5599cc7e6f78 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5599cc815598 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5599cc815508 <col:43> 'int' lvalue ParmVar 0x5599cc7e6ff8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5599cc815528 <col:50> 'Args::Slot *' lvalue Var 0x5599cc815098 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5599cc8156d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5599cc8156c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5599cc8156a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5599cc815670 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5599cc51e6f8
|     | |       `-ImplicitCastExpr 0x5599cc815658 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5599cc815638 <col:23> 'String' lvalue Var 0x5599cc815440 'str' 'String'
|     | `-CompoundStmt 0x5599cc815cd0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5599cc815798 <line:813:13, col:23>
|     |   | `-VarDecl 0x5599cc815700 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5599cc815778 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5599cc815918 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5599cc8157c0 <col:13> '<bound member function type>' ->postparse 0x5599cc802aa8
|     |   | | `-CXXThisExpr 0x5599cc8157b0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5599cc8158c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5599cc815810 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5599cc8157f0 <col:23> 'P' lvalue ParmVar 0x5599cc7e7070 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5599cc815858 <col:36> 'String' lvalue Var 0x5599cc815440 'str' 'String'
|     |   | | |-DeclRefExpr 0x5599cc815878 <col:41> 'T' lvalue Var 0x5599cc815700 'sx' 'T'
|     |   | | `-UnaryOperator 0x5599cc8158a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5599cc815898 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5599cc8158f8 <col:53> 'Args::Slot *' lvalue Var 0x5599cc815098 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5599cc815a70 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5599cc8159a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5599cc815978 <col:17> 'bool' lvalue ->_read_status 0x5599cc7cd920
|     |   | |   `-ImplicitCastExpr 0x5599cc815958 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5599cc815948 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5599cc815a48 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5599cc8159e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5599cc8159c0 <col:17> 'Vector<T> *' lvalue Var 0x5599cc815300 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5599cc815a28 <col:30> 'T' lvalue Var 0x5599cc815700 'sx' 'T'
|     |   |-BinaryOperator 0x5599cc815bf0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5599cc815a88 <col:13> 'int' lvalue Var 0x5599cc815130 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5599cc815bd8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5599cc815bb8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5599cc815b20 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5599cc815b00 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5599cc815ae8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5599cc815aa8 <col:28> 'int' lvalue Var 0x5599cc815130 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5599cc815ac8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5599cc815ba0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5599cc815b70 <col:49> 'bool' lvalue ->_read_status 0x5599cc7cd920
|     |   |         `-ImplicitCastExpr 0x5599cc815b50 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5599cc815b40 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5599cc815ca0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5599cc815c10 <col:13> 'int' lvalue ParmVar 0x5599cc7e6ff8 'flags' 'int'
|     |     `-UnaryOperator 0x5599cc815c88 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5599cc815c70 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5599cc815c50 <col:23> 'const int' lvalue Var 0x5599cc7d4e58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5599cc815e38 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5599cc815d70 <col:9> 'bool' lvalue ->_read_status 0x5599cc7cd920
|       | `-ImplicitCastExpr 0x5599cc815d50 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5599cc815d40 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5599cc815e18 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5599cc815df8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5599cc815de0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5599cc815da0 <col:25> 'int' lvalue Var 0x5599cc815130 'read_status' 'int'
|           `-IntegerLiteral 0x5599cc815dc0 <col:40> 'int' 1
|-AccessSpecDecl 0x5599cc7e7420 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5599cc7e7448 prev 0x5599cc7d3158 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5599cc7e7540 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5599cc7e7630 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5599cc815e90 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5599cc7e7720 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5599cc815ea0 <col:25, line:830:9>
| |-CXXMethodDecl 0x5599cc7e7820 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5599cc7e78d0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5599cc7e7978 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5599cc7e7978
| | `-ParmVarDecl 0x5599cc7e7a88 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5599cc7e8248 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5599cc7e8248
|   `-ParmVarDecl 0x5599cc7f34b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5599cc7e7af8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5599cc7e7c58 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5599cc7e7e50 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5599cc7e7d00 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5599cc7e7d78 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5599cc816080 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5599cc7e8108 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5599cc815ef0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5599cc815eb0 <col:20> 'void *' lvalue ParmVar 0x5599cc7e7d00 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5599cc7e8170 '_slot' 'char *'
| | | `-CXXNewExpr 0x5599cc815f78 <col:32, col:45> 'char *' array Function 0x5599cc341368 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5599cc815f60 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5599cc815f30 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5599cc7e7d78 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5599cc7e81d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5599cc816040 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5599cc816000 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5599cc7e7d78 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5599cc816100 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5599cc7e7f50 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5599cc7e7720 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5599cc816188 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5599cc816168 <line:840:13, col:22> 'void' array Function 0x5599cc3416c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5599cc816150 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5599cc816120 <col:22> 'char *' lvalue ->_slot 0x5599cc7e8170
| |         `-CXXThisExpr 0x5599cc816110 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5599cc7e8050 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5599cc7e7820 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5599cc816378 <col:22, line:844:9>
| |   `-CallExpr 0x5599cc8162e0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5599cc8162c8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5599cc8162a8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5599cc44d148 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5599cc816318 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5599cc8161f8 <col:20> 'void *' lvalue ->_ptr 0x5599cc7e8108
| |     |   `-CXXThisExpr 0x5599cc8161e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5599cc816348 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5599cc816330 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5599cc816238 <col:26> 'char *' lvalue ->_slot 0x5599cc7e8170
| |     |     `-CXXThisExpr 0x5599cc816228 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5599cc816360 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5599cc816278 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5599cc7e81d0
| |         `-CXXThisExpr 0x5599cc816268 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5599cc7e8108 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5599cc7e8170 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5599cc7e81d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5599cc7f3528 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5599cc7f3528
| | `-ParmVarDecl 0x5599cc7f3638 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5599cc7f36d8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5599cc7f36d8
|   `-ParmVarDecl 0x5599cc7f37e8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5599cc7f3988 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5599cc7f3858 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5599cc7f38f8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5599cc7f3c20 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5599cc7f3e18 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5599cc7f3ce8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5599cc7f3f98 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5599cc8163b0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5599cc816390 <col:20> 'T *' lvalue ParmVar 0x5599cc7f3ce8 'ptr' 'T *'
|   | `-CompoundStmt 0x5599cc816400 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5599cc7f3ee8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5599cc7e7820 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5599cc8165b0 <col:22, line:857:9>
|   |   `-CallExpr 0x5599cc816580 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5599cc816410 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5599cc505878 0x5599cc4afba8
|   |     |-CXXOperatorCallExpr 0x5599cc816510 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5599cc8164a0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5599cc712828 0x5599cc712448 0x5599cc712078 0x5599cc711c98 0x5599cc7118b8 0x5599cc7114e8
|   |     | `-MemberExpr 0x5599cc816470 <col:29> 'T *' lvalue ->_ptr 0x5599cc7f3f98
|   |     |   `-CXXThisExpr 0x5599cc816460 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5599cc816550 <col:35> 'T' lvalue ->_slot 0x5599cc7f3ff8
|   |       `-CXXThisExpr 0x5599cc816540 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5599cc7f3f98 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5599cc7f3ff8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5599cc7f4060 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5599cc7f4160 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5599cc7f41b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5599cc7f4140 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5599cc7f4120 <col:31> 'int' 48
|-FieldDecl 0x5599cc7f41d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5599cc7f4238 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5599cc7f4298 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5599cc7f43d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5599cc802140 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5599cc8021a0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5599cc802250 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5599cc802478 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5599cc802380 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5599cc8025c8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5599cc802538 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5599cc802898 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5599cc802688 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5599cc802708 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5599cc8027b0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5599cc802aa8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5599cc802960 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5599cc8029d8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5599cc802b78 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5599cc802cc8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5599cc802c30 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5599cc803058 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5599cc802d88 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5599cc802e08 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5599cc802eb0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5599cc802f68 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5599cc803280 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5599cc803130 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5599cc8031a8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5599cc803598 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5599cc803330 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5599cc8034f8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5599cc803408 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class SecondsArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_digits
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc81ed40 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc81ee58 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5599cc81eee8 <col:16, col:22> col:16 public
|-EnumDecl 0x5599cc81ef10 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5599cc81f010 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5599cc81f260 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc81eff0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5599cc81efd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5599cc81f0a0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5599cc81f278 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc81f080 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5599cc81f060 <col:24> 'int' 22
| |-EnumConstantDecl 0x5599cc81f130 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5599cc81f290 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc81f110 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5599cc81f0f0 <col:24> 'int' 34
| |-EnumConstantDecl 0x5599cc81f1c0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5599cc81f2a8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5599cc81f1a0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5599cc81f180 <col:25> 'int' 95
| `-EnumConstantDecl 0x5599cc81f210 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5599cc820c20 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5599cc821058 <col:7>
|-CXXConstructorDecl 0x5599cc820d28 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5599cc820d28
| `-ParmVarDecl 0x5599cc820e38 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5599cc820ed8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc820fe8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5599cc85cf60 <col:7>
`-CXXDestructorDecl 0x5599cc823158 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc82ed38 <../dummy_inc/click/args.hh:1310:1, line:1321:1> line:1310:7 referenced class SecondsArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5599cc82ee98 <col:1, col:7> col:7 implicit referenced class SecondsArg
|-AccessSpecDecl 0x5599cc82ef28 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x5599cc82f038 <line:1311:5, line:1313:5> line:1311:5 used SecondsArg 'void (int)'
| |-ParmVarDecl 0x5599cc82ef68 <col:16, col:24> col:20 used d 'int' cinit
| | `-IntegerLiteral 0x5599cc82f8e0 <col:24> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5599cc82f9e0 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5599cc82f810 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x5599cc82f9a0 <line:1312:27> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc82f960 <col:27> 'int' lvalue ParmVar 0x5599cc82ef68 'd' 'int'
| `-CompoundStmt 0x5599cc82fa50 <col:30, line:1313:5>
|-CXXMethodDecl 0x5599cc82f288 <line:1314:5, col:99> col:10 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x5599cc82f0f8 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x5599cc82f170 <col:46, col:56> col:56 result 'uint32_t &'
| `-ParmVarDecl 0x5599cc82f1e8 <col:64, col:89> col:82 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5599cc82f900 <col:89> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5599cc82f4e0 <line:1315:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x5599cc82f350 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5599cc82f3c8 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x5599cc82f440 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5599cc82f920 <col:78> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5599cc82f740 <line:1317:5, col:86> col:10 parse 'bool (const String &, double &, const ArgContext &)'
| |-ParmVarDecl 0x5599cc82f5a8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5599cc82f628 <col:35, col:43> col:43 result 'double &'
| `-ParmVarDecl 0x5599cc82f6a0 <col:51, col:76> col:69 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5599cc82f940 <col:76> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|-FieldDecl 0x5599cc82f810 <line:1319:5, col:9> col:9 referenced fraction_digits 'int'
|-FieldDecl 0x5599cc82f878 <line:1320:5, col:9> col:9 referenced status 'int'
|-CXXConstructorDecl 0x5599cc85c468 <line:1310:7> col:7 implicit constexpr SecondsArg 'void (const SecondsArg &)' inline default trivial noexcept-unevaluated 0x5599cc85c468
| `-ParmVarDecl 0x5599cc85c578 <col:7> col:7 'const SecondsArg &'
|-CXXConstructorDecl 0x5599cc85c618 <col:7> col:7 implicit used constexpr SecondsArg 'void (SecondsArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc85c728 <col:7> col:7 used 'SecondsArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5599cc85cf70 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5599cc85cf40 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5599cc85cf10 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc85cee0 <col:7> 'SecondsArg' lvalue ParmVar 0x5599cc85c728 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x5599cc82f810 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x5599cc85d068 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5599cc85d038 <col:7> 'int' xvalue .fraction_digits 0x5599cc82f810
| |     `-CXXStaticCastExpr 0x5599cc85d008 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc85cfd8 <col:7> 'SecondsArg' lvalue ParmVar 0x5599cc85c728 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x5599cc82f878 'status' 'int'
| | `-ImplicitCastExpr 0x5599cc85d138 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5599cc85d108 <col:7> 'int' xvalue .status 0x5599cc82f878
| |     `-CXXStaticCastExpr 0x5599cc85d0d8 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc85d0a8 <col:7> 'SecondsArg' lvalue ParmVar 0x5599cc85c728 '' 'SecondsArg &&'
| `-CompoundStmt 0x5599cc85d190 <col:7>
`-CXXDestructorDecl 0x5599cc85c7c8 <col:7> col:7 implicit referenced ~SecondsArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.SecondsArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.SecondsArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc73a130 prev 0x5599cc7169f0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5599cc73a268 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5599cc73a2f8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5599cc73a3a0 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5599cc73a440 <col:20>
| `-OptimizeNoneAttr 0x5599cc73a498 <col:30>
|-CXXMethodDecl 0x5599cc73a4e8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5599cc73a588 <col:20>
| `-OptimizeNoneAttr 0x5599cc73a5e0 <col:30>
|-CXXMethodDecl 0x5599cc73a630 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc73a6f8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc73a7c0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc73a8d8 <line:785:5, col:40> col:25 used ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5599cc73a9a0 <line:786:5, col:72> col:55 used network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5599cc73aa40 <col:20>
| `-OptimizeNoneAttr 0x5599cc73aa98 <col:30>
|-CXXMethodDecl 0x5599cc73ab08 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5599cc73aba8 <col:20>
| `-OptimizeNoneAttr 0x5599cc73ac00 <col:30>
|-CXXMethodDecl 0x5599cc73aca8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5599cc73ad48 <col:20>
| `-OptimizeNoneAttr 0x5599cc73ada0 <col:30>
|-CXXMethodDecl 0x5599cc73adf0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5599cc73af08 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5599cc73b028 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5599cc73b148 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5599cc73b210 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5599cc73b2b0 <col:62> "" ""
|-AccessSpecDecl 0x5599cc73b320 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5599cc73b380 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5599cc73bf78 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5599cc73c1a0 <col:29, col:31>
|-CXXMethodDecl 0x5599cc73b448 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5599cc73b588 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5599cc73b4f8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5599cc73b680 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5599cc73c1b0 <col:23, col:25>
|-CXXMethodDecl 0x5599cc73b838 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5599cc73b770 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5599cc73bb08 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5599cc73b8f0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5599cc73b968 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5599cc73b9e0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5599cc73bc98 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5599cc73bbd0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5599cc73bd90 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5599cc73bdf8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5599cc73bdf8
  `-ParmVarDecl 0x5599cc73bf08 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc83be70 prev 0x5599cc716540 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x5599cc83c260 <line:21:18>
|-CXXRecordDecl 0x5599cc83bf68 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x5599cc83c0d8 <line:18:5, col:26> col:13 referenced ether_dhost 'uint8_t [6]'
|-FieldDecl 0x5599cc83c1b0 <line:19:5, col:26> col:13 referenced ether_shost 'uint8_t [6]'
`-FieldDecl 0x5599cc83c210 <line:20:5, col:14> col:14 referenced ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether_macctl
         0 |   uint16_t ether_macctl_opcode
         2 |   uint16_t ether_macctl_param
         4 |   uint8_t [42] ether_macctl_reserved
           | [sizeof=46, dsize=46, align=2,
           |  nvsize=46, nvalign=2]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc83d068 <../dummy_inc/clicknet/ether.h:76:1, line:80:1> line:76:8 referenced struct click_ether_macctl definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5599cc83d188 <col:1, col:8> col:8 implicit struct click_ether_macctl
|-FieldDecl 0x5599cc83d228 <line:77:5, col:14> col:14 referenced ether_macctl_opcode 'uint16_t':'unsigned short'
|-FieldDecl 0x5599cc83d288 <line:78:5, col:14> col:14 referenced ether_macctl_param 'uint16_t':'unsigned short'
`-FieldDecl 0x5599cc83d3b8 <line:79:5, col:37> col:13 referenced ether_macctl_reserved 'uint8_t [42]'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_macctl = type { i16, i16, [42 x i8] }
  NonVirtualBaseLLVMType:%struct.click_ether_macctl = type { i16, i16, [42 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc839a10 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc839b28 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5599cc839bb8 <col:25, col:31> col:25 public
|-TypedefDecl 0x5599cc839bf0 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x5599cc1ed310 'void'
|-CXXConstructorDecl 0x5599cc839d38 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5599cc839c60 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5599cc83afa0 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5599cc83a8d0 'flags_' 'int'
| | `-ImplicitCastExpr 0x5599cc83b040 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc83b000 <col:45> 'int' lvalue ParmVar 0x5599cc839c60 'flags' 'int'
| `-CompoundStmt 0x5599cc83b088 <col:52, col:53>
|-CXXMethodDecl 0x5599cc839ff8 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5599cc839df8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5599cc839e98 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5599cc839f10 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5599cc83afc0 <col:88> 'const ArgContext' lvalue Var 0x5599cc8399a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5599cc83b268 <col:100, line:210:5>
|   `-ReturnStmt 0x5599cc83b258 <line:209:9, col:46>
|     `-CallExpr 0x5599cc83b200 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5599cc83b1e8 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc83b1a0 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5599cc83ab98 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5599cc83b100 <col:22> 'const String' lvalue ParmVar 0x5599cc839df8 'str' 'const String &'
|       |-DeclRefExpr 0x5599cc83b120 <col:27> 'EtherAddress' lvalue ParmVar 0x5599cc839e98 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5599cc83b140 <col:34> 'const ArgContext' lvalue ParmVar 0x5599cc839f10 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5599cc83b240 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5599cc83b170 <col:40> 'int' lvalue ->flags_ 0x5599cc83a8d0
|           `-CXXThisExpr 0x5599cc83b160 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5599cc83a298 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5599cc83a0c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5599cc83a140 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5599cc83a1b8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5599cc83afe0 <col:89> 'const ArgContext' lvalue Var 0x5599cc8399a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5599cc83b440 <col:101, line:213:5>
|   `-ReturnStmt 0x5599cc83b430 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5599cc83b3f8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5599cc83b3c8 <col:9> '<bound member function type>' ->parse 0x5599cc839ff8
|       | `-CXXThisExpr 0x5599cc83b3b8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5599cc83b2e8 <col:15> 'const String' lvalue ParmVar 0x5599cc83a0c0 'str' 'const String &'
|       |-UnaryOperator 0x5599cc83b380 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5599cc83b350 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5599cc83b338 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5599cc83b308 <col:54> 'unsigned char *' lvalue ParmVar 0x5599cc83a140 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5599cc83b398 <col:62> 'const ArgContext' lvalue ParmVar 0x5599cc83a1b8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5599cc83a538 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5599cc83a360 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5599cc83a3d8 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5599cc83a450 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5599cc83b628 <col:82, line:216:5>
|   `-ReturnStmt 0x5599cc83b618 <line:215:9, col:53>
|     `-CallExpr 0x5599cc83b5c0 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5599cc83b5a8 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5599cc83b560 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5599cc83aec8 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5599cc83b4c0 <col:29> 'const String' lvalue ParmVar 0x5599cc83a360 'str' 'const String &'
|       |-DeclRefExpr 0x5599cc83b4e0 <col:34> 'EtherAddress' lvalue ParmVar 0x5599cc83a3d8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5599cc83b500 <col:41> 'Args' lvalue ParmVar 0x5599cc83a450 'args' 'Args &'
|       `-ImplicitCastExpr 0x5599cc83b600 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5599cc83b530 <col:47> 'int' lvalue ->flags_ 0x5599cc83a8d0
|           `-CXXThisExpr 0x5599cc83b520 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5599cc83a7d8 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5599cc83a600 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5599cc83a680 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5599cc83a6f8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5599cc83b800 <col:83, line:219:5>
|   `-ReturnStmt 0x5599cc83b7f0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5599cc83b7b8 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5599cc83b788 <col:9> '<bound member function type>' ->direct_parse 0x5599cc83a538
|       | `-CXXThisExpr 0x5599cc83b778 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5599cc83b6a8 <col:22> 'const String' lvalue ParmVar 0x5599cc83a600 'str' 'const String &'
|       |-UnaryOperator 0x5599cc83b740 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5599cc83b710 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5599cc83b6f8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5599cc83b6c8 <col:61> 'unsigned char *' lvalue ParmVar 0x5599cc83a680 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5599cc83b758 <col:69> 'Args' lvalue ParmVar 0x5599cc83a6f8 'args' 'Args &'
|-AccessSpecDecl 0x5599cc83a890 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5599cc83a8d0 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5599cc83ab98 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5599cc83a930 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5599cc83a9a8 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5599cc83aa20 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5599cc83aaa0 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5599cc83aec8 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5599cc83ac68 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5599cc83ace0 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5599cc83ad58 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5599cc83add8 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x5599cc875128 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5599cc875128
| `-ParmVarDecl 0x5599cc875238 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x5599cc8752d8 <col:7> col:7 implicit constexpr EtherAddressArg 'void (EtherAddressArg &&)' inline default trivial noexcept-unevaluated 0x5599cc8752d8
| `-ParmVarDecl 0x5599cc8753e8 <col:7> col:7 'EtherAddressArg &&'
`-CXXDestructorDecl 0x5599cc8754b0 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc81f2d8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5599cc81f438 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5599cc81f4c8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5599cc81f500 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5599cc3436c0 'uint32_t' sugar
|   |-Typedef 0x5599cc2563d8 'uint32_t'
|   `-TypedefType 0x5599cc22f480 '__uint32_t' sugar
|     |-Typedef 0x5599cc22f078 '__uint32_t'
|     `-BuiltinType 0x5599cc1ed450 'unsigned int'
|-CXXConstructorDecl 0x5599cc81f648 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5599cc81f570 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5599cc820b28 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5599cc821068 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5599cc8203e0 'base' 'int'
| | `-ImplicitCastExpr 0x5599cc820bc8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5599cc820b88 <col:16> 'int' lvalue ParmVar 0x5599cc81f570 'b' 'int'
| `-CompoundStmt 0x5599cc8210d8 <col:19, line:1046:5>
|-CXXMethodDecl 0x5599cc81fb40 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5599cc81f710 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5599cc81f790 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5599cc81f808 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5599cc81f888 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5599cc81f948 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5599cc81f9c8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5599cc81ff98 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5599cc81fc10 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x5599cc81fef8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x5599cc81fcb8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x5599cc81fd58 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x5599cc81fdd0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x5599cc820b48 <col:82> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x5599cc822008 <col:94, line:1067:5>
|     |-DeclStmt 0x5599cc821268 <line:1054:9, col:64>
|     | `-VarDecl 0x5599cc8210f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x5599cc821220 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x5599cc821488 <line:1055:9, col:91>
|     | `-VarDecl 0x5599cc821298 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5599cc821460 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x5599cc821440 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x5599cc8213f0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x5599cc8213d0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x5599cc821378 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x5599cc821328 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x5599cc821358 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x5599cc8213b8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x5599cc821398 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x5599cc821420 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5599cc8215e8 <line:1056:9, col:27>
|     | `-VarDecl 0x5599cc821580 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x5599cc821a30 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x5599cc821960 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5599cc8218e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5599cc70d6a8 0x5599cc556c88 0x5599cc556960 0x5599cc548140 0x5599cc547df0 0x5599cc5476e0 0x5599cc51a050 0x5599cc4a6510
|     | | |-CallExpr 0x5599cc821820 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x5599cc821610 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x5599cc8216c0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5599cc821690 <col:19, col:23> '<bound member function type>' .begin 0x5599cc537348
|     | | | |   `-DeclRefExpr 0x5599cc821670 <col:19> 'const String' lvalue ParmVar 0x5599cc81fcb8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5599cc821730 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5599cc821700 <col:32, col:36> '<bound member function type>' .end 0x5599cc537560
|     | | | |   `-DeclRefExpr 0x5599cc8216e0 <col:32> 'const String' lvalue ParmVar 0x5599cc81fcb8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x5599cc821750 <col:43> 'const bool' lvalue Var 0x5599cc8210f8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x5599cc8217b8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x5599cc821798 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x5599cc8217e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5599cc821580 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x5599cc821800 <col:73> 'const int' lvalue Var 0x5599cc821298 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x5599cc8218c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5599cc821890 <col:16, col:20> '<bound member function type>' .end 0x5599cc537560
|     | |     `-DeclRefExpr 0x5599cc821870 <col:16> 'const String' lvalue ParmVar 0x5599cc81fcb8 'str' 'const String &'
|     | `-BinaryOperator 0x5599cc821a10 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5599cc8219a8 <col:13> 'int' lvalue ->status 0x5599cc820448
|     |   | `-CXXThisExpr 0x5599cc821998 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5599cc8219f8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5599cc8219d8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5599cc81f0a0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5599cc821c80 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5599cc821b68 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5599cc821b50 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5599cc821b38 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5599cc821a58 <col:13> 'int' lvalue ->status 0x5599cc820448
|     | | |     `-CXXThisExpr 0x5599cc821a48 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5599cc821b18 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5599cc821ae8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5599cc821a98 <col:23> 'int' lvalue ->status 0x5599cc820448
|     | |   |   `-CXXThisExpr 0x5599cc821a88 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5599cc821b00 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5599cc821ac8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5599cc81f130 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5599cc821c60 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5599cc821c00 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5599cc821ba8 <col:13, col:18> '<bound member function type>' .error 0x5599cc7c9500
|     |   | | `-DeclRefExpr 0x5599cc821b88 <col:13> 'const ArgContext' lvalue ParmVar 0x5599cc81fdd0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5599cc821c28 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5599cc821bd8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5599cc821c50 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5599cc821c40 <col:20> 'bool' false
|     |-DeclStmt 0x5599cc821e58 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5599cc821e00 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x5599cc821d90 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x5599cc821fb8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5599cc821e70 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5599cc4da4d8
|     | |-DeclRefExpr 0x5599cc821eb8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5599cc821580 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x5599cc821f88 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x5599cc821f00 <col:64> 'V' lvalue ParmVar 0x5599cc81fd58 'result' 'V &'
|     `-ReturnStmt 0x5599cc821ff8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5599cc821fe8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5599cc820358 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5599cc820008 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5599cc8202b8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5599cc8200b8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5599cc820158 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5599cc8201d0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5599cc820b68 <col:71> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5599cc822778 <col:83, line:1083:5>
| |   |-DeclStmt 0x5599cc8220d0 <line:1071:9, col:12>
| |   | `-VarDecl 0x5599cc822068 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5599cc822750 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5599cc822360 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5599cc8221e8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5599cc8221b0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5599cc8220f8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5599cc822150 <col:31> 'const String' lvalue ParmVar 0x5599cc8200b8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5599cc822170 <col:36> 'V' lvalue Var 0x5599cc822068 'x' 'V'
| |     | |   `-DeclRefExpr 0x5599cc822190 <col:39> 'const ArgContext' lvalue ParmVar 0x5599cc8201d0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5599cc822340 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5599cc822320 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5599cc822308 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5599cc8222f0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5599cc822210 <col:17> 'int' lvalue ->status 0x5599cc820448
| |     |     |     `-CXXThisExpr 0x5599cc822200 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5599cc8222d0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5599cc8222a0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5599cc822250 <col:27> 'int' lvalue ->status 0x5599cc820448
| |     |       |   `-CXXThisExpr 0x5599cc822240 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5599cc8222b8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5599cc822280 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5599cc81f130 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5599cc822390 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5599cc822380 <col:20> 'bool' false
| |     `-IfStmt 0x5599cc822728 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5599cc822430 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5599cc822400 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5599cc8223b0 <col:18> 'int' lvalue ->status 0x5599cc820448
| |       | |   `-CXXThisExpr 0x5599cc8223a0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5599cc822418 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5599cc8223e0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5599cc81f130 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5599cc822668 <col:42, line:1079:9>
| |       | |-CallExpr 0x5599cc822610 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5599cc822460 <line:1076:13> '<bound member function type>' ->range_error 0x5599cc820a58
| |       | | | `-CXXThisExpr 0x5599cc822450 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5599cc822490 <col:25> 'const ArgContext' lvalue ParmVar 0x5599cc8201d0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5599cc822570 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5599cc8225e8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5599cc8225c8 <col:43> 'V' lvalue Var 0x5599cc822068 'x' 'V'
| |       | `-ReturnStmt 0x5599cc822658 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5599cc822648 <col:20> 'bool' false
| |       `-CompoundStmt 0x5599cc822708 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5599cc8226c8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5599cc822688 <col:13> 'V' lvalue ParmVar 0x5599cc820158 'result' 'V &'
| |         | `-DeclRefExpr 0x5599cc8226a8 <col:22> 'V' lvalue Var 0x5599cc822068 'x' 'V'
| |         `-ReturnStmt 0x5599cc8226f8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5599cc8226e8 <col:20> 'bool' true
| |-CXXMethodDecl 0x5599cc8a6b18 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
| | |-TemplateArgument type 'unsigned int'
| | |-ParmVarDecl 0x5599cc8a68f0 <col:16, col:30> col:30 str 'const String &'
| | |-ParmVarDecl 0x5599cc8a69c8 <col:35, col:38> col:38 result 'unsigned int &'
| | `-ParmVarDecl 0x5599cc8a6a30 <col:46, col:71> col:64 args 'const ArgContext &' cinit
| |   `-DeclRefExpr 0x5599cc820b68 <col:71> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
| `-CXXMethodDecl 0x5599cc8a7708 <col:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5599cc8a74e0 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x5599cc8a75b8 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x5599cc8a7620 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x5599cc820b68 <col:71> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|-FieldDecl 0x5599cc8203e0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x5599cc820448 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5599cc820498 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5599cc820750 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5599cc8204d8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5599cc820558 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5599cc8205d0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5599cc820650 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5599cc820a58 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5599cc820820 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5599cc820898 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5599cc820930 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5599cc822fd8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5599cc822fd8
| `-ParmVarDecl 0x5599cc8230e8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5599cc823268 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x5599cc823268
| `-ParmVarDecl 0x5599cc823378 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x5599cc875f20 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc82c9f0 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc82cb08 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5599cc82cb98 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5599cc82cdd8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5599cc82cbd0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5599cc82cc50 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5599cc82ccc8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5599cc82cff0 <col:81> 'const ArgContext' lvalue Var 0x5599cc8165d8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5599cc82cf30 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5599cc82cea0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5599cc82d148 <col:35, line:1261:5>
|   `-ReturnStmt 0x5599cc82d138 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5599cc82d120 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5599cc82d0f0 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5599cc82d0d8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5599cc82d0b0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5599cc82d090 <col:16, col:24> 'String' (CXXTemporary 0x5599cc82d090)
|               `-CXXConstructExpr 0x5599cc82d058 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5599cc82d040 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5599cc82d020 <col:23> 'bool' lvalue ParmVar 0x5599cc82cea0 'x' 'bool'
|-CXXConstructorDecl 0x5599cc8a7b40 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5599cc8a7c48 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x5599cc8a7c48
| `-ParmVarDecl 0x5599cc8a7d58 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x5599cc8a7df8 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x5599cc8a7df8
| `-ParmVarDecl 0x5599cc8a7f08 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x5599cc8a7fa8 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned short>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned short * _ptr
        24 |   unsigned short _slot
           | [sizeof=32, dsize=26, align=8,
           |  nvsize=26, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5599cc343338 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5599cc343458 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5599cc5552d0 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5599cc5553b0 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5599cc5553b0
| `-ParmVarDecl 0x5599cc555498 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5599cc555538 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5599cc555538
| `-ParmVarDecl 0x5599cc555648 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x5599cc6f2330 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<class EtherAddress>
         0 |   class EtherAddressArg (base)
         0 |     int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc83b840 <../dummy_inc/click/etheraddress.hh:226:1, col:70> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'EtherAddressArg'
|-TemplateArgument type 'EtherAddress'
|-CXXRecordDecl 0x5599cc83ba98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5599cc8dd428 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5599cc8dd8c0 <col:19> 'EtherAddressArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5599cc8dd8a0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5599cc8dd930 <col:19>
|-CXXConstructorDecl 0x5599cc8dd528 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<EtherAddress> &)' inline default trivial noexcept-unevaluated 0x5599cc8dd528
| `-ParmVarDecl 0x5599cc8dd638 <col:19> col:19 'const DefaultArg<EtherAddress> &'
|-CXXConstructorDecl 0x5599cc8dd6d8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<EtherAddress> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc8dd7e8 <col:19> col:19 used 'DefaultArg<EtherAddress> &&'
| |-CXXCtorInitializer 'EtherAddressArg'
| | `-CXXConstructExpr 0x5599cc8de2f0 <col:19> 'EtherAddressArg' 'void (EtherAddressArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5599cc8de1d0 <col:19> 'EtherAddressArg' xvalue <UncheckedDerivedToBase (EtherAddressArg)>
| |     `-CXXStaticCastExpr 0x5599cc8de1a0 <col:19> 'DefaultArg<EtherAddress>' xvalue static_cast<struct DefaultArg<class EtherAddress> &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc8de170 <col:19> 'DefaultArg<EtherAddress>' lvalue ParmVar 0x5599cc8dd7e8 '' 'DefaultArg<EtherAddress> &&'
| `-CompoundStmt 0x5599cc8de360 <col:19>
`-CXXDestructorDecl 0x5599cc8dd970 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.EtherAddressArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned short>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc826f80 <../dummy_inc/click/args.hh:1180:1, col:63> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned short'
|-CXXRecordDecl 0x5599cc8271d8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5599cc8e3248 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5599cc8e36e0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5599cc8e36c0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5599cc8e3750 <col:19>
|-CXXConstructorDecl 0x5599cc8e3348 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned short> &)' inline default trivial noexcept-unevaluated 0x5599cc8e3348
| `-ParmVarDecl 0x5599cc8e3458 <col:19> col:19 'const DefaultArg<unsigned short> &'
|-CXXConstructorDecl 0x5599cc8e34f8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned short> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc8e3608 <col:19> col:19 used 'DefaultArg<unsigned short> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5599cc8e42d0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5599cc8e4000 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5599cc8e3fd0 <col:19> 'DefaultArg<unsigned short>' xvalue static_cast<struct DefaultArg<unsigned short> &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc8e3fa0 <col:19> 'DefaultArg<unsigned short>' lvalue ParmVar 0x5599cc8e3608 '' 'DefaultArg<unsigned short> &&'
| `-CompoundStmt 0x5599cc8e4340 <col:19>
`-CXXDestructorDecl 0x5599cc8e3790 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc827910 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5599cc827b68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5599cc8ef1e8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5599cc8ef680 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5599cc8ef660 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5599cc8ef6f0 <col:19>
|-CXXConstructorDecl 0x5599cc8ef2e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5599cc8ef2e8
| `-ParmVarDecl 0x5599cc8ef3f8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5599cc8ef498 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc8ef5a8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5599cc8eff90 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5599cc8eff70 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5599cc8eff40 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc8eff10 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5599cc8ef5a8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5599cc8f0000 <col:19>
`-CXXDestructorDecl 0x5599cc8ef730 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.3 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5599cc82d188 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5599cc82d3e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5599cc8fa4a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5599cc8fa5a8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x5599cc8fa5a8
| `-ParmVarDecl 0x5599cc8fa6b8 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5599cc8fa758 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5599cc8fa868 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x5599cc8fb1a0 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5599cc8fb170 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x5599cc8fb140 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x5599cc8fb110 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5599cc8fa868 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x5599cc8fb210 <col:19>
`-CXXDestructorDecl 0x5599cc8fa908 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.4 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.4 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
