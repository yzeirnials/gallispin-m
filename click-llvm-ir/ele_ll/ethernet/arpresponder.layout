
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | struct ARPResponder::Entry
         0 |   class IPAddress dst
         0 |     uint32_t _addr
         4 |   class IPAddress mask
         4 |     uint32_t _addr
         8 |   class EtherAddress ena
         8 |     uint16_t [3] _data
           | [sizeof=16, dsize=14, align=4,
           |  nvsize=14, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93a0bc8 prev 0x5632d9398368 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d93a0cc0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5632d93a0d50 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5632d93a0dc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5632d93a0e88 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5632d93a0f50 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5632d93a10c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5632d93a1000 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5632d93a1170 <col:24>
| `-OptimizeNoneAttr 0x5632d93a11c8 <col:34>
|-CXXMethodDecl 0x5632d93a1210 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5632d93a14c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5632d93a12c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5632d93a1338 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5632d93a13b8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5632d93a1580 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5632d93a15b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5632d93a1620 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5632d93a16a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5632d93a19c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5632d93a1760 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5632d93a17d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5632d93a1850 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5632d93a18d0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5632d93a1ae0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5632d93a9458 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5632d93a9458
| `-ParmVarDecl 0x5632d93a9568 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5632d93a9608 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5632d93a9608
| `-ParmVarDecl 0x5632d93a9718 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5632d94aefa8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9393be0 prev 0x5632d9393960 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5632d9393cd8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5632d9393d68 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5632d9393dc8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5632d9393eb8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5632d9393fb8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5632d9394188 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5632d9394038 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5632d93940b0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5632d9394318 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5632d9394250 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5632d93943c0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5632d93944f8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5632d9394430 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5632d9394698 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5632d93945d8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5632d9394838 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5632d9394778 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5632d93948e0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5632d93949e0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5632d9394ac0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93949c0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5632d93949a0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5632d9394a70 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5632d9394ad8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9394a50 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5632d9394a30 <col:44> 'int' 2
|-CXXMethodDecl 0x5632d9394c20 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5632d9394b08 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5632d9394b88 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5632d9394d78 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5632d9394ce8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5632d9394fb8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5632d9394e38 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5632d9394eb0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5632d9395068 <col:20>
| `-OptimizeNoneAttr 0x5632d93950c0 <col:30>
|-CXXMethodDecl 0x5632d93951c8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5632d9395100 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5632d9395270 <col:20>
| `-OptimizeNoneAttr 0x5632d93952c8 <col:30>
|-CXXMethodDecl 0x5632d9395318 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5632d93953e0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5632d93954f8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5632d9395580 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5632d9395608 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5632d9395690 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5632d9395718 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5632d93957a8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5632d9395868 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5632d93958f0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5632d9395978 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5632d9395a00 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5632d9395a88 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5632d9395b10 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5632d9395ba0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5632d9395c60 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5632d9395cf0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5632d9395e40 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5632d9395da8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5632d9395fd0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5632d9395f00 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5632d9396280 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5632d9396088 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5632d9396108 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5632d9396188 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5632d9396338 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5632d9396440 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5632d93966d0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9396420 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d9396400 <col:33> 'int' 0
| |-EnumConstantDecl 0x5632d93964d0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5632d93966e8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93964b0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5632d9396490 <col:32> 'int' 20
| |-EnumConstantDecl 0x5632d9396560 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5632d9396700 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9396540 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5632d9396520 <col:38> 'int' 90
| |-EnumConstantDecl 0x5632d93965f0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5632d9396718 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93965d0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5632d93965b0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5632d9396680 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5632d9396730 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9396660 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5632d9396640 <col:32> 'int' 2000
|-CXXMethodDecl 0x5632d9396770 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5632d9396bb0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5632d9396a20 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5632d9396a98 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9396c80 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5632d9396e00 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5632d9396d30 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9397008 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5632d9396eb8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5632d9396f30 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9397108 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5632d93971a8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5632d9397270 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d9397300 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5632d9397530 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93972e0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5632d93972c0 <col:36> 'int' EnumConstant 0x5632d9397270 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d9397350 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d93973a0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d93973f0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d9397440 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5632d9397490 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5632d93974e0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5632d9397618 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5632d9397558 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5632d93976e0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5632d93977a0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5632d9397860 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5632d9397920 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5632d9397a38 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5632d9397b00 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5632d9397c80 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5632d9397bb0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5632d9397da8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5632d9397fa8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5632d9397e58 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5632d9397ed8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5632d93a58f8 <col:54, line:127:5>
|   |-ParenExpr 0x5632d93a57a8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5632d93a5778 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5632d93a5468 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5632d93a5440 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5632d93a5428 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5632d93a5410 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5632d93a53e0 <col:31> 'Router *' lvalue ->_router 0x5632d93a32c0
|   |   |         `-CXXThisExpr 0x5632d93a53d0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5632d93a54c8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d93a54a8 <col:48> 'int' 0
|   |   `-CallExpr 0x5632d93a56d8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5632d93a56c0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d93a56a0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d93a5718 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d93a5538 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5632d93a5730 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d93a5558 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5632d93a5748 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d93a5590 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5632d93a5760 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d93a5688 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d93a5670 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d93a5628 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5632d93a5840 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5632d93a57d8 <col:9> 'Router *' lvalue ->_router 0x5632d93a32c0
|   | | `-CXXThisExpr 0x5632d93a57c8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5632d93a5828 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5632d93a5808 <col:19> 'Router *' lvalue ParmVar 0x5632d9397e58 'r' 'Router *'
|   `-BinaryOperator 0x5632d93a58d8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5632d93a5870 <col:9> 'int' lvalue ->_eindex 0x5632d93a3328
|     | `-CXXThisExpr 0x5632d93a5860 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5632d93a58c0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5632d93a58a0 <col:19> 'int' lvalue ParmVar 0x5632d9397ed8 'eindex' 'int'
|-CXXMethodDecl 0x5632d9398130 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5632d9398068 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5632d9398200 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5632d93982c8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5632d9398368 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5632d93985b8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5632d9398430 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5632d93984b0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5632d9398668 <col:20>
| `-OptimizeNoneAttr 0x5632d93986c0 <col:30>
|-CXXMethodDecl 0x5632d93987c8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5632d9398700 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5632d9398870 <col:20>
| `-OptimizeNoneAttr 0x5632d93988c8 <col:30>
|-CXXMethodDecl 0x5632d9398998 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5632d9398908 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5632d9398a40 <col:20>
| `-OptimizeNoneAttr 0x5632d9398a98 <col:30>
|-CXXMethodDecl 0x5632d9398c28 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5632d9398ad0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5632d9398b50 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5632d9398db8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5632d9398cf0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5632d9398f08 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5632d9398e78 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5632d9399058 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5632d9398fc8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5632d93991a8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5632d9399118 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5632d9399468 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5632d9399260 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5632d93992e0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5632d9399388 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5632d9399540 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5632d9399600 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5632d93998d0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5632d9399780 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5632d93997f8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93999f8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5632d9399bd0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5632d9399ab0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5632d9399b30 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5632d9399db8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5632d9399c98 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5632d9399d18 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5632d939a128 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5632d9399e78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5632d9399ef0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5632d9399f70 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5632d93a4ee0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d93a4ec0 <col:106> 'int' 0
| `-ParmVarDecl 0x5632d9399fe8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a4f18 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a4ef8 <col:126> 'int' 0
|-CXXMethodDecl 0x5632d939a4c8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5632d939a1f8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5632d939a290 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5632d939a310 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5632d939a388 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a4f50 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a4f30 <col:114> 'int' 0
|-CXXMethodDecl 0x5632d939a858 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5632d939a5a0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5632d939a618 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5632d939a698 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5632d93a4f68 <col:96> 'int' 0
| `-ParmVarDecl 0x5632d939a710 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a4fa8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a4f88 <col:116> 'int' 0
|-CXXMethodDecl 0x5632d939abd8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5632d939a928 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5632d939a9a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939aa20 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5632d93a4fe0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d93a4fc0 <col:109> 'int' 0
| `-ParmVarDecl 0x5632d939aa98 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a5018 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a4ff8 <col:129> 'int' 0
|-CXXMethodDecl 0x5632d939af58 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5632d939aca8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5632d939ad20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939ada0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5632d939ae18 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a5050 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a5030 <col:117> 'int' 0
|-CXXMethodDecl 0x5632d939b2e8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5632d939b030 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939b0a8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939b128 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5632d93a5068 <col:99> 'int' 0
| `-ParmVarDecl 0x5632d939b1a0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5632d93a50a8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5632d93a5088 <col:119> 'int' 0
|-CXXMethodDecl 0x5632d939b708 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5632d939b3b8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5632d939b438 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5632d939b4b0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939b530 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5632d93a50e0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d93a50c0 <col:108> 'int' 0
| `-ParmVarDecl 0x5632d939b5b0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5632d93a5118 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5632d93a50f8 <col:141> 'int' 0
|-CXXMethodDecl 0x5632d939bb28 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5632d939b7e0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5632d939b860 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5632d939b8d8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939b958 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5632d939b9d8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5632d93a5130 <col:121> 'int' 0
|-CXXMethodDecl 0x5632d939bf58 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5632d939bc08 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5632d939bc88 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5632d939bd00 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d939bd80 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5632d93a5150 <col:98> 'int' 0
| `-ParmVarDecl 0x5632d939be00 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5632d93a5170 <col:123> 'int' 0
|-CXXMethodDecl 0x5632d939c220 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5632d939c030 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5632d939c0b0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5632d939c130 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5632d93a5190 <col:80> 'int' 0
|-EnumDecl 0x5632d939c2d8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5632d939c3e0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5632d939c670 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d939c3c0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5632d939c3a0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5632d939c470 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5632d939c688 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d939c450 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5632d939c430 <col:40> 'int' 2
| |-EnumConstantDecl 0x5632d939c500 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5632d939c6a0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d939c4e0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5632d939c4c0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5632d939c590 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5632d939c6b8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d939c570 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5632d939c550 <col:36> 'int' 7
| `-EnumConstantDecl 0x5632d939c620 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5632d939c6d0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d939c600 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5632d939c5e0 <col:34> 'int' 6
|-CXXMethodDecl 0x5632d939c988 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5632d939c6f8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5632d939c798 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5632d939c818 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5632d939c890 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5632d93a5248 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5632d93a5230 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5632d93a5218 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5632d93a51f8 <col:98, col:105> 'String' (CXXTemporary 0x5632d93a51f8)
|           `-CXXTemporaryObjectExpr 0x5632d93a51c0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5632d939cc28 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5632d939ca58 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5632d939cad0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5632d939cb48 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5632d93a52f8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5632d93a52e0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5632d93a52c8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5632d93a52a8 <col:94, col:101> 'String' (CXXTemporary 0x5632d93a52a8)
| |         `-CXXTemporaryObjectExpr 0x5632d93a5270 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5632d93a5ae0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5632d93a5a58 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5632d93a5a28 <col:9> '<bound member function type>' ->add_task_handlers 0x5632d939c988
|     | `-CXXThisExpr 0x5632d93a5a18 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5632d93a5a98 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5632d93a5998 <col:27> 'Task *' lvalue ParmVar 0x5632d939ca58 'task' 'Task *'
|     |-ImplicitCastExpr 0x5632d93a5ab0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5632d93a59b8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5632d939cad0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5632d93a5ac8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5632d93a59d8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5632d939c620 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5632d93a59f8 <col:62> 'const String' lvalue ParmVar 0x5632d939cb48 'prefix' 'const String &'
|-CXXMethodDecl 0x5632d939ce38 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5632d939ccf0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5632d939cd68 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5632d93a53a8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5632d93a5390 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5632d93a5378 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5632d93a5358 <col:70, col:77> 'String' (CXXTemporary 0x5632d93a5358)
| |         `-CXXTemporaryObjectExpr 0x5632d93a5320 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5632d93a5cb8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5632d93a5c30 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5632d93a5c00 <col:9> '<bound member function type>' ->add_task_handlers 0x5632d939c988
|     | `-CXXThisExpr 0x5632d93a5bf0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5632d93a5c70 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5632d93a5b70 <col:27> 'Task *' lvalue ParmVar 0x5632d939ccf0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5632d93a5c88 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5632d93a5b90 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5632d93a5ca0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5632d93a5bb0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5632d939c620 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5632d93a5bd0 <col:57> 'const String' lvalue ParmVar 0x5632d939cd68 'prefix' 'const String &'
|-CXXMethodDecl 0x5632d939d118 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5632d939cf00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939cf80 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939cff8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5632d939d3c8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5632d939d1e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939d268 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939d2e8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5632d939d6b8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5632d939d498 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939d518 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939d590 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5632d939d968 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5632d939d788 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939d808 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939d888 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5632d939dc18 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5632d939da38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939dab8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939db38 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5632d939dec8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5632d939dce8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939dd68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939dde0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5632d939e178 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5632d939df98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939e018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939e098 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5632d939e488 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5632d939e2a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939e320 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939e3a0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5632d939e768 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5632d939e558 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939e5d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939e680 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5632d939ea48 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5632d939e838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939e8b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939e960 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5632d939ecb0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5632d939eb18 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5632d939eb98 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5632d939ec10 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5632d939ef58 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5632d939ed80 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5632d939ee00 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5632d939ee78 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5632d939f208 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5632d939f028 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939f0a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939f128 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5632d939f4b8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5632d939f2d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939f358 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939f3d0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5632d939f768 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5632d939f588 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939f608 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939f680 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5632d939fa38 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5632d939f838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939f8b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5632d939f958 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5632d939fd68 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5632d939fb08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5632d939fb88 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5632d939fc00 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5632d939fc78 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d93a53c0 <col:93> 'bool' false
|-CXXMethodDecl 0x5632d939ff50 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5632d939fe38 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5632d939feb8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5632d93a0128 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5632d93a0010 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5632d93a0090 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5632d93a0408 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93a01e8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5632d93a0260 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5632d93a02e0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5632d93a0358 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93a06f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93a04d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5632d93a0550 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5632d93a05d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5632d93a0648 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93a0930 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5632d93a07d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5632d93a0850 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5632d93a0b18 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5632d93a09f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5632d93a0a78 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5632d93a0bc8 prev 0x5632d9398368 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5632d93a0cc0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5632d93a0d50 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5632d93a0dc8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5632d93a0e88 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5632d93a0f50 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5632d93a10c8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5632d93a1000 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5632d93a1170 <col:24>
| | `-OptimizeNoneAttr 0x5632d93a11c8 <col:34>
| |-CXXMethodDecl 0x5632d93a1210 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5632d93a14c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5632d93a12c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5632d93a1338 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5632d93a13b8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5632d93a1580 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5632d93a15b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5632d93a1620 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5632d93a16a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5632d93a19c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5632d93a1760 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5632d93a17d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5632d93a1850 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5632d93a18d0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5632d93a1ae0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5632d93a9458 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5632d93a9458
| | `-ParmVarDecl 0x5632d93a9568 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5632d93a9608 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5632d93a9608
| | `-ParmVarDecl 0x5632d93a9718 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5632d94aefa8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5632d93a1b58 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5632d93a1bf8 <col:38> "" ""
|-CXXMethodDecl 0x5632d93a1c88 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5632d93a1d28 <col:44> "" ""
|-AccessSpecDecl 0x5632d93a1d98 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5632d93a1dc0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5632d93a1ec0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5632d93a1f10 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d93a1ea0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5632d93a1e80 <col:27> 'int' 4
|-FieldDecl 0x5632d93a1fc8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5632d93a2178 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5632d93a2230 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5632d93a32c0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5632d93a3328 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5632d93a3478 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5632d93a33b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5632d93a3628 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5632d93a3538 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5632d93a3808 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5632d93a36e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5632d93a3768 <col:25> col:28 'int'
|-CXXMethodDecl 0x5632d93a3ab0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5632d93a38d0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5632d93a3950 <col:28> col:31 'int'
| `-ParmVarDecl 0x5632d93a39c8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5632d93a3b68 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5632d93a3c30 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5632d93a3c80 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5632d93a3cd0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5632d93a3eb0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93a3d60 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5632d93a3dd8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93a4158 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5632d93a3f78 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5632d93a3ff8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5632d93a4070 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93a4378 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5632d93a4228 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5632d93a42a8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5632d93a46b0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5632d93a4438 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5632d93a44b8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5632d93a4530 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5632d93a45b0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5632d93a4898 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5632d93a4780 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5632d93a4800 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5632d93a49e8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5632d93a4958 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5632d93a4d68 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5632d93a4aa8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5632d93a4b28 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5632d93a4ba0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5632d93a4c20 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5632d93a4e80 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct ARPResponder::Entry>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class ARPResponder
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Vector<struct ARPResponder::Entry> _v
       112 |     class vector_memory<class sized_array_memory<16> > vm_
       112 |       vector_memory<class sized_array_memory<16> >::type * l_
       120 |       vector_memory::size_type n_
       124 |       vector_memory::size_type capacity_
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9316b80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5632d9316d58 prev 0x5632d9316b80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5632d9316de8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5632d9316e10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d93189e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5632d9318990 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5632d93172c0 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5632d93171c0 'type'
|     `-TemplateSpecializationType 0x5632d9317150 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5632d9317030 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5632d9317010 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5632d9316ff0 <col:24> 'unsigned long' 16
|       `-RecordType 0x5632d9317130 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5632d9317050 'char_array'
|-TypedefDecl 0x5632d9318a98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5632d9318a60 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5632d9318a40 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5632d93189e0 'type'
|     `-ElaboratedType 0x5632d9318990 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5632d93172c0 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5632d93171c0 'type'
|         `-TemplateSpecializationType 0x5632d9317150 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5632d9317030 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5632d9317010 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5632d9316ff0 <col:24> 'unsigned long' 16
|           `-RecordType 0x5632d9317130 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5632d9317050 'char_array'
|-CXXMethodDecl 0x5632d9318c18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5632d9318b28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5632d9318d08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5632d9318de8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5632d93190b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5632d9318fc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5632d93192f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5632d9319170 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d93191e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d93194c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5632d93193b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d9319430 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d9319628 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5632d93196f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5632d9319948 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5632d93197b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5632d9319830 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d9319ba8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5632d9319a18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5632d9319a90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d9319d68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5632d9319c78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d9319f28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5632d9319e30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d9319fe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d931a090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5632d931a2c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5632d931a140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d931a1b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5632d931a568 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5632d931a470 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5632d931a630 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5632d931a680 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5632d931a6d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d93153e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'ARPResponder::Entry'
|-CXXRecordDecl 0x5632d93155e8 prev 0x5632d93153e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5632d9316af0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Entry>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5632d9316aa0 'typename array_memory<Entry>::type' sugar
|   `-TypedefType 0x5632d9316a80 'conditional<true, sized_array_memory<16>, typed_array_memory<ARPResponder::Entry> >::type' sugar
|     |-Typedef 0x5632d9316930 'type'
|     `-SubstTemplateTypeParmType 0x5632d9316750 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5632d90f7ec0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d90f7e68 'T'
|       `-RecordType 0x5632d93162a0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5632d93161b8 'sized_array_memory'
|-FieldDecl 0x5632d931a720 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<ARPResponder::Entry>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5632d931a770 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5632d931a7a8 <line:118:5, col:15> col:15 value_type 'ARPResponder::Entry':'ARPResponder::Entry'
| `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|   |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5632d912fb58 'T'
|   `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|     `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d931a868 <line:119:5, col:16> col:16 reference 'ARPResponder::Entry &'
| `-LValueReferenceType 0x5632d931a830 'ARPResponder::Entry &'
|   `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|       `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d931a928 <line:120:5, col:22> col:22 const_reference 'const ARPResponder::Entry &'
| `-LValueReferenceType 0x5632d931a8f0 'const ARPResponder::Entry &'
|   `-QualType 0x5632d9315681 'const ARPResponder::Entry' const
|     `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|         `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d931a9e8 <line:121:5, col:16> col:16 pointer 'ARPResponder::Entry *'
| `-PointerType 0x5632d931a9b0 'ARPResponder::Entry *'
|   `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|       `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d931aaa8 <line:122:5, col:22> col:22 const_pointer 'const ARPResponder::Entry *'
| `-PointerType 0x5632d931aa70 'const ARPResponder::Entry *'
|   `-QualType 0x5632d9315681 'const ARPResponder::Entry' const
|     `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|         `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d93c6cc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Entry>::type':'const ARPResponder::Entry &'
| `-ElaboratedType 0x5632d93c6c70 'typename fast_argument<Entry>::type' sugar
|   `-TypedefType 0x5632d93c6c50 'fast_argument<ARPResponder::Entry, true>::type' sugar
|     |-Typedef 0x5632d93c6b88 'type'
|     `-LValueReferenceType 0x5632d93c6b50 'const ARPResponder::Entry &'
|       `-QualType 0x5632d93c68f1 'const ARPResponder::Entry' const
|         `-SubstTemplateTypeParmType 0x5632d93c68f0 'ARPResponder::Entry' sugar
|           |-TemplateTypeParmType 0x5632d9102590 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5632d9102538 'T'
|           `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|             `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d93c6d28 <line:126:5, col:22> col:22 const_access_type 'const ARPResponder::Entry &'
| `-LValueReferenceType 0x5632d931a8f0 'const ARPResponder::Entry &'
|   `-QualType 0x5632d9315681 'const ARPResponder::Entry' const
|     `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|         `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d93c6d80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d93c6de8 <line:130:5, col:16> col:16 iterator 'ARPResponder::Entry *'
| `-PointerType 0x5632d931a9b0 'ARPResponder::Entry *'
|   `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|       `-CXXRecord 0x5632d93150f0 'Entry'
|-TypedefDecl 0x5632d93c6e50 <line:131:5, col:22> col:22 referenced const_iterator 'const ARPResponder::Entry *'
| `-PointerType 0x5632d931aa70 'const ARPResponder::Entry *'
|   `-QualType 0x5632d9315681 'const ARPResponder::Entry' const
|     `-SubstTemplateTypeParmType 0x5632d9315680 'ARPResponder::Entry' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d9315180 'ARPResponder::Entry'
|         `-CXXRecord 0x5632d93150f0 'Entry'
|-EnumDecl 0x5632d93c6ea8 <line:134:5> col:5
| `-EnumConstantDecl 0x5632d93c6fa0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<ARPResponder::Entry>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5632d93c6f80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5632d9131238 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5632d9131210 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5632d91311f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5632d93c7028 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5632d93c72b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<ARPResponder::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d93c70e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d93c7180 <col:41, col:61> col:61 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-CXXConstructorDecl 0x5632d93c7578 <line:139:5, col:37> col:12 Vector 'void (const Vector<ARPResponder::Entry> &)' inline
| `-ParmVarDecl 0x5632d93c7460 <col:19, col:36> col:36 x 'const Vector<ARPResponder::Entry> &'
|-CXXConstructorDecl 0x5632d93c7838 <line:141:5, col:32> col:12 Vector 'void (Vector<ARPResponder::Entry> &&)' inline
| `-ParmVarDecl 0x5632d93c7720 <col:19, col:31> col:31 x 'Vector<ARPResponder::Entry> &&'
|-CXXMethodDecl 0x5632d93c7b80 <line:144:5, col:51> col:23 operator= 'Vector<ARPResponder::Entry> &(const Vector<ARPResponder::Entry> &)' inline
| `-ParmVarDecl 0x5632d93c7a60 <col:33, col:50> col:50 x 'const Vector<ARPResponder::Entry> &'
|-CXXMethodDecl 0x5632d93c7e90 <line:146:5, col:46> col:23 operator= 'Vector<ARPResponder::Entry> &(Vector<ARPResponder::Entry> &&)' inline
| `-ParmVarDecl 0x5632d93c7d70 <col:33, col:45> col:45 x 'Vector<ARPResponder::Entry> &&'
|-CXXMethodDecl 0x5632d93c8180 <line:148:5, col:70> col:23 assign 'Vector<ARPResponder::Entry> &(Vector::size_type, Vector<ARPResponder::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d93c7fc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d93c8040 <col:43, col:69> col:63 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-CXXMethodDecl 0x5632d93c82d8 <line:150:5, col:55> col:49 begin 'Vector<ARPResponder::Entry>::iterator ()'
| |-NoInlineAttr 0x5632d93c83b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c8410 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c8458 <line:151:5, col:53> col:49 end 'Vector<ARPResponder::Entry>::iterator ()'
| |-NoInlineAttr 0x5632d93c8508 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c8560 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c8628 <line:152:5, col:63> col:55 used begin 'Vector<ARPResponder::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5632d93c86d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c8730 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c8778 <line:153:5, col:61> col:55 used end 'Vector<ARPResponder::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5632d93c8828 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c8880 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c88c8 <line:154:5, col:64> col:55 cbegin 'Vector<ARPResponder::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5632d93c8978 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c89d0 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c8a18 <line:155:5, col:62> col:55 cend 'Vector<ARPResponder::Entry>::const_iterator () const'
| |-NoInlineAttr 0x5632d93c8ac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d93c8b20 <col:30> Inherited
|-CXXMethodDecl 0x5632d93c8b48 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d93c8bf8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d93c8ca8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5632d93c8e68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<ARPResponder::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d93c8d58 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d93c8dd0 <col:37, col:63> col:57 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-CXXMethodDecl 0x5632d93c8fb8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5632d93c8f28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d93c9168 <line:163:5, col:65> col:43 operator[] 'ARPResponder::Entry &(Vector::size_type)'
| |-ParmVarDecl 0x5632d93c9070 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d93c9220 <col:20>
| `-OptimizeNoneAttr 0x5632d93c9278 <col:30>
|-CXXMethodDecl 0x5632d93c9398 <line:164:5, col:73> col:49 operator[] 'const ARPResponder::Entry &(Vector::size_type) const'
| |-ParmVarDecl 0x5632d93c92a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d93c9450 <col:20>
| `-OptimizeNoneAttr 0x5632d93c94a8 <col:30>
|-CXXMethodDecl 0x5632d93c9560 <line:165:5, col:29> col:15 at 'ARPResponder::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d93c94d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d93c96a8 <line:166:5, col:37> col:21 at 'const ARPResponder::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d93c9618 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d93c97d8 <line:167:5, col:21> col:15 front 'ARPResponder::Entry &()' inline
|-CXXMethodDecl 0x5632d93c9908 <line:168:5, col:29> col:21 front 'const ARPResponder::Entry &() const' inline
|-CXXMethodDecl 0x5632d93c99d8 <line:169:5, col:20> col:15 back 'ARPResponder::Entry &()' inline
|-CXXMethodDecl 0x5632d93c9aa8 <line:170:5, col:28> col:21 back 'const ARPResponder::Entry &() const' inline
|-CXXMethodDecl 0x5632d93c9be8 <line:172:5, col:39> col:15 unchecked_at 'ARPResponder::Entry &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d93c9b58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d93c9d30 <line:173:5, col:47> col:21 unchecked_at 'const ARPResponder::Entry &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d93c9ca0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d93c9e78 <line:174:5, col:59> col:15 at_u 'ARPResponder::Entry &(Vector::size_type)' inline
| |-ParmVarDecl 0x5632d93c9de8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d93c9f30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5632d93ca030 <line:175:5, col:71> col:21 at_u 'const ARPResponder::Entry &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5632d93c9fa0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d93ca0e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5632d93ca1a8 <line:177:5, col:20> col:15 data 'ARPResponder::Entry *()' inline
|-CXXMethodDecl 0x5632d93ca2a8 <line:178:5, col:28> col:21 data 'const ARPResponder::Entry *() const' inline
|-CXXMethodDecl 0x5632d93ca458 <line:180:5, col:48> col:17 push_back 'void (Vector<ARPResponder::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d93ca368 <col:27, col:47> col:47 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-FunctionTemplateDecl 0x5632d93cac48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5632d93ca510 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<ARPResponder::Entry>':'fast_argument<ARPResponder::Entry, true>'
| `-CXXMethodDecl 0x5632d93caba8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (ARPResponder::Entry &&)' inline
|   `-ParmVarDecl 0x5632d93caaa8 <col:58, col:62> col:62 v 'ARPResponder::Entry &&'
|-CXXMethodDecl 0x5632d93cad28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d93cae78 <line:186:5, col:49> col:17 push_front 'void (Vector<ARPResponder::Entry>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d93cade8 <col:28, col:48> col:48 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-CXXMethodDecl 0x5632d93caf30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5632d93cb178 <line:189:5, col:62> col:21 insert 'Vector<ARPResponder::Entry>::iterator (Vector<ARPResponder::Entry>::iterator, Vector<ARPResponder::Entry>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d93caff0 <col:28, col:37> col:37 it 'Vector<ARPResponder::Entry>::iterator':'ARPResponder::Entry *'
| `-ParmVarDecl 0x5632d93cb068 <col:41, col:61> col:61 v 'Vector<ARPResponder::Entry>::value_argument_type':'const ARPResponder::Entry &'
|-CXXMethodDecl 0x5632d93cb338 <line:190:5, col:38> col:21 erase 'Vector<ARPResponder::Entry>::iterator (Vector<ARPResponder::Entry>::iterator)' inline
| `-ParmVarDecl 0x5632d93cb248 <col:27, col:36> col:36 it 'Vector<ARPResponder::Entry>::iterator':'ARPResponder::Entry *'
|-CXXMethodDecl 0x5632d93cb588 <line:191:5, col:49> col:21 erase 'Vector<ARPResponder::Entry>::iterator (Vector<ARPResponder::Entry>::iterator, Vector<ARPResponder::Entry>::iterator)' inline
| |-ParmVarDecl 0x5632d93cb400 <col:27, col:36> col:36 a 'Vector<ARPResponder::Entry>::iterator':'ARPResponder::Entry *'
| `-ParmVarDecl 0x5632d93cb478 <col:39, col:48> col:48 b 'Vector<ARPResponder::Entry>::iterator':'ARPResponder::Entry *'
|-CXXMethodDecl 0x5632d93cb648 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5632d93cb8a8 <line:195:5, col:34> col:17 swap 'void (Vector<ARPResponder::Entry> &)' inline
| `-ParmVarDecl 0x5632d93cb7b0 <col:22, col:33> col:33 x 'Vector<ARPResponder::Entry> &'
`-CXXDestructorDecl 0x5632d93cb978 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5632d94aef98 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9313a60 <../elements/ethernet/arpresponder.hh:77:1, line:132:1> line:77:7 class ARPResponder definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5632d9313bb8 <col:1, col:7> col:7 implicit referenced class ARPResponder
|-AccessSpecDecl 0x5632d9313c48 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x5632d9313cd0 <line:79:5, col:18> col:5 ARPResponder 'void ()'
|-CXXDestructorDecl 0x5632d9313dc0 <line:80:5, col:19> col:5 ~ARPResponder 'void ()' noexcept-unevaluated 0x5632d9313dc0
| `-Overrides: [ 0x5632d9393eb8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5632d9313ef0 <line:82:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5632d9395318 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5632d93cd3b0 <col:36, col:61>
|   `-ReturnStmt 0x5632d93cd3a0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5632d93cd388 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5632d93cd360 <col:45> 'const char [13]' lvalue "ARPResponder"
|-CXXMethodDecl 0x5632d9313fb8 <line:83:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5632d93953e0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5632d93cd410 <col:36, col:58>
|   `-ReturnStmt 0x5632d93cd400 <col:38, col:45>
|     `-ImplicitCastExpr 0x5632d93cd3e8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5632d93cd3c8 <col:45> 'const char []' lvalue Var 0x5632d9395718 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5632d9314080 <line:84:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5632d93957a8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5632d93cd470 <col:36, col:62>
|   `-ReturnStmt 0x5632d93cd460 <col:38, col:45>
|     `-ImplicitCastExpr 0x5632d93cd448 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5632d93cd428 <col:45> 'const char []' lvalue Var 0x5632d9395b10 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x5632d9314350 <line:86:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5632d9396bb0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5632d9314200 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5632d9314278 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9314420 <line:87:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5632d9399600 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5632d93cd4a8 <col:39, col:54>
|   `-ReturnStmt 0x5632d93cd498 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5632d93cd488 <col:48> 'bool' true
|-CXXMethodDecl 0x5632d93144e0 <line:88:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5632d9396c80 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5632d9314620 <line:90:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5632d93944f8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5632d9314590 <col:27, col:34> col:35 'Packet *'
|-CXXMethodDecl 0x5632d9314c78 <line:92:5, line:96:25> line:92:20 make_response 'Packet *(const uint8_t *, const uint8_t *, const uint8_t *, const uint8_t *, const Packet *)' static
| |-ParmVarDecl 0x5632d93147e0 <col:34, col:60> col:48 target_eth 'const uint8_t *':'const uint8_t *'
| |-ParmVarDecl 0x5632d9314920 <line:93:6, col:31> col:20 target_ip 'const uint8_t *':'const uint8_t *'
| |-ParmVarDecl 0x5632d93149e8 <line:94:6, col:29> col:20 src_eth 'const uint8_t *':'const uint8_t *'
| |-ParmVarDecl 0x5632d9314ab0 <line:95:6, col:28> col:20 src_ip 'const uint8_t *':'const uint8_t *'
| `-ParmVarDecl 0x5632d9314b28 <line:96:6, col:24> col:20 p 'const Packet *' cinit
|   `-ImplicitCastExpr 0x5632d93cd348 <col:24> 'const Packet *' <NullToPointer>
|     `-IntegerLiteral 0x5632d93cd328 <col:24> 'int' 0
|-CXXMethodDecl 0x5632d9314e18 <line:98:5, line:104:5> line:98:25 used lookup 'const EtherAddress *(IPAddress) const'
| |-ParmVarDecl 0x5632d9314d50 <col:32, col:42> col:42 used addr 'IPAddress'
| `-CompoundStmt 0x5632d93ce028 <col:54, line:104:5>
|   |-DeclStmt 0x5632d93cd758 <line:99:2, col:46>
|   | `-VarDecl 0x5632d93cd5d0 <col:2, col:45> col:32 used end 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' cinit
|   |   `-CXXMemberCallExpr 0x5632d93cd708 <col:38, col:45> 'Vector<ARPResponder::Entry>::const_iterator':'const ARPResponder::Entry *'
|   |     `-MemberExpr 0x5632d93cd6d8 <col:38, col:41> '<bound member function type>' .end 0x5632d93c8778
|   |       `-MemberExpr 0x5632d93cd648 <col:38> 'const Vector<ARPResponder::Entry>':'const Vector<ARPResponder::Entry>' lvalue ->_v 0x5632d93cba60
|   |         `-CXXThisExpr 0x5632d93cd638 <col:38> 'const ARPResponder *' implicit this
|   |-ForStmt 0x5632d93cdfa8 <line:100:2, line:102:15>
|   | |-DeclStmt 0x5632d93cd9d8 <line:100:7, col:52>
|   | | `-VarDecl 0x5632d93cd880 <col:7, col:51> col:37 used it 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' cinit
|   | |   `-CXXMemberCallExpr 0x5632d93cd9b8 <col:42, col:51> 'Vector<ARPResponder::Entry>::const_iterator':'const ARPResponder::Entry *'
|   | |     `-MemberExpr 0x5632d93cd988 <col:42, col:45> '<bound member function type>' .begin 0x5632d93c8628
|   | |       `-MemberExpr 0x5632d93cd8f8 <col:42> 'const Vector<ARPResponder::Entry>':'const Vector<ARPResponder::Entry>' lvalue ->_v 0x5632d93cba60
|   | |         `-CXXThisExpr 0x5632d93cd8e8 <col:42> 'const ARPResponder *' implicit this
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x5632d93cda60 <col:54, col:60> 'bool' '!='
|   | | |-ImplicitCastExpr 0x5632d93cda30 <col:54> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x5632d93cd9f0 <col:54> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd880 'it' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   | | `-ImplicitCastExpr 0x5632d93cda48 <col:60> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x5632d93cda10 <col:60> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd5d0 'end' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   | |-UnaryOperator 0x5632d93cdaa0 <col:65, col:67> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue prefix '++'
|   | | `-DeclRefExpr 0x5632d93cda80 <col:67> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd880 'it' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   | `-IfStmt 0x5632d93cdf90 <line:101:6, line:102:15>
|   |   |-ExprWithCleanups 0x5632d93cdee8 <line:101:10, col:35> 'bool'
|   |   | `-CXXOperatorCallExpr 0x5632d93cdeb0 <col:10, col:35> 'bool'
|   |   |   |-ImplicitCastExpr 0x5632d93cde98 <col:28> 'bool (*)(IPAddress, IPAddress)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x5632d93cde48 <col:28> 'bool (IPAddress, IPAddress)' lvalue Function 0x5632d919a3d8 'operator==' 'bool (IPAddress, IPAddress)'
|   |   |   |-CXXConstructExpr 0x5632d93cdde8 <col:10, col:26> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|   |   |   | `-MaterializeTemporaryExpr 0x5632d93cddd0 <col:10, col:26> 'IPAddress' xvalue
|   |   |   |   `-ParenExpr 0x5632d93cdd48 <col:10, col:26> 'IPAddress'
|   |   |   |     `-CXXOperatorCallExpr 0x5632d93cdd10 <col:11, col:22> 'IPAddress'
|   |   |   |       |-ImplicitCastExpr 0x5632d93cdcf8 <col:16> 'IPAddress (*)(IPAddress, IPAddress)' <FunctionToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x5632d93cdcb0 <col:16> 'IPAddress (IPAddress, IPAddress)' lvalue Function 0x5632d919f818 'operator&' 'IPAddress (IPAddress, IPAddress)'
|   |   |   |       |-CXXConstructExpr 0x5632d93cdc50 <col:11> 'IPAddress' 'void (const IPAddress &) noexcept'
|   |   |   |       | `-ImplicitCastExpr 0x5632d93cdb40 <col:11> 'const IPAddress' lvalue <NoOp>
|   |   |   |       |   `-DeclRefExpr 0x5632d93cdab8 <col:11> 'IPAddress' lvalue ParmVar 0x5632d9314d50 'addr' 'IPAddress'
|   |   |   |       `-CXXConstructExpr 0x5632d93cdc80 <col:18, col:22> 'IPAddress' 'void (const IPAddress &) noexcept'
|   |   |   |         `-MemberExpr 0x5632d93cdb10 <col:18, col:22> 'const IPAddress' lvalue ->mask 0x5632d9315308
|   |   |   |           `-ImplicitCastExpr 0x5632d93cdaf8 <col:18> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' <LValueToRValue>
|   |   |   |             `-DeclRefExpr 0x5632d93cdad8 <col:18> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd880 'it' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   |   |   `-CXXConstructExpr 0x5632d93cde18 <col:31, col:35> 'IPAddress' 'void (const IPAddress &) noexcept'
|   |   |     `-MemberExpr 0x5632d93cdda0 <col:31, col:35> 'const IPAddress' lvalue ->dst 0x5632d93152a8
|   |   |       `-ImplicitCastExpr 0x5632d93cdd88 <col:31> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x5632d93cdd68 <col:31> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd880 'it' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   |   `-ReturnStmt 0x5632d93cdf80 <line:102:3, col:15>
|   |     `-UnaryOperator 0x5632d93cdf68 <col:10, col:15> 'const EtherAddress *' prefix '&' cannot overflow
|   |       `-MemberExpr 0x5632d93cdf38 <col:11, col:15> 'const EtherAddress' lvalue ->ena 0x5632d9315368
|   |         `-ImplicitCastExpr 0x5632d93cdf20 <col:11> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5632d93cdf00 <col:11> 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *' lvalue Var 0x5632d93cd880 'it' 'Vector<Entry>::const_iterator':'const ARPResponder::Entry *'
|   `-ReturnStmt 0x5632d93ce018 <line:103:2, col:9>
|     `-ImplicitCastExpr 0x5632d93ce000 <col:9> 'const EtherAddress *' <NullToPointer>
|       `-IntegerLiteral 0x5632d93cdfe0 <col:9> 'int' 0
|-CXXMethodDecl 0x5632d9315018 <line:106:5, line:112:5> line:106:10 lookup 'bool (IPAddress, EtherAddress &) const'
| |-ParmVarDecl 0x5632d9314ed0 <col:17, col:27> col:27 used addr 'IPAddress'
| |-ParmVarDecl 0x5632d9314f48 <col:33, col:47> col:47 used result 'EtherAddress &'
| `-CompoundStmt 0x5632d93d63e0 <col:61, line:112:5>
|   `-IfStmt 0x5632d93d6398 <line:107:2, line:111:13> has_var has_else
|     |-DeclStmt 0x5632d93d63c8 <line:107:6, col:41>
|     | `-VarDecl 0x5632d93ce060 <col:6, col:41> col:26 used x 'const EtherAddress *' cinit
|     |   `-CXXMemberCallExpr 0x5632d93d5580 <col:30, col:41> 'const EtherAddress *'
|     |     |-MemberExpr 0x5632d93d5550 <col:30> '<bound member function type>' ->lookup 0x5632d9314e18
|     |     | `-CXXThisExpr 0x5632d93d5540 <col:30> 'const ARPResponder *' implicit this
|     |     `-CXXConstructExpr 0x5632d93d55c0 <col:37> 'IPAddress' 'void (const IPAddress &) noexcept'
|     |       `-ImplicitCastExpr 0x5632d93d55a8 <col:37> 'const IPAddress' lvalue <NoOp>
|     |         `-DeclRefExpr 0x5632d93d5520 <col:37> 'IPAddress' lvalue ParmVar 0x5632d9314ed0 'addr' 'IPAddress'
|     |-ImplicitCastExpr 0x5632d93d5628 <col:26> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5632d93d5610 <col:26> 'const EtherAddress *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5632d93d55f0 <col:26> 'const EtherAddress *' lvalue Var 0x5632d93ce060 'x' 'const EtherAddress *'
|     |-CompoundStmt 0x5632d93d6358 <col:44, line:110:2>
|     | |-CXXOperatorCallExpr 0x5632d93d6300 <line:108:6, col:16> 'EtherAddress' lvalue
|     | | |-ImplicitCastExpr 0x5632d93d62e8 <col:13> 'EtherAddress &(*)(const EtherAddress &) noexcept' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x5632d93d5ca8 <col:13> 'EtherAddress &(const EtherAddress &) noexcept' lvalue CXXMethod 0x5632d93d56b0 'operator=' 'EtherAddress &(const EtherAddress &) noexcept'
|     | | |-DeclRefExpr 0x5632d93d5640 <col:6> 'EtherAddress' lvalue ParmVar 0x5632d9314f48 'result' 'EtherAddress &'
|     | | `-UnaryOperator 0x5632d93d5698 <col:15, col:16> 'const EtherAddress' lvalue prefix '*' cannot overflow
|     | |   `-ImplicitCastExpr 0x5632d93d5680 <col:16> 'const EtherAddress *' <LValueToRValue>
|     | |     `-DeclRefExpr 0x5632d93d5660 <col:16> 'const EtherAddress *' lvalue Var 0x5632d93ce060 'x' 'const EtherAddress *'
|     | `-ReturnStmt 0x5632d93d6348 <line:109:6, col:13>
|     |   `-CXXBoolLiteralExpr 0x5632d93d6338 <col:13> 'bool' true
|     `-ReturnStmt 0x5632d93d6388 <line:111:6, col:13>
|       `-CXXBoolLiteralExpr 0x5632d93d6378 <col:13> 'bool' false
|-AccessSpecDecl 0x5632d93150c8 <line:114:3, col:10> col:3 private
|-CXXRecordDecl 0x5632d93150f0 <line:116:5, line:120:5> line:116:12 referenced struct Entry definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable can_const_default_init
| | |-DefaultConstructor exists non_trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5632d9315208 <col:5, col:12> col:12 implicit struct Entry
| |-FieldDecl 0x5632d93152a8 <line:117:2, col:12> col:12 referenced dst 'IPAddress'
| |-FieldDecl 0x5632d9315308 <line:118:2, col:12> col:12 referenced mask 'IPAddress'
| `-FieldDecl 0x5632d9315368 <line:119:2, col:15> col:15 referenced ena 'EtherAddress'
|-FieldDecl 0x5632d93cba60 <line:121:5, col:19> col:19 referenced _v 'Vector<ARPResponder::Entry>':'Vector<ARPResponder::Entry>'
|-CXXMethodDecl 0x5632d93cbc70 <line:123:5, col:75> col:16 entry_compare 'int (const void *, const void *, void *)' static
| |-ParmVarDecl 0x5632d93cbac8 <col:30, col:42> col:42 a 'const void *'
| |-ParmVarDecl 0x5632d93cbb48 <col:45, col:57> col:57 b 'const void *'
| `-ParmVarDecl 0x5632d93cbbc8 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x5632d93cc030 <line:124:5, col:70> col:9 add 'int (Vector<ARPResponder::Entry> &, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5632d93cbe10 <col:13, col:28> col:28 v 'Vector<ARPResponder::Entry> &'
| |-ParmVarDecl 0x5632d93cbe88 <col:31, col:45> col:45 arg 'const String &'
| `-ParmVarDecl 0x5632d93cbf00 <col:50, col:64> col:64 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93cc3e8 <line:125:5, col:74> col:17 normalize 'void (Vector<ARPResponder::Entry> &, bool, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93cc1d0 <col:27, col:42> col:42 v 'Vector<ARPResponder::Entry> &'
| |-ParmVarDecl 0x5632d93cc248 <col:45, col:50> col:50 warn 'bool'
| `-ParmVarDecl 0x5632d93cc2c0 <col:56, col:70> col:70 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93cc5c8 <line:127:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5632d93cc4b0 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x5632d93cc530 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x5632d93cc928 <line:128:5, col:100> col:16 lookup_handler 'int (int, String &, Element *, const Handler *, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93cc690 <col:31, col:35> col:35 op 'int'
| |-ParmVarDecl 0x5632d93cc708 <col:39, col:47> col:47 str 'String &'
| |-ParmVarDecl 0x5632d93cc780 <col:52, col:61> col:61 e 'Element *'
| |-ParmVarDecl 0x5632d93cc7f8 <col:64, col:79> col:79 h 'const Handler *'
| `-ParmVarDecl 0x5632d93cc870 <col:82, col:96> col:96 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93ccc20 <line:129:5, col:83> col:16 add_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93cca00 <col:28, col:42> col:42 s 'const String &'
| |-ParmVarDecl 0x5632d93cca78 <col:45, col:54> col:54 e 'Element *'
| |-ParmVarDecl 0x5632d93ccaf8 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x5632d93ccb70 <col:65, col:79> col:79 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d93ccf10 <line:130:5, col:86> col:16 remove_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5632d93cccf0 <col:31, col:45> col:45 s 'const String &'
| |-ParmVarDecl 0x5632d93ccd68 <col:48, col:57> col:57 e 'Element *'
| |-ParmVarDecl 0x5632d93ccde8 <col:60, col:65> col:66 'void *'
| `-ParmVarDecl 0x5632d93cce60 <col:68, col:82> col:82 errh 'ErrorHandler *'
|-CXXConstructorDecl 0x5632d93ccff8 <line:77:7> col:7 implicit ARPResponder 'void (const ARPResponder &)' inline default_delete noexcept-unevaluated 0x5632d93ccff8
| `-ParmVarDecl 0x5632d93cd108 <col:7> col:7 'const ARPResponder &'
`-CXXMethodDecl 0x5632d93cd1a8 <col:7> col:7 implicit operator= 'ARPResponder &(const ARPResponder &)' inline default_delete noexcept-unevaluated 0x5632d93cd1a8
  `-ParmVarDecl 0x5632d93cd2b8 <col:7> col:7 'const ARPResponder &'

Layout: <CGRecordLayout
  LLVMType:%class.ARPResponder = type { %class.Element.base, %class.Vector }
  NonVirtualBaseLLVMType:%class.ARPResponder = type { %class.Element.base, %class.Vector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9167a80 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5632d9167b98 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5632d9167c38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5632d9167c98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5632d9167cf8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5632d9167da8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d91680b0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d91681c8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5632d9168270 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5632d91682d8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5632d9168368 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5632d916e400 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5632d916e838 <col:12>
|-CXXConstructorDecl 0x5632d916e508 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d916e618 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5632d9168270 'data' 'const char *'
| | `-ImplicitCastExpr 0x5632d9170dc0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5632d9170d90 <col:12> 'const char *const' lvalue .data 0x5632d9168270
| |     `-DeclRefExpr 0x5632d9170d70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5632d91682d8 'length' 'int'
| | `-ImplicitCastExpr 0x5632d9170e50 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5632d9170e20 <col:12> 'const int' lvalue .length 0x5632d91682d8
| |     `-DeclRefExpr 0x5632d9170e00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5632d9168368 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5632d9170ee0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5632d9170eb0 <col:12> 'String::memo_t *const' lvalue .memo 0x5632d9168368
| |     `-DeclRefExpr 0x5632d9170e90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| `-CompoundStmt 0x5632d9170f38 <col:12>
|-CXXConstructorDecl 0x5632d916e6b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d916e6b8
| `-ParmVarDecl 0x5632d916e7c8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5632d9173d20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5632d917f738 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d917f848 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5632d917fd60 <col:12>
|   |-BinaryOperator 0x5632d917fb78 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5632d917fb30 <col:12> 'const char *' lvalue ->data 0x5632d9168270
|   | | `-CXXThisExpr 0x5632d917fb20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5632d917fb60 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5632d917faf0 <col:12> 'const char *const' lvalue .data 0x5632d9168270
|   |     `-DeclRefExpr 0x5632d917fad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5632d917fc40 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5632d917fbf8 <col:12> 'int' lvalue ->length 0x5632d91682d8
|   | | `-CXXThisExpr 0x5632d917fbe8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5632d917fc28 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5632d917fbb8 <col:12> 'const int' lvalue .length 0x5632d91682d8
|   |     `-DeclRefExpr 0x5632d917fb98 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5632d917fd08 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5632d917fcc0 <col:12> 'String::memo_t *' lvalue ->memo 0x5632d9168368
|   | | `-CXXThisExpr 0x5632d917fcb0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5632d917fcf0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5632d917fc80 <col:12> 'String::memo_t *const' lvalue .memo 0x5632d9168368
|   |     `-DeclRefExpr 0x5632d917fc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5632d917fd50 <col:12>
|     `-UnaryOperator 0x5632d917fd38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5632d917fd28 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5632d917f8b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d917f8b8
  `-ParmVarDecl 0x5632d917f9c8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d915eff0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5632d915f108 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5632d915f198 <col:16, col:22> col:16 public
|-TypedefDecl 0x5632d915f1d8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5632d8e31dc0 'const char *'
|   `-QualType 0x5632d8e31311 'const char' const
|     `-BuiltinType 0x5632d8e31310 'char'
|-TypedefDecl 0x5632d915f260 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5632d915f230 'String::const_iterator' sugar
|   |-Typedef 0x5632d915f1d8 'const_iterator'
|   `-PointerType 0x5632d8e31dc0 'const char *'
|     `-QualType 0x5632d8e31311 'const char' const
|       `-BuiltinType 0x5632d8e31310 'char'
|-TypedefDecl 0x5632d915f3d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5632d915f340 'int (String::*)() const'
|   |-RecordType 0x5632d915f080 'String'
|   | `-CXXRecord 0x5632d915eff0 'String'
|   `-ParenType 0x5632d915f2e0 'int () const' sugar
|     `-FunctionProtoType 0x5632d9132e70 'int () const' const cdecl
|       `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d915f438 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5632d8f87830 'int64_t' sugar
|   |-Typedef 0x5632d8e9a2d0 'int64_t'
|   `-TypedefType 0x5632d8e734d0 '__int64_t' sugar
|     |-Typedef 0x5632d8e730a8 '__int64_t'
|     `-BuiltinType 0x5632d8e31390 'long'
|-TypedefDecl 0x5632d915f4a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5632d8f87750 'uint64_t' sugar
|   |-Typedef 0x5632d8e9a470 'uint64_t'
|   `-TypedefType 0x5632d8e73560 '__uint64_t' sugar
|     |-Typedef 0x5632d8e73118 '__uint64_t'
|     `-BuiltinType 0x5632d8e31430 'unsigned long'
|-TypedefDecl 0x5632d915f530 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5632d915f500 'String::intmax_t' sugar
|   |-Typedef 0x5632d915f438 'intmax_t'
|   `-TypedefType 0x5632d8f87830 'int64_t' sugar
|     |-Typedef 0x5632d8e9a2d0 'int64_t'
|     `-TypedefType 0x5632d8e734d0 '__int64_t' sugar
|       |-Typedef 0x5632d8e730a8 '__int64_t'
|       `-BuiltinType 0x5632d8e31390 'long'
|-TypedefDecl 0x5632d915f5c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5632d915f590 'String::uintmax_t' sugar
|   |-Typedef 0x5632d915f4a0 'uintmax_t'
|   `-TypedefType 0x5632d8f87750 'uint64_t' sugar
|     |-Typedef 0x5632d8e9a470 'uint64_t'
|     `-TypedefType 0x5632d8e73560 '__uint64_t' sugar
|       |-Typedef 0x5632d8e73118 '__uint64_t'
|       `-BuiltinType 0x5632d8e31430 'unsigned long'
|-CXXConstructorDecl 0x5632d915f680 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5632d915f828 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5632d915f768 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5632d915f9d8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5632d915f918 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5632d915fb30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5632d915faa0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5632d915fd48 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5632d915fbf8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5632d915fc78 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5632d915ff68 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5632d915fe18 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5632d915fe98 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5632d9160188 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5632d9160038 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5632d91600b8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5632d91603a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5632d9160258 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5632d91602d8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5632d9160538 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5632d9160470 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5632d91606b8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5632d91605f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5632d9160848 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5632d9160780 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5632d91609a0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5632d9160910 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5632d9160af8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5632d9160a68 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5632d9160c50 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5632d9160bc0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5632d9160dd8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5632d9160d18 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5632d9160f68 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5632d9160ea0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5632d91610f8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5632d9161030 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5632d9161288 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5632d91611c0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5632d9161380 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5632d91614a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5632d9161628 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5632d9161560 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5632d9161778 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5632d91616e8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5632d9161830 <col:63> "" ""
|-CXXMethodDecl 0x5632d9161978 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5632d91618b8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5632d9161b88 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5632d9161a38 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5632d9161ab8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5632d9161da8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5632d9161c50 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5632d9161cd0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5632d9162088 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5632d9161e68 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5632d9161ee8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5632d916ded0 <col:55> 'int' 10
| `-ParmVarDecl 0x5632d9161f60 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d916def0 <col:76> 'bool' true
|-CXXMethodDecl 0x5632d9162368 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5632d9162150 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5632d91621d0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5632d916df00 <col:56> 'int' 10
| `-ParmVarDecl 0x5632d9162248 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d916df20 <col:77> 'bool' true
|-CXXMethodDecl 0x5632d9162470 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5632d9162538 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5632d9162600 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5632d91626a0 <col:20>
| `-OptimizeNoneAttr 0x5632d91626f8 <col:30>
|-CXXConversionDecl 0x5632d91627e8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5632d91628b8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5632d9162978 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5632d9162a68 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5632d9162b28 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5632d9162ca8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5632d9162be0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5632d9162df8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5632d9162d68 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5632d9162ee8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5632d9162fa8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5632d91631f8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5632d9163060 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5632d91630e0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5632d9163458 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5632d91632c0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5632d9163340 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5632d9163528 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d9163738 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5632d91635e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5632d9163660 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5632d9163958 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5632d9163800 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5632d9163880 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5632d9163ae8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5632d9163a20 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5632d9163bd8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5632d9163d48 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5632d9163c88 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5632d9163f58 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5632d9163e08 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5632d9163e88 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5632d9164170 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5632d9164018 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5632d9164090 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5632d9164300 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5632d9164230 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5632d9164520 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5632d91643c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5632d9164440 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5632d9164670 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5632d91645e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5632d9164848 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5632d9164730 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5632d91647b0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5632d9164998 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5632d9164908 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5632d9164bb0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5632d9164a50 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5632d9164ad0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5632d916df30 <col:39> 'int' 0
|-CXXMethodDecl 0x5632d9164dd0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5632d9164c70 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5632d9164cf0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5632d916df50 <col:48> 'int' 0
|-CXXMethodDecl 0x5632d9164fb0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5632d9164e90 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5632d9164f10 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5632d916df70 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5632d9165080 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5632d9165140 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5632d9165200 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5632d91652c0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5632d9165380 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5632d9165528 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5632d9165430 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5632d91656a8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5632d91655e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5632d9165880 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5632d9165768 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5632d91659f8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5632d9165938 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5632d9165b40 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5632d9165ab0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5632d9165c90 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5632d9165c00 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5632d9165e68 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5632d9165d50 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5632d9165dd0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5632d9166048 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5632d9165f30 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5632d9165fb0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5632d9166198 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5632d9166108 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5632d91663a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5632d9166258 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5632d91662d8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5632d9166508 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5632d9166470 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5632d9166660 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5632d91665c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5632d9166708 <col:57> "" ""
|-CXXMethodDecl 0x5632d9166818 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5632d9166788 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5632d9166968 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5632d91668d8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5632d9166ae8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5632d9166a20 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5632d9166bb0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5632d9166c70 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5632d9166d30 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5632d9166dd0 <col:49> "" ""
|-CXXMethodDecl 0x5632d9166e60 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5632d9166f20 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5632d9167010 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5632d91670d8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5632d9167198 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5632d9167258 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5632d9167350 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5632d9167418 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5632d91674e0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5632d91676b8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5632d9167598 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5632d9167618 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5632d91678e0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5632d9167780 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5632d9167800 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5632d91679f0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5632d9167a58 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5632d9167a80 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5632d9167b98 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5632d9167c38 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5632d9167c98 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5632d9167cf8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5632d9167da8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5632d9167e10 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5632d9168048 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5632d9168098 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9168028 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5632d9167f38 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5632d9167ee0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5632d9167f20 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5632d9167f00 <col:32> 'int' 8
|-CXXRecordDecl 0x5632d91680b0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5632d91681c8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5632d9168270 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5632d91682d8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5632d9168368 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5632d916e400 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5632d916e838 <col:12>
| |-CXXConstructorDecl 0x5632d916e508 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5632d916e618 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d9168270 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5632d9170dc0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5632d9170d90 <col:12> 'const char *const' lvalue .data 0x5632d9168270
| | |     `-DeclRefExpr 0x5632d9170d70 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d91682d8 'length' 'int'
| | | `-ImplicitCastExpr 0x5632d9170e50 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5632d9170e20 <col:12> 'const int' lvalue .length 0x5632d91682d8
| | |     `-DeclRefExpr 0x5632d9170e00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d9168368 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5632d9170ee0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5632d9170eb0 <col:12> 'String::memo_t *const' lvalue .memo 0x5632d9168368
| | |     `-DeclRefExpr 0x5632d9170e90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d916e618 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5632d9170f38 <col:12>
| |-CXXConstructorDecl 0x5632d916e6b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d916e6b8
| | `-ParmVarDecl 0x5632d916e7c8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5632d9173d20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5632d917f738 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5632d917f848 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5632d917fd60 <col:12>
| |   |-BinaryOperator 0x5632d917fb78 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5632d917fb30 <col:12> 'const char *' lvalue ->data 0x5632d9168270
| |   | | `-CXXThisExpr 0x5632d917fb20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5632d917fb60 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5632d917faf0 <col:12> 'const char *const' lvalue .data 0x5632d9168270
| |   |     `-DeclRefExpr 0x5632d917fad0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5632d917fc40 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5632d917fbf8 <col:12> 'int' lvalue ->length 0x5632d91682d8
| |   | | `-CXXThisExpr 0x5632d917fbe8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5632d917fc28 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5632d917fbb8 <col:12> 'const int' lvalue .length 0x5632d91682d8
| |   |     `-DeclRefExpr 0x5632d917fb98 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5632d917fd08 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5632d917fcc0 <col:12> 'String::memo_t *' lvalue ->memo 0x5632d9168368
| |   | | `-CXXThisExpr 0x5632d917fcb0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5632d917fcf0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5632d917fc80 <col:12> 'String::memo_t *const' lvalue .memo 0x5632d9168368
| |   |     `-DeclRefExpr 0x5632d917fc60 <col:12> 'const String::rep_t' lvalue ParmVar 0x5632d917f848 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5632d917fd50 <col:12>
| |     `-UnaryOperator 0x5632d917fd38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5632d917fd28 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5632d917f8b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d917f8b8
|   `-ParmVarDecl 0x5632d917f9c8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5632d91683e0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5632d9168628 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5632d9168448 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5632d91684c8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5632d9168540 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5632d916e3c0 <col:79, line:261:5>
|   |-BinaryOperator 0x5632d916e038 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5632d916dfd0 <col:2, col:5> 'const char *' lvalue .data 0x5632d9168270
|   | | `-MemberExpr 0x5632d916dfa0 <col:2> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|   | |   `-CXXThisExpr 0x5632d916df90 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5632d916e020 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5632d916e000 <col:12> 'const char *' lvalue ParmVar 0x5632d9168448 'data' 'const char *'
|   |-BinaryOperator 0x5632d916e100 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5632d916e098 <col:2, col:5> 'int' lvalue .length 0x5632d91682d8
|   | | `-MemberExpr 0x5632d916e068 <col:2> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|   | |   `-CXXThisExpr 0x5632d916e058 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5632d916e0e8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5632d916e0c8 <col:14> 'int' lvalue ParmVar 0x5632d91684c8 'length' 'int'
|   `-IfStmt 0x5632d916e3a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5632d916e220 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5632d916e208 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5632d916e1e8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5632d916e1c8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5632d916e160 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5632d9168368
|     |       | `-MemberExpr 0x5632d916e130 <col:7> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|     |       |   `-CXXThisExpr 0x5632d916e120 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5632d916e1b0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5632d916e190 <col:17> 'String::memo_t *' lvalue ParmVar 0x5632d9168540 'memo' 'String::memo_t *'
|     `-CallExpr 0x5632d916e380 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5632d916e368 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5632d916e270 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5632d9157058 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5632d916e2d8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5632d9167c38
|         `-ImplicitCastExpr 0x5632d916e2c0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5632d916e2a0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5632d9168540 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5632d91688d8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5632d91686f8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5632d9168778 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5632d91687f0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5632d91683e0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5632d916e848 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5632d916e9d8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5632d916e940 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5632d916e8b0 <col:2> '<bound member function type>' ->assign_memo 0x5632d9168628
|     | `-ImplicitCastExpr 0x5632d916e978 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5632d916e8a0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5632d916e990 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5632d916e8e0 <col:14> 'const char *' lvalue ParmVar 0x5632d91686f8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5632d916e9a8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5632d916e900 <col:20> 'int' lvalue ParmVar 0x5632d9168778 'length' 'int'
|     `-ImplicitCastExpr 0x5632d916e9c0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5632d916e920 <col:28> 'String::memo_t *' lvalue ParmVar 0x5632d91687f0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5632d9168a68 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5632d91689a8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5632d916ec30 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5632d916ebb0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5632d916ea00 <col:2> '<bound member function type>' ->assign_memo 0x5632d9168628
|     | `-CXXThisExpr 0x5632d916e9f0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5632d916ebe8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5632d916ea80 <col:14, col:19> 'const char *' lvalue .data 0x5632d9168270
|     |   `-MemberExpr 0x5632d916ea50 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5632d91683e0
|     |     `-DeclRefExpr 0x5632d916ea30 <col:14> 'const String' lvalue ParmVar 0x5632d91689a8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5632d916ec00 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5632d916eb00 <col:25, col:30> 'int' lvalue .length 0x5632d91682d8
|     |   `-MemberExpr 0x5632d916ead0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5632d91683e0
|     |     `-DeclRefExpr 0x5632d916eab0 <col:25> 'const String' lvalue ParmVar 0x5632d91689a8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5632d916ec18 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5632d916eb80 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5632d9168368
|         `-MemberExpr 0x5632d916eb50 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5632d91683e0
|           `-DeclRefExpr 0x5632d916eb30 <col:38> 'const String' lvalue ParmVar 0x5632d91689a8 'x' 'const String &'
|-CXXMethodDecl 0x5632d9168b30 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5632d916f5f0 <col:31, line:278:5>
|   `-IfStmt 0x5632d916f5d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5632d916ecd0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5632d916ecb8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5632d916ec88 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5632d9168368
|     |     `-MemberExpr 0x5632d916ec58 <col:6> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|     |       `-CXXThisExpr 0x5632d916ec48 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5632d916f5b0 <col:15, line:277:2>
|       |-ParenExpr 0x5632d916f180 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5632d916f150 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5632d916ede0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5632d916edc8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5632d916edb0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5632d916ed70 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5632d9167c38
|       |   |       `-ImplicitCastExpr 0x5632d916ed58 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5632d916ed28 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5632d9168368
|       |   |           `-MemberExpr 0x5632d916ecf8 <col:27> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|       |   |             `-CXXThisExpr 0x5632d916ece8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5632d916ee40 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5632d916ee20 <col:54> 'int' 0
|       |   `-CallExpr 0x5632d916f0b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5632d916f098 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5632d916f018 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5632d916f0f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5632d916ef28 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5632d916f108 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5632d916ef58 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5632d916f120 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5632d916ef90 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5632d916f138 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5632d916f000 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5632d916efe8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5632d916efb0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5632d916f4d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5632d916f390 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5632d916f378 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5632d916f2f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5632d91584a0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5632d916f2c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5632d9167c38
|       | |   `-ImplicitCastExpr 0x5632d916f2a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5632d916f278 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5632d9168368
|       | |       `-MemberExpr 0x5632d916f248 <col:40> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|       | |         `-CXXThisExpr 0x5632d916f238 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5632d916f490 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5632d916f478 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5632d916f3b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5632d916d310 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5632d916f4b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5632d916f418 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5632d9168368
|       |       `-MemberExpr 0x5632d916f3e8 <col:15> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|       |         `-CXXThisExpr 0x5632d916f3d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5632d916f590 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5632d916f528 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5632d9168368
|         | `-MemberExpr 0x5632d916f4f8 <col:6> 'String::rep_t' lvalue ->_r 0x5632d91683e0
|         |   `-CXXThisExpr 0x5632d916f4e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5632d916f578 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5632d916f558 <col:16> 'int' 0
|-CXXMethodDecl 0x5632d9168dc8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5632d9168be8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5632d9168c68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5632d9168ce0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5632d9168ea0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5632d91690f0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5632d9168f58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5632d9168fd8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5632d9169050 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5632d91692d8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5632d91691c0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5632d9169240 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5632d91693d8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5632d916f6c8 <col:41, line:286:5>
|   `-ReturnStmt 0x5632d916f6b8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5632d916f688 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5632d916f650 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5632d916f638 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5632d916f618 <col:46> 'int' 1
|-CXXMethodDecl 0x5632d9169678 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5632d9169490 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5632d9169510 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5632d9169590 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5632d916d310 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5632d9169740 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5632d916d3e0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5632d916d5b0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5632d916d498 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5632d916d518 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5632d916d670 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5632d916d738 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5632d916d838 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5632d916d8b0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5632d916d928 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5632d916d990 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5632d916da90 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5632d916dae0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d916da70 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5632d916da50 <col:22> 'int' 14
|-CXXMethodDecl 0x5632d916dcf8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5632d916db10 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5632d916db90 <col:38> col:41 'int'
| `-ParmVarDecl 0x5632d916dc10 <col:43> col:46 'int'
|-FriendDecl 0x5632d916de00 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5632d916de90 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d94855b8 prev 0x5632d94174d8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5632d94856b0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5632d9485740 <col:22, col:28> col:22 public
|-EnumDecl 0x5632d9485768 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5632d9485888 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485868 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5632d9485850 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5632d9485830 <col:14> 'int' 999
| |-EnumConstantDecl 0x5632d9485930 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485910 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5632d94858f8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5632d94858d8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5632d94859c0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d94859a0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5632d9485980 <col:17> 'int' 0
| |-EnumConstantDecl 0x5632d9485a50 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485a30 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5632d9485a10 <col:13> 'int' 1
| |-EnumConstantDecl 0x5632d9485ae0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485ac0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5632d9485aa0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5632d9485b70 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485b50 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5632d9485b30 <col:13> 'int' 3
| |-EnumConstantDecl 0x5632d9485c00 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485be0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5632d9485bc0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5632d9485c90 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485c70 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5632d9485c50 <col:14> 'int' 5
| |-EnumConstantDecl 0x5632d9485d20 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5632d9485d00 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5632d9485ce0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5632d9485db0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5632d9485d90 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5632d9485d70 <col:13> 'int' 7
|-VarDecl 0x5632d9485e20 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5632d9485ea8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5632d9485f30 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5632d9485fb8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5632d9486040 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5632d94860c8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5632d9486150 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5632d94861d8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5632d9486260 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5632d94862e8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5632d9486370 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5632d9486470 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5632d948b7f8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5632d948bf88 <line:128:13> 'int' 0
| `-CompoundStmt 0x5632d948bff8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5632d9486560 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5632d948c008 <col:29, line:132:5>
|-CXXMethodDecl 0x5632d9486718 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5632d9486650 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d94867e0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5632d94868c8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5632d948c060 <col:44, line:161:5>
|   `-ReturnStmt 0x5632d948c050 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5632d948c038 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5632d948c018 <col:9> 'ErrorHandler *' lvalue Var 0x5632d948b858 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9486a08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5632d9486978 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d9486ad0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5632d948c0c0 <col:43, line:173:5>
|   `-ReturnStmt 0x5632d948c0b0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5632d948c098 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5632d948c078 <col:9> 'ErrorHandler *' lvalue Var 0x5632d948b8d0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5632d9486b88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5632d9486c08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5632d9486d18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5632d9486c88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5632d9486e68 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5632d9486dd8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5632d9486fc0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5632d9486f28 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487118 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5632d9487080 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487270 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5632d94871d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487480 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5632d9487328 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5632d94873a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487658 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5632d9487540 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5632d94875c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487878 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5632d9487718 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5632d9487798 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487a58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5632d9487938 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5632d94879b8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487c38 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5632d9487b18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5632d9487b98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5632d9487dc0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5632d9487cf8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5632d9487f90 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5632d9487e78 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5632d9487ef0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5632d948c318 <col:57, line:234:5>
|   `-ReturnStmt 0x5632d948c308 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5632d948c2f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5632d948c298 <col:9, col:41> 'int'
|         |-MemberExpr 0x5632d948c268 <col:9> '<bound member function type>' ->xmessage 0x5632d9487dc0
|         | `-CXXThisExpr 0x5632d948c258 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5632d948c2d8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5632d948c2c0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5632d948c238 <col:18, col:40> 'String' (CXXTemporary 0x5632d948c238)
|               `-CallExpr 0x5632d948c200 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5632d948c1e8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5632d948c160 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5632d9489f88 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5632d948c180 <col:31> 'const String' lvalue ParmVar 0x5632d9487ef0 'str' 'const String &'
|                 `-DeclRefExpr 0x5632d948c1a0 <col:36> 'const String' lvalue ParmVar 0x5632d9487e78 'anno' 'const String &'
|-CXXMethodDecl 0x5632d9488270 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5632d9488050 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5632d94880d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5632d9488148 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5632d948c5a8 <col:68, line:243:5>
|   `-ReturnStmt 0x5632d948c598 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5632d948c580 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5632d948c520 <col:9, col:41> 'int'
|         |-MemberExpr 0x5632d948c4f0 <col:9> '<bound member function type>' ->xmessage 0x5632d9487f90
|         | `-CXXThisExpr 0x5632d948c4e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5632d948c3b8 <col:18> 'const String' lvalue ParmVar 0x5632d9488050 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5632d948c568 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5632d948c550 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5632d948c4c0 <col:24, col:40> 'String' (CXXTemporary 0x5632d948c4c0)
|               `-CXXMemberCallExpr 0x5632d948c458 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5632d948c3e8 <col:24> '<bound member function type>' ->vformat 0x5632d9489450
|                 | `-CXXThisExpr 0x5632d948c3d8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5632d948c488 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5632d948c418 <col:32> 'const char *' lvalue ParmVar 0x5632d94880d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5632d948c4a0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5632d948c438 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5632d9488148 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d9488510 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5632d9488338 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5632d94883b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5632d9488428 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5632d948c8e8 <col:23, line:254:5>
|   `-ReturnStmt 0x5632d948c8d8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5632d948c8c0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5632d948c860 <col:9, col:71> 'int'
|         |-MemberExpr 0x5632d948c830 <col:9> '<bound member function type>' ->xmessage 0x5632d9487f90
|         | `-CXXThisExpr 0x5632d948c820 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5632d948c8a8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5632d948c890 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5632d948c7e0 <col:18, col:65> 'String' (CXXTemporary 0x5632d948c7e0)
|         |     `-CallExpr 0x5632d948c778 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5632d948c760 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5632d948c648 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5632d9489f88 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5632d948c668 <col:31> 'const String' lvalue ParmVar 0x5632d94883b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5632d948c7c0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5632d948c7a8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5632d948c740 <col:37, col:64> 'String' (CXXTemporary 0x5632d948c740)
|         |             `-CallExpr 0x5632d948c710 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5632d948c6f8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5632d948c688 <col:37> 'String (const String &)' lvalue CXXMethod 0x5632d948a670 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5632d948c6a8 <col:56> 'const String' lvalue ParmVar 0x5632d9488338 'landmark' 'const String &'
|         `-DeclRefExpr 0x5632d948c800 <col:68> 'const String' lvalue ParmVar 0x5632d9488428 'str' 'const String &'
|-CXXMethodDecl 0x5632d9488890 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5632d94885d8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5632d9488650 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5632d94886d0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5632d9488748 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5632d948cba0 <col:34, line:267:5>
|   `-ReturnStmt 0x5632d948cb90 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5632d948cb78 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5632d948cb10 <col:9, col:51> 'int'
|         |-MemberExpr 0x5632d948cae0 <col:9> '<bound member function type>' ->xmessage 0x5632d9488510
|         | `-CXXThisExpr 0x5632d948cad0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5632d948c988 <col:18> 'const String' lvalue ParmVar 0x5632d94885d8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5632d948c9a8 <col:28> 'const String' lvalue ParmVar 0x5632d9488650 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5632d948cb60 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5632d948cb48 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5632d948cab0 <col:34, col:50> 'String' (CXXTemporary 0x5632d948cab0)
|               `-CXXMemberCallExpr 0x5632d948ca48 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5632d948c9d8 <col:34> '<bound member function type>' ->vformat 0x5632d9489450
|                 | `-CXXThisExpr 0x5632d948c9c8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5632d948ca78 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5632d948ca08 <col:42> 'const char *' lvalue ParmVar 0x5632d94886d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5632d948ca90 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5632d948ca28 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5632d9488748 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d94889a0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5632d948cc20 <col:25, line:288:5>
|   `-ReturnStmt 0x5632d948cc10 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5632d948cbf8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5632d948cbc8 <col:9> 'const int' lvalue ->_nerrors 0x5632d948b7f8
|         `-CXXThisExpr 0x5632d948cbb8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5632d9488bb0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5632d9488a58 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5632d9488ad8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5632d9488e98 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5632d9488c78 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5632d9488cf8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5632d9488d70 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d9489030 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5632d9488f68 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5632d9489278 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5632d94890f0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5632d9489168 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5632d948ce80 <col:58, line:357:5>
|   `-ReturnStmt 0x5632d948ce70 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5632d948ce58 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5632d948ce28 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5632d948ce10 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5632d948cdf0 <col:9, col:29> 'String' (CXXTemporary 0x5632d948cdf0)
|             `-CallExpr 0x5632d948cd80 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5632d948cd68 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5632d948cce8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5632d9488e98 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5632d948cc88 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5632d948cdb8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5632d948cca8 <col:21> 'const char *' lvalue ParmVar 0x5632d94890f0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5632d948cdd0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5632d948ccc8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5632d9489168 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d9489450 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5632d9489340 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5632d94893b8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d94895a8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5632d9489518 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5632d94896f0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5632d9489660 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5632d9489990 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5632d94897a8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5632d9489828 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5632d94898a0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5632d9489af0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5632d9489a60 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5632d948cf98 <col:37, line:441:5>
|   `-IfStmt 0x5632d948cf80 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5632d948cf08 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5632d948ced8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5632d948ce98 <col:6> 'int' lvalue ParmVar 0x5632d9489a60 'level' 'int'
|     | `-ImplicitCastExpr 0x5632d948cef0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5632d948ceb8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5632d9485b70 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5632d948cf68 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5632d948cf38 <col:8> 'int' lvalue ->_nerrors 0x5632d948b7f8
|         `-CXXThisExpr 0x5632d948cf28 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5632d9489bb8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5632d948d030 <col:26, line:448:5>
|   `-BinaryOperator 0x5632d948d010 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5632d948cfc0 <col:2> 'int' lvalue ->_nerrors 0x5632d948b7f8
|     | `-CXXThisExpr 0x5632d948cfb0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5632d948cff0 <col:13> 'int' 0
|-CXXMethodDecl 0x5632d9489d80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5632d9489c70 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5632d9489ce8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5632d9489f88 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5632d9489e40 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5632d9489eb8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5632d948a2d0 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5632d948a048 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5632d948a0c8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5632d948a148 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5632d948a388 <col:59> 0 0
|-CXXMethodDecl 0x5632d948a520 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5632d948a400 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5632d948a480 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5632d948d6a0 <col:70, line:534:5>
|   |-DeclStmt 0x5632d948d1a0 <line:528:2, col:20>
|   | |-VarDecl 0x5632d948d058 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5632d948d0c0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5632d948d0f8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5632d948d160 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5632d948d270 <line:529:2, col:23>
|   | `-VarDecl 0x5632d948d1d0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5632d948d258 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5632d948d238 <col:18> 'const char *' lvalue ParmVar 0x5632d948a400 'begin' 'const char *'
|   |-DoStmt 0x5632d948d638 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5632d948d568 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5632d948d550 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5632d948d530 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5632d948d288 <col:6> 'const char *' lvalue Var 0x5632d948d1d0 'x' 'const char *'
|   | |     `-CallExpr 0x5632d948d480 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5632d948d468 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5632d948d420 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5632d948bcd0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5632d948d4e8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5632d948d4d0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5632d948d340 <col:20, col:27> 'String' (CXXTemporary 0x5632d948d340)
|   | |       |     `-CXXTemporaryObjectExpr 0x5632d948d308 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5632d948d500 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5632d948d360 <col:30> 'const char *' lvalue Var 0x5632d948d1d0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5632d948d518 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5632d948d380 <col:33> 'const char *' lvalue ParmVar 0x5632d948a480 'end' 'const char *'
|   | |       |-UnaryOperator 0x5632d948d3c0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5632d948d3a0 <col:39> 'String' lvalue Var 0x5632d948d058 'name' 'String'
|   | |       |-UnaryOperator 0x5632d948d3f8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5632d948d3d8 <col:46> 'String' lvalue Var 0x5632d948d0f8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5632d948d410 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5632d948d620 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5632d948d608 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5632d948d5e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5632d948d5b8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5632d91627e8
|   |         `-ImplicitCastExpr 0x5632d948d5a0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5632d948d580 <col:11> 'String' lvalue Var 0x5632d948d058 'name' 'String'
|   `-ReturnStmt 0x5632d948d690 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5632d948d678 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5632d948d658 <col:9> 'const char *' lvalue Var 0x5632d948d1d0 'x' 'const char *'
|-CXXMethodDecl 0x5632d948a670 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5632d948a5e0 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5632d948dca8 <col:55, line:550:5>
|   `-IfStmt 0x5632d948dc80 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5632d948d8e0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5632d948d8c8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5632d948d8b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5632d948d890 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5632d948d860 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5632d91627e8
|     | |       `-DeclRefExpr 0x5632d948d700 <col:6> 'const String' lvalue ParmVar 0x5632d948a5e0 'x' 'const String &'
|     | `-BinaryOperator 0x5632d948d840 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5632d948d810 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5632d948d7c0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5632d948d7a8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5632d948d760 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5632d917c020 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5632d948d720 <col:11> 'const String' lvalue ParmVar 0x5632d948a5e0 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5632d948d740 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5632d948d828 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5632d948d7f8 <col:19> 'char' 123
|     |-ReturnStmt 0x5632d948d950 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5632d948d920 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5632d948d900 <col:13> 'const String' lvalue ParmVar 0x5632d948a5e0 'x' 'const String &'
|     `-IfStmt 0x5632d948dc58 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5632d948d9e8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5632d948d9d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5632d948d9b0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5632d948d980 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5632d91627e8
|       |       `-DeclRefExpr 0x5632d948d960 <col:11> 'const String' lvalue ParmVar 0x5632d948a5e0 'x' 'const String &'
|       |-ReturnStmt 0x5632d948db70 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5632d948db58 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5632d948db28 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5632d948db10 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5632d948daf0 <col:13, col:29> 'String' (CXXTemporary 0x5632d948daf0)
|       |         `-CallExpr 0x5632d948daa0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5632d948da88 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5632d948da00 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5632d9489d80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5632d948dad0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5632d948da20 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5632d948da40 <col:28> 'const String' lvalue ParmVar 0x5632d948a5e0 'x' 'const String &'
|       `-ReturnStmt 0x5632d948dc48 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5632d948dc30 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5632d948dc00 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5632d948dbe8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5632d948dbc8 <col:13, col:20> 'String' (CXXTemporary 0x5632d948dbc8)
|                 `-CXXTemporaryObjectExpr 0x5632d948db90 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5632d948a838 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5632d948a728 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5632d948a7a0 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d948bf78 <col:71> 'bool' false
|-CXXRecordDecl 0x5632d948a8e8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5632d948abe8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5632d948ab80 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5632d948ab20 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5632d948aae0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5632d915f080 'String'
|       | `-CXXRecord 0x5632d915eff0 'String'
|       |-BuiltinType 0x5632d8e31370 'int'
|       `-DecayedType 0x5632d9418520 '__va_list_tag *' sugar
|         |-TypedefType 0x5632d94184f0 'va_list' sugar
|         | |-Typedef 0x5632d9050130 'va_list'
|         | `-TypedefType 0x5632d90500e0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5632d8f87ae8 '__gnuc_va_list'
|         |   `-TypedefType 0x5632d8f87a50 '__builtin_va_list' sugar
|         |     |-Typedef 0x5632d8e72bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5632d8e72b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5632d8e320c0 '__va_list_tag'
|         |         `-CXXRecord 0x5632d8e32028 '__va_list_tag'
|         `-PointerType 0x5632d90559d0 '__va_list_tag *'
|           `-RecordType 0x5632d8e320c0 '__va_list_tag'
|             `-CXXRecord 0x5632d8e32028 '__va_list_tag'
|-EnumDecl 0x5632d948ac40 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5632d948ad40 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b2a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948ad20 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5632d948ad00 <col:16> 'int' 1
| |-EnumConstantDecl 0x5632d948add0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b2b8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948adb0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5632d948ad90 <col:21> 'int' 2
| |-EnumConstantDecl 0x5632d948ae60 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b2d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948ae40 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5632d948ae20 <col:22> 'int' 4
| |-EnumConstantDecl 0x5632d948aef0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b2e8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948aed0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5632d948aeb0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5632d948af80 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b300 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948af60 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5632d948af40 <col:22> 'int' 16
| |-EnumConstantDecl 0x5632d948b010 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948aff0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5632d948afd0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5632d948b0a0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b330 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948b080 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5632d948b060 <col:17> 'int' 64
| |-EnumConstantDecl 0x5632d948b130 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b348 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948b110 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5632d948b0f0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5632d948b1c0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5632d948b360 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d948b1a0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5632d948b180 <col:16> 'int' 256
| `-EnumConstantDecl 0x5632d948b250 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5632d948b378 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d948b230 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5632d948b210 <col:12> 'int' 1024
|-CXXMethodDecl 0x5632d948b588 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5632d948b3a0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5632d948b440 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5632d948b710 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5632d948b648 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5632d948b7b8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5632d948b7f8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5632d948b858 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5632d948b8d0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5632d948bcd0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5632d948b948 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5632d948b9c8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5632d948ba48 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5632d948bac0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5632d948bb38 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5632d948bbb0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5632d948bdf8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5632d948bdf8
| `-ParmVarDecl 0x5632d948bf08 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5632d948e008 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5632d948e008
  `-ParmVarDecl 0x5632d948e118 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9230950 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5632d9230b28 prev 0x5632d9230950 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5632d9230bb8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5632d9230be0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d94039e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5632d9403990 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5632d9403970 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5632d9230df8 'type'
|     `-SubstTemplateTypeParmType 0x5632d9230dc0 'String' sugar
|       |-TemplateTypeParmType 0x5632d9122890 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d9122840 'T'
|       `-RecordType 0x5632d915f080 'String'
|         `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d9403a98 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5632d9403a60 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5632d9403a40 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5632d94039e0 'type'
|     `-ElaboratedType 0x5632d9403990 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5632d9403970 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5632d9230df8 'type'
|         `-SubstTemplateTypeParmType 0x5632d9230dc0 'String' sugar
|           |-TemplateTypeParmType 0x5632d9122890 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5632d9122840 'T'
|           `-RecordType 0x5632d915f080 'String'
|             `-CXXRecord 0x5632d915eff0 'String'
|-CXXMethodDecl 0x5632d9403c18 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5632d9403b28 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5632d9403d08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5632d9403de8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5632d94040b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5632d9403fc0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5632d94042f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5632d9404170 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d94041e8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d94044c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5632d94043b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d9404430 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9404628 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5632d94046f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5632d9404948 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5632d94047b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5632d9404830 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9404ba8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5632d9404a18 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5632d9404a90 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9404d68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5632d9404c78 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9404f28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5632d9404e30 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9404fe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d9405090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5632d94052c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5632d9405140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d94051b8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5632d9405568 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5632d9405470 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5632d9405630 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5632d9405680 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5632d94056d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9396820 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5632d922f5f8 prev 0x5632d9396820 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5632d92308c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5632d9230870 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5632d9230850 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5632d9230700 'type'
|     `-SubstTemplateTypeParmType 0x5632d9230590 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5632d90f8640 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5632d90f85e8 'F'
|       `-RecordType 0x5632d92301f0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5632d9230110 'typed_array_memory'
|-FieldDecl 0x5632d9405720 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5632d9405770 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5632d94057a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|   |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5632d912fb58 'T'
|   `-RecordType 0x5632d915f080 'String'
|     `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d9405838 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5632d9405800 'String &'
|   `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d915f080 'String'
|       `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d94058c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5632d9405890 'const String &'
|   `-QualType 0x5632d922f691 'const String' const
|     `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d915f080 'String'
|         `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d9405958 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5632d9405920 'String *'
|   `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d915f080 'String'
|       `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d94059e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5632d94059b0 'const String *'
|   `-QualType 0x5632d922f691 'const String' const
|     `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d915f080 'String'
|         `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d9406640 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5632d94065f0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5632d94065d0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5632d9406508 'type'
|     `-LValueReferenceType 0x5632d94064d0 'const String &'
|       `-QualType 0x5632d9406271 'const String' const
|         `-SubstTemplateTypeParmType 0x5632d9406270 'String' sugar
|           |-TemplateTypeParmType 0x5632d9102590 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5632d9102538 'T'
|           `-RecordType 0x5632d915f080 'String'
|             `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d94066a8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5632d9405890 'const String &'
|   `-QualType 0x5632d922f691 'const String' const
|     `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d915f080 'String'
|         `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d9406700 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d9406768 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5632d9405920 'String *'
|   `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-RecordType 0x5632d915f080 'String'
|       `-CXXRecord 0x5632d915eff0 'String'
|-TypedefDecl 0x5632d94067d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5632d94059b0 'const String *'
|   `-QualType 0x5632d922f691 'const String' const
|     `-SubstTemplateTypeParmType 0x5632d922f690 'String' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-RecordType 0x5632d915f080 'String'
|         `-CXXRecord 0x5632d915eff0 'String'
|-EnumDecl 0x5632d9406828 <line:134:5> col:5
| `-EnumConstantDecl 0x5632d9406920 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5632d9406900 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5632d9131238 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5632d9131210 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5632d91311f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5632d94069a8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5632d9406c38 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d9406a60 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d9406b00 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5632d9406ec8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5632d9406db0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5632d9407188 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5632d9407070 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5632d94074a0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5632d9407380 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5632d94077b0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5632d9407690 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5632d9407aa0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d94078e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d9407960 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5632d9407bc8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5632d9407c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d9407cd0 <col:30> Inherited
|-CXXMethodDecl 0x5632d9407d18 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5632d9407dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d9407e20 <col:30> Inherited
|-CXXMethodDecl 0x5632d9407ee8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5632d9407f98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d9407ff0 <col:30> Inherited
|-CXXMethodDecl 0x5632d9408038 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5632d94080e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d9408140 <col:30> Inherited
|-CXXMethodDecl 0x5632d9408188 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5632d9408238 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d9408290 <col:30> Inherited
|-CXXMethodDecl 0x5632d94082d8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5632d9408388 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d94083e0 <col:30> Inherited
|-CXXMethodDecl 0x5632d9408408 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d94084b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d9408568 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5632d9408728 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d9408618 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d9408690 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5632d9408878 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5632d94087e8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9408a28 <line:163:5, col:65> col:43 used operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5632d9408930 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d9408ae0 <col:20>
| `-OptimizeNoneAttr 0x5632d9408b38 <col:30>
|-CXXMethodDecl 0x5632d9408c58 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5632d9408b60 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d9408d10 <col:20>
| `-OptimizeNoneAttr 0x5632d9408d68 <col:30>
|-CXXMethodDecl 0x5632d9408e20 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d9408d90 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9408f68 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d9408ed8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9409098 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5632d9409198 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5632d9409268 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5632d9409338 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5632d9409478 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d94093e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d94095c0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d9409530 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9409708 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5632d9409678 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d94097c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5632d94098c0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5632d9409830 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d9409978 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5632d9409a38 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5632d9409b38 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5632d9409cb8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d9409bf8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5632d940a448 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5632d9409d70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5632d940a3a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5632d940a2a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5632d940a528 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d940a678 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d940a5e8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5632d940a730 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5632d940a978 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d940a7f0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5632d940a868 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5632d940ab08 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5632d940aa48 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5632d940ad18 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5632d940abd0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5632d940ac48 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5632d940add8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5632d940b038 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5632d940af40 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5632d940b108 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5632d94afda0 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93ac5c8 prev 0x5632d9393b30 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5632d93ae038 <line:148:18>
|-CXXRecordDecl 0x5632d93ac6c0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5632d93ac750 <col:22, col:28> col:22 public
|-TypedefDecl 0x5632d93ac788 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5632d8f872a0 'uninitialized_type'
|   `-CXXRecord 0x5632d8f87208 'uninitialized_type'
|-CXXConstructorDecl 0x5632d93ac818 <line:14:5, line:16:5> line:14:12 used EtherAddress 'void ()' inline
| `-CompoundStmt 0x5632d93ae338 <col:27, line:16:5>
|   `-BinaryOperator 0x5632d93ae318 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5632d93ae120 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5632d93ae108 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5632d93ae0b8 <col:2> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|     | |   `-CXXThisExpr 0x5632d93ae0a8 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5632d93ae0e8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5632d93ae300 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5632d93ae2e0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5632d93ae1b8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5632d93ae1a0 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5632d93ae150 <col:13> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|         | |   `-CXXThisExpr 0x5632d93ae140 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5632d93ae180 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5632d93ae2c8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5632d93ae2a8 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5632d93ae250 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5632d93ae238 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5632d93ae1e8 <col:24> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|             | |   `-CXXThisExpr 0x5632d93ae1d8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5632d93ae218 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5632d93ae290 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5632d93ae270 <col:35> 'int' 0
|-CXXConstructorDecl 0x5632d93ac968 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5632d93ac8d8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5632d93ae500 <col:61, line:24:5>
|   `-CallExpr 0x5632d93ae450 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5632d93ae438 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5632d93ae418 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5632d9091238 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5632d93ae4a0 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5632d93ae488 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5632d93ae3a8 <col:9> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|     |     `-CXXThisExpr 0x5632d93ae398 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5632d93ae4d0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5632d93ae4b8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5632d93ae3d8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5632d93ac8d8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5632d93ae4e8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5632d93ae3f8 <col:22> 'int' 6
|-CXXConstructorDecl 0x5632d93acab8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5632d93aca28 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5632d93ae570 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5632d93ae548 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5632d93ae518 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5632d93aca28 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5632d93acbb8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5632d93aecb8 <col:42, line:34:5>
|   `-ReturnStmt 0x5632d93aeca8 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5632d93aec90 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5632d93aec60 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5632d93aea98 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5632d93aea10 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5632d93ae900 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5632d93ae8e8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5632d93ae598 <col:22> 'int' 65535
|-CXXMethodDecl 0x5632d93acc78 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5632d93acd18 <col:59> "" ""
|-TypedefDecl 0x5632d93ace98 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5632d93ace10 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5632d9393bc0 'EtherAddress'
|   | `-CXXRecord 0x5632d93ac5c8 'EtherAddress'
|   `-ParenType 0x5632d93acdb0 'bool () const' sugar
|     `-FunctionProtoType 0x5632d8ed9fc0 'bool () const' const cdecl
|       `-BuiltinType 0x5632d8e312f0 'bool'
|-CXXConversionDecl 0x5632d93acfd8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5632d93af098 <col:51, line:43:5>
|   `-ReturnStmt 0x5632d93af088 <line:42:2, col:70>
|     `-ConditionalOperator 0x5632d93af058 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5632d93aef80 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5632d93aee98 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5632d93aee50 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5632d93aee38 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5632d93aed80 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5632d93aed68 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5632d93aece0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       | | |     |   `-CXXThisExpr 0x5632d93aecd0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5632d93aed10 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5632d93aee80 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5632d93aee68 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5632d93aee18 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5632d93aee00 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5632d93aedb0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       | |       |   `-CXXThisExpr 0x5632d93aeda0 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5632d93aede0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5632d93aef68 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5632d93aef50 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5632d93aef30 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5632d93aef18 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5632d93aeec8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       |       |   `-CXXThisExpr 0x5632d93aeeb8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5632d93aeef8 <col:39> 'int' 2
|       |-UnaryOperator 0x5632d93af008 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5632d93aefd8 <col:45, col:59> 'bool () const' CXXMethod 0x5632d93ad0a8 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5632d93af040 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5632d93af020 <col:70> 'int' 0
|-CXXMethodDecl 0x5632d93ad0a8 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5632d93af258 <col:34, line:51:5>
|   `-ReturnStmt 0x5632d93af248 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5632d93af230 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d93af210 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5632d93af1f8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5632d93af1e0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5632d93af1a0 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5632d93af160 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5632d93af130 <col:9> '<bound member function type>' ->data 0x5632d93ad540
|         |     |   `-CXXThisExpr 0x5632d93af120 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5632d93af180 <col:16> 'int' 0
|         `-IntegerLiteral 0x5632d93af1c0 <col:21> 'int' 1
|-CXXMethodDecl 0x5632d93ad168 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5632d93af418 <col:34, line:59:5>
|   `-ReturnStmt 0x5632d93af408 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5632d93af3f0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d93af3d0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5632d93af3b8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5632d93af3a0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5632d93af360 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5632d93af320 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5632d93af2f0 <col:9> '<bound member function type>' ->data 0x5632d93ad540
|         |     |   `-CXXThisExpr 0x5632d93af2e0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5632d93af340 <col:16> 'int' 0
|         `-IntegerLiteral 0x5632d93af380 <col:21> 'int' 2
|-CXXMethodDecl 0x5632d93ad228 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5632d93af718 <col:38, line:66:5>
|   `-ReturnStmt 0x5632d93af708 <line:65:2, col:43>
|     `-BinaryOperator 0x5632d93af6e8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5632d93af6a8 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5632d93af5c0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5632d93af578 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5632d93af560 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5632d93af4a8 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5632d93af490 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5632d93af440 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       | | |     |   `-CXXThisExpr 0x5632d93af430 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5632d93af470 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5632d93af5a8 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5632d93af590 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5632d93af540 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5632d93af528 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5632d93af4d8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       | |       |   `-CXXThisExpr 0x5632d93af4c8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5632d93af508 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5632d93af690 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5632d93af678 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5632d93af658 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5632d93af640 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5632d93af5f0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       |       |   `-CXXThisExpr 0x5632d93af5e0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5632d93af620 <col:37> 'int' 2
|       `-IntegerLiteral 0x5632d93af6c8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5632d93ad3a8 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5632d93ad2e0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5632d93af868 <col:64, line:75:5>
|   `-ReturnStmt 0x5632d93af858 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5632d93af838 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5632d93af808 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5632d93ad228
|         `-CXXReinterpretCastExpr 0x5632d93af778 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5632d93af760 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5632d93af730 <col:48> 'const unsigned char *' lvalue ParmVar 0x5632d93ad2e0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5632d93ad478 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5632d93af930 <col:34, line:80:5>
|   `-ReturnStmt 0x5632d93af920 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5632d93af8f0 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5632d93af8d8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5632d93af890 <col:43> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|           `-CXXThisExpr 0x5632d93af880 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5632d93ad540 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5632d93af9f8 <col:46, line:85:5>
|   `-ReturnStmt 0x5632d93af9e8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5632d93af9b8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5632d93af9a0 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5632d93af958 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|           `-CXXThisExpr 0x5632d93af948 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5632d93ad688 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5632d93afa78 <col:42, line:91:5>
|   `-ReturnStmt 0x5632d93afa68 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5632d93afa50 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5632d93afa20 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|         `-CXXThisExpr 0x5632d93afa10 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5632d93ad778 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5632d93afe88 <col:36, line:97:5>
|   `-ReturnStmt 0x5632d93afe78 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5632d93afe58 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5632d93afcd8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5632d93afcb8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5632d93afca0 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5632d93afc88 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5632d93afb08 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5632d93afaf0 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5632d93afaa0 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       |   |     |   `-CXXThisExpr 0x5632d93afa90 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5632d93afad0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5632d93afc68 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5632d93afc48 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5632d93afc00 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5632d93afbe8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5632d93afbd0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5632d93afba0 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5632d93afb88 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5632d93afb38 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|       |       |       |   `-CXXThisExpr 0x5632d93afb28 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5632d93afb68 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5632d93afc28 <col:43> 'int' 16
|       `-ParenExpr 0x5632d93afe38 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5632d93afe18 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5632d93afdd0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5632d93afdb8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5632d93afda0 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5632d93afd70 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5632d93afd58 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5632d93afd08 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5632d93ade38
|           |       |   `-CXXThisExpr 0x5632d93afcf8 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5632d93afd38 <col:24> 'int' 0
|           `-IntegerLiteral 0x5632d93afdf8 <col:30> 'int' 9
|-CXXMethodDecl 0x5632d93ad838 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5632d93aff98 <col:35, line:111:5>
|   `-ReturnStmt 0x5632d93aff88 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5632d93aff70 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5632d93aff40 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5632d93aff28 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5632d93aff08 <col:9, col:22> 'String' (CXXTemporary 0x5632d93aff08)
|             `-CXXMemberCallExpr 0x5632d93afee0 <col:9, col:22> 'String'
|               `-MemberExpr 0x5632d93afeb0 <col:9> '<bound member function type>' ->unparse_dash 0x5632d93ad9b8
|                 `-CXXThisExpr 0x5632d93afea0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5632d93ad8f8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5632d93ad9b8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5632d93ada78 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5632d93adb18 <col:44> "" ""
|-CXXConversionDecl 0x5632d93adbb8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5632d93adc60 <col:51> "" ""
|-TypedefDecl 0x5632d93add18 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5632d93adce0 'const EtherAddress &'
|   `-QualType 0x5632d9393bc1 'const EtherAddress' const
|     `-RecordType 0x5632d9393bc0 'EtherAddress'
|       `-CXXRecord 0x5632d93ac5c8 'EtherAddress'
|-AccessSpecDecl 0x5632d93add70 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5632d93ade38 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5632d93adf88 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5632d93ade98 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5632d93b0240 <col:30, line:146:5>
|   `-BinaryOperator 0x5632d93b0220 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5632d93b0028 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5632d93b0010 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5632d93affc0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|     | |   `-CXXThisExpr 0x5632d93affb0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5632d93afff0 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5632d93b0208 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5632d93b01e8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5632d93b00c0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5632d93b00a8 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5632d93b0058 <col:13> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|         | |   `-CXXThisExpr 0x5632d93b0048 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5632d93b0088 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5632d93b01d0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5632d93b01b0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5632d93b0158 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5632d93b0140 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5632d93b00f0 <col:24> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|             | |   `-CXXThisExpr 0x5632d93b00e0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5632d93b0120 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5632d93b0198 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5632d93b0178 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5632d93ade98 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5632d93ae5b8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5632d93ae5b8
| `-ParmVarDecl 0x5632d93ae6c8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5632d93ae768 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d93ae878 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5632d93ade38 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5632d93aec00 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5632d93aeb88 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5632d93aeb40 <col:7> 'uint16_t [3]' xvalue ._data 0x5632d93ade38
| |   |   `-CXXStaticCastExpr 0x5632d93aeb10 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5632d93aeae0 <col:7> 'EtherAddress' lvalue ParmVar 0x5632d93ae878 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5632d93aebe8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5632d93aebc8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5632d93aebb0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5632d93aeb88 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5632d93aeb40 <col:7> 'uint16_t [3]' xvalue ._data 0x5632d93ade38
| |       |     `-CXXStaticCastExpr 0x5632d93aeb10 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5632d93aeae0 <col:7> 'EtherAddress' lvalue ParmVar 0x5632d93ae878 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5632d93aeba0 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5632d93aec50 <col:7>
|-CXXDestructorDecl 0x5632d93ae930 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5632d93d56b0 <col:7> col:7 implicit used operator= 'EtherAddress &(const EtherAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d93d57b8 <col:7> col:7 used 'const EtherAddress &'
| `-CompoundStmt 0x5632d93d6270 <col:7>
|   |-CallExpr 0x5632d93d61d0 <col:7> 'void *'
|   | |-ImplicitCastExpr 0x5632d93d61b8 <col:7> 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x5632d93d6148 <col:7> '<builtin fn type>' Function 0x5632d93d5f00 '__builtin_memcpy' 'void *(void *, const void *, unsigned long) noexcept'
|   | |-ImplicitCastExpr 0x5632d93d6208 <col:7> 'void *' <BitCast>
|   | | `-UnaryOperator 0x5632d93d5e58 <col:7> 'uint16_t (*)[3]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x5632d93d5dd0 <col:7> 'uint16_t [3]' lvalue ->_data 0x5632d93ade38
|   | |     `-CXXThisExpr 0x5632d93d5dc0 <col:7> 'EtherAddress *' this
|   | |-ImplicitCastExpr 0x5632d93d6220 <col:7> 'const void *' <BitCast>
|   | | `-UnaryOperator 0x5632d93d5da8 <col:7> 'uint16_t const (*)[3]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x5632d93d5d20 <col:7> 'uint16_t const[3]' lvalue ._data 0x5632d93ade38
|   | |     `-DeclRefExpr 0x5632d93d5d00 <col:7> 'const EtherAddress' lvalue ParmVar 0x5632d93d57b8 '' 'const EtherAddress &'
|   | `-IntegerLiteral 0x5632d93d6168 <col:7> 'unsigned long' 6
|   `-ReturnStmt 0x5632d93d6260 <col:7>
|     `-UnaryOperator 0x5632d93d6248 <col:7> 'EtherAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5632d93d6238 <col:7> 'EtherAddress *' this
`-CXXMethodDecl 0x5632d93d5828 <col:7> col:7 implicit operator= 'EtherAddress &(EtherAddress &&)' inline default trivial noexcept-unevaluated 0x5632d93d5828
  `-ParmVarDecl 0x5632d93d5938 <col:7> col:7 'EtherAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9194bb0 prev 0x5632d90f9be8 <../dummy_inc/click/ipaddress.hh:15:1, line:154:1> line:15:7 referenced class IPAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d9194ca8 <col:1, col:7> col:7 implicit referenced class IPAddress
|-AccessSpecDecl 0x5632d9194d38 <col:19, col:25> col:19 public
|-TypedefDecl 0x5632d9194d70 <line:17:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5632d8f872a0 'uninitialized_type'
|   `-CXXRecord 0x5632d8f87208 'uninitialized_type'
|-CXXConstructorDecl 0x5632d9194e30 <line:20:5, line:22:5> line:20:12 used IPAddress 'void ()' inline
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d9198628 <line:21:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5632d91985e8 <col:10> 'int' 0
| `-CompoundStmt 0x5632d9198670 <col:13, line:22:5>
|-CXXConstructorDecl 0x5632d9194f80 <line:25:5, line:27:5> line:25:12 used IPAddress 'void (unsigned int)' inline
| |-ParmVarDecl 0x5632d9194ef0 <col:22, col:31> col:31 used x 'unsigned int'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d91986c0 <line:26:10> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d9198680 <col:10> 'unsigned int' lvalue ParmVar 0x5632d9194ef0 'x' 'unsigned int'
| `-CompoundStmt 0x5632d9198708 <col:13, line:27:5>
|-CXXConstructorDecl 0x5632d91950d8 <line:29:5, line:31:5> line:29:21 IPAddress 'void (int)' inline
| |-ParmVarDecl 0x5632d9195048 <col:31, col:35> col:35 used x 'int'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d9198770 <line:30:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5632d9198758 <col:10> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x5632d9198718 <col:10> 'int' lvalue ParmVar 0x5632d9195048 'x' 'int'
| `-CompoundStmt 0x5632d91987b8 <col:13, line:31:5>
|-CXXConstructorDecl 0x5632d9195230 <line:33:5, line:35:5> line:33:21 IPAddress 'void (unsigned long)' inline
| |-ParmVarDecl 0x5632d91951a0 <col:31, col:45> col:45 used x 'unsigned long'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d9198820 <line:34:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5632d9198808 <col:10> 'unsigned long' <LValueToRValue>
| |     `-DeclRefExpr 0x5632d91987c8 <col:10> 'unsigned long' lvalue ParmVar 0x5632d91951a0 'x' 'unsigned long'
| `-CompoundStmt 0x5632d9198868 <col:13, line:35:5>
|-CXXConstructorDecl 0x5632d9195388 <line:37:5, line:39:5> line:37:21 IPAddress 'void (long)' inline
| |-ParmVarDecl 0x5632d91952f8 <col:31, col:36> col:36 used x 'long'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d91988d0 <line:38:10> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-ImplicitCastExpr 0x5632d91988b8 <col:10> 'long' <LValueToRValue>
| |     `-DeclRefExpr 0x5632d9198878 <col:10> 'long' lvalue ParmVar 0x5632d91952f8 'x' 'long'
| `-CompoundStmt 0x5632d9198918 <col:13, line:39:5>
|-CXXConstructorDecl 0x5632d9195548 <line:42:5, line:44:5> line:42:12 IPAddress 'void (struct in_addr)' inline
| |-ParmVarDecl 0x5632d9195458 <col:22, col:37> col:37 used x 'struct in_addr':'in_addr'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d9198998 <line:43:10, col:12> 'in_addr_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5632d9198948 <col:10, col:12> 'in_addr_t':'unsigned int' lvalue .s_addr 0x5632d90c89a0
| |     `-DeclRefExpr 0x5632d9198928 <col:10> 'struct in_addr':'in_addr' lvalue ParmVar 0x5632d9195458 'x' 'struct in_addr':'in_addr'
| `-CompoundStmt 0x5632d91989e0 <col:20, line:44:5>
|-CXXConstructorDecl 0x5632d91956d8 <line:50:5, line:56:5> line:50:14 IPAddress 'void (const unsigned char *)'
| |-ParmVarDecl 0x5632d9195610 <col:24, col:45> col:45 used data 'const unsigned char *'
| `-CompoundStmt 0x5632d9198b48 <col:51, line:56:5>
|   `-BinaryOperator 0x5632d9198b28 <line:52:2, col:52> 'uint32_t':'unsigned int' lvalue '='
|     |-MemberExpr 0x5632d9198a00 <col:2> 'uint32_t':'unsigned int' lvalue ->_addr 0x5632d9198580
|     | `-CXXThisExpr 0x5632d91989f0 <col:2> 'IPAddress *' implicit this
|     `-ImplicitCastExpr 0x5632d9198b10 <col:10, col:52> 'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5632d9198af8 <col:10, col:52> 'const unsigned int' lvalue prefix '*' cannot overflow
|         `-ParenExpr 0x5632d9198ad8 <col:11, col:52> 'const unsigned int *'
|           `-CXXReinterpretCastExpr 0x5632d9198aa8 <col:12, col:51> 'const unsigned int *' reinterpret_cast<const unsigned int *> <BitCast>
|             `-ImplicitCastExpr 0x5632d9198a90 <col:47> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|               `-DeclRefExpr 0x5632d9198a30 <col:47> 'const unsigned char *' lvalue ParmVar 0x5632d9195610 'data' 'const unsigned char *'
|-CXXConstructorDecl 0x5632d9195828 <line:63:5, col:39> col:14 IPAddress 'void (const String &)'
| `-ParmVarDecl 0x5632d9195798 <col:24, col:38> col:38 x 'const String &'
|-CXXConstructorDecl 0x5632d91959d8 <line:66:5, line:68:5> line:66:12 IPAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5632d9195918 <col:22, col:48> col:48 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5632d9198bb8 <col:56, line:68:5>
|   `-CStyleCastExpr 0x5632d9198b90 <line:67:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5632d9198b60 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5632d9195918 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5632d9195b68 <line:78:5, col:48> col:22 make_prefix 'IPAddress (int)' static
| `-ParmVarDecl 0x5632d9195aa0 <col:34, col:38> col:38 prefix_len 'int'
|-CXXMethodDecl 0x5632d9195c58 <line:81:5, line:83:5> line:81:29 make_broadcast 'IPAddress ()' static inline
| `-CompoundStmt 0x5632d9199b78 <col:46, line:83:5>
|   `-ReturnStmt 0x5632d9199b68 <line:82:2, col:29>
|     `-ExprWithCleanups 0x5632d9199b50 <col:9, col:29> 'IPAddress'
|       `-CXXConstructExpr 0x5632d9199b20 <col:9, col:29> 'IPAddress' 'void (IPAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5632d91999d8 <col:9, col:29> 'IPAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5632d91998c0 <col:9, col:29> 'IPAddress' functional cast to class IPAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5632d91997a8 <col:9, col:29> 'IPAddress' 'void (unsigned int)'
|               `-IntegerLiteral 0x5632d9198be0 <col:19> 'unsigned int' 4294967295
|-CXXMethodDecl 0x5632d9195d48 <line:86:5, line:88:5> line:86:17 empty 'bool () const' inline
| `-CompoundStmt 0x5632d9199c28 <col:31, line:88:5>
|   `-ReturnStmt 0x5632d9199c18 <line:87:2, col:10>
|     `-UnaryOperator 0x5632d9199c00 <col:9, col:10> 'bool' prefix '!' cannot overflow
|       `-ImplicitCastExpr 0x5632d9199be8 <col:10> 'bool' <IntegralToBoolean>
|         `-ImplicitCastExpr 0x5632d9199bd0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x5632d9199ba0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5632d9198580
|             `-CXXThisExpr 0x5632d9199b90 <col:10> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5632d9195e08 <line:91:5, line:93:5> line:91:21 used addr 'uint32_t () const' inline
| `-CompoundStmt 0x5632d9199ca8 <col:34, line:93:5>
|   `-ReturnStmt 0x5632d9199c98 <line:92:2, col:9>
|     `-ImplicitCastExpr 0x5632d9199c80 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5632d9199c50 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5632d9198580
|         `-CXXThisExpr 0x5632d9199c40 <col:9> 'const IPAddress *' implicit this
|-CXXConversionDecl 0x5632d9195ed8 <line:99:5, line:101:5> line:99:12 operator unsigned int 'uint32_t () const' inline
| `-CompoundStmt 0x5632d9199d28 <col:38, line:101:5>
|   `-ReturnStmt 0x5632d9199d18 <line:100:2, col:9>
|     `-ImplicitCastExpr 0x5632d9199d00 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5632d9199cd0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5632d9198580
|         `-CXXThisExpr 0x5632d9199cc0 <col:9> 'const IPAddress *' implicit this
|-CXXMethodDecl 0x5632d9195fa8 <line:106:5, line:108:5> line:106:17 is_multicast 'bool () const' inline
| `-CompoundStmt 0x5632d9199ff8 <col:38, line:108:5>
|   `-ReturnStmt 0x5632d9199fe8 <line:107:2, col:58>
|     `-BinaryOperator 0x5632d9199fc8 <col:9, col:58> 'bool' '=='
|       |-ParenExpr 0x5632d9199ee0 <col:9, col:36> 'unsigned int'
|       | `-BinaryOperator 0x5632d9199ec0 <col:10, col:35> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5632d9199ea8 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5632d9199d50 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5632d9198580
|       |   |   `-CXXThisExpr 0x5632d9199d40 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5632d9199e80 <col:18, col:35> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5632d9199e68 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5632d9199de8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5632d90d6ed8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5632d9199dc8 <col:24> 'unsigned int' 4026531840
|       `-CallExpr 0x5632d9199fa0 <col:41, col:58> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5632d9199f88 <col:41> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5632d9199f68 <col:41> 'uint32_t (uint32_t) throw()' lvalue Function 0x5632d90d6ed8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5632d9199f48 <col:47> 'unsigned int' 3758096384
|-CXXMethodDecl 0x5632d9196068 <line:110:5, line:112:5> line:110:17 is_link_local 'bool () const' inline
| `-CompoundStmt 0x5632d919a268 <col:39, line:112:5>
|   `-ReturnStmt 0x5632d919a258 <line:111:2, col:56>
|     `-BinaryOperator 0x5632d919a238 <col:9, col:56> 'bool' '=='
|       |-ParenExpr 0x5632d919a150 <col:9, col:35> 'unsigned int'
|       | `-BinaryOperator 0x5632d919a130 <col:10, col:34> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5632d919a118 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5632d919a020 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_addr 0x5632d9198580
|       |   |   `-CXXThisExpr 0x5632d919a010 <col:10> 'const IPAddress *' implicit this
|       |   `-CallExpr 0x5632d919a0f0 <col:18, col:34> 'uint32_t':'unsigned int'
|       |     |-ImplicitCastExpr 0x5632d919a0d8 <col:18> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5632d919a0b8 <col:18> 'uint32_t (uint32_t) throw()' lvalue Function 0x5632d90d6ed8 'htonl' 'uint32_t (uint32_t) throw()'
|       |     `-IntegerLiteral 0x5632d919a098 <col:24> 'unsigned int' 4294901760
|       `-CallExpr 0x5632d919a210 <col:40, col:56> 'uint32_t':'unsigned int'
|         |-ImplicitCastExpr 0x5632d919a1f8 <col:40> 'uint32_t (*)(uint32_t) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5632d919a1d8 <col:40> 'uint32_t (uint32_t) throw()' lvalue Function 0x5632d90d6ed8 'htonl' 'uint32_t (uint32_t) throw()'
|         `-IntegerLiteral 0x5632d919a1b8 <col:46> 'unsigned int' 2851995648
|-CXXMethodDecl 0x5632d9196198 <line:114:5, col:37> col:27 used in_addr 'struct in_addr () const' inline
|-CXXConversionDecl 0x5632d91962a0 <line:115:5, col:38> col:12 operator in_addr 'struct in_addr () const' inline
|-CXXMethodDecl 0x5632d91963b0 <line:117:5, col:32> col:27 data 'unsigned char *()' inline
|-CXXMethodDecl 0x5632d9197478 <line:118:5, col:40> col:33 data 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5632d9197538 <line:120:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d9197600 <line:122:5, col:30> col:9 mask_to_prefix_len 'int () const'
|-CXXMethodDecl 0x5632d91977f8 <line:123:5, col:64> col:17 matches_prefix 'bool (IPAddress, IPAddress) const' inline
| |-ParmVarDecl 0x5632d91976b0 <col:32, col:42> col:42 addr 'IPAddress'
| `-ParmVarDecl 0x5632d9197728 <col:48, col:58> col:58 mask 'IPAddress'
|-CXXMethodDecl 0x5632d9197978 <line:124:5, col:50> col:17 mask_as_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5632d91978b8 <col:34, col:44> col:44 mask 'IPAddress'
|-CXXMethodDecl 0x5632d9197ac0 <line:125:5, col:52> col:17 mask_more_specific 'bool (IPAddress) const' inline
| `-ParmVarDecl 0x5632d9197a30 <col:36, col:46> col:46 mask 'IPAddress'
|-CXXMethodDecl 0x5632d9197c68 <line:137:5, col:43> col:23 operator&= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5632d9197b78 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5632d9197db0 <line:138:5, col:43> col:23 operator|= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5632d9197d20 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5632d9197ef8 <line:139:5, col:43> col:23 operator^= 'IPAddress &(IPAddress)' inline
| `-ParmVarDecl 0x5632d9197e68 <col:34> col:43 'IPAddress'
|-CXXMethodDecl 0x5632d9197fc0 <line:141:5, col:22> col:12 used unparse 'String () const'
|-CXXMethodDecl 0x5632d9198080 <line:142:5, col:27> col:12 unparse_mask 'String () const'
|-CXXMethodDecl 0x5632d91981f8 <line:143:5, col:41> col:12 unparse_with_mask 'String (IPAddress) const'
| `-ParmVarDecl 0x5632d9198130 <col:30> col:39 'IPAddress'
|-CXXMethodDecl 0x5632d91982c0 <line:145:5, col:23> col:19 s 'String () const' inline
|-CXXConversionDecl 0x5632d91983a8 <line:146:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5632d9198450 <col:51> "" ""
|-TypedefDecl 0x5632d91984f0 <line:148:5, col:23> col:23 parameter_type 'IPAddress'
| `-RecordType 0x5632d90f9c80 'IPAddress'
|   `-CXXRecord 0x5632d9194bb0 'IPAddress'
|-AccessSpecDecl 0x5632d9198548 <line:150:3, col:10> col:3 private
|-FieldDecl 0x5632d9198580 <line:152:5, col:14> col:14 referenced _addr 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5632d9198c28 <line:15:7> col:7 implicit used constexpr IPAddress 'void (const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d9198d38 <col:7> col:7 used 'const IPAddress &'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d93cdbf8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5632d93cdbb0 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5632d9198580
| |     `-DeclRefExpr 0x5632d93cdb90 <col:7> 'const IPAddress' lvalue ParmVar 0x5632d9198d38 '' 'const IPAddress &'
| `-CompoundStmt 0x5632d93cdc40 <col:7>
|-CXXConstructorDecl 0x5632d9198dd8 <col:7> col:7 implicit used constexpr IPAddress 'void (IPAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d9198ee8 <col:7> col:7 used 'IPAddress &&'
| |-CXXCtorInitializer Field 0x5632d9198580 '_addr' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x5632d9199ac8 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5632d9199a80 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5632d9198580
| |     `-CXXStaticCastExpr 0x5632d9199a50 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
| |       `-DeclRefExpr 0x5632d9199a20 <col:7> 'IPAddress' lvalue ParmVar 0x5632d9198ee8 '' 'IPAddress &&'
| `-CompoundStmt 0x5632d9199b10 <col:7>
|-CXXDestructorDecl 0x5632d91997d8 <col:7> col:7 implicit referenced ~IPAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5632d94b1be8 <col:7> col:7 implicit used operator= 'IPAddress &(const IPAddress &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d94b1cf8 <col:7> col:7 used 'const IPAddress &'
| `-CompoundStmt 0x5632d94df760 <col:7>
|   |-BinaryOperator 0x5632d94df708 <col:7> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x5632d94df6c0 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x5632d9198580
|   | | `-CXXThisExpr 0x5632d94df6b0 <col:7> 'IPAddress *' this
|   | `-ImplicitCastExpr 0x5632d94df6f0 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-MemberExpr 0x5632d94df680 <col:7> 'const uint32_t':'const unsigned int' lvalue ._addr 0x5632d9198580
|   |     `-DeclRefExpr 0x5632d94df660 <col:7> 'const IPAddress' lvalue ParmVar 0x5632d94b1cf8 '' 'const IPAddress &'
|   `-ReturnStmt 0x5632d94df750 <col:7>
|     `-UnaryOperator 0x5632d94df738 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5632d94df728 <col:7> 'IPAddress *' this
`-CXXMethodDecl 0x5632d94b1d68 <col:7> col:7 implicit used operator= 'IPAddress &(IPAddress &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5632d94b1e78 <col:7> col:7 used 'IPAddress &&'
  `-CompoundStmt 0x5632d94b2090 <col:7>
    |-BinaryOperator 0x5632d94b2038 <col:7> 'uint32_t':'unsigned int' lvalue '='
    | |-MemberExpr 0x5632d94b1ff0 <col:7> 'uint32_t':'unsigned int' lvalue ->_addr 0x5632d9198580
    | | `-CXXThisExpr 0x5632d94b1fe0 <col:7> 'IPAddress *' this
    | `-ImplicitCastExpr 0x5632d94b2020 <col:7> 'uint32_t':'unsigned int' <LValueToRValue>
    |   `-MemberExpr 0x5632d94b1fb0 <col:7> 'uint32_t':'unsigned int' xvalue ._addr 0x5632d9198580
    |     `-CXXStaticCastExpr 0x5632d94b1f80 <col:7> 'IPAddress' xvalue static_cast<class IPAddress &&> <NoOp>
    |       `-DeclRefExpr 0x5632d94b1f50 <col:7> 'IPAddress' lvalue ParmVar 0x5632d94b1e78 '' 'IPAddress &&'
    `-ReturnStmt 0x5632d94b2080 <col:7>
      `-UnaryOperator 0x5632d94b2068 <col:7> 'IPAddress' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5632d94b2058 <col:7> 'IPAddress *' this

Layout: <CGRecordLayout
  LLVMType:%class.IPAddress = type { i32 }
  NonVirtualBaseLLVMType:%class.IPAddress = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPPrefixArg
         0 |   _Bool allow_bare_address
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d91a69b0 <../dummy_inc/click/ipaddress.hh:382:1, line:396:1> line:382:7 referenced class IPPrefixArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d91a6ac8 <col:1, col:7> col:7 implicit referenced class IPPrefixArg
|-AccessSpecDecl 0x5632d91a6b58 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5632d91a6c68 <line:383:5, line:385:5> line:383:5 used IPPrefixArg 'void (bool)'
| |-ParmVarDecl 0x5632d91a6b90 <col:17, col:44> col:22 used allow_bare_address_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5632d91a74a0 <col:44> 'bool' false
| |-CXXCtorInitializer Field 0x5632d91a7438 'allow_bare_address' 'bool'
| | `-ImplicitCastExpr 0x5632d91a7530 <line:384:23> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d91a74f0 <col:23> 'bool' lvalue ParmVar 0x5632d91a6b90 'allow_bare_address_' 'bool'
| `-CompoundStmt 0x5632d91a7578 <col:44, line:385:5>
|-CXXMethodDecl 0x5632d91a6fb8 <line:386:5, line:388:46> line:386:10 used parse 'bool (const String &, IPAddress &, IPAddress &, const ArgContext &) const'
| |-ParmVarDecl 0x5632d91a6d28 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5632d91a6da0 <line:387:9, col:20> col:20 result_addr 'IPAddress &'
| |-ParmVarDecl 0x5632d91a6e18 <col:33, col:44> col:44 result_mask 'IPAddress &'
| `-ParmVarDecl 0x5632d91a6e90 <line:388:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5632d91a74b0 <col:34> 'const ArgContext' lvalue Var 0x5632d9194910 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5632d91a7368 <line:389:5, line:394:5> line:389:10 parse 'bool (const String &, struct in_addr &, struct in_addr &, const ArgContext &) const'
| |-ParmVarDecl 0x5632d91a7088 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5632d91a7118 <line:390:9, col:25> col:25 used result_addr 'struct in_addr &'
| |-ParmVarDecl 0x5632d91a71a8 <col:38, col:54> col:54 used result_mask 'struct in_addr &'
| |-ParmVarDecl 0x5632d91a7220 <line:391:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5632d91a74d0 <col:34> 'const ArgContext' lvalue Var 0x5632d9194910 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5632d91a7788 <col:52, line:394:5>
|   `-ReturnStmt 0x5632d91a7778 <line:392:2, line:393:56>
|     `-CXXMemberCallExpr 0x5632d91a7738 <line:392:9, line:393:56> 'bool'
|       |-MemberExpr 0x5632d91a7708 <line:392:9> '<bound member function type>' ->parse 0x5632d91a6fb8
|       | `-CXXThisExpr 0x5632d91a76f8 <col:9> 'const IPPrefixArg *' implicit this
|       |-DeclRefExpr 0x5632d91a75f8 <col:15> 'const String' lvalue ParmVar 0x5632d91a7088 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5632d91a7648 <col:20, col:61> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5632d91a7618 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5632d91a7118 'result_addr' 'struct in_addr &'
|       |-CXXReinterpretCastExpr 0x5632d91a76a8 <line:393:8, col:49> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5632d91a7678 <col:38> 'struct in_addr':'in_addr' lvalue ParmVar 0x5632d91a71a8 'result_mask' 'struct in_addr &'
|       `-DeclRefExpr 0x5632d91a76d8 <col:52> 'const ArgContext' lvalue ParmVar 0x5632d91a7220 'args' 'const ArgContext &'
|-FieldDecl 0x5632d91a7438 <line:395:5, col:10> col:10 allow_bare_address 'bool'
|-CXXConstructorDecl 0x5632d94b0548 <line:382:7> col:7 implicit constexpr IPPrefixArg 'void (const IPPrefixArg &)' inline default trivial noexcept-unevaluated 0x5632d94b0548
| `-ParmVarDecl 0x5632d94b0658 <col:7> col:7 'const IPPrefixArg &'
|-CXXConstructorDecl 0x5632d94b06f8 <col:7> col:7 implicit constexpr IPPrefixArg 'void (IPPrefixArg &&)' inline default trivial noexcept-unevaluated 0x5632d94b06f8
| `-ParmVarDecl 0x5632d94b0808 <col:7> col:7 'IPPrefixArg &&'
`-CXXDestructorDecl 0x5632d94b08a8 <col:7> col:7 implicit referenced ~IPPrefixArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPPrefixArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPPrefixArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9417568 prev 0x5632d93b1968 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d9417660 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5632d94176f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5632d9417828 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5632d9417728 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5632d9418c50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d9418c30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5632d94187c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5632d9418ce0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d9418ca0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5632d9417728 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5632d9418830 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5632d9418d60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d9418d20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5632d9418890 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5632d9418da0 <col:54> 'bool' false
| `-CompoundStmt 0x5632d9418ea8 <col:61, line:38:5>
|   `-BinaryOperator 0x5632d9418e88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5632d9418e20 <col:9> 'const Element *' lvalue ->_context 0x5632d9418768
|     | `-CXXThisExpr 0x5632d9418e10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5632d9418e70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5632d9418e50 <col:20> 'int' 0
|-CXXConstructorDecl 0x5632d9417a38 <line:44:5, line:46:5> line:44:5 used ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5632d94178e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5632d9417960 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5632d9418c88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d9418c68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5632d9418768 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5632d9418f00 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d9418ec0 <col:20> 'const Element *' lvalue ParmVar 0x5632d94178e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5632d94187c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5632d9418f80 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d9418f40 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5632d9417960 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5632d9418830 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5632d9419000 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d9418fc0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5632d9418890 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5632d9419040 <col:73> 'bool' false
| `-CompoundStmt 0x5632d94190b8 <col:80, line:46:5>
|-CXXMethodDecl 0x5632d9417b68 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5632d9419130 <col:36, line:51:5>
|   `-ReturnStmt 0x5632d9419120 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5632d9419108 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5632d94190d8 <col:16> 'const Element *const' lvalue ->_context 0x5632d9418768
|         `-CXXThisExpr 0x5632d94190c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5632d9417c58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5632d94191b0 <col:32, line:57:5>
|   `-ReturnStmt 0x5632d94191a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5632d9419188 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5632d9419158 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5632d94187c8
|         `-CXXThisExpr 0x5632d9419148 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5632d9417d18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5632d9417ea0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5632d9417dd0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5632d9417ff0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5632d9417f60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5632d9418140 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5632d94180b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5632d9418348 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5632d94181f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5632d9418270 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5632d9418678 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5632d9418408 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5632d9418488 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5632d9418550 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5632d9418730 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5632d9418768 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5632d94187c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5632d9418830 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5632d9418890 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5632d94188e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5632d94188e0
| `-ParmVarDecl 0x5632d94189f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5632d9418a98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5632d9418a98
| `-ParmVarDecl 0x5632d9418ba8 <col:7> col:7 'const ArgContext &'
|-CXXConstructorDecl 0x5632d94b0bd8 <col:7> col:7 implicit constexpr ArgContext 'void (ArgContext &&)' inline default trivial noexcept-unevaluated 0x5632d94b0bd8
| `-ParmVarDecl 0x5632d94b0ce8 <col:7> col:7 'ArgContext &&'
`-CXXDestructorDecl 0x5632d94b0e70 <col:7> col:7 implicit referenced ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93150f0 <../elements/ethernet/arpresponder.hh:116:5, line:120:5> line:116:12 referenced struct Entry definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d9315208 <col:5, col:12> col:12 implicit struct Entry
|-FieldDecl 0x5632d93152a8 <line:117:2, col:12> col:12 referenced dst 'IPAddress'
|-FieldDecl 0x5632d9315308 <line:118:2, col:12> col:12 referenced mask 'IPAddress'
|-FieldDecl 0x5632d9315368 <line:119:2, col:15> col:15 referenced ena 'EtherAddress'
|-CXXConstructorDecl 0x5632d94b1028 <line:116:12> col:12 implicit used Entry 'void () noexcept(false)' inline default
| |-CXXCtorInitializer Field 0x5632d93152a8 'dst' 'IPAddress'
| | `-CXXConstructExpr 0x5632d94b1420 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5632d9315308 'mask' 'IPAddress'
| | `-CXXConstructExpr 0x5632d94b1470 <col:12> 'IPAddress' 'void ()'
| |-CXXCtorInitializer Field 0x5632d9315368 'ena' 'EtherAddress'
| | `-CXXConstructExpr 0x5632d94b14c0 <col:12> 'EtherAddress' 'void ()'
| `-CompoundStmt 0x5632d94b1528 <col:12>
|-CXXConstructorDecl 0x5632d94b1100 <col:12> col:12 implicit constexpr Entry 'void (const ARPResponder::Entry &)' inline default trivial noexcept-unevaluated 0x5632d94b1100
| `-ParmVarDecl 0x5632d94b11e8 <col:12> col:12 'const ARPResponder::Entry &'
|-CXXConstructorDecl 0x5632d94b1258 <col:12> col:12 implicit constexpr Entry 'void (ARPResponder::Entry &&)' inline default trivial noexcept-unevaluated 0x5632d94b1258
| `-ParmVarDecl 0x5632d94b1368 <col:12> col:12 'ARPResponder::Entry &&'
`-CXXDestructorDecl 0x5632d94b1568 <col:12> col:12 implicit referenced ~Entry 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.ARPResponder::Entry" = type <{ %class.IPAddress, %class.IPAddress, %class.EtherAddress, [2 x i8] }>
  NonVirtualBaseLLVMType:%"struct.ARPResponder::Entry.base" = type <{ %class.IPAddress, %class.IPAddress, %class.EtherAddress }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93b1b28 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d93b1c48 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5632d93b1cd8 <col:25, col:31> col:25 public
|-TypedefDecl 0x5632d93b1d10 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x5632d8e312d0 'void'
|-CXXConstructorDecl 0x5632d93b1e58 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5632d93b1d80 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5632d93b30e0 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5632d93b2a10 'flags_' 'int'
| | `-ImplicitCastExpr 0x5632d93b3180 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d93b3140 <col:45> 'int' lvalue ParmVar 0x5632d93b1d80 'flags' 'int'
| `-CompoundStmt 0x5632d93b31c8 <col:52, col:53>
|-CXXMethodDecl 0x5632d93b2118 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5632d93b1f18 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5632d93b1fb8 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5632d93b2030 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5632d93b3100 <col:88> 'const ArgContext' lvalue Var 0x5632d93b1ac0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5632d9312e58 <col:100, line:210:5>
|   `-ReturnStmt 0x5632d9312e48 <line:209:9, col:46>
|     `-CallExpr 0x5632d9312df0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5632d9312dd8 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5632d9312d90 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5632d93b2cd8 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5632d93b3240 <col:22> 'const String' lvalue ParmVar 0x5632d93b1f18 'str' 'const String &'
|       |-DeclRefExpr 0x5632d93b3260 <col:27> 'EtherAddress' lvalue ParmVar 0x5632d93b1fb8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5632d93b3280 <col:34> 'const ArgContext' lvalue ParmVar 0x5632d93b2030 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5632d9312e30 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5632d93b32b0 <col:40> 'int' lvalue ->flags_ 0x5632d93b2a10
|           `-CXXThisExpr 0x5632d93b32a0 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5632d93b23b8 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5632d93b21e0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5632d93b2260 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5632d93b22d8 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5632d93b3120 <col:89> 'const ArgContext' lvalue Var 0x5632d93b1ac0 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5632d9313030 <col:101, line:213:5>
|   `-ReturnStmt 0x5632d9313020 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5632d9312fe8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5632d9312fb8 <col:9> '<bound member function type>' ->parse 0x5632d93b2118
|       | `-CXXThisExpr 0x5632d9312fa8 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5632d9312ed8 <col:15> 'const String' lvalue ParmVar 0x5632d93b21e0 'str' 'const String &'
|       |-UnaryOperator 0x5632d9312f70 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5632d9312f40 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5632d9312f28 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5632d9312ef8 <col:54> 'unsigned char *' lvalue ParmVar 0x5632d93b2260 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5632d9312f88 <col:62> 'const ArgContext' lvalue ParmVar 0x5632d93b22d8 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5632d93b2678 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5632d93b2480 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5632d93b24f8 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5632d93b2598 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5632d9313218 <col:82, line:216:5>
|   `-ReturnStmt 0x5632d9313208 <line:215:9, col:53>
|     `-CallExpr 0x5632d93131b0 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5632d9313198 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5632d9313150 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5632d93b3008 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5632d93130b0 <col:29> 'const String' lvalue ParmVar 0x5632d93b2480 'str' 'const String &'
|       |-DeclRefExpr 0x5632d93130d0 <col:34> 'EtherAddress' lvalue ParmVar 0x5632d93b24f8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5632d93130f0 <col:41> 'Args' lvalue ParmVar 0x5632d93b2598 'args' 'Args &'
|       `-ImplicitCastExpr 0x5632d93131f0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5632d9313120 <col:47> 'int' lvalue ->flags_ 0x5632d93b2a10
|           `-CXXThisExpr 0x5632d9313110 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5632d93b2918 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5632d93b2740 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5632d93b27c0 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5632d93b2838 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5632d93133f0 <col:83, line:219:5>
|   `-ReturnStmt 0x5632d93133e0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5632d93133a8 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5632d9313378 <col:9> '<bound member function type>' ->direct_parse 0x5632d93b2678
|       | `-CXXThisExpr 0x5632d9313368 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5632d9313298 <col:22> 'const String' lvalue ParmVar 0x5632d93b2740 'str' 'const String &'
|       |-UnaryOperator 0x5632d9313330 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5632d9313300 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5632d93132e8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5632d93132b8 <col:61> 'unsigned char *' lvalue ParmVar 0x5632d93b27c0 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5632d9313348 <col:69> 'Args' lvalue ParmVar 0x5632d93b2838 'args' 'Args &'
|-AccessSpecDecl 0x5632d93b29d0 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5632d93b2a10 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5632d93b2cd8 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5632d93b2a70 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5632d93b2ae8 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5632d93b2b60 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5632d93b2be0 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5632d93b3008 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5632d93b2da8 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5632d93b2e20 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5632d93b2e98 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5632d93b2f18 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x5632d94df888 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5632d94df888
| `-ParmVarDecl 0x5632d94df998 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x5632d94dfa38 <col:7> col:7 implicit constexpr EtherAddressArg 'void (EtherAddressArg &&)' inline default trivial noexcept-unevaluated 0x5632d94dfa38
| `-ParmVarDecl 0x5632d94dfb48 <col:7> col:7 'EtherAddressArg &&'
`-CXXDestructorDecl 0x5632d94dfc10 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9440c80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5632d9440e58 prev 0x5632d9440c80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5632d9440ee8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5632d9440f10 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d9442ae0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5632d9442a90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5632d94413c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5632d94412c0 'type'
|     `-TemplateSpecializationType 0x5632d9441250 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5632d9441130 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5632d9441110 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5632d94410f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5632d9441230 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5632d9441150 'char_array'
|-TypedefDecl 0x5632d9442b98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5632d9442b60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5632d9442b40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5632d9442ae0 'type'
|     `-ElaboratedType 0x5632d9442a90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5632d94413c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5632d94412c0 'type'
|         `-TemplateSpecializationType 0x5632d9441250 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5632d9441130 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5632d9441110 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5632d94410f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5632d9441230 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5632d9441150 'char_array'
|-CXXMethodDecl 0x5632d9442d18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5632d9442c28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5632d9442e08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5632d9442ee8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5632d94431b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5632d94430c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5632d94433f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5632d9443270 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d94432e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d94435c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5632d94434b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d9443530 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944bb20 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5632d944bbf0 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5632d944be38 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5632d944bcb0 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5632d944bd28 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944c098 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5632d944bf08 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5632d944bf80 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944c258 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5632d944c168 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944c418 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5632d944c320 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944c4d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d944c580 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5632d944c7b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5632d944c630 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5632d944c6a8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5632d944ca58 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5632d944c960 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5632d944cb20 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5632d944cb70 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5632d944cbc0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d943f898 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5632d943faa8 prev 0x5632d943f898 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5632d9440bf0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5632d9440ba0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5632d9440b80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5632d9440a30 'type'
|     `-SubstTemplateTypeParmType 0x5632d9440850 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5632d90f7ec0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d90f7e68 'T'
|       `-RecordType 0x5632d94403a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5632d94402b8 'sized_array_memory'
|-FieldDecl 0x5632d944cc10 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5632d944cc60 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5632d944cc98 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|   |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5632d912fb58 'T'
|   `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944cd28 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5632d944ccf0 'int &'
|   `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944cde8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5632d944cdb0 'const int &'
|   `-QualType 0x5632d943fb41 'const int' const
|     `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944ce78 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5632d944ce40 'int *'
|   `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944cf08 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5632d944ced0 'const int *'
|   `-QualType 0x5632d943fb41 'const int' const
|     `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944daf0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5632d944daa0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5632d944da80 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5632d944da10 'type'
|     `-SubstTemplateTypeParmType 0x5632d944d7d0 'int' sugar
|       |-TemplateTypeParmType 0x5632d9102cc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d9102c70 'T'
|       `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944db58 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5632d944cdb0 'const int &'
|   `-QualType 0x5632d943fb41 'const int' const
|     `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944dbb0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944dc18 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5632d944ce40 'int *'
|   `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|     |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5632d912fb58 'T'
|     `-BuiltinType 0x5632d8e31370 'int'
|-TypedefDecl 0x5632d944dc80 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5632d944ced0 'const int *'
|   `-QualType 0x5632d943fb41 'const int' const
|     `-SubstTemplateTypeParmType 0x5632d943fb40 'int' sugar
|       |-TemplateTypeParmType 0x5632d912fbb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5632d912fb58 'T'
|       `-BuiltinType 0x5632d8e31370 'int'
|-EnumDecl 0x5632d944dcd8 <line:134:5> col:5
| `-EnumConstantDecl 0x5632d944ddd0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5632d944ddb0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5632d9131238 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5632d9131210 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5632d91311f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5632d944de58 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x5632d944e0a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d944df10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d944dfb0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5632d944e368 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5632d944e250 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5632d944e628 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5632d944e510 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5632d944e970 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5632d944e850 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5632d944ec80 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5632d944eb60 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5632d944ef70 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d944edb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d944ee30 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5632d944f098 <line:150:5, col:55> col:49 used begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5632d944f178 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f1d0 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f218 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5632d944f2c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f320 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f3e8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5632d944f498 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f4f0 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f538 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5632d944f5e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f640 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f688 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5632d944f738 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f790 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f7d8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5632d944f888 <col:20> Inherited
| `-OptimizeNoneAttr 0x5632d944f8e0 <col:30> Inherited
|-CXXMethodDecl 0x5632d944f908 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d944f9b8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5632d944fa68 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5632d944fc28 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d944fb18 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5632d944fb90 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5632d944fd78 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5632d944fce8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d944ff28 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5632d944fe30 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d944ffe0 <col:20>
| `-OptimizeNoneAttr 0x5632d9450038 <col:30>
|-CXXMethodDecl 0x5632d9450158 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5632d9450060 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5632d9450210 <col:20>
| `-OptimizeNoneAttr 0x5632d9450268 <col:30>
|-CXXMethodDecl 0x5632d9450320 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d9450290 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9450468 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d94503d8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9450598 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5632d94506c8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5632d9450798 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5632d9450868 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5632d94509a8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5632d9450918 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9450af0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5632d9450a60 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5632d9450c38 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5632d9450ba8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d9450cf0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5632d9450df0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5632d9450d60 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5632d9450ea8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5632d9450f68 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5632d9451068 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5632d94511e8 <line:180:5, col:48> col:17 used push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d9451128 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5632d94519a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5632d94512a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5632d9451908 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5632d9451808 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5632d9451a88 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5632d9451bd8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5632d9451b48 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5632d9451c90 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5632d9451ed8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5632d9451d50 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5632d9451dc8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5632d9452098 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5632d9451fa8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5632d94522e8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5632d9452160 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5632d94521d8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5632d94523a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5632d9452608 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5632d9452510 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5632d94526d8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5632d94e3410 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorVeneer
         0 |   class ErrorHandler (primary base)
         0 |     (ErrorHandler vtable pointer)
         8 |     int _nerrors
        16 |   class ErrorHandler * _errh
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class PrefixErrorHandler
         0 |   class ErrorVeneer (primary base)
         0 |     class ErrorHandler (primary base)
         0 |       (ErrorHandler vtable pointer)
         8 |       int _nerrors
        16 |     class ErrorHandler * _errh
        24 |   class String _prefix
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d948e958 <../dummy_inc/click/error.hh:618:1, line:638:1> line:618:7 referenced class ErrorVeneer definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorHandler'
|-CXXRecordDecl 0x5632d948eab8 <col:1, col:7> col:7 implicit referenced class ErrorVeneer
|-AccessSpecDecl 0x5632d948eb48 <col:43, col:49> col:43 public
|-CXXConstructorDecl 0x5632d948ec58 <line:625:5, line:627:5> line:625:5 used ErrorVeneer 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5632d948eb80 <col:17, col:31> col:31 used errh 'ErrorHandler *'
| |-CXXCtorInitializer 'ErrorHandler'
| | `-CXXConstructExpr 0x5632d948fc70 <col:5> 'ErrorHandler' 'void ()'
| |-CXXCtorInitializer Field 0x5632d948f418 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5632d948fc30 <line:626:10> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5632d948fbf0 <col:10> 'ErrorHandler *' lvalue ParmVar 0x5632d948eb80 'errh' 'ErrorHandler *'
| `-CompoundStmt 0x5632d948fce0 <col:16, line:627:5>
|-CXXMethodDecl 0x5632d948ee30 <line:629:5, col:48> col:12 vformat 'String (const char *, __va_list_tag *)'
| |-Overrides: [ 0x5632d9489450 ErrorHandler::vformat 'String (const char *, __va_list_tag *)' ]
| |-ParmVarDecl 0x5632d948ed20 <col:20, col:32> col:32 fmt 'const char *'
| `-ParmVarDecl 0x5632d948ed98 <col:37, col:45> col:45 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5632d948ef80 <line:630:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5632d94896f0 ErrorHandler::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5632d948eef0 <col:21, col:35> col:35 str 'const String &'
|-CXXMethodDecl 0x5632d948f1d8 <line:631:5, col:61> col:11 emit 'void *(const String &, void *, bool)'
| |-Overrides: [ 0x5632d9489990 ErrorHandler::emit 'void *(const String &, void *, bool)' ]
| |-ParmVarDecl 0x5632d948f038 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5632d948f0b8 <col:35, col:41> col:41 user_data 'void *'
| `-ParmVarDecl 0x5632d948f130 <col:52, col:57> col:57 more 'bool'
|-CXXMethodDecl 0x5632d948f338 <line:632:5, col:27> col:10 account 'void (int)'
| |-Overrides: [ 0x5632d9489af0 ErrorHandler::account 'void (int)' ]
| `-ParmVarDecl 0x5632d948f2a8 <col:18, col:22> col:22 level 'int'
|-AccessSpecDecl 0x5632d948f3e0 <line:634:3, col:10> col:3 private
|-FieldDecl 0x5632d948f418 <line:636:5, col:19> col:19 _errh 'ErrorHandler *'
|-CXXConstructorDecl 0x5632d948f498 <line:618:7> col:7 implicit constexpr ErrorVeneer 'void (const ErrorVeneer &)' inline default noexcept-unevaluated 0x5632d948f498
| `-ParmVarDecl 0x5632d948f5a8 <col:7> col:7 'const ErrorVeneer &'
|-CXXConstructorDecl 0x5632d948f648 <col:7> col:7 implicit constexpr ErrorVeneer 'void (ErrorVeneer &&)' inline default noexcept-unevaluated 0x5632d948f648
| `-ParmVarDecl 0x5632d948f758 <col:7> col:7 'ErrorVeneer &&'
|-CXXMethodDecl 0x5632d948f7f8 <col:7> col:7 implicit operator= 'ErrorVeneer &(const ErrorVeneer &)' inline default noexcept-unevaluated 0x5632d948f7f8
| `-ParmVarDecl 0x5632d948f908 <col:7> col:7 'const ErrorVeneer &'
|-CXXMethodDecl 0x5632d948f978 <col:7> col:7 implicit operator= 'ErrorVeneer &(ErrorVeneer &&)' inline default noexcept-unevaluated 0x5632d948f978
| `-ParmVarDecl 0x5632d948fa88 <col:7> col:7 'ErrorVeneer &&'
`-CXXDestructorDecl 0x5632d948fb10 <col:7> col:7 implicit used ~ErrorVeneer 'void () noexcept' inline default
  |-Overrides: [ 0x5632d9486560 ErrorHandler::~ErrorHandler 'void () noexcept' ]
  `-CompoundStmt 0x5632d9491b98 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  NonVirtualBaseLLVMType:%class.ErrorVeneer = type { %class.ErrorHandler.base, %class.ErrorHandler* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d94935e8 <../dummy_inc/click/error.hh:808:1, line:821:1> line:808:7 referenced class PrefixErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'ErrorVeneer'
|-CXXRecordDecl 0x5632d9493748 <col:1, col:7> col:7 implicit referenced class PrefixErrorHandler
|-AccessSpecDecl 0x5632d94937d8 <col:49, col:55> col:49 public
|-CXXConstructorDecl 0x5632d9493998 <line:813:5, col:64> col:5 used PrefixErrorHandler 'void (ErrorHandler *, const String &)'
| |-ParmVarDecl 0x5632d9493810 <col:24, col:38> col:38 errh 'ErrorHandler *'
| `-ParmVarDecl 0x5632d9493888 <col:44, col:58> col:58 prefix 'const String &'
|-CXXMethodDecl 0x5632d9493af0 <line:815:5, col:38> col:12 decorate 'String (const String &)'
| |-Overrides: [ 0x5632d948ef80 ErrorVeneer::decorate 'String (const String &)' ]
| `-ParmVarDecl 0x5632d9493a60 <col:21, col:35> col:35 str 'const String &'
|-AccessSpecDecl 0x5632d9493b98 <line:817:3, col:10> col:3 private
|-FieldDecl 0x5632d9493bd0 <line:819:5, col:12> col:12 _prefix 'String'
|-CXXConstructorDecl 0x5632d9493c48 <line:808:7> col:7 implicit PrefixErrorHandler 'void (const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5632d9493c48
| `-ParmVarDecl 0x5632d9493d58 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXConstructorDecl 0x5632d9493df8 <col:7> col:7 implicit PrefixErrorHandler 'void (PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5632d9493df8
| `-ParmVarDecl 0x5632d9493f08 <col:7> col:7 'PrefixErrorHandler &&'
|-CXXMethodDecl 0x5632d9493fa8 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(const PrefixErrorHandler &)' inline default noexcept-unevaluated 0x5632d9493fa8
| `-ParmVarDecl 0x5632d94940b8 <col:7> col:7 'const PrefixErrorHandler &'
|-CXXMethodDecl 0x5632d9494128 <col:7> col:7 implicit operator= 'PrefixErrorHandler &(PrefixErrorHandler &&)' inline default noexcept-unevaluated 0x5632d9494128
| `-ParmVarDecl 0x5632d9494238 <col:7> col:7 'PrefixErrorHandler &&'
`-CXXDestructorDecl 0x5632d94942c0 <col:7> col:7 implicit used ~PrefixErrorHandler 'void () noexcept' inline default
  |-Overrides: [ 0x5632d948fb10 ErrorVeneer::~ErrorVeneer 'void () noexcept' ]
  `-CompoundStmt 0x5632d94e58e0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  NonVirtualBaseLLVMType:%class.PrefixErrorHandler = type { %class.ErrorVeneer, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | struct click_arp
         0 |   uint16_t ar_hrd
         2 |   uint16_t ar_pro
         4 |   uint8_t ar_hln
         5 |   uint8_t ar_pln
         6 |   uint16_t ar_op
           | [sizeof=8, dsize=8, align=2,
           |  nvsize=8, nvalign=2]

*** Dumping AST Record Layout
         0 | struct click_ether_arp
         0 |   struct click_arp ea_hdr
         0 |     uint16_t ar_hrd
         2 |     uint16_t ar_pro
         4 |     uint8_t ar_hln
         5 |     uint8_t ar_pln
         6 |     uint16_t ar_op
         8 |   uint8_t [6] arp_sha
        14 |   uint8_t [4] arp_spa
        18 |   uint8_t [6] arp_tha
        24 |   uint8_t [4] arp_tpa
           | [sizeof=28, dsize=28, align=2,
           |  nvsize=28, nvalign=2]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9152690 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d91527a8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5632d9152838 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5632d9152908 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5632d91529f0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d9152c08 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5632d9152ab0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9152db8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5632d9152cc0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5632d9152f00 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5632d9152e70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5632d9153048 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5632d9152fb8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9153190 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5632d9153100 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9153258 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5632d91533a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5632d9153310 <col:28> col:31 'int'
|-CXXMethodDecl 0x5632d9153468 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5632d91535b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5632d9153520 <col:28> col:31 'int'
|-CXXMethodDecl 0x5632d9153728 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5632d9153668 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9153870 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5632d91537e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9153938 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5632d9153af8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5632d91539e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5632d9153a60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9153d48 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5632d9153bb8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d9153c30 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5632d9153df8 <col:86> "" ""
|-CXXMethodDecl 0x5632d9154068 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5632d9153ed8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5632d9153f50 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9154218 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5632d9154128 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5632d91543c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5632d91542d0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5632d9154698 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5632d9154480 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5632d91544f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5632d9154570 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9154978 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5632d9154760 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5632d91547d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d9154850 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5632d9154a30 <col:115> "" ""
|-AccessSpecDecl 0x5632d9154aa0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5632d9154ad8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9155ff0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5632d9155ff0
| `-ParmVarDecl 0x5632d91560f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5632d9156198 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5632d9156198
| `-ParmVarDecl 0x5632d91562a8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5632d918b8d8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5632d937d6d0 <col:7>
|-CXXConstructorDecl 0x5632d918b9b0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5632d918b9b0
| `-ParmVarDecl 0x5632d918bac8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5632d918bb38 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5632d918bb38
| `-ParmVarDecl 0x5632d918bc48 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5632d93800d0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d936c278 prev 0x5632d9361480 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d936c370 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5632d936c460 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5632d936c588 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5632d936c708 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5632d936c888 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5632d936ca08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5632d937d838 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5632d937e0a8 <col:11>
|-CXXDestructorDecl 0x5632d937d910 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5632d937da48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5632d937da48
| `-ParmVarDecl 0x5632d937db58 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5632d937dbf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5632d937dbf8
| `-ParmVarDecl 0x5632d937dd08 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5632d9380ac8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d9380bd8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5632d9380e58 <col:11>
|   `-ReturnStmt 0x5632d9380e48 <col:11>
|     `-UnaryOperator 0x5632d9380e30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5632d9380e20 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5632d9380c48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5632d9380c48
  `-ParmVarDecl 0x5632d9380d58 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d936ca70 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d936cb88 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5632d936cc28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5632d936cc90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5632d936ccf8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5632d936cd60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5632d936cdc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5632d936ce80 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5632d936cee0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5632d936cf40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5632d937d748 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5632d936cc28 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5632d937e0b8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5632d937e110 <col:12>
|-CXXConstructorDecl 0x5632d937dd78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5632d937dd78
| `-ParmVarDecl 0x5632d937de88 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5632d937df28 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5632d937df28
| `-ParmVarDecl 0x5632d937e038 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5632d93801b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d935ab90 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5632d935aca8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5632d935ad38 <col:16, col:22> col:16 public
|-EnumDecl 0x5632d935ad60 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5632d935ae60 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5632d935af40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d935ae40 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5632d935ae20 <col:21> 'int' 28
| `-EnumConstantDecl 0x5632d935aef0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5632d935af58 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d935aed0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5632d935aeb0 <col:22> 'int' 64
|-CXXMethodDecl 0x5632d935b298 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5632d935af80 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d935b000 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5632d935b078 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d935b0f0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935b358 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5632d935b558 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5632d935b3d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5632d935b448 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935b608 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5632d935b768 <line:55:5, col:91> col:35 used make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5632d935b678 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935b810 <col:72> warn_unused_result ""
|-TypedefDecl 0x5632d935bb70 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5632d935bb00 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5632d935baa0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5632d935ba60 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5632d8e312d0 'void'
|       |-PointerType 0x5632d90daf30 'unsigned char *'
|       | `-BuiltinType 0x5632d8e313d0 'unsigned char'
|       |-TypedefType 0x5632d8ed7280 'size_t' sugar
|       | |-Typedef 0x5632d8ea1b20 'size_t'
|       | `-BuiltinType 0x5632d8e31430 'unsigned long'
|       `-PointerType 0x5632d8e31ad0 'void *'
|         `-BuiltinType 0x5632d8e312d0 'void'
|-CXXMethodDecl 0x5632d935bfe8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5632d935bbe0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5632d935bc58 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d935bcf0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5632d935bd70 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5632d93766e0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5632d93766c8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5632d9376690 <col:58> 'int' 0
| |-ParmVarDecl 0x5632d935bdf0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5632d9376708 <col:76> 'int' 0
| |-ParmVarDecl 0x5632d935be70 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5632d9376728 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5632d935c0b8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5632d935c138 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5632d935c1f8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5632d935c298 <col:20>
| `-OptimizeNoneAttr 0x5632d935c2f0 <col:30>
|-CXXMethodDecl 0x5632d935c368 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5632d935c408 <col:20>
| `-OptimizeNoneAttr 0x5632d935c460 <col:30>
|-CXXMethodDecl 0x5632d935c4d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5632d935c578 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5632d935c628 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5632d935c6c8 <col:20>
| |-OptimizeNoneAttr 0x5632d935c720 <col:30>
| `-WarnUnusedResultAttr 0x5632d935c748 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5632d935c7a0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5632d935c840 <col:20>
| `-OptimizeNoneAttr 0x5632d935c898 <col:30>
|-CXXMethodDecl 0x5632d935c8e8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5632d935c988 <col:20>
| `-OptimizeNoneAttr 0x5632d935c9e0 <col:30>
|-CXXMethodDecl 0x5632d935ca28 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5632d935cac8 <col:20>
| `-OptimizeNoneAttr 0x5632d935cb20 <col:30>
|-CXXMethodDecl 0x5632d935cb68 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d935cc28 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d935ccf0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5632d935cdb8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5632d935ce78 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d935cf98 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5632d93767f0 <col:54, line:99:5>
|   `-ReturnStmt 0x5632d93767e0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5632d93767c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5632d9376798 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5632d936d278
|         `-CXXThisExpr 0x5632d9376788 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5632d935d138 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5632d935d048 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5632d93768a0 <col:67, line:103:5>
|   `-BinaryOperator 0x5632d9376880 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5632d9376818 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5632d936d278
|     | `-CXXThisExpr 0x5632d9376808 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5632d9376868 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5632d9376848 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5632d935d048 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5632d935d230 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5632d9376920 <col:33, line:107:5>
|   `-ReturnStmt 0x5632d9376910 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5632d93768f8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5632d93768c8 <col:16> 'void *' lvalue ->_destructor_argument 0x5632d936d2e0
|         `-CXXThisExpr 0x5632d93768b8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5632d935d2f0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5632d9376f50 <col:25, line:113:5>
|   |-ParenExpr 0x5632d9376c98 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5632d9376c68 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5632d93769d8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5632d93769b0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5632d9376978 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5632d9376948 <col:24> '<bound member function type>' ->shared 0x5632d935c368
|   |   |       `-ImplicitCastExpr 0x5632d9376998 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5632d9376938 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5632d9376a38 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d9376a18 <col:42> 'int' 0
|   |   `-CallExpr 0x5632d9376bc8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5632d9376bb0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9376b90 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9376c08 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9376aa8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5632d9376c20 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9376ad0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d9376c38 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9376b08 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5632d9376c50 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9376b78 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9376b60 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9376b28 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5632d9376e98 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5632d9376cc8 <col:2> 'unsigned char *' lvalue ->_head 0x5632d936d080
|   | | `-CXXThisExpr 0x5632d9376cb8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5632d9376e80 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5632d9376e60 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5632d9376d08 <col:10> 'unsigned char *' lvalue ->_data 0x5632d936d0e8
|   |     | `-CXXThisExpr 0x5632d9376cf8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5632d9376e48 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5632d9376e28 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5632d9376d48 <col:18> 'unsigned char *' lvalue ->_tail 0x5632d936d150
|   |         | `-CXXThisExpr 0x5632d9376d38 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5632d9376e10 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5632d9376df0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5632d9376d88 <col:26> 'unsigned char *' lvalue ->_end 0x5632d936d1b8
|   |             | `-CXXThisExpr 0x5632d9376d78 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5632d9376dd8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5632d9376db8 <col:33> 'int' 0
|   `-BinaryOperator 0x5632d9376f30 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5632d9376ec8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5632d936d278
|     | `-CXXThisExpr 0x5632d9376eb8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5632d9376f18 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5632d9376ef8 <col:16> 'int' 0
|-CXXMethodDecl 0x5632d935d430 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5632d935d3a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d935d4d8 <col:20>
| |-OptimizeNoneAttr 0x5632d935d530 <col:30>
| `-WarnUnusedResultAttr 0x5632d935d558 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5632d935d628 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5632d935d598 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d935d6d0 <col:20>
| |-OptimizeNoneAttr 0x5632d935d728 <col:30>
| `-WarnUnusedResultAttr 0x5632d935d750 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5632d935d888 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5632d935d790 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935d930 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5632d935da30 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5632d935d9a0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d935dad8 <col:20>
| `-OptimizeNoneAttr 0x5632d935db30 <col:30>
|-CXXMethodDecl 0x5632d935dbf8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5632d935db68 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935dca0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5632d935dda0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5632d935dd10 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5632d935de48 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5632d935df48 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5632d935deb8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d935dff0 <col:20>
| `-OptimizeNoneAttr 0x5632d935e048 <col:30>
|-CXXMethodDecl 0x5632d935e1d8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5632d935e088 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5632d935e100 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5632d9376748 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5632d935e288 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5632d935e488 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5632d935e300 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5632d935e378 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d935e698 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5632d935e548 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5632d935e5c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d935e8a8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5632d935e758 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5632d935e7d8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5632d9376758 <col:39> 'int' 0
|-CXXMethodDecl 0x5632d935e978 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5632d935ea40 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5632d935eb08 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5632d935ebc8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d935ec90 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5632d935edd8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5632d935ed48 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5632d935efa8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5632d935ee98 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5632d935ef10 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d935f078 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5632d935f138 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5632d935f1d8 <col:20>
| `-OptimizeNoneAttr 0x5632d935f230 <col:30>
|-CXXMethodDecl 0x5632d935f280 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5632d935f320 <col:20>
| `-OptimizeNoneAttr 0x5632d935f378 <col:30>
|-CXXMethodDecl 0x5632d935f3c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5632d935f488 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d935f550 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5632d935f5f0 <col:20>
| `-OptimizeNoneAttr 0x5632d935f648 <col:30>
|-CXXMethodDecl 0x5632d935f798 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5632d935f688 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5632d935f700 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d935f8e8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5632d935f858 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d935f9c0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5632d935fa80 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5632d935fb20 <col:20>
| `-OptimizeNoneAttr 0x5632d935fb78 <col:30>
|-CXXMethodDecl 0x5632d935fbc8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5632d935fc68 <col:20>
| `-OptimizeNoneAttr 0x5632d935fcc0 <col:30>
|-CXXMethodDecl 0x5632d935fd10 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5632d935fdd8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5632d935fe78 <col:20>
| `-OptimizeNoneAttr 0x5632d935fed0 <col:30>
|-CXXMethodDecl 0x5632d935ff18 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5632d9360038 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5632d93601a8 <line:305:5, col:57> col:17 used set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5632d93600e8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5632d9360298 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5632d9360338 <col:20>
| `-OptimizeNoneAttr 0x5632d9360390 <col:30>
|-CXXMethodDecl 0x5632d93603e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5632d93604a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5632d93606d8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5632d9360550 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5632d93605c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d9360788 <col:20>
| `-OptimizeNoneAttr 0x5632d93607e0 <col:30>
|-CXXMethodDecl 0x5632d9360888 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5632d9360928 <col:20>
| `-OptimizeNoneAttr 0x5632d9360980 <col:30>
|-CXXMethodDecl 0x5632d93609d0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5632d9360a70 <col:20>
| `-OptimizeNoneAttr 0x5632d9360ac8 <col:30>
|-CXXMethodDecl 0x5632d9360b10 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5632d9360bb0 <col:20>
| `-OptimizeNoneAttr 0x5632d9360c08 <col:30>
|-CXXMethodDecl 0x5632d9360d08 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5632d9360c40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5632d9360db0 <col:20>
| `-OptimizeNoneAttr 0x5632d9360e08 <col:30>
|-CXXMethodDecl 0x5632d9360fc8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5632d9360e40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5632d9360eb8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d9361078 <col:20>
| `-OptimizeNoneAttr 0x5632d93610d0 <col:30>
|-CXXMethodDecl 0x5632d9361178 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5632d9361298 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5632d93613b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5632d9361458 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5632d9361480 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5632d93615a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5632d9361648 <col:20>
| `-OptimizeNoneAttr 0x5632d93616a0 <col:30>
|-CXXMethodDecl 0x5632d9361748 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5632d93617e8 <col:20>
| `-OptimizeNoneAttr 0x5632d9361840 <col:30>
|-AccessSpecDecl 0x5632d9361868 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5632d9361890 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5632d9361990 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5632d93619e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9361970 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5632d9361950 <col:14> 'int' 48
|-CXXMethodDecl 0x5632d9361a48 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5632d9361ae8 <col:20>
| `-OptimizeNoneAttr 0x5632d9361b40 <col:30>
|-CXXMethodDecl 0x5632d9361bb8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5632d9361c58 <col:20>
| `-OptimizeNoneAttr 0x5632d9361cb0 <col:30>
|-CXXMethodDecl 0x5632d9361d78 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5632d9361ce8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5632d9361f18 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5632d93620b8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5632d9361fc8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5632d9362160 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5632d9362260 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362610 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9362240 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d9362220 <col:9> 'int' 0
| |-EnumConstantDecl 0x5632d93622f0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362628 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93622d0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5632d93622b0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5632d9362380 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362640 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9362360 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5632d9362340 <col:14> 'int' 2
| |-EnumConstantDecl 0x5632d9362410 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362658 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93623f0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5632d93623d0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5632d93624a0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362670 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9362480 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5632d9362460 <col:13> 'int' 4
| |-EnumConstantDecl 0x5632d9362530 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5632d9362688 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9362510 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5632d93624f0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5632d93625c0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5632d93626a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d93625a0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5632d9362580 <col:14> 'int' 6
|-CXXMethodDecl 0x5632d9362708 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5632d93627a8 <col:20>
| `-OptimizeNoneAttr 0x5632d9362800 <col:30>
|-CXXMethodDecl 0x5632d93628f8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5632d9362838 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5632d93629a0 <col:20>
| `-OptimizeNoneAttr 0x5632d93629f8 <col:30>
|-CXXMethodDecl 0x5632d9362a68 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5632d9362b90 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5632d9362d08 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5632d9362c40 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5632d9362dd0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5632d9362e98 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5632d9362fd8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5632d9362f48 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5632d9363080 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5632d9363180 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5632d9363380 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9363160 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d9363140 <col:23> 'int' 0
| |-EnumConstantDecl 0x5632d9363210 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5632d9363398 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93631f0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5632d93631d0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5632d93632a0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5632d93633b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9363280 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d9363260 <col:24> 'int' 0
| `-EnumConstantDecl 0x5632d9363330 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5632d93633c8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9363310 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5632d93632f0 <col:47> 'int' 16
|-CXXMethodDecl 0x5632d9363428 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5632d9363598 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5632d93634d8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5632d9363640 <col:20>
| `-OptimizeNoneAttr 0x5632d9363698 <col:30>
|-CXXMethodDecl 0x5632d93636e8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5632d9377070 <col:18, col:36>
|   `-ReturnStmt 0x5632d9377060 <col:20, col:33>
|     `-ImplicitCastExpr 0x5632d9377048 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5632d9377028 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5632d9376ff8 <col:27> '<bound member function type>' ->xanno 0x5632d9361748
|           `-CXXThisExpr 0x5632d9376fe8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5632d93637e0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5632d9377180 <col:30, col:48>
|   `-ReturnStmt 0x5632d9377170 <col:32, col:45>
|     `-ImplicitCastExpr 0x5632d9377158 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5632d9377138 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5632d9377108 <col:39> '<bound member function type>' ->xanno 0x5632d93615a8
|           `-CXXThisExpr 0x5632d93770f8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5632d93638c8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5632d9377318 <col:24, col:50>
|   `-ReturnStmt 0x5632d9377308 <col:26, col:47>
|     `-UnaryOperator 0x5632d93772f0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5632d93772d0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5632d93772b8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5632d9377268 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5632d936c588
|         |   `-CXXMemberCallExpr 0x5632d9377248 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5632d9377218 <col:34> '<bound member function type>' ->xanno 0x5632d9361748
|         |       `-CXXThisExpr 0x5632d9377208 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5632d9377298 <col:46> 'int' 0
|-CXXMethodDecl 0x5632d93639d0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5632d93774e8 <col:36, col:62>
|   `-ReturnStmt 0x5632d93774d8 <col:38, col:59>
|     `-UnaryOperator 0x5632d93774c0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5632d93774a0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5632d9377488 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5632d9377400 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5632d936c588
|         |   `-CXXMemberCallExpr 0x5632d93773e0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5632d93773b0 <col:46> '<bound member function type>' ->xanno 0x5632d93615a8
|         |       `-CXXThisExpr 0x5632d93773a0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5632d9377430 <col:58> 'int' 0
|-CXXMethodDecl 0x5632d9363ae8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5632d9377680 <col:26, col:53>
|   `-ReturnStmt 0x5632d9377670 <col:28, col:50>
|     `-UnaryOperator 0x5632d9377658 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5632d9377638 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5632d9377620 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5632d93775d0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5632d936c888
|         |   `-CXXMemberCallExpr 0x5632d93775b0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5632d9377580 <col:36> '<bound member function type>' ->xanno 0x5632d9361748
|         |       `-CXXThisExpr 0x5632d9377570 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5632d9377600 <col:49> 'int' 0
|-CXXMethodDecl 0x5632d9363c08 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5632d9377858 <col:38, col:65>
|   `-ReturnStmt 0x5632d9377848 <col:40, col:62>
|     `-UnaryOperator 0x5632d9377830 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5632d9377810 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5632d93777f8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5632d9377768 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5632d936c888
|         |   `-CXXMemberCallExpr 0x5632d9377748 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5632d9377718 <col:48> '<bound member function type>' ->xanno 0x5632d93615a8
|         |       `-CXXThisExpr 0x5632d9377708 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5632d9377798 <col:61> 'int' 0
|-CXXMethodDecl 0x5632d9363db8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5632d9363cc0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5632d9377f28 <col:34, line:463:5>
|   |-ParenExpr 0x5632d9377d70 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5632d9377d40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5632d93779a8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9377978 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d93778c8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d93778b0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d9377870 <col:23> 'int' lvalue ParmVar 0x5632d9363cc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d9377890 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d9377958 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d9377928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d93778e8 <col:33> 'int' lvalue ParmVar 0x5632d9363cc0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5632d9377940 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5632d9377908 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5632d9377a08 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d93779e8 <col:56> 'int' 0
|   |   `-CallExpr 0x5632d9377ca0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5632d9377c88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9377c68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9377ce0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9377af8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5632d9377cf8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9377b28 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d9377d10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9377b60 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5632d9377d28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9377c50 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9377c38 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9377bf8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5632d9377f18 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5632d9377f00 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5632d9377ee0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5632d9377eb0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5632d9377e60 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5632d936c588
|         |   `-CXXMemberCallExpr 0x5632d9377e40 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5632d9377e10 <col:9> '<bound member function type>' ->xanno 0x5632d93615a8
|         |       `-CXXThisExpr 0x5632d9377e00 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5632d9377ec8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5632d9377e90 <col:21> 'int' lvalue ParmVar 0x5632d9363cc0 'i' 'int'
|-CXXMethodDecl 0x5632d9364008 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5632d9363e78 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5632d9363ef0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5632d93785b8 <col:40, line:472:5>
|   |-ParenExpr 0x5632d93783d0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5632d93783a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9378080 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9378050 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d9377fa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d9377f88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d9377f48 <col:23> 'int' lvalue ParmVar 0x5632d9363e78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d9377f68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d9378030 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d9378000 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d9377fc0 <col:33> 'int' lvalue ParmVar 0x5632d9363e78 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5632d9378018 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5632d9377fe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5632d93780e0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d93780c0 <col:56> 'int' 0
|   |   `-CallExpr 0x5632d9378300 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5632d93782e8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d93782c8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9378340 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378150 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5632d9378358 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378180 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d9378370 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d93781b8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5632d9378388 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d93782b0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9378298 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9378258 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5632d9378598 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5632d9378540 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5632d9378510 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5632d93784c0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5632d936c588
|     | |   `-CXXMemberCallExpr 0x5632d93784a0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5632d9378470 <col:2> '<bound member function type>' ->xanno 0x5632d9361748
|     | |       `-CXXThisExpr 0x5632d9378460 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5632d9378528 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5632d93784f0 <col:14> 'int' lvalue ParmVar 0x5632d9363e78 'i' 'int'
|     `-ImplicitCastExpr 0x5632d9378580 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5632d9378560 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5632d9363ef0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5632d93641c8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5632d93640d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5632d9378d38 <col:36, line:485:5>
|   |-ParenExpr 0x5632d9378aa0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d9378a70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9378750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9378720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d9378630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d9378618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d93785d8 <col:23> 'int' lvalue ParmVar 0x5632d93640d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d93785f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d9378700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d93786e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d9378650 <col:33> 'int' lvalue ParmVar 0x5632d93640d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d93786c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d93786b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d9378670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d9378690 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5632d93787b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d9378790 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d93789d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d93789b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9378998 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9378a10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5632d9378a28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d9378a40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9378890 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5632d9378a58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9378980 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9378968 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9378928 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5632d9378d28 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5632d9378d10 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5632d9378cf8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d9378cc8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5632d9378c68 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d9378c38 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d9378bb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d9378b90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d9378b60 <col:61> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d9378b50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d9378c50 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d9378be0 <col:74> 'int' lvalue ParmVar 0x5632d93640d0 'i' 'int'
|-CXXMethodDecl 0x5632d9364418 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5632d9364288 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5632d9364300 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5632d9379488 <col:42, line:500:5>
|   |-ParenExpr 0x5632d9379220 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d93791f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9378ed0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9378ea0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d9378db0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d9378d98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d9378d58 <col:23> 'int' lvalue ParmVar 0x5632d9364288 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d9378d78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d9378e80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d9378e68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d9378dd0 <col:33> 'int' lvalue ParmVar 0x5632d9364288 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d9378e48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d9378e30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d9378df0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d9378e10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5632d9378f30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d9378f10 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d9379150 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d9379138 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9379118 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9379190 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378fa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5632d93791a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9378fd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d93791c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9379010 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5632d93791d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9379100 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d93790e8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d93790a8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5632d9379468 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5632d9379418 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5632d93793e8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5632d9379390 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5632d9379360 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5632d9379310 <col:48, col:57> 'char [48]' lvalue ->c 0x5632d936c460
|     |     |   `-CXXMemberCallExpr 0x5632d93792f0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5632d93792c0 <col:48> '<bound member function type>' ->xanno 0x5632d9361748
|     |     |       `-CXXThisExpr 0x5632d93792b0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5632d9379378 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5632d9379340 <col:61> 'int' lvalue ParmVar 0x5632d9364288 'i' 'int'
|     `-ImplicitCastExpr 0x5632d9379450 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5632d9379430 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5632d9364300 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5632d93645d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5632d93644e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5632d9379be8 <col:35, line:513:5>
|   |-ParenExpr 0x5632d93798f8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d93798c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9379620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d93795f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d9379500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d93794e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d93794a8 <col:23> 'int' lvalue ParmVar 0x5632d93644e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d93794c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d93795d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d93795b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d9379520 <col:33> 'int' lvalue ParmVar 0x5632d93644e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d9379598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d9379580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d9379540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d9379560 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5632d9379680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d9379660 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d9379828 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d9379810 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d93797f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9379868 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d93796f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5632d9379880 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9379728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d9379898 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9379760 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5632d93798b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d93797d8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d93797c0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9379780 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5632d9379bd8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5632d9379bc0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5632d9379ba8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d9379b78 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5632d9379af0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d9379ac0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d9379a70 <col:60, col:69> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d9379a50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d9379a20 <col:60> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d9379a10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d9379ad8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d9379aa0 <col:73> 'int' lvalue ParmVar 0x5632d93644e0 'i' 'int'
|-CXXMethodDecl 0x5632d9364828 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5632d9364698 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5632d9364710 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5632d937a308 <col:41, line:528:5>
|   |-ParenExpr 0x5632d937a090 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937a060 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9379d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9379d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d9379c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d9379c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d9379c08 <col:23> 'int' lvalue ParmVar 0x5632d9364698 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d9379c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d9379d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d9379d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d9379c80 <col:33> 'int' lvalue ParmVar 0x5632d9364698 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d9379cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d9379ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d9379ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d9379cc0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5632d9379de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d9379dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d9379fc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d9379fa8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9379f88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937a000 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9379e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5632d937a018 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9379e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937a030 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9379ec0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5632d937a048 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9379f70 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9379f58 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9379f18 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5632d937a2e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5632d937a298 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5632d937a268 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5632d937a210 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5632d937a1d0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5632d937a180 <col:47, col:56> 'char [48]' lvalue ->c 0x5632d936c460
|     |     |   `-CXXMemberCallExpr 0x5632d937a160 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5632d937a130 <col:47> '<bound member function type>' ->xanno 0x5632d9361748
|     |     |       `-CXXThisExpr 0x5632d937a120 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5632d937a1e8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5632d937a1b0 <col:60> 'int' lvalue ParmVar 0x5632d9364698 'i' 'int'
|     `-ImplicitCastExpr 0x5632d937a2d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5632d937a2b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5632d9364710 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5632d93649e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5632d93648f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5632d937a9d8 <col:36, line:541:5>
|   |-ParenExpr 0x5632d937a778 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937a748 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937a4a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937a470 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937a380 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937a368 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937a328 <col:23> 'int' lvalue ParmVar 0x5632d93648f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937a348 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937a450 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d937a438 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937a3a0 <col:33> 'int' lvalue ParmVar 0x5632d93648f0 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937a418 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937a400 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937a3c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d937a3e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5632d937a500 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937a4e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d937a6a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d937a690 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937a670 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937a6e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937a570 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5632d937a700 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937a5a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937a718 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937a5e0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5632d937a730 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937a658 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937a640 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937a600 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5632d937a9c8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5632d937a9b0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5632d937a998 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d937a968 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5632d937a910 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d937a8e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d937a890 <col:61, col:70> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d937a870 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d937a840 <col:61> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d937a830 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d937a8f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d937a8c0 <col:74> 'int' lvalue ParmVar 0x5632d93648f0 'i' 'int'
|-CXXMethodDecl 0x5632d9364bb8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5632d9364aa8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5632d9364b20 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5632d9364c68 <col:20>
| `-OptimizeNoneAttr 0x5632d9364cc0 <col:30>
|-CXXMethodDecl 0x5632d9364df8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5632d9364d00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5632d937b0a8 <col:35, line:562:5>
|   |-ParenExpr 0x5632d937ae48 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937ae18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937ab70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937ab40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937aa50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937aa38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937a9f8 <col:23> 'int' lvalue ParmVar 0x5632d9364d00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937aa18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937ab20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d937ab08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937aa70 <col:33> 'int' lvalue ParmVar 0x5632d9364d00 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937aae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937aad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937aa90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d937aab0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5632d937abd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937abb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d937ad78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d937ad60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937ad40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937adb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937ac40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5632d937add0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937ac78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937ade8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937acb0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5632d937ae00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937ad28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937ad10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937acd0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5632d937b098 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5632d937b080 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5632d937b068 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d937b038 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5632d937afe0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d937afb0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d937af60 <col:60, col:69> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d937af40 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d937af10 <col:60> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d937af00 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d937afc8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d937af90 <col:73> 'int' lvalue ParmVar 0x5632d9364d00 'i' 'int'
|-CXXMethodDecl 0x5632d9365008 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5632d9364eb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5632d9364f30 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5632d937b788 <col:41, line:577:5>
|   |-ParenExpr 0x5632d937b518 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937b4e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937b240 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937b210 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937b120 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937b108 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937b0c8 <col:23> 'int' lvalue ParmVar 0x5632d9364eb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937b0e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937b1f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d937b1d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937b140 <col:33> 'int' lvalue ParmVar 0x5632d9364eb8 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937b1b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937b1a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937b160 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d937b180 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5632d937b2a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937b280 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d937b448 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d937b430 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937b410 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937b488 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937b310 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5632d937b4a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937b348 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937b4b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937b380 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5632d937b4d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937b3f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937b3e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937b3a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5632d937b768 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5632d937b718 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5632d937b6e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5632d937b688 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5632d937b658 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5632d937b608 <col:47, col:56> 'char [48]' lvalue ->c 0x5632d936c460
|     |     |   `-CXXMemberCallExpr 0x5632d937b5e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5632d937b5b8 <col:47> '<bound member function type>' ->xanno 0x5632d9361748
|     |     |       `-CXXThisExpr 0x5632d937b5a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5632d937b670 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5632d937b638 <col:60> 'int' lvalue ParmVar 0x5632d9364eb8 'i' 'int'
|     `-ImplicitCastExpr 0x5632d937b750 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5632d937b730 <col:65> 'int32_t':'int' lvalue ParmVar 0x5632d9364f30 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5632d93651c8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5632d93650d0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5632d937beb8 <col:36, line:591:5>
|   |-ParenExpr 0x5632d937bbf8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937bbc8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937b920 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937b8f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937b800 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937b7e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937b7a8 <col:23> 'int' lvalue ParmVar 0x5632d93650d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937b7c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937b8d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d937b8b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937b820 <col:33> 'int' lvalue ParmVar 0x5632d93650d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937b898 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937b880 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937b840 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d937b860 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5632d937b980 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937b960 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d937bb28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d937bb10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937baf0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937bb68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937b9f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5632d937bb80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937ba28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937bb98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937ba60 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5632d937bbb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937bad8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937bac0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937ba80 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5632d937bea8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5632d937be90 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5632d937be78 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d937be48 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5632d937bdc0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d937bd90 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d937bd40 <col:61, col:70> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d937bd20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d937bcf0 <col:61> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d937bce0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d937bda8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d937bd70 <col:74> 'int' lvalue ParmVar 0x5632d93650d0 'i' 'int'
|-CXXMethodDecl 0x5632d9365418 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5632d9365288 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5632d9365300 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5632d937c598 <col:42, line:606:5>
|   |-ParenExpr 0x5632d937c328 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5632d937c2f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937c050 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937c020 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937bf30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937bf18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937bed8 <col:23> 'int' lvalue ParmVar 0x5632d9365288 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937bef8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937c000 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5632d937bfe8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937bf50 <col:33> 'int' lvalue ParmVar 0x5632d9365288 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937bfc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937bfb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937bf70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5632d937bf90 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5632d937c0b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937c090 <col:60> 'int' 0
|   |   `-CallExpr 0x5632d937c258 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5632d937c240 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937c220 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937c298 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937c120 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5632d937c2b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937c158 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937c2c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937c190 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5632d937c2e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937c208 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937c1f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937c1b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5632d937c578 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5632d937c528 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5632d937c4f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5632d937c498 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5632d937c468 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5632d937c418 <col:48, col:57> 'char [48]' lvalue ->c 0x5632d936c460
|     |     |   `-CXXMemberCallExpr 0x5632d937c3f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5632d937c3c8 <col:48> '<bound member function type>' ->xanno 0x5632d9361748
|     |     |       `-CXXThisExpr 0x5632d937c3b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5632d937c480 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5632d937c448 <col:61> 'int' lvalue ParmVar 0x5632d9365288 'i' 'int'
|     `-ImplicitCastExpr 0x5632d937c560 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5632d937c540 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5632d9365300 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5632d93655b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5632d93654e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5632d937ce08 <col:33, line:620:5>
|   |-ParenExpr 0x5632d937cb80 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5632d937cb50 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937c7a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937c770 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937c610 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937c5f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937c5b8 <col:23> 'int' lvalue ParmVar 0x5632d93654e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937c5d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937c750 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5632d937c738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937c630 <col:33> 'int' lvalue ParmVar 0x5632d93654e0 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937c718 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937c700 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937c650 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5632d937c6d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5632d937c6c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5632d937c688 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5632d937c800 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937c7e0 <col:79> 'int' 0
|   |   `-CallExpr 0x5632d937cab0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5632d937ca98 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937ca78 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937caf0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937c8e8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5632d937cb08 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937c930 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937cb20 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937c968 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5632d937cb38 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937ca60 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937ca48 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937ca08 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5632d937cdf8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5632d937cde0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5632d937cdc8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5632d937cd98 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5632d937cd10 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5632d937cce0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5632d937cc90 <col:67, col:76> 'char const[48]' lvalue ->c 0x5632d936c460
|             |   `-CXXMemberCallExpr 0x5632d937cc70 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5632d937cc40 <col:67> '<bound member function type>' ->xanno 0x5632d93615a8
|             |       `-CXXThisExpr 0x5632d937cc30 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5632d937ccf8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5632d937ccc0 <col:80> 'int' lvalue ParmVar 0x5632d93654e0 'i' 'int'
|-CXXMethodDecl 0x5632d93657c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5632d9365670 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5632d93656f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5632d937d630 <col:45, line:635:5>
|   |-ParenExpr 0x5632d937d378 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5632d937d348 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5632d937d010 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d937cfe0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5632d937ce80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5632d937ce68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5632d937ce28 <col:23> 'int' lvalue ParmVar 0x5632d9365670 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5632d937ce48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5632d937cfc0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5632d937cfa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5632d937cea0 <col:33> 'int' lvalue ParmVar 0x5632d9365670 'i' 'int'
|   |   |     `-BinaryOperator 0x5632d937cf88 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5632d937cf70 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5632d937cec0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5632d9361990 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5632d937cf48 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5632d937cf30 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5632d937cef8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5632d937d070 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d937d050 <col:79> 'int' 0
|   |   `-CallExpr 0x5632d937d2a8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5632d937d290 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d937d270 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d937d2e8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937d0e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5632d937d300 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d937d128 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5632d937d318 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d937d160 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5632d937d330 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d937d258 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d937d240 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d937d1f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5632d937d610 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5632d937d578 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5632d937d548 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5632d937d4e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5632d937d4b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5632d937d468 <col:54, col:63> 'char [48]' lvalue ->c 0x5632d936c460
|     |     |   `-CXXMemberCallExpr 0x5632d937d448 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5632d937d418 <col:54> '<bound member function type>' ->xanno 0x5632d9361748
|     |     |       `-CXXThisExpr 0x5632d937d408 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5632d937d4d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5632d937d498 <col:67> 'int' lvalue ParmVar 0x5632d9365670 'i' 'int'
|     `-CXXConstCastExpr 0x5632d937d5e0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5632d937d5c8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5632d937d590 <col:91> 'const void *' lvalue ParmVar 0x5632d93656f0 'x' 'const void *'
|-CXXMethodDecl 0x5632d9365898 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5632d937d6b8 <col:34, line:640:5>
|   `-ReturnStmt 0x5632d937d6a8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5632d937d690 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5632d937d660 <col:16> 'Packet *' lvalue ->_data_packet 0x5632d936d018
|         `-CXXThisExpr 0x5632d937d650 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5632d93659d8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5632d9365948 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d9376778 <col:46> 'bool' true
|-CXXMethodDecl 0x5632d9365b58 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5632d9365a90 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5632d9365c00 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5632d93663b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5632d9365d00 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366420 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365ce0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5632d9365cc0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5632d935ae60 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5632d9365d90 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366438 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365d70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5632d9365d50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5632d935aef0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5632d9365e20 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366450 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365e00 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d9365de0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5632d9365eb0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366468 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365e90 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5632d9365e70 <col:19> 'int' 16
| |-EnumConstantDecl 0x5632d9365f40 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366480 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365f20 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5632d9365f00 <col:21> 'int' 16
| |-EnumConstantDecl 0x5632d9365fd0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d9366498 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9365fb0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5632d9365f90 <col:19> 'int' 32
| |-EnumConstantDecl 0x5632d9366060 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d93664b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9366040 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5632d9366020 <col:19> 'int' EnumConstant 0x5632d9365eb0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5632d93660f0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d93664c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93660d0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5632d93660b0 <col:19> 'int' EnumConstant 0x5632d9365fd0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5632d93661c0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d93664e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d93661a0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5632d9366180 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5632d9366140 <col:23> 'int' EnumConstant 0x5632d93660f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5632d9366160 <col:40> 'int' 2
| |-EnumConstantDecl 0x5632d9366290 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5632d93664f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d9366270 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5632d9366250 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5632d9366210 <col:23> 'int' EnumConstant 0x5632d93660f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5632d9366230 <col:40> 'int' 4
| `-EnumConstantDecl 0x5632d9366360 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5632d9366510 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d9366340 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5632d9366320 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5632d93662e0 <col:23> 'int' EnumConstant 0x5632d93660f0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5632d9366300 <col:40> 'int' 8
|-CXXMethodDecl 0x5632d9366550 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5632d93665f0 <col:68> "" ""
|-CXXMethodDecl 0x5632d9366688 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5632d9366728 <col:45> "" ""
|-CXXMethodDecl 0x5632d93667c0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5632d9366860 <col:57> "" ""
|-CXXMethodDecl 0x5632d93668f8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5632d9366998 <col:45> "" ""
|-CXXMethodDecl 0x5632d9366a30 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5632d9366ad0 <col:57> "" ""
|-CXXMethodDecl 0x5632d9366b60 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5632d9366c00 <col:51> "" ""
|-CXXMethodDecl 0x5632d9366c90 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5632d9366d30 <col:63> "" ""
|-CXXMethodDecl 0x5632d9366dc0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5632d9366e60 <col:53> "" ""
|-CXXMethodDecl 0x5632d9366ef0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5632d9366f90 <col:65> "" ""
|-CXXMethodDecl 0x5632d93670a8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5632d9367018 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5632d9367150 <col:61> "" ""
|-CXXMethodDecl 0x5632d93672e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5632d93671d8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5632d9367250 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5632d9367398 <col:67> "" ""
|-CXXMethodDecl 0x5632d93674b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5632d9367420 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5632d9367558 <col:63> "" ""
|-CXXMethodDecl 0x5632d93676f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5632d93675e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5632d9367658 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5632d93677a0 <col:69> "" ""
|-CXXMethodDecl 0x5632d93678b8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5632d9367828 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5632d9367960 <col:63> "" ""
|-CXXMethodDecl 0x5632d936a038 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5632d9369f28 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5632d9369fa0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5632d936a0e8 <col:69> "" ""
|-CXXMethodDecl 0x5632d936a200 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5632d936a170 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5632d936a2a8 <col:62> "" ""
|-CXXMethodDecl 0x5632d936a440 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5632d936a330 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5632d936a3a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5632d936a4f0 <col:68> "" ""
|-CXXMethodDecl 0x5632d936a608 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5632d936a578 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5632d936a6b0 <col:63> "" ""
|-CXXMethodDecl 0x5632d936a848 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5632d936a738 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5632d936a7b0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5632d936a8f8 <col:69> "" ""
|-CXXMethodDecl 0x5632d936a988 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5632d936aa28 <col:64> "" ""
|-CXXMethodDecl 0x5632d936aab8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5632d936ab58 <col:52> "" ""
|-CXXMethodDecl 0x5632d936abe8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5632d936ac88 <col:67> "" ""
|-CXXMethodDecl 0x5632d936ad18 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5632d936adb8 <col:55> "" ""
|-CXXMethodDecl 0x5632d936aed0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5632d936ae40 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5632d936af78 <col:58> "" ""
|-CXXMethodDecl 0x5632d936b110 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5632d936b000 <col:33> col:36 'int'
| |-ParmVarDecl 0x5632d936b078 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5632d936b1c0 <col:62> "" ""
|-CXXMethodDecl 0x5632d936b2d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5632d936b248 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5632d936b380 <col:58> "" ""
|-CXXMethodDecl 0x5632d936b518 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5632d936b408 <col:33> col:36 'int'
| |-ParmVarDecl 0x5632d936b480 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5632d936b5c8 <col:62> "" ""
|-CXXMethodDecl 0x5632d936b6e0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5632d936b650 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5632d936b788 <col:60> "" ""
|-CXXMethodDecl 0x5632d936b920 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5632d936b810 <col:34> col:37 'int'
| |-ParmVarDecl 0x5632d936b888 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5632d936b9d0 <col:64> "" ""
|-CXXMethodDecl 0x5632d936bae8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5632d936ba58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5632d936bb90 <col:58> "" ""
|-CXXMethodDecl 0x5632d936bd28 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5632d936bc18 <col:33> col:36 'int'
| |-ParmVarDecl 0x5632d936bc90 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5632d936bdd8 <col:62> "" ""
|-CXXMethodDecl 0x5632d936bef0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5632d936be60 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5632d936bf98 <col:59> "" ""
|-CXXMethodDecl 0x5632d936c130 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5632d936c020 <col:33> col:36 'int'
| |-ParmVarDecl 0x5632d936c098 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5632d936c1e0 <col:63> "" ""
|-AccessSpecDecl 0x5632d936c250 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5632d936c278 prev 0x5632d9361480 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5632d936c370 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5632d936c460 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5632d936c588 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5632d936c708 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5632d936c888 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5632d936ca08 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5632d937d838 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5632d937e0a8 <col:11>
| |-CXXDestructorDecl 0x5632d937d910 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5632d937da48 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5632d937da48
| | `-ParmVarDecl 0x5632d937db58 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5632d937dbf8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5632d937dbf8
| | `-ParmVarDecl 0x5632d937dd08 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5632d9380ac8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5632d9380bd8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5632d9380e58 <col:11>
| |   `-ReturnStmt 0x5632d9380e48 <col:11>
| |     `-UnaryOperator 0x5632d9380e30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5632d9380e20 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5632d9380c48 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5632d9380c48
|   `-ParmVarDecl 0x5632d9380d58 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5632d936ca70 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5632d936cb88 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5632d936cc28 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5632d936cc90 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5632d936ccf8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5632d936cd60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5632d936cdc0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5632d936ce80 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5632d936cee0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5632d936cf40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5632d937d748 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5632d936cc28 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5632d937e0b8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5632d937e110 <col:12>
| |-CXXConstructorDecl 0x5632d937dd78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5632d937dd78
| | `-ParmVarDecl 0x5632d937de88 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5632d937df28 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5632d937df28
| | `-ParmVarDecl 0x5632d937e038 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5632d93801b0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5632d936cfb8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5632d936d018 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5632d936d080 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5632d936d0e8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5632d936d150 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5632d936d1b8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5632d936d218 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5632d936d278 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5632d936d2e0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5632d936d368 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5632d936cfb8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5632d937d6e0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5632d936d218 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5632d937e120 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5632d937e180 <col:21, line:755:5>
|-CXXConstructorDecl 0x5632d936d508 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5632d936d448 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5632d936d600 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5632d936d7e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5632d936d6f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5632d936dab8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5632d936d8a0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d936d918 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5632d936d990 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d936dcd8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5632d936db88 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5632d936dc00 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5632d93762b8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5632d936dd98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5632d936de10 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5632d936de88 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5632d9376410 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5632d9376380 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d9376558 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5632d93764c8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5632d9376650 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d937e220 prev 0x5632d935aae0 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5632d937e358 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5632d937e3e8 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5632d937e490 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5632d937e530 <col:20>
| `-OptimizeNoneAttr 0x5632d937e588 <col:30>
|-CXXMethodDecl 0x5632d937e5d8 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5632d937e678 <col:20>
| `-OptimizeNoneAttr 0x5632d937e6d0 <col:30>
|-CXXMethodDecl 0x5632d937e720 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5632d937e7e8 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5632d937e8b0 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5632d937e9c8 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5632d937ea90 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5632d937eb30 <col:20>
| `-OptimizeNoneAttr 0x5632d937eb88 <col:30>
|-CXXMethodDecl 0x5632d937ebf8 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5632d937ec98 <col:20>
| `-OptimizeNoneAttr 0x5632d937ecf0 <col:30>
|-CXXMethodDecl 0x5632d937ed98 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5632d937ee38 <col:20>
| `-OptimizeNoneAttr 0x5632d937ee90 <col:30>
|-CXXMethodDecl 0x5632d937eee0 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5632d937eff8 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5632d937f118 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5632d937f238 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5632d937f300 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5632d937f3a0 <col:62> "" ""
|-AccessSpecDecl 0x5632d937f410 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5632d937f470 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5632d9380068 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5632d9380290 <col:29, col:31>
|-CXXMethodDecl 0x5632d937f538 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5632d937f678 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5632d937f5e8 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5632d937f770 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5632d93802a0 <col:23, col:25>
|-CXXMethodDecl 0x5632d937f928 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5632d937f860 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5632d937fbf8 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5632d937f9e0 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5632d937fa58 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5632d937fad0 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5632d937fd88 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5632d937fcc0 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5632d937fe80 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5632d937fee8 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5632d937fee8
  `-ParmVarDecl 0x5632d937fff8 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93d63f8 prev 0x5632d935a630 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x5632d93d6778 <line:21:18>
|-CXXRecordDecl 0x5632d93d64f0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x5632d93d6618 <line:18:5, col:26> col:13 referenced ether_dhost 'uint8_t [6]'
|-FieldDecl 0x5632d93d66c8 <line:19:5, col:26> col:13 referenced ether_shost 'uint8_t [6]'
`-FieldDecl 0x5632d93d6728 <line:20:5, col:14> col:14 referenced ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93d67e8 <../dummy_inc/clicknet/ether.h:33:1, line:52:1> line:33:8 struct click_arp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5632d93d6908 <col:1, col:8> col:8 implicit struct click_arp
|-FieldDecl 0x5632d93d69a8 <line:34:5, col:14> col:14 referenced ar_hrd 'uint16_t':'unsigned short'
|-FieldDecl 0x5632d93d6a08 <line:42:5, col:14> col:14 referenced ar_pro 'uint16_t':'unsigned short'
|-FieldDecl 0x5632d93d6a68 <line:43:5, col:13> col:13 referenced ar_hln 'uint8_t':'unsigned char'
|-FieldDecl 0x5632d93d6ac8 <line:44:5, col:13> col:13 referenced ar_pln 'uint8_t':'unsigned char'
`-FieldDecl 0x5632d93d6b28 <line:45:5, col:14> col:14 referenced ar_op 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_arp = type { i16, i16, i8, i8, i16 }
  NonVirtualBaseLLVMType:%struct.click_arp = type { i16, i16, i8, i8, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d93d6b90 <../dummy_inc/clicknet/ether.h:54:1, line:60:1> line:54:8 referenced struct click_ether_arp definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5632d93d6ca8 <col:1, col:8> col:8 implicit struct click_ether_arp
|-FieldDecl 0x5632d93d6d90 <line:55:5, col:22> col:22 referenced ea_hdr 'struct click_arp':'click_arp'
|-FieldDecl 0x5632d93d6e40 <line:56:5, col:22> col:13 referenced arp_sha 'uint8_t [6]'
|-FieldDecl 0x5632d93d6f28 <line:57:5, col:22> col:13 referenced arp_spa 'uint8_t [4]'
|-FieldDecl 0x5632d93d6fd8 <line:58:5, col:22> col:13 referenced arp_tha 'uint8_t [6]'
`-FieldDecl 0x5632d93d7088 <line:59:5, col:22> col:13 referenced arp_tpa 'uint8_t [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_arp = type { %struct.click_arp, [6 x i8], [4 x i8], [6 x i8], [4 x i8] }
  NonVirtualBaseLLVMType:%struct.click_ether_arp = type { %struct.click_arp, [6 x i8], [4 x i8], [6 x i8], [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d949a790 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d949a8a8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x5632d949a950 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x5632d949a9b8 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x5632d949aa20 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x5632d949aad0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x5632d949a950 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x5632d949b950 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x5632d949b908 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x5632d949b8d0 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x5632d949b8b8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x5632d949b860 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5632d91852d0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x5632d949a9b8 'len' 'int'
| | `-IntegerLiteral 0x5632d949b9c8 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x5632d949aa20 'cap' 'int'
| | `-IntegerLiteral 0x5632d949ba30 <col:20> 'int' 0
| `-CompoundStmt 0x5632d949bab0 <col:23, line:119:2>
|-CXXConstructorDecl 0x5632d949ac48 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x5632d949ab88 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x5632d949bac0 <col:37, line:121:2>
|-CXXConstructorDecl 0x5632d949dcd8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5632d949dde8 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5632d949a950 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x5632d949f7a0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x5632d949f770 <col:12> 'unsigned char *const' lvalue .s 0x5632d949a950
| |     `-DeclRefExpr 0x5632d949f750 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5632d949a9b8 'len' 'int'
| | `-ImplicitCastExpr 0x5632d949f830 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5632d949f800 <col:12> 'const int' lvalue .len 0x5632d949a9b8
| |     `-DeclRefExpr 0x5632d949f7e0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x5632d949aa20 'cap' 'int'
| | `-ImplicitCastExpr 0x5632d949f8c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5632d949f890 <col:12> 'const int' lvalue .cap 0x5632d949aa20
| |     `-DeclRefExpr 0x5632d949f870 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x5632d949f918 <col:12>
|-CXXConstructorDecl 0x5632d949de88 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d949de88
| `-ParmVarDecl 0x5632d949df98 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x5632d949fbd0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d9495f08 prev 0x5632d93d8b80 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5632d9496000 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x5632d9496090 <col:21, col:27> col:21 public
|-TypedefDecl 0x5632d94960d0 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5632d8e31dc0 'const char *'
|   `-QualType 0x5632d8e31311 'const char' const
|     `-BuiltinType 0x5632d8e31310 'char'
|-TypedefDecl 0x5632d9496140 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x5632d8e31f90 'char *'
|   `-BuiltinType 0x5632d8e31310 'char'
|-TypedefDecl 0x5632d9496280 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x5632d94961f0 'int (StringAccum::*)() const'
|   |-RecordType 0x5632d90efb90 'StringAccum'
|   | `-CXXRecord 0x5632d9495f08 'StringAccum'
|   `-ParenType 0x5632d915f2e0 'int () const' sugar
|     `-FunctionProtoType 0x5632d9132e70 'int () const' const cdecl
|       `-BuiltinType 0x5632d8e31370 'int'
|-CXXConstructorDecl 0x5632d9496340 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x5632d9496490 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x5632d9496400 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x5632d94965e0 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x5632d9496550 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x5632d9496788 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x5632d94966c8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x5632d9496938 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x5632d9496878 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x5632d9496a30 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x5632d9496be8 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x5632d9496b20 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x5632d9496d68 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x5632d9496ca0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x5632d9496e60 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5632d9496f28 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x5632d9496ff0 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5632d94970b8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x5632d9497180 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x5632d94972e8 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5632d94973b8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5632d9497478 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5632d9497588 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5632d9497698 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5632d9497758 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x5632d9497818 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x5632d9497960 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5632d94978d0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5632d9497af0 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x5632d9497a20 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x5632d9497bb8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5632d9497cb0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x5632d9497d70 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5632d9497e38 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x5632d9497ef8 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5632d9497fb8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5632d9498078 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5632d94981c8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x5632d9498130 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x5632d9498318 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x5632d9498288 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x5632d9498470 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x5632d94983d8 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x5632d94985c0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x5632d9498530 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x5632d94987e0 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x5632d9498680 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x5632d9498700 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x5632d949b788 <col:53> 'int' 0
|-CXXMethodDecl 0x5632d9498938 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x5632d94988a8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x5632d949b7a8 <col:34> 'int' 1
|-CXXMethodDecl 0x5632d9498a80 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x5632d94989f0 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5632d9498bd0 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x5632d9498b40 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x5632d9498d20 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x5632d9498c90 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x5632d9498e70 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5632d9498de0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5632d9499048 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5632d9498f30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5632d9498fb0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5632d9499228 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5632d9499110 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x5632d9499190 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x5632d9499408 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5632d94992f0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5632d9499370 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5632d94995e8 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5632d94994d0 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x5632d9499550 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x5632d94997c8 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5632d94996b0 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5632d9499730 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5632d9499b28 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x5632d9499910 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5632d9499990 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5632d949b7c8 <col:56> 'int' 10
| `-ParmVarDecl 0x5632d9499a08 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d949b7e8 <col:77> 'bool' true
|-CXXMethodDecl 0x5632d9499e88 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x5632d9499c70 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5632d9499cf0 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x5632d949b7f8 <col:57> 'int' 10
| `-ParmVarDecl 0x5632d9499d68 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5632d949b818 <col:78> 'bool' true
|-CXXMethodDecl 0x5632d949a0b0 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x5632d9499f58 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x5632d9499fd8 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x5632d949a1a8 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x5632d949a348 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x5632d949a258 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x5632d949a498 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x5632d949a408 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x5632d949a540 <col:51> "" ""
|-AccessSpecDecl 0x5632d949a5b0 <line:106:3, col:10> col:3 private
|-EnumDecl 0x5632d949a5d8 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x5632d949a728 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x5632d949a778 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d949a708 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x5632d949a6d8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x5632d9168048 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x5632d949a790 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5632d949a8a8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x5632d949a950 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x5632d949a9b8 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x5632d949aa20 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x5632d949aad0 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x5632d949a950 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x5632d949b950 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x5632d949b908 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x5632d949b8d0 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x5632d949b8b8 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x5632d949b860 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x5632d91852d0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x5632d949a9b8 'len' 'int'
| | | `-IntegerLiteral 0x5632d949b9c8 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x5632d949aa20 'cap' 'int'
| | | `-IntegerLiteral 0x5632d949ba30 <col:20> 'int' 0
| | `-CompoundStmt 0x5632d949bab0 <col:23, line:119:2>
| |-CXXConstructorDecl 0x5632d949ac48 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x5632d949ab88 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x5632d949bac0 <col:37, line:121:2>
| |-CXXConstructorDecl 0x5632d949dcd8 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5632d949dde8 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d949a950 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x5632d949f7a0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x5632d949f770 <col:12> 'unsigned char *const' lvalue .s 0x5632d949a950
| | |     `-DeclRefExpr 0x5632d949f750 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d949a9b8 'len' 'int'
| | | `-ImplicitCastExpr 0x5632d949f830 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5632d949f800 <col:12> 'const int' lvalue .len 0x5632d949a9b8
| | |     `-DeclRefExpr 0x5632d949f7e0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x5632d949aa20 'cap' 'int'
| | | `-ImplicitCastExpr 0x5632d949f8c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5632d949f890 <col:12> 'const int' lvalue .cap 0x5632d949aa20
| | |     `-DeclRefExpr 0x5632d949f870 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x5632d949dde8 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x5632d949f918 <col:12>
| |-CXXConstructorDecl 0x5632d949de88 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x5632d949de88
| | `-ParmVarDecl 0x5632d949df98 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x5632d949fbd0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x5632d949ad20 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x5632d949ae20 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x5632d949ad88 <col:16> col:19 'int'
|-CXXMethodDecl 0x5632d949b000 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x5632d949aee0 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x5632d949af60 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x5632d949b1e0 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x5632d949b0c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5632d949b148 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5632d949b338 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x5632d949b2a8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x5632d949b488 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x5632d949b3f8 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x5632d949b748 <line:132:5, col:70> col:25
  `-FunctionDecl 0x5632d949b688 parent 0x5632d8e31278 <col:5, col:70> col:25 used operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x5632d949b540 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x5632d949b5b8 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class IPAddressArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5)
         0 |   HandlerCallback h
         0 |   ReadHandlerCallback r
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5)
         0 |   HandlerCallback h
         0 |   WriteHandlerCallback w
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Handler
         0 |   class String _name
         0 |     struct String::rep_t _r
         0 |       const char * data
         8 |       int length
        16 |       struct String::memo_t * memo
        24 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:290:5) _read_hook
        24 |     HandlerCallback h
        24 |     ReadHandlerCallback r
        32 |   union Handler::(anonymous at ../dummy_inc/click/handler.hh:294:5) _write_hook
        32 |     HandlerCallback h
        32 |     WriteHandlerCallback w
        40 |   void * _read_user_data
        48 |   void * _write_user_data
        56 |   uint32_t _flags
        60 |   int _use_count
        64 |   int _next_by_name
           | [sizeof=72, dsize=68, align=8,
           |  nvsize=68, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d938f140 <../dummy_inc/click/handler.hh:290:5, line:293:5> line:290:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5632d938f290 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5632d938f310 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
|-CXXConstructorDecl 0x5632d9390108 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390108
| `-ParmVarDecl 0x5632d9390218 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
|-CXXConstructorDecl 0x5632d93902b8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5632d93902b8
| `-ParmVarDecl 0x5632d93903c8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-CXXDestructorDecl 0x5632d9390438 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5632d9390438
|-CXXMethodDecl 0x5632d9390d08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390d08
| `-ParmVarDecl 0x5632d9390e18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
`-CXXMethodDecl 0x5632d9390e88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5632d9390e88
  `-ParmVarDecl 0x5632d9390f98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { {}* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d938f440 <../dummy_inc/click/handler.hh:294:5, line:297:5> line:294:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5632d938f568 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
|-FieldDecl 0x5632d938f5f0 <line:296:2, col:23> col:23 w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
|-CXXConstructorDecl 0x5632d9390568 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390568
| `-ParmVarDecl 0x5632d9390678 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
|-CXXConstructorDecl 0x5632d9390718 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5632d9390718
| `-ParmVarDecl 0x5632d9390828 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-CXXDestructorDecl 0x5632d9390898 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5632d9390898
|-CXXMethodDecl 0x5632d9391038 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5632d9391038
| `-ParmVarDecl 0x5632d9391148 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
`-CXXMethodDecl 0x5632d93911b8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5632d93911b8
  `-ParmVarDecl 0x5632d93912c8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.5 = type { {}* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d938aac8 prev 0x5632d9389f60 <../dummy_inc/click/handler.hh:19:1, line:313:1> line:19:7 referenced class Handler definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5632d938abc0 <col:1, col:7> col:7 implicit referenced class Handler
|-AccessSpecDecl 0x5632d938ac50 <col:17, col:23> col:17 public
|-EnumDecl 0x5632d938ac78 <line:21:5, line:59:5> line:21:10 Flags
| |-EnumConstantDecl 0x5632d938ad80 <line:22:2, col:11> col:2 referenced f_read 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bad0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938ad60 <col:11> 'int' Int: 1
| |     `-IntegerLiteral 0x5632d938ad40 <col:11> 'int' 1
| |-EnumConstantDecl 0x5632d938ae10 <line:23:2, col:12> col:2 referenced f_write 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bae8 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938adf0 <col:12> 'int' Int: 2
| |     `-IntegerLiteral 0x5632d938add0 <col:12> 'int' 2
| |-EnumConstantDecl 0x5632d938aea0 <line:24:2, col:17> col:2 referenced f_read_param 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb00 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938ae80 <col:17> 'int' Int: 4
| |     `-IntegerLiteral 0x5632d938ae60 <col:17> 'int' 4
| |-EnumConstantDecl 0x5632d938af30 <line:25:2, col:16> col:2 referenced f_exclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb18 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938af10 <col:16> 'int' Int: 0
| |     `-IntegerLiteral 0x5632d938aef0 <col:16> 'int' 0
| |-EnumConstantDecl 0x5632d938afc0 <line:28:2, col:19> col:2 referenced f_nonexclusive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb30 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938afa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5632d938af80 <col:19> 'int' 32
| |-EnumConstantDecl 0x5632d938b050 <line:31:2, col:10> col:2 referenced f_raw 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb48 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b030 <col:10> 'int' Int: 64
| |     `-IntegerLiteral 0x5632d938b010 <col:10> 'int' 64
| |-EnumConstantDecl 0x5632d938b0e0 <line:32:2, col:19> col:2 referenced f_read_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb60 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b0c0 <col:19> 'int' Int: 128
| |     `-IntegerLiteral 0x5632d938b0a0 <col:19> 'int' 128
| |-EnumConstantDecl 0x5632d938b170 <line:34:2, col:20> col:2 referenced f_write_private 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb78 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b150 <col:20> 'int' Int: 256
| |     `-IntegerLiteral 0x5632d938b130 <col:20> 'int' 256
| |-EnumConstantDecl 0x5632d938b200 <line:36:2, col:17> col:2 referenced f_deprecated 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bb90 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b1e0 <col:17> 'int' Int: 512
| |     `-IntegerLiteral 0x5632d938b1c0 <col:17> 'int' 512
| |-EnumConstantDecl 0x5632d938b290 <line:38:2, col:15> col:2 referenced f_uncommon 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bba8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b270 <col:15> 'int' Int: 1024
| |     `-IntegerLiteral 0x5632d938b250 <col:15> 'int' 1024
| |-EnumConstantDecl 0x5632d938b320 <line:40:2, col:11> col:2 referenced f_calm 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bbc0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b300 <col:11> 'int' Int: 2048
| |     `-IntegerLiteral 0x5632d938b2e0 <col:11> 'int' 2048
| |-EnumConstantDecl 0x5632d938b3b0 <line:41:2, col:16> col:2 referenced f_expensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bbd8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b390 <col:16> 'int' Int: 4096
| |     `-IntegerLiteral 0x5632d938b370 <col:16> 'int' 4096
| |-EnumConstantDecl 0x5632d938b440 <line:42:2, col:13> col:2 referenced f_button 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bbf0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b420 <col:13> 'int' Int: 8192
| |     `-IntegerLiteral 0x5632d938b400 <col:13> 'int' 8192
| |-EnumConstantDecl 0x5632d938b4d0 <line:43:2, col:15> col:2 referenced f_checkbox 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bc08 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b4b0 <col:15> 'int' Int: 16384
| |     `-IntegerLiteral 0x5632d938b490 <col:15> 'int' 16384
| |-EnumConstantDecl 0x5632d938b5a0 <line:45:2, col:20> col:2 referenced f_driver0 'Handler::Flags'
| | `-ConstantExpr 0x5632d938b580 <col:14, col:20> 'unsigned int' Int: 67108864
| |   `-BinaryOperator 0x5632d938b560 <col:14, col:20> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5632d938b520 <col:14> 'unsigned int' 1
| |     `-IntegerLiteral 0x5632d938b540 <col:20> 'int' 26
| |-EnumConstantDecl 0x5632d938b670 <line:46:9, col:27> col:9 referenced f_driver1 'Handler::Flags'
| | `-ConstantExpr 0x5632d938b650 <col:21, col:27> 'unsigned int' Int: 134217728
| |   `-BinaryOperator 0x5632d938b630 <col:21, col:27> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5632d938b5f0 <col:21> 'unsigned int' 1
| |     `-IntegerLiteral 0x5632d938b610 <col:27> 'int' 27
| |-EnumConstantDecl 0x5632d938b700 <line:48:2, col:17> col:2 referenced f_user_shift 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bc20 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b6e0 <col:17> 'int' Int: 28
| |     `-IntegerLiteral 0x5632d938b6c0 <col:17> 'int' 28
| |-EnumConstantDecl 0x5632d938b7d0 <line:49:2, col:18> col:2 referenced f_user0 'Handler::Flags'
| | `-ConstantExpr 0x5632d938b7b0 <col:12, col:18> 'unsigned int' Int: 268435456
| |   `-BinaryOperator 0x5632d938b790 <col:12, col:18> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5632d938b750 <col:12> 'unsigned int' 1
| |     `-DeclRefExpr 0x5632d938b770 <col:18> 'int' EnumConstant 0x5632d938b700 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938b860 <line:54:2, col:25> col:2 referenced f_read_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bc38 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b840 <col:25> 'int' Int: 8
| |     `-IntegerLiteral 0x5632d938b820 <col:25> 'int' 8
| |-EnumConstantDecl 0x5632d938b8f0 <line:55:2, col:26> col:2 referenced f_write_comprehensive 'Handler::Flags'
| | `-ImplicitCastExpr 0x5632d938bc50 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938b8d0 <col:26> 'int' Int: 16
| |     `-IntegerLiteral 0x5632d938b8b0 <col:26> 'int' 16
| `-EnumConstantDecl 0x5632d938ba80 <line:56:2, col:71> col:2 referenced f_special 'Handler::Flags'
|   `-ImplicitCastExpr 0x5632d938bc68 <col:14, col:71> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d938ba60 <col:14, col:71> 'int' Int: 31
|       `-BinaryOperator 0x5632d938ba40 <col:14, col:71> 'int' '|'
|         |-BinaryOperator 0x5632d938ba00 <col:14, col:48> 'int' '|'
|         | |-BinaryOperator 0x5632d938b9c0 <col:14, col:33> 'int' '|'
|         | | |-BinaryOperator 0x5632d938b980 <col:14, col:23> 'int' '|'
|         | | | |-DeclRefExpr 0x5632d938b940 <col:14> 'int' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|         | | | `-DeclRefExpr 0x5632d938b960 <col:23> 'int' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
|         | | `-DeclRefExpr 0x5632d938b9a0 <col:33> 'int' EnumConstant 0x5632d938aea0 'f_read_param' 'Handler::Flags'
|         | `-DeclRefExpr 0x5632d938b9e0 <col:48> 'int' EnumConstant 0x5632d938b860 'f_read_comprehensive' 'Handler::Flags'
|         `-DeclRefExpr 0x5632d938ba20 <col:71> 'int' EnumConstant 0x5632d938b8f0 'f_write_comprehensive' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938bcc8 <line:62:5, line:64:5> line:62:26 name 'const String &() const' inline
| `-CompoundStmt 0x5632d93916e8 <col:39, line:64:5>
|   `-ReturnStmt 0x5632d93916d8 <line:63:2, col:9>
|     `-MemberExpr 0x5632d93916a8 <col:9> 'const String' lvalue ->_name 0x5632d938f0f0
|       `-CXXThisExpr 0x5632d9391698 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938bd88 <line:69:5, line:71:5> line:69:21 flags 'uint32_t () const' inline
| `-CompoundStmt 0x5632d9391768 <col:35, line:71:5>
|   `-ReturnStmt 0x5632d9391758 <line:70:2, col:9>
|     `-ImplicitCastExpr 0x5632d9391740 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5632d9391710 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|         `-CXXThisExpr 0x5632d9391700 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938bed8 <line:75:5, line:77:5> line:75:18 user_data 'void *(int) const' inline
| |-ParmVarDecl 0x5632d938be40 <col:28, col:32> col:32 used op 'int'
| `-CompoundStmt 0x5632d93918e8 <col:42, line:77:5>
|   `-ReturnStmt 0x5632d93918d8 <line:76:2, col:44>
|     `-ImplicitCastExpr 0x5632d93918c0 <col:9, col:44> 'void *' <LValueToRValue>
|       `-ConditionalOperator 0x5632d9391890 <col:9, col:44> 'void *const' lvalue
|         |-BinaryOperator 0x5632d93917f0 <col:9, col:15> 'bool' '=='
|         | |-ImplicitCastExpr 0x5632d93917c0 <col:9> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5632d9391780 <col:9> 'int' lvalue ParmVar 0x5632d938be40 'op' 'int'
|         | `-ImplicitCastExpr 0x5632d93917d8 <col:15> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5632d93917a0 <col:15> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
|         |-MemberExpr 0x5632d9391820 <col:25> 'void *const' lvalue ->_write_user_data 0x5632d938f7a0
|         | `-CXXThisExpr 0x5632d9391810 <col:25> 'const Handler *' implicit this
|         `-MemberExpr 0x5632d9391860 <col:44> 'void *const' lvalue ->_read_user_data 0x5632d938f738
|           `-CXXThisExpr 0x5632d9391850 <col:44> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938bfa8 <line:80:5, line:82:5> line:80:18 read_user_data 'void *() const' inline
| `-CompoundStmt 0x5632d9391968 <col:41, line:82:5>
|   `-ReturnStmt 0x5632d9391958 <line:81:2, col:9>
|     `-ImplicitCastExpr 0x5632d9391940 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5632d9391910 <col:9> 'void *const' lvalue ->_read_user_data 0x5632d938f738
|         `-CXXThisExpr 0x5632d9391900 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938c070 <line:85:5, line:87:5> line:85:18 write_user_data 'void *() const' inline
| `-CompoundStmt 0x5632d93919e8 <col:42, line:87:5>
|   `-ReturnStmt 0x5632d93919d8 <line:86:2, col:9>
|     `-ImplicitCastExpr 0x5632d93919c0 <col:9> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5632d9391990 <col:9> 'void *const' lvalue ->_write_user_data 0x5632d938f7a0
|         `-CXXThisExpr 0x5632d9391980 <col:9> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938c138 <line:90:5, col:63> col:18 user_data1 'void *() const' inline
| `-DeprecatedAttr 0x5632d938c1d8 <col:52> "" ""
|-CXXMethodDecl 0x5632d938c270 <line:91:5, col:63> col:18 user_data2 'void *() const' inline
| `-DeprecatedAttr 0x5632d938c310 <col:52> "" ""
|-CXXMethodDecl 0x5632d938c3a0 <line:96:5, line:98:5> line:96:17 readable 'bool () const' inline
| `-CompoundStmt 0x5632d9391ad8 <col:34, line:98:5>
|   `-ReturnStmt 0x5632d9391ac8 <line:97:2, col:18>
|     `-ImplicitCastExpr 0x5632d9391ab0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d9391a90 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5632d9391a60 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5632d9391a10 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|         |   `-CXXThisExpr 0x5632d9391a00 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5632d9391a78 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5632d9391a40 <col:18> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c460 <line:102:5, line:104:5> line:102:17 read_param 'bool () const' inline
| `-CompoundStmt 0x5632d9391bc8 <col:36, line:104:5>
|   `-ReturnStmt 0x5632d9391bb8 <line:103:2, col:18>
|     `-ImplicitCastExpr 0x5632d9391ba0 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d9391b80 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5632d9391b50 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5632d9391b00 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|         |   `-CXXThisExpr 0x5632d9391af0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5632d9391b68 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5632d9391b30 <col:18> 'Handler::Flags' EnumConstant 0x5632d938aea0 'f_read_param' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c520 <line:111:5, line:113:5> line:111:17 used read_visible 'bool () const' inline
| `-CompoundStmt 0x5632d9391da8 <col:38, line:113:5>
|   `-ReturnStmt 0x5632d9391d98 <line:112:2, col:49>
|     `-BinaryOperator 0x5632d9391d78 <col:9, col:49> 'bool' '=='
|       |-ParenExpr 0x5632d9391d20 <col:9, col:44> 'unsigned int'
|       | `-BinaryOperator 0x5632d9391d00 <col:10, col:43> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5632d9391cd0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5632d9391bf0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|       |   |   `-CXXThisExpr 0x5632d9391be0 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5632d9391ce8 <col:19, col:43> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5632d9391cb0 <col:19, col:43> 'int'
|       |       `-BinaryOperator 0x5632d9391c90 <col:20, col:29> 'int' '|'
|       |         |-ImplicitCastExpr 0x5632d9391c60 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5632d9391c20 <col:20> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5632d9391c78 <col:29> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5632d9391c40 <col:29> 'Handler::Flags' EnumConstant 0x5632d938b0e0 'f_read_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5632d9391d60 <col:49> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5632d9391d40 <col:49> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c5e0 <line:116:5, line:118:5> line:116:17 writable 'bool () const' inline
| `-CompoundStmt 0x5632d9391e98 <col:34, line:118:5>
|   `-ReturnStmt 0x5632d9391e88 <line:117:2, col:18>
|     `-ImplicitCastExpr 0x5632d9391e70 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d9391e50 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5632d9391e20 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5632d9391dd0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|         |   `-CXXThisExpr 0x5632d9391dc0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5632d9391e38 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5632d9391e00 <col:18> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c6a0 <line:125:5, line:127:5> line:125:17 used write_visible 'bool () const' inline
| `-CompoundStmt 0x5632d9392078 <col:39, line:127:5>
|   `-ReturnStmt 0x5632d9392068 <line:126:2, col:51>
|     `-BinaryOperator 0x5632d9392048 <col:9, col:51> 'bool' '=='
|       |-ParenExpr 0x5632d9391ff0 <col:9, col:46> 'unsigned int'
|       | `-BinaryOperator 0x5632d9391fd0 <col:10, col:45> 'unsigned int' '&'
|       |   |-ImplicitCastExpr 0x5632d9391fa0 <col:10> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-MemberExpr 0x5632d9391ec0 <col:10> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|       |   |   `-CXXThisExpr 0x5632d9391eb0 <col:10> 'const Handler *' implicit this
|       |   `-ImplicitCastExpr 0x5632d9391fb8 <col:19, col:45> 'unsigned int' <IntegralCast>
|       |     `-ParenExpr 0x5632d9391f80 <col:19, col:45> 'int'
|       |       `-BinaryOperator 0x5632d9391f60 <col:20, col:30> 'int' '|'
|       |         |-ImplicitCastExpr 0x5632d9391f30 <col:20> 'int' <IntegralCast>
|       |         | `-DeclRefExpr 0x5632d9391ef0 <col:20> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
|       |         `-ImplicitCastExpr 0x5632d9391f48 <col:30> 'int' <IntegralCast>
|       |           `-DeclRefExpr 0x5632d9391f10 <col:30> 'Handler::Flags' EnumConstant 0x5632d938b170 'f_write_private' 'Handler::Flags'
|       `-ImplicitCastExpr 0x5632d9392030 <col:51> 'unsigned int' <IntegralCast>
|         `-DeclRefExpr 0x5632d9392010 <col:51> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c760 <line:130:5, line:132:5> line:130:17 visible 'bool () const' inline
| `-CompoundStmt 0x5632d9392180 <col:33, line:132:5>
|   `-ReturnStmt 0x5632d9392170 <line:131:2, col:41>
|     `-BinaryOperator 0x5632d9392150 <col:9, col:41> 'bool' '||'
|       |-CXXMemberCallExpr 0x5632d93920d0 <col:9, col:22> 'bool'
|       | `-MemberExpr 0x5632d93920a0 <col:9> '<bound member function type>' ->read_visible 0x5632d938c520
|       |   `-CXXThisExpr 0x5632d9392090 <col:9> 'const Handler *' implicit this
|       `-CXXMemberCallExpr 0x5632d9392130 <col:27, col:41> 'bool'
|         `-MemberExpr 0x5632d9392100 <col:27> '<bound member function type>' ->write_visible 0x5632d938c6a0
|           `-CXXThisExpr 0x5632d93920f0 <col:27> 'const Handler *' implicit this
|-CXXMethodDecl 0x5632d938c820 <line:136:5, line:138:5> line:136:17 allow_concurrent_handlers 'bool () const' inline
| `-CompoundStmt 0x5632d93922b8 <col:51, line:138:5>
|   `-ReturnStmt 0x5632d93922a8 <line:137:9, col:40>
|     `-ImplicitCastExpr 0x5632d9392290 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5632d9392270 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5632d9392228 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5632d93921f8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5632d93921a8 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|           |   `-CXXThisExpr 0x5632d9392198 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5632d9392210 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5632d93921d8 <col:26> 'Handler::Flags' EnumConstant 0x5632d938afc0 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c8e0 <line:142:5, line:144:5> line:142:17 allow_concurrent_threads 'bool () const' inline
| `-CompoundStmt 0x5632d93923c8 <col:50, line:144:5>
|   `-ReturnStmt 0x5632d93923b8 <line:143:9, col:40>
|     `-ImplicitCastExpr 0x5632d93923a0 <col:16, col:40> 'bool' <IntegralToBoolean>
|       `-ParenExpr 0x5632d9392380 <col:16, col:40> 'unsigned int'
|         `-BinaryOperator 0x5632d9392360 <col:17, col:26> 'unsigned int' '&'
|           |-ImplicitCastExpr 0x5632d9392330 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|           | `-MemberExpr 0x5632d93922e0 <col:17> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|           |   `-CXXThisExpr 0x5632d93922d0 <col:17> 'const Handler *' implicit this
|           `-ImplicitCastExpr 0x5632d9392348 <col:26> 'unsigned int' <IntegralCast>
|             `-DeclRefExpr 0x5632d9392310 <col:26> 'Handler::Flags' EnumConstant 0x5632d938afc0 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938c9a0 <line:164:5, line:166:5> line:164:17 raw 'bool () const' inline
| `-CompoundStmt 0x5632d93924b8 <col:29, line:166:5>
|   `-ReturnStmt 0x5632d93924a8 <line:165:2, col:18>
|     `-ImplicitCastExpr 0x5632d9392490 <col:9, col:18> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5632d9392470 <col:9, col:18> 'unsigned int' '&'
|         |-ImplicitCastExpr 0x5632d9392440 <col:9> 'uint32_t':'unsigned int' <LValueToRValue>
|         | `-MemberExpr 0x5632d93923f0 <col:9> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|         |   `-CXXThisExpr 0x5632d93923e0 <col:9> 'const Handler *' implicit this
|         `-ImplicitCastExpr 0x5632d9392458 <col:18> 'unsigned int' <IntegralCast>
|           `-DeclRefExpr 0x5632d9392420 <col:18> 'Handler::Flags' EnumConstant 0x5632d938b050 'f_raw' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938cc28 <line:177:5, col:75> col:12 used call_read 'String (Element *, const String &, ErrorHandler *) const'
| |-ParmVarDecl 0x5632d938ca50 <col:22, col:31> col:31 e 'Element *'
| |-ParmVarDecl 0x5632d938cac8 <col:34, col:48> col:48 param 'const String &'
| `-ParmVarDecl 0x5632d938cb40 <col:55, col:69> col:69 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d938ce38 <line:186:5, line:188:5> line:186:19 call_read 'String (Element *, ErrorHandler *) const' inline
| |-ParmVarDecl 0x5632d938ccf0 <col:29, col:38> col:38 used e 'Element *'
| |-ParmVarDecl 0x5632d938cd68 <col:41, col:62> col:55 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5632d93915d0 <col:62> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5632d93915b0 <col:62> 'int' 0
| `-CompoundStmt 0x5632d9392758 <col:71, line:188:5>
|   `-ReturnStmt 0x5632d9392748 <line:187:2, col:36>
|     `-ExprWithCleanups 0x5632d9392730 <col:9, col:36> 'String'
|       `-CXXConstructExpr 0x5632d9392700 <col:9, col:36> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5632d93926e8 <col:9, col:36> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5632d93926c8 <col:9, col:36> 'String' (CXXTemporary 0x5632d93926c8)
|             `-CXXMemberCallExpr 0x5632d9392628 <col:9, col:36> 'String'
|               |-MemberExpr 0x5632d93925f8 <col:9> '<bound member function type>' ->call_read 0x5632d938cc28
|               | `-CXXThisExpr 0x5632d93925e8 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5632d9392660 <col:19> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5632d9392540 <col:19> 'Element *' lvalue ParmVar 0x5632d938ccf0 'e' 'Element *'
|               |-MaterializeTemporaryExpr 0x5632d9392690 <col:22, col:29> 'const String' lvalue
|               | `-ImplicitCastExpr 0x5632d9392678 <col:22, col:29> 'const String' <NoOp>
|               |   `-CXXBindTemporaryExpr 0x5632d93925a8 <col:22, col:29> 'String' (CXXTemporary 0x5632d93925a8)
|               |     `-CXXTemporaryObjectExpr 0x5632d9392570 <col:22, col:29> 'String' 'void ()'
|               `-ImplicitCastExpr 0x5632d93926a8 <col:32> 'ErrorHandler *' <LValueToRValue>
|                 `-DeclRefExpr 0x5632d93925c8 <col:32> 'ErrorHandler *' lvalue ParmVar 0x5632d938cd68 'errh' 'ErrorHandler *'
|-CXXMethodDecl 0x5632d938d0d0 <line:198:5, col:73> col:9 call_write 'int (const String &, Element *, ErrorHandler *) const'
| |-ParmVarDecl 0x5632d938cef8 <col:20, col:34> col:34 value 'const String &'
| |-ParmVarDecl 0x5632d938cf70 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5632d938cfe8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5632d938d258 <line:207:5, col:37> col:12 unparse_name 'String (Element *) const'
| `-ParmVarDecl 0x5632d938d198 <col:25, col:34> col:34 e 'Element *'
|-CXXMethodDecl 0x5632d938d488 <line:216:5, col:63> col:19 unparse_name 'String (Element *, const String &)' static
| |-ParmVarDecl 0x5632d938d310 <col:32, col:41> col:41 e 'Element *'
| `-ParmVarDecl 0x5632d938d388 <col:44, col:58> col:58 hname 'const String &'
|-CXXMethodDecl 0x5632d938d588 <line:223:5, line:225:5> line:223:34 blank_handler 'const Handler *()' static inline
| `-CompoundStmt 0x5632d93927b8 <col:50, line:225:5>
|   `-ReturnStmt 0x5632d93927a8 <line:224:2, col:9>
|     `-ImplicitCastExpr 0x5632d9392790 <col:9> 'const Handler *' <LValueToRValue>
|       `-DeclRefExpr 0x5632d9392770 <col:9> 'const Handler *' lvalue Var 0x5632d938f930 'the_blank_handler' 'const Handler *'
|-EnumDecl 0x5632d938d628 <line:229:5, line:251:5> line:229:5
| |-EnumConstantDecl 0x5632d938d730 <line:230:2, col:11> col:2 h_read 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e2d0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d710 <col:11> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5632d938d6f0 <col:11> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938d7c0 <line:231:2, col:12> col:2 h_write 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e2e8 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d7a0 <col:12> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5632d938d780 <col:12> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938d850 <line:232:2, col:17> col:2 h_read_param 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e300 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d830 <col:17> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5632d938d810 <col:17> 'Handler::Flags' EnumConstant 0x5632d938aea0 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938d8e0 <line:233:2, col:16> col:2 h_exclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e318 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d8c0 <col:16> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5632d938d8a0 <col:16> 'Handler::Flags' EnumConstant 0x5632d938af30 'f_exclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938d970 <line:234:2, col:19> col:2 h_nonexclusive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e330 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d950 <col:19> 'Handler::Flags' Int: 32
| |     `-DeclRefExpr 0x5632d938d930 <col:19> 'Handler::Flags' EnumConstant 0x5632d938afc0 'f_nonexclusive' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938da00 <line:235:2, col:10> col:2 h_raw 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e348 <col:10> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938d9e0 <col:10> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5632d938d9c0 <col:10> 'Handler::Flags' EnumConstant 0x5632d938b050 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938da90 <line:236:2, col:19> col:2 h_read_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e360 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938da70 <col:19> 'Handler::Flags' Int: 128
| |     `-DeclRefExpr 0x5632d938da50 <col:19> 'Handler::Flags' EnumConstant 0x5632d938b0e0 'f_read_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938db20 <line:237:2, col:20> col:2 h_write_private 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e378 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938db00 <col:20> 'Handler::Flags' Int: 256
| |     `-DeclRefExpr 0x5632d938dae0 <col:20> 'Handler::Flags' EnumConstant 0x5632d938b170 'f_write_private' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938dbb0 <line:238:2, col:17> col:2 h_deprecated 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e390 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938db90 <col:17> 'Handler::Flags' Int: 512
| |     `-DeclRefExpr 0x5632d938db70 <col:17> 'Handler::Flags' EnumConstant 0x5632d938b200 'f_deprecated' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938dc40 <line:239:2, col:15> col:2 h_uncommon 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e3a8 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938dc20 <col:15> 'Handler::Flags' Int: 1024
| |     `-DeclRefExpr 0x5632d938dc00 <col:15> 'Handler::Flags' EnumConstant 0x5632d938b290 'f_uncommon' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938dcd0 <line:240:2, col:11> col:2 h_calm 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e3c0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938dcb0 <col:11> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5632d938dc90 <col:11> 'Handler::Flags' EnumConstant 0x5632d938b320 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938dd60 <line:241:2, col:16> col:2 h_expensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e3d8 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938dd40 <col:16> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5632d938dd20 <col:16> 'Handler::Flags' EnumConstant 0x5632d938b3b0 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938ddf0 <line:242:2, col:13> col:2 h_button 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e3f0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938ddd0 <col:13> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5632d938ddb0 <col:13> 'Handler::Flags' EnumConstant 0x5632d938b440 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938de80 <line:243:2, col:15> col:2 h_checkbox 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e408 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938de60 <col:15> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5632d938de40 <col:15> 'Handler::Flags' EnumConstant 0x5632d938b4d0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938df10 <line:244:2, col:20> col:2 h_driver_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e420 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938def0 <col:20> 'Handler::Flags' Int: 67108864
| |     `-DeclRefExpr 0x5632d938ded0 <col:20> 'Handler::Flags' EnumConstant 0x5632d938b5a0 'f_driver0' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938dfa0 <line:245:9, col:27> col:9 h_driver_flag_1 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e438 <col:27> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938df80 <col:27> 'Handler::Flags' Int: 134217728
| |     `-DeclRefExpr 0x5632d938df60 <col:27> 'Handler::Flags' EnumConstant 0x5632d938b670 'f_driver1' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e030 <line:246:2, col:22> col:2 h_user_flag_shift 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e450 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e010 <col:22> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5632d938dff0 <col:22> 'Handler::Flags' EnumConstant 0x5632d938b700 'f_user_shift' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e0c0 <line:247:2, col:18> col:2 h_user_flag_0 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e468 <col:18> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e0a0 <col:18> 'Handler::Flags' Int: 268435456
| |     `-DeclRefExpr 0x5632d938e080 <col:18> 'Handler::Flags' EnumConstant 0x5632d938b7d0 'f_user0' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e150 <line:248:2, col:25> col:2 h_read_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e480 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e130 <col:25> 'Handler::Flags' Int: 8
| |     `-DeclRefExpr 0x5632d938e110 <col:25> 'Handler::Flags' EnumConstant 0x5632d938b860 'f_read_comprehensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e1e0 <line:249:2, col:26> col:2 h_write_comprehensive 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
| | `-ImplicitCastExpr 0x5632d938e498 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e1c0 <col:26> 'Handler::Flags' Int: 16
| |     `-DeclRefExpr 0x5632d938e1a0 <col:26> 'Handler::Flags' EnumConstant 0x5632d938b8f0 'f_write_comprehensive' 'Handler::Flags'
| `-EnumConstantDecl 0x5632d938e280 <line:250:2, col:20> col:2 h_special_flags 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:229:5)'
|   `-ImplicitCastExpr 0x5632d938e4b0 <col:20> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d938e260 <col:20> 'Handler::Flags' Int: 31
|       `-DeclRefExpr 0x5632d938e230 <col:20> 'Handler::Flags' EnumConstant 0x5632d938ba80 'f_special' 'Handler::Flags'
|-EnumDecl 0x5632d938e4c8 <line:252:5, line:267:5> line:252:10 DeprecatedFlags
| |-EnumConstantDecl 0x5632d938e5d0 <line:253:2, col:12> col:2 OP_READ 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eb30 <col:12> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e5b0 <col:12> 'Handler::Flags' Int: 1
| |     `-DeclRefExpr 0x5632d938e590 <col:12> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e660 <line:254:2, col:13> col:2 OP_WRITE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eb48 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e640 <col:13> 'Handler::Flags' Int: 2
| |     `-DeclRefExpr 0x5632d938e620 <col:13> 'Handler::Flags' EnumConstant 0x5632d938ae10 'f_write' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e6f0 <line:255:2, col:15> col:2 READ_PARAM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eb60 <col:15> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e6d0 <col:15> 'Handler::Flags' Int: 4
| |     `-DeclRefExpr 0x5632d938e6b0 <col:15> 'Handler::Flags' EnumConstant 0x5632d938aea0 'f_read_param' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e780 <line:256:2, col:8> col:2 RAW 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eb78 <col:8> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e760 <col:8> 'Handler::Flags' Int: 64
| |     `-DeclRefExpr 0x5632d938e740 <col:8> 'Handler::Flags' EnumConstant 0x5632d938b050 'f_raw' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e810 <line:261:2, col:9> col:2 CALM 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eb90 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e7f0 <col:9> 'Handler::Flags' Int: 2048
| |     `-DeclRefExpr 0x5632d938e7d0 <col:9> 'Handler::Flags' EnumConstant 0x5632d938b320 'f_calm' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e8a0 <line:262:2, col:14> col:2 EXPENSIVE 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938eba8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e880 <col:14> 'Handler::Flags' Int: 4096
| |     `-DeclRefExpr 0x5632d938e860 <col:14> 'Handler::Flags' EnumConstant 0x5632d938b3b0 'f_expensive' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e930 <line:263:2, col:11> col:2 BUTTON 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938ebc0 <col:11> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e910 <col:11> 'Handler::Flags' Int: 8192
| |     `-DeclRefExpr 0x5632d938e8f0 <col:11> 'Handler::Flags' EnumConstant 0x5632d938b440 'f_button' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938e9c0 <line:264:2, col:13> col:2 CHECKBOX 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938ebd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938e9a0 <col:13> 'Handler::Flags' Int: 16384
| |     `-DeclRefExpr 0x5632d938e980 <col:13> 'Handler::Flags' EnumConstant 0x5632d938b4d0 'f_checkbox' 'Handler::Flags'
| |-EnumConstantDecl 0x5632d938ea50 <line:265:2, col:20> col:2 USER_FLAG_SHIFT 'Handler::DeprecatedFlags'
| | `-ImplicitCastExpr 0x5632d938ebf0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938ea30 <col:20> 'Handler::Flags' Int: 28
| |     `-DeclRefExpr 0x5632d938ea10 <col:20> 'Handler::Flags' EnumConstant 0x5632d938b700 'f_user_shift' 'Handler::Flags'
| `-EnumConstantDecl 0x5632d938eae0 <line:266:2, col:16> col:2 USER_FLAG_0 'Handler::DeprecatedFlags'
|   `-ImplicitCastExpr 0x5632d938ec08 <col:16> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d938eac0 <col:16> 'Handler::Flags' Int: 268435456
|       `-DeclRefExpr 0x5632d938eaa0 <col:16> 'Handler::Flags' EnumConstant 0x5632d938b7d0 'f_user0' 'Handler::Flags'
|-EnumDecl 0x5632d938ec20 <line:268:5, line:271:5> line:268:5
| |-DeprecatedAttr 0x5632d938ece0 <col:25> "" ""
| |-EnumConstantDecl 0x5632d938ed90 <line:269:2, col:14> col:2 EXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
| | `-ImplicitCastExpr 0x5632d938ee70 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5632d938ed70 <col:14> 'Handler::Flags' Int: 0
| |     `-DeclRefExpr 0x5632d938ed50 <col:14> 'Handler::Flags' EnumConstant 0x5632d938af30 'f_exclusive' 'Handler::Flags'
| `-EnumConstantDecl 0x5632d938ee20 <line:270:2, col:17> col:2 NONEXCLUSIVE 'Handler::(anonymous enum at ../dummy_inc/click/handler.hh:268:5)'
|   `-ImplicitCastExpr 0x5632d938ee88 <col:17> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5632d938ee00 <col:17> 'Handler::Flags' Int: 32
|       `-DeclRefExpr 0x5632d938ede0 <col:17> 'Handler::Flags' EnumConstant 0x5632d938afc0 'f_nonexclusive' 'Handler::Flags'
|-CXXMethodDecl 0x5632d938f008 <line:281:5, line:284:5> line:281:19 __call_read 'String (Element *, void *) const' inline
| |-ParmVarDecl 0x5632d938eeb0 <col:31, col:40> col:40 used e 'Element *'
| |-ParmVarDecl 0x5632d938ef30 <col:43, col:49> col:49 used new_user_data 'void *'
| `-CompoundStmt 0x5632d9392e78 <col:70, line:284:5>
|   |-ParenExpr 0x5632d9392c98 <line:282:2, col:233> 'void'
|   | `-ConditionalOperator 0x5632d9392c68 <col:3, col:232> 'void'
|   |   |-CXXStaticCastExpr 0x5632d9392998 <col:3, col:75> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5632d9392968 <col:23, col:69> 'bool' '=='
|   |   |   |-ParenExpr 0x5632d9392910 <col:23, col:64> 'unsigned int'
|   |   |   | `-BinaryOperator 0x5632d93928f0 <col:24, col:63> 'unsigned int' '&'
|   |   |   |   |-ImplicitCastExpr 0x5632d93928c0 <col:24> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   |   |   | `-MemberExpr 0x5632d93927e0 <col:24> 'const uint32_t':'const unsigned int' lvalue ->_flags 0x5632d938f800
|   |   |   |   |   `-CXXThisExpr 0x5632d93927d0 <col:24> 'const Handler *' implicit this
|   |   |   |   `-ImplicitCastExpr 0x5632d93928d8 <col:33, col:63> 'unsigned int' <IntegralCast>
|   |   |   |     `-ParenExpr 0x5632d93928a0 <col:33, col:63> 'int'
|   |   |   |       `-BinaryOperator 0x5632d9392880 <col:34, col:43> 'int' '|'
|   |   |   |         |-ImplicitCastExpr 0x5632d9392850 <col:34> 'int' <IntegralCast>
|   |   |   |         | `-DeclRefExpr 0x5632d9392810 <col:34> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|   |   |   |         `-ImplicitCastExpr 0x5632d9392868 <col:43> 'int' <IntegralCast>
|   |   |   |           `-DeclRefExpr 0x5632d9392830 <col:43> 'Handler::Flags' EnumConstant 0x5632d938b860 'f_read_comprehensive' 'Handler::Flags'
|   |   |   `-ImplicitCastExpr 0x5632d9392950 <col:69> 'unsigned int' <IntegralCast>
|   |   |     `-DeclRefExpr 0x5632d9392930 <col:69> 'Handler::Flags' EnumConstant 0x5632d938ad80 'f_read' 'Handler::Flags'
|   |   |-CXXFunctionalCastExpr 0x5632d93929f8 <col:79, col:86> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5632d93929d8 <col:85> 'int' 0
|   |   `-CallExpr 0x5632d9392bc8 <col:90, col:232> 'void'
|   |     |-ImplicitCastExpr 0x5632d9392bb0 <col:90> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5632d9392b90 <col:90> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5632d8ece090 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5632d9392c08 <col:105> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9392a68 <col:105> 'const char [53]' lvalue "(_flags & (f_read | f_read_comprehensive)) == f_read"
|   |     |-ImplicitCastExpr 0x5632d9392c20 <col:161> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5632d9392ab8 <col:161> 'const char [30]' lvalue "../dummy_inc/click/handler.hh"
|   |     |-ImplicitCastExpr 0x5632d9392c38 <col:194> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5632d9392af0 <col:194> 'int' 282
|   |     `-ImplicitCastExpr 0x5632d9392c50 <col:199, col:213> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5632d9392b78 <col:199, col:213> 'const char [53]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5632d9392b60 <col:213> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5632d9392b10 <col:213> 'const char [53]' lvalue "String Handler::__call_read(Element *, void *) const"
|   `-ReturnStmt 0x5632d9392e68 <line:283:2, col:38>
|     `-ExprWithCleanups 0x5632d9392e50 <col:9, col:38> 'String'
|       `-CXXConstructExpr 0x5632d9392e20 <col:9, col:38> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5632d9392e08 <col:9, col:38> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5632d9392de8 <col:9, col:38> 'String' (CXXTemporary 0x5632d9392de8)
|             `-CallExpr 0x5632d9392d80 <col:9, col:38> 'String'
|               |-ImplicitCastExpr 0x5632d9392d68 <col:9, col:20> 'ReadHandlerCallback':'String (*)(Element *, void *)' <LValueToRValue>
|               | `-MemberExpr 0x5632d9392cf8 <col:9, col:20> 'const ReadHandlerCallback':'String (*const)(Element *, void *)' lvalue .r 0x5632d938f310
|               |   `-MemberExpr 0x5632d9392cc8 <col:9> 'const union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)' lvalue ->_read_hook 0x5632d938f3d8
|               |     `-CXXThisExpr 0x5632d9392cb8 <col:9> 'const Handler *' implicit this
|               |-ImplicitCastExpr 0x5632d9392db0 <col:22> 'Element *' <LValueToRValue>
|               | `-DeclRefExpr 0x5632d9392d28 <col:22> 'Element *' lvalue ParmVar 0x5632d938eeb0 'e' 'Element *'
|               `-ImplicitCastExpr 0x5632d9392dc8 <col:25> 'void *' <LValueToRValue>
|                 `-DeclRefExpr 0x5632d9392d48 <col:25> 'void *' lvalue ParmVar 0x5632d938ef30 'new_user_data' 'void *'
|-AccessSpecDecl 0x5632d938f0b8 <line:287:3, col:10> col:3 private
|-FieldDecl 0x5632d938f0f0 <line:289:5, col:12> col:12 referenced _name 'String'
|-CXXRecordDecl 0x5632d938f140 <line:290:5, line:293:5> line:290:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5632d938f290 <line:291:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5632d938f310 <line:292:2, col:22> col:22 referenced r 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-CXXConstructorDecl 0x5632d9390108 <line:290:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390108
| | `-ParmVarDecl 0x5632d9390218 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| |-CXXConstructorDecl 0x5632d93902b8 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5632d93902b8
| | `-ParmVarDecl 0x5632d93903c8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
| |-CXXDestructorDecl 0x5632d9390438 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5632d9390438
| |-CXXMethodDecl 0x5632d9390d08 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390d08
| | `-ParmVarDecl 0x5632d9390e18 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &'
| `-CXXMethodDecl 0x5632d9390e88 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&)' inline default trivial noexcept-unevaluated 0x5632d9390e88
|   `-ParmVarDecl 0x5632d9390f98 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5) &&'
|-FieldDecl 0x5632d938f3d8 <col:5, line:293:7> col:7 referenced _read_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:290:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:290:5)'
|-CXXRecordDecl 0x5632d938f440 <line:294:5, line:297:5> line:294:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5632d938f568 <line:295:2, col:18> col:18 h 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-FieldDecl 0x5632d938f5f0 <line:296:2, col:23> col:23 w 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-CXXConstructorDecl 0x5632d9390568 <line:294:5> col:5 implicit constexpr  'void (const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5632d9390568
| | `-ParmVarDecl 0x5632d9390678 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| |-CXXConstructorDecl 0x5632d9390718 <col:5> col:5 implicit constexpr  'void (Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5632d9390718
| | `-ParmVarDecl 0x5632d9390828 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
| |-CXXDestructorDecl 0x5632d9390898 <col:5> col:5 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x5632d9390898
| |-CXXMethodDecl 0x5632d9391038 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &)' inline default trivial noexcept-unevaluated 0x5632d9391038
| | `-ParmVarDecl 0x5632d9391148 <col:5> col:5 'const Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &'
| `-CXXMethodDecl 0x5632d93911b8 <col:5> col:5 implicit constexpr operator= 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &(Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&)' inline default trivial noexcept-unevaluated 0x5632d93911b8
|   `-ParmVarDecl 0x5632d93912c8 <col:5> col:5 'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5) &&'
|-FieldDecl 0x5632d938f6b8 <col:5, line:297:7> col:7 _write_hook 'union (anonymous union at ../dummy_inc/click/handler.hh:294:5)':'Handler::(anonymous union at ../dummy_inc/click/handler.hh:294:5)'
|-FieldDecl 0x5632d938f738 <line:298:5, col:11> col:11 referenced _read_user_data 'void *'
|-FieldDecl 0x5632d938f7a0 <line:299:5, col:11> col:11 referenced _write_user_data 'void *'
|-FieldDecl 0x5632d938f800 <line:300:5, col:14> col:14 referenced _flags 'uint32_t':'unsigned int'
|-FieldDecl 0x5632d938f868 <line:301:5, col:9> col:9 _use_count 'int'
|-FieldDecl 0x5632d938f8d0 <line:302:5, col:9> col:9 _next_by_name 'int'
|-VarDecl 0x5632d938f930 <line:304:5, col:27> col:27 used the_blank_handler 'const Handler *' static
|-CXXConstructorDecl 0x5632d938fa50 <line:306:5, col:38> col:5 Handler 'void (const String &)'
| `-ParmVarDecl 0x5632d938f9a8 <col:13, col:37> col:28 'const String &' cinit
|   `-ExprWithCleanups 0x5632d9391680 <col:30, col:37> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5632d9391668 <col:30, col:37> 'const String' lvalue
|       `-ImplicitCastExpr 0x5632d9391650 <col:30, col:37> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5632d9391630 <col:30, col:37> 'String' (CXXTemporary 0x5632d9391630)
|           `-CXXTemporaryObjectExpr 0x5632d93915f8 <col:30, col:37> 'String' 'void ()'
|-CXXMethodDecl 0x5632d938fbf8 <line:308:5, col:41> col:17 combine 'void (const Handler &)' inline
| `-ParmVarDecl 0x5632d938fb38 <col:25, col:40> col:40 x 'const Handler &'
|-CXXMethodDecl 0x5632d938fd78 <line:309:5, col:46> col:17 compatible 'bool (const Handler &) const' inline
| `-ParmVarDecl 0x5632d938fcb0 <col:28, col:43> col:43 x 'const Handler &'
|-FriendDecl 0x5632d938ff38 <line:311:5, col:18> col:12 'class Router':'Router'
|-CXXConstructorDecl 0x5632d938ff78 <line:19:7> col:7 implicit Handler 'void (const Handler &)' inline default noexcept-unevaluated 0x5632d938ff78
| `-ParmVarDecl 0x5632d9390058 <col:7> col:7 'const Handler &'
|-CXXConstructorDecl 0x5632d93909a8 <col:7> col:7 implicit Handler 'void (Handler &&)' inline default noexcept-unevaluated 0x5632d93909a8
| `-ParmVarDecl 0x5632d9390ab8 <col:7> col:7 'Handler &&'
|-CXXMethodDecl 0x5632d9390b58 <col:7> col:7 implicit operator= 'Handler &(const Handler &)' inline default noexcept-unevaluated 0x5632d9390b58
| `-ParmVarDecl 0x5632d9390c68 <col:7> col:7 'const Handler &'
|-CXXMethodDecl 0x5632d9391338 <col:7> col:7 implicit operator= 'Handler &(Handler &&)' inline default noexcept-unevaluated 0x5632d9391338
| `-ParmVarDecl 0x5632d9391448 <col:7> col:7 'Handler &&'
`-CXXDestructorDecl 0x5632d93914d0 <col:7> col:7 implicit ~Handler 'void ()' inline default noexcept-unevaluated 0x5632d93914d0

Layout: <CGRecordLayout
  LLVMType:%class.Handler = type <{ %class.String, %union.anon, %union.anon.5, i8*, i8*, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Handler.base = type <{ %class.String, %union.anon, %union.anon.5, i8*, i8*, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5632d91a1580 prev 0x5632d9194978 <../dummy_inc/click/ipaddress.hh:367:1, line:378:1> line:367:7 referenced class IPAddressArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5632d91a1678 <col:1, col:7> col:7 implicit class IPAddressArg
|-AccessSpecDecl 0x5632d91a1708 <col:22, col:28> col:22 public
|-CXXMethodDecl 0x5632d91a1b30 <line:368:5, line:369:43> line:368:24 basic_parse 'const char *(const char *, const char *, unsigned char *, int &)' static
| |-ParmVarDecl 0x5632d91a1748 <col:36, col:48> col:48 begin 'const char *'
| |-ParmVarDecl 0x5632d91a17c8 <col:55, col:67> col:67 end 'const char *'
| |-ParmVarDecl 0x5632d91a1900 <line:369:8, col:29> col:22 value 'unsigned char *':'unsigned char *'
| `-ParmVarDecl 0x5632d91a19b0 <col:32, col:37> col:37 nbytes 'int &'
|-CXXMethodDecl 0x5632d91a1df8 <line:370:5, line:371:44> line:370:17 used parse 'bool (const String &, IPAddress &, const ArgContext &)' static
| |-ParmVarDecl 0x5632d91a1c00 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5632d91a1c78 <col:42, col:53> col:53 result 'IPAddress &'
| `-ParmVarDecl 0x5632d91a1d18 <line:371:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5632d91a6798 <col:34> 'const ArgContext' lvalue Var 0x5632d9194910 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5632d91a61f0 <line:372:5, line:375:5> line:372:17 parse 'bool (const String &, struct in_addr &, const ArgContext &)' static
| |-ParmVarDecl 0x5632d91a1ec0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5632d91a1fb0 <col:42, col:58> col:58 used result 'struct in_addr &'
| |-ParmVarDecl 0x5632d91a2028 <line:373:9, col:34> col:27 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5632d91a67b8 <col:34> 'const ArgContext' lvalue Var 0x5632d9194910 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5632d91a6998 <col:46, line:375:5>
|   `-ReturnStmt 0x5632d91a6988 <line:374:2, col:63>
|     `-CallExpr 0x5632d91a6950 <col:9, col:63> 'bool'
|       |-ImplicitCastExpr 0x5632d91a6938 <col:9> 'bool (*)(const String &, IPAddress &, const ArgContext &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5632d91a68f0 <col:9> 'bool (const String &, IPAddress &, const ArgContext &)' lvalue CXXMethod 0x5632d91a1df8 'parse' 'bool (const String &, IPAddress &, const ArgContext &)'
|       |-DeclRefExpr 0x5632d91a6850 <col:15> 'const String' lvalue ParmVar 0x5632d91a1ec0 'str' 'const String &'
|       |-CXXReinterpretCastExpr 0x5632d91a68a0 <col:20, col:56> 'IPAddress' lvalue reinterpret_cast<class IPAddress &> <LValueBitCast>
|       | `-DeclRefExpr 0x5632d91a6870 <col:50> 'struct in_addr':'in_addr' lvalue ParmVar 0x5632d91a1fb0 'result' 'struct in_addr &'
|       `-DeclRefExpr 0x5632d91a68d0 <col:59> 'const ArgContext' lvalue ParmVar 0x5632d91a2028 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5632d91a66c8 <line:376:5, line:377:44> line:376:17 parse 'bool (const String &, Vector<IPAddress> &, const ArgContext &)' static
| |-ParmVarDecl 0x5632d91a62b8 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5632d91a6530 <col:42, col:61> col:61 result 'Vector<IPAddress> &'
| `-ParmVarDecl 0x5632d91a65a8 <line:377:9, col:34> col:27 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5632d91a67d8 <col:34> 'const ArgContext' lvalue Var 0x5632d9194910 'blank_args' 'const ArgContext'
|-CXXConstructorDecl 0x5632d95045f0 <line:367:7> col:7 implicit referenced constexpr IPAddressArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5632d95046f8 <col:7> col:7 implicit constexpr IPAddressArg 'void (const IPAddressArg &)' inline default trivial noexcept-unevaluated 0x5632d95046f8
| `-ParmVarDecl 0x5632d9504808 <col:7> col:7 'const IPAddressArg &'
|-CXXConstructorDecl 0x5632d95048a8 <col:7> col:7 implicit constexpr IPAddressArg 'void (IPAddressArg &&)' inline default trivial noexcept-unevaluated 0x5632d95048a8
| `-ParmVarDecl 0x5632d95049b8 <col:7> col:7 'IPAddressArg &&'
`-CXXDestructorDecl 0x5632d9504a58 <col:7> col:7 implicit referenced ~IPAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IPAddressArg = type { i8 }
  NonVirtualBaseLLVMType:%class.IPAddressArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9317050 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x5632d95395b8 <line:167:18>
|-CXXRecordDecl 0x5632d9539678 prev 0x5632d9317050 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5632d9539788 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5632d9441150 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x5632d95543e8 <line:167:18>
|-CXXRecordDecl 0x5632d95544a8 prev 0x5632d9441150 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5632d95545b8 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.4 = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.4 = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>
