
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d2107e28 prev 0x5647d20ff5c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d2107f20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5647d2107fb0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5647d2108028 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5647d21080e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5647d21081b0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5647d2108328 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5647d2108260 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5647d21083d0 <col:24>
| `-OptimizeNoneAttr 0x5647d2108428 <col:34>
|-CXXMethodDecl 0x5647d2108470 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5647d2108728 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5647d2108520 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5647d2108598 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5647d2108618 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5647d21087e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5647d2108818 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5647d2108880 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5647d2108908 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5647d2108c28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5647d21089c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5647d2108a38 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5647d2108ab0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5647d2108b30 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5647d2108d40 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5647d21106b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5647d21106b8
| `-ParmVarDecl 0x5647d21107c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5647d2110868 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5647d2110868
| `-ParmVarDecl 0x5647d2110978 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5647d21ebe60 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d20fae40 prev 0x5647d20fabc0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5647d20faf38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5647d20fafc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5647d20fb028 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5647d20fb118 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5647d20fb218 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5647d20fb3e8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5647d20fb298 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5647d20fb310 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5647d20fb578 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5647d20fb4b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5647d20fb620 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5647d20fb758 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5647d20fb690 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5647d20fb8f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5647d20fb838 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5647d20fba98 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5647d20fb9d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5647d20fbb40 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5647d20fbc40 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5647d20fbd20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fbc20 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5647d20fbc00 <col:26> 'int' 1
| `-EnumConstantDecl 0x5647d20fbcd0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5647d20fbd38 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20fbcb0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5647d20fbc90 <col:44> 'int' 2
|-CXXMethodDecl 0x5647d20fbe80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5647d20fbd68 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5647d20fbde8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5647d20fbfd8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5647d20fbf48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5647d20fc218 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5647d20fc098 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5647d20fc110 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5647d20fc2c8 <col:20>
| `-OptimizeNoneAttr 0x5647d20fc320 <col:30>
|-CXXMethodDecl 0x5647d20fc428 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5647d20fc360 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5647d20fc4d0 <col:20>
| `-OptimizeNoneAttr 0x5647d20fc528 <col:30>
|-CXXMethodDecl 0x5647d20fc578 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5647d20fc640 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5647d20fc758 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5647d20fc7e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5647d20fc868 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5647d20fc8f0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5647d20fc978 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5647d20fca08 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5647d20fcac8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5647d20fcb50 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5647d20fcbd8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5647d20fcc60 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5647d20fcce8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5647d20fcd70 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5647d20fce00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5647d20fcec0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5647d20fcf50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5647d20fd0a0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5647d20fd008 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5647d20fd230 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5647d20fd160 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5647d20fd4e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5647d20fd2e8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5647d20fd368 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5647d20fd3e8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5647d20fd598 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5647d20fd6a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5647d20fd930 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fd680 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d20fd660 <col:33> 'int' 0
| |-EnumConstantDecl 0x5647d20fd730 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5647d20fd948 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fd710 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5647d20fd6f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5647d20fd7c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5647d20fd960 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fd7a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5647d20fd780 <col:38> 'int' 90
| |-EnumConstantDecl 0x5647d20fd850 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5647d20fd978 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fd830 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5647d20fd810 <col:35> 'int' 100
| `-EnumConstantDecl 0x5647d20fd8e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5647d20fd990 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20fd8c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5647d20fd8a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5647d20fd9d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5647d20fde10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5647d20fdc80 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5647d20fdcf8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d20fdee0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5647d20fe060 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5647d20fdf90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d20fe268 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5647d20fe118 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5647d20fe190 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d20fe368 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5647d20fe408 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5647d20fe4d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe560 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5647d20fe790 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20fe540 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5647d20fe520 <col:36> 'int' EnumConstant 0x5647d20fe4d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe5b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe600 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe650 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe6a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5647d20fe6f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5647d20fe740 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5647d20fe878 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5647d20fe7b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5647d20fe940 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5647d20fea00 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5647d20feac0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5647d20feb80 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5647d20fec98 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5647d20fed60 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5647d20feee0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5647d20fee10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5647d20ff008 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5647d20ff208 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5647d20ff0b8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5647d20ff138 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5647d210cb58 <col:54, line:127:5>
|   |-ParenExpr 0x5647d210ca08 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5647d210c9d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5647d210c6c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5647d210c6a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5647d210c688 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5647d210c670 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5647d210c640 <col:31> 'Router *' lvalue ->_router 0x5647d210a520
|   |   |         `-CXXThisExpr 0x5647d210c630 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5647d210c728 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d210c708 <col:48> 'int' 0
|   |   `-CallExpr 0x5647d210c938 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5647d210c920 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d210c900 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d210c978 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d210c798 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5647d210c990 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d210c7b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5647d210c9a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d210c7f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5647d210c9c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d210c8e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d210c8d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d210c888 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5647d210caa0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5647d210ca38 <col:9> 'Router *' lvalue ->_router 0x5647d210a520
|   | | `-CXXThisExpr 0x5647d210ca28 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5647d210ca88 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5647d210ca68 <col:19> 'Router *' lvalue ParmVar 0x5647d20ff0b8 'r' 'Router *'
|   `-BinaryOperator 0x5647d210cb38 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5647d210cad0 <col:9> 'int' lvalue ->_eindex 0x5647d210a588
|     | `-CXXThisExpr 0x5647d210cac0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5647d210cb20 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5647d210cb00 <col:19> 'int' lvalue ParmVar 0x5647d20ff138 'eindex' 'int'
|-CXXMethodDecl 0x5647d20ff390 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5647d20ff2c8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5647d20ff460 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5647d20ff528 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5647d20ff5c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5647d20ff818 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5647d20ff690 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5647d20ff710 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5647d20ff8c8 <col:20>
| `-OptimizeNoneAttr 0x5647d20ff920 <col:30>
|-CXXMethodDecl 0x5647d20ffa28 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5647d20ff960 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5647d20ffad0 <col:20>
| `-OptimizeNoneAttr 0x5647d20ffb28 <col:30>
|-CXXMethodDecl 0x5647d20ffbf8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5647d20ffb68 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5647d20ffca0 <col:20>
| `-OptimizeNoneAttr 0x5647d20ffcf8 <col:30>
|-CXXMethodDecl 0x5647d20ffe88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5647d20ffd30 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5647d20ffdb0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5647d2100018 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5647d20fff50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5647d2100168 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5647d21000d8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5647d21002b8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5647d2100228 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5647d2100408 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5647d2100378 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5647d21006c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5647d21004c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5647d2100540 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5647d21005e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5647d21007a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5647d2100860 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5647d2100b30 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5647d21009e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5647d2100a58 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5647d2100c58 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5647d2100e30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5647d2100d10 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5647d2100d90 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5647d2101018 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5647d2100ef8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5647d2100f78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5647d2101388 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5647d21010d8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5647d2101150 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5647d21011d0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5647d210c140 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d210c120 <col:106> 'int' 0
| `-ParmVarDecl 0x5647d2101248 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c178 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c158 <col:126> 'int' 0
|-CXXMethodDecl 0x5647d2101728 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5647d2101458 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5647d21014f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5647d2101570 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5647d21015e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c1b0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c190 <col:114> 'int' 0
|-CXXMethodDecl 0x5647d2101ab8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5647d2101800 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5647d2101878 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5647d21018f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5647d210c1c8 <col:96> 'int' 0
| `-ParmVarDecl 0x5647d2101970 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c208 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c1e8 <col:116> 'int' 0
|-CXXMethodDecl 0x5647d2101e38 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5647d2101b88 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5647d2101c00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2101c80 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5647d210c240 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d210c220 <col:109> 'int' 0
| `-ParmVarDecl 0x5647d2101cf8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c278 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c258 <col:129> 'int' 0
|-CXXMethodDecl 0x5647d21021b8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5647d2101f08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5647d2101f80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2102000 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5647d2102078 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c2b0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c290 <col:117> 'int' 0
|-CXXMethodDecl 0x5647d2102548 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5647d2102290 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2102308 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2102388 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5647d210c2c8 <col:99> 'int' 0
| `-ParmVarDecl 0x5647d2102400 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5647d210c308 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5647d210c2e8 <col:119> 'int' 0
|-CXXMethodDecl 0x5647d2102968 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5647d2102618 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5647d2102698 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5647d2102710 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2102790 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5647d210c340 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d210c320 <col:108> 'int' 0
| `-ParmVarDecl 0x5647d2102810 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5647d210c378 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5647d210c358 <col:141> 'int' 0
|-CXXMethodDecl 0x5647d2102d88 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5647d2102a40 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5647d2102ac0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5647d2102b38 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2102bb8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5647d2102c38 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5647d210c390 <col:121> 'int' 0
|-CXXMethodDecl 0x5647d21031b8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5647d2102e68 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5647d2102ee8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5647d2102f60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2102fe0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5647d210c3b0 <col:98> 'int' 0
| `-ParmVarDecl 0x5647d2103060 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5647d210c3d0 <col:123> 'int' 0
|-CXXMethodDecl 0x5647d2103480 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5647d2103290 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5647d2103310 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5647d2103390 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5647d210c3f0 <col:80> 'int' 0
|-EnumDecl 0x5647d2103538 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5647d2103640 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5647d21038d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d2103620 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5647d2103600 <col:42> 'int' 1
| |-EnumConstantDecl 0x5647d21036d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5647d21038e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21036b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5647d2103690 <col:40> 'int' 2
| |-EnumConstantDecl 0x5647d2103760 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5647d2103900 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d2103740 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5647d2103720 <col:44> 'int' 4
| |-EnumConstantDecl 0x5647d21037f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5647d2103918 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21037d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5647d21037b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5647d2103880 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5647d2103930 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d2103860 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5647d2103840 <col:34> 'int' 6
|-CXXMethodDecl 0x5647d2103be8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5647d2103958 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5647d21039f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5647d2103a78 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5647d2103af0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5647d210c4a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5647d210c490 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5647d210c478 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5647d210c458 <col:98, col:105> 'String' (CXXTemporary 0x5647d210c458)
|           `-CXXTemporaryObjectExpr 0x5647d210c420 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5647d2103e88 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5647d2103cb8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5647d2103d30 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5647d2103da8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5647d210c558 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5647d210c540 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5647d210c528 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5647d210c508 <col:94, col:101> 'String' (CXXTemporary 0x5647d210c508)
| |         `-CXXTemporaryObjectExpr 0x5647d210c4d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5647d210cd40 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5647d210ccb8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5647d210cc88 <col:9> '<bound member function type>' ->add_task_handlers 0x5647d2103be8
|     | `-CXXThisExpr 0x5647d210cc78 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5647d210ccf8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5647d210cbf8 <col:27> 'Task *' lvalue ParmVar 0x5647d2103cb8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5647d210cd10 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5647d210cc18 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5647d2103d30 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5647d210cd28 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5647d210cc38 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5647d2103880 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5647d210cc58 <col:62> 'const String' lvalue ParmVar 0x5647d2103da8 'prefix' 'const String &'
|-CXXMethodDecl 0x5647d2104098 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5647d2103f50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5647d2103fc8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5647d210c608 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5647d210c5f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5647d210c5d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5647d210c5b8 <col:70, col:77> 'String' (CXXTemporary 0x5647d210c5b8)
| |         `-CXXTemporaryObjectExpr 0x5647d210c580 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5647d210cf18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5647d210ce90 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5647d210ce60 <col:9> '<bound member function type>' ->add_task_handlers 0x5647d2103be8
|     | `-CXXThisExpr 0x5647d210ce50 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5647d210ced0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5647d210cdd0 <col:27> 'Task *' lvalue ParmVar 0x5647d2103f50 'task' 'Task *'
|     |-ImplicitCastExpr 0x5647d210cee8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5647d210cdf0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5647d210cf00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5647d210ce10 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5647d2103880 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5647d210ce30 <col:57> 'const String' lvalue ParmVar 0x5647d2103fc8 'prefix' 'const String &'
|-CXXMethodDecl 0x5647d2104378 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5647d2104160 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d21041e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2104258 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5647d2104628 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5647d2104448 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d21044c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2104548 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5647d2104918 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5647d21046f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2104778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d21047f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5647d2104bc8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5647d21049e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2104a68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2104ae8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5647d2104e78 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5647d2104c98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2104d18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2104d98 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5647d2105128 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5647d2104f48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2104fc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2105040 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5647d21053d8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5647d21051f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2105278 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d21052f8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5647d21056e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5647d2105500 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2105580 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2105600 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5647d21059c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5647d21057b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2105838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d21058e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5647d2105ca8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5647d2105a98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2105b18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2105bc0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5647d2105f10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5647d2105d78 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5647d2105df8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5647d2105e70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5647d21061b8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5647d2105fe0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5647d2106060 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5647d21060d8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5647d2106468 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5647d2106288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2106308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2106388 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5647d2106718 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5647d2106538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d21065b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2106630 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5647d21069c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5647d21067e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2106868 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d21068e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5647d2106c98 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5647d2106a98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2106b18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5647d2106bb8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5647d2106fc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5647d2106d68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5647d2106de8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5647d2106e60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5647d2106ed8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5647d210c620 <col:93> 'bool' false
|-CXXMethodDecl 0x5647d21071b0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5647d2107098 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5647d2107118 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5647d2107388 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5647d2107270 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5647d21072f0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5647d2107668 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5647d2107448 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5647d21074c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5647d2107540 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5647d21075b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5647d2107958 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5647d2107738 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5647d21077b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5647d2107830 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5647d21078a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5647d2107b90 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5647d2107a30 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5647d2107ab0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5647d2107d78 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5647d2107c58 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5647d2107cd8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5647d2107e28 prev 0x5647d20ff5c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5647d2107f20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5647d2107fb0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5647d2108028 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5647d21080e8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5647d21081b0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5647d2108328 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5647d2108260 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5647d21083d0 <col:24>
| | `-OptimizeNoneAttr 0x5647d2108428 <col:34>
| |-CXXMethodDecl 0x5647d2108470 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5647d2108728 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5647d2108520 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5647d2108598 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5647d2108618 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5647d21087e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5647d2108818 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5647d2108880 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5647d2108908 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5647d2108c28 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5647d21089c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5647d2108a38 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5647d2108ab0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5647d2108b30 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5647d2108d40 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5647d21106b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5647d21106b8
| | `-ParmVarDecl 0x5647d21107c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5647d2110868 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5647d2110868
| | `-ParmVarDecl 0x5647d2110978 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5647d21ebe60 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5647d2108db8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5647d2108e58 <col:38> "" ""
|-CXXMethodDecl 0x5647d2108ee8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5647d2108f88 <col:44> "" ""
|-AccessSpecDecl 0x5647d2108ff8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5647d2109020 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5647d2109120 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5647d2109170 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d2109100 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5647d21090e0 <col:27> 'int' 4
|-FieldDecl 0x5647d2109228 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5647d21093d8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5647d2109490 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5647d210a520 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5647d210a588 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5647d210a6d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5647d210a618 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5647d210a888 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5647d210a798 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5647d210aa68 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5647d210a948 <col:20> col:23 'int'
| `-ParmVarDecl 0x5647d210a9c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5647d210ad10 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5647d210ab30 <col:23> col:26 'int'
| |-ParmVarDecl 0x5647d210abb0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5647d210ac28 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5647d210adc8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5647d210ae90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5647d210aee0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5647d210af30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5647d210b110 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5647d210afc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5647d210b038 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d210b3b8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5647d210b1d8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5647d210b258 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5647d210b2d0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5647d210b5d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5647d210b488 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5647d210b508 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5647d210b910 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5647d210b698 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5647d210b718 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5647d210b790 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5647d210b810 <col:57> col:60 'int'
|-CXXMethodDecl 0x5647d210baf8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5647d210b9e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5647d210ba60 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5647d210bc48 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5647d210bbb8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5647d210bfc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5647d210bd08 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5647d210bd88 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5647d210be00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5647d210be80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5647d210c0e0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StripEtherVLANHeader
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _native_vlan
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d2115e40 <../elements/ethernet/stripethervlanheader.hh:33:1, line:51:1> line:33:7 class StripEtherVLANHeader definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5647d2115f98 <col:1, col:7> col:7 implicit referenced class StripEtherVLANHeader
|-AccessSpecDecl 0x5647d2116028 <col:47, col:53> col:47 public
|-CXXConstructorDecl 0x5647d21160b0 <line:35:5, col:26> col:5 StripEtherVLANHeader 'void ()'
|-CXXDestructorDecl 0x5647d21161a0 <line:36:5, col:27> col:5 ~StripEtherVLANHeader 'void ()' noexcept-unevaluated 0x5647d21161a0
| `-Overrides: [ 0x5647d20fb118 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5647d21162d0 <line:38:5, col:69> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5647d20fc578 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5647d2116eb0 <col:36, col:69>
|   `-ReturnStmt 0x5647d2116ea0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5647d2116e88 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5647d2116e58 <col:45> 'const char [21]' lvalue "StripEtherVLANHeader"
|-CXXMethodDecl 0x5647d2116398 <line:39:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5647d20fc640 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5647d2116f10 <col:36, col:58>
|   `-ReturnStmt 0x5647d2116f00 <col:38, col:45>
|     `-ImplicitCastExpr 0x5647d2116ee8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5647d2116ec8 <col:45> 'const char []' lvalue Var 0x5647d20fc978 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x5647d2116460 <line:40:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5647d20fca08 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5647d2116f70 <col:36, col:62>
|   `-ReturnStmt 0x5647d2116f60 <col:38, col:45>
|     `-ImplicitCastExpr 0x5647d2116f48 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5647d2116f28 <col:45> 'const char []' lvalue Var 0x5647d20fcd70 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x5647d2116730 <line:42:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5647d20fde10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5647d21165e0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x5647d2116658 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d2116800 <line:43:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5647d2100860 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5647d2116fa8 <col:39, col:54>
|   `-ReturnStmt 0x5647d2116f98 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5647d2116f88 <col:48> 'bool' true
|-CXXMethodDecl 0x5647d2116940 <line:45:5, col:36> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5647d20fb758 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5647d21168b0 <col:27, col:35> col:35 p 'Packet *'
|-AccessSpecDecl 0x5647d21169e8 <line:47:3, col:10> col:3 private
|-FieldDecl 0x5647d2116a28 <line:49:5, col:9> col:9 _native_vlan 'int'
|-CXXConstructorDecl 0x5647d2116aa8 <line:33:7> col:7 implicit StripEtherVLANHeader 'void (const StripEtherVLANHeader &)' inline default_delete noexcept-unevaluated 0x5647d2116aa8
| `-ParmVarDecl 0x5647d2116bb8 <col:7> col:7 'const StripEtherVLANHeader &'
`-CXXMethodDecl 0x5647d2116c58 <col:7> col:7 implicit operator= 'StripEtherVLANHeader &(const StripEtherVLANHeader &)' inline default_delete noexcept-unevaluated 0x5647d2116c58
  `-ParmVarDecl 0x5647d2116d68 <col:7> col:7 'const StripEtherVLANHeader &'

Layout: <CGRecordLayout
  LLVMType:%class.StripEtherVLANHeader = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.StripEtherVLANHeader = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d1ecece0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5647d1ecedf8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5647d1ecee98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5647d1eceef8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5647d1ecef58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5647d1ecf008 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d1ecf310 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d1ecf428 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5647d1ecf4d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5647d1ecf538 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5647d1ecf5c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5647d1ed5660 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5647d1ed5a98 <col:12>
|-CXXConstructorDecl 0x5647d1ed5768 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d1ed5878 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5647d1ecf4d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5647d1ed8020 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5647d1ed7ff0 <col:12> 'const char *const' lvalue .data 0x5647d1ecf4d0
| |     `-DeclRefExpr 0x5647d1ed7fd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5647d1ecf538 'length' 'int'
| | `-ImplicitCastExpr 0x5647d1ed80b0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5647d1ed8080 <col:12> 'const int' lvalue .length 0x5647d1ecf538
| |     `-DeclRefExpr 0x5647d1ed8060 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5647d1ecf5c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5647d1ed8140 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5647d1ed8110 <col:12> 'String::memo_t *const' lvalue .memo 0x5647d1ecf5c8
| |     `-DeclRefExpr 0x5647d1ed80f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| `-CompoundStmt 0x5647d1ed8198 <col:12>
|-CXXConstructorDecl 0x5647d1ed5918 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ed5918
| `-ParmVarDecl 0x5647d1ed5a28 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5647d1edaf80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5647d1ee6998 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d1ee6aa8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5647d1ee6fc0 <col:12>
|   |-BinaryOperator 0x5647d1ee6dd8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5647d1ee6d90 <col:12> 'const char *' lvalue ->data 0x5647d1ecf4d0
|   | | `-CXXThisExpr 0x5647d1ee6d80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5647d1ee6dc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5647d1ee6d50 <col:12> 'const char *const' lvalue .data 0x5647d1ecf4d0
|   |     `-DeclRefExpr 0x5647d1ee6d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5647d1ee6ea0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5647d1ee6e58 <col:12> 'int' lvalue ->length 0x5647d1ecf538
|   | | `-CXXThisExpr 0x5647d1ee6e48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5647d1ee6e88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5647d1ee6e18 <col:12> 'const int' lvalue .length 0x5647d1ecf538
|   |     `-DeclRefExpr 0x5647d1ee6df8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5647d1ee6f68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5647d1ee6f20 <col:12> 'String::memo_t *' lvalue ->memo 0x5647d1ecf5c8
|   | | `-CXXThisExpr 0x5647d1ee6f10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5647d1ee6f50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5647d1ee6ee0 <col:12> 'String::memo_t *const' lvalue .memo 0x5647d1ecf5c8
|   |     `-DeclRefExpr 0x5647d1ee6ec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5647d1ee6fb0 <col:12>
|     `-UnaryOperator 0x5647d1ee6f98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d1ee6f88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5647d1ee6b18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ee6b18
  `-ParmVarDecl 0x5647d1ee6c28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d1ec6250 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5647d1ec6368 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5647d1ec63f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5647d1ec6438 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5647d1b99e10 'const char *'
|   `-QualType 0x5647d1b99361 'const char' const
|     `-BuiltinType 0x5647d1b99360 'char'
|-TypedefDecl 0x5647d1ec64c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5647d1ec6490 'String::const_iterator' sugar
|   |-Typedef 0x5647d1ec6438 'const_iterator'
|   `-PointerType 0x5647d1b99e10 'const char *'
|     `-QualType 0x5647d1b99361 'const char' const
|       `-BuiltinType 0x5647d1b99360 'char'
|-TypedefDecl 0x5647d1ec6630 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5647d1ec65a0 'int (String::*)() const'
|   |-RecordType 0x5647d1ec62e0 'String'
|   | `-CXXRecord 0x5647d1ec6250 'String'
|   `-ParenType 0x5647d1ec6540 'int () const' sugar
|     `-FunctionProtoType 0x5647d1e9a0d0 'int () const' const cdecl
|       `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d1ec6698 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5647d1ceecb0 'int64_t' sugar
|   |-Typedef 0x5647d1c022d0 'int64_t'
|   `-TypedefType 0x5647d1bdb540 '__int64_t' sugar
|     |-Typedef 0x5647d1bdb118 '__int64_t'
|     `-BuiltinType 0x5647d1b993e0 'long'
|-TypedefDecl 0x5647d1ec6700 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5647d1ceebd0 'uint64_t' sugar
|   |-Typedef 0x5647d1c02470 'uint64_t'
|   `-TypedefType 0x5647d1bdb5d0 '__uint64_t' sugar
|     |-Typedef 0x5647d1bdb188 '__uint64_t'
|     `-BuiltinType 0x5647d1b99480 'unsigned long'
|-TypedefDecl 0x5647d1ec6790 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5647d1ec6760 'String::intmax_t' sugar
|   |-Typedef 0x5647d1ec6698 'intmax_t'
|   `-TypedefType 0x5647d1ceecb0 'int64_t' sugar
|     |-Typedef 0x5647d1c022d0 'int64_t'
|     `-TypedefType 0x5647d1bdb540 '__int64_t' sugar
|       |-Typedef 0x5647d1bdb118 '__int64_t'
|       `-BuiltinType 0x5647d1b993e0 'long'
|-TypedefDecl 0x5647d1ec6820 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5647d1ec67f0 'String::uintmax_t' sugar
|   |-Typedef 0x5647d1ec6700 'uintmax_t'
|   `-TypedefType 0x5647d1ceebd0 'uint64_t' sugar
|     |-Typedef 0x5647d1c02470 'uint64_t'
|     `-TypedefType 0x5647d1bdb5d0 '__uint64_t' sugar
|       |-Typedef 0x5647d1bdb188 '__uint64_t'
|       `-BuiltinType 0x5647d1b99480 'unsigned long'
|-CXXConstructorDecl 0x5647d1ec68e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5647d1ec6a88 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5647d1ec69c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5647d1ec6c38 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5647d1ec6b78 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5647d1ec6d90 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5647d1ec6d00 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5647d1ec6fa8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5647d1ec6e58 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5647d1ec6ed8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5647d1ec71c8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5647d1ec7078 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5647d1ec70f8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5647d1ec73e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5647d1ec7298 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5647d1ec7318 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5647d1ec7608 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5647d1ec74b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5647d1ec7538 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5647d1ec7798 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5647d1ec76d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5647d1ec7918 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5647d1ec7858 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5647d1ec7aa8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5647d1ec79e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5647d1ec7c00 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5647d1ec7b70 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5647d1ec7d58 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5647d1ec7cc8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5647d1ec7eb0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5647d1ec7e20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5647d1ec8038 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5647d1ec7f78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5647d1ec81c8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5647d1ec8100 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5647d1ec8358 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5647d1ec8290 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5647d1ec84e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5647d1ec8420 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5647d1ec85e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5647d1ec8708 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5647d1ec8888 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5647d1ec87c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5647d1ec89d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5647d1ec8948 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5647d1ec8a90 <col:63> "" ""
|-CXXMethodDecl 0x5647d1ec8bd8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5647d1ec8b18 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5647d1ec8de8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5647d1ec8c98 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5647d1ec8d18 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5647d1ec9008 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5647d1ec8eb0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5647d1ec8f30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5647d1ec92e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5647d1ec90c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5647d1ec9148 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5647d1ed5130 <col:55> 'int' 10
| `-ParmVarDecl 0x5647d1ec91c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5647d1ed5150 <col:76> 'bool' true
|-CXXMethodDecl 0x5647d1ec95c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5647d1ec93b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5647d1ec9430 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5647d1ed5160 <col:56> 'int' 10
| `-ParmVarDecl 0x5647d1ec94a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5647d1ed5180 <col:77> 'bool' true
|-CXXMethodDecl 0x5647d1ec96d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5647d1ec9798 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5647d1ec9860 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5647d1ec9900 <col:20>
| `-OptimizeNoneAttr 0x5647d1ec9958 <col:30>
|-CXXConversionDecl 0x5647d1ec9a48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5647d1ec9b18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5647d1ec9bd8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5647d1ec9cc8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5647d1ec9d88 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5647d1ec9f08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5647d1ec9e40 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5647d1eca058 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5647d1ec9fc8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5647d1eca148 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5647d1eca208 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5647d1eca458 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5647d1eca2c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5647d1eca340 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5647d1eca6b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5647d1eca520 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5647d1eca5a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5647d1eca788 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d1eca998 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5647d1eca840 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5647d1eca8c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5647d1ecabb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5647d1ecaa60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5647d1ecaae0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5647d1ecad48 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5647d1ecac80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5647d1ecae38 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5647d1ecafa8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5647d1ecaee8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5647d1ecb1b8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5647d1ecb068 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5647d1ecb0e8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5647d1ecb3d0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5647d1ecb278 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5647d1ecb2f0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5647d1ecb560 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5647d1ecb490 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5647d1ecb780 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5647d1ecb620 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5647d1ecb6a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5647d1ecb8d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5647d1ecb840 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5647d1ecbaa8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5647d1ecb990 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5647d1ecba10 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5647d1ecbbf8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5647d1ecbb68 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5647d1ecbe10 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5647d1ecbcb0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5647d1ecbd30 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5647d1ed5190 <col:39> 'int' 0
|-CXXMethodDecl 0x5647d1ecc030 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5647d1ecbed0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5647d1ecbf50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5647d1ed51b0 <col:48> 'int' 0
|-CXXMethodDecl 0x5647d1ecc210 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5647d1ecc0f0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5647d1ecc170 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5647d1ed51d0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5647d1ecc2e0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5647d1ecc3a0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5647d1ecc460 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5647d1ecc520 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5647d1ecc5e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5647d1ecc788 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5647d1ecc690 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5647d1ecc908 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5647d1ecc840 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5647d1eccae0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5647d1ecc9c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5647d1eccc58 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5647d1eccb98 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5647d1eccda0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5647d1eccd10 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5647d1eccef0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5647d1ecce60 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5647d1ecd0c8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5647d1eccfb0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5647d1ecd030 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5647d1ecd2a8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5647d1ecd190 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5647d1ecd210 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5647d1ecd3f8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5647d1ecd368 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5647d1ecd608 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5647d1ecd4b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5647d1ecd538 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5647d1ecd768 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5647d1ecd6d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5647d1ecd8c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5647d1ecd828 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5647d1ecd968 <col:57> "" ""
|-CXXMethodDecl 0x5647d1ecda78 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5647d1ecd9e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5647d1ecdbc8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5647d1ecdb38 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5647d1ecdd48 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5647d1ecdc80 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5647d1ecde10 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5647d1ecded0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5647d1ecdf90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5647d1ece030 <col:49> "" ""
|-CXXMethodDecl 0x5647d1ece0c0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5647d1ece180 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5647d1ece270 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5647d1ece338 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5647d1ece3f8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5647d1ece4b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5647d1ece5b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5647d1ece678 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5647d1ece740 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5647d1ece918 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5647d1ece7f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5647d1ece878 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5647d1eceb40 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5647d1ece9e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5647d1ecea60 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5647d1ecec50 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5647d1ececb8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5647d1ecece0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5647d1ecedf8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5647d1ecee98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5647d1eceef8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5647d1ecef58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5647d1ecf008 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5647d1ecf070 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5647d1ecf2a8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5647d1ecf2f8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d1ecf288 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5647d1ecf198 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5647d1ecf140 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5647d1ecf180 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5647d1ecf160 <col:32> 'int' 8
|-CXXRecordDecl 0x5647d1ecf310 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5647d1ecf428 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5647d1ecf4d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5647d1ecf538 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5647d1ecf5c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5647d1ed5660 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5647d1ed5a98 <col:12>
| |-CXXConstructorDecl 0x5647d1ed5768 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5647d1ed5878 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5647d1ecf4d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5647d1ed8020 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5647d1ed7ff0 <col:12> 'const char *const' lvalue .data 0x5647d1ecf4d0
| | |     `-DeclRefExpr 0x5647d1ed7fd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5647d1ecf538 'length' 'int'
| | | `-ImplicitCastExpr 0x5647d1ed80b0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5647d1ed8080 <col:12> 'const int' lvalue .length 0x5647d1ecf538
| | |     `-DeclRefExpr 0x5647d1ed8060 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5647d1ecf5c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5647d1ed8140 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5647d1ed8110 <col:12> 'String::memo_t *const' lvalue .memo 0x5647d1ecf5c8
| | |     `-DeclRefExpr 0x5647d1ed80f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ed5878 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5647d1ed8198 <col:12>
| |-CXXConstructorDecl 0x5647d1ed5918 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ed5918
| | `-ParmVarDecl 0x5647d1ed5a28 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5647d1edaf80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5647d1ee6998 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5647d1ee6aa8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5647d1ee6fc0 <col:12>
| |   |-BinaryOperator 0x5647d1ee6dd8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5647d1ee6d90 <col:12> 'const char *' lvalue ->data 0x5647d1ecf4d0
| |   | | `-CXXThisExpr 0x5647d1ee6d80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5647d1ee6dc0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5647d1ee6d50 <col:12> 'const char *const' lvalue .data 0x5647d1ecf4d0
| |   |     `-DeclRefExpr 0x5647d1ee6d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5647d1ee6ea0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5647d1ee6e58 <col:12> 'int' lvalue ->length 0x5647d1ecf538
| |   | | `-CXXThisExpr 0x5647d1ee6e48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5647d1ee6e88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5647d1ee6e18 <col:12> 'const int' lvalue .length 0x5647d1ecf538
| |   |     `-DeclRefExpr 0x5647d1ee6df8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5647d1ee6f68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5647d1ee6f20 <col:12> 'String::memo_t *' lvalue ->memo 0x5647d1ecf5c8
| |   | | `-CXXThisExpr 0x5647d1ee6f10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5647d1ee6f50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5647d1ee6ee0 <col:12> 'String::memo_t *const' lvalue .memo 0x5647d1ecf5c8
| |   |     `-DeclRefExpr 0x5647d1ee6ec0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5647d1ee6aa8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5647d1ee6fb0 <col:12>
| |     `-UnaryOperator 0x5647d1ee6f98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5647d1ee6f88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5647d1ee6b18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ee6b18
|   `-ParmVarDecl 0x5647d1ee6c28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5647d1ecf640 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5647d1ecf888 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5647d1ecf6a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5647d1ecf728 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5647d1ecf7a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5647d1ed5620 <col:79, line:261:5>
|   |-BinaryOperator 0x5647d1ed5298 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5647d1ed5230 <col:2, col:5> 'const char *' lvalue .data 0x5647d1ecf4d0
|   | | `-MemberExpr 0x5647d1ed5200 <col:2> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|   | |   `-CXXThisExpr 0x5647d1ed51f0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5647d1ed5280 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5647d1ed5260 <col:12> 'const char *' lvalue ParmVar 0x5647d1ecf6a8 'data' 'const char *'
|   |-BinaryOperator 0x5647d1ed5360 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5647d1ed52f8 <col:2, col:5> 'int' lvalue .length 0x5647d1ecf538
|   | | `-MemberExpr 0x5647d1ed52c8 <col:2> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|   | |   `-CXXThisExpr 0x5647d1ed52b8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5647d1ed5348 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5647d1ed5328 <col:14> 'int' lvalue ParmVar 0x5647d1ecf728 'length' 'int'
|   `-IfStmt 0x5647d1ed5608 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5647d1ed5480 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5647d1ed5468 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5647d1ed5448 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5647d1ed5428 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5647d1ed53c0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|     |       | `-MemberExpr 0x5647d1ed5390 <col:7> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|     |       |   `-CXXThisExpr 0x5647d1ed5380 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5647d1ed5410 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5647d1ed53f0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5647d1ecf7a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5647d1ed55e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5647d1ed55c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5647d1ed54d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5647d1ebe2b8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5647d1ed5538 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5647d1ecee98
|         `-ImplicitCastExpr 0x5647d1ed5520 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5647d1ed5500 <col:27> 'String::memo_t *' lvalue ParmVar 0x5647d1ecf7a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5647d1ecfb38 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5647d1ecf958 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5647d1ecf9d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5647d1ecfa50 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5647d1ecf640 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5647d1ed5aa8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5647d1ed5c38 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5647d1ed5ba0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5647d1ed5b10 <col:2> '<bound member function type>' ->assign_memo 0x5647d1ecf888
|     | `-ImplicitCastExpr 0x5647d1ed5bd8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5647d1ed5b00 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5647d1ed5bf0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5647d1ed5b40 <col:14> 'const char *' lvalue ParmVar 0x5647d1ecf958 'data' 'const char *'
|     |-ImplicitCastExpr 0x5647d1ed5c08 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5647d1ed5b60 <col:20> 'int' lvalue ParmVar 0x5647d1ecf9d8 'length' 'int'
|     `-ImplicitCastExpr 0x5647d1ed5c20 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5647d1ed5b80 <col:28> 'String::memo_t *' lvalue ParmVar 0x5647d1ecfa50 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5647d1ecfcc8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5647d1ecfc08 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5647d1ed5e90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5647d1ed5e10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5647d1ed5c60 <col:2> '<bound member function type>' ->assign_memo 0x5647d1ecf888
|     | `-CXXThisExpr 0x5647d1ed5c50 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5647d1ed5e48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5647d1ed5ce0 <col:14, col:19> 'const char *' lvalue .data 0x5647d1ecf4d0
|     |   `-MemberExpr 0x5647d1ed5cb0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5647d1ecf640
|     |     `-DeclRefExpr 0x5647d1ed5c90 <col:14> 'const String' lvalue ParmVar 0x5647d1ecfc08 'x' 'const String &'
|     |-ImplicitCastExpr 0x5647d1ed5e60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5647d1ed5d60 <col:25, col:30> 'int' lvalue .length 0x5647d1ecf538
|     |   `-MemberExpr 0x5647d1ed5d30 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5647d1ecf640
|     |     `-DeclRefExpr 0x5647d1ed5d10 <col:25> 'const String' lvalue ParmVar 0x5647d1ecfc08 'x' 'const String &'
|     `-ImplicitCastExpr 0x5647d1ed5e78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5647d1ed5de0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|         `-MemberExpr 0x5647d1ed5db0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5647d1ecf640
|           `-DeclRefExpr 0x5647d1ed5d90 <col:38> 'const String' lvalue ParmVar 0x5647d1ecfc08 'x' 'const String &'
|-CXXMethodDecl 0x5647d1ecfd90 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5647d1ed6850 <col:31, line:278:5>
|   `-IfStmt 0x5647d1ed6838 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5647d1ed5f30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5647d1ed5f18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5647d1ed5ee8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|     |     `-MemberExpr 0x5647d1ed5eb8 <col:6> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|     |       `-CXXThisExpr 0x5647d1ed5ea8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5647d1ed6810 <col:15, line:277:2>
|       |-ParenExpr 0x5647d1ed63e0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5647d1ed63b0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5647d1ed6040 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5647d1ed6028 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5647d1ed6010 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5647d1ed5fd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5647d1ecee98
|       |   |       `-ImplicitCastExpr 0x5647d1ed5fb8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5647d1ed5f88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|       |   |           `-MemberExpr 0x5647d1ed5f58 <col:27> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|       |   |             `-CXXThisExpr 0x5647d1ed5f48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5647d1ed60a0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5647d1ed6080 <col:54> 'int' 0
|       |   `-CallExpr 0x5647d1ed6310 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5647d1ed62f8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5647d1ed6278 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5647d1ed6350 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5647d1ed6188 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5647d1ed6368 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5647d1ed61b8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5647d1ed6380 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5647d1ed61f0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5647d1ed6398 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5647d1ed6260 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5647d1ed6248 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5647d1ed6210 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5647d1ed6730 <line:274:6, line:275:22>
|       | |-CallExpr 0x5647d1ed65f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5647d1ed65d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5647d1ed6550 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5647d1ebf700 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5647d1ed6520 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5647d1ecee98
|       | |   `-ImplicitCastExpr 0x5647d1ed6508 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5647d1ed64d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|       | |       `-MemberExpr 0x5647d1ed64a8 <col:40> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|       | |         `-CXXThisExpr 0x5647d1ed6498 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5647d1ed66f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5647d1ed66d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5647d1ed6618 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5647d1ed4570 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5647d1ed6718 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5647d1ed6678 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|       |       `-MemberExpr 0x5647d1ed6648 <col:15> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|       |         `-CXXThisExpr 0x5647d1ed6638 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5647d1ed67f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5647d1ed6788 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5647d1ecf5c8
|         | `-MemberExpr 0x5647d1ed6758 <col:6> 'String::rep_t' lvalue ->_r 0x5647d1ecf640
|         |   `-CXXThisExpr 0x5647d1ed6748 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5647d1ed67d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5647d1ed67b8 <col:16> 'int' 0
|-CXXMethodDecl 0x5647d1ed0028 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5647d1ecfe48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5647d1ecfec8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5647d1ecff40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5647d1ed0100 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5647d1ed0350 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5647d1ed01b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5647d1ed0238 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5647d1ed02b0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5647d1ed0538 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5647d1ed0420 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5647d1ed04a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5647d1ed0638 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5647d1ed6928 <col:41, line:286:5>
|   `-ReturnStmt 0x5647d1ed6918 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5647d1ed68e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5647d1ed68b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5647d1ed6898 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5647d1ed6878 <col:46> 'int' 1
|-CXXMethodDecl 0x5647d1ed08d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5647d1ed06f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5647d1ed0770 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5647d1ed07f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5647d1ed4570 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5647d1ed09a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5647d1ed4640 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5647d1ed4810 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5647d1ed46f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5647d1ed4778 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5647d1ed48d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5647d1ed4998 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5647d1ed4a98 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5647d1ed4b10 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5647d1ed4b88 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5647d1ed4bf0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5647d1ed4cf0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5647d1ed4d40 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d1ed4cd0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5647d1ed4cb0 <col:22> 'int' 14
|-CXXMethodDecl 0x5647d1ed4f58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5647d1ed4d70 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5647d1ed4df0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5647d1ed4e70 <col:43> col:46 'int'
|-FriendDecl 0x5647d1ed5060 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5647d1ed50f0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5647d1f98d10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5647d1f98ee8 prev 0x5647d1f98d10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5647d1f98f78 <col:46, col:52> col:46 public
|-TypedefDecl 0x5647d1f98fa0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d2157ec0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5647d2157e70 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5647d2157e50 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5647d1f991b8 'type'
|     `-SubstTemplateTypeParmType 0x5647d1f99180 'String' sugar
|       |-TemplateTypeParmType 0x5647d1e89af0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e89aa0 'T'
|       `-RecordType 0x5647d1ec62e0 'String'
|         `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d2157f78 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5647d2157f40 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5647d2157f20 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5647d2157ec0 'type'
|     `-ElaboratedType 0x5647d2157e70 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5647d2157e50 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5647d1f991b8 'type'
|         `-SubstTemplateTypeParmType 0x5647d1f99180 'String' sugar
|           |-TemplateTypeParmType 0x5647d1e89af0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5647d1e89aa0 'T'
|           `-RecordType 0x5647d1ec62e0 'String'
|             `-CXXRecord 0x5647d1ec6250 'String'
|-CXXMethodDecl 0x5647d21580f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5647d2158008 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5647d21581e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5647d21582c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5647d21582c8
|-CXXMethodDecl 0x5647d2158598 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5647d21584a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5647d21587d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5647d2158650 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d21586c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d21589a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5647d2158898 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d2158910 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d2158b08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5647d2158bd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5647d2158e28 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5647d2158c98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5647d2158d10 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d2159088 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5647d2158ef8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5647d2158f70 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d2159248 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5647d2159158 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d2159408 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5647d2159310 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d21594c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5647d2159570 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5647d21597a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5647d2159620 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d2159698 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5647d2159a48 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5647d2159950 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5647d2159b10 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5647d2159b60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5647d2159bb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5647d20fda80 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5647d1f97778 prev 0x5647d20fda80 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5647d1f98c80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5647d1f98c30 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5647d1f98c10 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5647d1f98ac0 'type'
|     `-SubstTemplateTypeParmType 0x5647d1f98950 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5647d1e5f8a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5647d1e5f848 'F'
|       `-RecordType 0x5647d1f985b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5647d1f984d0 'typed_array_memory'
|-FieldDecl 0x5647d2159c00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5647d2159c50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5647d2159c88 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|   |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5647d1e96db8 'T'
|   `-RecordType 0x5647d1ec62e0 'String'
|     `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d2159d18 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5647d2159ce0 'String &'
|   `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-RecordType 0x5647d1ec62e0 'String'
|       `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d2159da8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5647d2159d70 'const String &'
|   `-QualType 0x5647d1f97811 'const String' const
|     `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-RecordType 0x5647d1ec62e0 'String'
|         `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d2159e38 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5647d2159e00 'String *'
|   `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-RecordType 0x5647d1ec62e0 'String'
|       `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d2159ec8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5647d2159e90 'const String *'
|   `-QualType 0x5647d1f97811 'const String' const
|     `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-RecordType 0x5647d1ec62e0 'String'
|         `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d215ab20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5647d215aad0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5647d215aab0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5647d215a9e8 'type'
|     `-LValueReferenceType 0x5647d215a9b0 'const String &'
|       `-QualType 0x5647d215a751 'const String' const
|         `-SubstTemplateTypeParmType 0x5647d215a750 'String' sugar
|           |-TemplateTypeParmType 0x5647d1e697f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5647d1e69798 'T'
|           `-RecordType 0x5647d1ec62e0 'String'
|             `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d215ab88 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5647d2159d70 'const String &'
|   `-QualType 0x5647d1f97811 'const String' const
|     `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-RecordType 0x5647d1ec62e0 'String'
|         `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d215abe0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d215ac48 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5647d2159e00 'String *'
|   `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-RecordType 0x5647d1ec62e0 'String'
|       `-CXXRecord 0x5647d1ec6250 'String'
|-TypedefDecl 0x5647d215acb0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5647d2159e90 'const String *'
|   `-QualType 0x5647d1f97811 'const String' const
|     `-SubstTemplateTypeParmType 0x5647d1f97810 'String' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-RecordType 0x5647d1ec62e0 'String'
|         `-CXXRecord 0x5647d1ec6250 'String'
|-EnumDecl 0x5647d215ad08 <line:134:5> col:5
| `-EnumConstantDecl 0x5647d215ae00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5647d215ade0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5647d1e98498 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5647d1e98470 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5647d1e98450 <col:40> 'int' 1
|-CXXConstructorDecl 0x5647d215ae88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5647d215b118 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d215af40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d215afe0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5647d215b3a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5647d215b290 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5647d215b668 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5647d215b550 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5647d215b980 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5647d215b860 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5647d215bc90 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5647d215bb70 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5647d215bf80 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d215bdc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d215be40 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5647d215c0a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5647d215c158 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c1b0 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c1f8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5647d215c2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c300 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c3c8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5647d215c478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c4d0 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c518 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5647d215c5c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c620 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c668 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5647d215c718 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c770 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c7b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5647d215c868 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d215c8c0 <col:30> Inherited
|-CXXMethodDecl 0x5647d215c8e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5647d215c998 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5647d215ca48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5647d215cc08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d215caf8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d215cb70 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5647d215cd58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5647d215ccc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d215cf08 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5647d215ce10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5647d215cfc0 <col:20>
| `-OptimizeNoneAttr 0x5647d215d018 <col:30>
|-CXXMethodDecl 0x5647d215d138 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5647d215d040 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5647d215d1f0 <col:20>
| `-OptimizeNoneAttr 0x5647d215d248 <col:30>
|-CXXMethodDecl 0x5647d215d300 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5647d215d270 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d215d448 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5647d215d3b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d215d578 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5647d215d678 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5647d215d748 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5647d215d818 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5647d215d958 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5647d215d8c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d215daa0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5647d215da10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d215dbe8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5647d215db58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5647d215dca0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5647d215dda0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5647d215dd10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5647d215de58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5647d215df18 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5647d215e018 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5647d215e198 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5647d215e0d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5647d215e958 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5647d215e250 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5647d215e8b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5647d215e7b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5647d215ea38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5647d215eb88 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5647d215eaf8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5647d215efa0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5647d215f1e8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d215f060 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5647d215f0d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5647d215f378 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5647d215f2b8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5647d215f588 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5647d215f440 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5647d215f4b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5647d215f648 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5647d215f8a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5647d215f7b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5647d215f978 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5647d215f978

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d21db398 prev 0x5647d216c128 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5647d21db490 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5647d21db520 <col:22, col:28> col:22 public
|-EnumDecl 0x5647d21db548 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5647d21db668 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db648 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5647d21db630 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5647d21db610 <col:14> 'int' 999
| |-EnumConstantDecl 0x5647d21db710 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db6f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5647d21db6d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5647d21db6b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5647d21db7a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db780 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5647d21db760 <col:17> 'int' 0
| |-EnumConstantDecl 0x5647d21db830 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db810 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5647d21db7f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5647d21db8c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db8a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5647d21db880 <col:16> 'int' 2
| |-EnumConstantDecl 0x5647d21db950 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db930 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5647d21db910 <col:13> 'int' 3
| |-EnumConstantDecl 0x5647d21db9e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21db9c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5647d21db9a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5647d21dba70 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21dba50 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5647d21dba30 <col:14> 'int' 5
| |-EnumConstantDecl 0x5647d21dbb00 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5647d21dbae0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5647d21dbac0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5647d21dbb90 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5647d21dbb70 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5647d21dbb50 <col:13> 'int' 7
|-VarDecl 0x5647d21dbc00 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5647d21dbc88 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5647d21dbd10 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5647d21dbd98 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5647d21dbe20 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5647d21dbea8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5647d21dbf30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5647d21dbfb8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5647d21dc040 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5647d21dc0c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5647d21dc150 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5647d21dc250 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5647d21e1588 '_nerrors' 'int'
| | `-IntegerLiteral 0x5647d21e1d18 <line:128:13> 'int' 0
| `-CompoundStmt 0x5647d21e1d88 <col:16, line:129:5>
|-CXXDestructorDecl 0x5647d21dc340 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5647d21e1d98 <col:29, line:132:5>
|-CXXMethodDecl 0x5647d21dc4f8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5647d21dc430 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d21dc5c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5647d21dc6a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5647d21e1df0 <col:44, line:161:5>
|   `-ReturnStmt 0x5647d21e1de0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5647d21e1dc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5647d21e1da8 <col:9> 'ErrorHandler *' lvalue Var 0x5647d21e15e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5647d21dc7e8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5647d21dc758 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5647d21dc8b0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5647d21e1e50 <col:43, line:173:5>
|   `-ReturnStmt 0x5647d21e1e40 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5647d21e1e28 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5647d21e1e08 <col:9> 'ErrorHandler *' lvalue Var 0x5647d21e1660 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5647d21dc968 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5647d21dc9e8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5647d21dcaf8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5647d21dca68 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dcc48 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5647d21dcbb8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dcda0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5647d21dcd08 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dcef8 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5647d21dce60 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dd050 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5647d21dcfb8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dd260 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5647d21dd108 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5647d21dd188 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dd438 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5647d21dd320 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5647d21dd3a0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dd658 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5647d21dd4f8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5647d21dd578 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dd838 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5647d21dd718 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5647d21dd798 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dda18 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5647d21dd8f8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5647d21dd978 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5647d21ddba0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5647d21ddad8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5647d21ddd70 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5647d21ddc58 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5647d21ddcd0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5647d21e20a8 <col:57, line:234:5>
|   `-ReturnStmt 0x5647d21e2098 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5647d21e2080 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5647d21e2028 <col:9, col:41> 'int'
|         |-MemberExpr 0x5647d21e1ff8 <col:9> '<bound member function type>' ->xmessage 0x5647d21ddba0
|         | `-CXXThisExpr 0x5647d21e1fe8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5647d21e2068 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5647d21e2050 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5647d21e1fc8 <col:18, col:40> 'String' (CXXTemporary 0x5647d21e1fc8)
|               `-CallExpr 0x5647d21e1f90 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5647d21e1f78 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5647d21e1ef0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5647d21dfdb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5647d21e1f10 <col:31> 'const String' lvalue ParmVar 0x5647d21ddcd0 'str' 'const String &'
|                 `-DeclRefExpr 0x5647d21e1f30 <col:36> 'const String' lvalue ParmVar 0x5647d21ddc58 'anno' 'const String &'
|-CXXMethodDecl 0x5647d21de050 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5647d21dde30 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5647d21ddeb0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5647d21ddf28 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5647d21e2338 <col:68, line:243:5>
|   `-ReturnStmt 0x5647d21e2328 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5647d21e2310 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5647d21e22b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5647d21e2280 <col:9> '<bound member function type>' ->xmessage 0x5647d21ddd70
|         | `-CXXThisExpr 0x5647d21e2270 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5647d21e2148 <col:18> 'const String' lvalue ParmVar 0x5647d21dde30 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5647d21e22f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5647d21e22e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5647d21e2250 <col:24, col:40> 'String' (CXXTemporary 0x5647d21e2250)
|               `-CXXMemberCallExpr 0x5647d21e21e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5647d21e2178 <col:24> '<bound member function type>' ->vformat 0x5647d21df280
|                 | `-CXXThisExpr 0x5647d21e2168 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5647d21e2218 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5647d21e21a8 <col:32> 'const char *' lvalue ParmVar 0x5647d21ddeb0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5647d21e2230 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5647d21e21c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5647d21ddf28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5647d21de2f0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5647d21de118 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5647d21de190 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5647d21de208 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5647d21e2678 <col:23, line:254:5>
|   `-ReturnStmt 0x5647d21e2668 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5647d21e2650 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5647d21e25f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5647d21e25c0 <col:9> '<bound member function type>' ->xmessage 0x5647d21ddd70
|         | `-CXXThisExpr 0x5647d21e25b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5647d21e2638 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5647d21e2620 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5647d21e2570 <col:18, col:65> 'String' (CXXTemporary 0x5647d21e2570)
|         |     `-CallExpr 0x5647d21e2508 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5647d21e24f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5647d21e23d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5647d21dfdb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5647d21e23f8 <col:31> 'const String' lvalue ParmVar 0x5647d21de190 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5647d21e2550 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5647d21e2538 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5647d21e24d0 <col:37, col:64> 'String' (CXXTemporary 0x5647d21e24d0)
|         |             `-CallExpr 0x5647d21e24a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5647d21e2488 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5647d21e2418 <col:37> 'String (const String &)' lvalue CXXMethod 0x5647d21e0408 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5647d21e2438 <col:56> 'const String' lvalue ParmVar 0x5647d21de118 'landmark' 'const String &'
|         `-DeclRefExpr 0x5647d21e2590 <col:68> 'const String' lvalue ParmVar 0x5647d21de208 'str' 'const String &'
|-CXXMethodDecl 0x5647d21de670 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5647d21de3b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5647d21de430 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5647d21de4b0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5647d21de528 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5647d21e2930 <col:34, line:267:5>
|   `-ReturnStmt 0x5647d21e2920 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5647d21e2908 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5647d21e28a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5647d21e2870 <col:9> '<bound member function type>' ->xmessage 0x5647d21de2f0
|         | `-CXXThisExpr 0x5647d21e2860 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5647d21e2718 <col:18> 'const String' lvalue ParmVar 0x5647d21de3b8 'landmark' 'const String &'
|         |-DeclRefExpr 0x5647d21e2738 <col:28> 'const String' lvalue ParmVar 0x5647d21de430 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5647d21e28f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5647d21e28d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5647d21e2840 <col:34, col:50> 'String' (CXXTemporary 0x5647d21e2840)
|               `-CXXMemberCallExpr 0x5647d21e27d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5647d21e2768 <col:34> '<bound member function type>' ->vformat 0x5647d21df280
|                 | `-CXXThisExpr 0x5647d21e2758 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5647d21e2808 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5647d21e2798 <col:42> 'const char *' lvalue ParmVar 0x5647d21de4b0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5647d21e2820 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5647d21e27b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5647d21de528 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5647d21de780 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5647d21e29b0 <col:25, line:288:5>
|   `-ReturnStmt 0x5647d21e29a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5647d21e2988 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5647d21e2958 <col:9> 'const int' lvalue ->_nerrors 0x5647d21e1588
|         `-CXXThisExpr 0x5647d21e2948 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5647d21de990 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5647d21de838 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5647d21de8b8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5647d21dec78 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5647d21dea58 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5647d21dead8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5647d21deb50 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5647d21dee60 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5647d21ded48 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5647d21df0a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5647d21def20 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5647d21def98 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5647d21e2c10 <col:58, line:357:5>
|   `-ReturnStmt 0x5647d21e2c00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5647d21e2be8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5647d21e2bb8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5647d21e2ba0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5647d21e2b80 <col:9, col:29> 'String' (CXXTemporary 0x5647d21e2b80)
|             `-CallExpr 0x5647d21e2b10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5647d21e2af8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5647d21e2a78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5647d21dec78 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5647d21e2a18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5647d21e2b48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5647d21e2a38 <col:21> 'const char *' lvalue ParmVar 0x5647d21def20 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5647d21e2b60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5647d21e2a58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5647d21def98 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5647d21df280 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5647d21df170 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5647d21df1e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5647d21df3d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5647d21df348 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5647d21df520 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5647d21df490 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5647d21df7c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5647d21df5d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5647d21df658 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5647d21df6d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5647d21df920 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5647d21df890 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5647d21e2d28 <col:37, line:441:5>
|   `-IfStmt 0x5647d21e2d10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5647d21e2c98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5647d21e2c68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5647d21e2c28 <col:6> 'int' lvalue ParmVar 0x5647d21df890 'level' 'int'
|     | `-ImplicitCastExpr 0x5647d21e2c80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5647d21e2c48 <col:15> 'ErrorHandler::Level' EnumConstant 0x5647d21db950 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5647d21e2cf8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5647d21e2cc8 <col:8> 'int' lvalue ->_nerrors 0x5647d21e1588
|         `-CXXThisExpr 0x5647d21e2cb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5647d21df9e8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5647d21e2dc0 <col:26, line:448:5>
|   `-BinaryOperator 0x5647d21e2da0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5647d21e2d50 <col:2> 'int' lvalue ->_nerrors 0x5647d21e1588
|     | `-CXXThisExpr 0x5647d21e2d40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5647d21e2d80 <col:13> 'int' 0
|-CXXMethodDecl 0x5647d21dfbb0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5647d21dfaa0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5647d21dfb18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5647d21dfdb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5647d21dfc70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5647d21dfce8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5647d21e0068 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5647d21dfe78 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5647d21dfef8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5647d21dff78 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5647d21e0120 <col:59> 0 0
|-CXXMethodDecl 0x5647d21e02b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5647d21e0198 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5647d21e0218 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5647d21e3430 <col:70, line:534:5>
|   |-DeclStmt 0x5647d21e2f30 <line:528:2, col:20>
|   | |-VarDecl 0x5647d21e2de8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5647d21e2e50 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5647d21e2e88 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5647d21e2ef0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5647d21e3000 <line:529:2, col:23>
|   | `-VarDecl 0x5647d21e2f60 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5647d21e2fe8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5647d21e2fc8 <col:18> 'const char *' lvalue ParmVar 0x5647d21e0198 'begin' 'const char *'
|   |-DoStmt 0x5647d21e33c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5647d21e32f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5647d21e32e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5647d21e32c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5647d21e3018 <col:6> 'const char *' lvalue Var 0x5647d21e2f60 'x' 'const char *'
|   | |     `-CallExpr 0x5647d21e3210 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5647d21e31f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5647d21e31b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5647d21e1a60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5647d21e3278 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5647d21e3260 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5647d21e30d0 <col:20, col:27> 'String' (CXXTemporary 0x5647d21e30d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5647d21e3098 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5647d21e3290 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5647d21e30f0 <col:30> 'const char *' lvalue Var 0x5647d21e2f60 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5647d21e32a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5647d21e3110 <col:33> 'const char *' lvalue ParmVar 0x5647d21e0218 'end' 'const char *'
|   | |       |-UnaryOperator 0x5647d21e3150 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5647d21e3130 <col:39> 'String' lvalue Var 0x5647d21e2de8 'name' 'String'
|   | |       |-UnaryOperator 0x5647d21e3188 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5647d21e3168 <col:46> 'String' lvalue Var 0x5647d21e2e88 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5647d21e31a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5647d21e33b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5647d21e3398 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5647d21e3378 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5647d21e3348 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|   |         `-ImplicitCastExpr 0x5647d21e3330 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5647d21e3310 <col:11> 'String' lvalue Var 0x5647d21e2de8 'name' 'String'
|   `-ReturnStmt 0x5647d21e3420 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5647d21e3408 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5647d21e33e8 <col:9> 'const char *' lvalue Var 0x5647d21e2f60 'x' 'const char *'
|-CXXMethodDecl 0x5647d21e0408 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5647d21e0378 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5647d21e3a38 <col:55, line:550:5>
|   `-IfStmt 0x5647d21e3a10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5647d21e3670 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5647d21e3658 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5647d21e3640 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5647d21e3620 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5647d21e35f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|     | |       `-DeclRefExpr 0x5647d21e3490 <col:6> 'const String' lvalue ParmVar 0x5647d21e0378 'x' 'const String &'
|     | `-BinaryOperator 0x5647d21e35d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5647d21e35a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5647d21e3550 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5647d21e3538 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5647d21e34f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5647d1ee3280 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5647d21e34b0 <col:11> 'const String' lvalue ParmVar 0x5647d21e0378 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5647d21e34d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5647d21e35b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5647d21e3588 <col:19> 'char' 123
|     |-ReturnStmt 0x5647d21e36e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5647d21e36b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5647d21e3690 <col:13> 'const String' lvalue ParmVar 0x5647d21e0378 'x' 'const String &'
|     `-IfStmt 0x5647d21e39e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5647d21e3778 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5647d21e3760 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5647d21e3740 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5647d21e3710 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |       `-DeclRefExpr 0x5647d21e36f0 <col:11> 'const String' lvalue ParmVar 0x5647d21e0378 'x' 'const String &'
|       |-ReturnStmt 0x5647d21e3900 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5647d21e38e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5647d21e38b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5647d21e38a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5647d21e3880 <col:13, col:29> 'String' (CXXTemporary 0x5647d21e3880)
|       |         `-CallExpr 0x5647d21e3830 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5647d21e3818 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5647d21e3790 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5647d21dfbb0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5647d21e3860 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5647d21e37b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5647d21e37d0 <col:28> 'const String' lvalue ParmVar 0x5647d21e0378 'x' 'const String &'
|       `-ReturnStmt 0x5647d21e39d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5647d21e39c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5647d21e3990 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5647d21e3978 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5647d21e3958 <col:13, col:20> 'String' (CXXTemporary 0x5647d21e3958)
|                 `-CXXTemporaryObjectExpr 0x5647d21e3920 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5647d21e05d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5647d21e04c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5647d21e0538 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5647d21e1d08 <col:71> 'bool' false
|-CXXRecordDecl 0x5647d21e0680 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5647d21e0978 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5647d21e0910 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5647d21e08b0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5647d21e0870 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5647d1ec62e0 'String'
|       | `-CXXRecord 0x5647d1ec6250 'String'
|       |-BuiltinType 0x5647d1b993c0 'int'
|       `-DecayedType 0x5647d216d170 '__va_list_tag *' sugar
|         |-TypedefType 0x5647d216d140 'va_list' sugar
|         | |-Typedef 0x5647d1db7390 'va_list'
|         | `-TypedefType 0x5647d1db7340 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5647d1ceef68 '__gnuc_va_list'
|         |   `-TypedefType 0x5647d1ceeed0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5647d1bdac48 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5647d1bdabf0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5647d1b9a110 '__va_list_tag'
|         |         `-CXXRecord 0x5647d1b9a078 '__va_list_tag'
|         `-PointerType 0x5647d1dbcc30 '__va_list_tag *'
|           `-RecordType 0x5647d1b9a110 '__va_list_tag'
|             `-CXXRecord 0x5647d1b9a078 '__va_list_tag'
|-EnumDecl 0x5647d21e09d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5647d21e0ad0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e1030 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0ab0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5647d21e0a90 <col:16> 'int' 1
| |-EnumConstantDecl 0x5647d21e0b60 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e1048 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0b40 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5647d21e0b20 <col:21> 'int' 2
| |-EnumConstantDecl 0x5647d21e0bf0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e1060 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0bd0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5647d21e0bb0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5647d21e0c80 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e1078 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0c60 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5647d21e0c40 <col:17> 'int' 8
| |-EnumConstantDecl 0x5647d21e0d10 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e1090 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0cf0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5647d21e0cd0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5647d21e0da0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e10a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0d80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5647d21e0d60 <col:19> 'int' 32
| |-EnumConstantDecl 0x5647d21e0e30 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e10c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0e10 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5647d21e0df0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5647d21e0ec0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e10d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0ea0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5647d21e0e80 <col:14> 'int' 128
| |-EnumConstantDecl 0x5647d21e0f50 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5647d21e10f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21e0f30 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5647d21e0f10 <col:16> 'int' 256
| `-EnumConstantDecl 0x5647d21e0fe0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5647d21e1108 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d21e0fc0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5647d21e0fa0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5647d21e1318 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5647d21e1130 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5647d21e11d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5647d21e14a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5647d21e13d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5647d21e1548 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5647d21e1588 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5647d21e15e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5647d21e1660 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5647d21e1a60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5647d21e16d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5647d21e1758 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5647d21e17d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5647d21e1850 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5647d21e18c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5647d21e1940 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5647d21e1b88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5647d21e1b88
| `-ParmVarDecl 0x5647d21e1c98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5647d21e3d98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5647d21e3d98
  `-ParmVarDecl 0x5647d21e3ea8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d216c1b8 prev 0x5647d2122a48 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d216c2b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5647d216c340 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5647d216c478 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5647d216c378 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5647d216d8a0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d216d880 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5647d216d418 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5647d216d930 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5647d216d8f0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5647d216c378 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5647d216d480 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5647d216d9b0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d216d970 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5647d216d4e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5647d216d9f0 <col:54> 'bool' false
| `-CompoundStmt 0x5647d216daf8 <col:61, line:38:5>
|   `-BinaryOperator 0x5647d216dad8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5647d216da70 <col:9> 'const Element *' lvalue ->_context 0x5647d216d3b8
|     | `-CXXThisExpr 0x5647d216da60 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5647d216dac0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5647d216daa0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5647d216c688 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d216c538 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5647d216c5b0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5647d216d8d8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d216d8b8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5647d216d3b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5647d216db50 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5647d216db10 <col:20> 'const Element *' lvalue ParmVar 0x5647d216c538 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5647d216d418 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5647d216dbd0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5647d216db90 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5647d216c5b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5647d216d480 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5647d216dc50 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5647d216dc10 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5647d216d4e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5647d216dc90 <col:73> 'bool' false
| `-CompoundStmt 0x5647d216dd08 <col:80, line:46:5>
|-CXXMethodDecl 0x5647d216c7b8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5647d216dd80 <col:36, line:51:5>
|   `-ReturnStmt 0x5647d216dd70 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5647d216dd58 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5647d216dd28 <col:16> 'const Element *const' lvalue ->_context 0x5647d216d3b8
|         `-CXXThisExpr 0x5647d216dd18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5647d216c8a8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5647d216de00 <col:32, line:57:5>
|   `-ReturnStmt 0x5647d216ddf0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5647d216ddd8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5647d216dda8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5647d216d418
|         `-CXXThisExpr 0x5647d216dd98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5647d216c968 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5647d216caf0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5647d216ca20 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5647d216cc40 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5647d216cbb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5647d216cd90 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5647d216cd00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5647d216cf98 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5647d216ce48 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5647d216cec0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5647d216d2c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5647d216d058 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5647d216d0d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5647d216d1a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5647d216d380 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5647d216d3b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5647d216d418 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5647d216d480 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5647d216d4e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5647d216d530 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5647d216d530
| `-ParmVarDecl 0x5647d216d648 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5647d216d6e8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5647d216d6e8
| `-ParmVarDecl 0x5647d216d7f8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5647d21ec980 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5647d2193b10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5647d2193ce8 prev 0x5647d2193b10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5647d2193d78 <col:46, col:52> col:46 public
|-TypedefDecl 0x5647d2193da0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a0d10 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5647d21a0cc0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5647d2194250 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5647d2194150 'type'
|     `-TemplateSpecializationType 0x5647d21940e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5647d2193fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5647d2193fa0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5647d2193f80 <col:24> 'unsigned long' 4
|       `-RecordType 0x5647d21940c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5647d2193fe0 'char_array'
|-TypedefDecl 0x5647d21a0dc8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5647d21a0d90 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5647d21a0d70 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5647d21a0d10 'type'
|     `-ElaboratedType 0x5647d21a0cc0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5647d2194250 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5647d2194150 'type'
|         `-TemplateSpecializationType 0x5647d21940e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5647d2193fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5647d2193fa0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5647d2193f80 <col:24> 'unsigned long' 4
|           `-RecordType 0x5647d21940c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5647d2193fe0 'char_array'
|-CXXMethodDecl 0x5647d21a0f48 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5647d21a0e58 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5647d21a1038 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5647d21a1118 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5647d21a13e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5647d21a12f0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5647d21a1628 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5647d21a14a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d21a1518 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a17f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5647d21a16e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d21a1760 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a1958 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5647d21a1a28 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5647d21a1c78 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5647d21a1ae8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5647d21a1b60 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a1ed8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5647d21a1d48 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5647d21a1dc0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a2098 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5647d21a1fa8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a2258 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5647d21a2160 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a2310 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5647d21a23c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5647d21a25f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5647d21a2470 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5647d21a24e8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5647d21a2898 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5647d21a27a0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5647d21a2960 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5647d21a29b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5647d21a2a00 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5647d2192518 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5647d2192728 prev 0x5647d2192518 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5647d2193a80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5647d2193a30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5647d2193a10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5647d21938c0 'type'
|     `-SubstTemplateTypeParmType 0x5647d21936e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5647d1e5f120 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e5f0c8 'T'
|       `-RecordType 0x5647d2193230 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5647d2193148 'sized_array_memory'
|-FieldDecl 0x5647d21a2a50 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5647d21a2aa0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5647d21a2ad8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|   |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5647d1e96db8 'T'
|   `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a2b68 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5647d21a2b30 'int &'
|   `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a2c28 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5647d21a2bf0 'const int &'
|   `-QualType 0x5647d21927c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a2cb8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5647d21a2c80 'int *'
|   `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a2d48 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5647d21a2d10 'const int *'
|   `-QualType 0x5647d21927c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a3930 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5647d21a38e0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5647d21a38c0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5647d21a3850 'type'
|     `-SubstTemplateTypeParmType 0x5647d21a3610 'int' sugar
|       |-TemplateTypeParmType 0x5647d1e69f20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e69ed0 'T'
|       `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a3998 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5647d21a2bf0 'const int &'
|   `-QualType 0x5647d21927c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a39f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a3a58 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5647d21a2c80 'int *'
|   `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|     |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5647d1e96db8 'T'
|     `-BuiltinType 0x5647d1b993c0 'int'
|-TypedefDecl 0x5647d21a3ac0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5647d21a2d10 'const int *'
|   `-QualType 0x5647d21927c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5647d21927c0 'int' sugar
|       |-TemplateTypeParmType 0x5647d1e96e10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5647d1e96db8 'T'
|       `-BuiltinType 0x5647d1b993c0 'int'
|-EnumDecl 0x5647d21a3b18 <line:134:5> col:5
| `-EnumConstantDecl 0x5647d21a3c10 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5647d21a3bf0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5647d1e98498 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5647d1e98470 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5647d1e98450 <col:40> 'int' 1
|-CXXConstructorDecl 0x5647d21a3c98 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5647d21a3ee8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d21a3d50 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d21a3df0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5647d21a41a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5647d21a4090 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5647d21a4468 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5647d21a4350 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5647d21a47b0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5647d21a4690 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5647d21a4ac0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5647d21a49a0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5647d21a4db0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d21a4bf8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d21a4c70 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5647d21a4ed8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5647d21a4fb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a5010 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a5058 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5647d21a5108 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a5160 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a5228 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5647d21a52d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a5330 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a5378 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5647d21a5428 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a5480 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a54c8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5647d21a5578 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a55d0 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a5618 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5647d21a56c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5647d21a5720 <col:30> Inherited
|-CXXMethodDecl 0x5647d21a5748 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5647d21a57f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5647d21a58a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5647d21a5a68 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d21a5958 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5647d21a59d0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5647d21a5bb8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5647d21a5b28 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d21a5d68 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5647d21a5c70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5647d21a5e20 <col:20>
| `-OptimizeNoneAttr 0x5647d21a5e78 <col:30>
|-CXXMethodDecl 0x5647d21a5f98 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5647d21a5ea0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5647d21a6050 <col:20>
| `-OptimizeNoneAttr 0x5647d21a60a8 <col:30>
|-CXXMethodDecl 0x5647d21a6160 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5647d21a60d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d21a62a8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5647d21a6218 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d21a63d8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5647d21a6508 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5647d21a65d8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5647d21a66a8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5647d21a67e8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5647d21a6758 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d21a6930 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5647d21a68a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5647d21a6a78 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5647d21a69e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5647d21a6b30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5647d21a6c30 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5647d21a6ba0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5647d21a6ce8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5647d21a6da8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5647d21a6ea8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5647d21a7028 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5647d21a6f68 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5647d21a77e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5647d21a70e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5647d21a7748 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5647d21a7648 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5647d21a78c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5647d21a7a18 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5647d21a7988 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5647d21a7ad0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5647d21a7d18 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5647d21a7b90 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5647d21a7c08 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5647d21a7ed8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5647d21a7de8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5647d21a8128 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5647d21a7fa0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5647d21a8018 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5647d21a81e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5647d21a8448 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5647d21a8350 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5647d21a8518 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d2190688 prev 0x5647d2176200 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5647d2190780 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5647d2190870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5647d21ba040 <col:16, line:828:9>
|-CXXDestructorDecl 0x5647d2190960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5647d21ba050 <col:25, line:830:9>
|-CXXMethodDecl 0x5647d2190a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5647d2190b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5647d2190bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5647d2190bb8
| `-ParmVarDecl 0x5647d2190cc8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5647d2191488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5647d2191488
  `-ParmVarDecl 0x5647d2191598 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d2176038 prev 0x5647d2122ad8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5647d2176170 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5647d2176200 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5647d21762b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5647d21763b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5647d21762e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5647d21aaaf8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5647d21aaad8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5647d21766d8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2176550 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5647d21765c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5647d21aab30 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5647d21aab10 <col:59> 'int' 0
|-CXXConstructorDecl 0x5647d21768b0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d21767a0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5647d2176818 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5647d21aab68 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5647d21aab48 <col:55> 'int' 0
|-CXXConstructorDecl 0x5647d2176c68 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5647d2176a50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5647d2176ac8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5647d2176b40 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5647d21aaba0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5647d21aab80 <col:31> 'int' 0
|-CXXConstructorDecl 0x5647d2176e28 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5647d2176d68 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5647d2176f20 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5647d21770d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5647d2177010 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5647d21771c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5647d21aaf50 <col:24, line:291:5>
|   `-ReturnStmt 0x5647d21aaf40 <line:290:9, col:79>
|     `-BinaryOperator 0x5647d21aaf20 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5647d21aadf8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5647d21aad50 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5647d21aad30 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5647d21aac28 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5647d21aac10 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5647d21aabf8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5647d21aabc8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5647d21924b0
|       | |   |       `-CXXThisExpr 0x5647d21aabb8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5647d21aad18 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5647d21aad00 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5647d21aacc8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5647d21aac98 <col:28, col:35> '<bound member function type>' ->size 0x5647d215c8e8
|       | |           `-ImplicitCastExpr 0x5647d21aace8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5647d21aac80 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5647d21aac50 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5647d21924b0
|       | |                 `-CXXThisExpr 0x5647d21aac40 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5647d21aade0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5647d21aadc8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5647d21aadb0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5647d21aad80 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5647d21a9680
|       |         `-CXXThisExpr 0x5647d21aad70 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5647d21aaf00 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5647d21aaee8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5647d21aaed0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5647d21aae90 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5647d21aae78 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5647d21aae28 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5647d21a9730
|         |     |   `-CXXThisExpr 0x5647d21aae18 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5647d21aae58 <col:73> 'int' 0
|         `-IntegerLiteral 0x5647d21aaeb0 <col:79> 'int' 0
|-CXXMethodDecl 0x5647d2177288 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5647d21ab128 <col:32, line:296:5>
|   `-ReturnStmt 0x5647d21ab118 <line:295:9, col:49>
|     `-BinaryOperator 0x5647d21ab0f8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5647d21aafd8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5647d21aafc0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5647d21aafa8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5647d21aaf78 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5647d21a9680
|       |       `-CXXThisExpr 0x5647d21aaf68 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5647d21ab0d8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5647d21ab0c0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5647d21ab0a8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5647d21ab068 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5647d21ab050 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5647d21ab000 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5647d21a9730
|         |     |   `-CXXThisExpr 0x5647d21aaff0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5647d21ab030 <col:43> 'int' 0
|         `-IntegerLiteral 0x5647d21ab088 <col:49> 'int' 0
|-CXXMethodDecl 0x5647d2177378 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5647d21ab338 <col:19, line:306:5>
|   |-IfStmt 0x5647d21ab258 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5647d21ab198 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5647d21ab180 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5647d21ab150 <col:13> 'Vector<String> *' lvalue ->_conf 0x5647d21924b0
|   | |     `-CXXThisExpr 0x5647d21ab140 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5647d21ab238 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5647d21ab208 <col:13, col:20> '<bound member function type>' ->clear 0x5647d215f648
|   |     `-ImplicitCastExpr 0x5647d21ab1f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5647d21ab1c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5647d21924b0
|   |         `-CXXThisExpr 0x5647d21ab1b0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5647d21ab2e0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5647d21ab2b0 <col:9, col:16> '<bound member function type>' .clear 0x5647d21a81e8
|   |   `-MemberExpr 0x5647d21ab280 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5647d21a8600
|   |     `-CXXThisExpr 0x5647d21ab270 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5647d21ab328 <line:305:9, col:17>
|     `-UnaryOperator 0x5647d21ab310 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21ab300 <col:17> 'Args *' this
|-CXXMethodDecl 0x5647d21775f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5647d2177500 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5647d2177778 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5647d21776b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5647d2177af8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5647d2177820 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5647d2177a58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5647d21778c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5647d2177940 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5647d21ab660 <col:67, line:327:5>
|     |-WhileStmt 0x5647d21ab610 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5647d21ab428 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5647d21ab3a0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5647d2122470 0x5647d20b89f8 0x5647d1f01fd8 0x5647d1f01cb0 0x5647d1ef3490 0x5647d1ef3140 0x5647d1ef2a30 0x5647d1ec53a0 0x5647d1e51860
|     | | |-DeclRefExpr 0x5647d21ab360 <col:16> 'Iter' lvalue ParmVar 0x5647d21778c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5647d21ab380 <col:25> 'Iter' lvalue ParmVar 0x5647d2177940 'end' 'Iter'
|     | `-CompoundStmt 0x5647d21ab5f0 <col:30, line:325:9>
|     |   |-CallExpr 0x5647d21ab590 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5647d21ab470 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5647d21ab560 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5647d21ab4f0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|     |   |   `-DeclRefExpr 0x5647d21ab4d0 <col:24> 'Iter' lvalue ParmVar 0x5647d21778c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5647d21ab5d8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5647d21ab5b8 <col:15> 'Iter' lvalue ParmVar 0x5647d21778c8 'begin' 'Iter'
|     `-ReturnStmt 0x5647d21ab650 <line:326:9, col:17>
|       `-UnaryOperator 0x5647d21ab638 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21ab628 <col:17> 'Args *' this
|-CXXMethodDecl 0x5647d2177c00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5647d2177b70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5647d2177d48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5647d2177cb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5647d2177e10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5647d21ab740 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5647d21ab6e0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5647d21ab690 <col:9> '<bound member function type>' ->reset_from 0x5647d21a9aa8
|   | | `-CXXThisExpr 0x5647d21ab680 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5647d21ab6c0 <col:20> 'int' 0
|   `-ReturnStmt 0x5647d21ab730 <line:352:9, col:17>
|     `-UnaryOperator 0x5647d21ab718 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21ab708 <col:17> 'Args *' this
|-VarDecl 0x5647d2177ec8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5647d2177f30 <col:38> 'int' 1
|-VarDecl 0x5647d2177fc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5647d2178028 <col:39> 'int' 2
|-VarDecl 0x5647d21780b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5647d2178120 <col:39> 'int' 4
|-VarDecl 0x5647d21781b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5647d2178218 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5647d2178598 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5647d2178290 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d21784f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5647d2178340 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d21783e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ab898 <col:43, line:371:5>
|     `-ReturnStmt 0x5647d21ab888 <line:370:9, col:34>
|       `-CallExpr 0x5647d21ab850 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ab770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ab7f0 <col:21> 'const char *' lvalue ParmVar 0x5647d2178340 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ab810 <col:30> 'int' 0
|         `-DeclRefExpr 0x5647d21ab830 <col:33> 'T' lvalue ParmVar 0x5647d21783e8 'x' 'T &'
|-FunctionTemplateDecl 0x5647d21788c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5647d2178600 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d2178828 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5647d21786b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2178758 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ab9e8 <col:45, line:375:5>
|     `-ReturnStmt 0x5647d21ab9d8 <line:374:9, col:42>
|       `-CallExpr 0x5647d21ab9a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ab8c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ab940 <col:21> 'const char *' lvalue ParmVar 0x5647d21786b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ab960 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5647d21ab980 <col:41> 'T' lvalue ParmVar 0x5647d2178758 'x' 'T &'
|-FunctionTemplateDecl 0x5647d2178bf8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5647d2178930 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5647d2178b58 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5647d21789e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5647d2178a88 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5647d21abb38 <col:45, line:379:5>
| |   `-ReturnStmt 0x5647d21abb28 <line:378:9, col:43>
| |     `-CallExpr 0x5647d21abaf0 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5647d21aba10 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5647d21aba90 <col:21> 'const char *' lvalue ParmVar 0x5647d21789e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5647d21abab0 <col:30> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
| |       `-DeclRefExpr 0x5647d21abad0 <col:42> 'T' lvalue ParmVar 0x5647d2178a88 'x' 'T &'
| `-CXXMethodDecl 0x5647d21ecdf8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5647d21ecc10 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5647d21ecce8 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x5647d2178f28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5647d2178c60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d2178e88 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5647d2178d10 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2178db8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5647d21abd38 <col:46, line:383:5>
|     `-ReturnStmt 0x5647d21abd28 <line:382:9, col:55>
|       `-CallExpr 0x5647d21abcf0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21abb60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21abbe0 <col:21> 'const char *' lvalue ParmVar 0x5647d2178d10 'keyword' 'const char *'
|         |-BinaryOperator 0x5647d21abcb0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5647d21abc60 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5647d21abc40 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5647d21abc98 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5647d21abc78 <col:42> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5647d21abcd0 <col:54> 'T' lvalue ParmVar 0x5647d2178db8 'x' 'T &'
|-FunctionTemplateDecl 0x5647d2179328 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5647d2178f90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d2179288 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5647d2179040 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d21790c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2179168 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5647d21abe78 <col:54, line:388:5>
|     |-CallExpr 0x5647d21abe00 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21abd50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5647d21abd90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5647d21abda0 <col:30> 'const char *' lvalue ParmVar 0x5647d2179040 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21abdc0 <col:39> 'int' lvalue ParmVar 0x5647d21790c0 'flags' 'int'
|     | `-DeclRefExpr 0x5647d21abde0 <col:46> 'T' lvalue ParmVar 0x5647d2179168 'x' 'T &'
|     `-ReturnStmt 0x5647d21abe68 <line:387:9, col:17>
|       `-UnaryOperator 0x5647d21abe50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21abe40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d21797d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5647d2179398 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d2179418 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5647d2179738 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5647d21794d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2179578 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5647d2179618 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21abfe8 <col:74, line:403:5>
|     `-ReturnStmt 0x5647d21abfd8 <line:402:9, col:56>
|       `-CallExpr 0x5647d21abf98 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21abea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21abf18 <col:28> 'const char *' lvalue ParmVar 0x5647d21794d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21abf38 <col:37> 'int' 0
|         |-DeclRefExpr 0x5647d21abf58 <col:40> 'T' lvalue ParmVar 0x5647d2179578 'x' 'T &'
|         `-DeclRefExpr 0x5647d21abf78 <col:43> 'const V' lvalue ParmVar 0x5647d2179618 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5647d2179c48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5647d2179848 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d21798c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5647d2179ba8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5647d2179988 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2179a28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5647d2179ac8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21ac150 <col:76, line:407:5>
|     `-ReturnStmt 0x5647d21ac140 <line:406:9, col:65>
|       `-CallExpr 0x5647d21ac100 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ac010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ac080 <col:28> 'const char *' lvalue ParmVar 0x5647d2179988 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ac0a0 <col:37> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5647d21ac0c0 <col:49> 'T' lvalue ParmVar 0x5647d2179a28 'x' 'T &'
|         `-DeclRefExpr 0x5647d21ac0e0 <col:52> 'const V' lvalue ParmVar 0x5647d2179ac8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5647d217a198 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5647d2179cb8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d2179d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5647d217a0f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5647d2179df8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2179e78 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2179f18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5647d2179fb8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21ac2b8 <col:85, line:412:5>
|     |-CallExpr 0x5647d21ac238 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21ac168 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5647d21ac1a8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ac1b8 <col:37> 'const char *' lvalue ParmVar 0x5647d2179df8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21ac1d8 <col:46> 'int' lvalue ParmVar 0x5647d2179e78 'flags' 'int'
|     | |-DeclRefExpr 0x5647d21ac1f8 <col:53> 'T' lvalue ParmVar 0x5647d2179f18 'x' 'T &'
|     | `-DeclRefExpr 0x5647d21ac218 <col:56> 'const V' lvalue ParmVar 0x5647d2179fb8 'default_value' 'const V &'
|     `-ReturnStmt 0x5647d21ac2a8 <line:411:9, col:17>
|       `-UnaryOperator 0x5647d21ac290 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21ac280 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d217a628 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5647d217a210 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217a288 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d217a588 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d217a348 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217a3c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217a468 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ac438 <col:53, line:425:5>
|     `-ReturnStmt 0x5647d21ac428 <line:424:9, col:42>
|       `-CallExpr 0x5647d21ac3e8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ac2e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ac368 <col:21> 'const char *' lvalue ParmVar 0x5647d217a348 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ac388 <col:30> 'int' 0
|         |-DeclRefExpr 0x5647d21ac3a8 <col:33> 'P' lvalue ParmVar 0x5647d217a3c0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ac3c8 <col:41> 'T' lvalue ParmVar 0x5647d217a468 'x' 'T &'
|-FunctionTemplateDecl 0x5647d217aa78 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5647d217a698 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217a718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d217a9d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d217a7d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217a850 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217a8f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ac5b0 <col:55, line:429:5>
|     `-ReturnStmt 0x5647d21ac5a0 <line:428:9, col:50>
|       `-CallExpr 0x5647d21ac560 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ac460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ac4e0 <col:21> 'const char *' lvalue ParmVar 0x5647d217a7d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ac500 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5647d21ac520 <col:41> 'P' lvalue ParmVar 0x5647d217a850 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ac540 <col:49> 'T' lvalue ParmVar 0x5647d217a8f8 'x' 'T &'
|-FunctionTemplateDecl 0x5647d217aec8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5647d217aae8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217ab68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d217ae28 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d217ac28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217aca0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217ad48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ac728 <col:55, line:433:5>
|     `-ReturnStmt 0x5647d21ac718 <line:432:9, col:51>
|       `-CallExpr 0x5647d21ac6d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ac5d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ac658 <col:21> 'const char *' lvalue ParmVar 0x5647d217ac28 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ac678 <col:30> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5647d21ac698 <col:42> 'P' lvalue ParmVar 0x5647d217aca0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ac6b8 <col:50> 'T' lvalue ParmVar 0x5647d217ad48 'x' 'T &'
|-FunctionTemplateDecl 0x5647d217b318 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5647d217af38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217afb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d217b278 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d217b078 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217b0f0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217b198 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ac950 <col:56, line:437:5>
|     `-ReturnStmt 0x5647d21ac940 <line:436:9, col:63>
|       `-CallExpr 0x5647d21ac900 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ac750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ac7d0 <col:21> 'const char *' lvalue ParmVar 0x5647d217b078 'keyword' 'const char *'
|         |-BinaryOperator 0x5647d21ac8a0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5647d21ac850 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5647d21ac830 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5647d21ac888 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5647d21ac868 <col:42> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5647d21ac8c0 <col:54> 'P' lvalue ParmVar 0x5647d217b0f0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ac8e0 <col:62> 'T' lvalue ParmVar 0x5647d217b198 'x' 'T &'
|-FunctionTemplateDecl 0x5647d217b848 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5647d217b388 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217b408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d217b7a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5647d217b4c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217b548 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5647d217b5c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217b668 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5647d21acab8 <col:64, line:442:5>
|     |-CallExpr 0x5647d21aca38 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21ac968 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5647d21ac9a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ac9b8 <col:30> 'const char *' lvalue ParmVar 0x5647d217b4c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21ac9d8 <col:39> 'int' lvalue ParmVar 0x5647d217b548 'flags' 'int'
|     | |-DeclRefExpr 0x5647d21ac9f8 <col:46> 'P' lvalue ParmVar 0x5647d217b5c0 'parser' 'P'
|     | `-DeclRefExpr 0x5647d21aca18 <col:54> 'T' lvalue ParmVar 0x5647d217b668 'x' 'T &'
|     `-ReturnStmt 0x5647d21acaa8 <line:441:9, col:17>
|       `-UnaryOperator 0x5647d21aca90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21aca80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d217be48 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5647d217b8c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217b938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5647d217b9b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5647d217bda8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5647d217ba80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217baf8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217bb98 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5647d217bc68 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21acc50 <col:84, line:458:5>
|     `-ReturnStmt 0x5647d21acc40 <line:457:9, col:64>
|       `-CallExpr 0x5647d21acbf8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21acae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21acb58 <col:28> 'const char *' lvalue ParmVar 0x5647d217ba80 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21acb78 <col:37> 'int' 0
|         |-DeclRefExpr 0x5647d21acb98 <col:40> 'P' lvalue ParmVar 0x5647d217baf8 'parser' 'P'
|         |-DeclRefExpr 0x5647d21acbb8 <col:48> 'T' lvalue ParmVar 0x5647d217bb98 'x' 'T &'
|         `-DeclRefExpr 0x5647d21acbd8 <col:51> 'const V' lvalue ParmVar 0x5647d217bc68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5647d217fa68 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5647d217bec0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217bf38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5647d217bfb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5647d217f9c8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5647d217c080 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217f790 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217f838 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5647d217f8d8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21acde0 <col:86, line:462:5>
|     `-ReturnStmt 0x5647d21acdd0 <line:461:9, col:73>
|       `-CallExpr 0x5647d21acd88 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21acc78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21acce8 <col:28> 'const char *' lvalue ParmVar 0x5647d217c080 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21acd08 <col:37> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5647d21acd28 <col:49> 'P' lvalue ParmVar 0x5647d217f790 'parser' 'P'
|         |-DeclRefExpr 0x5647d21acd48 <col:57> 'T' lvalue ParmVar 0x5647d217f838 'x' 'T &'
|         `-DeclRefExpr 0x5647d21acd68 <col:60> 'const V' lvalue ParmVar 0x5647d217f8d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5647d21800c8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5647d217fae0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d217fb58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5647d217fbd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5647d2180028 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5647d217fca0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d217fd20 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5647d217fd98 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5647d217fe38 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5647d217fed8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5647d21acf70 <col:95, line:467:5>
|     |-CallExpr 0x5647d21acee8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21acdf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5647d21ace38 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ace48 <col:37> 'const char *' lvalue ParmVar 0x5647d217fca0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21ace68 <col:46> 'int' lvalue ParmVar 0x5647d217fd20 'flags' 'int'
|     | |-DeclRefExpr 0x5647d21ace88 <col:53> 'P' lvalue ParmVar 0x5647d217fd98 'parser' 'P'
|     | |-DeclRefExpr 0x5647d21acea8 <col:61> 'T' lvalue ParmVar 0x5647d217fe38 'x' 'T &'
|     | `-DeclRefExpr 0x5647d21acec8 <col:64> 'const V' lvalue ParmVar 0x5647d217fed8 'default_value' 'const V &'
|     `-ReturnStmt 0x5647d21acf60 <line:466:9, col:17>
|       `-UnaryOperator 0x5647d21acf48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21acf38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d21806a8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5647d2180148 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d21801c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d2180248 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d2180608 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d2180310 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2180388 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2180428 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5647d21804c8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5647d21ad118 <col:63, line:481:5>
|     `-ReturnStmt 0x5647d21ad108 <line:480:9, col:47>
|       `-CallExpr 0x5647d21ad0c0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21acfa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ad020 <col:21> 'const char *' lvalue ParmVar 0x5647d2180310 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ad040 <col:30> 'int' 0
|         |-DeclRefExpr 0x5647d21ad060 <col:33> 'P' lvalue ParmVar 0x5647d2180388 'parser' 'P'
|         |-DeclRefExpr 0x5647d21ad080 <col:41> 'T1' lvalue ParmVar 0x5647d2180428 'x1' 'T1 &'
|         `-DeclRefExpr 0x5647d21ad0a0 <col:45> 'T2' lvalue ParmVar 0x5647d21804c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5647d2180c28 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5647d2180720 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2180798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d2180818 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d2180b88 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d21808e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2180958 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5647d21809f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5647d2180a98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5647d21ad2b8 <col:65, line:485:5>
|     `-ReturnStmt 0x5647d21ad2a8 <line:484:9, col:55>
|       `-CallExpr 0x5647d21ad260 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ad140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ad1c0 <col:21> 'const char *' lvalue ParmVar 0x5647d21808e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ad1e0 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5647d21ad200 <col:41> 'P' lvalue ParmVar 0x5647d2180958 'parser' 'P'
|         |-DeclRefExpr 0x5647d21ad220 <col:49> 'T1' lvalue ParmVar 0x5647d21809f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5647d21ad240 <col:53> 'T2' lvalue ParmVar 0x5647d2180a98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5647d21811a8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5647d2180ca0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2180d18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d2180d98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d2181108 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d2180e60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2180ed8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2180f78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5647d2181018 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5647d21ad458 <col:65, line:489:5>
|     `-ReturnStmt 0x5647d21ad448 <line:488:9, col:56>
|       `-CallExpr 0x5647d21ad400 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ad2e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ad360 <col:21> 'const char *' lvalue ParmVar 0x5647d2180e60 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ad380 <col:30> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5647d21ad3a0 <col:42> 'P' lvalue ParmVar 0x5647d2180ed8 'parser' 'P'
|         |-DeclRefExpr 0x5647d21ad3c0 <col:50> 'T1' lvalue ParmVar 0x5647d2180f78 'x1' 'T1 &'
|         `-DeclRefExpr 0x5647d21ad3e0 <col:54> 'T2' lvalue ParmVar 0x5647d2181018 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5647d2181728 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5647d2181220 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2181298 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d2181318 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d2181688 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d21813e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2181458 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5647d21814f8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5647d2181598 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5647d21ad6a8 <col:66, line:493:5>
|     `-ReturnStmt 0x5647d21ad698 <line:492:9, col:68>
|       `-CallExpr 0x5647d21ad650 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ad480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ad500 <col:21> 'const char *' lvalue ParmVar 0x5647d21813e0 'keyword' 'const char *'
|         |-BinaryOperator 0x5647d21ad5d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5647d21ad580 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5647d21ad560 <col:30> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5647d21ad5b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5647d21ad598 <col:42> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5647d21ad5f0 <col:54> 'P' lvalue ParmVar 0x5647d2181458 'parser' 'P'
|         |-DeclRefExpr 0x5647d21ad610 <col:62> 'T1' lvalue ParmVar 0x5647d21814f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5647d21ad630 <col:66> 'T2' lvalue ParmVar 0x5647d2181598 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5647d2181d88 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5647d21817a0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2181818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d2181898 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d2181ce8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d2181960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d21819e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2181a58 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2181af8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5647d2181b98 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5647d21ad838 <col:74, line:498:5>
|     |-CallExpr 0x5647d21ad7b0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21ad6c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5647d21ad700 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ad710 <col:30> 'const char *' lvalue ParmVar 0x5647d2181960 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21ad730 <col:39> 'int' lvalue ParmVar 0x5647d21819e0 'flags' 'int'
|     | |-DeclRefExpr 0x5647d21ad750 <col:46> 'P' lvalue ParmVar 0x5647d2181a58 'parser' 'P'
|     | |-DeclRefExpr 0x5647d21ad770 <col:54> 'T1' lvalue ParmVar 0x5647d2181af8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5647d21ad790 <col:58> 'T2' lvalue ParmVar 0x5647d2181b98 'x2' 'T2 &'
|     `-ReturnStmt 0x5647d21ad828 <line:497:9, col:17>
|       `-UnaryOperator 0x5647d21ad810 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21ad800 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d21820e8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5647d2181e08 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2182048 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5647d2181ec0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2181f38 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5647d21ad980 <col:52, line:509:5>
|     `-ReturnStmt 0x5647d21ad970 <line:508:9, col:44>
|       `-CallExpr 0x5647d21ad938 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ad868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ad8d8 <col:26> 'const char *' lvalue ParmVar 0x5647d2181ec0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ad8f8 <col:35> 'int' 0
|         `-DeclRefExpr 0x5647d21ad918 <col:38> 'P' lvalue ParmVar 0x5647d2181f38 'parser' 'P'
|-FunctionTemplateDecl 0x5647d21823e8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5647d2182150 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2182348 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5647d2182200 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2182278 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5647d21adac0 <col:54, line:513:5>
|     `-ReturnStmt 0x5647d21adab0 <line:512:9, col:52>
|       `-CallExpr 0x5647d21ada78 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ad9a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ada18 <col:26> 'const char *' lvalue ParmVar 0x5647d2182200 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ada38 <col:35> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5647d21ada58 <col:46> 'P' lvalue ParmVar 0x5647d2182278 'parser' 'P'
|-FunctionTemplateDecl 0x5647d21826e8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5647d2182450 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2182648 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5647d2182500 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2182578 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5647d21adc00 <col:54, line:517:5>
|     `-ReturnStmt 0x5647d21adbf0 <line:516:9, col:53>
|       `-CallExpr 0x5647d21adbb8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21adae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21adb58 <col:26> 'const char *' lvalue ParmVar 0x5647d2182500 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21adb78 <col:35> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int'
|         `-DeclRefExpr 0x5647d21adb98 <col:47> 'P' lvalue ParmVar 0x5647d2182578 'parser' 'P'
|-FunctionTemplateDecl 0x5647d21829e8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5647d2182750 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2182948 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5647d2182800 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2182878 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5647d21addf0 <col:55, line:521:5>
|     `-ReturnStmt 0x5647d21adde0 <line:520:9, col:65>
|       `-CallExpr 0x5647d21adda8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21adc28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21adc98 <col:26> 'const char *' lvalue ParmVar 0x5647d2182800 'keyword' 'const char *'
|         |-BinaryOperator 0x5647d21add68 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5647d21add18 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5647d21adcf8 <col:35> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5647d21add50 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5647d21add30 <col:47> 'const int' lvalue Var 0x5647d2177fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5647d21add88 <col:59> 'P' lvalue ParmVar 0x5647d2182878 'parser' 'P'
|-FunctionTemplateDecl 0x5647d2182db8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5647d2182a50 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2182d18 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5647d2182b00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2182b80 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2182bf8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5647d21adf30 <col:63, line:526:5>
|     |-CallExpr 0x5647d21adeb8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21ade08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5647d21ade48 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ade58 <col:35> 'const char *' lvalue ParmVar 0x5647d2182b00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5647d21ade78 <col:44> 'int' lvalue ParmVar 0x5647d2182b80 'flags' 'int'
|     | `-DeclRefExpr 0x5647d21ade98 <col:51> 'P' lvalue ParmVar 0x5647d2182bf8 'parser' 'P'
|     `-ReturnStmt 0x5647d21adf20 <line:525:9, col:17>
|       `-UnaryOperator 0x5647d21adf08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21adef8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d2183208 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5647d2182e28 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2182ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2183168 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d2182f68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2182fe0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2183088 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ae088 <col:58, line:541:5>
|     `-ReturnStmt 0x5647d21ae078 <line:540:9, col:39>
|       `-CallExpr 0x5647d21ae040 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21adf60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21adfe0 <col:21> 'const char *' lvalue ParmVar 0x5647d2182f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ae000 <col:30> 'P' lvalue ParmVar 0x5647d2182fe0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae020 <col:38> 'T' lvalue ParmVar 0x5647d2183088 'x' 'T &'
|-FunctionTemplateDecl 0x5647d2183658 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5647d2183278 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d21832f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d21835b8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d21833b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2183430 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5647d21834d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ae1c0 <col:60, line:545:5>
|     `-ReturnStmt 0x5647d21ae1b0 <line:544:9, col:41>
|       `-CallExpr 0x5647d21ae178 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae0b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae118 <col:23> 'const char *' lvalue ParmVar 0x5647d21833b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ae138 <col:32> 'P' lvalue ParmVar 0x5647d2183430 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae158 <col:40> 'T' lvalue ParmVar 0x5647d21834d8 'x' 'T &'
|-FunctionTemplateDecl 0x5647d2183aa8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5647d21836c8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2183748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2183a08 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d2183808 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2183880 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2183928 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ae2f8 <col:60, line:549:5>
|     `-ReturnStmt 0x5647d21ae2e8 <line:548:9, col:41>
|       `-CallExpr 0x5647d21ae2b0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae1e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae250 <col:23> 'const char *' lvalue ParmVar 0x5647d2183808 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ae270 <col:32> 'P' lvalue ParmVar 0x5647d2183880 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae290 <col:40> 'T' lvalue ParmVar 0x5647d2183928 'x' 'T &'
|-FunctionTemplateDecl 0x5647d2183ef8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5647d2183b18 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2183b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2183e58 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d2183c58 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2183cd0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2183d78 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ae430 <col:61, line:553:5>
|     `-ReturnStmt 0x5647d21ae420 <line:552:9, col:42>
|       `-CallExpr 0x5647d21ae3e8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae320 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae388 <col:24> 'const char *' lvalue ParmVar 0x5647d2183c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ae3a8 <col:33> 'P' lvalue ParmVar 0x5647d2183cd0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae3c8 <col:41> 'T' lvalue ParmVar 0x5647d2183d78 'x' 'T &'
|-FunctionTemplateDecl 0x5647d21843d8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5647d2183f68 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2183fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2184338 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5647d21840a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2184128 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5647d21841a0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2184248 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5647d21ae5a8 <col:69, line:557:5>
|     `-ReturnStmt 0x5647d21ae598 <line:556:9, col:46>
|       `-CallExpr 0x5647d21ae558 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae458 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae4d8 <col:21> 'const char *' lvalue ParmVar 0x5647d21840a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21ae4f8 <col:30> 'int' lvalue ParmVar 0x5647d2184128 'flags' 'int'
|         |-DeclRefExpr 0x5647d21ae518 <col:37> 'P' lvalue ParmVar 0x5647d21841a0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae538 <col:45> 'T' lvalue ParmVar 0x5647d2184248 'x' 'T &'
|-FunctionTemplateDecl 0x5647d21846e8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5647d2184450 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d2184648 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5647d2184500 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2184578 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5647d21ae6e8 <col:56, line:571:5>
|     `-ReturnStmt 0x5647d21ae6d8 <line:570:9, col:48>
|       `-CallExpr 0x5647d21ae6a0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae5d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae640 <col:30> 'const char *' lvalue ParmVar 0x5647d2184500 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ae660 <col:39> 'int' 0
|         `-DeclRefExpr 0x5647d21ae680 <col:42> 'P' lvalue ParmVar 0x5647d2184578 'parser' 'P'
|-FunctionTemplateDecl 0x5647d2184a78 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5647d2184750 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d21849d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5647d2184800 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2184880 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5647d21848f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5647d21ae8b8 <col:67, line:576:5>
|     |-CallExpr 0x5647d21ae840 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21ae700 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5647d21ae740 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5647d21ae750 <col:39> 'const char *' lvalue ParmVar 0x5647d2184800 'keyword' 'const char *'
|     | |-BinaryOperator 0x5647d21ae800 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5647d21ae7b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5647d21ae770 <col:48> 'int' lvalue ParmVar 0x5647d2184880 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5647d21ae7e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5647d21ae7c8 <col:56> 'const int' lvalue Var 0x5647d21781b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5647d21ae820 <col:68> 'P' lvalue ParmVar 0x5647d21848f8 'parser' 'P'
|     `-ReturnStmt 0x5647d21ae8a8 <line:575:9, col:17>
|       `-UnaryOperator 0x5647d21ae890 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21ae880 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d2184ec8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5647d2184ae8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2184b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2184e28 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5647d2184c28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2184ca0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2184d48 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5647d21aea28 <col:62, line:592:5>
|     `-ReturnStmt 0x5647d21aea18 <line:591:9, col:51>
|       `-CallExpr 0x5647d21ae9d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21ae8e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21ae958 <col:30> 'const char *' lvalue ParmVar 0x5647d2184c28 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21ae978 <col:39> 'int' 0
|         |-DeclRefExpr 0x5647d21ae998 <col:42> 'P' lvalue ParmVar 0x5647d2184ca0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21ae9b8 <col:50> 'T' lvalue ParmVar 0x5647d2184d48 'x' 'T &'
|-FunctionTemplateDecl 0x5647d21853a8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5647d2184f38 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2184fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2185308 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5647d2185078 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d21850f8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2185170 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2185218 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5647d21aec20 <col:73, line:597:5>
|     |-CallExpr 0x5647d21aeba0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21aea40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5647d21aea80 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5647d21aea90 <col:39> 'const char *' lvalue ParmVar 0x5647d2185078 'keyword' 'const char *'
|     | |-BinaryOperator 0x5647d21aeb40 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5647d21aeaf0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5647d21aeab0 <col:48> 'int' lvalue ParmVar 0x5647d21850f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5647d21aeb28 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5647d21aeb08 <col:56> 'const int' lvalue Var 0x5647d21781b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5647d21aeb60 <col:68> 'P' lvalue ParmVar 0x5647d2185170 'parser' 'P'
|     | `-DeclRefExpr 0x5647d21aeb80 <col:76> 'T' lvalue ParmVar 0x5647d2185218 'x' 'T &'
|     `-ReturnStmt 0x5647d21aec10 <line:596:9, col:17>
|       `-UnaryOperator 0x5647d21aebf8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21aebe8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d2185958 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5647d2185420 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2185498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d21858b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5647d2185558 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d21855d0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2185790 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5647d21aed90 <col:65, line:614:5>
|     `-ReturnStmt 0x5647d21aed80 <line:613:9, col:46>
|       `-CallExpr 0x5647d21aed40 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21aec50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21aecc0 <col:25> 'const char *' lvalue ParmVar 0x5647d2185558 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21aece0 <col:34> 'int' 0
|         |-DeclRefExpr 0x5647d21aed00 <col:37> 'P' lvalue ParmVar 0x5647d21855d0 'parser' 'P'
|         `-DeclRefExpr 0x5647d21aed20 <col:45> 'Vector<T>' lvalue ParmVar 0x5647d2185790 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5647d2185d88 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5647d21859c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d2185ce8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5647d2185a80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2185bd0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5647d21aefb0 <col:55, line:618:5>
|     `-ReturnStmt 0x5647d21aefa0 <line:617:9, col:55>
|       `-CallExpr 0x5647d21aef60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21aedb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21aee28 <col:25> 'const char *' lvalue ParmVar 0x5647d2185a80 'keyword' 'const char *'
|         |-IntegerLiteral 0x5647d21aee48 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5647d21aef20 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5647d21aef40 <col:54> 'Vector<T>' lvalue ParmVar 0x5647d2185bd0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5647d2186358 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5647d2185df0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2185e68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d21862b8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5647d2185f28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2185fa8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5647d2186020 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2186170 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5647d21af1a8 <col:76, line:623:5>
|     |-CallExpr 0x5647d21af128 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5647d21aefc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5647d21af008 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5647d21af018 <col:34> 'const char *' lvalue ParmVar 0x5647d2185f28 'keyword' 'const char *'
|     | |-BinaryOperator 0x5647d21af0c8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5647d21af078 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5647d21af038 <col:43> 'int' lvalue ParmVar 0x5647d2185fa8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5647d21af0b0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5647d21af090 <col:51> 'const int' lvalue Var 0x5647d21781b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5647d21af0e8 <col:63> 'P' lvalue ParmVar 0x5647d2186020 'parser' 'P'
|     | `-DeclRefExpr 0x5647d21af108 <col:71> 'Vector<T>' lvalue ParmVar 0x5647d2186170 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5647d21af198 <line:622:9, col:17>
|       `-UnaryOperator 0x5647d21af180 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21af170 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d2186898 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5647d21863d0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d2186448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d21867f8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5647d2186508 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2186588 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5647d21866d0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5647d21af410 <col:66, line:627:5>
|     `-ReturnStmt 0x5647d21af400 <line:626:9, col:59>
|       `-CallExpr 0x5647d21af3c0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5647d21af1d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5647d21af248 <col:25> 'const char *' lvalue ParmVar 0x5647d2186508 'keyword' 'const char *'
|         |-DeclRefExpr 0x5647d21af268 <col:34> 'int' lvalue ParmVar 0x5647d2186588 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5647d21af380 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5647d21af3a0 <col:58> 'Vector<T>' lvalue ParmVar 0x5647d21866d0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5647d2186928 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5647d21af490 <col:25, line:633:5>
|   `-ReturnStmt 0x5647d21af480 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5647d21af468 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5647d21af438 <col:16> 'const bool' lvalue ->_status 0x5647d2192318
|         `-CXXThisExpr 0x5647d21af428 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5647d2186aa8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5647d21869e0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5647d21af578 <col:27, line:639:5>
|   |-BinaryOperator 0x5647d21af520 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5647d21af4a8 <col:9> 'bool' lvalue ParmVar 0x5647d21869e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5647d21af508 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5647d21af4d8 <col:13> 'bool' lvalue ->_status 0x5647d2192318
|   |     `-CXXThisExpr 0x5647d21af4c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5647d21af568 <line:638:9, col:17>
|     `-UnaryOperator 0x5647d21af550 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21af540 <col:17> 'Args *' this
|-CXXMethodDecl 0x5647d2186c28 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5647d2186b68 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5647d21af668 <col:39, line:644:5>
|   |-BinaryOperator 0x5647d21af610 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5647d21af598 <col:9> 'bool' lvalue ParmVar 0x5647d2186b68 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5647d21af5f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5647d21af5c8 <col:13> 'const bool' lvalue ->_status 0x5647d2192318
|   |     `-CXXThisExpr 0x5647d21af5b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5647d21af658 <line:643:9, col:17>
|     `-UnaryOperator 0x5647d21af640 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21af630 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5647d2186cf0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5647d21af710 <col:30, line:651:5>
|   `-ReturnStmt 0x5647d21af700 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5647d21af6e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5647d21af6b8 <col:16> 'bool' lvalue ->_read_status 0x5647d216d4e0
|         `-ImplicitCastExpr 0x5647d21af698 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5647d21af688 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5647d2186e38 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5647d2186da8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5647d21af818 <col:32, line:658:5>
|   |-BinaryOperator 0x5647d21af7c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5647d21af728 <col:9> 'bool' lvalue ParmVar 0x5647d2186da8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5647d21af7a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5647d21af778 <col:13> 'bool' lvalue ->_read_status 0x5647d216d4e0
|   |     `-ImplicitCastExpr 0x5647d21af758 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5647d21af748 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5647d21af808 <line:657:9, col:17>
|     `-UnaryOperator 0x5647d21af7f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21af7e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5647d2186f88 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5647d2186ef8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5647d21af928 <col:44, line:663:5>
|   |-BinaryOperator 0x5647d21af8d0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5647d21af838 <col:9> 'bool' lvalue ParmVar 0x5647d2186ef8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5647d21af8b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5647d21af888 <col:13> 'bool' lvalue ->_read_status 0x5647d216d4e0
|   |     `-ImplicitCastExpr 0x5647d21af868 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5647d21af858 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5647d21af918 <line:662:9, col:17>
|     `-UnaryOperator 0x5647d21af900 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d21af8f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5647d2187050 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5647d2187118 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5647d21871e0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5647d21872a8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5647d21875b8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5647d2187348 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d2187518 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5647d2187428 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5647d21afce0 <col:19, line:706:5>
|     `-IfStmt 0x5647d21afcb8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5647d21afa28 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5647d21afbe8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5647d21afbb8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5647d21afb78 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5647d21afa80 <col:42> '<bound member function type>' ->simple_slot 0x5647d21aa760
|       |     | `-CXXThisExpr 0x5647d21afa70 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5647d21afb18 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5647d21afad0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5647d1f06a78
|       |     | `-DeclRefExpr 0x5647d21afab0 <col:55> 'T' lvalue ParmVar 0x5647d2187428 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5647d21afb58 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5647d21afca8 <line:705:13, col:34>
|         `-CallExpr 0x5647d21afc80 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5647d21afc08 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5647d21afc60 <col:33> 'T' lvalue ParmVar 0x5647d2187428 'x' 'T &'
|-FunctionTemplateDecl 0x5647d218d438 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5647d2187618 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d218d398 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5647d21876f8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5647d21b00c0 <col:31, line:717:5>
|     |-DeclStmt 0x5647d21afe20 <line:713:9, col:23>
|     | `-VarDecl 0x5647d21afd08 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5647d21afdf8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5647d21afd80 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5647d21afdd8 <col:21> 'T' lvalue ParmVar 0x5647d21876f8 'x' 'T &'
|     |-IfStmt 0x5647d21b0070 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5647d21aff18 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5647d21b0050 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5647d21afff0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5647d21aff80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|     |   | `-DeclRefExpr 0x5647d21aff60 <col:14> 'T *' lvalue Var 0x5647d21afd08 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5647d21b0030 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5647d21b00a8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5647d21b0088 <col:16> 'T *' lvalue Var 0x5647d21afd08 's' 'T *'
|-FunctionTemplateDecl 0x5647d218d848 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5647d218d498 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d218d518 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5647d218d7a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5647d218d5f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5647d218d698 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5647d21b03d0 <col:37, line:726:5>
|     |-IfStmt 0x5647d21b0360 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5647d21b0380 <line:723:13, col:26>
|     | | `-VarDecl 0x5647d21b0128 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5647d21b0218 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5647d21b01a0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5647d21b01f8 <col:25> 'T' lvalue ParmVar 0x5647d218d5f8 'x' 'T &'
|     | |-DeclRefExpr 0x5647d21b0240 <col:16> 'T *' lvalue Var 0x5647d21b0128 's' 'T *'
|     | `-BinaryOperator 0x5647d21b0340 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5647d21b02f0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5647d21b0280 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|     |   | `-DeclRefExpr 0x5647d21b0260 <col:14> 'T *' lvalue Var 0x5647d21b0128 's' 'T *'
|     |   `-DeclRefExpr 0x5647d21b0320 <col:18> 'const V' lvalue ParmVar 0x5647d218d698 'value' 'const V &'
|     `-ReturnStmt 0x5647d21b03c0 <line:725:9, col:17>
|       `-UnaryOperator 0x5647d21b03a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5647d21b0398 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5647d218dc48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5647d218d8b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5647d218dba8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5647d218d960 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218d9e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218da88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5647d21b11f0 <col:65, line:737:5>
|     |-DeclStmt 0x5647d21b0468 <line:732:9, col:26>
|     | `-VarDecl 0x5647d21b0400 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5647d21b11b8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5647d21b11d8 <line:733:13, col:58>
|       | `-VarDecl 0x5647d21b0490 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5647d21b0670 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5647d21b0640 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5647d21b0628 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5647d21b0608 <col:26, col:58> 'String' (CXXTemporary 0x5647d21b0608)
|       |           `-CXXMemberCallExpr 0x5647d21b0598 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5647d21b0508 <col:26> '<bound member function type>' ->find 0x5647d21a9d78
|       |             | `-CXXThisExpr 0x5647d21b04f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5647d21b05d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b0538 <col:31> 'const char *' lvalue ParmVar 0x5647d218d960 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5647d21b05e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b0558 <col:40> 'int' lvalue ParmVar 0x5647d218d9e0 'flags' 'int'
|       |             `-DeclRefExpr 0x5647d21b0578 <col:47> 'Args::Slot *' lvalue Var 0x5647d21b0400 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5647d21b0728 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5647d21b0710 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5647d21b06f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5647d21b06c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |       `-ImplicitCastExpr 0x5647d21b06a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5647d21b0688 <col:20> 'String' lvalue Var 0x5647d21b0490 'str' 'String'
|       `-CompoundStmt 0x5647d21b1198 <col:61, line:736:9>
|         |-DeclStmt 0x5647d21b0be0 <line:734:13, col:76>
|         | `-VarDecl 0x5647d21b0778 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5647d21b0bb0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5647d21b0b20 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5647d21b0b68 <col:60> 'T' lvalue ParmVar 0x5647d218da88 'variable' 'T &'
|         |     `-UnaryOperator 0x5647d21b0b98 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5647d21b0b88 <col:71> 'Args *' this
|         `-CallExpr 0x5647d21b1168 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5647d21b0c08 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|           | `-CXXThisExpr 0x5647d21b0bf8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5647d21b1128 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5647d21b0c38 <col:23> 'T *' lvalue Var 0x5647d21b0778 's' 'T *'
|           | `-CallExpr 0x5647d21b10e8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5647d21b0ec0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5647d21b0fc0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5647d21b0fe0 <col:86> 'String' lvalue Var 0x5647d21b0490 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5647d21b1090 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5647d21b1020 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|           |   | `-DeclRefExpr 0x5647d21b1000 <col:92> 'T *' lvalue Var 0x5647d21b0778 's' 'T *'
|           |   `-UnaryOperator 0x5647d21b10d0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5647d21b10c0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5647d21b1148 <col:103> 'Args::Slot *' lvalue Var 0x5647d21b0400 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218e198 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5647d218dcb8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d218dd38 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5647d218e0f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5647d218ddf8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218de78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218df18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5647d218dfb8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5647d21b4a80 <col:88, line:745:5>
|     |-DeclStmt 0x5647d21b1288 <line:741:9, col:26>
|     | `-VarDecl 0x5647d21b1220 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5647d21b14a8 <line:742:9, col:55>
|     | `-VarDecl 0x5647d21b12b0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5647d21b1490 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5647d21b1460 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5647d21b1448 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5647d21b1428 <col:22, col:54> 'String' (CXXTemporary 0x5647d21b1428)
|     |           `-CXXMemberCallExpr 0x5647d21b13b8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5647d21b1328 <col:22> '<bound member function type>' ->find 0x5647d21a9d78
|     |             | `-CXXThisExpr 0x5647d21b1318 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5647d21b13f0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5647d21b1358 <col:27> 'const char *' lvalue ParmVar 0x5647d218ddf8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5647d21b1408 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5647d21b1378 <col:36> 'int' lvalue ParmVar 0x5647d218de78 'flags' 'int'
|     |             `-DeclRefExpr 0x5647d21b1398 <col:43> 'Args::Slot *' lvalue Var 0x5647d21b1220 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5647d21b4270 <line:743:9, col:72>
|     | `-VarDecl 0x5647d21b14f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5647d21b4240 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5647d21b41b0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5647d21b41f8 <col:56> 'T' lvalue ParmVar 0x5647d218df18 'variable' 'T &'
|     |     `-UnaryOperator 0x5647d21b4228 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5647d21b4218 <col:67> 'Args *' this
|     `-CallExpr 0x5647d21b4a50 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5647d21b4298 <col:9> '<bound member function type>' ->postparse 0x5647d21a9f88
|       | `-CXXThisExpr 0x5647d21b4288 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5647d21b4a10 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5647d21b42c8 <col:19> 'T *' lvalue Var 0x5647d21b14f8 's' 'T *'
|       | `-ParenExpr 0x5647d21b49f0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5647d21b49c0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5647d21b49a8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5647d21b4990 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5647d21b4970 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5647d21b4940 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |     |       `-ImplicitCastExpr 0x5647d21b4928 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5647d21b42e8 <col:25> 'String' lvalue Var 0x5647d21b12b0 'str' 'String'
|       |     |-CallExpr 0x5647d21b4798 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5647d21b4570 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5647d21b4670 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5647d21b4690 <col:89> 'String' lvalue Var 0x5647d21b12b0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5647d21b4740 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5647d21b46d0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|       |     | | `-DeclRefExpr 0x5647d21b46b0 <col:95> 'T *' lvalue Var 0x5647d21b14f8 's' 'T *'
|       |     | `-UnaryOperator 0x5647d21b4780 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5647d21b4770 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5647d21b4908 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5647d21b48e8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5647d21b48b8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5647d21b4868 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5647d21b47f8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|       |         | | `-DeclRefExpr 0x5647d21b47d8 <col:109> 'T *' lvalue Var 0x5647d21b14f8 's' 'T *'
|       |         | `-DeclRefExpr 0x5647d21b4898 <col:113> 'const V' lvalue ParmVar 0x5647d218dfb8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5647d21b48d8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5647d21b4a30 <col:128> 'Args::Slot *' lvalue Var 0x5647d21b1220 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218e6c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5647d218e210 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d218e288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d218e628 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5647d218e348 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218e3c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218e440 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5647d218e4e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5647d21b5678 <col:75, line:754:5>
|     |-DeclStmt 0x5647d21b4b28 <line:749:9, col:26>
|     | `-VarDecl 0x5647d21b4ac0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5647d21b5640 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5647d21b5660 <line:750:13, col:58>
|       | `-VarDecl 0x5647d21b4b50 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5647d21b4d30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5647d21b4d00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5647d21b4ce8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5647d21b4cc8 <col:26, col:58> 'String' (CXXTemporary 0x5647d21b4cc8)
|       |           `-CXXMemberCallExpr 0x5647d21b4c58 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5647d21b4bc8 <col:26> '<bound member function type>' ->find 0x5647d21a9d78
|       |             | `-CXXThisExpr 0x5647d21b4bb8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5647d21b4c90 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b4bf8 <col:31> 'const char *' lvalue ParmVar 0x5647d218e348 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5647d21b4ca8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b4c18 <col:40> 'int' lvalue ParmVar 0x5647d218e3c8 'flags' 'int'
|       |             `-DeclRefExpr 0x5647d21b4c38 <col:47> 'Args::Slot *' lvalue Var 0x5647d21b4ac0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5647d21b4de8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5647d21b4dd0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5647d21b4db0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5647d21b4d80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |       `-ImplicitCastExpr 0x5647d21b4d68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5647d21b4d48 <col:20> 'String' lvalue Var 0x5647d21b4b50 'str' 'String'
|       `-CompoundStmt 0x5647d21b5620 <col:61, line:753:9>
|         |-DeclStmt 0x5647d21b51c0 <line:751:13, col:63>
|         | `-VarDecl 0x5647d21b4e38 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5647d21b5190 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5647d21b5100 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5647d21b5148 <col:47> 'T' lvalue ParmVar 0x5647d218e4e8 'variable' 'T &'
|         |     `-UnaryOperator 0x5647d21b5178 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5647d21b5168 <col:58> 'Args *' this
|         `-CallExpr 0x5647d21b55f0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5647d21b51e8 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|           | `-CXXThisExpr 0x5647d21b51d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5647d21b55b0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5647d21b5218 <col:23> 'T *' lvalue Var 0x5647d21b4e38 's' 'T *'
|           | `-CallExpr 0x5647d21b5570 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5647d21b5400 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5647d21b5448 <col:56> 'P' lvalue ParmVar 0x5647d218e440 'parser' 'P'
|           |   |-DeclRefExpr 0x5647d21b5468 <col:64> 'String' lvalue Var 0x5647d21b4b50 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5647d21b5518 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5647d21b54a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|           |   | `-DeclRefExpr 0x5647d21b5488 <col:70> 'T *' lvalue Var 0x5647d21b4e38 's' 'T *'
|           |   `-UnaryOperator 0x5647d21b5558 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5647d21b5548 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5647d21b55d0 <col:81> 'Args::Slot *' lvalue Var 0x5647d21b4ac0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218ed28 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5647d218e740 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5647d218e7b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5647d218e838 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5647d218ec88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5647d218e900 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218e980 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218e9f8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5647d218ea98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5647d218eb38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5647d21b6408 <col:98, line:762:5>
|     |-DeclStmt 0x5647d21b5710 <line:758:9, col:26>
|     | `-VarDecl 0x5647d21b56a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5647d21b5930 <line:759:9, col:55>
|     | `-VarDecl 0x5647d21b5738 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5647d21b5918 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5647d21b58e8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5647d21b58d0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5647d21b58b0 <col:22, col:54> 'String' (CXXTemporary 0x5647d21b58b0)
|     |           `-CXXMemberCallExpr 0x5647d21b5840 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5647d21b57b0 <col:22> '<bound member function type>' ->find 0x5647d21a9d78
|     |             | `-CXXThisExpr 0x5647d21b57a0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5647d21b5878 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5647d21b57e0 <col:27> 'const char *' lvalue ParmVar 0x5647d218e900 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5647d21b5890 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5647d21b5800 <col:36> 'int' lvalue ParmVar 0x5647d218e980 'flags' 'int'
|     |             `-DeclRefExpr 0x5647d21b5820 <col:43> 'Args::Slot *' lvalue Var 0x5647d21b56a8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5647d21b5d50 <line:760:9, col:59>
|     | `-VarDecl 0x5647d21b5988 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5647d21b5d20 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5647d21b5c90 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5647d21b5cd8 <col:43> 'T' lvalue ParmVar 0x5647d218ea98 'variable' 'T &'
|     |     `-UnaryOperator 0x5647d21b5d08 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5647d21b5cf8 <col:54> 'Args *' this
|     `-CallExpr 0x5647d21b63d8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5647d21b5d78 <col:9> '<bound member function type>' ->postparse 0x5647d21a9f88
|       | `-CXXThisExpr 0x5647d21b5d68 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5647d21b6398 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5647d21b5da8 <col:19> 'T *' lvalue Var 0x5647d21b5988 's' 'T *'
|       | `-ParenExpr 0x5647d21b6378 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5647d21b6348 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5647d21b6330 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5647d21b6318 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5647d21b62f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5647d21b62c8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |     |       `-ImplicitCastExpr 0x5647d21b62b0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5647d21b5dc8 <col:25> 'String' lvalue Var 0x5647d21b5738 'str' 'String'
|       |     |-CallExpr 0x5647d21b6120 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5647d21b5fb0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5647d21b5ff8 <col:59> 'P' lvalue ParmVar 0x5647d218e9f8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5647d21b6018 <col:67> 'String' lvalue Var 0x5647d21b5738 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5647d21b60c8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5647d21b6058 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|       |     | | `-DeclRefExpr 0x5647d21b6038 <col:73> 'T *' lvalue Var 0x5647d21b5988 's' 'T *'
|       |     | `-UnaryOperator 0x5647d21b6108 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5647d21b60f8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5647d21b6290 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5647d21b6270 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5647d21b6240 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5647d21b61f0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5647d21b6180 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|       |         | | `-DeclRefExpr 0x5647d21b6160 <col:87> 'T *' lvalue Var 0x5647d21b5988 's' 'T *'
|       |         | `-DeclRefExpr 0x5647d21b6220 <col:91> 'const V' lvalue ParmVar 0x5647d218eb38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5647d21b6260 <col:98> 'bool' true
|       `-DeclRefExpr 0x5647d21b63b8 <col:106> 'Args::Slot *' lvalue Var 0x5647d21b56a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218f398 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5647d218eda8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d218ee28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5647d218eea8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5647d218f2f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5647d218ef70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218eff0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218f068 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5647d218f108 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5647d218f1a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5647d21b73e8 <col:60, line:773:5>
|     |-DeclStmt 0x5647d21b64b0 <line:767:9, col:26>
|     | `-VarDecl 0x5647d21b6448 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5647d21b73b0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5647d21b73d0 <line:768:13, col:58>
|       | `-VarDecl 0x5647d21b64d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5647d21b66b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5647d21b6688 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5647d21b6670 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5647d21b6650 <col:26, col:58> 'String' (CXXTemporary 0x5647d21b6650)
|       |           `-CXXMemberCallExpr 0x5647d21b65e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5647d21b6550 <col:26> '<bound member function type>' ->find 0x5647d21a9d78
|       |             | `-CXXThisExpr 0x5647d21b6540 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5647d21b6618 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b6580 <col:31> 'const char *' lvalue ParmVar 0x5647d218ef70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5647d21b6630 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b65a0 <col:40> 'int' lvalue ParmVar 0x5647d218eff0 'flags' 'int'
|       |             `-DeclRefExpr 0x5647d21b65c0 <col:47> 'Args::Slot *' lvalue Var 0x5647d21b6448 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5647d21b6770 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5647d21b6758 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5647d21b6738 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5647d21b6708 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |       `-ImplicitCastExpr 0x5647d21b66f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5647d21b66d0 <col:20> 'String' lvalue Var 0x5647d21b64d8 'str' 'String'
|       `-CompoundStmt 0x5647d21b7388 <col:61, line:772:9>
|         |-DeclStmt 0x5647d21b6ab0 <line:769:13, col:66>
|         | `-VarDecl 0x5647d21b67c8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5647d21b6a80 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5647d21b69f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5647d21b6a38 <col:49> 'T1' lvalue ParmVar 0x5647d218f108 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5647d21b6a68 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5647d21b6a58 <col:61> 'Args *' this
|         |-DeclStmt 0x5647d21b6e20 <line:770:13, col:66>
|         | `-VarDecl 0x5647d21b6b38 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5647d21b6df0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5647d21b6d60 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5647d21b6da8 <col:49> 'T2' lvalue ParmVar 0x5647d218f1a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5647d21b6dd8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5647d21b6dc8 <col:61> 'Args *' this
|         `-CallExpr 0x5647d21b7358 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5647d21b6e48 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|           | `-CXXThisExpr 0x5647d21b6e38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5647d21b7318 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5647d21b6eb8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5647d21b6e78 <col:23> 'T1 *' lvalue Var 0x5647d21b67c8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5647d21b6e98 <col:29> 'T2 *' lvalue Var 0x5647d21b6b38 's2' 'T2 *'
|           | `-CallExpr 0x5647d21b72d0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5647d21b70a0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5647d21b70e8 <col:63> 'P' lvalue ParmVar 0x5647d218f068 'parser' 'P'
|           |   |-DeclRefExpr 0x5647d21b7108 <col:71> 'String' lvalue Var 0x5647d21b64d8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5647d21b71b8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5647d21b7148 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|           |   | `-DeclRefExpr 0x5647d21b7128 <col:77> 'T1 *' lvalue Var 0x5647d21b67c8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5647d21b7278 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5647d21b7208 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|           |   | `-DeclRefExpr 0x5647d21b71e8 <col:82> 'T2 *' lvalue Var 0x5647d21b6b38 's2' 'T2 *'
|           |   `-UnaryOperator 0x5647d21b72b8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5647d21b72a8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5647d21b7338 <col:94> 'Args::Slot *' lvalue Var 0x5647d21b6448 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218f788 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5647d218f418 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d218f6e8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5647d218f4d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218f550 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218f5c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5647d21b7900 <col:67, line:780:5>
|     |-DeclStmt 0x5647d21b7480 <line:777:9, col:26>
|     | `-VarDecl 0x5647d21b7418 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5647d21b78c8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5647d21b78e8 <line:778:13, col:58>
|       | `-VarDecl 0x5647d21b74a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5647d21b7688 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5647d21b7658 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5647d21b7640 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5647d21b7620 <col:26, col:58> 'String' (CXXTemporary 0x5647d21b7620)
|       |           `-CXXMemberCallExpr 0x5647d21b75b0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5647d21b7520 <col:26> '<bound member function type>' ->find 0x5647d21a9d78
|       |             | `-CXXThisExpr 0x5647d21b7510 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5647d21b75e8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b7550 <col:31> 'const char *' lvalue ParmVar 0x5647d218f4d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5647d21b7600 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5647d21b7570 <col:40> 'int' lvalue ParmVar 0x5647d218f550 'flags' 'int'
|       |             `-DeclRefExpr 0x5647d21b7590 <col:47> 'Args::Slot *' lvalue Var 0x5647d21b7418 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5647d21b7740 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5647d21b7728 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5647d21b7708 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5647d21b76d8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|       |       `-ImplicitCastExpr 0x5647d21b76c0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5647d21b76a0 <col:20> 'String' lvalue Var 0x5647d21b74a8 'str' 'String'
|       `-CallExpr 0x5647d21b7898 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5647d21b7768 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|         | `-CXXThisExpr 0x5647d21b7758 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5647d21b7848 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5647d21b77b8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5647d21b7798 <col:23> 'P' lvalue ParmVar 0x5647d218f5c8 'parser' 'P'
|         | |-DeclRefExpr 0x5647d21b7800 <col:36> 'String' lvalue Var 0x5647d21b74a8 'str' 'String'
|         | `-UnaryOperator 0x5647d21b7830 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5647d21b7820 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5647d21b7878 <col:49> 'Args::Slot *' lvalue Var 0x5647d21b7418 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5647d218fb28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5647d218f7f8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5647d218fa88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5647d218f8b0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218f930 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218f9a8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5647d21b8270 <col:71, line:792:5>
|     |-DeclStmt 0x5647d21b7998 <line:784:9, col:26>
|     | `-VarDecl 0x5647d21b7930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5647d21b7a68 <line:785:9, col:29>
|     | `-VarDecl 0x5647d21b79c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5647d21b7a50 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5647d21b7a30 <col:28> 'int' 1
|     |-WhileStmt 0x5647d21b8120 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5647d21b8140 <line:786:16, col:61>
|     | | `-VarDecl 0x5647d21b7a90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5647d21b7c70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5647d21b7c40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5647d21b7c28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5647d21b7c08 <col:29, col:61> 'String' (CXXTemporary 0x5647d21b7c08)
|     | |           `-CXXMemberCallExpr 0x5647d21b7b98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5647d21b7b08 <col:29> '<bound member function type>' ->find 0x5647d21a9d78
|     | |             | `-CXXThisExpr 0x5647d21b7af8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5647d21b7bd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b7b38 <col:34> 'const char *' lvalue ParmVar 0x5647d218f8b0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5647d21b7be8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b7b58 <col:43> 'int' lvalue ParmVar 0x5647d218f930 'flags' 'int'
|     | |             `-DeclRefExpr 0x5647d21b7b78 <col:50> 'Args::Slot *' lvalue Var 0x5647d21b7930 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5647d21b7d28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5647d21b7d10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5647d21b7cf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5647d21b7cc0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|     | |       `-ImplicitCastExpr 0x5647d21b7ca8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5647d21b7c88 <col:23> 'String' lvalue Var 0x5647d21b7a90 'str' 'String'
|     | `-CompoundStmt 0x5647d21b80f8 <col:64, line:790:9>
|     |   |-CallExpr 0x5647d21b7e80 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5647d21b7d50 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|     |   | | `-CXXThisExpr 0x5647d21b7d40 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5647d21b7e30 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5647d21b7da0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5647d21b7d80 <col:23> 'P' lvalue ParmVar 0x5647d218f9a8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5647d21b7de8 <col:36> 'String' lvalue Var 0x5647d21b7a90 'str' 'String'
|     |   | | `-UnaryOperator 0x5647d21b7e18 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5647d21b7e08 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5647d21b7e60 <col:49> 'Args::Slot *' lvalue Var 0x5647d21b7930 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5647d21b8018 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5647d21b7eb0 <col:13> 'int' lvalue Var 0x5647d21b79c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5647d21b8000 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5647d21b7fe0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5647d21b7f48 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5647d21b7f28 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5647d21b7f10 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5647d21b7ed0 <col:28> 'int' lvalue Var 0x5647d21b79c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5647d21b7ef0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5647d21b7fc8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5647d21b7f98 <col:49> 'bool' lvalue ->_read_status 0x5647d216d4e0
|     |   |         `-ImplicitCastExpr 0x5647d21b7f78 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5647d21b7f68 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5647d21b80c8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5647d21b8038 <col:13> 'int' lvalue ParmVar 0x5647d218f930 'flags' 'int'
|     |     `-UnaryOperator 0x5647d21b80b0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5647d21b8098 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5647d21b8078 <col:23> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5647d21b8250 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5647d21b8188 <col:9> 'bool' lvalue ->_read_status 0x5647d216d4e0
|       | `-ImplicitCastExpr 0x5647d21b8168 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5647d21b8158 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5647d21b8230 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5647d21b8210 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5647d21b81f8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5647d21b81b8 <col:25> 'int' lvalue Var 0x5647d21b79c8 'read_status' 'int'
|           `-IntegerLiteral 0x5647d21b81d8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5647d2190008 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5647d218fb98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d218fc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d218ff68 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5647d218fcd8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d218fd58 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5647d218fdd0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5647d218fe78 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5647d21b9200 <col:84, line:805:5>
|     |-DeclStmt 0x5647d21b8318 <line:796:9, col:26>
|     | `-VarDecl 0x5647d21b82b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5647d21b83e8 <line:797:9, col:29>
|     | `-VarDecl 0x5647d21b8348 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5647d21b83d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5647d21b83b0 <col:28> 'int' 1
|     |-DeclStmt 0x5647d21b8720 <line:798:9, col:71>
|     | `-VarDecl 0x5647d21b8438 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5647d21b86f0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5647d21b8660 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5647d21b86a8 <col:55> 'T' lvalue ParmVar 0x5647d218fe78 'variable' 'T &'
|     |     `-UnaryOperator 0x5647d21b86d8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5647d21b86c8 <col:66> 'Args *' this
|     |-WhileStmt 0x5647d21b90b0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5647d21b90d0 <line:799:16, col:61>
|     | | `-VarDecl 0x5647d21b8748 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5647d21b8928 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5647d21b88f8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5647d21b88e0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5647d21b88c0 <col:29, col:61> 'String' (CXXTemporary 0x5647d21b88c0)
|     | |           `-CXXMemberCallExpr 0x5647d21b8850 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5647d21b87c0 <col:29> '<bound member function type>' ->find 0x5647d21a9d78
|     | |             | `-CXXThisExpr 0x5647d21b87b0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5647d21b8888 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b87f0 <col:34> 'const char *' lvalue ParmVar 0x5647d218fcd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5647d21b88a0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b8810 <col:43> 'int' lvalue ParmVar 0x5647d218fd58 'flags' 'int'
|     | |             `-DeclRefExpr 0x5647d21b8830 <col:50> 'Args::Slot *' lvalue Var 0x5647d21b82b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5647d21b89e0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5647d21b89c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5647d21b89a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5647d21b8978 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|     | |       `-ImplicitCastExpr 0x5647d21b8960 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5647d21b8940 <col:23> 'String' lvalue Var 0x5647d21b8748 'str' 'String'
|     | `-CompoundStmt 0x5647d21b9088 <col:64, line:803:9>
|     |   |-CallExpr 0x5647d21b8e10 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5647d21b8a08 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|     |   | | `-CXXThisExpr 0x5647d21b89f8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5647d21b8dd0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5647d21b8a38 <col:23> 'T *' lvalue Var 0x5647d21b8438 's' 'T *'
|     |   | | `-CallExpr 0x5647d21b8d90 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5647d21b8c20 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5647d21b8c68 <col:56> 'P' lvalue ParmVar 0x5647d218fdd0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5647d21b8c88 <col:64> 'String' lvalue Var 0x5647d21b8748 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5647d21b8d38 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5647d21b8cc8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|     |   | |   | `-DeclRefExpr 0x5647d21b8ca8 <col:70> 'T *' lvalue Var 0x5647d21b8438 's' 'T *'
|     |   | |   `-UnaryOperator 0x5647d21b8d78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5647d21b8d68 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5647d21b8df0 <col:81> 'Args::Slot *' lvalue Var 0x5647d21b82b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5647d21b8fa8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5647d21b8e40 <col:13> 'int' lvalue Var 0x5647d21b8348 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5647d21b8f90 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5647d21b8f70 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5647d21b8ed8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5647d21b8eb8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5647d21b8ea0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5647d21b8e60 <col:28> 'int' lvalue Var 0x5647d21b8348 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5647d21b8e80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5647d21b8f58 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5647d21b8f28 <col:49> 'bool' lvalue ->_read_status 0x5647d216d4e0
|     |   |         `-ImplicitCastExpr 0x5647d21b8f08 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5647d21b8ef8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5647d21b9058 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5647d21b8fc8 <col:13> 'int' lvalue ParmVar 0x5647d218fd58 'flags' 'int'
|     |     `-UnaryOperator 0x5647d21b9040 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5647d21b9028 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5647d21b9008 <col:23> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5647d21b91e0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5647d21b9118 <col:9> 'bool' lvalue ->_read_status 0x5647d216d4e0
|       | `-ImplicitCastExpr 0x5647d21b90f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5647d21b90e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5647d21b91c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5647d21b91a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5647d21b9188 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5647d21b9148 <col:25> 'int' lvalue Var 0x5647d21b8348 'read_status' 'int'
|           `-IntegerLiteral 0x5647d21b9168 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5647d21905e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5647d2190080 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5647d21900f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5647d2190548 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5647d21901b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5647d2190238 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5647d21902b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5647d2190400 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5647d21ba008 <col:87, line:821:5>
|     |-DeclStmt 0x5647d21b92b0 <line:809:9, col:26>
|     | `-VarDecl 0x5647d21b9248 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5647d21b9380 <line:810:9, col:29>
|     | `-VarDecl 0x5647d21b92e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5647d21b9368 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5647d21b9348 <col:28> 'int' 1
|     |-DeclStmt 0x5647d21b95c8 <line:811:9, col:38>
|     | `-VarDecl 0x5647d21b94b0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5647d21b95a0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5647d21b9528 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5647d21b9580 <col:29> 'Vector<T>' lvalue ParmVar 0x5647d2190400 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5647d21b9eb8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5647d21b9ed8 <line:812:16, col:61>
|     | | `-VarDecl 0x5647d21b95f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5647d21b97d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5647d21b97a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5647d21b9788 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5647d21b9768 <col:29, col:61> 'String' (CXXTemporary 0x5647d21b9768)
|     | |           `-CXXMemberCallExpr 0x5647d21b96f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5647d21b9668 <col:29> '<bound member function type>' ->find 0x5647d21a9d78
|     | |             | `-CXXThisExpr 0x5647d21b9658 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5647d21b9730 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b9698 <col:34> 'const char *' lvalue ParmVar 0x5647d21901b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5647d21b9748 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5647d21b96b8 <col:43> 'int' lvalue ParmVar 0x5647d2190238 'flags' 'int'
|     | |             `-DeclRefExpr 0x5647d21b96d8 <col:50> 'Args::Slot *' lvalue Var 0x5647d21b9248 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5647d21b9888 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5647d21b9870 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5647d21b9850 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5647d21b9820 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5647d1ec9a48
|     | |       `-ImplicitCastExpr 0x5647d21b9808 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5647d21b97e8 <col:23> 'String' lvalue Var 0x5647d21b95f0 'str' 'String'
|     | `-CompoundStmt 0x5647d21b9e80 <col:64, line:819:9>
|     |   |-DeclStmt 0x5647d21b9948 <line:813:13, col:23>
|     |   | `-VarDecl 0x5647d21b98b0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5647d21b9928 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5647d21b9ac8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5647d21b9970 <col:13> '<bound member function type>' ->postparse 0x5647d21a9f88
|     |   | | `-CXXThisExpr 0x5647d21b9960 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5647d21b9a70 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5647d21b99c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5647d21b99a0 <col:23> 'P' lvalue ParmVar 0x5647d21902b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5647d21b9a08 <col:36> 'String' lvalue Var 0x5647d21b95f0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5647d21b9a28 <col:41> 'T' lvalue Var 0x5647d21b98b0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5647d21b9a58 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5647d21b9a48 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5647d21b9aa8 <col:53> 'Args::Slot *' lvalue Var 0x5647d21b9248 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5647d21b9c20 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5647d21b9b58 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5647d21b9b28 <col:17> 'bool' lvalue ->_read_status 0x5647d216d4e0
|     |   | |   `-ImplicitCastExpr 0x5647d21b9b08 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5647d21b9af8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5647d21b9bf8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5647d21b9b90 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5647d21b9b70 <col:17> 'Vector<T> *' lvalue Var 0x5647d21b94b0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5647d21b9bd8 <col:30> 'T' lvalue Var 0x5647d21b98b0 'sx' 'T'
|     |   |-BinaryOperator 0x5647d21b9da0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5647d21b9c38 <col:13> 'int' lvalue Var 0x5647d21b92e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5647d21b9d88 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5647d21b9d68 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5647d21b9cd0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5647d21b9cb0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5647d21b9c98 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5647d21b9c58 <col:28> 'int' lvalue Var 0x5647d21b92e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5647d21b9c78 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5647d21b9d50 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5647d21b9d20 <col:49> 'bool' lvalue ->_read_status 0x5647d216d4e0
|     |   |         `-ImplicitCastExpr 0x5647d21b9d00 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5647d21b9cf0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5647d21b9e50 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5647d21b9dc0 <col:13> 'int' lvalue ParmVar 0x5647d2190238 'flags' 'int'
|     |     `-UnaryOperator 0x5647d21b9e38 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5647d21b9e20 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5647d21b9e00 <col:23> 'const int' lvalue Var 0x5647d2177ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5647d21b9fe8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5647d21b9f20 <col:9> 'bool' lvalue ->_read_status 0x5647d216d4e0
|       | `-ImplicitCastExpr 0x5647d21b9f00 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5647d21b9ef0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5647d21b9fc8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5647d21b9fa8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5647d21b9f90 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5647d21b9f50 <col:25> 'int' lvalue Var 0x5647d21b92e0 'read_status' 'int'
|           `-IntegerLiteral 0x5647d21b9f70 <col:40> 'int' 1
|-AccessSpecDecl 0x5647d2190660 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5647d2190688 prev 0x5647d2176200 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5647d2190780 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5647d2190870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5647d21ba040 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5647d2190960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5647d21ba050 <col:25, line:830:9>
| |-CXXMethodDecl 0x5647d2190a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5647d2190b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5647d2190bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5647d2190bb8
| | `-ParmVarDecl 0x5647d2190cc8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5647d2191488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5647d2191488
|   `-ParmVarDecl 0x5647d2191598 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5647d2190d38 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5647d2190e98 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5647d2191090 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5647d2190f40 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5647d2190fb8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5647d21ba230 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5647d2191348 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5647d21ba0a0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5647d21ba060 <col:20> 'void *' lvalue ParmVar 0x5647d2190f40 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5647d21913b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5647d21ba128 <col:32, col:45> 'char *' array Function 0x5647d1cec6b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5647d21ba110 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5647d21ba0e0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5647d2190fb8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5647d2191410 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5647d21ba1f0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5647d21ba1b0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5647d2190fb8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5647d21ba2b0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5647d2191190 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5647d2190960 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5647d21ba338 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5647d21ba318 <line:840:13, col:22> 'void' array Function 0x5647d1ceca18 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5647d21ba300 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5647d21ba2d0 <col:22> 'char *' lvalue ->_slot 0x5647d21913b0
| |         `-CXXThisExpr 0x5647d21ba2c0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5647d2191290 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5647d2190a60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5647d21ba528 <col:22, line:844:9>
| |   `-CallExpr 0x5647d21ba490 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5647d21ba478 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5647d21ba458 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5647d1df8498 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5647d21ba4c8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5647d21ba3a8 <col:20> 'void *' lvalue ->_ptr 0x5647d2191348
| |     |   `-CXXThisExpr 0x5647d21ba398 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5647d21ba4f8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5647d21ba4e0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5647d21ba3e8 <col:26> 'char *' lvalue ->_slot 0x5647d21913b0
| |     |     `-CXXThisExpr 0x5647d21ba3d8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5647d21ba510 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5647d21ba428 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5647d2191410
| |         `-CXXThisExpr 0x5647d21ba418 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5647d2191348 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5647d21913b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5647d2191410 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5647d2191608 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5647d2191608
| | `-ParmVarDecl 0x5647d2191718 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5647d21917b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5647d21917b8
|   `-ParmVarDecl 0x5647d21918c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5647d2191a68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5647d2191938 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5647d21919d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5647d2191d00 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5647d2191ef8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5647d2191dc8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5647d2192078 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5647d21ba560 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5647d21ba540 <col:20> 'T *' lvalue ParmVar 0x5647d2191dc8 'ptr' 'T *'
|   | `-CompoundStmt 0x5647d21ba5b0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5647d2191fc8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5647d2190a60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5647d21ba760 <col:22, line:857:9>
|   |   `-CallExpr 0x5647d21ba730 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5647d21ba5c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5647d1eb0bc8 0x5647d1e5aef8
|   |     |-CXXOperatorCallExpr 0x5647d21ba6c0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5647d21ba650 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5647d20bdb78 0x5647d20bd798 0x5647d20bd3c8 0x5647d20bcfe8 0x5647d20bcc08 0x5647d20bc838
|   |     | `-MemberExpr 0x5647d21ba620 <col:29> 'T *' lvalue ->_ptr 0x5647d2192078
|   |     |   `-CXXThisExpr 0x5647d21ba610 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5647d21ba700 <col:35> 'T' lvalue ->_slot 0x5647d21920d8
|   |       `-CXXThisExpr 0x5647d21ba6f0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5647d2192078 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5647d21920d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5647d2192140 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5647d2192240 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5647d2192290 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d2192220 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5647d2192200 <col:31> 'int' 48
|-FieldDecl 0x5647d21922b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5647d2192318 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5647d2192378 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5647d21924b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5647d21a8600 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5647d21a9680 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5647d21a9730 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5647d21a9958 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5647d21a9860 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5647d21a9aa8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5647d21a9a18 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5647d21a9d78 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5647d21a9b68 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5647d21a9be8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5647d21a9c90 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5647d21a9f88 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5647d21a9e40 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5647d21a9eb8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5647d21aa058 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5647d21aa1a8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5647d21aa110 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5647d21aa538 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5647d21aa268 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5647d21aa2e8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5647d21aa390 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5647d21aa448 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5647d21aa760 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5647d21aa610 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5647d21aa688 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5647d21aaa78 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5647d21aa810 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5647d21aa9d8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5647d21aa8e8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether_vlan
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_vlan_proto
        14 |   uint16_t ether_vlan_tci
        16 |   uint16_t ether_vlan_encap_proto
           | [sizeof=18, dsize=18, align=1,
           |  nvsize=18, nvalign=1]

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d1eb98f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d1eb9a08 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5647d1eb9a98 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5647d1eb9b68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5647d1eb9c50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d1eb9e68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5647d1eb9d10 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1eba018 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5647d1eb9f20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5647d1eba160 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5647d1eba0d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5647d1eba2a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5647d1eba218 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1eba3f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5647d1eba360 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1eba4b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5647d1eba600 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5647d1eba570 <col:28> col:31 'int'
|-CXXMethodDecl 0x5647d1eba6c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5647d1eba810 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5647d1eba780 <col:28> col:31 'int'
|-CXXMethodDecl 0x5647d1eba988 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5647d1eba8c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebaad0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5647d1ebaa40 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebab98 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5647d1ebad58 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5647d1ebac48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5647d1ebacc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebafa8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5647d1ebae18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d1ebae90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5647d1ebb058 <col:86> "" ""
|-CXXMethodDecl 0x5647d1ebb2c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5647d1ebb138 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5647d1ebb1b0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebb478 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5647d1ebb388 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5647d1ebb628 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5647d1ebb530 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5647d1ebb8f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5647d1ebb6e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5647d1ebb758 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5647d1ebb7d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebbbd8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5647d1ebb9c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5647d1ebba38 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d1ebbab0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5647d1ebbc90 <col:115> "" ""
|-AccessSpecDecl 0x5647d1ebbd00 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5647d1ebbd38 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d1ebd250 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5647d1ebd250
| `-ParmVarDecl 0x5647d1ebd358 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5647d1ebd3f8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ebd3f8
| `-ParmVarDecl 0x5647d1ebd508 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5647d1ef2b38 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5647d20e4930 <col:7>
|-CXXConstructorDecl 0x5647d1ef2c10 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5647d1ef2c10
| `-ParmVarDecl 0x5647d1ef2d28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5647d1ef2d98 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5647d1ef2d98
| `-ParmVarDecl 0x5647d1ef2ea8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5647d20e7330 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d20d34d8 prev 0x5647d20c86e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d20d35d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5647d20d36c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5647d20d37e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5647d20d3968 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5647d20d3ae8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5647d20d3c68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5647d20e4a98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5647d20e5308 <col:11>
|-CXXDestructorDecl 0x5647d20e4b70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5647d20e4ca8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5647d20e4ca8
| `-ParmVarDecl 0x5647d20e4db8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5647d20e4e58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5647d20e4e58
| `-ParmVarDecl 0x5647d20e4f68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5647d20e7d28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d20e7e38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5647d20e80b8 <col:11>
|   `-ReturnStmt 0x5647d20e80a8 <col:11>
|     `-UnaryOperator 0x5647d20e8090 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5647d20e8080 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5647d20e7ea8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5647d20e7ea8
  `-ParmVarDecl 0x5647d20e7fb8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d20d3cd0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d20d3de8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5647d20d3e88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5647d20d3ef0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5647d20d3f58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5647d20d3fc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5647d20d4020 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5647d20d40e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5647d20d4140 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5647d20d41a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5647d20e49a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5647d20d3e88 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5647d20e5318 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5647d20e5370 <col:12>
|-CXXConstructorDecl 0x5647d20e4fd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5647d20e4fd8
| `-ParmVarDecl 0x5647d20e50e8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5647d20e5188 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5647d20e5188
| `-ParmVarDecl 0x5647d20e5298 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5647d20e7410 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d20c1df0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5647d20c1f08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5647d20c1f98 <col:16, col:22> col:16 public
|-EnumDecl 0x5647d20c1fc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5647d20c20c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5647d20c21a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c20a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5647d20c2080 <col:21> 'int' 28
| `-EnumConstantDecl 0x5647d20c2150 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5647d20c21b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20c2130 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5647d20c2110 <col:22> 'int' 64
|-CXXMethodDecl 0x5647d20c24f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5647d20c21e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d20c2260 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5647d20c22d8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d20c2350 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c25b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c27b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5647d20c2630 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5647d20c26a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c2868 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c29c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5647d20c28d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c2a70 <col:72> warn_unused_result ""
|-TypedefDecl 0x5647d20c2dd0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5647d20c2d60 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5647d20c2d00 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5647d20c2cc0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5647d1b99320 'void'
|       |-PointerType 0x5647d1e42190 'unsigned char *'
|       | `-BuiltinType 0x5647d1b99420 'unsigned char'
|       |-TypedefType 0x5647d1c3e760 'size_t' sugar
|       | |-Typedef 0x5647d1c09b20 'size_t'
|       | `-BuiltinType 0x5647d1b99480 'unsigned long'
|       `-PointerType 0x5647d1b99b20 'void *'
|         `-BuiltinType 0x5647d1b99320 'void'
|-CXXMethodDecl 0x5647d20c3248 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5647d20c2e40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5647d20c2eb8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d20c2f50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5647d20c2fd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5647d20dd940 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5647d20dd928 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5647d20dd8f0 <col:58> 'int' 0
| |-ParmVarDecl 0x5647d20c3050 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5647d20dd968 <col:76> 'int' 0
| |-ParmVarDecl 0x5647d20c30d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5647d20dd988 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5647d20c3318 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c3398 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5647d20c3458 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5647d20c34f8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c3550 <col:30>
|-CXXMethodDecl 0x5647d20c35c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5647d20c3668 <col:20>
| `-OptimizeNoneAttr 0x5647d20c36c0 <col:30>
|-CXXMethodDecl 0x5647d20c3738 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5647d20c37d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c3888 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5647d20c3928 <col:20>
| |-OptimizeNoneAttr 0x5647d20c3980 <col:30>
| `-WarnUnusedResultAttr 0x5647d20c39a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c3a00 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5647d20c3aa0 <col:20>
| `-OptimizeNoneAttr 0x5647d20c3af8 <col:30>
|-CXXMethodDecl 0x5647d20c3b48 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5647d20c3be8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c3c40 <col:30>
|-CXXMethodDecl 0x5647d20c3c88 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5647d20c3d28 <col:20>
| `-OptimizeNoneAttr 0x5647d20c3d80 <col:30>
|-CXXMethodDecl 0x5647d20c3dc8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c3e88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c3f50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5647d20c4018 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5647d20c40d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c41f8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5647d20dda50 <col:54, line:99:5>
|   `-ReturnStmt 0x5647d20dda40 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5647d20dda28 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5647d20dd9f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5647d20d44d8
|         `-CXXThisExpr 0x5647d20dd9e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5647d20c4398 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5647d20c42a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5647d20ddb00 <col:67, line:103:5>
|   `-BinaryOperator 0x5647d20ddae0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5647d20dda78 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5647d20d44d8
|     | `-CXXThisExpr 0x5647d20dda68 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5647d20ddac8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20ddaa8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5647d20c42a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5647d20c4490 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5647d20ddb80 <col:33, line:107:5>
|   `-ReturnStmt 0x5647d20ddb70 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5647d20ddb58 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5647d20ddb28 <col:16> 'void *' lvalue ->_destructor_argument 0x5647d20d4540
|         `-CXXThisExpr 0x5647d20ddb18 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5647d20c4550 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5647d20de1b0 <col:25, line:113:5>
|   |-ParenExpr 0x5647d20ddef8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5647d20ddec8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20ddc38 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5647d20ddc10 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5647d20ddbd8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5647d20ddba8 <col:24> '<bound member function type>' ->shared 0x5647d20c35c8
|   |   |       `-ImplicitCastExpr 0x5647d20ddbf8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5647d20ddb98 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5647d20ddc98 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20ddc78 <col:42> 'int' 0
|   |   `-CallExpr 0x5647d20dde28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5647d20dde10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20dddf0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20dde68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20ddd08 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5647d20dde80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20ddd30 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20dde98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20ddd68 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5647d20ddeb0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20dddd8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20dddc0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20ddd88 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5647d20de0f8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5647d20ddf28 <col:2> 'unsigned char *' lvalue ->_head 0x5647d20d42e0
|   | | `-CXXThisExpr 0x5647d20ddf18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5647d20de0e0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5647d20de0c0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5647d20ddf68 <col:10> 'unsigned char *' lvalue ->_data 0x5647d20d4348
|   |     | `-CXXThisExpr 0x5647d20ddf58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5647d20de0a8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5647d20de088 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5647d20ddfa8 <col:18> 'unsigned char *' lvalue ->_tail 0x5647d20d43b0
|   |         | `-CXXThisExpr 0x5647d20ddf98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5647d20de070 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5647d20de050 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5647d20ddfe8 <col:26> 'unsigned char *' lvalue ->_end 0x5647d20d4418
|   |             | `-CXXThisExpr 0x5647d20ddfd8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5647d20de038 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5647d20de018 <col:33> 'int' 0
|   `-BinaryOperator 0x5647d20de190 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5647d20de128 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5647d20d44d8
|     | `-CXXThisExpr 0x5647d20de118 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5647d20de178 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5647d20de158 <col:16> 'int' 0
|-CXXMethodDecl 0x5647d20c4690 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5647d20c4600 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c4738 <col:20>
| |-OptimizeNoneAttr 0x5647d20c4790 <col:30>
| `-WarnUnusedResultAttr 0x5647d20c47b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c4888 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5647d20c47f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c4930 <col:20>
| |-OptimizeNoneAttr 0x5647d20c4988 <col:30>
| `-WarnUnusedResultAttr 0x5647d20c49b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c4ae8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5647d20c49f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c4b90 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c4c90 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x5647d20c4c00 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c4d38 <col:20>
| `-OptimizeNoneAttr 0x5647d20c4d90 <col:30>
|-CXXMethodDecl 0x5647d20c4e58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5647d20c4dc8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c4f00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c5000 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5647d20c4f70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5647d20c50a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c51a8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5647d20c5118 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c5250 <col:20>
| `-OptimizeNoneAttr 0x5647d20c52a8 <col:30>
|-CXXMethodDecl 0x5647d20c5438 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5647d20c52e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5647d20c5360 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5647d20dd9a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5647d20c54e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5647d20c56e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5647d20c5560 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5647d20c55d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20c58f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5647d20c57a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5647d20c5820 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20c5b08 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5647d20c59b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5647d20c5a38 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5647d20dd9b8 <col:39> 'int' 0
|-CXXMethodDecl 0x5647d20c5bd8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5647d20c5ca0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5647d20c5d68 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5647d20c5e28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c5ef0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5647d20c6038 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5647d20c5fa8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5647d20c6208 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5647d20c60f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5647d20c6170 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20c62d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5647d20c6398 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5647d20c6438 <col:20>
| `-OptimizeNoneAttr 0x5647d20c6490 <col:30>
|-CXXMethodDecl 0x5647d20c64e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5647d20c6580 <col:20>
| `-OptimizeNoneAttr 0x5647d20c65d8 <col:30>
|-CXXMethodDecl 0x5647d20c6628 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5647d20c66e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c67b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5647d20c6850 <col:20>
| `-OptimizeNoneAttr 0x5647d20c68a8 <col:30>
|-CXXMethodDecl 0x5647d20c69f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5647d20c68e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5647d20c6960 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20c6b48 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5647d20c6ab8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20c6c20 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5647d20c6ce0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5647d20c6d80 <col:20>
| `-OptimizeNoneAttr 0x5647d20c6dd8 <col:30>
|-CXXMethodDecl 0x5647d20c6e28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5647d20c6ec8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c6f20 <col:30>
|-CXXMethodDecl 0x5647d20c6f70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5647d20c7038 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5647d20c70d8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c7130 <col:30>
|-CXXMethodDecl 0x5647d20c7178 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5647d20c7298 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5647d20c7408 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5647d20c7348 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5647d20c74f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5647d20c7598 <col:20>
| `-OptimizeNoneAttr 0x5647d20c75f0 <col:30>
|-CXXMethodDecl 0x5647d20c7640 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5647d20c7700 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5647d20c7938 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5647d20c77b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5647d20c7828 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c79e8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c7a40 <col:30>
|-CXXMethodDecl 0x5647d20c7ae8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5647d20c7b88 <col:20>
| `-OptimizeNoneAttr 0x5647d20c7be0 <col:30>
|-CXXMethodDecl 0x5647d20c7c30 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5647d20c7cd0 <col:20>
| `-OptimizeNoneAttr 0x5647d20c7d28 <col:30>
|-CXXMethodDecl 0x5647d20c7d70 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5647d20c7e10 <col:20>
| `-OptimizeNoneAttr 0x5647d20c7e68 <col:30>
|-CXXMethodDecl 0x5647d20c7f68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5647d20c7ea0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5647d20c8010 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8068 <col:30>
|-CXXMethodDecl 0x5647d20c8228 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5647d20c80a0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5647d20c8118 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20c82d8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8330 <col:30>
|-CXXMethodDecl 0x5647d20c83d8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5647d20c84f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5647d20c8618 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5647d20c86b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5647d20c86e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5647d20c8808 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5647d20c88a8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8900 <col:30>
|-CXXMethodDecl 0x5647d20c89a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5647d20c8a48 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8aa0 <col:30>
|-AccessSpecDecl 0x5647d20c8ac8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5647d20c8af0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5647d20c8bf0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5647d20c8c40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20c8bd0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5647d20c8bb0 <col:14> 'int' 48
|-CXXMethodDecl 0x5647d20c8ca8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5647d20c8d48 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8da0 <col:30>
|-CXXMethodDecl 0x5647d20c8e18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5647d20c8eb8 <col:20>
| `-OptimizeNoneAttr 0x5647d20c8f10 <col:30>
|-CXXMethodDecl 0x5647d20c8fd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5647d20c8f48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5647d20c9178 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5647d20c9318 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5647d20c9228 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5647d20c93c0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5647d20c94c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c9870 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c94a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d20c9480 <col:9> 'int' 0
| |-EnumConstantDecl 0x5647d20c9550 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c9888 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c9530 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5647d20c9510 <col:14> 'int' 1
| |-EnumConstantDecl 0x5647d20c95e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c98a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c95c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5647d20c95a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5647d20c9670 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c98b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c9650 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5647d20c9630 <col:14> 'int' 3
| |-EnumConstantDecl 0x5647d20c9700 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c98d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c96e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5647d20c96c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5647d20c9790 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5647d20c98e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20c9770 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5647d20c9750 <col:13> 'int' 5
| `-EnumConstantDecl 0x5647d20c9820 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5647d20c9900 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20c9800 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5647d20c97e0 <col:14> 'int' 6
|-CXXMethodDecl 0x5647d20c9968 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5647d20c9a08 <col:20>
| `-OptimizeNoneAttr 0x5647d20c9a60 <col:30>
|-CXXMethodDecl 0x5647d20c9b58 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5647d20c9a98 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5647d20c9c00 <col:20>
| `-OptimizeNoneAttr 0x5647d20c9c58 <col:30>
|-CXXMethodDecl 0x5647d20c9cc8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5647d20c9df0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5647d20c9f68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5647d20c9ea0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5647d20ca030 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5647d20ca0f8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5647d20ca238 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5647d20ca1a8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5647d20ca2e0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5647d20ca3e0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5647d20ca5e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20ca3c0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d20ca3a0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5647d20ca470 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5647d20ca5f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20ca450 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5647d20ca430 <col:45> 'int' 4
| |-EnumConstantDecl 0x5647d20ca500 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5647d20ca610 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20ca4e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d20ca4c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5647d20ca590 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5647d20ca628 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20ca570 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5647d20ca550 <col:47> 'int' 16
|-CXXMethodDecl 0x5647d20ca688 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5647d20ca7f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5647d20ca738 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5647d20ca8a0 <col:20>
| `-OptimizeNoneAttr 0x5647d20ca8f8 <col:30>
|-CXXMethodDecl 0x5647d20ca948 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5647d20de2d0 <col:18, col:36>
|   `-ReturnStmt 0x5647d20de2c0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5647d20de2a8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5647d20de288 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5647d20de258 <col:27> '<bound member function type>' ->xanno 0x5647d20c89a8
|           `-CXXThisExpr 0x5647d20de248 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5647d20caa40 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5647d20de3e0 <col:30, col:48>
|   `-ReturnStmt 0x5647d20de3d0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5647d20de3b8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5647d20de398 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5647d20de368 <col:39> '<bound member function type>' ->xanno 0x5647d20c8808
|           `-CXXThisExpr 0x5647d20de358 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5647d20cab28 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5647d20de578 <col:24, col:50>
|   `-ReturnStmt 0x5647d20de568 <col:26, col:47>
|     `-UnaryOperator 0x5647d20de550 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5647d20de530 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5647d20de518 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5647d20de4c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5647d20d37e8
|         |   `-CXXMemberCallExpr 0x5647d20de4a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5647d20de478 <col:34> '<bound member function type>' ->xanno 0x5647d20c89a8
|         |       `-CXXThisExpr 0x5647d20de468 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5647d20de4f8 <col:46> 'int' 0
|-CXXMethodDecl 0x5647d20cac30 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5647d20de748 <col:36, col:62>
|   `-ReturnStmt 0x5647d20de738 <col:38, col:59>
|     `-UnaryOperator 0x5647d20de720 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5647d20de700 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5647d20de6e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5647d20de660 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5647d20d37e8
|         |   `-CXXMemberCallExpr 0x5647d20de640 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5647d20de610 <col:46> '<bound member function type>' ->xanno 0x5647d20c8808
|         |       `-CXXThisExpr 0x5647d20de600 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5647d20de690 <col:58> 'int' 0
|-CXXMethodDecl 0x5647d20cad48 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5647d20de8e0 <col:26, col:53>
|   `-ReturnStmt 0x5647d20de8d0 <col:28, col:50>
|     `-UnaryOperator 0x5647d20de8b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5647d20de898 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5647d20de880 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5647d20de830 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5647d20d3ae8
|         |   `-CXXMemberCallExpr 0x5647d20de810 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5647d20de7e0 <col:36> '<bound member function type>' ->xanno 0x5647d20c89a8
|         |       `-CXXThisExpr 0x5647d20de7d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5647d20de860 <col:49> 'int' 0
|-CXXMethodDecl 0x5647d20cae68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5647d20deab8 <col:38, col:65>
|   `-ReturnStmt 0x5647d20deaa8 <col:40, col:62>
|     `-UnaryOperator 0x5647d20dea90 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5647d20dea70 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5647d20dea58 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5647d20de9c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5647d20d3ae8
|         |   `-CXXMemberCallExpr 0x5647d20de9a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5647d20de978 <col:48> '<bound member function type>' ->xanno 0x5647d20c8808
|         |       `-CXXThisExpr 0x5647d20de968 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5647d20de9f8 <col:61> 'int' 0
|-CXXMethodDecl 0x5647d20cb018 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5647d20caf20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5647d20df188 <col:34, line:463:5>
|   |-ParenExpr 0x5647d20defd0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5647d20defa0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20dec08 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20debd8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20deb28 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20deb10 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20dead0 <col:23> 'int' lvalue ParmVar 0x5647d20caf20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20deaf0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20debb8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20deb88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20deb48 <col:33> 'int' lvalue ParmVar 0x5647d20caf20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5647d20deba0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5647d20deb68 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5647d20dec68 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20dec48 <col:56> 'int' 0
|   |   `-CallExpr 0x5647d20def00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5647d20deee8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20deec8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20def40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20ded58 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5647d20def58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20ded88 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20def70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20dedc0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5647d20def88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20deeb0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20dee98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20dee58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5647d20df178 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5647d20df160 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5647d20df140 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5647d20df110 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5647d20df0c0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5647d20d37e8
|         |   `-CXXMemberCallExpr 0x5647d20df0a0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5647d20df070 <col:9> '<bound member function type>' ->xanno 0x5647d20c8808
|         |       `-CXXThisExpr 0x5647d20df060 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5647d20df128 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5647d20df0f0 <col:21> 'int' lvalue ParmVar 0x5647d20caf20 'i' 'int'
|-CXXMethodDecl 0x5647d20cb268 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5647d20cb0d8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5647d20cb150 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5647d20df818 <col:40, line:472:5>
|   |-ParenExpr 0x5647d20df630 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5647d20df600 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20df2e0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20df2b0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20df200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20df1e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20df1a8 <col:23> 'int' lvalue ParmVar 0x5647d20cb0d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20df1c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20df290 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20df260 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20df220 <col:33> 'int' lvalue ParmVar 0x5647d20cb0d8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5647d20df278 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5647d20df240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5647d20df340 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20df320 <col:56> 'int' 0
|   |   `-CallExpr 0x5647d20df560 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5647d20df548 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20df528 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20df5a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20df3b0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5647d20df5b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20df3e0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20df5d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20df418 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5647d20df5e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20df510 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20df4f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20df4b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5647d20df7f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5647d20df7a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5647d20df770 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5647d20df720 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5647d20d37e8
|     | |   `-CXXMemberCallExpr 0x5647d20df700 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5647d20df6d0 <col:2> '<bound member function type>' ->xanno 0x5647d20c89a8
|     | |       `-CXXThisExpr 0x5647d20df6c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5647d20df788 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5647d20df750 <col:14> 'int' lvalue ParmVar 0x5647d20cb0d8 'i' 'int'
|     `-ImplicitCastExpr 0x5647d20df7e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20df7c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5647d20cb150 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5647d20cb428 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5647d20cb330 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5647d20dff98 <col:36, line:485:5>
|   |-ParenExpr 0x5647d20dfd00 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20dfcd0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20df9b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20df980 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20df890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20df878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20df838 <col:23> 'int' lvalue ParmVar 0x5647d20cb330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20df858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20df960 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20df948 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20df8b0 <col:33> 'int' lvalue ParmVar 0x5647d20cb330 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20df928 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20df910 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20df8d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20df8f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5647d20dfa10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20df9f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20dfc30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20dfc18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20dfbf8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20dfc70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20dfa80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5647d20dfc88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20dfab8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20dfca0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20dfaf0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5647d20dfcb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20dfbe0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20dfbc8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20dfb88 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5647d20dff88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5647d20dff70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5647d20dff58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20dff28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5647d20dfec8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20dfe98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20dfe10 <col:61, col:70> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20dfdf0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20dfdc0 <col:61> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20dfdb0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20dfeb0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20dfe40 <col:74> 'int' lvalue ParmVar 0x5647d20cb330 'i' 'int'
|-CXXMethodDecl 0x5647d20cb678 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5647d20cb4e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5647d20cb560 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5647d20e06e8 <col:42, line:500:5>
|   |-ParenExpr 0x5647d20e0480 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e0450 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e0130 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e0100 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e0010 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20dfff8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20dffb8 <col:23> 'int' lvalue ParmVar 0x5647d20cb4e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20dffd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e00e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e00c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e0030 <col:33> 'int' lvalue ParmVar 0x5647d20cb4e8 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e00a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e0090 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e0050 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e0070 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5647d20e0190 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e0170 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e03b0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e0398 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e0378 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e03f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e0200 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5647d20e0408 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e0238 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e0420 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e0270 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5647d20e0438 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e0360 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e0348 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e0308 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5647d20e06c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5647d20e0678 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5647d20e0648 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5647d20e05f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5647d20e05c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5647d20e0570 <col:48, col:57> 'char [48]' lvalue ->c 0x5647d20d36c0
|     |     |   `-CXXMemberCallExpr 0x5647d20e0550 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5647d20e0520 <col:48> '<bound member function type>' ->xanno 0x5647d20c89a8
|     |     |       `-CXXThisExpr 0x5647d20e0510 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5647d20e05d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5647d20e05a0 <col:61> 'int' lvalue ParmVar 0x5647d20cb4e8 'i' 'int'
|     `-ImplicitCastExpr 0x5647d20e06b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20e0690 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5647d20cb560 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5647d20cb838 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5647d20cb740 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5647d20e0e48 <col:35, line:513:5>
|   |-ParenExpr 0x5647d20e0b58 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e0b28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e0880 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e0850 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e0760 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e0748 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e0708 <col:23> 'int' lvalue ParmVar 0x5647d20cb740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e0728 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e0830 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e0818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e0780 <col:33> 'int' lvalue ParmVar 0x5647d20cb740 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e07f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e07e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e07a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e07c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5647d20e08e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e08c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e0a88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e0a70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e0a50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e0ac8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e0950 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5647d20e0ae0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e0988 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e0af8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e09c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5647d20e0b10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e0a38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e0a20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e09e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5647d20e0e38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5647d20e0e20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5647d20e0e08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20e0dd8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5647d20e0d50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20e0d20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20e0cd0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20e0cb0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20e0c80 <col:60> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20e0c70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20e0d38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20e0d00 <col:73> 'int' lvalue ParmVar 0x5647d20cb740 'i' 'int'
|-CXXMethodDecl 0x5647d20cba88 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5647d20cb8f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5647d20cb970 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5647d20e1568 <col:41, line:528:5>
|   |-ParenExpr 0x5647d20e12f0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e12c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e0fe0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e0fb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e0ec0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e0ea8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e0e68 <col:23> 'int' lvalue ParmVar 0x5647d20cb8f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e0e88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e0f90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e0f78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e0ee0 <col:33> 'int' lvalue ParmVar 0x5647d20cb8f8 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e0f58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e0f40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e0f00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e0f20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5647d20e1040 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e1020 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e1220 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e1208 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e11e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e1260 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e10b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5647d20e1278 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e10e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e1290 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e1120 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5647d20e12a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e11d0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e11b8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e1178 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5647d20e1548 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5647d20e14f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5647d20e14c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5647d20e1470 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5647d20e1430 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5647d20e13e0 <col:47, col:56> 'char [48]' lvalue ->c 0x5647d20d36c0
|     |     |   `-CXXMemberCallExpr 0x5647d20e13c0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5647d20e1390 <col:47> '<bound member function type>' ->xanno 0x5647d20c89a8
|     |     |       `-CXXThisExpr 0x5647d20e1380 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5647d20e1448 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5647d20e1410 <col:60> 'int' lvalue ParmVar 0x5647d20cb8f8 'i' 'int'
|     `-ImplicitCastExpr 0x5647d20e1530 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20e1510 <col:65> 'int16_t':'short' lvalue ParmVar 0x5647d20cb970 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5647d20cbc48 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5647d20cbb50 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5647d20e1c38 <col:36, line:541:5>
|   |-ParenExpr 0x5647d20e19d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e19a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e1700 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e16d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e15e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e15c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e1588 <col:23> 'int' lvalue ParmVar 0x5647d20cbb50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e15a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e16b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e1698 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e1600 <col:33> 'int' lvalue ParmVar 0x5647d20cbb50 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e1678 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e1660 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e1620 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e1640 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5647d20e1760 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e1740 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e1908 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e18f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e18d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e1948 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e17d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5647d20e1960 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e1808 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e1978 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e1840 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5647d20e1990 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e18b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e18a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e1860 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5647d20e1c28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5647d20e1c10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5647d20e1bf8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20e1bc8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5647d20e1b70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20e1b40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20e1af0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20e1ad0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20e1aa0 <col:61> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20e1a90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20e1b58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20e1b20 <col:74> 'int' lvalue ParmVar 0x5647d20cbb50 'i' 'int'
|-CXXMethodDecl 0x5647d20cbe18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5647d20cbd08 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5647d20cbd80 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5647d20cbec8 <col:20>
| `-OptimizeNoneAttr 0x5647d20cbf20 <col:30>
|-CXXMethodDecl 0x5647d20cc058 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5647d20cbf60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5647d20e2308 <col:35, line:562:5>
|   |-ParenExpr 0x5647d20e20a8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e2078 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e1dd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e1da0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e1cb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e1c98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e1c58 <col:23> 'int' lvalue ParmVar 0x5647d20cbf60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e1c78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e1d80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e1d68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e1cd0 <col:33> 'int' lvalue ParmVar 0x5647d20cbf60 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e1d48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e1d30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e1cf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e1d10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5647d20e1e30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e1e10 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e1fd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e1fc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e1fa0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e2018 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e1ea0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5647d20e2030 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e1ed8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e2048 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e1f10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5647d20e2060 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e1f88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e1f70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e1f30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5647d20e22f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5647d20e22e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5647d20e22c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20e2298 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5647d20e2240 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20e2210 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20e21c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20e21a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20e2170 <col:60> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20e2160 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20e2228 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20e21f0 <col:73> 'int' lvalue ParmVar 0x5647d20cbf60 'i' 'int'
|-CXXMethodDecl 0x5647d20cc268 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5647d20cc118 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5647d20cc190 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5647d20e29e8 <col:41, line:577:5>
|   |-ParenExpr 0x5647d20e2778 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e2748 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e24a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e2470 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e2380 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e2368 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e2328 <col:23> 'int' lvalue ParmVar 0x5647d20cc118 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e2348 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e2450 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e2438 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e23a0 <col:33> 'int' lvalue ParmVar 0x5647d20cc118 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e2418 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e2400 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e23c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e23e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5647d20e2500 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e24e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e26a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e2690 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e2670 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e26e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e2570 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5647d20e2700 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e25a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e2718 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e25e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5647d20e2730 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e2658 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e2640 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e2600 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5647d20e29c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5647d20e2978 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5647d20e2948 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5647d20e28e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5647d20e28b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5647d20e2868 <col:47, col:56> 'char [48]' lvalue ->c 0x5647d20d36c0
|     |     |   `-CXXMemberCallExpr 0x5647d20e2848 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5647d20e2818 <col:47> '<bound member function type>' ->xanno 0x5647d20c89a8
|     |     |       `-CXXThisExpr 0x5647d20e2808 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5647d20e28d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5647d20e2898 <col:60> 'int' lvalue ParmVar 0x5647d20cc118 'i' 'int'
|     `-ImplicitCastExpr 0x5647d20e29b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20e2990 <col:65> 'int32_t':'int' lvalue ParmVar 0x5647d20cc190 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5647d20cc428 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5647d20cc330 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5647d20e3118 <col:36, line:591:5>
|   |-ParenExpr 0x5647d20e2e58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e2e28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e2b80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e2b50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e2a60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e2a48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e2a08 <col:23> 'int' lvalue ParmVar 0x5647d20cc330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e2a28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e2b30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e2b18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e2a80 <col:33> 'int' lvalue ParmVar 0x5647d20cc330 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e2af8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e2ae0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e2aa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e2ac0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5647d20e2be0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e2bc0 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e2d88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e2d70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e2d50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e2dc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e2c50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5647d20e2de0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e2c88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e2df8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e2cc0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5647d20e2e10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e2d38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e2d20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e2ce0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5647d20e3108 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5647d20e30f0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5647d20e30d8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20e30a8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5647d20e3020 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20e2ff0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20e2fa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20e2f80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20e2f50 <col:61> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20e2f40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20e3008 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20e2fd0 <col:74> 'int' lvalue ParmVar 0x5647d20cc330 'i' 'int'
|-CXXMethodDecl 0x5647d20cc678 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5647d20cc4e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5647d20cc560 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5647d20e37f8 <col:42, line:606:5>
|   |-ParenExpr 0x5647d20e3588 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5647d20e3558 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e32b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e3280 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e3190 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e3178 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e3138 <col:23> 'int' lvalue ParmVar 0x5647d20cc4e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e3158 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e3260 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5647d20e3248 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e31b0 <col:33> 'int' lvalue ParmVar 0x5647d20cc4e8 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e3228 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e3210 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e31d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5647d20e31f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5647d20e3310 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e32f0 <col:60> 'int' 0
|   |   `-CallExpr 0x5647d20e34b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e34a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e3480 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e34f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e3380 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5647d20e3510 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e33b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e3528 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e33f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5647d20e3540 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e3468 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e3450 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e3410 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5647d20e37d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5647d20e3788 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5647d20e3758 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5647d20e36f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5647d20e36c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5647d20e3678 <col:48, col:57> 'char [48]' lvalue ->c 0x5647d20d36c0
|     |     |   `-CXXMemberCallExpr 0x5647d20e3658 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5647d20e3628 <col:48> '<bound member function type>' ->xanno 0x5647d20c89a8
|     |     |       `-CXXThisExpr 0x5647d20e3618 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5647d20e36e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5647d20e36a8 <col:61> 'int' lvalue ParmVar 0x5647d20cc4e8 'i' 'int'
|     `-ImplicitCastExpr 0x5647d20e37c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5647d20e37a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5647d20cc560 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5647d20cc810 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5647d20cc740 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5647d20e4068 <col:33, line:620:5>
|   |-ParenExpr 0x5647d20e3de0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5647d20e3db0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e3a00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e39d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e3870 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e3858 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e3818 <col:23> 'int' lvalue ParmVar 0x5647d20cc740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e3838 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e39b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5647d20e3998 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e3890 <col:33> 'int' lvalue ParmVar 0x5647d20cc740 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e3978 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e3960 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e38b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5647d20e3938 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5647d20e3920 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5647d20e38e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5647d20e3a60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e3a40 <col:79> 'int' 0
|   |   `-CallExpr 0x5647d20e3d10 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e3cf8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e3cd8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e3d50 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e3b48 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5647d20e3d68 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e3b90 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e3d80 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e3bc8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5647d20e3d98 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e3cc0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e3ca8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e3c68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5647d20e4058 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5647d20e4040 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5647d20e4028 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5647d20e3ff8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5647d20e3f70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5647d20e3f40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5647d20e3ef0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5647d20d36c0
|             |   `-CXXMemberCallExpr 0x5647d20e3ed0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5647d20e3ea0 <col:67> '<bound member function type>' ->xanno 0x5647d20c8808
|             |       `-CXXThisExpr 0x5647d20e3e90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5647d20e3f58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5647d20e3f20 <col:80> 'int' lvalue ParmVar 0x5647d20cc740 'i' 'int'
|-CXXMethodDecl 0x5647d20cca28 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5647d20cc8d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5647d20cc950 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5647d20e4890 <col:45, line:635:5>
|   |-ParenExpr 0x5647d20e45d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5647d20e45a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5647d20e4270 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5647d20e4240 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5647d20e40e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5647d20e40c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5647d20e4088 <col:23> 'int' lvalue ParmVar 0x5647d20cc8d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5647d20e40a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5647d20e4220 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5647d20e4208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5647d20e4100 <col:33> 'int' lvalue ParmVar 0x5647d20cc8d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5647d20e41e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5647d20e41d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5647d20e4120 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5647d20c8bf0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5647d20e41a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5647d20e4190 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5647d20e4158 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5647d20e42d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5647d20e42b0 <col:79> 'int' 0
|   |   `-CallExpr 0x5647d20e4508 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5647d20e44f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5647d20e44d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5647d1c35520 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5647d20e4548 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e4340 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5647d20e4560 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5647d20e4388 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5647d20e4578 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5647d20e43c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5647d20e4590 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5647d20e44b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5647d20e44a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5647d20e4458 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5647d20e4870 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5647d20e47d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5647d20e47a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5647d20e4748 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5647d20e4718 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5647d20e46c8 <col:54, col:63> 'char [48]' lvalue ->c 0x5647d20d36c0
|     |     |   `-CXXMemberCallExpr 0x5647d20e46a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5647d20e4678 <col:54> '<bound member function type>' ->xanno 0x5647d20c89a8
|     |     |       `-CXXThisExpr 0x5647d20e4668 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5647d20e4730 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5647d20e46f8 <col:67> 'int' lvalue ParmVar 0x5647d20cc8d0 'i' 'int'
|     `-CXXConstCastExpr 0x5647d20e4840 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5647d20e4828 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5647d20e47f0 <col:91> 'const void *' lvalue ParmVar 0x5647d20cc950 'x' 'const void *'
|-CXXMethodDecl 0x5647d20ccaf8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5647d20e4918 <col:34, line:640:5>
|   `-ReturnStmt 0x5647d20e4908 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5647d20e48f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5647d20e48c0 <col:16> 'Packet *' lvalue ->_data_packet 0x5647d20d4278
|         `-CXXThisExpr 0x5647d20e48b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5647d20ccc38 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5647d20ccba8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5647d20dd9d8 <col:46> 'bool' true
|-CXXMethodDecl 0x5647d20ccdb8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5647d20cccf0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5647d20cce60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5647d20cd610 <line:660:22> "" ""
| |-EnumConstantDecl 0x5647d20ccf60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd680 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20ccf40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5647d20ccf20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5647d20c20c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5647d20ccff0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd698 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20ccfd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5647d20ccfb0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5647d20c2150 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5647d20cd080 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd6b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd060 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d20cd040 <col:21> 'int' 0
| |-EnumConstantDecl 0x5647d20cd110 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd6c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd0f0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5647d20cd0d0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5647d20cd1a0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd6e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd180 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5647d20cd160 <col:21> 'int' 16
| |-EnumConstantDecl 0x5647d20cd230 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd6f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd210 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5647d20cd1f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5647d20cd2c0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd710 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd2a0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5647d20cd280 <col:19> 'int' EnumConstant 0x5647d20cd110 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5647d20cd350 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd728 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd330 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5647d20cd310 <col:19> 'int' EnumConstant 0x5647d20cd230 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5647d20cd420 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd740 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd400 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5647d20cd3e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5647d20cd3a0 <col:23> 'int' EnumConstant 0x5647d20cd350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5647d20cd3c0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5647d20cd4f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5647d20cd758 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d20cd4d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5647d20cd4b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5647d20cd470 <col:23> 'int' EnumConstant 0x5647d20cd350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5647d20cd490 <col:40> 'int' 4
| `-EnumConstantDecl 0x5647d20cd5c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5647d20cd770 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5647d20cd5a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5647d20cd580 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5647d20cd540 <col:23> 'int' EnumConstant 0x5647d20cd350 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5647d20cd560 <col:40> 'int' 8
|-CXXMethodDecl 0x5647d20cd7b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5647d20cd850 <col:68> "" ""
|-CXXMethodDecl 0x5647d20cd8e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5647d20cd988 <col:45> "" ""
|-CXXMethodDecl 0x5647d20cda20 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5647d20cdac0 <col:57> "" ""
|-CXXMethodDecl 0x5647d20cdb58 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5647d20cdbf8 <col:45> "" ""
|-CXXMethodDecl 0x5647d20cdc90 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5647d20cdd30 <col:57> "" ""
|-CXXMethodDecl 0x5647d20cddc0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5647d20cde60 <col:51> "" ""
|-CXXMethodDecl 0x5647d20cdef0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5647d20cdf90 <col:63> "" ""
|-CXXMethodDecl 0x5647d20ce020 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5647d20ce0c0 <col:53> "" ""
|-CXXMethodDecl 0x5647d20ce150 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5647d20ce1f0 <col:65> "" ""
|-CXXMethodDecl 0x5647d20ce308 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5647d20ce278 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5647d20ce3b0 <col:61> "" ""
|-CXXMethodDecl 0x5647d20ce548 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5647d20ce438 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5647d20ce4b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5647d20ce5f8 <col:67> "" ""
|-CXXMethodDecl 0x5647d20ce710 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5647d20ce680 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5647d20ce7b8 <col:63> "" ""
|-CXXMethodDecl 0x5647d20ce950 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5647d20ce840 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5647d20ce8b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5647d20cea00 <col:69> "" ""
|-CXXMethodDecl 0x5647d20ceb18 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5647d20cea88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5647d20cebc0 <col:63> "" ""
|-CXXMethodDecl 0x5647d20d1298 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5647d20d1188 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5647d20d1200 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5647d20d1348 <col:69> "" ""
|-CXXMethodDecl 0x5647d20d1460 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5647d20d13d0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5647d20d1508 <col:62> "" ""
|-CXXMethodDecl 0x5647d20d16a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5647d20d1590 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5647d20d1608 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5647d20d1750 <col:68> "" ""
|-CXXMethodDecl 0x5647d20d1868 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5647d20d17d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5647d20d1910 <col:63> "" ""
|-CXXMethodDecl 0x5647d20d1aa8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5647d20d1998 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5647d20d1a10 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5647d20d1b58 <col:69> "" ""
|-CXXMethodDecl 0x5647d20d1be8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5647d20d1c88 <col:64> "" ""
|-CXXMethodDecl 0x5647d20d1d18 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5647d20d1db8 <col:52> "" ""
|-CXXMethodDecl 0x5647d20d1e48 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5647d20d1ee8 <col:67> "" ""
|-CXXMethodDecl 0x5647d20d1f78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5647d20d2018 <col:55> "" ""
|-CXXMethodDecl 0x5647d20d2130 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5647d20d20a0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5647d20d21d8 <col:58> "" ""
|-CXXMethodDecl 0x5647d20d2370 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5647d20d2260 <col:33> col:36 'int'
| |-ParmVarDecl 0x5647d20d22d8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5647d20d2420 <col:62> "" ""
|-CXXMethodDecl 0x5647d20d2538 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5647d20d24a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5647d20d25e0 <col:58> "" ""
|-CXXMethodDecl 0x5647d20d2778 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5647d20d2668 <col:33> col:36 'int'
| |-ParmVarDecl 0x5647d20d26e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5647d20d2828 <col:62> "" ""
|-CXXMethodDecl 0x5647d20d2940 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5647d20d28b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5647d20d29e8 <col:60> "" ""
|-CXXMethodDecl 0x5647d20d2b80 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5647d20d2a70 <col:34> col:37 'int'
| |-ParmVarDecl 0x5647d20d2ae8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5647d20d2c30 <col:64> "" ""
|-CXXMethodDecl 0x5647d20d2d48 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5647d20d2cb8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5647d20d2df0 <col:58> "" ""
|-CXXMethodDecl 0x5647d20d2f88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5647d20d2e78 <col:33> col:36 'int'
| |-ParmVarDecl 0x5647d20d2ef0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5647d20d3038 <col:62> "" ""
|-CXXMethodDecl 0x5647d20d3150 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5647d20d30c0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5647d20d31f8 <col:59> "" ""
|-CXXMethodDecl 0x5647d20d3390 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5647d20d3280 <col:33> col:36 'int'
| |-ParmVarDecl 0x5647d20d32f8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5647d20d3440 <col:63> "" ""
|-AccessSpecDecl 0x5647d20d34b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5647d20d34d8 prev 0x5647d20c86e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5647d20d35d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5647d20d36c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5647d20d37e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5647d20d3968 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5647d20d3ae8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5647d20d3c68 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5647d20e4a98 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5647d20e5308 <col:11>
| |-CXXDestructorDecl 0x5647d20e4b70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5647d20e4ca8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5647d20e4ca8
| | `-ParmVarDecl 0x5647d20e4db8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5647d20e4e58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5647d20e4e58
| | `-ParmVarDecl 0x5647d20e4f68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5647d20e7d28 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5647d20e7e38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5647d20e80b8 <col:11>
| |   `-ReturnStmt 0x5647d20e80a8 <col:11>
| |     `-UnaryOperator 0x5647d20e8090 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5647d20e8080 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5647d20e7ea8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5647d20e7ea8
|   `-ParmVarDecl 0x5647d20e7fb8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5647d20d3cd0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5647d20d3de8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5647d20d3e88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5647d20d3ef0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5647d20d3f58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5647d20d3fc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5647d20d4020 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5647d20d40e0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5647d20d4140 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5647d20d41a0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5647d20e49a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5647d20d3e88 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5647d20e5318 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5647d20e5370 <col:12>
| |-CXXConstructorDecl 0x5647d20e4fd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5647d20e4fd8
| | `-ParmVarDecl 0x5647d20e50e8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5647d20e5188 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5647d20e5188
| | `-ParmVarDecl 0x5647d20e5298 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5647d20e7410 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5647d20d4218 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5647d20d4278 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5647d20d42e0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5647d20d4348 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5647d20d43b0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5647d20d4418 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5647d20d4478 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5647d20d44d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5647d20d4540 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5647d20d45c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5647d20d4218 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5647d20e4940 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5647d20d4478 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5647d20e5380 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5647d20e53e0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5647d20d4768 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5647d20d46a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5647d20d4860 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5647d20d4a48 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5647d20d4950 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5647d20d4d18 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5647d20d4b00 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5647d20d4b78 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5647d20d4bf0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20d4f38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5647d20d4de8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5647d20d4e60 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5647d20dd518 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5647d20d4ff8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5647d20d5070 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5647d20d50e8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5647d20dd670 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5647d20dd5e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5647d20dd7b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5647d20dd728 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5647d20dd8b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d2114560 <../dummy_inc/clicknet/ether.h:65:1, line:71:1> line:65:8 referenced struct click_ether_vlan definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x5647d2114988 <line:71:18>
|-CXXRecordDecl 0x5647d2114678 <line:65:1, col:8> col:8 implicit struct click_ether_vlan
|-FieldDecl 0x5647d2114768 <line:66:5, col:26> col:13 ether_dhost 'uint8_t [6]'
|-FieldDecl 0x5647d2114818 <line:67:5, col:26> col:13 ether_shost 'uint8_t [6]'
|-FieldDecl 0x5647d2114878 <line:68:5, col:14> col:14 referenced ether_vlan_proto 'uint16_t':'unsigned short'
|-FieldDecl 0x5647d21148d8 <line:69:5, col:14> col:14 referenced ether_vlan_tci 'uint16_t':'unsigned short'
`-FieldDecl 0x5647d2114938 <line:70:5, col:14> col:14 ether_vlan_encap_proto 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  NonVirtualBaseLLVMType:%struct.click_ether_vlan = type { [6 x i8], [6 x i8], i16, i16, i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d21c5c80 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5647d21c5d98 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5647d21c5e28 <col:16, col:22> col:16 public
|-EnumDecl 0x5647d21c5e50 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5647d21c5f50 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5647d21c61a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21c5f30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5647d21c5f10 <col:21> 'int' 0
| |-EnumConstantDecl 0x5647d21c5fe0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5647d21c61b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21c5fc0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5647d21c5fa0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5647d21c6070 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5647d21c61d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21c6050 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5647d21c6030 <col:24> 'int' 34
| |-EnumConstantDecl 0x5647d21c6100 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5647d21c61e8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5647d21c60e0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5647d21c60c0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5647d21c6150 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5647d21c7b90 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5647d21c7fc8 <col:7>
|-CXXConstructorDecl 0x5647d21c7c98 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5647d21c7c98
| `-ParmVarDecl 0x5647d21c7da8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5647d21c7e48 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d21c7f58 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5647d2229c40 <col:7>
`-CXXDestructorDecl 0x5647d21ca0c8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5647d21c6218 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5647d21c6378 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5647d21c6408 <col:32, col:38> col:32 public
|-TypedefDecl 0x5647d21c6440 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5647d1ceea10 'uint32_t' sugar
|   |-Typedef 0x5647d1c02408 'uint32_t'
|   `-TypedefType 0x5647d1bdb4b0 '__uint32_t' sugar
|     |-Typedef 0x5647d1bdb0a8 '__uint32_t'
|     `-BuiltinType 0x5647d1b99460 'unsigned int'
|-CXXConstructorDecl 0x5647d21c6588 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5647d21c64b0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5647d21c7a98 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5647d21c7fd8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5647d21c7350 'base' 'int'
| | `-ImplicitCastExpr 0x5647d21c7b38 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5647d21c7af8 <col:16> 'int' lvalue ParmVar 0x5647d21c64b0 'b' 'int'
| `-CompoundStmt 0x5647d21c8048 <col:19, line:1046:5>
|-CXXMethodDecl 0x5647d21c6a80 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5647d21c6650 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5647d21c66d0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5647d21c6748 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5647d21c67c8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5647d21c6888 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5647d21c6908 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5647d21c6f08 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5647d21c6b50 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5647d21c6e68 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5647d21c6bf8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5647d21c6c98 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5647d21c6d10 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5647d21c7ab8 <col:82> 'const ArgContext' lvalue Var 0x5647d21ba788 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5647d21c8f78 <col:94, line:1067:5>
| |   |-DeclStmt 0x5647d21c81d8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5647d21c8068 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5647d21c8190 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5647d21c83f8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5647d21c8208 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5647d21c83d0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5647d21c83b0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5647d21c8360 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5647d21c8340 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5647d21c82e8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5647d21c8298 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5647d21c82c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5647d21c8328 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5647d21c8308 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5647d21c8390 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5647d21c8558 <line:1056:9, col:27>
| |   | `-VarDecl 0x5647d21c84f0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5647d21c89a8 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5647d21c88d8 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5647d21c8850 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5647d2122470 0x5647d20b89f8 0x5647d1f01fd8 0x5647d1f01cb0 0x5647d1ef3490 0x5647d1ef3140 0x5647d1ef2a30 0x5647d1ec53a0 0x5647d1e51860
| |   | | |-CallExpr 0x5647d21c8790 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5647d21c8580 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5647d21c8630 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5647d21c8600 <col:19, col:23> '<bound member function type>' .begin 0x5647d1ee2698
| |   | | | |   `-DeclRefExpr 0x5647d21c85e0 <col:19> 'const String' lvalue ParmVar 0x5647d21c6bf8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5647d21c86a0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5647d21c8670 <col:32, col:36> '<bound member function type>' .end 0x5647d1ee28b0
| |   | | | |   `-DeclRefExpr 0x5647d21c8650 <col:32> 'const String' lvalue ParmVar 0x5647d21c6bf8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5647d21c86c0 <col:43> 'const bool' lvalue Var 0x5647d21c8068 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5647d21c8728 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5647d21c8708 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5647d21c8750 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5647d21c84f0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5647d21c8770 <col:73> 'const int' lvalue Var 0x5647d21c8208 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5647d21c8830 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5647d21c8800 <col:16, col:20> '<bound member function type>' .end 0x5647d1ee28b0
| |   | |     `-DeclRefExpr 0x5647d21c87e0 <col:16> 'const String' lvalue ParmVar 0x5647d21c6bf8 'str' 'const String &'
| |   | `-BinaryOperator 0x5647d21c8988 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5647d21c8920 <col:13> 'int' lvalue ->status 0x5647d21c73b8
| |   |   | `-CXXThisExpr 0x5647d21c8910 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5647d21c8970 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5647d21c8950 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c5fe0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5647d21c8bf8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5647d21c8ae0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5647d21c8ac8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5647d21c8ab0 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5647d21c89d0 <col:13> 'int' lvalue ->status 0x5647d21c73b8
| |   | | |     `-CXXThisExpr 0x5647d21c89c0 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5647d21c8a90 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5647d21c8a60 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5647d21c8a10 <col:23> 'int' lvalue ->status 0x5647d21c73b8
| |   | |   |   `-CXXThisExpr 0x5647d21c8a00 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5647d21c8a78 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5647d21c8a40 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5647d21c8bd8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5647d21c8b78 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5647d21c8b20 <col:13, col:18> '<bound member function type>' .error 0x5647d216caf0
| |   |   | | `-DeclRefExpr 0x5647d21c8b00 <col:13> 'const ArgContext' lvalue ParmVar 0x5647d21c6d10 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5647d21c8ba0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5647d21c8b50 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5647d21c8bc8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5647d21c8bb8 <col:20> 'bool' false
| |   |-DeclStmt 0x5647d21c8dc8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5647d21c8d70 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5647d21c8d00 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5647d21c8f28 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5647d21c8de0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5647d1e85828
| |   | |-DeclRefExpr 0x5647d21c8e28 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5647d21c84f0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5647d21c8ef8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5647d21c8e70 <col:64> 'V' lvalue ParmVar 0x5647d21c6c98 'result' 'V &'
| |   `-ReturnStmt 0x5647d21c8f68 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5647d21c8f58 <col:16> 'bool' true
| `-CXXMethodDecl 0x5647d222d408 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5647d222d1e0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5647d222d2b8 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x5647d222d320 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5647d222f1a0 <col:94, line:1067:5>
|     |-DeclStmt 0x5647d222dc18 <line:1054:9, col:64>
|     | `-VarDecl 0x5647d222da38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5647d222dba8 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5647d222db78 <col:36, col:55> 'const bool' lvalue Var 0x5647d1e75798 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5647d222ddf8 <line:1055:9, col:91>
|     | `-VarDecl 0x5647d222dc30 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5647d222dd78 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5647d222dd60 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5647d222dd40 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5647d222dd20 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5647d222dd00 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5647d222dcc8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5647d222dca8 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5647d21c82c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5647d222dce8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5647d21c8308 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5647d21c8390 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5647d222df90 <line:1056:9, col:27>
|     | `-VarDecl 0x5647d222df28 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5647d222e420 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5647d222e3c8 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5647d222e280 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5647d222e250 <col:13> '<bound member function type>' ->parse 0x5647d21c6a80
|     | | | | `-CXXThisExpr 0x5647d222e240 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5647d222e0e0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5647d222e0b0 <col:19, col:23> '<bound member function type>' .begin 0x5647d1ee2698
|     | | | |   `-DeclRefExpr 0x5647d222e090 <col:19> 'const String' lvalue ParmVar 0x5647d222d1e0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5647d222e150 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5647d222e120 <col:32, col:36> '<bound member function type>' .end 0x5647d1ee28b0
|     | | | |   `-DeclRefExpr 0x5647d222e100 <col:32> 'const String' lvalue ParmVar 0x5647d222d1e0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5647d222e2f0 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5647d222e2d0 <col:43> 'const bool' lvalue Var 0x5647d222da38 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5647d222e1d8 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5647d222e1c0 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5647d222e1a0 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x5647d222e308 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5647d222e200 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5647d222df28 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5647d222e340 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5647d222e320 <col:73> 'const int' lvalue Var 0x5647d222dc30 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5647d222e3a8 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5647d222e378 <col:16, col:20> '<bound member function type>' .end 0x5647d1ee28b0
|     | |     `-DeclRefExpr 0x5647d222e358 <col:16> 'const String' lvalue ParmVar 0x5647d222d1e0 'str' 'const String &'
|     | `-BinaryOperator 0x5647d222e400 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5647d21c8920 <col:13> 'int' lvalue ->status 0x5647d21c73b8
|     |   | `-CXXThisExpr 0x5647d21c8910 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5647d222e3e8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5647d21c8950 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c5fe0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5647d222e598 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5647d222e4b8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5647d222e4a0 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5647d222e488 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5647d21c89d0 <col:13> 'int' lvalue ->status 0x5647d21c73b8
|     | | |     `-CXXThisExpr 0x5647d21c89c0 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5647d222e468 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5647d222e438 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5647d21c8a10 <col:23> 'int' lvalue ->status 0x5647d21c73b8
|     | |   |   `-CXXThisExpr 0x5647d21c8a00 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5647d222e450 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5647d21c8a40 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5647d222e578 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5647d222e528 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5647d222e4f8 <col:13, col:18> '<bound member function type>' .error 0x5647d216caf0
|     |   | | `-DeclRefExpr 0x5647d222e4d8 <col:13> 'const ArgContext' lvalue ParmVar 0x5647d222d320 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5647d222e550 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5647d21c8b50 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5647d222e568 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5647d21c8bb8 <col:20> 'bool' false
|     |-DeclStmt 0x5647d222ead8 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5647d222ea80 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5647d222ea30 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x5647d222ea10 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x5647d222e9a0 'type'
|     |       `-ElaboratedType 0x5647d222e950 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x5647d222e930 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x5647d1e758f0 'unsigned_type'
|     |           `-BuiltinType 0x5647d1b99460 'unsigned int'
|     |-CallExpr 0x5647d222f130 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5647d222f118 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5647d222f098 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5647d222ef78 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5647d1e85828 'extract_integer')
|     | |-ImplicitCastExpr 0x5647d222f178 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5647d222f160 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5647d222eb38 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5647d222df28 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5647d222ec08 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x5647d222ebb8 <col:64> 'int':'int' lvalue ParmVar 0x5647d222d2b8 'result' 'int &'
|     `-ReturnStmt 0x5647d222f190 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5647d21c8f58 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5647d21c72c8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5647d21c6f78 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5647d21c7228 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5647d21c7028 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5647d21c70c8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5647d21c7140 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5647d21c7ad8 <col:71> 'const ArgContext' lvalue Var 0x5647d21ba788 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5647d21c96e8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5647d21c9040 <line:1071:9, col:12>
| |   | `-VarDecl 0x5647d21c8fd8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5647d21c96c0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5647d21c92d0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5647d21c9158 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5647d21c9120 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5647d21c9068 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5647d21c90c0 <col:31> 'const String' lvalue ParmVar 0x5647d21c7028 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5647d21c90e0 <col:36> 'V' lvalue Var 0x5647d21c8fd8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5647d21c9100 <col:39> 'const ArgContext' lvalue ParmVar 0x5647d21c7140 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5647d21c92b0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5647d21c9290 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5647d21c9278 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5647d21c9260 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5647d21c9180 <col:17> 'int' lvalue ->status 0x5647d21c73b8
| |     |     |     `-CXXThisExpr 0x5647d21c9170 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5647d21c9240 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5647d21c9210 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5647d21c91c0 <col:27> 'int' lvalue ->status 0x5647d21c73b8
| |     |       |   `-CXXThisExpr 0x5647d21c91b0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5647d21c9228 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5647d21c91f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5647d21c9300 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5647d21c92f0 <col:20> 'bool' false
| |     `-IfStmt 0x5647d21c9698 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5647d21c93a0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5647d21c9370 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5647d21c9320 <col:18> 'int' lvalue ->status 0x5647d21c73b8
| |       | |   `-CXXThisExpr 0x5647d21c9310 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5647d21c9388 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5647d21c9350 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5647d21c95d8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5647d21c9580 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5647d21c93d0 <line:1076:13> '<bound member function type>' ->range_error 0x5647d21c79c8
| |       | | | `-CXXThisExpr 0x5647d21c93c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5647d21c9400 <col:25> 'const ArgContext' lvalue ParmVar 0x5647d21c7140 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5647d21c94e0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5647d21c9558 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5647d21c9538 <col:43> 'V' lvalue Var 0x5647d21c8fd8 'x' 'V'
| |       | `-ReturnStmt 0x5647d21c95c8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5647d21c95b8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5647d21c9678 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5647d21c9638 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5647d21c95f8 <col:13> 'V' lvalue ParmVar 0x5647d21c70c8 'result' 'V &'
| |         | `-DeclRefExpr 0x5647d21c9618 <col:22> 'V' lvalue Var 0x5647d21c8fd8 'x' 'V'
| |         `-ReturnStmt 0x5647d21c9668 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5647d21c9658 <col:20> 'bool' true
| `-CXXMethodDecl 0x5647d222cdc8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5647d222cba0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5647d222cc78 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x5647d222cce0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5647d222da18 <col:83, line:1083:5>
|     |-DeclStmt 0x5647d222d050 <line:1071:9, col:12>
|     | `-VarDecl 0x5647d222cfe8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x5647d222d9f0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5647d222d680 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5647d222d5a8 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5647d222d570 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5647d222d528 <col:14> '<bound member function type>' ->parse_saturating 0x5647d222d408
|       | |   | `-CXXThisExpr 0x5647d222d518 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5647d222d0c0 <col:31> 'const String' lvalue ParmVar 0x5647d222cba0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5647d222d0e0 <col:36> 'int':'int' lvalue Var 0x5647d222cfe8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x5647d222d100 <col:39> 'const ArgContext' lvalue ParmVar 0x5647d222cce0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5647d222d660 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5647d222d640 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5647d222d628 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5647d222d610 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5647d21c9180 <col:17> 'int' lvalue ->status 0x5647d21c73b8
|       |     |     `-CXXThisExpr 0x5647d21c9170 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5647d222d5f0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5647d222d5c0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5647d21c91c0 <col:27> 'int' lvalue ->status 0x5647d21c73b8
|       |       |   `-CXXThisExpr 0x5647d21c91b0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5647d222d5d8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5647d21c91f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5647d222d6a0 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5647d21c92f0 <col:20> 'bool' false
|       `-IfStmt 0x5647d222d9c8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5647d222d6e0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5647d222d6b0 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5647d21c9320 <col:18> 'int' lvalue ->status 0x5647d21c73b8
|         | |   `-CXXThisExpr 0x5647d21c9310 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5647d222d6c8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5647d21c9350 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5647d21c6070 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5647d222d900 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5647d222d870 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5647d21c93d0 <line:1076:13> '<bound member function type>' ->range_error 0x5647d21c79c8
|         | | | `-CXXThisExpr 0x5647d21c93c0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5647d222d700 <col:25> 'const ArgContext' lvalue ParmVar 0x5647d222cce0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5647d222d8d8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5647d222d8a8 <col:31, col:50> 'const bool' lvalue Var 0x5647d1e75798 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5647d222d848 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5647d222d830 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5647d222d818 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5647d222d7f8 <col:43> 'int':'int' lvalue Var 0x5647d222cfe8 'x' 'int':'int'
|         | `-ReturnStmt 0x5647d222d8f0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5647d21c95b8 <col:20> 'bool' false
|         `-CompoundStmt 0x5647d222d9a8 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5647d222d978 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x5647d222d920 <col:13> 'int':'int' lvalue ParmVar 0x5647d222cc78 'result' 'int &'
|           | `-ImplicitCastExpr 0x5647d222d960 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5647d222d940 <col:22> 'int':'int' lvalue Var 0x5647d222cfe8 'x' 'int':'int'
|           `-ReturnStmt 0x5647d222d998 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5647d21c9658 <col:20> 'bool' true
|-FieldDecl 0x5647d21c7350 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5647d21c73b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5647d21c7408 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5647d21c76c0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5647d21c7448 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5647d21c74c8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5647d21c7540 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5647d21c75c0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5647d21c79c8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5647d21c7790 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5647d21c7808 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5647d21c78a0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5647d21c9f48 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5647d21c9f48
| `-ParmVarDecl 0x5647d21ca058 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5647d21ca1d8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d21ca2e8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5647d2229c50 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5647d2229c20 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5647d2229bf0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5647d2229bc0 <col:7> 'IntArg' lvalue ParmVar 0x5647d21ca2e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5647d21c7350 'base' 'int'
| | `-ImplicitCastExpr 0x5647d2229d48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5647d2229d18 <col:7> 'int' xvalue .base 0x5647d21c7350
| |     `-CXXStaticCastExpr 0x5647d2229ce8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5647d2229cb8 <col:7> 'IntArg' lvalue ParmVar 0x5647d21ca2e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5647d21c73b8 'status' 'int'
| | `-ImplicitCastExpr 0x5647d2229e18 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5647d2229de8 <col:7> 'int' xvalue .status 0x5647d21c73b8
| |     `-CXXStaticCastExpr 0x5647d2229db8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5647d2229d88 <col:7> 'IntArg' lvalue ParmVar 0x5647d21ca2e8 '' 'IntArg &&'
| `-CompoundStmt 0x5647d2229e70 <col:7>
`-CXXDestructorDecl 0x5647d2228db0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5647d21ce810 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5647d21cea68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5647d2228cd8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5647d2229250 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5647d2229230 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5647d22292c0 <col:19>
|-CXXConstructorDecl 0x5647d2228eb8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5647d2228eb8
| `-ParmVarDecl 0x5647d2228fc8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5647d2229068 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5647d2229178 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5647d2229e80 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5647d2229ba0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5647d2229b70 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5647d2229b40 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5647d2229178 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5647d2229ef0 <col:19>
`-CXXDestructorDecl 0x5647d2229300 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
