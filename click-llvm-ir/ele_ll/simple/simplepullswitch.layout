
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c28ab38 prev 0x55642c2822d8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c28ac30 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55642c28acc0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55642c28ad38 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55642c28adf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55642c28aec0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55642c28b038 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55642c28af70 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55642c28b0e0 <col:24>
| `-OptimizeNoneAttr 0x55642c28b138 <col:34>
|-CXXMethodDecl 0x55642c28b180 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55642c28b438 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55642c28b230 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55642c28b2a8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55642c28b328 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55642c28b4f0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55642c28b528 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55642c28b590 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55642c28b618 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55642c28b938 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55642c28b6d0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55642c28b748 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55642c28b7c0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55642c28b840 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55642c28ba50 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55642c2933c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55642c2933c8
| `-ParmVarDecl 0x55642c2934d8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55642c293578 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55642c293578
| `-ParmVarDecl 0x55642c293688 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55642c360e28 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c27db50 prev 0x55642c27d8d0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55642c27dc48 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55642c27dcd8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55642c27dd38 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55642c27de28 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55642c27df28 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55642c27e0f8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55642c27dfa8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55642c27e020 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55642c27e288 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55642c27e1c0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55642c27e330 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55642c27e468 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55642c27e3a0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55642c27e608 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55642c27e548 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55642c27e7a8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55642c27e6e8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55642c27e850 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55642c27e950 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55642c27ea30 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c27e930 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55642c27e910 <col:26> 'int' 1
| `-EnumConstantDecl 0x55642c27e9e0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55642c27ea48 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c27e9c0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55642c27e9a0 <col:44> 'int' 2
|-CXXMethodDecl 0x55642c27eb90 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55642c27ea78 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55642c27eaf8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55642c27ece8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55642c27ec58 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55642c27ef28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55642c27eda8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55642c27ee20 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55642c27efd8 <col:20>
| `-OptimizeNoneAttr 0x55642c27f030 <col:30>
|-CXXMethodDecl 0x55642c27f138 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55642c27f070 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55642c27f1e0 <col:20>
| `-OptimizeNoneAttr 0x55642c27f238 <col:30>
|-CXXMethodDecl 0x55642c27f288 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55642c27f350 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55642c27f468 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55642c27f4f0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55642c27f578 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55642c27f600 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55642c27f688 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55642c27f718 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55642c27f7d8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55642c27f860 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55642c27f8e8 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x55642c27f970 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55642c27f9f8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55642c27fa80 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55642c27fb10 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55642c27fbd0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55642c27fc60 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55642c27fdb0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55642c27fd18 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55642c27ff40 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55642c27fe70 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55642c2801f0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55642c27fff8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55642c280078 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55642c2800f8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55642c2802a8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55642c2803b0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55642c280640 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c280390 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c280370 <col:33> 'int' 0
| |-EnumConstantDecl 0x55642c280440 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55642c280658 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c280420 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55642c280400 <col:32> 'int' 20
| |-EnumConstantDecl 0x55642c2804d0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55642c280670 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c2804b0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55642c280490 <col:38> 'int' 90
| |-EnumConstantDecl 0x55642c280560 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55642c280688 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c280540 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55642c280520 <col:35> 'int' 100
| `-EnumConstantDecl 0x55642c2805f0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55642c2806a0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c2805d0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55642c2805b0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55642c2806e0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55642c280b20 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55642c280990 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55642c280a08 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c280bf0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55642c280d70 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55642c280ca0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c280f78 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55642c280e28 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55642c280ea0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c281078 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55642c281118 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55642c2811e0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c281270 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55642c2814a0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c281250 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55642c281230 <col:36> 'int' EnumConstant 0x55642c2811e0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c2812c0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c281310 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c281360 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c2813b0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55642c281400 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55642c281450 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55642c281588 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55642c2814c8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55642c281650 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55642c281710 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55642c2817d0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55642c281890 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55642c2819a8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55642c281a70 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55642c281bf0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55642c281b20 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55642c281d18 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55642c281f18 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55642c281dc8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55642c281e48 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55642c28f868 <col:54, line:127:5>
|   |-ParenExpr 0x55642c28f718 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55642c28f6e8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55642c28f3d8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55642c28f3b0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55642c28f398 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55642c28f380 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55642c28f350 <col:31> 'Router *' lvalue ->_router 0x55642c28d230
|   |   |         `-CXXThisExpr 0x55642c28f340 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55642c28f438 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c28f418 <col:48> 'int' 0
|   |   `-CallExpr 0x55642c28f648 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55642c28f630 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c28f610 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c28f688 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c28f4a8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55642c28f6a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c28f4c8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55642c28f6b8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c28f500 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55642c28f6d0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c28f5f8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c28f5e0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c28f598 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55642c28f7b0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55642c28f748 <col:9> 'Router *' lvalue ->_router 0x55642c28d230
|   | | `-CXXThisExpr 0x55642c28f738 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55642c28f798 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55642c28f778 <col:19> 'Router *' lvalue ParmVar 0x55642c281dc8 'r' 'Router *'
|   `-BinaryOperator 0x55642c28f848 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55642c28f7e0 <col:9> 'int' lvalue ->_eindex 0x55642c28d298
|     | `-CXXThisExpr 0x55642c28f7d0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55642c28f830 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55642c28f810 <col:19> 'int' lvalue ParmVar 0x55642c281e48 'eindex' 'int'
|-CXXMethodDecl 0x55642c2820a0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55642c281fd8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55642c282170 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55642c282238 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55642c2822d8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55642c282528 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55642c2823a0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55642c282420 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55642c2825d8 <col:20>
| `-OptimizeNoneAttr 0x55642c282630 <col:30>
|-CXXMethodDecl 0x55642c282738 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55642c282670 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55642c2827e0 <col:20>
| `-OptimizeNoneAttr 0x55642c282838 <col:30>
|-CXXMethodDecl 0x55642c282908 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55642c282878 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55642c2829b0 <col:20>
| `-OptimizeNoneAttr 0x55642c282a08 <col:30>
|-CXXMethodDecl 0x55642c282b98 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55642c282a40 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55642c282ac0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55642c282d28 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55642c282c60 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55642c282e78 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55642c282de8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55642c282fc8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55642c282f38 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55642c283118 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55642c283088 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55642c2833d8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55642c2831d0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55642c283250 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55642c2832f8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55642c2834b0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55642c283570 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55642c283840 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55642c2836f0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55642c283768 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55642c283968 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55642c283b40 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55642c283a20 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55642c283aa0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55642c283d28 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55642c283c08 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55642c283c88 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55642c284098 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55642c283de8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55642c283e60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55642c283ee0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55642c28ee50 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c28ee30 <col:106> 'int' 0
| `-ParmVarDecl 0x55642c283f58 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28ee88 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28ee68 <col:126> 'int' 0
|-CXXMethodDecl 0x55642c284438 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55642c284168 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55642c284200 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55642c284280 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55642c2842f8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28eec0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28eea0 <col:114> 'int' 0
|-CXXMethodDecl 0x55642c2847c8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55642c284510 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55642c284588 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55642c284608 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55642c28eed8 <col:96> 'int' 0
| `-ParmVarDecl 0x55642c284680 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28ef18 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28eef8 <col:116> 'int' 0
|-CXXMethodDecl 0x55642c284b48 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55642c284898 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55642c284910 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c284990 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55642c28ef50 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c28ef30 <col:109> 'int' 0
| `-ParmVarDecl 0x55642c284a08 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28ef88 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28ef68 <col:129> 'int' 0
|-CXXMethodDecl 0x55642c284ec8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55642c284c18 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55642c284c90 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c284d10 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55642c284d88 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28efc0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28efa0 <col:117> 'int' 0
|-CXXMethodDecl 0x55642c285258 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55642c284fa0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c285018 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c285098 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55642c28efd8 <col:99> 'int' 0
| `-ParmVarDecl 0x55642c285110 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55642c28f018 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55642c28eff8 <col:119> 'int' 0
|-CXXMethodDecl 0x55642c285678 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55642c285328 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55642c2853a8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55642c285420 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c2854a0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55642c28f050 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c28f030 <col:108> 'int' 0
| `-ParmVarDecl 0x55642c285520 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55642c28f088 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55642c28f068 <col:141> 'int' 0
|-CXXMethodDecl 0x55642c285a98 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55642c285750 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55642c2857d0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55642c285848 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c2858c8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55642c285948 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55642c28f0a0 <col:121> 'int' 0
|-CXXMethodDecl 0x55642c285ec8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55642c285b78 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55642c285bf8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55642c285c70 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c285cf0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55642c28f0c0 <col:98> 'int' 0
| `-ParmVarDecl 0x55642c285d70 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55642c28f0e0 <col:123> 'int' 0
|-CXXMethodDecl 0x55642c286190 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55642c285fa0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55642c286020 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55642c2860a0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55642c28f100 <col:80> 'int' 0
|-EnumDecl 0x55642c286248 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55642c286350 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55642c2865e0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c286330 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55642c286310 <col:42> 'int' 1
| |-EnumConstantDecl 0x55642c2863e0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55642c2865f8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c2863c0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55642c2863a0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55642c286470 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55642c286610 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c286450 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55642c286430 <col:44> 'int' 4
| |-EnumConstantDecl 0x55642c286500 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55642c286628 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c2864e0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55642c2864c0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55642c286590 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55642c286640 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c286570 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55642c286550 <col:34> 'int' 6
|-CXXMethodDecl 0x55642c2868f8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55642c286668 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55642c286708 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55642c286788 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55642c286800 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55642c28f1b8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55642c28f1a0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55642c28f188 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55642c28f168 <col:98, col:105> 'String' (CXXTemporary 0x55642c28f168)
|           `-CXXTemporaryObjectExpr 0x55642c28f130 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55642c286b98 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55642c2869c8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55642c286a40 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55642c286ab8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55642c28f268 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55642c28f250 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55642c28f238 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55642c28f218 <col:94, col:101> 'String' (CXXTemporary 0x55642c28f218)
| |         `-CXXTemporaryObjectExpr 0x55642c28f1e0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55642c28fa50 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55642c28f9c8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55642c28f998 <col:9> '<bound member function type>' ->add_task_handlers 0x55642c2868f8
|     | `-CXXThisExpr 0x55642c28f988 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55642c28fa08 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55642c28f908 <col:27> 'Task *' lvalue ParmVar 0x55642c2869c8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55642c28fa20 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55642c28f928 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55642c286a40 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55642c28fa38 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55642c28f948 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55642c286590 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55642c28f968 <col:62> 'const String' lvalue ParmVar 0x55642c286ab8 'prefix' 'const String &'
|-CXXMethodDecl 0x55642c286da8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55642c286c60 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55642c286cd8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55642c28f318 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55642c28f300 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55642c28f2e8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55642c28f2c8 <col:70, col:77> 'String' (CXXTemporary 0x55642c28f2c8)
| |         `-CXXTemporaryObjectExpr 0x55642c28f290 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55642c28fc28 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55642c28fba0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55642c28fb70 <col:9> '<bound member function type>' ->add_task_handlers 0x55642c2868f8
|     | `-CXXThisExpr 0x55642c28fb60 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55642c28fbe0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55642c28fae0 <col:27> 'Task *' lvalue ParmVar 0x55642c286c60 'task' 'Task *'
|     |-ImplicitCastExpr 0x55642c28fbf8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55642c28fb00 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55642c28fc10 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55642c28fb20 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55642c286590 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55642c28fb40 <col:57> 'const String' lvalue ParmVar 0x55642c286cd8 'prefix' 'const String &'
|-CXXMethodDecl 0x55642c287088 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55642c286e70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c286ef0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c286f68 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55642c287338 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55642c287158 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c2871d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c287258 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55642c287628 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55642c287408 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c287488 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c287500 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55642c2878d8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55642c2876f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c287778 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c2877f8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55642c287b88 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55642c2879a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c287a28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c287aa8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55642c287e38 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55642c287c58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c287cd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c287d50 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55642c2880e8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55642c287f08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c287f88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c288008 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55642c2883f8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55642c288210 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c288290 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c288310 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55642c2886d8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55642c2884c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c288548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c2885f0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55642c2889b8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55642c2887a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c288828 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c2888d0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55642c288c20 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55642c288a88 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55642c288b08 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55642c288b80 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55642c288ec8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55642c288cf0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55642c288d70 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55642c288de8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55642c289178 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55642c288f98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c289018 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c289098 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55642c289428 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55642c289248 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c2892c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c289340 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55642c2896d8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55642c2894f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c289578 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c2895f0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55642c2899a8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55642c2897a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c289828 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55642c2898c8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55642c289cd8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55642c289a78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55642c289af8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55642c289b70 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55642c289be8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55642c28f330 <col:93> 'bool' false
|-CXXMethodDecl 0x55642c289ec0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55642c289da8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55642c289e28 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55642c28a098 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55642c289f80 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55642c28a000 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55642c28a378 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55642c28a158 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55642c28a1d0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55642c28a250 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55642c28a2c8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55642c28a668 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55642c28a448 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55642c28a4c0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55642c28a540 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55642c28a5b8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55642c28a8a0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55642c28a740 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55642c28a7c0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55642c28aa88 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55642c28a968 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55642c28a9e8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55642c28ab38 prev 0x55642c2822d8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55642c28ac30 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55642c28acc0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55642c28ad38 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55642c28adf8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55642c28aec0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55642c28b038 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55642c28af70 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55642c28b0e0 <col:24>
| | `-OptimizeNoneAttr 0x55642c28b138 <col:34>
| |-CXXMethodDecl 0x55642c28b180 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55642c28b438 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55642c28b230 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55642c28b2a8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55642c28b328 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55642c28b4f0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55642c28b528 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55642c28b590 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55642c28b618 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55642c28b938 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55642c28b6d0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55642c28b748 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55642c28b7c0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55642c28b840 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55642c28ba50 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55642c2933c8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55642c2933c8
| | `-ParmVarDecl 0x55642c2934d8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55642c293578 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55642c293578
| | `-ParmVarDecl 0x55642c293688 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55642c360e28 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55642c28bac8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55642c28bb68 <col:38> "" ""
|-CXXMethodDecl 0x55642c28bbf8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55642c28bc98 <col:44> "" ""
|-AccessSpecDecl 0x55642c28bd08 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55642c28bd30 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55642c28be30 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55642c28be80 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c28be10 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55642c28bdf0 <col:27> 'int' 4
|-FieldDecl 0x55642c28bf38 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55642c28c0e8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55642c28c1a0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55642c28d230 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55642c28d298 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55642c28d3e8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55642c28d328 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55642c28d598 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55642c28d4a8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55642c28d778 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55642c28d658 <col:20> col:23 'int'
| `-ParmVarDecl 0x55642c28d6d8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55642c28da20 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55642c28d840 <col:23> col:26 'int'
| |-ParmVarDecl 0x55642c28d8c0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55642c28d938 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55642c28dad8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55642c28dba0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55642c28dbf0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55642c28dc40 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55642c28de20 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55642c28dcd0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55642c28dd48 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c28e0c8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55642c28dee8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55642c28df68 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55642c28dfe0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55642c28e2e8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55642c28e198 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55642c28e218 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55642c28e620 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55642c28e3a8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55642c28e428 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55642c28e4a0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55642c28e520 <col:57> col:60 'int'
|-CXXMethodDecl 0x55642c28e808 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55642c28e6f0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55642c28e770 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55642c28e958 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55642c28e8c8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55642c28ecd8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55642c28ea18 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55642c28ea98 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55642c28eb10 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55642c28eb90 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55642c28edf0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class SimplePullSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _input
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c296538 <../elements/simple/simplepullswitch.hh:38:1, line:64:1> line:38:7 class SimplePullSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55642c296698 <col:1, col:7> col:7 implicit referenced class SimplePullSwitch
|-AccessSpecDecl 0x55642c296728 <col:43, col:49> col:43 public
|-CXXConstructorDecl 0x55642c2967b0 <line:40:5, col:22> col:5 SimplePullSwitch 'void ()'
|-CXXDestructorDecl 0x55642c2968a0 <line:41:5, col:23> col:5 ~SimplePullSwitch 'void ()' noexcept-unevaluated 0x55642c2968a0
| `-Overrides: [ 0x55642c27de28 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55642c2969d0 <line:43:5, col:65> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55642c27f288 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55642c297de8 <col:36, col:65>
|   `-ReturnStmt 0x55642c297dd8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55642c297dc0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55642c297d98 <col:45> 'const char [17]' lvalue "SimplePullSwitch"
|-CXXMethodDecl 0x55642c296a98 <line:44:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55642c27f350 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55642c297e48 <col:36, col:52>
|   `-ReturnStmt 0x55642c297e38 <col:38, col:45>
|     `-ImplicitCastExpr 0x55642c297e20 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55642c297e00 <col:45> 'const char [4]' lvalue "-/1"
|-CXXMethodDecl 0x55642c296b60 <line:45:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55642c27f718 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55642c297ea8 <col:36, col:51>
|   `-ReturnStmt 0x55642c297e98 <col:38, col:45>
|     `-ImplicitCastExpr 0x55642c297e80 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55642c297e60 <col:45> 'const char []' lvalue Var 0x55642c27f8e8 'PULL' 'const char []'
|-CXXMethodDecl 0x55642c296e30 <line:47:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55642c280b20 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55642c296ce0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x55642c296d58 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c296f00 <line:48:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x55642c283570 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x55642c297ee0 <col:39, col:54>
|   `-ReturnStmt 0x55642c297ed0 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x55642c297ec0 <col:48> 'bool' true
|-CXXMethodDecl 0x55642c296fc0 <line:49:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55642c280bf0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55642c297108 <line:51:5, col:37> col:18 set_input 'void (int)' virtual
| `-ParmVarDecl 0x55642c297078 <col:28, col:32> col:32 input 'int'
|-CXXMethodDecl 0x55642c297258 <line:53:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55642c27e288 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55642c2971c8 <col:18> col:21 'int'
|-CXXMethodDecl 0x55642c297438 <line:55:5, col:43> col:9 llrpc 'int (unsigned int, void *)'
| |-Overrides: [ 0x55642c28a8a0 Element::llrpc 'int (unsigned int, void *)' ]
| |-ParmVarDecl 0x55642c297318 <col:15, col:24> col:24 command 'unsigned int'
| `-ParmVarDecl 0x55642c297398 <col:33, col:39> col:39 data 'void *'
|-AccessSpecDecl 0x55642c2974e8 <line:57:3, col:12> col:3 protected
|-FieldDecl 0x55642c297528 <line:59:5, col:9> col:9 _input 'int'
|-CXXMethodDecl 0x55642c2976a0 <line:61:5, col:47> col:19 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x55642c297588 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x55642c297608 <col:41, col:46> col:47 'void *'
|-CXXMethodDecl 0x55642c297980 <line:62:5, col:77> col:16 write_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55642c297760 <col:28, col:41> col:42 'const String &'
| |-ParmVarDecl 0x55642c2977d8 <col:44, col:52> col:53 'Element *'
| |-ParmVarDecl 0x55642c297858 <col:55, col:60> col:61 'void *'
| `-ParmVarDecl 0x55642c2978d0 <col:63, col:76> col:77 'ErrorHandler *'
|-CXXConstructorDecl 0x55642c297a68 <line:38:7> col:7 implicit SimplePullSwitch 'void (const SimplePullSwitch &)' inline default_delete noexcept-unevaluated 0x55642c297a68
| `-ParmVarDecl 0x55642c297b78 <col:7> col:7 'const SimplePullSwitch &'
`-CXXMethodDecl 0x55642c297c18 <col:7> col:7 implicit operator= 'SimplePullSwitch &(const SimplePullSwitch &)' inline default_delete noexcept-unevaluated 0x55642c297c18
  `-ParmVarDecl 0x55642c297d28 <col:7> col:7 'const SimplePullSwitch &'

Layout: <CGRecordLayout
  LLVMType:%class.SimplePullSwitch = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.SimplePullSwitch = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c0519f0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55642c051b08 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55642c051ba8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55642c051c08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55642c051c68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55642c051d18 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c052020 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c052138 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55642c0521e0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55642c052248 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55642c0522d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55642c058370 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55642c0587a8 <col:12>
|-CXXConstructorDecl 0x55642c058478 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55642c058588 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55642c0521e0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55642c05ad30 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55642c05ad00 <col:12> 'const char *const' lvalue .data 0x55642c0521e0
| |     `-DeclRefExpr 0x55642c05ace0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55642c052248 'length' 'int'
| | `-ImplicitCastExpr 0x55642c05adc0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55642c05ad90 <col:12> 'const int' lvalue .length 0x55642c052248
| |     `-DeclRefExpr 0x55642c05ad70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55642c0522d8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55642c05ae50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55642c05ae20 <col:12> 'String::memo_t *const' lvalue .memo 0x55642c0522d8
| |     `-DeclRefExpr 0x55642c05ae00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| `-CompoundStmt 0x55642c05aea8 <col:12>
|-CXXConstructorDecl 0x55642c058628 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55642c058628
| `-ParmVarDecl 0x55642c058738 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55642c05dc90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55642c0696a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55642c0697b8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55642c069cd0 <col:12>
|   |-BinaryOperator 0x55642c069ae8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55642c069aa0 <col:12> 'const char *' lvalue ->data 0x55642c0521e0
|   | | `-CXXThisExpr 0x55642c069a90 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55642c069ad0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55642c069a60 <col:12> 'const char *const' lvalue .data 0x55642c0521e0
|   |     `-DeclRefExpr 0x55642c069a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55642c069bb0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55642c069b68 <col:12> 'int' lvalue ->length 0x55642c052248
|   | | `-CXXThisExpr 0x55642c069b58 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55642c069b98 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55642c069b28 <col:12> 'const int' lvalue .length 0x55642c052248
|   |     `-DeclRefExpr 0x55642c069b08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55642c069c78 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55642c069c30 <col:12> 'String::memo_t *' lvalue ->memo 0x55642c0522d8
|   | | `-CXXThisExpr 0x55642c069c20 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55642c069c60 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55642c069bf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55642c0522d8
|   |     `-DeclRefExpr 0x55642c069bd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55642c069cc0 <col:12>
|     `-UnaryOperator 0x55642c069ca8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c069c98 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55642c069828 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55642c069828
  `-ParmVarDecl 0x55642c069938 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c048f60 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55642c049078 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55642c049108 <col:16, col:22> col:16 public
|-TypedefDecl 0x55642c049148 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55642bd1ce00 'const char *'
|   `-QualType 0x55642bd1c351 'const char' const
|     `-BuiltinType 0x55642bd1c350 'char'
|-TypedefDecl 0x55642c0491d0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55642c0491a0 'String::const_iterator' sugar
|   |-Typedef 0x55642c049148 'const_iterator'
|   `-PointerType 0x55642bd1ce00 'const char *'
|     `-QualType 0x55642bd1c351 'const char' const
|       `-BuiltinType 0x55642bd1c350 'char'
|-TypedefDecl 0x55642c049340 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55642c0492b0 'int (String::*)() const'
|   |-RecordType 0x55642c048ff0 'String'
|   | `-CXXRecord 0x55642c048f60 'String'
|   `-ParenType 0x55642c049250 'int () const' sugar
|     `-FunctionProtoType 0x55642c01cde0 'int () const' const cdecl
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c0493a8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55642be719c0 'int64_t' sugar
|   |-Typedef 0x55642bd852a0 'int64_t'
|   `-TypedefType 0x55642bd5e510 '__int64_t' sugar
|     |-Typedef 0x55642bd5e0e8 '__int64_t'
|     `-BuiltinType 0x55642bd1c3d0 'long'
|-TypedefDecl 0x55642c049410 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55642be718e0 'uint64_t' sugar
|   |-Typedef 0x55642bd85440 'uint64_t'
|   `-TypedefType 0x55642bd5e5a0 '__uint64_t' sugar
|     |-Typedef 0x55642bd5e158 '__uint64_t'
|     `-BuiltinType 0x55642bd1c470 'unsigned long'
|-TypedefDecl 0x55642c0494a0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55642c049470 'String::intmax_t' sugar
|   |-Typedef 0x55642c0493a8 'intmax_t'
|   `-TypedefType 0x55642be719c0 'int64_t' sugar
|     |-Typedef 0x55642bd852a0 'int64_t'
|     `-TypedefType 0x55642bd5e510 '__int64_t' sugar
|       |-Typedef 0x55642bd5e0e8 '__int64_t'
|       `-BuiltinType 0x55642bd1c3d0 'long'
|-TypedefDecl 0x55642c049530 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55642c049500 'String::uintmax_t' sugar
|   |-Typedef 0x55642c049410 'uintmax_t'
|   `-TypedefType 0x55642be718e0 'uint64_t' sugar
|     |-Typedef 0x55642bd85440 'uint64_t'
|     `-TypedefType 0x55642bd5e5a0 '__uint64_t' sugar
|       |-Typedef 0x55642bd5e158 '__uint64_t'
|       `-BuiltinType 0x55642bd1c470 'unsigned long'
|-CXXConstructorDecl 0x55642c0495f0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55642c049798 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55642c0496d8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55642c049948 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55642c049888 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55642c049aa0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55642c049a10 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55642c049cb8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55642c049b68 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55642c049be8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55642c049ed8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55642c049d88 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55642c049e08 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55642c04a0f8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55642c049fa8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55642c04a028 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55642c04a318 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55642c04a1c8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55642c04a248 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55642c04a4a8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55642c04a3e0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55642c04a628 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55642c04a568 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55642c04a7b8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55642c04a6f0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55642c04a910 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55642c04a880 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55642c04aa68 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55642c04a9d8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55642c04abc0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55642c04ab30 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55642c04ad48 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55642c04ac88 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55642c04aed8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55642c04ae10 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55642c04b068 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55642c04afa0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55642c04b1f8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55642c04b130 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55642c04b2f0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55642c04b418 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55642c04b598 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55642c04b4d0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55642c04b6e8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55642c04b658 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55642c04b7a0 <col:63> "" ""
|-CXXMethodDecl 0x55642c04b8e8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55642c04b828 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55642c04baf8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55642c04b9a8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55642c04ba28 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55642c04bd18 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55642c04bbc0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55642c04bc40 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55642c04bff8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55642c04bdd8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55642c04be58 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55642c057e40 <col:55> 'int' 10
| `-ParmVarDecl 0x55642c04bed0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55642c057e60 <col:76> 'bool' true
|-CXXMethodDecl 0x55642c04c2d8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55642c04c0c0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55642c04c140 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55642c057e70 <col:56> 'int' 10
| `-ParmVarDecl 0x55642c04c1b8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55642c057e90 <col:77> 'bool' true
|-CXXMethodDecl 0x55642c04c3e0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55642c04c4a8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55642c04c570 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55642c04c610 <col:20>
| `-OptimizeNoneAttr 0x55642c04c668 <col:30>
|-CXXConversionDecl 0x55642c04c758 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55642c04c828 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55642c04c8e8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55642c04c9d8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55642c04ca98 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55642c04cc18 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55642c04cb50 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55642c04cd68 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55642c04ccd8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55642c04ce58 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55642c04cf18 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55642c04d168 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55642c04cfd0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55642c04d050 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55642c04d3c8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55642c04d230 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55642c04d2b0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55642c04d498 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c04d6a8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55642c04d550 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55642c04d5d0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55642c04d8c8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55642c04d770 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55642c04d7f0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55642c04da58 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55642c04d990 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55642c04db48 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55642c04dcb8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55642c04dbf8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55642c04dec8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55642c04dd78 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55642c04ddf8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55642c04e0e0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55642c04df88 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55642c04e000 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55642c04e270 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55642c04e1a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55642c04e490 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55642c04e330 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55642c04e3b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55642c04e5e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55642c04e550 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55642c04e7b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55642c04e6a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55642c04e720 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55642c04e908 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55642c04e878 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55642c04eb20 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55642c04e9c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55642c04ea40 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55642c057ea0 <col:39> 'int' 0
|-CXXMethodDecl 0x55642c04ed40 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55642c04ebe0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55642c04ec60 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55642c057ec0 <col:48> 'int' 0
|-CXXMethodDecl 0x55642c04ef20 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55642c04ee00 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55642c04ee80 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55642c057ee0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55642c04eff0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55642c04f0b0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55642c04f170 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55642c04f230 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55642c04f2f0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55642c04f498 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55642c04f3a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55642c04f618 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55642c04f550 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55642c04f7f0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55642c04f6d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55642c04f968 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55642c04f8a8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55642c04fab0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55642c04fa20 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55642c04fc00 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55642c04fb70 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55642c04fdd8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55642c04fcc0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55642c04fd40 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55642c04ffb8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55642c04fea0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55642c04ff20 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55642c050108 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55642c050078 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55642c050318 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55642c0501c8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55642c050248 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55642c050478 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55642c0503e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55642c0505d0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55642c050538 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55642c050678 <col:57> "" ""
|-CXXMethodDecl 0x55642c050788 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55642c0506f8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55642c0508d8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55642c050848 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55642c050a58 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55642c050990 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55642c050b20 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55642c050be0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55642c050ca0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55642c050d40 <col:49> "" ""
|-CXXMethodDecl 0x55642c050dd0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55642c050e90 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55642c050f80 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55642c051048 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55642c051108 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55642c0511c8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55642c0512c0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55642c051388 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55642c051450 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55642c051628 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55642c051508 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55642c051588 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55642c051850 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55642c0516f0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55642c051770 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55642c051960 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55642c0519c8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55642c0519f0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55642c051b08 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55642c051ba8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55642c051c08 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55642c051c68 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55642c051d18 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55642c051d80 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55642c051fb8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55642c052008 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c051f98 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55642c051ea8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55642c051e50 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55642c051e90 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55642c051e70 <col:32> 'int' 8
|-CXXRecordDecl 0x55642c052020 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55642c052138 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55642c0521e0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55642c052248 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55642c0522d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55642c058370 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55642c0587a8 <col:12>
| |-CXXConstructorDecl 0x55642c058478 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55642c058588 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55642c0521e0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55642c05ad30 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55642c05ad00 <col:12> 'const char *const' lvalue .data 0x55642c0521e0
| | |     `-DeclRefExpr 0x55642c05ace0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55642c052248 'length' 'int'
| | | `-ImplicitCastExpr 0x55642c05adc0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55642c05ad90 <col:12> 'const int' lvalue .length 0x55642c052248
| | |     `-DeclRefExpr 0x55642c05ad70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55642c0522d8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55642c05ae50 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55642c05ae20 <col:12> 'String::memo_t *const' lvalue .memo 0x55642c0522d8
| | |     `-DeclRefExpr 0x55642c05ae00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c058588 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55642c05aea8 <col:12>
| |-CXXConstructorDecl 0x55642c058628 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55642c058628
| | `-ParmVarDecl 0x55642c058738 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55642c05dc90 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55642c0696a8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55642c0697b8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55642c069cd0 <col:12>
| |   |-BinaryOperator 0x55642c069ae8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55642c069aa0 <col:12> 'const char *' lvalue ->data 0x55642c0521e0
| |   | | `-CXXThisExpr 0x55642c069a90 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55642c069ad0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55642c069a60 <col:12> 'const char *const' lvalue .data 0x55642c0521e0
| |   |     `-DeclRefExpr 0x55642c069a40 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55642c069bb0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55642c069b68 <col:12> 'int' lvalue ->length 0x55642c052248
| |   | | `-CXXThisExpr 0x55642c069b58 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55642c069b98 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55642c069b28 <col:12> 'const int' lvalue .length 0x55642c052248
| |   |     `-DeclRefExpr 0x55642c069b08 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55642c069c78 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55642c069c30 <col:12> 'String::memo_t *' lvalue ->memo 0x55642c0522d8
| |   | | `-CXXThisExpr 0x55642c069c20 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55642c069c60 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55642c069bf0 <col:12> 'String::memo_t *const' lvalue .memo 0x55642c0522d8
| |   |     `-DeclRefExpr 0x55642c069bd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55642c0697b8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55642c069cc0 <col:12>
| |     `-UnaryOperator 0x55642c069ca8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55642c069c98 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55642c069828 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55642c069828
|   `-ParmVarDecl 0x55642c069938 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55642c052350 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55642c052598 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55642c0523b8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55642c052438 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55642c0524b0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55642c058330 <col:79, line:261:5>
|   |-BinaryOperator 0x55642c057fa8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55642c057f40 <col:2, col:5> 'const char *' lvalue .data 0x55642c0521e0
|   | | `-MemberExpr 0x55642c057f10 <col:2> 'String::rep_t' lvalue ->_r 0x55642c052350
|   | |   `-CXXThisExpr 0x55642c057f00 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55642c057f90 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55642c057f70 <col:12> 'const char *' lvalue ParmVar 0x55642c0523b8 'data' 'const char *'
|   |-BinaryOperator 0x55642c058070 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55642c058008 <col:2, col:5> 'int' lvalue .length 0x55642c052248
|   | | `-MemberExpr 0x55642c057fd8 <col:2> 'String::rep_t' lvalue ->_r 0x55642c052350
|   | |   `-CXXThisExpr 0x55642c057fc8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55642c058058 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55642c058038 <col:14> 'int' lvalue ParmVar 0x55642c052438 'length' 'int'
|   `-IfStmt 0x55642c058318 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55642c058190 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55642c058178 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55642c058158 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55642c058138 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55642c0580d0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|     |       | `-MemberExpr 0x55642c0580a0 <col:7> 'String::rep_t' lvalue ->_r 0x55642c052350
|     |       |   `-CXXThisExpr 0x55642c058090 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55642c058120 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55642c058100 <col:17> 'String::memo_t *' lvalue ParmVar 0x55642c0524b0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55642c0582f0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55642c0582d8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55642c0581e0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55642c040fc8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55642c058248 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55642c051ba8
|         `-ImplicitCastExpr 0x55642c058230 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55642c058210 <col:27> 'String::memo_t *' lvalue ParmVar 0x55642c0524b0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55642c052848 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55642c052668 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55642c0526e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55642c052760 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55642c052350 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55642c0587b8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55642c058948 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55642c0588b0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55642c058820 <col:2> '<bound member function type>' ->assign_memo 0x55642c052598
|     | `-ImplicitCastExpr 0x55642c0588e8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55642c058810 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55642c058900 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55642c058850 <col:14> 'const char *' lvalue ParmVar 0x55642c052668 'data' 'const char *'
|     |-ImplicitCastExpr 0x55642c058918 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55642c058870 <col:20> 'int' lvalue ParmVar 0x55642c0526e8 'length' 'int'
|     `-ImplicitCastExpr 0x55642c058930 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55642c058890 <col:28> 'String::memo_t *' lvalue ParmVar 0x55642c052760 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55642c0529d8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55642c052918 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55642c058ba0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55642c058b20 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55642c058970 <col:2> '<bound member function type>' ->assign_memo 0x55642c052598
|     | `-CXXThisExpr 0x55642c058960 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55642c058b58 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55642c0589f0 <col:14, col:19> 'const char *' lvalue .data 0x55642c0521e0
|     |   `-MemberExpr 0x55642c0589c0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55642c052350
|     |     `-DeclRefExpr 0x55642c0589a0 <col:14> 'const String' lvalue ParmVar 0x55642c052918 'x' 'const String &'
|     |-ImplicitCastExpr 0x55642c058b70 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55642c058a70 <col:25, col:30> 'int' lvalue .length 0x55642c052248
|     |   `-MemberExpr 0x55642c058a40 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55642c052350
|     |     `-DeclRefExpr 0x55642c058a20 <col:25> 'const String' lvalue ParmVar 0x55642c052918 'x' 'const String &'
|     `-ImplicitCastExpr 0x55642c058b88 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55642c058af0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|         `-MemberExpr 0x55642c058ac0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55642c052350
|           `-DeclRefExpr 0x55642c058aa0 <col:38> 'const String' lvalue ParmVar 0x55642c052918 'x' 'const String &'
|-CXXMethodDecl 0x55642c052aa0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55642c059560 <col:31, line:278:5>
|   `-IfStmt 0x55642c059548 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55642c058c40 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55642c058c28 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55642c058bf8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|     |     `-MemberExpr 0x55642c058bc8 <col:6> 'String::rep_t' lvalue ->_r 0x55642c052350
|     |       `-CXXThisExpr 0x55642c058bb8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55642c059520 <col:15, line:277:2>
|       |-ParenExpr 0x55642c0590f0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55642c0590c0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55642c058d50 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55642c058d38 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55642c058d20 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55642c058ce0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55642c051ba8
|       |   |       `-ImplicitCastExpr 0x55642c058cc8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55642c058c98 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|       |   |           `-MemberExpr 0x55642c058c68 <col:27> 'String::rep_t' lvalue ->_r 0x55642c052350
|       |   |             `-CXXThisExpr 0x55642c058c58 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55642c058db0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55642c058d90 <col:54> 'int' 0
|       |   `-CallExpr 0x55642c059020 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55642c059008 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55642c058f88 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55642c059060 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55642c058e98 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55642c059078 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55642c058ec8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55642c059090 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55642c058f00 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55642c0590a8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55642c058f70 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55642c058f58 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55642c058f20 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55642c059440 <line:274:6, line:275:22>
|       | |-CallExpr 0x55642c059300 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55642c0592e8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55642c059260 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55642c042410 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55642c059230 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55642c051ba8
|       | |   `-ImplicitCastExpr 0x55642c059218 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55642c0591e8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|       | |       `-MemberExpr 0x55642c0591b8 <col:40> 'String::rep_t' lvalue ->_r 0x55642c052350
|       | |         `-CXXThisExpr 0x55642c0591a8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55642c059400 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55642c0593e8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55642c059328 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55642c057280 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55642c059428 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55642c059388 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|       |       `-MemberExpr 0x55642c059358 <col:15> 'String::rep_t' lvalue ->_r 0x55642c052350
|       |         `-CXXThisExpr 0x55642c059348 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55642c059500 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55642c059498 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55642c0522d8
|         | `-MemberExpr 0x55642c059468 <col:6> 'String::rep_t' lvalue ->_r 0x55642c052350
|         |   `-CXXThisExpr 0x55642c059458 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55642c0594e8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55642c0594c8 <col:16> 'int' 0
|-CXXMethodDecl 0x55642c052d38 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55642c052b58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55642c052bd8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55642c052c50 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55642c052e10 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55642c053060 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55642c052ec8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55642c052f48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55642c052fc0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55642c053248 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55642c053130 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55642c0531b0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55642c053348 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55642c059638 <col:41, line:286:5>
|   `-ReturnStmt 0x55642c059628 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55642c0595f8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55642c0595c0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55642c0595a8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55642c059588 <col:46> 'int' 1
|-CXXMethodDecl 0x55642c0535e8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55642c053400 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55642c053480 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55642c053500 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55642c057280 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55642c0536b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55642c057350 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55642c057520 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55642c057408 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55642c057488 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55642c0575e0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55642c0576a8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55642c0577a8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55642c057820 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55642c057898 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55642c057900 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55642c057a00 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55642c057a50 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c0579e0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55642c0579c0 <col:22> 'int' 14
|-CXXMethodDecl 0x55642c057c68 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55642c057a80 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55642c057b00 <col:38> col:41 'int'
| `-ParmVarDecl 0x55642c057b80 <col:43> col:46 'int'
|-FriendDecl 0x55642c057d70 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55642c057e00 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55642c11a1e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55642c11a3b8 prev 0x55642c11a1e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55642c11a448 <col:46, col:52> col:46 public
|-TypedefDecl 0x55642c11a470 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c11bdd0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55642c11bd80 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55642c11bd60 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55642c11a688 'type'
|     `-SubstTemplateTypeParmType 0x55642c11a650 'String' sugar
|       |-TemplateTypeParmType 0x55642c00c800 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c00c7b0 'T'
|       `-RecordType 0x55642c048ff0 'String'
|         `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c11be88 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55642c11be50 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55642c11be30 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55642c11bdd0 'type'
|     `-ElaboratedType 0x55642c11bd80 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55642c11bd60 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55642c11a688 'type'
|         `-SubstTemplateTypeParmType 0x55642c11a650 'String' sugar
|           |-TemplateTypeParmType 0x55642c00c800 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55642c00c7b0 'T'
|           `-RecordType 0x55642c048ff0 'String'
|             `-CXXRecord 0x55642c048f60 'String'
|-CXXMethodDecl 0x55642c11c008 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55642c11bf18 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55642c11c0f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55642c11c1d8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55642c11c1d8
|-CXXMethodDecl 0x55642c2c6f08 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55642c11c3b0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55642c2c7148 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55642c2c6fc0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c2c7038 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c7318 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55642c2c7208 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c2c7280 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c7478 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55642c2c7548 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55642c2c7798 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55642c2c7608 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55642c2c7680 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c79f8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55642c2c7868 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55642c2c78e0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c7bb8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55642c2c7ac8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c7d78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55642c2c7c80 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c7e30 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55642c2c7ee0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55642c2c8118 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55642c2c7f90 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c2c8008 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55642c2c83b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55642c2c82c0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55642c2c8480 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55642c2c84d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55642c2c8520 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55642c280790 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55642c118c48 prev 0x55642c280790 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55642c11a150 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55642c11a100 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55642c11a0e0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55642c119f90 'type'
|     `-SubstTemplateTypeParmType 0x55642c119e20 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55642bfe25b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55642bfe2558 'F'
|       `-RecordType 0x55642c119a80 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55642c1199a0 'typed_array_memory'
|-FieldDecl 0x55642c2c8570 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55642c2c85c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55642c2c85f8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|   |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55642c019ac8 'T'
|   `-RecordType 0x55642c048ff0 'String'
|     `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c8688 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55642c2c8650 'String &'
|   `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-RecordType 0x55642c048ff0 'String'
|       `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c8718 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55642c2c86e0 'const String &'
|   `-QualType 0x55642c118ce1 'const String' const
|     `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-RecordType 0x55642c048ff0 'String'
|         `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c87a8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55642c2c8770 'String *'
|   `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-RecordType 0x55642c048ff0 'String'
|       `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c8838 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55642c2c8800 'const String *'
|   `-QualType 0x55642c118ce1 'const String' const
|     `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-RecordType 0x55642c048ff0 'String'
|         `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c9490 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55642c2c9440 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55642c2c9420 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55642c2c9358 'type'
|     `-LValueReferenceType 0x55642c2c9320 'const String &'
|       `-QualType 0x55642c2c90c1 'const String' const
|         `-SubstTemplateTypeParmType 0x55642c2c90c0 'String' sugar
|           |-TemplateTypeParmType 0x55642bfec500 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55642bfec4a8 'T'
|           `-RecordType 0x55642c048ff0 'String'
|             `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c94f8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55642c2c86e0 'const String &'
|   `-QualType 0x55642c118ce1 'const String' const
|     `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-RecordType 0x55642c048ff0 'String'
|         `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c9550 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c2c95b8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55642c2c8770 'String *'
|   `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-RecordType 0x55642c048ff0 'String'
|       `-CXXRecord 0x55642c048f60 'String'
|-TypedefDecl 0x55642c2c9620 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55642c2c8800 'const String *'
|   `-QualType 0x55642c118ce1 'const String' const
|     `-SubstTemplateTypeParmType 0x55642c118ce0 'String' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-RecordType 0x55642c048ff0 'String'
|         `-CXXRecord 0x55642c048f60 'String'
|-EnumDecl 0x55642c2c9678 <line:134:5> col:5
| `-EnumConstantDecl 0x55642c2c9770 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55642c2c9750 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55642c01b1a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55642c01b180 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55642c01b160 <col:40> 'int' 1
|-CXXConstructorDecl 0x55642c2c97f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55642c2c9a88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c2c98b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c2c9950 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55642c2c9d18 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55642c2c9c00 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55642c2c9fd8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55642c2c9ec0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55642c2ca2f0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55642c2ca1d0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55642c2ca600 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55642c2ca4e0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55642c2ca8f0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c2ca738 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c2ca7b0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55642c2caa18 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55642c2caac8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2cab20 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cab68 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55642c2cac18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2cac70 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cad38 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55642c2cade8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2cae40 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cae88 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55642c2caf38 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2caf90 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cafd8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55642c2cb088 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2cb0e0 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cb128 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55642c2cb1d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c2cb230 <col:30> Inherited
|-CXXMethodDecl 0x55642c2cb258 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55642c2cb308 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55642c2cb3b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55642c2cb578 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c2cb468 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c2cb4e0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55642c2cb6c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55642c2cb638 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c2cb878 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55642c2cb780 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55642c2cb930 <col:20>
| `-OptimizeNoneAttr 0x55642c2cb988 <col:30>
|-CXXMethodDecl 0x55642c2cbaa8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55642c2cb9b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55642c2cbb60 <col:20>
| `-OptimizeNoneAttr 0x55642c2cbbb8 <col:30>
|-CXXMethodDecl 0x55642c2cbc70 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55642c2cbbe0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c2cbdb8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55642c2cbd28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c2cbee8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55642c2cbfe8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55642c2cc0b8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55642c2cc188 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55642c2cc2c8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55642c2cc238 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c2cc410 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55642c2cc380 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c2cc558 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55642c2cc4c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55642c2cc610 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55642c2cc710 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55642c2cc680 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55642c2cc7c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55642c2cc888 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55642c2cc988 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55642c2ccb08 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55642c2cca48 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55642c2cd2c8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55642c2ccbc0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55642c2cd228 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55642c2cd128 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55642c2cd3a8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55642c2cd4f8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55642c2cd468 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55642c2cd5b0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55642c2cd7f8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c2cd670 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55642c2cd6e8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55642c2cd988 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55642c2cd8c8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55642c2cdb98 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55642c2cda50 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55642c2cdac8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55642c2cdc58 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55642c2cdeb8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55642c2cddc0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55642c2cdf88 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55642c2cdf88

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c34ef08 prev 0x55642c1fe9b8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55642c34f000 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55642c34f090 <col:22, col:28> col:22 public
|-EnumDecl 0x55642c34f0b8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55642c34f1d8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f1b8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55642c34f1a0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55642c34f180 <col:14> 'int' 999
| |-EnumConstantDecl 0x55642c34f280 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f260 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55642c34f248 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55642c34f228 <col:14> 'int' 1
| |-EnumConstantDecl 0x55642c34f310 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f2f0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55642c34f2d0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55642c34f3a0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f380 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55642c34f360 <col:13> 'int' 1
| |-EnumConstantDecl 0x55642c34f430 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f410 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55642c34f3f0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55642c34f4c0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f4a0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55642c34f480 <col:13> 'int' 3
| |-EnumConstantDecl 0x55642c34f550 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f530 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55642c34f510 <col:15> 'int' 4
| |-EnumConstantDecl 0x55642c34f5e0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f5c0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55642c34f5a0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55642c34f670 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55642c34f650 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55642c34f630 <col:12> 'int' 6
| `-EnumConstantDecl 0x55642c34f700 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55642c34f6e0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55642c34f6c0 <col:13> 'int' 7
|-VarDecl 0x55642c34f770 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55642c34f7f8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55642c34f880 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55642c34f908 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55642c34f990 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55642c34fa18 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55642c34faa0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55642c34fb28 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55642c34fbb0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55642c34fc38 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55642c34fcc0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55642c34fdc0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55642c355118 '_nerrors' 'int'
| | `-IntegerLiteral 0x55642c3558a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55642c355918 <col:16, line:129:5>
|-CXXDestructorDecl 0x55642c34feb0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55642c355928 <col:29, line:132:5>
|-CXXMethodDecl 0x55642c350068 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55642c34ffa0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c350130 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55642c350218 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55642c355980 <col:44, line:161:5>
|   `-ReturnStmt 0x55642c355970 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55642c355958 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55642c355938 <col:9> 'ErrorHandler *' lvalue Var 0x55642c355178 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55642c350358 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55642c3502c8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55642c350420 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55642c3559e0 <col:43, line:173:5>
|   `-ReturnStmt 0x55642c3559d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55642c3559b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55642c355998 <col:9> 'ErrorHandler *' lvalue Var 0x55642c3551f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55642c3504d8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55642c350558 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55642c350668 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55642c3505d8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55642c3507b8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55642c350728 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55642c350910 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55642c350878 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55642c350a68 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55642c3509d0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55642c350bc0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55642c350b28 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55642c350dd0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55642c350c78 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55642c350cf8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55642c350fa8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55642c350e90 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55642c350f10 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55642c3511c8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55642c351068 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55642c3510e8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55642c3513a8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55642c351288 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55642c351308 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55642c351588 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55642c351468 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55642c3514e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55642c351710 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55642c351648 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55642c3518e0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55642c3517c8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55642c351840 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55642c355c38 <col:57, line:234:5>
|   `-ReturnStmt 0x55642c355c28 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55642c355c10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55642c355bb8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55642c355b88 <col:9> '<bound member function type>' ->xmessage 0x55642c351710
|         | `-CXXThisExpr 0x55642c355b78 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55642c355bf8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55642c355be0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55642c355b58 <col:18, col:40> 'String' (CXXTemporary 0x55642c355b58)
|               `-CallExpr 0x55642c355b20 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55642c355b08 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55642c355a80 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55642c3538d8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55642c355aa0 <col:31> 'const String' lvalue ParmVar 0x55642c351840 'str' 'const String &'
|                 `-DeclRefExpr 0x55642c355ac0 <col:36> 'const String' lvalue ParmVar 0x55642c3517c8 'anno' 'const String &'
|-CXXMethodDecl 0x55642c351bc0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55642c3519a0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55642c351a20 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55642c351a98 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55642c355ec8 <col:68, line:243:5>
|   `-ReturnStmt 0x55642c355eb8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55642c355ea0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55642c355e40 <col:9, col:41> 'int'
|         |-MemberExpr 0x55642c355e10 <col:9> '<bound member function type>' ->xmessage 0x55642c3518e0
|         | `-CXXThisExpr 0x55642c355e00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55642c355cd8 <col:18> 'const String' lvalue ParmVar 0x55642c3519a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55642c355e88 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55642c355e70 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55642c355de0 <col:24, col:40> 'String' (CXXTemporary 0x55642c355de0)
|               `-CXXMemberCallExpr 0x55642c355d78 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55642c355d08 <col:24> '<bound member function type>' ->vformat 0x55642c352da0
|                 | `-CXXThisExpr 0x55642c355cf8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55642c355da8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55642c355d38 <col:32> 'const char *' lvalue ParmVar 0x55642c351a20 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55642c355dc0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55642c355d58 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55642c351a98 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55642c351e60 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55642c351c88 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55642c351d00 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55642c351d78 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55642c356208 <col:23, line:254:5>
|   `-ReturnStmt 0x55642c3561f8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55642c3561e0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55642c356180 <col:9, col:71> 'int'
|         |-MemberExpr 0x55642c356150 <col:9> '<bound member function type>' ->xmessage 0x55642c3518e0
|         | `-CXXThisExpr 0x55642c356140 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55642c3561c8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55642c3561b0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55642c356100 <col:18, col:65> 'String' (CXXTemporary 0x55642c356100)
|         |     `-CallExpr 0x55642c356098 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55642c356080 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55642c355f68 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55642c3538d8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55642c355f88 <col:31> 'const String' lvalue ParmVar 0x55642c351d00 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55642c3560e0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55642c3560c8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55642c356060 <col:37, col:64> 'String' (CXXTemporary 0x55642c356060)
|         |             `-CallExpr 0x55642c356030 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55642c356018 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55642c355fa8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55642c353f28 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55642c355fc8 <col:56> 'const String' lvalue ParmVar 0x55642c351c88 'landmark' 'const String &'
|         `-DeclRefExpr 0x55642c356120 <col:68> 'const String' lvalue ParmVar 0x55642c351d78 'str' 'const String &'
|-CXXMethodDecl 0x55642c3521e0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55642c351f28 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55642c351fa0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55642c352020 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55642c352098 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55642c3564c0 <col:34, line:267:5>
|   `-ReturnStmt 0x55642c3564b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55642c356498 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55642c356430 <col:9, col:51> 'int'
|         |-MemberExpr 0x55642c356400 <col:9> '<bound member function type>' ->xmessage 0x55642c351e60
|         | `-CXXThisExpr 0x55642c3563f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55642c3562a8 <col:18> 'const String' lvalue ParmVar 0x55642c351f28 'landmark' 'const String &'
|         |-DeclRefExpr 0x55642c3562c8 <col:28> 'const String' lvalue ParmVar 0x55642c351fa0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55642c356480 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55642c356468 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55642c3563d0 <col:34, col:50> 'String' (CXXTemporary 0x55642c3563d0)
|               `-CXXMemberCallExpr 0x55642c356368 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55642c3562f8 <col:34> '<bound member function type>' ->vformat 0x55642c352da0
|                 | `-CXXThisExpr 0x55642c3562e8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55642c356398 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55642c356328 <col:42> 'const char *' lvalue ParmVar 0x55642c352020 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55642c3563b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55642c356348 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55642c352098 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55642c3522f0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55642c356540 <col:25, line:288:5>
|   `-ReturnStmt 0x55642c356530 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55642c356518 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55642c3564e8 <col:9> 'const int' lvalue ->_nerrors 0x55642c355118
|         `-CXXThisExpr 0x55642c3564d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55642c352500 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55642c3523a8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55642c352428 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55642c3527e8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55642c3525c8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55642c352648 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55642c3526c0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55642c352980 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55642c3528b8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55642c352bc8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55642c352a40 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55642c352ab8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55642c3567a0 <col:58, line:357:5>
|   `-ReturnStmt 0x55642c356790 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55642c356778 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55642c356748 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55642c356730 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55642c356710 <col:9, col:29> 'String' (CXXTemporary 0x55642c356710)
|             `-CallExpr 0x55642c3566a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55642c356688 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55642c356608 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55642c3527e8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55642c3565a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55642c3566d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55642c3565c8 <col:21> 'const char *' lvalue ParmVar 0x55642c352a40 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55642c3566f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55642c3565e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55642c352ab8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55642c352da0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55642c352c90 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55642c352d08 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55642c352ef8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55642c352e68 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55642c353040 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55642c352fb0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55642c3532e0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55642c3530f8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55642c353178 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55642c3531f0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55642c353440 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55642c3533b0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55642c3568b8 <col:37, line:441:5>
|   `-IfStmt 0x55642c3568a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55642c356828 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55642c3567f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55642c3567b8 <col:6> 'int' lvalue ParmVar 0x55642c3533b0 'level' 'int'
|     | `-ImplicitCastExpr 0x55642c356810 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55642c3567d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55642c34f4c0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55642c356888 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55642c356858 <col:8> 'int' lvalue ->_nerrors 0x55642c355118
|         `-CXXThisExpr 0x55642c356848 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55642c353508 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55642c356950 <col:26, line:448:5>
|   `-BinaryOperator 0x55642c356930 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55642c3568e0 <col:2> 'int' lvalue ->_nerrors 0x55642c355118
|     | `-CXXThisExpr 0x55642c3568d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55642c356910 <col:13> 'int' 0
|-CXXMethodDecl 0x55642c3536d0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55642c3535c0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55642c353638 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55642c3538d8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55642c353790 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55642c353808 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55642c353b88 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55642c353998 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55642c353a18 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55642c353a98 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55642c353c40 <col:59> 0 0
|-CXXMethodDecl 0x55642c353dd8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55642c353cb8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55642c353d38 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55642c356fc0 <col:70, line:534:5>
|   |-DeclStmt 0x55642c356ac0 <line:528:2, col:20>
|   | |-VarDecl 0x55642c356978 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55642c3569e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55642c356a18 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55642c356a80 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55642c356b90 <line:529:2, col:23>
|   | `-VarDecl 0x55642c356af0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55642c356b78 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55642c356b58 <col:18> 'const char *' lvalue ParmVar 0x55642c353cb8 'begin' 'const char *'
|   |-DoStmt 0x55642c356f58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55642c356e88 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55642c356e70 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55642c356e50 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55642c356ba8 <col:6> 'const char *' lvalue Var 0x55642c356af0 'x' 'const char *'
|   | |     `-CallExpr 0x55642c356da0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55642c356d88 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55642c356d40 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55642c3555f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55642c356e08 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55642c356df0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55642c356c60 <col:20, col:27> 'String' (CXXTemporary 0x55642c356c60)
|   | |       |     `-CXXTemporaryObjectExpr 0x55642c356c28 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55642c356e20 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55642c356c80 <col:30> 'const char *' lvalue Var 0x55642c356af0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55642c356e38 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55642c356ca0 <col:33> 'const char *' lvalue ParmVar 0x55642c353d38 'end' 'const char *'
|   | |       |-UnaryOperator 0x55642c356ce0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55642c356cc0 <col:39> 'String' lvalue Var 0x55642c356978 'name' 'String'
|   | |       |-UnaryOperator 0x55642c356d18 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55642c356cf8 <col:46> 'String' lvalue Var 0x55642c356a18 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55642c356d30 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55642c356f40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55642c356f28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55642c356f08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55642c356ed8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|   |         `-ImplicitCastExpr 0x55642c356ec0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55642c356ea0 <col:11> 'String' lvalue Var 0x55642c356978 'name' 'String'
|   `-ReturnStmt 0x55642c356fb0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55642c356f98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55642c356f78 <col:9> 'const char *' lvalue Var 0x55642c356af0 'x' 'const char *'
|-CXXMethodDecl 0x55642c353f28 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55642c353e98 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55642c3575c8 <col:55, line:550:5>
|   `-IfStmt 0x55642c3575a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55642c357200 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55642c3571e8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55642c3571d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55642c3571b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55642c357180 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|     | |       `-DeclRefExpr 0x55642c357020 <col:6> 'const String' lvalue ParmVar 0x55642c353e98 'x' 'const String &'
|     | `-BinaryOperator 0x55642c357160 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55642c357130 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55642c3570e0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55642c3570c8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55642c357080 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55642c065f90 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55642c357040 <col:11> 'const String' lvalue ParmVar 0x55642c353e98 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55642c357060 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55642c357148 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55642c357118 <col:19> 'char' 123
|     |-ReturnStmt 0x55642c357270 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55642c357240 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55642c357220 <col:13> 'const String' lvalue ParmVar 0x55642c353e98 'x' 'const String &'
|     `-IfStmt 0x55642c357578 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55642c357308 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55642c3572f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55642c3572d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55642c3572a0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |       `-DeclRefExpr 0x55642c357280 <col:11> 'const String' lvalue ParmVar 0x55642c353e98 'x' 'const String &'
|       |-ReturnStmt 0x55642c357490 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55642c357478 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55642c357448 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55642c357430 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55642c357410 <col:13, col:29> 'String' (CXXTemporary 0x55642c357410)
|       |         `-CallExpr 0x55642c3573c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55642c3573a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55642c357320 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55642c3536d0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55642c3573f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55642c357340 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55642c357360 <col:28> 'const String' lvalue ParmVar 0x55642c353e98 'x' 'const String &'
|       `-ReturnStmt 0x55642c357568 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55642c357550 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55642c357520 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55642c357508 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55642c3574e8 <col:13, col:20> 'String' (CXXTemporary 0x55642c3574e8)
|                 `-CXXTemporaryObjectExpr 0x55642c3574b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55642c3540f0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55642c353fe0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55642c354058 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55642c355898 <col:71> 'bool' false
|-CXXRecordDecl 0x55642c354210 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55642c354508 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55642c3544a0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55642c354440 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55642c354400 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55642c048ff0 'String'
|       | `-CXXRecord 0x55642c048f60 'String'
|       |-BuiltinType 0x55642bd1c3b0 'int'
|       `-DecayedType 0x55642c1ffa00 '__va_list_tag *' sugar
|         |-TypedefType 0x55642c1ff9d0 'va_list' sugar
|         | |-Typedef 0x55642bf3a0a0 'va_list'
|         | `-TypedefType 0x55642bf3a050 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55642be71c78 '__gnuc_va_list'
|         |   `-TypedefType 0x55642be71be0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55642bd5dc18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55642bd5dbc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55642bd1d100 '__va_list_tag'
|         |         `-CXXRecord 0x55642bd1d068 '__va_list_tag'
|         `-PointerType 0x55642bf3f940 '__va_list_tag *'
|           `-RecordType 0x55642bd1d100 '__va_list_tag'
|             `-CXXRecord 0x55642bd1d068 '__va_list_tag'
|-EnumDecl 0x55642c354560 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55642c354660 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354bc0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354640 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55642c354620 <col:16> 'int' 1
| |-EnumConstantDecl 0x55642c3546f0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354bd8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c3546d0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55642c3546b0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55642c354780 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354bf0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354760 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55642c354740 <col:22> 'int' 4
| |-EnumConstantDecl 0x55642c354810 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c08 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c3547f0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55642c3547d0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55642c3548a0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c20 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354880 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55642c354860 <col:22> 'int' 16
| |-EnumConstantDecl 0x55642c354930 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354910 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55642c3548f0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55642c3549c0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c50 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c3549a0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55642c354980 <col:17> 'int' 64
| |-EnumConstantDecl 0x55642c354a50 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c68 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354a30 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55642c354a10 <col:14> 'int' 128
| |-EnumConstantDecl 0x55642c354ae0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55642c354c80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c354ac0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55642c354aa0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55642c354b70 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55642c354c98 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c354b50 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55642c354b30 <col:12> 'int' 1024
|-CXXMethodDecl 0x55642c354ea8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55642c354cc0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55642c354d60 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55642c355030 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55642c354f68 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55642c3550d8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55642c355118 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55642c355178 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55642c3551f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55642c3555f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55642c355268 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55642c3552e8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55642c355368 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55642c3553e0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55642c355458 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55642c3554d0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55642c355718 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55642c355718
| `-ParmVarDecl 0x55642c355828 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55642c357928 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55642c357928
  `-ParmVarDecl 0x55642c357a38 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c1fea48 prev 0x55642c243238 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c1feb40 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55642c1febd0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55642c1fed08 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55642c1fec08 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55642c200130 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c200110 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55642c1ffca8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55642c2001c0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55642c200180 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55642c1fec08 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55642c1ffd10 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55642c200240 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c200200 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55642c1ffd70 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55642c200280 <col:54> 'bool' false
| `-CompoundStmt 0x55642c200388 <col:61, line:38:5>
|   `-BinaryOperator 0x55642c200368 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55642c200300 <col:9> 'const Element *' lvalue ->_context 0x55642c1ffc48
|     | `-CXXThisExpr 0x55642c2002f0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55642c200350 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55642c200330 <col:20> 'int' 0
|-CXXConstructorDecl 0x55642c1fef18 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c1fedc8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55642c1fee40 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55642c200168 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c200148 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55642c1ffc48 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55642c2003e0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55642c2003a0 <col:20> 'const Element *' lvalue ParmVar 0x55642c1fedc8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55642c1ffca8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55642c200460 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55642c200420 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55642c1fee40 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55642c1ffd10 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55642c2004e0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55642c2004a0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55642c1ffd70 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55642c200520 <col:73> 'bool' false
| `-CompoundStmt 0x55642c200598 <col:80, line:46:5>
|-CXXMethodDecl 0x55642c1ff048 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55642c200610 <col:36, line:51:5>
|   `-ReturnStmt 0x55642c200600 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55642c2005e8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55642c2005b8 <col:16> 'const Element *const' lvalue ->_context 0x55642c1ffc48
|         `-CXXThisExpr 0x55642c2005a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55642c1ff138 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55642c200690 <col:32, line:57:5>
|   `-ReturnStmt 0x55642c200680 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55642c200668 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55642c200638 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55642c1ffca8
|         `-CXXThisExpr 0x55642c200628 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55642c1ff1f8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55642c1ff380 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55642c1ff2b0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55642c1ff4d0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55642c1ff440 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55642c1ff620 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55642c1ff590 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55642c1ff828 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55642c1ff6d8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55642c1ff750 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55642c1ffb58 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55642c1ff8e8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55642c1ff968 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55642c1ffa30 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55642c1ffc10 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55642c1ffc48 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55642c1ffca8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55642c1ffd10 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55642c1ffd70 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55642c1ffdc0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55642c1ffdc0
| `-ParmVarDecl 0x55642c1ffed8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55642c1fff78 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55642c1fff78
| `-ParmVarDecl 0x55642c200088 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55642c361950 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55642c30bf40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55642c30c118 prev 0x55642c30bf40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55642c30c1a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55642c30c1d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c30dda0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55642c30dd50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55642c30c680 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55642c30c580 'type'
|     `-TemplateSpecializationType 0x55642c30c510 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55642c30c3f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55642c30c3d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55642c30c3b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55642c30c4f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55642c30c410 'char_array'
|-TypedefDecl 0x55642c30de58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55642c30de20 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55642c30de00 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55642c30dda0 'type'
|     `-ElaboratedType 0x55642c30dd50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55642c30c680 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55642c30c580 'type'
|         `-TemplateSpecializationType 0x55642c30c510 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55642c30c3f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55642c30c3d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55642c30c3b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55642c30c4f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55642c30c410 'char_array'
|-CXXMethodDecl 0x55642c30dfd8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55642c30dee8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55642c30e0c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55642c30e1a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55642c30e478 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55642c30e380 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55642c30e6b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55642c30e530 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c30e5a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c30e888 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55642c30e778 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c30e7f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c30e9e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55642c30eab8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55642c30ed08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55642c30eb78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55642c30ebf0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c316b48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55642c30edd8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55642c30ee50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c316d08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55642c316c18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c316ec8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55642c316dd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c316f80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55642c317030 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55642c317268 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55642c3170e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55642c317158 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55642c317508 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55642c317410 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55642c3175d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55642c317620 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55642c317670 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55642c30a948 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55642c30ab58 prev 0x55642c30a948 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55642c30beb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55642c30be60 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55642c30be40 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55642c30bcf0 'type'
|     `-SubstTemplateTypeParmType 0x55642c30bb10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55642bfe1e30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642bfe1dd8 'T'
|       `-RecordType 0x55642c30b660 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55642c30b578 'sized_array_memory'
|-FieldDecl 0x55642c3176c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55642c317710 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55642c317748 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|   |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55642c019ac8 'T'
|   `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c3177d8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55642c3177a0 'int &'
|   `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c317898 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55642c317860 'const int &'
|   `-QualType 0x55642c30abf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c317928 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55642c3178f0 'int *'
|   `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c3179b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55642c317980 'const int *'
|   `-QualType 0x55642c30abf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c3185a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55642c318550 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55642c318530 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55642c3184c0 'type'
|     `-SubstTemplateTypeParmType 0x55642c318280 'int' sugar
|       |-TemplateTypeParmType 0x55642bfecc30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642bfecbe0 'T'
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c318608 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55642c317860 'const int &'
|   `-QualType 0x55642c30abf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c318660 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c3186c8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55642c3178f0 'int *'
|   `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|     |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55642c019ac8 'T'
|     `-BuiltinType 0x55642bd1c3b0 'int'
|-TypedefDecl 0x55642c318730 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55642c317980 'const int *'
|   `-QualType 0x55642c30abf1 'const int' const
|     `-SubstTemplateTypeParmType 0x55642c30abf0 'int' sugar
|       |-TemplateTypeParmType 0x55642c019b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55642c019ac8 'T'
|       `-BuiltinType 0x55642bd1c3b0 'int'
|-EnumDecl 0x55642c318788 <line:134:5> col:5
| `-EnumConstantDecl 0x55642c318880 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55642c318860 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55642c01b1a8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55642c01b180 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55642c01b160 <col:40> 'int' 1
|-CXXConstructorDecl 0x55642c318908 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55642c318b58 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c3189c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c318a60 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55642c318e18 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55642c318d00 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55642c3190d8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55642c318fc0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55642c319420 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55642c319300 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55642c319730 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55642c319610 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55642c319a20 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c319868 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c3198e0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55642c319b48 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55642c319c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c319c80 <col:30> Inherited
|-CXXMethodDecl 0x55642c319cc8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55642c319d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c319dd0 <col:30> Inherited
|-CXXMethodDecl 0x55642c319e98 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55642c319f48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c319fa0 <col:30> Inherited
|-CXXMethodDecl 0x55642c319fe8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55642c31a098 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c31a0f0 <col:30> Inherited
|-CXXMethodDecl 0x55642c31a138 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55642c31a1e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c31a240 <col:30> Inherited
|-CXXMethodDecl 0x55642c31a288 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55642c31a338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55642c31a390 <col:30> Inherited
|-CXXMethodDecl 0x55642c31a3b8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55642c31a468 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55642c31a518 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55642c31a6d8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c31a5c8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55642c31a640 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55642c31a828 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55642c31a798 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c31a9d8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55642c31a8e0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55642c31aa90 <col:20>
| `-OptimizeNoneAttr 0x55642c31aae8 <col:30>
|-CXXMethodDecl 0x55642c31ac08 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55642c31ab10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55642c31acc0 <col:20>
| `-OptimizeNoneAttr 0x55642c31ad18 <col:30>
|-CXXMethodDecl 0x55642c31add0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55642c31ad40 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c31af18 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55642c31ae88 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c31b048 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55642c31b178 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55642c31b248 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55642c31b318 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55642c31b458 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55642c31b3c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c31b5a0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55642c31b510 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55642c31b6e8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55642c31b658 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55642c31b7a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55642c31b8a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55642c31b810 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55642c31b958 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55642c31ba18 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55642c31bb18 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55642c31bc98 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55642c31bbd8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55642c31c458 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55642c31bd50 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55642c31c3b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55642c31c2b8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55642c31c538 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55642c31c688 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55642c31c5f8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55642c31c740 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55642c31c988 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55642c31c800 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55642c31c878 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55642c31cb48 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55642c31ca58 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55642c31cd98 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55642c31cc10 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55642c31cc88 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55642c31ce58 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55642c31d0b8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55642c31cfc0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55642c31d188 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c308ab8 prev 0x55642c2eafc8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55642c308bb0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55642c308ca0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55642c32ee40 <col:16, line:828:9>
|-CXXDestructorDecl 0x55642c308d90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55642c32ee50 <col:25, line:830:9>
|-CXXMethodDecl 0x55642c308e90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55642c308f40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55642c308fe8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55642c308fe8
| `-ParmVarDecl 0x55642c3090f8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55642c3098b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55642c3098b8
  `-ParmVarDecl 0x55642c3099c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c2eadd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55642c2eaf38 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55642c2eafc8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55642c2eb080 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55642c2eb188 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55642c2eb0b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55642c31e748 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55642c31e728 <col:31> 'int' 0
|-CXXConstructorDecl 0x55642c2eb4a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55642c2eb320 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55642c2eb398 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55642c31e780 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55642c31e760 <col:59> 'int' 0
|-CXXConstructorDecl 0x55642c2eb680 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c2eb570 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55642c2eb5e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55642c31e7b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55642c31e798 <col:55> 'int' 0
|-CXXConstructorDecl 0x55642c2eba38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55642c2eb820 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55642c2eb898 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55642c2eb910 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55642c31e7f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55642c31e7d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55642c2ebbf8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55642c2ebb38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55642c2ebcf0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55642c2ebed8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55642c2ebde0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55642c2ebfc8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55642c320490 <col:24, line:291:5>
|   `-ReturnStmt 0x55642c320480 <line:290:9, col:79>
|     `-BinaryOperator 0x55642c320460 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55642c31ea48 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55642c31e9a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55642c31e980 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55642c31e878 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55642c31e860 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55642c31e848 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55642c31e818 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55642c30a8e0
|       | |   |       `-CXXThisExpr 0x55642c31e808 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55642c31e968 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55642c31e950 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55642c31e918 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55642c31e8e8 <col:28, col:35> '<bound member function type>' ->size 0x55642c2cb258
|       | |           `-ImplicitCastExpr 0x55642c31e938 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55642c31e8d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55642c31e8a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55642c30a8e0
|       | |                 `-CXXThisExpr 0x55642c31e890 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55642c31ea30 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55642c31ea18 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55642c31ea00 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55642c31e9d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55642c31d2d0
|       |         `-CXXThisExpr 0x55642c31e9c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55642c320440 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55642c320428 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55642c320410 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55642c3203d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55642c31eac8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55642c31ea78 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55642c31d380
|         |     |   `-CXXThisExpr 0x55642c31ea68 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55642c31eaa8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55642c3203f0 <col:79> 'int' 0
|-CXXMethodDecl 0x55642c2ec088 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55642c320668 <col:32, line:296:5>
|   `-ReturnStmt 0x55642c320658 <line:295:9, col:49>
|     `-BinaryOperator 0x55642c320638 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55642c320518 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55642c320500 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55642c3204e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55642c3204b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55642c31d2d0
|       |       `-CXXThisExpr 0x55642c3204a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55642c320618 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55642c320600 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55642c3205e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55642c3205a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55642c320590 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55642c320540 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55642c31d380
|         |     |   `-CXXThisExpr 0x55642c320530 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55642c320570 <col:43> 'int' 0
|         `-IntegerLiteral 0x55642c3205c8 <col:49> 'int' 0
|-CXXMethodDecl 0x55642c2ec178 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55642c320878 <col:19, line:306:5>
|   |-IfStmt 0x55642c320798 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55642c3206d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55642c3206c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55642c320690 <col:13> 'Vector<String> *' lvalue ->_conf 0x55642c30a8e0
|   | |     `-CXXThisExpr 0x55642c320680 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55642c320778 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55642c320748 <col:13, col:20> '<bound member function type>' ->clear 0x55642c2cdc58
|   |     `-ImplicitCastExpr 0x55642c320730 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55642c320700 <col:13> 'Vector<String> *' lvalue ->_conf 0x55642c30a8e0
|   |         `-CXXThisExpr 0x55642c3206f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55642c320820 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55642c3207f0 <col:9, col:16> '<bound member function type>' .clear 0x55642c31ce58
|   |   `-MemberExpr 0x55642c3207c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55642c31d270
|   |     `-CXXThisExpr 0x55642c3207b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55642c320868 <line:305:9, col:17>
|     `-UnaryOperator 0x55642c320850 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c320840 <col:17> 'Args *' this
|-CXXMethodDecl 0x55642c2ec3f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55642c2ec300 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55642c2ec578 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55642c2ec4b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55642c2ec8f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55642c2ec620 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55642c2ec858 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55642c2ec6c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55642c2ec740 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55642c320b98 <col:67, line:327:5>
|     |-WhileStmt 0x55642c320b48 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55642c320960 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55642c3208e0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55642c23b708 0x55642c084ce8 0x55642c0849c0 0x55642c0761a0 0x55642c075e50 0x55642c075740 0x55642c0480b0 0x55642bfd4570
|     | | |-DeclRefExpr 0x55642c3208a0 <col:16> 'Iter' lvalue ParmVar 0x55642c2ec6c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55642c3208c0 <col:25> 'Iter' lvalue ParmVar 0x55642c2ec740 'end' 'Iter'
|     | `-CompoundStmt 0x55642c320b28 <col:30, line:325:9>
|     |   |-CallExpr 0x55642c320ac8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55642c3209a8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55642c320a98 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55642c320a28 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|     |   |   `-DeclRefExpr 0x55642c320a08 <col:24> 'Iter' lvalue ParmVar 0x55642c2ec6c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55642c320b10 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55642c320af0 <col:15> 'Iter' lvalue ParmVar 0x55642c2ec6c8 'begin' 'Iter'
|     `-ReturnStmt 0x55642c320b88 <line:326:9, col:17>
|       `-UnaryOperator 0x55642c320b70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c320b60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55642c2eca00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55642c2ec970 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55642c2ecb48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55642c2ecab8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55642c2ecc10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55642c320c78 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55642c320c18 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55642c320bc8 <col:9> '<bound member function type>' ->reset_from 0x55642c31d6f8
|   | | `-CXXThisExpr 0x55642c320bb8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55642c320bf8 <col:20> 'int' 0
|   `-ReturnStmt 0x55642c320c68 <line:352:9, col:17>
|     `-UnaryOperator 0x55642c320c50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c320c40 <col:17> 'Args *' this
|-VarDecl 0x55642c2eccc8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55642c2ecd30 <col:38> 'int' 1
|-VarDecl 0x55642c2ecdc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55642c2ece28 <col:39> 'int' 2
|-VarDecl 0x55642c2eceb8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55642c2ecf20 <col:39> 'int' 4
|-VarDecl 0x55642c2ecfb0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55642c2ed018 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55642c2ed398 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55642c2ed090 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2ed2f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55642c2ed140 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ed1e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55642c320dd0 <col:43, line:371:5>
|     `-ReturnStmt 0x55642c320dc0 <line:370:9, col:34>
|       `-CallExpr 0x55642c320d88 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c320ca8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c320d28 <col:21> 'const char *' lvalue ParmVar 0x55642c2ed140 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c320d48 <col:30> 'int' 0
|         `-DeclRefExpr 0x55642c320d68 <col:33> 'T' lvalue ParmVar 0x55642c2ed1e8 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2ed6c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55642c2ed400 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2ed628 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55642c2ed4b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ed558 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55642c320f20 <col:45, line:375:5>
|     `-ReturnStmt 0x55642c320f10 <line:374:9, col:42>
|       `-CallExpr 0x55642c320ed8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c320df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c320e78 <col:21> 'const char *' lvalue ParmVar 0x55642c2ed4b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c320e98 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55642c320eb8 <col:41> 'T' lvalue ParmVar 0x55642c2ed558 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2ed9f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55642c2ed730 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55642c2ed958 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55642c2ed7e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55642c2ed888 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55642c321070 <col:45, line:379:5>
| |   `-ReturnStmt 0x55642c321060 <line:378:9, col:43>
| |     `-CallExpr 0x55642c321028 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55642c320f48 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55642c320fc8 <col:21> 'const char *' lvalue ParmVar 0x55642c2ed7e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55642c320fe8 <col:30> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
| |       `-DeclRefExpr 0x55642c321008 <col:42> 'T' lvalue ParmVar 0x55642c2ed888 'x' 'T &'
| `-CXXMethodDecl 0x55642c361db8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55642c361bd8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55642c361ca8 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55642c2edd28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55642c2eda60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2edc88 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55642c2edb10 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2edbb8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55642c321270 <col:46, line:383:5>
|     `-ReturnStmt 0x55642c321260 <line:382:9, col:55>
|       `-CallExpr 0x55642c321228 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c321118 <col:21> 'const char *' lvalue ParmVar 0x55642c2edb10 'keyword' 'const char *'
|         |-BinaryOperator 0x55642c3211e8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55642c321198 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55642c321178 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55642c3211d0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55642c3211b0 <col:42> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55642c321208 <col:54> 'T' lvalue ParmVar 0x55642c2edbb8 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2ee128 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55642c2edd90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2ee088 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55642c2ede40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2edec0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2edf68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55642c3213b0 <col:54, line:388:5>
|     |-CallExpr 0x55642c321338 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c321288 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55642c3212c8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55642c3212d8 <col:30> 'const char *' lvalue ParmVar 0x55642c2ede40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c3212f8 <col:39> 'int' lvalue ParmVar 0x55642c2edec0 'flags' 'int'
|     | `-DeclRefExpr 0x55642c321318 <col:46> 'T' lvalue ParmVar 0x55642c2edf68 'x' 'T &'
|     `-ReturnStmt 0x55642c3213a0 <line:387:9, col:17>
|       `-UnaryOperator 0x55642c321388 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c321378 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2ee5d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55642c2ee198 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2ee218 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55642c2ee538 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55642c2ee2d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ee378 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2ee418 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c321520 <col:74, line:403:5>
|     `-ReturnStmt 0x55642c321510 <line:402:9, col:56>
|       `-CallExpr 0x55642c3214d0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3213e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c321450 <col:28> 'const char *' lvalue ParmVar 0x55642c2ee2d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c321470 <col:37> 'int' 0
|         |-DeclRefExpr 0x55642c321490 <col:40> 'T' lvalue ParmVar 0x55642c2ee378 'x' 'T &'
|         `-DeclRefExpr 0x55642c3214b0 <col:43> 'const V' lvalue ParmVar 0x55642c2ee418 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55642c2eea48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55642c2ee648 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2ee6c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55642c2ee9a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55642c2ee788 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ee828 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2ee8c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c321688 <col:76, line:407:5>
|     `-ReturnStmt 0x55642c321678 <line:406:9, col:65>
|       `-CallExpr 0x55642c321638 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321548 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3215b8 <col:28> 'const char *' lvalue ParmVar 0x55642c2ee788 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c3215d8 <col:37> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
|         |-DeclRefExpr 0x55642c3215f8 <col:49> 'T' lvalue ParmVar 0x55642c2ee828 'x' 'T &'
|         `-DeclRefExpr 0x55642c321618 <col:52> 'const V' lvalue ParmVar 0x55642c2ee8c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55642c2eef98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55642c2eeab8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2eeb38 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55642c2eeef8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55642c2eebf8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2eec78 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2eed18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2eedb8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c3217f0 <col:85, line:412:5>
|     |-CallExpr 0x55642c321770 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c3216a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55642c3216e0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55642c3216f0 <col:37> 'const char *' lvalue ParmVar 0x55642c2eebf8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c321710 <col:46> 'int' lvalue ParmVar 0x55642c2eec78 'flags' 'int'
|     | |-DeclRefExpr 0x55642c321730 <col:53> 'T' lvalue ParmVar 0x55642c2eed18 'x' 'T &'
|     | `-DeclRefExpr 0x55642c321750 <col:56> 'const V' lvalue ParmVar 0x55642c2eedb8 'default_value' 'const V &'
|     `-ReturnStmt 0x55642c3217e0 <line:411:9, col:17>
|       `-UnaryOperator 0x55642c3217c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c3217b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2ef428 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55642c2ef010 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2ef088 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2ef388 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2ef148 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ef1c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2ef268 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55642c321970 <col:53, line:425:5>
|     `-ReturnStmt 0x55642c321960 <line:424:9, col:42>
|       `-CallExpr 0x55642c321920 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321820 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3218a0 <col:21> 'const char *' lvalue ParmVar 0x55642c2ef148 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c3218c0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55642c3218e0 <col:33> 'P' lvalue ParmVar 0x55642c2ef1c0 'parser' 'P'
|         `-DeclRefExpr 0x55642c321900 <col:41> 'T' lvalue ParmVar 0x55642c2ef268 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2ef878 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55642c2ef498 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2ef518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2ef7d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2ef5d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ef650 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2ef6f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55642c321ae8 <col:55, line:429:5>
|     `-ReturnStmt 0x55642c321ad8 <line:428:9, col:50>
|       `-CallExpr 0x55642c321a98 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c321a18 <col:21> 'const char *' lvalue ParmVar 0x55642c2ef5d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c321a38 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55642c321a58 <col:41> 'P' lvalue ParmVar 0x55642c2ef650 'parser' 'P'
|         `-DeclRefExpr 0x55642c321a78 <col:49> 'T' lvalue ParmVar 0x55642c2ef6f8 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2efcc8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55642c2ef8e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2ef968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2efc28 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2efa28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2efaa0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2efb48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55642c321c60 <col:55, line:433:5>
|     `-ReturnStmt 0x55642c321c50 <line:432:9, col:51>
|       `-CallExpr 0x55642c321c10 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321b10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c321b90 <col:21> 'const char *' lvalue ParmVar 0x55642c2efa28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c321bb0 <col:30> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
|         |-DeclRefExpr 0x55642c321bd0 <col:42> 'P' lvalue ParmVar 0x55642c2efaa0 'parser' 'P'
|         `-DeclRefExpr 0x55642c321bf0 <col:50> 'T' lvalue ParmVar 0x55642c2efb48 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2f0118 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55642c2efd38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2efdb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2f0078 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2efe78 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2efef0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2eff98 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55642c321e88 <col:56, line:437:5>
|     `-ReturnStmt 0x55642c321e78 <line:436:9, col:63>
|       `-CallExpr 0x55642c321e38 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c321c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c321d08 <col:21> 'const char *' lvalue ParmVar 0x55642c2efe78 'keyword' 'const char *'
|         |-BinaryOperator 0x55642c321dd8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55642c321d88 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55642c321d68 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55642c321dc0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55642c321da0 <col:42> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55642c321df8 <col:54> 'P' lvalue ParmVar 0x55642c2efef0 'parser' 'P'
|         `-DeclRefExpr 0x55642c321e18 <col:62> 'T' lvalue ParmVar 0x55642c2eff98 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2f0648 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55642c2f0188 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f0208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2f05a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55642c2f02c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f0348 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2f03c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f0468 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55642c321ff0 <col:64, line:442:5>
|     |-CallExpr 0x55642c321f70 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c321ea0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55642c321ee0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55642c321ef0 <col:30> 'const char *' lvalue ParmVar 0x55642c2f02c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c321f10 <col:39> 'int' lvalue ParmVar 0x55642c2f0348 'flags' 'int'
|     | |-DeclRefExpr 0x55642c321f30 <col:46> 'P' lvalue ParmVar 0x55642c2f03c0 'parser' 'P'
|     | `-DeclRefExpr 0x55642c321f50 <col:54> 'T' lvalue ParmVar 0x55642c2f0468 'x' 'T &'
|     `-ReturnStmt 0x55642c321fe0 <line:441:9, col:17>
|       `-UnaryOperator 0x55642c321fc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c321fb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2f0c48 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55642c2f06c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f0738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55642c2f07b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55642c2f0ba8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55642c2f0880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f08f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f0998 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2f0a68 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c322188 <col:84, line:458:5>
|     `-ReturnStmt 0x55642c322178 <line:457:9, col:64>
|       `-CallExpr 0x55642c322130 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c322020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322090 <col:28> 'const char *' lvalue ParmVar 0x55642c2f0880 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c3220b0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55642c3220d0 <col:40> 'P' lvalue ParmVar 0x55642c2f08f8 'parser' 'P'
|         |-DeclRefExpr 0x55642c3220f0 <col:48> 'T' lvalue ParmVar 0x55642c2f0998 'x' 'T &'
|         `-DeclRefExpr 0x55642c322110 <col:51> 'const V' lvalue ParmVar 0x55642c2f0a68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55642c2f11c8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55642c2f0cc0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f0d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55642c2f0db8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55642c2f1128 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55642c2f0e80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f0ef8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f0f98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2f1038 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c322318 <col:86, line:462:5>
|     `-ReturnStmt 0x55642c322308 <line:461:9, col:73>
|       `-CallExpr 0x55642c3222c0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3221b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322220 <col:28> 'const char *' lvalue ParmVar 0x55642c2f0e80 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c322240 <col:37> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
|         |-DeclRefExpr 0x55642c322260 <col:49> 'P' lvalue ParmVar 0x55642c2f0ef8 'parser' 'P'
|         |-DeclRefExpr 0x55642c322280 <col:57> 'T' lvalue ParmVar 0x55642c2f0f98 'x' 'T &'
|         `-DeclRefExpr 0x55642c3222a0 <col:60> 'const V' lvalue ParmVar 0x55642c2f1038 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55642c2f1828 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55642c2f1240 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f12b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55642c2f1338 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55642c2f1788 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55642c2f1400 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f1480 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2f14f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f1598 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2f1638 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55642c3224a8 <col:95, line:467:5>
|     |-CallExpr 0x55642c322420 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c322330 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55642c322370 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55642c322380 <col:37> 'const char *' lvalue ParmVar 0x55642c2f1400 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c3223a0 <col:46> 'int' lvalue ParmVar 0x55642c2f1480 'flags' 'int'
|     | |-DeclRefExpr 0x55642c3223c0 <col:53> 'P' lvalue ParmVar 0x55642c2f14f8 'parser' 'P'
|     | |-DeclRefExpr 0x55642c3223e0 <col:61> 'T' lvalue ParmVar 0x55642c2f1598 'x' 'T &'
|     | `-DeclRefExpr 0x55642c322400 <col:64> 'const V' lvalue ParmVar 0x55642c2f1638 'default_value' 'const V &'
|     `-ReturnStmt 0x55642c322498 <line:466:9, col:17>
|       `-UnaryOperator 0x55642c322480 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c322470 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2f1e08 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55642c2f18a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f1928 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c2f19a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c2f1d68 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c2f1a70 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f1ae8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f1b88 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55642c2f1c28 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55642c322650 <col:63, line:481:5>
|     `-ReturnStmt 0x55642c322640 <line:480:9, col:47>
|       `-CallExpr 0x55642c3225f8 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3224d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322558 <col:21> 'const char *' lvalue ParmVar 0x55642c2f1a70 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c322578 <col:30> 'int' 0
|         |-DeclRefExpr 0x55642c322598 <col:33> 'P' lvalue ParmVar 0x55642c2f1ae8 'parser' 'P'
|         |-DeclRefExpr 0x55642c3225b8 <col:41> 'T1' lvalue ParmVar 0x55642c2f1b88 'x1' 'T1 &'
|         `-DeclRefExpr 0x55642c3225d8 <col:45> 'T2' lvalue ParmVar 0x55642c2f1c28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55642c2f2388 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55642c2f1e80 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f1ef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c2f1f78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c2f22e8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c2f2040 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f20b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f2158 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55642c2f21f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55642c3227f0 <col:65, line:485:5>
|     `-ReturnStmt 0x55642c3227e0 <line:484:9, col:55>
|       `-CallExpr 0x55642c322798 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c322678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3226f8 <col:21> 'const char *' lvalue ParmVar 0x55642c2f2040 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c322718 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55642c322738 <col:41> 'P' lvalue ParmVar 0x55642c2f20b8 'parser' 'P'
|         |-DeclRefExpr 0x55642c322758 <col:49> 'T1' lvalue ParmVar 0x55642c2f2158 'x1' 'T1 &'
|         `-DeclRefExpr 0x55642c322778 <col:53> 'T2' lvalue ParmVar 0x55642c2f21f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55642c2f7af8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55642c2f2400 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f2478 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c2f24f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c2f7a58 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c2f25c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f2638 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f78c0 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55642c2f7968 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55642c322990 <col:65, line:489:5>
|     `-ReturnStmt 0x55642c322980 <line:488:9, col:56>
|       `-CallExpr 0x55642c322938 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c322818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322898 <col:21> 'const char *' lvalue ParmVar 0x55642c2f25c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c3228b8 <col:30> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
|         |-DeclRefExpr 0x55642c3228d8 <col:42> 'P' lvalue ParmVar 0x55642c2f2638 'parser' 'P'
|         |-DeclRefExpr 0x55642c3228f8 <col:50> 'T1' lvalue ParmVar 0x55642c2f78c0 'x1' 'T1 &'
|         `-DeclRefExpr 0x55642c322918 <col:54> 'T2' lvalue ParmVar 0x55642c2f7968 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55642c2f8078 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55642c2f7b70 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f7be8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c2f7c68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c2f7fd8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c2f7d30 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f7da8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f7e48 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55642c2f7ee8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55642c322be0 <col:66, line:493:5>
|     `-ReturnStmt 0x55642c322bd0 <line:492:9, col:68>
|       `-CallExpr 0x55642c322b88 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3229b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322a38 <col:21> 'const char *' lvalue ParmVar 0x55642c2f7d30 'keyword' 'const char *'
|         |-BinaryOperator 0x55642c322b08 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55642c322ab8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55642c322a98 <col:30> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55642c322af0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55642c322ad0 <col:42> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55642c322b28 <col:54> 'P' lvalue ParmVar 0x55642c2f7da8 'parser' 'P'
|         |-DeclRefExpr 0x55642c322b48 <col:62> 'T1' lvalue ParmVar 0x55642c2f7e48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55642c322b68 <col:66> 'T2' lvalue ParmVar 0x55642c2f7ee8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55642c2f86d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55642c2f80f0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f8168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c2f81e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c2f8638 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c2f82b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f8330 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2f83a8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f8448 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55642c2f84e8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55642c322d70 <col:74, line:498:5>
|     |-CallExpr 0x55642c322ce8 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c322bf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55642c322c38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55642c322c48 <col:30> 'const char *' lvalue ParmVar 0x55642c2f82b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c322c68 <col:39> 'int' lvalue ParmVar 0x55642c2f8330 'flags' 'int'
|     | |-DeclRefExpr 0x55642c322c88 <col:46> 'P' lvalue ParmVar 0x55642c2f83a8 'parser' 'P'
|     | |-DeclRefExpr 0x55642c322ca8 <col:54> 'T1' lvalue ParmVar 0x55642c2f8448 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55642c322cc8 <col:58> 'T2' lvalue ParmVar 0x55642c2f84e8 'x2' 'T2 &'
|     `-ReturnStmt 0x55642c322d60 <line:497:9, col:17>
|       `-UnaryOperator 0x55642c322d48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c322d38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2f8a38 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55642c2f8758 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2f8998 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55642c2f8810 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f8888 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55642c322eb8 <col:52, line:509:5>
|     `-ReturnStmt 0x55642c322ea8 <line:508:9, col:44>
|       `-CallExpr 0x55642c322e70 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c322da0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322e10 <col:26> 'const char *' lvalue ParmVar 0x55642c2f8810 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c322e30 <col:35> 'int' 0
|         `-DeclRefExpr 0x55642c322e50 <col:38> 'P' lvalue ParmVar 0x55642c2f8888 'parser' 'P'
|-FunctionTemplateDecl 0x55642c2f8d38 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55642c2f8aa0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2f8c98 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55642c2f8b50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f8bc8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55642c322ff8 <col:54, line:513:5>
|     `-ReturnStmt 0x55642c322fe8 <line:512:9, col:52>
|       `-CallExpr 0x55642c322fb0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c322ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c322f50 <col:26> 'const char *' lvalue ParmVar 0x55642c2f8b50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c322f70 <col:35> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55642c322f90 <col:46> 'P' lvalue ParmVar 0x55642c2f8bc8 'parser' 'P'
|-FunctionTemplateDecl 0x55642c2f9038 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55642c2f8da0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2f8f98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55642c2f8e50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f8ec8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55642c323138 <col:54, line:517:5>
|     `-ReturnStmt 0x55642c323128 <line:516:9, col:53>
|       `-CallExpr 0x55642c3230f0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323020 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323090 <col:26> 'const char *' lvalue ParmVar 0x55642c2f8e50 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c3230b0 <col:35> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int'
|         `-DeclRefExpr 0x55642c3230d0 <col:47> 'P' lvalue ParmVar 0x55642c2f8ec8 'parser' 'P'
|-FunctionTemplateDecl 0x55642c2f9338 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55642c2f90a0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2f9298 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55642c2f9150 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f91c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55642c323328 <col:55, line:521:5>
|     `-ReturnStmt 0x55642c323318 <line:520:9, col:65>
|       `-CallExpr 0x55642c3232e0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323160 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3231d0 <col:26> 'const char *' lvalue ParmVar 0x55642c2f9150 'keyword' 'const char *'
|         |-BinaryOperator 0x55642c3232a0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55642c323250 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55642c323230 <col:35> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55642c323288 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55642c323268 <col:47> 'const int' lvalue Var 0x55642c2ecdc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55642c3232c0 <col:59> 'P' lvalue ParmVar 0x55642c2f91c8 'parser' 'P'
|-FunctionTemplateDecl 0x55642c2f9708 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55642c2f93a0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2f9668 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55642c2f9450 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f94d0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2f9548 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55642c323468 <col:63, line:526:5>
|     |-CallExpr 0x55642c3233f0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c323340 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55642c323380 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55642c323390 <col:35> 'const char *' lvalue ParmVar 0x55642c2f9450 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55642c3233b0 <col:44> 'int' lvalue ParmVar 0x55642c2f94d0 'flags' 'int'
|     | `-DeclRefExpr 0x55642c3233d0 <col:51> 'P' lvalue ParmVar 0x55642c2f9548 'parser' 'P'
|     `-ReturnStmt 0x55642c323458 <line:525:9, col:17>
|       `-UnaryOperator 0x55642c323440 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c323430 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2f9b58 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55642c2f9778 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f97f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2f9ab8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2f98b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f9930 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f99d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55642c3235c0 <col:58, line:541:5>
|     `-ReturnStmt 0x55642c3235b0 <line:540:9, col:39>
|       `-CallExpr 0x55642c323578 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323518 <col:21> 'const char *' lvalue ParmVar 0x55642c2f98b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c323538 <col:30> 'P' lvalue ParmVar 0x55642c2f9930 'parser' 'P'
|         `-DeclRefExpr 0x55642c323558 <col:38> 'T' lvalue ParmVar 0x55642c2f99d8 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2f9fa8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55642c2f9bc8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2f9c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2f9f08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2f9d08 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2f9d80 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2f9e28 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55642c3236f8 <col:60, line:545:5>
|     `-ReturnStmt 0x55642c3236e8 <line:544:9, col:41>
|       `-CallExpr 0x55642c3236b0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3235e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323650 <col:23> 'const char *' lvalue ParmVar 0x55642c2f9d08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c323670 <col:32> 'P' lvalue ParmVar 0x55642c2f9d80 'parser' 'P'
|         `-DeclRefExpr 0x55642c323690 <col:40> 'T' lvalue ParmVar 0x55642c2f9e28 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fa3f8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55642c2fa018 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fa098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fa358 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2fa158 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fa1d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fa278 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55642c323830 <col:60, line:549:5>
|     `-ReturnStmt 0x55642c323820 <line:548:9, col:41>
|       `-CallExpr 0x55642c3237e8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323720 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323788 <col:23> 'const char *' lvalue ParmVar 0x55642c2fa158 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c3237a8 <col:32> 'P' lvalue ParmVar 0x55642c2fa1d0 'parser' 'P'
|         `-DeclRefExpr 0x55642c3237c8 <col:40> 'T' lvalue ParmVar 0x55642c2fa278 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fa848 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55642c2fa468 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fa4e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fa7a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2fa5a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fa620 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fa6c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55642c323968 <col:61, line:553:5>
|     `-ReturnStmt 0x55642c323958 <line:552:9, col:42>
|       `-CallExpr 0x55642c323920 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323858 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3238c0 <col:24> 'const char *' lvalue ParmVar 0x55642c2fa5a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c3238e0 <col:33> 'P' lvalue ParmVar 0x55642c2fa620 'parser' 'P'
|         `-DeclRefExpr 0x55642c323900 <col:41> 'T' lvalue ParmVar 0x55642c2fa6c8 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fad28 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55642c2fa8b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fa938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fac88 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55642c2fa9f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2faa78 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2faaf0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fab98 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55642c323ae0 <col:69, line:557:5>
|     `-ReturnStmt 0x55642c323ad0 <line:556:9, col:46>
|       `-CallExpr 0x55642c323a90 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323990 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323a10 <col:21> 'const char *' lvalue ParmVar 0x55642c2fa9f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c323a30 <col:30> 'int' lvalue ParmVar 0x55642c2faa78 'flags' 'int'
|         |-DeclRefExpr 0x55642c323a50 <col:37> 'P' lvalue ParmVar 0x55642c2faaf0 'parser' 'P'
|         `-DeclRefExpr 0x55642c323a70 <col:45> 'T' lvalue ParmVar 0x55642c2fab98 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fb038 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55642c2fada0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2faf98 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55642c2fae50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2faec8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55642c323c20 <col:56, line:571:5>
|     `-ReturnStmt 0x55642c323c10 <line:570:9, col:48>
|       `-CallExpr 0x55642c323bd8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323b78 <col:30> 'const char *' lvalue ParmVar 0x55642c2fae50 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c323b98 <col:39> 'int' 0
|         `-DeclRefExpr 0x55642c323bb8 <col:42> 'P' lvalue ParmVar 0x55642c2faec8 'parser' 'P'
|-FunctionTemplateDecl 0x55642c2fb3c8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55642c2fb0a0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c2fb328 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55642c2fb150 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fb1d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fb248 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55642c323df0 <col:67, line:576:5>
|     |-CallExpr 0x55642c323d78 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c323c38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55642c323c78 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55642c323c88 <col:39> 'const char *' lvalue ParmVar 0x55642c2fb150 'keyword' 'const char *'
|     | |-BinaryOperator 0x55642c323d38 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55642c323ce8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55642c323ca8 <col:48> 'int' lvalue ParmVar 0x55642c2fb1d0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55642c323d20 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55642c323d00 <col:56> 'const int' lvalue Var 0x55642c2ecfb0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55642c323d58 <col:68> 'P' lvalue ParmVar 0x55642c2fb248 'parser' 'P'
|     `-ReturnStmt 0x55642c323de0 <line:575:9, col:17>
|       `-UnaryOperator 0x55642c323dc8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c323db8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2fb818 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55642c2fb438 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fb4b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fb778 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55642c2fb578 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fb5f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fb698 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55642c323f60 <col:62, line:592:5>
|     `-ReturnStmt 0x55642c323f50 <line:591:9, col:51>
|       `-CallExpr 0x55642c323f10 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c323e20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c323e90 <col:30> 'const char *' lvalue ParmVar 0x55642c2fb578 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c323eb0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55642c323ed0 <col:42> 'P' lvalue ParmVar 0x55642c2fb5f0 'parser' 'P'
|         `-DeclRefExpr 0x55642c323ef0 <col:50> 'T' lvalue ParmVar 0x55642c2fb698 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fbcf8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55642c2fb888 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fb908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fbc58 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55642c2fb9c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fba48 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fbac0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fbb68 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55642c324158 <col:73, line:597:5>
|     |-CallExpr 0x55642c3240d8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c323f78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55642c323fb8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55642c323fc8 <col:39> 'const char *' lvalue ParmVar 0x55642c2fb9c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55642c324078 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55642c324028 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55642c323fe8 <col:48> 'int' lvalue ParmVar 0x55642c2fba48 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55642c324060 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55642c324040 <col:56> 'const int' lvalue Var 0x55642c2ecfb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55642c324098 <col:68> 'P' lvalue ParmVar 0x55642c2fbac0 'parser' 'P'
|     | `-DeclRefExpr 0x55642c3240b8 <col:76> 'T' lvalue ParmVar 0x55642c2fbb68 'x' 'T &'
|     `-ReturnStmt 0x55642c324148 <line:596:9, col:17>
|       `-UnaryOperator 0x55642c324130 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c324120 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2fc2a8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55642c2fbd70 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fbde8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fc208 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55642c2fbea8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fbf20 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fc0e0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55642c3242c8 <col:65, line:614:5>
|     `-ReturnStmt 0x55642c3242b8 <line:613:9, col:46>
|       `-CallExpr 0x55642c324278 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c324188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c3241f8 <col:25> 'const char *' lvalue ParmVar 0x55642c2fbea8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c324218 <col:34> 'int' 0
|         |-DeclRefExpr 0x55642c324238 <col:37> 'P' lvalue ParmVar 0x55642c2fbf20 'parser' 'P'
|         `-DeclRefExpr 0x55642c324258 <col:45> 'Vector<T>' lvalue ParmVar 0x55642c2fc0e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55642c2fc6d8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55642c2fc318 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2fc638 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55642c2fc3d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fc520 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55642c3244e0 <col:55, line:618:5>
|     `-ReturnStmt 0x55642c3244d0 <line:617:9, col:55>
|       `-CallExpr 0x55642c324490 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c3242f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c324360 <col:25> 'const char *' lvalue ParmVar 0x55642c2fc3d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55642c324380 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55642c324450 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55642c324470 <col:54> 'Vector<T>' lvalue ParmVar 0x55642c2fc520 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55642c2fcca8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55642c2fc740 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fc7b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fcc08 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55642c2fc878 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fc8f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fc970 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2fcac0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55642c3246d8 <col:76, line:623:5>
|     |-CallExpr 0x55642c324658 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c3244f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55642c324538 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55642c324548 <col:34> 'const char *' lvalue ParmVar 0x55642c2fc878 'keyword' 'const char *'
|     | |-BinaryOperator 0x55642c3245f8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55642c3245a8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55642c324568 <col:43> 'int' lvalue ParmVar 0x55642c2fc8f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55642c3245e0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55642c3245c0 <col:51> 'const int' lvalue Var 0x55642c2ecfb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55642c324618 <col:63> 'P' lvalue ParmVar 0x55642c2fc970 'parser' 'P'
|     | `-DeclRefExpr 0x55642c324638 <col:71> 'Vector<T>' lvalue ParmVar 0x55642c2fcac0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55642c3246c8 <line:622:9, col:17>
|       `-UnaryOperator 0x55642c3246b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c3246a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2fd1e8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55642c2fcd20 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2fcd98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2fd148 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55642c2fce58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fced8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fd020 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55642c324940 <col:66, line:627:5>
|     `-ReturnStmt 0x55642c324930 <line:626:9, col:59>
|       `-CallExpr 0x55642c3248f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55642c324708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55642c324778 <col:25> 'const char *' lvalue ParmVar 0x55642c2fce58 'keyword' 'const char *'
|         |-DeclRefExpr 0x55642c324798 <col:34> 'int' lvalue ParmVar 0x55642c2fced8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55642c3248b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55642c3248d0 <col:58> 'Vector<T>' lvalue ParmVar 0x55642c2fd020 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55642c2fd278 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55642c3249c0 <col:25, line:633:5>
|   `-ReturnStmt 0x55642c3249b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55642c324998 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55642c324968 <col:16> 'const bool' lvalue ->_status 0x55642c30a748
|         `-CXXThisExpr 0x55642c324958 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55642c2fd3f8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55642c2fd330 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55642c324aa8 <col:27, line:639:5>
|   |-BinaryOperator 0x55642c324a50 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55642c3249d8 <col:9> 'bool' lvalue ParmVar 0x55642c2fd330 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55642c324a38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55642c324a08 <col:13> 'bool' lvalue ->_status 0x55642c30a748
|   |     `-CXXThisExpr 0x55642c3249f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55642c324a98 <line:638:9, col:17>
|     `-UnaryOperator 0x55642c324a80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c324a70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55642c2fd578 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55642c2fd4b8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55642c324b98 <col:39, line:644:5>
|   |-BinaryOperator 0x55642c324b40 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55642c324ac8 <col:9> 'bool' lvalue ParmVar 0x55642c2fd4b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55642c324b28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55642c324af8 <col:13> 'const bool' lvalue ->_status 0x55642c30a748
|   |     `-CXXThisExpr 0x55642c324ae8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55642c324b88 <line:643:9, col:17>
|     `-UnaryOperator 0x55642c324b70 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c324b60 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55642c2fd640 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55642c324c40 <col:30, line:651:5>
|   `-ReturnStmt 0x55642c324c30 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55642c324c18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55642c324be8 <col:16> 'bool' lvalue ->_read_status 0x55642c1ffd70
|         `-ImplicitCastExpr 0x55642c324bc8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55642c324bb8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55642c2fd788 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55642c2fd6f8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55642c324d48 <col:32, line:658:5>
|   |-BinaryOperator 0x55642c324cf0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55642c324c58 <col:9> 'bool' lvalue ParmVar 0x55642c2fd6f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55642c324cd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55642c324ca8 <col:13> 'bool' lvalue ->_read_status 0x55642c1ffd70
|   |     `-ImplicitCastExpr 0x55642c324c88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55642c324c78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55642c324d38 <line:657:9, col:17>
|     `-UnaryOperator 0x55642c324d20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c324d10 <col:17> 'Args *' this
|-CXXMethodDecl 0x55642c2fd8d8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55642c2fd848 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55642c324e58 <col:44, line:663:5>
|   |-BinaryOperator 0x55642c324e00 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55642c324d68 <col:9> 'bool' lvalue ParmVar 0x55642c2fd848 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55642c324de8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55642c324db8 <col:13> 'bool' lvalue ->_read_status 0x55642c1ffd70
|   |     `-ImplicitCastExpr 0x55642c324d98 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55642c324d88 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55642c324e48 <line:662:9, col:17>
|     `-UnaryOperator 0x55642c324e30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c324e20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55642c2fd9a0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55642c2fda68 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55642c2fdb30 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55642c2fdbf8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55642c2fdf08 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55642c2fdc98 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2fde68 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55642c2fdd78 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55642c325210 <col:19, line:706:5>
|     `-IfStmt 0x55642c3251e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55642c324f58 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55642c325118 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55642c3250e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55642c3250a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55642c324fb0 <col:42> '<bound member function type>' ->simple_slot 0x55642c31e3b0
|       |     | `-CXXThisExpr 0x55642c324fa0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55642c325048 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55642c325000 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55642c089788
|       |     | `-DeclRefExpr 0x55642c324fe0 <col:55> 'T' lvalue ParmVar 0x55642c2fdd78 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55642c325088 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55642c3251d8 <line:705:13, col:34>
|         `-CallExpr 0x55642c3251b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55642c325138 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55642c325190 <col:33> 'T' lvalue ParmVar 0x55642c2fdd78 'x' 'T &'
|-FunctionTemplateDecl 0x55642c2fe1d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55642c2fdf68 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2fe138 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55642c2fe048 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55642c3255f0 <col:31, line:717:5>
|     |-DeclStmt 0x55642c325350 <line:713:9, col:23>
|     | `-VarDecl 0x55642c325238 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55642c325328 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55642c3252b0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55642c325308 <col:21> 'T' lvalue ParmVar 0x55642c2fe048 'x' 'T &'
|     |-IfStmt 0x55642c3255a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55642c325448 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55642c325580 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55642c325520 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55642c3254b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|     |   | `-DeclRefExpr 0x55642c325490 <col:14> 'T *' lvalue Var 0x55642c325238 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55642c325560 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55642c3255d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55642c3255b8 <col:16> 'T *' lvalue Var 0x55642c325238 's' 'T *'
|-FunctionTemplateDecl 0x55642c2fe5e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55642c2fe238 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2fe2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55642c2fe548 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55642c2fe398 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55642c2fe438 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55642c325900 <col:37, line:726:5>
|     |-IfStmt 0x55642c325890 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55642c3258b0 <line:723:13, col:26>
|     | | `-VarDecl 0x55642c325658 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55642c325748 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55642c3256d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55642c325728 <col:25> 'T' lvalue ParmVar 0x55642c2fe398 'x' 'T &'
|     | |-DeclRefExpr 0x55642c325770 <col:16> 'T *' lvalue Var 0x55642c325658 's' 'T *'
|     | `-BinaryOperator 0x55642c325870 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55642c325820 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55642c3257b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|     |   | `-DeclRefExpr 0x55642c325790 <col:14> 'T *' lvalue Var 0x55642c325658 's' 'T *'
|     |   `-DeclRefExpr 0x55642c325850 <col:18> 'const V' lvalue ParmVar 0x55642c2fe438 'value' 'const V &'
|     `-ReturnStmt 0x55642c3258f0 <line:725:9, col:17>
|       `-UnaryOperator 0x55642c3258d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55642c3258c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55642c2fe9e8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55642c2fe650 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55642c2fe948 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55642c2fe700 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fe780 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fe828 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55642c326720 <col:65, line:737:5>
|     |-DeclStmt 0x55642c325998 <line:732:9, col:26>
|     | `-VarDecl 0x55642c325930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55642c3266e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55642c326708 <line:733:13, col:58>
|       | `-VarDecl 0x55642c3259c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55642c325ba0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55642c325b70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55642c325b58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55642c325b38 <col:26, col:58> 'String' (CXXTemporary 0x55642c325b38)
|       |           `-CXXMemberCallExpr 0x55642c325ac8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55642c325a38 <col:26> '<bound member function type>' ->find 0x55642c31d9c8
|       |             | `-CXXThisExpr 0x55642c325a28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55642c325b00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c325a68 <col:31> 'const char *' lvalue ParmVar 0x55642c2fe700 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55642c325b18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c325a88 <col:40> 'int' lvalue ParmVar 0x55642c2fe780 'flags' 'int'
|       |             `-DeclRefExpr 0x55642c325aa8 <col:47> 'Args::Slot *' lvalue Var 0x55642c325930 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55642c325c58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55642c325c40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55642c325c20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55642c325bf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |       `-ImplicitCastExpr 0x55642c325bd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55642c325bb8 <col:20> 'String' lvalue Var 0x55642c3259c0 'str' 'String'
|       `-CompoundStmt 0x55642c3266c8 <col:61, line:736:9>
|         |-DeclStmt 0x55642c326110 <line:734:13, col:76>
|         | `-VarDecl 0x55642c325ca8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55642c3260e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55642c326050 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55642c326098 <col:60> 'T' lvalue ParmVar 0x55642c2fe828 'variable' 'T &'
|         |     `-UnaryOperator 0x55642c3260c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55642c3260b8 <col:71> 'Args *' this
|         `-CallExpr 0x55642c326698 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55642c326138 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|           | `-CXXThisExpr 0x55642c326128 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55642c326658 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55642c326168 <col:23> 'T *' lvalue Var 0x55642c325ca8 's' 'T *'
|           | `-CallExpr 0x55642c326618 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55642c3263f0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55642c3264f0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55642c326510 <col:86> 'String' lvalue Var 0x55642c3259c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55642c3265c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55642c326550 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|           |   | `-DeclRefExpr 0x55642c326530 <col:92> 'T *' lvalue Var 0x55642c325ca8 's' 'T *'
|           |   `-UnaryOperator 0x55642c326600 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55642c3265f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55642c326678 <col:103> 'Args::Slot *' lvalue Var 0x55642c325930 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c2fef38 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55642c2fea58 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2fead8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55642c2fee98 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55642c2feb98 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2fec18 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2fecb8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55642c2fed58 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55642c3275c0 <col:88, line:745:5>
|     |-DeclStmt 0x55642c3267b8 <line:741:9, col:26>
|     | `-VarDecl 0x55642c326750 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55642c3269d8 <line:742:9, col:55>
|     | `-VarDecl 0x55642c3267e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55642c3269c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55642c326990 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55642c326978 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55642c326958 <col:22, col:54> 'String' (CXXTemporary 0x55642c326958)
|     |           `-CXXMemberCallExpr 0x55642c3268e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55642c326858 <col:22> '<bound member function type>' ->find 0x55642c31d9c8
|     |             | `-CXXThisExpr 0x55642c326848 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55642c326920 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55642c326888 <col:27> 'const char *' lvalue ParmVar 0x55642c2feb98 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55642c326938 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55642c3268a8 <col:36> 'int' lvalue ParmVar 0x55642c2fec18 'flags' 'int'
|     |             `-DeclRefExpr 0x55642c3268c8 <col:43> 'Args::Slot *' lvalue Var 0x55642c326750 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55642c326db0 <line:743:9, col:72>
|     | `-VarDecl 0x55642c326a28 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55642c326d80 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55642c326cf0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55642c326d38 <col:56> 'T' lvalue ParmVar 0x55642c2fecb8 'variable' 'T &'
|     |     `-UnaryOperator 0x55642c326d68 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55642c326d58 <col:67> 'Args *' this
|     `-CallExpr 0x55642c327590 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55642c326dd8 <col:9> '<bound member function type>' ->postparse 0x55642c31dbd8
|       | `-CXXThisExpr 0x55642c326dc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55642c327550 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55642c326e08 <col:19> 'T *' lvalue Var 0x55642c326a28 's' 'T *'
|       | `-ParenExpr 0x55642c327530 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55642c327500 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55642c3274e8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55642c3274d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55642c3274b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55642c327480 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |     |       `-ImplicitCastExpr 0x55642c327468 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55642c326e28 <col:25> 'String' lvalue Var 0x55642c3267e0 'str' 'String'
|       |     |-CallExpr 0x55642c3272d8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55642c3270b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55642c3271b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55642c3271d0 <col:89> 'String' lvalue Var 0x55642c3267e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55642c327280 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55642c327210 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|       |     | | `-DeclRefExpr 0x55642c3271f0 <col:95> 'T *' lvalue Var 0x55642c326a28 's' 'T *'
|       |     | `-UnaryOperator 0x55642c3272c0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55642c3272b0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55642c327448 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55642c327428 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55642c3273f8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55642c3273a8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55642c327338 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|       |         | | `-DeclRefExpr 0x55642c327318 <col:109> 'T *' lvalue Var 0x55642c326a28 's' 'T *'
|       |         | `-DeclRefExpr 0x55642c3273d8 <col:113> 'const V' lvalue ParmVar 0x55642c2fed58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55642c327418 <col:120> 'bool' true
|       `-DeclRefExpr 0x55642c327570 <col:128> 'Args::Slot *' lvalue Var 0x55642c326750 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c2ff468 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55642c2fefb0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c2ff028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c2ff3c8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55642c2ff0e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ff168 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2ff1e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2ff288 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55642c3281b8 <col:75, line:754:5>
|     |-DeclStmt 0x55642c327668 <line:749:9, col:26>
|     | `-VarDecl 0x55642c327600 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55642c328180 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55642c3281a0 <line:750:13, col:58>
|       | `-VarDecl 0x55642c327690 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55642c327870 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55642c327840 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55642c327828 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55642c327808 <col:26, col:58> 'String' (CXXTemporary 0x55642c327808)
|       |           `-CXXMemberCallExpr 0x55642c327798 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55642c327708 <col:26> '<bound member function type>' ->find 0x55642c31d9c8
|       |             | `-CXXThisExpr 0x55642c3276f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55642c3277d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c327738 <col:31> 'const char *' lvalue ParmVar 0x55642c2ff0e8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55642c3277e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c327758 <col:40> 'int' lvalue ParmVar 0x55642c2ff168 'flags' 'int'
|       |             `-DeclRefExpr 0x55642c327778 <col:47> 'Args::Slot *' lvalue Var 0x55642c327600 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55642c327928 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55642c327910 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55642c3278f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55642c3278c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |       `-ImplicitCastExpr 0x55642c3278a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55642c327888 <col:20> 'String' lvalue Var 0x55642c327690 'str' 'String'
|       `-CompoundStmt 0x55642c328160 <col:61, line:753:9>
|         |-DeclStmt 0x55642c327d00 <line:751:13, col:63>
|         | `-VarDecl 0x55642c327978 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55642c327cd0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55642c327c40 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55642c327c88 <col:47> 'T' lvalue ParmVar 0x55642c2ff288 'variable' 'T &'
|         |     `-UnaryOperator 0x55642c327cb8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55642c327ca8 <col:58> 'Args *' this
|         `-CallExpr 0x55642c328130 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55642c327d28 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|           | `-CXXThisExpr 0x55642c327d18 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55642c3280f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55642c327d58 <col:23> 'T *' lvalue Var 0x55642c327978 's' 'T *'
|           | `-CallExpr 0x55642c3280b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55642c327f40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55642c327f88 <col:56> 'P' lvalue ParmVar 0x55642c2ff1e0 'parser' 'P'
|           |   |-DeclRefExpr 0x55642c327fa8 <col:64> 'String' lvalue Var 0x55642c327690 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55642c328058 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55642c327fe8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|           |   | `-DeclRefExpr 0x55642c327fc8 <col:70> 'T *' lvalue Var 0x55642c327978 's' 'T *'
|           |   `-UnaryOperator 0x55642c328098 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55642c328088 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55642c328110 <col:81> 'Args::Slot *' lvalue Var 0x55642c327600 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c307158 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55642c2ff4e0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55642c2ff558 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55642c2ff5d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55642c3070b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55642c2ff6a0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c2ff720 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55642c2ff798 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55642c2ff838 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55642c306f68 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55642c32b208 <col:98, line:762:5>
|     |-DeclStmt 0x55642c328250 <line:758:9, col:26>
|     | `-VarDecl 0x55642c3281e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55642c32a730 <line:759:9, col:55>
|     | `-VarDecl 0x55642c328278 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55642c32a718 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55642c32a6e8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55642c32a6d0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55642c32a6b0 <col:22, col:54> 'String' (CXXTemporary 0x55642c32a6b0)
|     |           `-CXXMemberCallExpr 0x55642c328380 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55642c3282f0 <col:22> '<bound member function type>' ->find 0x55642c31d9c8
|     |             | `-CXXThisExpr 0x55642c3282e0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55642c3283b8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55642c328320 <col:27> 'const char *' lvalue ParmVar 0x55642c2ff6a0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55642c32a690 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55642c328340 <col:36> 'int' lvalue ParmVar 0x55642c2ff720 'flags' 'int'
|     |             `-DeclRefExpr 0x55642c328360 <col:43> 'Args::Slot *' lvalue Var 0x55642c3281e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55642c32ab50 <line:760:9, col:59>
|     | `-VarDecl 0x55642c32a788 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55642c32ab20 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55642c32aa90 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55642c32aad8 <col:43> 'T' lvalue ParmVar 0x55642c2ff838 'variable' 'T &'
|     |     `-UnaryOperator 0x55642c32ab08 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55642c32aaf8 <col:54> 'Args *' this
|     `-CallExpr 0x55642c32b1d8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55642c32ab78 <col:9> '<bound member function type>' ->postparse 0x55642c31dbd8
|       | `-CXXThisExpr 0x55642c32ab68 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55642c32b198 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55642c32aba8 <col:19> 'T *' lvalue Var 0x55642c32a788 's' 'T *'
|       | `-ParenExpr 0x55642c32b178 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55642c32b148 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55642c32b130 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55642c32b118 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55642c32b0f8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55642c32b0c8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |     |       `-ImplicitCastExpr 0x55642c32b0b0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55642c32abc8 <col:25> 'String' lvalue Var 0x55642c328278 'str' 'String'
|       |     |-CallExpr 0x55642c32af20 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55642c32adb0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55642c32adf8 <col:59> 'P' lvalue ParmVar 0x55642c2ff798 'parser' 'P'
|       |     | |-DeclRefExpr 0x55642c32ae18 <col:67> 'String' lvalue Var 0x55642c328278 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55642c32aec8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55642c32ae58 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|       |     | | `-DeclRefExpr 0x55642c32ae38 <col:73> 'T *' lvalue Var 0x55642c32a788 's' 'T *'
|       |     | `-UnaryOperator 0x55642c32af08 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55642c32aef8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55642c32b090 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55642c32b070 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55642c32b040 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55642c32aff0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55642c32af80 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|       |         | | `-DeclRefExpr 0x55642c32af60 <col:87> 'T *' lvalue Var 0x55642c32a788 's' 'T *'
|       |         | `-DeclRefExpr 0x55642c32b020 <col:91> 'const V' lvalue ParmVar 0x55642c306f68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55642c32b060 <col:98> 'bool' true
|       `-DeclRefExpr 0x55642c32b1b8 <col:106> 'Args::Slot *' lvalue Var 0x55642c3281e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c3077c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55642c3071d8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c307258 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55642c3072d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55642c307728 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55642c3073a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c307420 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55642c307498 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55642c307538 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55642c3075d8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55642c32c1e8 <col:60, line:773:5>
|     |-DeclStmt 0x55642c32b2b0 <line:767:9, col:26>
|     | `-VarDecl 0x55642c32b248 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55642c32c1b0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55642c32c1d0 <line:768:13, col:58>
|       | `-VarDecl 0x55642c32b2d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55642c32b4b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55642c32b488 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55642c32b470 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55642c32b450 <col:26, col:58> 'String' (CXXTemporary 0x55642c32b450)
|       |           `-CXXMemberCallExpr 0x55642c32b3e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55642c32b350 <col:26> '<bound member function type>' ->find 0x55642c31d9c8
|       |             | `-CXXThisExpr 0x55642c32b340 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55642c32b418 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c32b380 <col:31> 'const char *' lvalue ParmVar 0x55642c3073a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55642c32b430 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c32b3a0 <col:40> 'int' lvalue ParmVar 0x55642c307420 'flags' 'int'
|       |             `-DeclRefExpr 0x55642c32b3c0 <col:47> 'Args::Slot *' lvalue Var 0x55642c32b248 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55642c32b570 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55642c32b558 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55642c32b538 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55642c32b508 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |       `-ImplicitCastExpr 0x55642c32b4f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55642c32b4d0 <col:20> 'String' lvalue Var 0x55642c32b2d8 'str' 'String'
|       `-CompoundStmt 0x55642c32c188 <col:61, line:772:9>
|         |-DeclStmt 0x55642c32b8b0 <line:769:13, col:66>
|         | `-VarDecl 0x55642c32b5c8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55642c32b880 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55642c32b7f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55642c32b838 <col:49> 'T1' lvalue ParmVar 0x55642c307538 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55642c32b868 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55642c32b858 <col:61> 'Args *' this
|         |-DeclStmt 0x55642c32bc20 <line:770:13, col:66>
|         | `-VarDecl 0x55642c32b938 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55642c32bbf0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55642c32bb60 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55642c32bba8 <col:49> 'T2' lvalue ParmVar 0x55642c3075d8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55642c32bbd8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55642c32bbc8 <col:61> 'Args *' this
|         `-CallExpr 0x55642c32c158 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55642c32bc48 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|           | `-CXXThisExpr 0x55642c32bc38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55642c32c118 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55642c32bcb8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55642c32bc78 <col:23> 'T1 *' lvalue Var 0x55642c32b5c8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55642c32bc98 <col:29> 'T2 *' lvalue Var 0x55642c32b938 's2' 'T2 *'
|           | `-CallExpr 0x55642c32c0d0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55642c32bea0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55642c32bee8 <col:63> 'P' lvalue ParmVar 0x55642c307498 'parser' 'P'
|           |   |-DeclRefExpr 0x55642c32bf08 <col:71> 'String' lvalue Var 0x55642c32b2d8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55642c32bfb8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55642c32bf48 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|           |   | `-DeclRefExpr 0x55642c32bf28 <col:77> 'T1 *' lvalue Var 0x55642c32b5c8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55642c32c078 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55642c32c008 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|           |   | `-DeclRefExpr 0x55642c32bfe8 <col:82> 'T2 *' lvalue Var 0x55642c32b938 's2' 'T2 *'
|           |   `-UnaryOperator 0x55642c32c0b8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55642c32c0a8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55642c32c138 <col:94> 'Args::Slot *' lvalue Var 0x55642c32b248 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c307bb8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55642c307848 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c307b18 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55642c307900 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c307980 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55642c3079f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55642c32c700 <col:67, line:780:5>
|     |-DeclStmt 0x55642c32c280 <line:777:9, col:26>
|     | `-VarDecl 0x55642c32c218 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55642c32c6c8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55642c32c6e8 <line:778:13, col:58>
|       | `-VarDecl 0x55642c32c2a8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55642c32c488 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55642c32c458 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55642c32c440 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55642c32c420 <col:26, col:58> 'String' (CXXTemporary 0x55642c32c420)
|       |           `-CXXMemberCallExpr 0x55642c32c3b0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55642c32c320 <col:26> '<bound member function type>' ->find 0x55642c31d9c8
|       |             | `-CXXThisExpr 0x55642c32c310 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55642c32c3e8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c32c350 <col:31> 'const char *' lvalue ParmVar 0x55642c307900 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55642c32c400 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55642c32c370 <col:40> 'int' lvalue ParmVar 0x55642c307980 'flags' 'int'
|       |             `-DeclRefExpr 0x55642c32c390 <col:47> 'Args::Slot *' lvalue Var 0x55642c32c218 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55642c32c540 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55642c32c528 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55642c32c508 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55642c32c4d8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|       |       `-ImplicitCastExpr 0x55642c32c4c0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55642c32c4a0 <col:20> 'String' lvalue Var 0x55642c32c2a8 'str' 'String'
|       `-CallExpr 0x55642c32c698 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55642c32c568 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|         | `-CXXThisExpr 0x55642c32c558 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55642c32c648 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55642c32c5b8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55642c32c598 <col:23> 'P' lvalue ParmVar 0x55642c3079f8 'parser' 'P'
|         | |-DeclRefExpr 0x55642c32c600 <col:36> 'String' lvalue Var 0x55642c32c2a8 'str' 'String'
|         | `-UnaryOperator 0x55642c32c630 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55642c32c620 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55642c32c678 <col:49> 'Args::Slot *' lvalue Var 0x55642c32c218 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55642c307f58 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55642c307c28 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55642c307eb8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55642c307ce0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c307d60 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55642c307dd8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55642c32d070 <col:71, line:792:5>
|     |-DeclStmt 0x55642c32c798 <line:784:9, col:26>
|     | `-VarDecl 0x55642c32c730 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55642c32c868 <line:785:9, col:29>
|     | `-VarDecl 0x55642c32c7c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55642c32c850 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55642c32c830 <col:28> 'int' 1
|     |-WhileStmt 0x55642c32cf20 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55642c32cf40 <line:786:16, col:61>
|     | | `-VarDecl 0x55642c32c890 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55642c32ca70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55642c32ca40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55642c32ca28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55642c32ca08 <col:29, col:61> 'String' (CXXTemporary 0x55642c32ca08)
|     | |           `-CXXMemberCallExpr 0x55642c32c998 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55642c32c908 <col:29> '<bound member function type>' ->find 0x55642c31d9c8
|     | |             | `-CXXThisExpr 0x55642c32c8f8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55642c32c9d0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32c938 <col:34> 'const char *' lvalue ParmVar 0x55642c307ce0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55642c32c9e8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32c958 <col:43> 'int' lvalue ParmVar 0x55642c307d60 'flags' 'int'
|     | |             `-DeclRefExpr 0x55642c32c978 <col:50> 'Args::Slot *' lvalue Var 0x55642c32c730 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55642c32cb28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55642c32cb10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55642c32caf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55642c32cac0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|     | |       `-ImplicitCastExpr 0x55642c32caa8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55642c32ca88 <col:23> 'String' lvalue Var 0x55642c32c890 'str' 'String'
|     | `-CompoundStmt 0x55642c32cef8 <col:64, line:790:9>
|     |   |-CallExpr 0x55642c32cc80 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55642c32cb50 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|     |   | | `-CXXThisExpr 0x55642c32cb40 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55642c32cc30 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55642c32cba0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55642c32cb80 <col:23> 'P' lvalue ParmVar 0x55642c307dd8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55642c32cbe8 <col:36> 'String' lvalue Var 0x55642c32c890 'str' 'String'
|     |   | | `-UnaryOperator 0x55642c32cc18 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55642c32cc08 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55642c32cc60 <col:49> 'Args::Slot *' lvalue Var 0x55642c32c730 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55642c32ce18 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55642c32ccb0 <col:13> 'int' lvalue Var 0x55642c32c7c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55642c32ce00 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55642c32cde0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55642c32cd48 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55642c32cd28 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55642c32cd10 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55642c32ccd0 <col:28> 'int' lvalue Var 0x55642c32c7c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55642c32ccf0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55642c32cdc8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55642c32cd98 <col:49> 'bool' lvalue ->_read_status 0x55642c1ffd70
|     |   |         `-ImplicitCastExpr 0x55642c32cd78 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55642c32cd68 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55642c32cec8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55642c32ce38 <col:13> 'int' lvalue ParmVar 0x55642c307d60 'flags' 'int'
|     |     `-UnaryOperator 0x55642c32ceb0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55642c32ce98 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55642c32ce78 <col:23> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55642c32d050 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55642c32cf88 <col:9> 'bool' lvalue ->_read_status 0x55642c1ffd70
|       | `-ImplicitCastExpr 0x55642c32cf68 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55642c32cf58 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55642c32d030 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55642c32d010 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55642c32cff8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55642c32cfb8 <col:25> 'int' lvalue Var 0x55642c32c7c8 'read_status' 'int'
|           `-IntegerLiteral 0x55642c32cfd8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55642c308438 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55642c307fc8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c308048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c308398 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55642c308108 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c308188 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55642c308200 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55642c3082a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55642c32e000 <col:84, line:805:5>
|     |-DeclStmt 0x55642c32d118 <line:796:9, col:26>
|     | `-VarDecl 0x55642c32d0b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55642c32d1e8 <line:797:9, col:29>
|     | `-VarDecl 0x55642c32d148 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55642c32d1d0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55642c32d1b0 <col:28> 'int' 1
|     |-DeclStmt 0x55642c32d520 <line:798:9, col:71>
|     | `-VarDecl 0x55642c32d238 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55642c32d4f0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55642c32d460 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55642c32d4a8 <col:55> 'T' lvalue ParmVar 0x55642c3082a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55642c32d4d8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55642c32d4c8 <col:66> 'Args *' this
|     |-WhileStmt 0x55642c32deb0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55642c32ded0 <line:799:16, col:61>
|     | | `-VarDecl 0x55642c32d548 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55642c32d728 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55642c32d6f8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55642c32d6e0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55642c32d6c0 <col:29, col:61> 'String' (CXXTemporary 0x55642c32d6c0)
|     | |           `-CXXMemberCallExpr 0x55642c32d650 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55642c32d5c0 <col:29> '<bound member function type>' ->find 0x55642c31d9c8
|     | |             | `-CXXThisExpr 0x55642c32d5b0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55642c32d688 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32d5f0 <col:34> 'const char *' lvalue ParmVar 0x55642c308108 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55642c32d6a0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32d610 <col:43> 'int' lvalue ParmVar 0x55642c308188 'flags' 'int'
|     | |             `-DeclRefExpr 0x55642c32d630 <col:50> 'Args::Slot *' lvalue Var 0x55642c32d0b0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55642c32d7e0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55642c32d7c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55642c32d7a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55642c32d778 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|     | |       `-ImplicitCastExpr 0x55642c32d760 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55642c32d740 <col:23> 'String' lvalue Var 0x55642c32d548 'str' 'String'
|     | `-CompoundStmt 0x55642c32de88 <col:64, line:803:9>
|     |   |-CallExpr 0x55642c32dc10 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55642c32d808 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|     |   | | `-CXXThisExpr 0x55642c32d7f8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55642c32dbd0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55642c32d838 <col:23> 'T *' lvalue Var 0x55642c32d238 's' 'T *'
|     |   | | `-CallExpr 0x55642c32db90 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55642c32da20 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55642c32da68 <col:56> 'P' lvalue ParmVar 0x55642c308200 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55642c32da88 <col:64> 'String' lvalue Var 0x55642c32d548 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55642c32db38 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55642c32dac8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|     |   | |   | `-DeclRefExpr 0x55642c32daa8 <col:70> 'T *' lvalue Var 0x55642c32d238 's' 'T *'
|     |   | |   `-UnaryOperator 0x55642c32db78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55642c32db68 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55642c32dbf0 <col:81> 'Args::Slot *' lvalue Var 0x55642c32d0b0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55642c32dda8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55642c32dc40 <col:13> 'int' lvalue Var 0x55642c32d148 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55642c32dd90 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55642c32dd70 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55642c32dcd8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55642c32dcb8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55642c32dca0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55642c32dc60 <col:28> 'int' lvalue Var 0x55642c32d148 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55642c32dc80 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55642c32dd58 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55642c32dd28 <col:49> 'bool' lvalue ->_read_status 0x55642c1ffd70
|     |   |         `-ImplicitCastExpr 0x55642c32dd08 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55642c32dcf8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55642c32de58 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55642c32ddc8 <col:13> 'int' lvalue ParmVar 0x55642c308188 'flags' 'int'
|     |     `-UnaryOperator 0x55642c32de40 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55642c32de28 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55642c32de08 <col:23> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55642c32dfe0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55642c32df18 <col:9> 'bool' lvalue ->_read_status 0x55642c1ffd70
|       | `-ImplicitCastExpr 0x55642c32def8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55642c32dee8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55642c32dfc0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55642c32dfa0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55642c32df88 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55642c32df48 <col:25> 'int' lvalue Var 0x55642c32d148 'read_status' 'int'
|           `-IntegerLiteral 0x55642c32df68 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55642c308a18 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55642c3084b0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55642c308528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55642c308978 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55642c3085e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55642c308668 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55642c3086e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55642c308830 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55642c32ee08 <col:87, line:821:5>
|     |-DeclStmt 0x55642c32e0b0 <line:809:9, col:26>
|     | `-VarDecl 0x55642c32e048 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55642c32e180 <line:810:9, col:29>
|     | `-VarDecl 0x55642c32e0e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55642c32e168 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55642c32e148 <col:28> 'int' 1
|     |-DeclStmt 0x55642c32e3c8 <line:811:9, col:38>
|     | `-VarDecl 0x55642c32e2b0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55642c32e3a0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55642c32e328 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55642c32e380 <col:29> 'Vector<T>' lvalue ParmVar 0x55642c308830 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55642c32ecb8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55642c32ecd8 <line:812:16, col:61>
|     | | `-VarDecl 0x55642c32e3f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55642c32e5d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55642c32e5a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55642c32e588 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55642c32e568 <col:29, col:61> 'String' (CXXTemporary 0x55642c32e568)
|     | |           `-CXXMemberCallExpr 0x55642c32e4f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55642c32e468 <col:29> '<bound member function type>' ->find 0x55642c31d9c8
|     | |             | `-CXXThisExpr 0x55642c32e458 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55642c32e530 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32e498 <col:34> 'const char *' lvalue ParmVar 0x55642c3085e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55642c32e548 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55642c32e4b8 <col:43> 'int' lvalue ParmVar 0x55642c308668 'flags' 'int'
|     | |             `-DeclRefExpr 0x55642c32e4d8 <col:50> 'Args::Slot *' lvalue Var 0x55642c32e048 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55642c32e688 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55642c32e670 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55642c32e650 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55642c32e620 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55642c04c758
|     | |       `-ImplicitCastExpr 0x55642c32e608 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55642c32e5e8 <col:23> 'String' lvalue Var 0x55642c32e3f0 'str' 'String'
|     | `-CompoundStmt 0x55642c32ec80 <col:64, line:819:9>
|     |   |-DeclStmt 0x55642c32e748 <line:813:13, col:23>
|     |   | `-VarDecl 0x55642c32e6b0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55642c32e728 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55642c32e8c8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55642c32e770 <col:13> '<bound member function type>' ->postparse 0x55642c31dbd8
|     |   | | `-CXXThisExpr 0x55642c32e760 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55642c32e870 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55642c32e7c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55642c32e7a0 <col:23> 'P' lvalue ParmVar 0x55642c3086e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55642c32e808 <col:36> 'String' lvalue Var 0x55642c32e3f0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55642c32e828 <col:41> 'T' lvalue Var 0x55642c32e6b0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55642c32e858 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55642c32e848 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55642c32e8a8 <col:53> 'Args::Slot *' lvalue Var 0x55642c32e048 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55642c32ea20 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55642c32e958 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55642c32e928 <col:17> 'bool' lvalue ->_read_status 0x55642c1ffd70
|     |   | |   `-ImplicitCastExpr 0x55642c32e908 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55642c32e8f8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55642c32e9f8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55642c32e990 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55642c32e970 <col:17> 'Vector<T> *' lvalue Var 0x55642c32e2b0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55642c32e9d8 <col:30> 'T' lvalue Var 0x55642c32e6b0 'sx' 'T'
|     |   |-BinaryOperator 0x55642c32eba0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55642c32ea38 <col:13> 'int' lvalue Var 0x55642c32e0e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55642c32eb88 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55642c32eb68 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55642c32ead0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55642c32eab0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55642c32ea98 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55642c32ea58 <col:28> 'int' lvalue Var 0x55642c32e0e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55642c32ea78 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55642c32eb50 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55642c32eb20 <col:49> 'bool' lvalue ->_read_status 0x55642c1ffd70
|     |   |         `-ImplicitCastExpr 0x55642c32eb00 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55642c32eaf0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55642c32ec50 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55642c32ebc0 <col:13> 'int' lvalue ParmVar 0x55642c308668 'flags' 'int'
|     |     `-UnaryOperator 0x55642c32ec38 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55642c32ec20 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55642c32ec00 <col:23> 'const int' lvalue Var 0x55642c2eccc8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55642c32ede8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55642c32ed20 <col:9> 'bool' lvalue ->_read_status 0x55642c1ffd70
|       | `-ImplicitCastExpr 0x55642c32ed00 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55642c32ecf0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55642c32edc8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55642c32eda8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55642c32ed90 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55642c32ed50 <col:25> 'int' lvalue Var 0x55642c32e0e0 'read_status' 'int'
|           `-IntegerLiteral 0x55642c32ed70 <col:40> 'int' 1
|-AccessSpecDecl 0x55642c308a90 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55642c308ab8 prev 0x55642c2eafc8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55642c308bb0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55642c308ca0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55642c32ee40 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55642c308d90 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55642c32ee50 <col:25, line:830:9>
| |-CXXMethodDecl 0x55642c308e90 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55642c308f40 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55642c308fe8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55642c308fe8
| | `-ParmVarDecl 0x55642c3090f8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55642c3098b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55642c3098b8
|   `-ParmVarDecl 0x55642c3099c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55642c309168 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55642c3092c8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55642c3094c0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55642c309370 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55642c3093e8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55642c32f030 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55642c309778 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55642c32eea0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55642c32ee60 <col:20> 'void *' lvalue ParmVar 0x55642c309370 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55642c3097e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55642c32ef28 <col:32, col:45> 'char *' array Function 0x55642be6f3c8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55642c32ef10 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55642c32eee0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55642c3093e8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55642c309840 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55642c32eff0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55642c32efb0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55642c3093e8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55642c32f0b0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55642c3095c0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55642c308d90 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55642c32f138 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55642c32f118 <line:840:13, col:22> 'void' array Function 0x55642be6f728 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55642c32f100 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55642c32f0d0 <col:22> 'char *' lvalue ->_slot 0x55642c3097e0
| |         `-CXXThisExpr 0x55642c32f0c0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55642c3096c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55642c308e90 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55642c32f328 <col:22, line:844:9>
| |   `-CallExpr 0x55642c32f290 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55642c32f278 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55642c32f258 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55642bf7b1a8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55642c32f2c8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55642c32f1a8 <col:20> 'void *' lvalue ->_ptr 0x55642c309778
| |     |   `-CXXThisExpr 0x55642c32f198 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55642c32f2f8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55642c32f2e0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55642c32f1e8 <col:26> 'char *' lvalue ->_slot 0x55642c3097e0
| |     |     `-CXXThisExpr 0x55642c32f1d8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55642c32f310 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55642c32f228 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55642c309840
| |         `-CXXThisExpr 0x55642c32f218 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55642c309778 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55642c3097e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55642c309840 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55642c309a38 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55642c309a38
| | `-ParmVarDecl 0x55642c309b48 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55642c309be8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55642c309be8
|   `-ParmVarDecl 0x55642c309cf8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55642c309e98 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55642c309d68 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55642c309e08 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55642c30a130 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55642c30a328 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55642c30a1f8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55642c30a4a8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55642c32f360 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55642c32f340 <col:20> 'T *' lvalue ParmVar 0x55642c30a1f8 'ptr' 'T *'
|   | `-CompoundStmt 0x55642c32f3b0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55642c30a3f8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55642c308e90 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55642c32f560 <col:22, line:857:9>
|   |   `-CallExpr 0x55642c32f530 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55642c32f3c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55642c0338d8 0x55642bfddc08
|   |     |-CXXOperatorCallExpr 0x55642c32f4c0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55642c32f450 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55642c240888 0x55642c2404a8 0x55642c2400d8 0x55642c23fcf8 0x55642c23f918 0x55642c23f548
|   |     | `-MemberExpr 0x55642c32f420 <col:29> 'T *' lvalue ->_ptr 0x55642c30a4a8
|   |     |   `-CXXThisExpr 0x55642c32f410 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55642c32f500 <col:35> 'T' lvalue ->_slot 0x55642c30a508
|   |       `-CXXThisExpr 0x55642c32f4f0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55642c30a4a8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55642c30a508 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55642c30a570 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55642c30a670 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55642c30a6c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c30a650 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55642c30a630 <col:31> 'int' 48
|-FieldDecl 0x55642c30a6e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55642c30a748 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55642c30a7a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55642c30a8e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55642c31d270 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55642c31d2d0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55642c31d380 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55642c31d5a8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55642c31d4b0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55642c31d6f8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55642c31d668 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55642c31d9c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55642c31d7b8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55642c31d838 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55642c31d8e0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55642c31dbd8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55642c31da90 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55642c31db08 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55642c31dca8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55642c31ddf8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55642c31dd60 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55642c31e188 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55642c31deb8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55642c31df38 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55642c31dfe0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55642c31e098 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55642c31e3b0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55642c31e260 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55642c31e2d8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55642c31e6c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55642c31e460 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55642c31e628 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55642c31e538 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c03c600 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c03c718 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55642c03c7a8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55642c03c878 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55642c03c960 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c03cb78 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55642c03ca20 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03cd28 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55642c03cc30 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55642c03ce70 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55642c03cde0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55642c03cfb8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55642c03cf28 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03d100 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55642c03d070 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03d1c8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55642c03d310 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55642c03d280 <col:28> col:31 'int'
|-CXXMethodDecl 0x55642c03d3d8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55642c03d520 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55642c03d490 <col:28> col:31 'int'
|-CXXMethodDecl 0x55642c03d698 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55642c03d5d8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03d7e0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55642c03d750 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03d8a8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55642c03da68 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55642c03d958 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55642c03d9d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03dcb8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55642c03db28 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c03dba0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55642c03dd68 <col:86> "" ""
|-CXXMethodDecl 0x55642c03dfd8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55642c03de48 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55642c03dec0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03e188 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55642c03e098 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55642c03e338 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55642c03e240 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55642c03e608 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55642c03e3f0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55642c03e468 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55642c03e4e0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03e8e8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55642c03e6d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55642c03e748 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c03e7c0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55642c03e9a0 <col:115> "" ""
|-AccessSpecDecl 0x55642c03ea10 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55642c03ea48 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c03ff60 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55642c03ff60
| `-ParmVarDecl 0x55642c040068 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55642c040108 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55642c040108
| `-ParmVarDecl 0x55642c040218 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55642c075848 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55642c267640 <col:7>
|-CXXConstructorDecl 0x55642c075920 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55642c075920
| `-ParmVarDecl 0x55642c075a38 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55642c075aa8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55642c075aa8
| `-ParmVarDecl 0x55642c075bb8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55642c26a040 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c2561e8 prev 0x55642c24b3f0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c2562e0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55642c2563d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55642c2564f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55642c256678 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55642c2567f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55642c256978 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55642c2677a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55642c268018 <col:11>
|-CXXDestructorDecl 0x55642c267880 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55642c2679b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55642c2679b8
| `-ParmVarDecl 0x55642c267ac8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55642c267b68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55642c267b68
| `-ParmVarDecl 0x55642c267c78 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55642c26aa38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55642c26ab48 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55642c26adc8 <col:11>
|   `-ReturnStmt 0x55642c26adb8 <col:11>
|     `-UnaryOperator 0x55642c26ada0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55642c26ad90 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55642c26abb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55642c26abb8
  `-ParmVarDecl 0x55642c26acc8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c2569e0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c256af8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55642c256b98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55642c256c00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55642c256c68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55642c256cd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55642c256d30 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55642c256df0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55642c256e50 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55642c256eb0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55642c2676b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55642c256b98 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55642c268028 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55642c268080 <col:12>
|-CXXConstructorDecl 0x55642c267ce8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55642c267ce8
| `-ParmVarDecl 0x55642c267df8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55642c267e98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55642c267e98
| `-ParmVarDecl 0x55642c267fa8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55642c26a120 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c244b00 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55642c244c18 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55642c244ca8 <col:16, col:22> col:16 public
|-EnumDecl 0x55642c244cd0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55642c244dd0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55642c244eb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c244db0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55642c244d90 <col:21> 'int' 28
| `-EnumConstantDecl 0x55642c244e60 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55642c244ec8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c244e40 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55642c244e20 <col:22> 'int' 64
|-CXXMethodDecl 0x55642c245208 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55642c244ef0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c244f70 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55642c244fe8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c245060 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c2452c8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55642c2454c8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55642c245340 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55642c2453b8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c245578 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55642c2456d8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55642c2455e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c245780 <col:72> warn_unused_result ""
|-TypedefDecl 0x55642c245ae0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55642c245a70 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55642c245a10 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55642c2459d0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55642bd1c310 'void'
|       |-PointerType 0x55642bfc4ea0 'unsigned char *'
|       | `-BuiltinType 0x55642bd1c410 'unsigned char'
|       |-TypedefType 0x55642bdc1470 'size_t' sugar
|       | |-Typedef 0x55642bd8caf0 'size_t'
|       | `-BuiltinType 0x55642bd1c470 'unsigned long'
|       `-PointerType 0x55642bd1cb10 'void *'
|         `-BuiltinType 0x55642bd1c310 'void'
|-CXXMethodDecl 0x55642c245f58 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55642c245b50 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55642c245bc8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c245c60 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55642c245ce0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55642c260650 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55642c260638 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55642c260600 <col:58> 'int' 0
| |-ParmVarDecl 0x55642c245d60 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55642c260678 <col:76> 'int' 0
| |-ParmVarDecl 0x55642c245de0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55642c260698 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55642c246028 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55642c2460a8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55642c246168 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55642c246208 <col:20>
| `-OptimizeNoneAttr 0x55642c246260 <col:30>
|-CXXMethodDecl 0x55642c2462d8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55642c246378 <col:20>
| `-OptimizeNoneAttr 0x55642c2463d0 <col:30>
|-CXXMethodDecl 0x55642c246448 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55642c2464e8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55642c246598 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55642c246638 <col:20>
| |-OptimizeNoneAttr 0x55642c246690 <col:30>
| `-WarnUnusedResultAttr 0x55642c2466b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55642c246710 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55642c2467b0 <col:20>
| `-OptimizeNoneAttr 0x55642c246808 <col:30>
|-CXXMethodDecl 0x55642c246858 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55642c2468f8 <col:20>
| `-OptimizeNoneAttr 0x55642c246950 <col:30>
|-CXXMethodDecl 0x55642c246998 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55642c246a38 <col:20>
| `-OptimizeNoneAttr 0x55642c246a90 <col:30>
|-CXXMethodDecl 0x55642c246ad8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c246b98 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c246c60 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55642c246d28 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55642c246de8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c246f08 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55642c260760 <col:54, line:99:5>
|   `-ReturnStmt 0x55642c260750 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55642c260738 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55642c260708 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55642c2571e8
|         `-CXXThisExpr 0x55642c2606f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55642c2470a8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55642c246fb8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55642c260810 <col:67, line:103:5>
|   `-BinaryOperator 0x55642c2607f0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55642c260788 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55642c2571e8
|     | `-CXXThisExpr 0x55642c260778 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55642c2607d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55642c2607b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55642c246fb8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55642c2471a0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55642c260890 <col:33, line:107:5>
|   `-ReturnStmt 0x55642c260880 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55642c260868 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55642c260838 <col:16> 'void *' lvalue ->_destructor_argument 0x55642c257250
|         `-CXXThisExpr 0x55642c260828 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55642c247260 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55642c260ec0 <col:25, line:113:5>
|   |-ParenExpr 0x55642c260c08 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55642c260bd8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55642c260948 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55642c260920 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55642c2608e8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55642c2608b8 <col:24> '<bound member function type>' ->shared 0x55642c2462d8
|   |   |       `-ImplicitCastExpr 0x55642c260908 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55642c2608a8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55642c2609a8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c260988 <col:42> 'int' 0
|   |   `-CallExpr 0x55642c260b38 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55642c260b20 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c260b00 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c260b78 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c260a18 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55642c260b90 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c260a40 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c260ba8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c260a78 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55642c260bc0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c260ae8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c260ad0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c260a98 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55642c260e08 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55642c260c38 <col:2> 'unsigned char *' lvalue ->_head 0x55642c256ff0
|   | | `-CXXThisExpr 0x55642c260c28 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55642c260df0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55642c260dd0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55642c260c78 <col:10> 'unsigned char *' lvalue ->_data 0x55642c257058
|   |     | `-CXXThisExpr 0x55642c260c68 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55642c260db8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55642c260d98 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55642c260cb8 <col:18> 'unsigned char *' lvalue ->_tail 0x55642c2570c0
|   |         | `-CXXThisExpr 0x55642c260ca8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55642c260d80 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55642c260d60 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55642c260cf8 <col:26> 'unsigned char *' lvalue ->_end 0x55642c257128
|   |             | `-CXXThisExpr 0x55642c260ce8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55642c260d48 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55642c260d28 <col:33> 'int' 0
|   `-BinaryOperator 0x55642c260ea0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55642c260e38 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55642c2571e8
|     | `-CXXThisExpr 0x55642c260e28 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55642c260e88 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55642c260e68 <col:16> 'int' 0
|-CXXMethodDecl 0x55642c2473a0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55642c247310 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c247448 <col:20>
| |-OptimizeNoneAttr 0x55642c2474a0 <col:30>
| `-WarnUnusedResultAttr 0x55642c2474c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55642c247598 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55642c247508 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c247640 <col:20>
| |-OptimizeNoneAttr 0x55642c247698 <col:30>
| `-WarnUnusedResultAttr 0x55642c2476c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55642c2477f8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55642c247700 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c2478a0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55642c2479a0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55642c247910 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c247a48 <col:20>
| `-OptimizeNoneAttr 0x55642c247aa0 <col:30>
|-CXXMethodDecl 0x55642c247b68 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55642c247ad8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c247c10 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55642c247d10 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55642c247c80 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55642c247db8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55642c247eb8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55642c247e28 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c247f60 <col:20>
| `-OptimizeNoneAttr 0x55642c247fb8 <col:30>
|-CXXMethodDecl 0x55642c248148 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55642c247ff8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55642c248070 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55642c2606b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55642c2481f8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55642c2483f8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55642c248270 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55642c2482e8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c248608 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55642c2484b8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55642c248530 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c248818 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55642c2486c8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55642c248748 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55642c2606c8 <col:39> 'int' 0
|-CXXMethodDecl 0x55642c2488e8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55642c2489b0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55642c248a78 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55642c248b38 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c248c00 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55642c248d48 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55642c248cb8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55642c248f18 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55642c248e08 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55642c248e80 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c248fe8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55642c2490a8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55642c249148 <col:20>
| `-OptimizeNoneAttr 0x55642c2491a0 <col:30>
|-CXXMethodDecl 0x55642c2491f0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55642c249290 <col:20>
| `-OptimizeNoneAttr 0x55642c2492e8 <col:30>
|-CXXMethodDecl 0x55642c249338 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55642c2493f8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c2494c0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55642c249560 <col:20>
| `-OptimizeNoneAttr 0x55642c2495b8 <col:30>
|-CXXMethodDecl 0x55642c249708 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55642c2495f8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55642c249670 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c249858 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55642c2497c8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c249930 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55642c2499f0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55642c249a90 <col:20>
| `-OptimizeNoneAttr 0x55642c249ae8 <col:30>
|-CXXMethodDecl 0x55642c249b38 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55642c249bd8 <col:20>
| `-OptimizeNoneAttr 0x55642c249c30 <col:30>
|-CXXMethodDecl 0x55642c249c80 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55642c249d48 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55642c249de8 <col:20>
| `-OptimizeNoneAttr 0x55642c249e40 <col:30>
|-CXXMethodDecl 0x55642c249e88 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55642c249fa8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55642c24a118 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55642c24a058 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55642c24a208 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55642c24a2a8 <col:20>
| `-OptimizeNoneAttr 0x55642c24a300 <col:30>
|-CXXMethodDecl 0x55642c24a350 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55642c24a410 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55642c24a648 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55642c24a4c0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55642c24a538 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c24a6f8 <col:20>
| `-OptimizeNoneAttr 0x55642c24a750 <col:30>
|-CXXMethodDecl 0x55642c24a7f8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55642c24a898 <col:20>
| `-OptimizeNoneAttr 0x55642c24a8f0 <col:30>
|-CXXMethodDecl 0x55642c24a940 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55642c24a9e0 <col:20>
| `-OptimizeNoneAttr 0x55642c24aa38 <col:30>
|-CXXMethodDecl 0x55642c24aa80 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55642c24ab20 <col:20>
| `-OptimizeNoneAttr 0x55642c24ab78 <col:30>
|-CXXMethodDecl 0x55642c24ac78 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55642c24abb0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55642c24ad20 <col:20>
| `-OptimizeNoneAttr 0x55642c24ad78 <col:30>
|-CXXMethodDecl 0x55642c24af38 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55642c24adb0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55642c24ae28 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c24afe8 <col:20>
| `-OptimizeNoneAttr 0x55642c24b040 <col:30>
|-CXXMethodDecl 0x55642c24b0e8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55642c24b208 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55642c24b328 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55642c24b3c8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55642c24b3f0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55642c24b518 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55642c24b5b8 <col:20>
| `-OptimizeNoneAttr 0x55642c24b610 <col:30>
|-CXXMethodDecl 0x55642c24b6b8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55642c24b758 <col:20>
| `-OptimizeNoneAttr 0x55642c24b7b0 <col:30>
|-AccessSpecDecl 0x55642c24b7d8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55642c24b800 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55642c24b900 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55642c24b950 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c24b8e0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55642c24b8c0 <col:14> 'int' 48
|-CXXMethodDecl 0x55642c24b9b8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55642c24ba58 <col:20>
| `-OptimizeNoneAttr 0x55642c24bab0 <col:30>
|-CXXMethodDecl 0x55642c24bb28 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55642c24bbc8 <col:20>
| `-OptimizeNoneAttr 0x55642c24bc20 <col:30>
|-CXXMethodDecl 0x55642c24bce8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55642c24bc58 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55642c24be88 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55642c24c028 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55642c24bf38 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55642c24c0d0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55642c24c1d0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c580 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c1b0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c24c190 <col:9> 'int' 0
| |-EnumConstantDecl 0x55642c24c260 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c598 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c240 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55642c24c220 <col:14> 'int' 1
| |-EnumConstantDecl 0x55642c24c2f0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c5b0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c2d0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55642c24c2b0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55642c24c380 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c5c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c360 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55642c24c340 <col:14> 'int' 3
| |-EnumConstantDecl 0x55642c24c410 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c5e0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c3f0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55642c24c3d0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55642c24c4a0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55642c24c5f8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24c480 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55642c24c460 <col:13> 'int' 5
| `-EnumConstantDecl 0x55642c24c530 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55642c24c610 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c24c510 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55642c24c4f0 <col:14> 'int' 6
|-CXXMethodDecl 0x55642c24c678 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55642c24c718 <col:20>
| `-OptimizeNoneAttr 0x55642c24c770 <col:30>
|-CXXMethodDecl 0x55642c24c868 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55642c24c7a8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55642c24c910 <col:20>
| `-OptimizeNoneAttr 0x55642c24c968 <col:30>
|-CXXMethodDecl 0x55642c24c9d8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55642c24cb00 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55642c24cc78 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55642c24cbb0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55642c24cd40 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55642c24ce08 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55642c24cf48 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55642c24ceb8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55642c24cff0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55642c24d0f0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55642c24d2f0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24d0d0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c24d0b0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55642c24d180 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55642c24d308 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24d160 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55642c24d140 <col:45> 'int' 4
| |-EnumConstantDecl 0x55642c24d210 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55642c24d320 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24d1f0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c24d1d0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55642c24d2a0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55642c24d338 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c24d280 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55642c24d260 <col:47> 'int' 16
|-CXXMethodDecl 0x55642c24d398 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55642c24d508 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55642c24d448 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55642c24d5b0 <col:20>
| `-OptimizeNoneAttr 0x55642c24d608 <col:30>
|-CXXMethodDecl 0x55642c24d658 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55642c260fe0 <col:18, col:36>
|   `-ReturnStmt 0x55642c260fd0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55642c260fb8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55642c260f98 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55642c260f68 <col:27> '<bound member function type>' ->xanno 0x55642c24b6b8
|           `-CXXThisExpr 0x55642c260f58 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55642c24d750 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55642c2610f0 <col:30, col:48>
|   `-ReturnStmt 0x55642c2610e0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55642c2610c8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55642c2610a8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55642c261078 <col:39> '<bound member function type>' ->xanno 0x55642c24b518
|           `-CXXThisExpr 0x55642c261068 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55642c24d838 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55642c261288 <col:24, col:50>
|   `-ReturnStmt 0x55642c261278 <col:26, col:47>
|     `-UnaryOperator 0x55642c261260 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55642c261240 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55642c261228 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55642c2611d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55642c2564f8
|         |   `-CXXMemberCallExpr 0x55642c2611b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55642c261188 <col:34> '<bound member function type>' ->xanno 0x55642c24b6b8
|         |       `-CXXThisExpr 0x55642c261178 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55642c261208 <col:46> 'int' 0
|-CXXMethodDecl 0x55642c24d940 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55642c261458 <col:36, col:62>
|   `-ReturnStmt 0x55642c261448 <col:38, col:59>
|     `-UnaryOperator 0x55642c261430 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55642c261410 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55642c2613f8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55642c261370 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55642c2564f8
|         |   `-CXXMemberCallExpr 0x55642c261350 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55642c261320 <col:46> '<bound member function type>' ->xanno 0x55642c24b518
|         |       `-CXXThisExpr 0x55642c261310 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55642c2613a0 <col:58> 'int' 0
|-CXXMethodDecl 0x55642c24da58 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55642c2615f0 <col:26, col:53>
|   `-ReturnStmt 0x55642c2615e0 <col:28, col:50>
|     `-UnaryOperator 0x55642c2615c8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55642c2615a8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55642c261590 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55642c261540 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55642c2567f8
|         |   `-CXXMemberCallExpr 0x55642c261520 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55642c2614f0 <col:36> '<bound member function type>' ->xanno 0x55642c24b6b8
|         |       `-CXXThisExpr 0x55642c2614e0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55642c261570 <col:49> 'int' 0
|-CXXMethodDecl 0x55642c24db78 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55642c2617c8 <col:38, col:65>
|   `-ReturnStmt 0x55642c2617b8 <col:40, col:62>
|     `-UnaryOperator 0x55642c2617a0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55642c261780 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55642c261768 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55642c2616d8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55642c2567f8
|         |   `-CXXMemberCallExpr 0x55642c2616b8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55642c261688 <col:48> '<bound member function type>' ->xanno 0x55642c24b518
|         |       `-CXXThisExpr 0x55642c261678 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55642c261708 <col:61> 'int' 0
|-CXXMethodDecl 0x55642c24dd28 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55642c24dc30 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55642c261e98 <col:34, line:463:5>
|   |-ParenExpr 0x55642c261ce0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55642c261cb0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55642c261918 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c2618e8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c261838 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c261820 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c2617e0 <col:23> 'int' lvalue ParmVar 0x55642c24dc30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c261800 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c2618c8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c261898 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c261858 <col:33> 'int' lvalue ParmVar 0x55642c24dc30 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55642c2618b0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55642c261878 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55642c261978 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c261958 <col:56> 'int' 0
|   |   `-CallExpr 0x55642c261c10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55642c261bf8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c261bd8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c261c50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c261a68 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55642c261c68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c261a98 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c261c80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c261ad0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55642c261c98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c261bc0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c261ba8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c261b68 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55642c261e88 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55642c261e70 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55642c261e50 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55642c261e20 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55642c261dd0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55642c2564f8
|         |   `-CXXMemberCallExpr 0x55642c261db0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55642c261d80 <col:9> '<bound member function type>' ->xanno 0x55642c24b518
|         |       `-CXXThisExpr 0x55642c261d70 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55642c261e38 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55642c261e00 <col:21> 'int' lvalue ParmVar 0x55642c24dc30 'i' 'int'
|-CXXMethodDecl 0x55642c24df78 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55642c24dde8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55642c24de60 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55642c262528 <col:40, line:472:5>
|   |-ParenExpr 0x55642c262340 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55642c262310 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55642c261ff0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c261fc0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c261f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c261ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c261eb8 <col:23> 'int' lvalue ParmVar 0x55642c24dde8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c261ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c261fa0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c261f70 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c261f30 <col:33> 'int' lvalue ParmVar 0x55642c24dde8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55642c261f88 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55642c261f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55642c262050 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c262030 <col:56> 'int' 0
|   |   `-CallExpr 0x55642c262270 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55642c262258 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c262238 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c2622b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2620c0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55642c2622c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2620f0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c2622e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c262128 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55642c2622f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c262220 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c262208 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c2621c8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55642c262508 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55642c2624b0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55642c262480 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55642c262430 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55642c2564f8
|     | |   `-CXXMemberCallExpr 0x55642c262410 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55642c2623e0 <col:2> '<bound member function type>' ->xanno 0x55642c24b6b8
|     | |       `-CXXThisExpr 0x55642c2623d0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55642c262498 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55642c262460 <col:14> 'int' lvalue ParmVar 0x55642c24dde8 'i' 'int'
|     `-ImplicitCastExpr 0x55642c2624f0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55642c2624d0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55642c24de60 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55642c24e138 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55642c24e040 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55642c262ca8 <col:36, line:485:5>
|   |-ParenExpr 0x55642c262a10 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c2629e0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c2626c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c262690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c2625a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c262588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c262548 <col:23> 'int' lvalue ParmVar 0x55642c24e040 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c262568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c262670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c262658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c2625c0 <col:33> 'int' lvalue ParmVar 0x55642c24e040 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c262638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c262620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c2625e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c262600 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55642c262720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c262700 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c262940 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c262928 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c262908 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c262980 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c262790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55642c262998 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2627c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c2629b0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c262800 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55642c2629c8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c2628f0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c2628d8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c262898 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55642c262c98 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55642c262c80 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55642c262c68 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c262c38 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55642c262bd8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c262ba8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c262b20 <col:61, col:70> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c262b00 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c262ad0 <col:61> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c262ac0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c262bc0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c262b50 <col:74> 'int' lvalue ParmVar 0x55642c24e040 'i' 'int'
|-CXXMethodDecl 0x55642c24e388 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55642c24e1f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55642c24e270 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55642c2633f8 <col:42, line:500:5>
|   |-ParenExpr 0x55642c263190 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c263160 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c262e40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c262e10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c262d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c262d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c262cc8 <col:23> 'int' lvalue ParmVar 0x55642c24e1f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c262ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c262df0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c262dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c262d40 <col:33> 'int' lvalue ParmVar 0x55642c24e1f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c262db8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c262da0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c262d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c262d80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55642c262ea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c262e80 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c2630c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c2630a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c263088 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c263100 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c262f10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55642c263118 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c262f48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c263130 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c262f80 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55642c263148 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c263070 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c263058 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c263018 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55642c2633d8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55642c263388 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55642c263358 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55642c263300 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55642c2632d0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55642c263280 <col:48, col:57> 'char [48]' lvalue ->c 0x55642c2563d0
|     |     |   `-CXXMemberCallExpr 0x55642c263260 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55642c263230 <col:48> '<bound member function type>' ->xanno 0x55642c24b6b8
|     |     |       `-CXXThisExpr 0x55642c263220 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55642c2632e8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55642c2632b0 <col:61> 'int' lvalue ParmVar 0x55642c24e1f8 'i' 'int'
|     `-ImplicitCastExpr 0x55642c2633c0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55642c2633a0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55642c24e270 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55642c24e548 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55642c24e450 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55642c263b58 <col:35, line:513:5>
|   |-ParenExpr 0x55642c263868 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c263838 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c263590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c263560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c263470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c263458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c263418 <col:23> 'int' lvalue ParmVar 0x55642c24e450 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c263438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c263540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c263528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c263490 <col:33> 'int' lvalue ParmVar 0x55642c24e450 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c263508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c2634f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c2634b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c2634d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55642c2635f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c2635d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c263798 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c263780 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c263760 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c2637d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c263660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55642c2637f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c263698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c263808 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c2636d0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55642c263820 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c263748 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c263730 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c2636f0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55642c263b48 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55642c263b30 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55642c263b18 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c263ae8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55642c263a60 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c263a30 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c2639e0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c2639c0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c263990 <col:60> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c263980 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c263a48 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c263a10 <col:73> 'int' lvalue ParmVar 0x55642c24e450 'i' 'int'
|-CXXMethodDecl 0x55642c24e798 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55642c24e608 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55642c24e680 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55642c264278 <col:41, line:528:5>
|   |-ParenExpr 0x55642c264000 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c263fd0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c263cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c263cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c263bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c263bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c263b78 <col:23> 'int' lvalue ParmVar 0x55642c24e608 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c263b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c263ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c263c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c263bf0 <col:33> 'int' lvalue ParmVar 0x55642c24e608 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c263c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c263c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c263c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c263c30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55642c263d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c263d30 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c263f30 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c263f18 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c263ef8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c263f70 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c263dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55642c263f88 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c263df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c263fa0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c263e30 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55642c263fb8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c263ee0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c263ec8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c263e88 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55642c264258 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55642c264208 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55642c2641d8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55642c264180 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55642c264140 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55642c2640f0 <col:47, col:56> 'char [48]' lvalue ->c 0x55642c2563d0
|     |     |   `-CXXMemberCallExpr 0x55642c2640d0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55642c2640a0 <col:47> '<bound member function type>' ->xanno 0x55642c24b6b8
|     |     |       `-CXXThisExpr 0x55642c264090 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55642c264158 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55642c264120 <col:60> 'int' lvalue ParmVar 0x55642c24e608 'i' 'int'
|     `-ImplicitCastExpr 0x55642c264240 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55642c264220 <col:65> 'int16_t':'short' lvalue ParmVar 0x55642c24e680 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55642c24e958 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55642c24e860 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55642c264948 <col:36, line:541:5>
|   |-ParenExpr 0x55642c2646e8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c2646b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c264410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c2643e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c2642f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c2642d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c264298 <col:23> 'int' lvalue ParmVar 0x55642c24e860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c2642b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c2643c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c2643a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c264310 <col:33> 'int' lvalue ParmVar 0x55642c24e860 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c264388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c264370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c264330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c264350 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55642c264470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c264450 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c264618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c264600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c2645e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c264658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2644e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55642c264670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c264518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c264688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c264550 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55642c2646a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c2645c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c2645b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c264570 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55642c264938 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55642c264920 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55642c264908 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c2648d8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55642c264880 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c264850 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c264800 <col:61, col:70> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c2647e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c2647b0 <col:61> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c2647a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c264868 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c264830 <col:74> 'int' lvalue ParmVar 0x55642c24e860 'i' 'int'
|-CXXMethodDecl 0x55642c24eb28 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55642c24ea18 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55642c24ea90 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55642c24ebd8 <col:20>
| `-OptimizeNoneAttr 0x55642c24ec30 <col:30>
|-CXXMethodDecl 0x55642c24ed68 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55642c24ec70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55642c265018 <col:35, line:562:5>
|   |-ParenExpr 0x55642c264db8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c264d88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c264ae0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c264ab0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c2649c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c2649a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c264968 <col:23> 'int' lvalue ParmVar 0x55642c24ec70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c264988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c264a90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c264a78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c2649e0 <col:33> 'int' lvalue ParmVar 0x55642c24ec70 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c264a58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c264a40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c264a00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c264a20 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55642c264b40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c264b20 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c264ce8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c264cd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c264cb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c264d28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c264bb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55642c264d40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c264be8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c264d58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c264c20 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55642c264d70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c264c98 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c264c80 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c264c40 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55642c265008 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55642c264ff0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55642c264fd8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c264fa8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55642c264f50 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c264f20 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c264ed0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c264eb0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c264e80 <col:60> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c264e70 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c264f38 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c264f00 <col:73> 'int' lvalue ParmVar 0x55642c24ec70 'i' 'int'
|-CXXMethodDecl 0x55642c24ef78 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55642c24ee28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55642c24eea0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55642c2656f8 <col:41, line:577:5>
|   |-ParenExpr 0x55642c265488 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c265458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c2651b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c265180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c265090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c265078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c265038 <col:23> 'int' lvalue ParmVar 0x55642c24ee28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c265058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c265160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c265148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c2650b0 <col:33> 'int' lvalue ParmVar 0x55642c24ee28 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c265128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c265110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c2650d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c2650f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55642c265210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c2651f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c2653b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c2653a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c265380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c2653f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c265280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55642c265410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2652b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c265428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c2652f0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55642c265440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c265368 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c265350 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c265310 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55642c2656d8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55642c265688 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55642c265658 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55642c2655f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55642c2655c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55642c265578 <col:47, col:56> 'char [48]' lvalue ->c 0x55642c2563d0
|     |     |   `-CXXMemberCallExpr 0x55642c265558 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55642c265528 <col:47> '<bound member function type>' ->xanno 0x55642c24b6b8
|     |     |       `-CXXThisExpr 0x55642c265518 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55642c2655e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55642c2655a8 <col:60> 'int' lvalue ParmVar 0x55642c24ee28 'i' 'int'
|     `-ImplicitCastExpr 0x55642c2656c0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55642c2656a0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55642c24eea0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55642c24f138 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55642c24f040 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55642c265e28 <col:36, line:591:5>
|   |-ParenExpr 0x55642c265b68 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c265b38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c265890 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c265860 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c265770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c265758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c265718 <col:23> 'int' lvalue ParmVar 0x55642c24f040 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c265738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c265840 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c265828 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c265790 <col:33> 'int' lvalue ParmVar 0x55642c24f040 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c265808 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c2657f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c2657b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c2657d0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55642c2658f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c2658d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c265a98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c265a80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c265a60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c265ad8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c265960 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55642c265af0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c265998 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c265b08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c2659d0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55642c265b20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c265a48 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c265a30 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c2659f0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55642c265e18 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55642c265e00 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55642c265de8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c265db8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55642c265d30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c265d00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c265cb0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c265c90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c265c60 <col:61> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c265c50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c265d18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c265ce0 <col:74> 'int' lvalue ParmVar 0x55642c24f040 'i' 'int'
|-CXXMethodDecl 0x55642c24f388 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55642c24f1f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55642c24f270 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55642c266508 <col:42, line:606:5>
|   |-ParenExpr 0x55642c266298 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55642c266268 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55642c265fc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c265f90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c265ea0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c265e88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c265e48 <col:23> 'int' lvalue ParmVar 0x55642c24f1f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c265e68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c265f70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55642c265f58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c265ec0 <col:33> 'int' lvalue ParmVar 0x55642c24f1f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c265f38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c265f20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c265ee0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55642c265f00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55642c266020 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c266000 <col:60> 'int' 0
|   |   `-CallExpr 0x55642c2661c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55642c2661b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c266190 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c266208 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c266090 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55642c266220 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2660c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c266238 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c266100 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55642c266250 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c266178 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c266160 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c266120 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55642c2664e8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55642c266498 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55642c266468 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55642c266408 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55642c2663d8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55642c266388 <col:48, col:57> 'char [48]' lvalue ->c 0x55642c2563d0
|     |     |   `-CXXMemberCallExpr 0x55642c266368 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55642c266338 <col:48> '<bound member function type>' ->xanno 0x55642c24b6b8
|     |     |       `-CXXThisExpr 0x55642c266328 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55642c2663f0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55642c2663b8 <col:61> 'int' lvalue ParmVar 0x55642c24f1f8 'i' 'int'
|     `-ImplicitCastExpr 0x55642c2664d0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55642c2664b0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55642c24f270 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55642c24f520 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55642c24f450 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55642c266d78 <col:33, line:620:5>
|   |-ParenExpr 0x55642c266af0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55642c266ac0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55642c266710 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c2666e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c266580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c266568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c266528 <col:23> 'int' lvalue ParmVar 0x55642c24f450 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c266548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c2666c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55642c2666a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c2665a0 <col:33> 'int' lvalue ParmVar 0x55642c24f450 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c266688 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c266670 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c2665c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55642c266648 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55642c266630 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55642c2665f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55642c266770 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c266750 <col:79> 'int' 0
|   |   `-CallExpr 0x55642c266a20 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55642c266a08 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c2669e8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c266a60 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c266858 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55642c266a78 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c2668a0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c266a90 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c2668d8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55642c266aa8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c2669d0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c2669b8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c266978 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55642c266d68 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55642c266d50 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55642c266d38 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55642c266d08 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55642c266c80 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55642c266c50 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55642c266c00 <col:67, col:76> 'char const[48]' lvalue ->c 0x55642c2563d0
|             |   `-CXXMemberCallExpr 0x55642c266be0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55642c266bb0 <col:67> '<bound member function type>' ->xanno 0x55642c24b518
|             |       `-CXXThisExpr 0x55642c266ba0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55642c266c68 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55642c266c30 <col:80> 'int' lvalue ParmVar 0x55642c24f450 'i' 'int'
|-CXXMethodDecl 0x55642c24f738 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55642c24f5e0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55642c24f660 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55642c2675a0 <col:45, line:635:5>
|   |-ParenExpr 0x55642c2672e8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55642c2672b8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55642c266f80 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55642c266f50 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55642c266df0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55642c266dd8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55642c266d98 <col:23> 'int' lvalue ParmVar 0x55642c24f5e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55642c266db8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55642c266f30 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55642c266f18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55642c266e10 <col:33> 'int' lvalue ParmVar 0x55642c24f5e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55642c266ef8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55642c266ee0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55642c266e30 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55642c24b900 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55642c266eb8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55642c266ea0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55642c266e68 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55642c266fe0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55642c266fc0 <col:79> 'int' 0
|   |   `-CallExpr 0x55642c267218 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55642c267200 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55642c2671e0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55642bdb8230 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55642c267258 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c267050 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55642c267270 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55642c267098 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55642c267288 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55642c2670d0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55642c2672a0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55642c2671c8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55642c2671b0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55642c267168 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55642c267580 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55642c2674e8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55642c2674b8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55642c267458 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55642c267428 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55642c2673d8 <col:54, col:63> 'char [48]' lvalue ->c 0x55642c2563d0
|     |     |   `-CXXMemberCallExpr 0x55642c2673b8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55642c267388 <col:54> '<bound member function type>' ->xanno 0x55642c24b6b8
|     |     |       `-CXXThisExpr 0x55642c267378 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55642c267440 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55642c267408 <col:67> 'int' lvalue ParmVar 0x55642c24f5e0 'i' 'int'
|     `-CXXConstCastExpr 0x55642c267550 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55642c267538 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55642c267500 <col:91> 'const void *' lvalue ParmVar 0x55642c24f660 'x' 'const void *'
|-CXXMethodDecl 0x55642c24f808 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55642c267628 <col:34, line:640:5>
|   `-ReturnStmt 0x55642c267618 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55642c267600 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55642c2675d0 <col:16> 'Packet *' lvalue ->_data_packet 0x55642c256f88
|         `-CXXThisExpr 0x55642c2675c0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55642c24f948 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55642c24f8b8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55642c2606e8 <col:46> 'bool' true
|-CXXMethodDecl 0x55642c24fac8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55642c24fa00 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55642c24fb70 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55642c250320 <line:660:22> "" ""
| |-EnumConstantDecl 0x55642c24fc70 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250390 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24fc50 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55642c24fc30 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55642c244dd0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55642c24fd00 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c2503a8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24fce0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55642c24fcc0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55642c244e60 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55642c24fd90 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c2503c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24fd70 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c24fd50 <col:21> 'int' 0
| |-EnumConstantDecl 0x55642c24fe20 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c2503d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24fe00 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55642c24fde0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55642c24feb0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c2503f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24fe90 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55642c24fe70 <col:21> 'int' 16
| |-EnumConstantDecl 0x55642c24ff40 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250408 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24ff20 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55642c24ff00 <col:19> 'int' 32
| |-EnumConstantDecl 0x55642c24ffd0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250420 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c24ffb0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55642c24ff90 <col:19> 'int' EnumConstant 0x55642c24fe20 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55642c250060 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250438 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c250040 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55642c250020 <col:19> 'int' EnumConstant 0x55642c24ff40 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55642c250130 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250450 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c250110 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55642c2500f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55642c2500b0 <col:23> 'int' EnumConstant 0x55642c250060 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55642c2500d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55642c250200 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55642c250468 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c2501e0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55642c2501c0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55642c250180 <col:23> 'int' EnumConstant 0x55642c250060 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55642c2501a0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55642c2502d0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55642c250480 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55642c2502b0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55642c250290 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55642c250250 <col:23> 'int' EnumConstant 0x55642c250060 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55642c250270 <col:40> 'int' 8
|-CXXMethodDecl 0x55642c2504c0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55642c250560 <col:68> "" ""
|-CXXMethodDecl 0x55642c2505f8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55642c250698 <col:45> "" ""
|-CXXMethodDecl 0x55642c250730 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55642c2507d0 <col:57> "" ""
|-CXXMethodDecl 0x55642c250868 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55642c250908 <col:45> "" ""
|-CXXMethodDecl 0x55642c2509a0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55642c250a40 <col:57> "" ""
|-CXXMethodDecl 0x55642c250ad0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55642c250b70 <col:51> "" ""
|-CXXMethodDecl 0x55642c250c00 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55642c250ca0 <col:63> "" ""
|-CXXMethodDecl 0x55642c250d30 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55642c250dd0 <col:53> "" ""
|-CXXMethodDecl 0x55642c250e60 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55642c250f00 <col:65> "" ""
|-CXXMethodDecl 0x55642c251018 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55642c250f88 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55642c2510c0 <col:61> "" ""
|-CXXMethodDecl 0x55642c251258 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55642c251148 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55642c2511c0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55642c251308 <col:67> "" ""
|-CXXMethodDecl 0x55642c251420 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55642c251390 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55642c2514c8 <col:63> "" ""
|-CXXMethodDecl 0x55642c251660 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55642c251550 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55642c2515c8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55642c251710 <col:69> "" ""
|-CXXMethodDecl 0x55642c251828 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55642c251798 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55642c2518d0 <col:63> "" ""
|-CXXMethodDecl 0x55642c253fa8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55642c253e98 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55642c253f10 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55642c254058 <col:69> "" ""
|-CXXMethodDecl 0x55642c254170 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55642c2540e0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55642c254218 <col:62> "" ""
|-CXXMethodDecl 0x55642c2543b0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55642c2542a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55642c254318 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55642c254460 <col:68> "" ""
|-CXXMethodDecl 0x55642c254578 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55642c2544e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55642c254620 <col:63> "" ""
|-CXXMethodDecl 0x55642c2547b8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55642c2546a8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55642c254720 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55642c254868 <col:69> "" ""
|-CXXMethodDecl 0x55642c2548f8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55642c254998 <col:64> "" ""
|-CXXMethodDecl 0x55642c254a28 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55642c254ac8 <col:52> "" ""
|-CXXMethodDecl 0x55642c254b58 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55642c254bf8 <col:67> "" ""
|-CXXMethodDecl 0x55642c254c88 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55642c254d28 <col:55> "" ""
|-CXXMethodDecl 0x55642c254e40 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55642c254db0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55642c254ee8 <col:58> "" ""
|-CXXMethodDecl 0x55642c255080 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55642c254f70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55642c254fe8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55642c255130 <col:62> "" ""
|-CXXMethodDecl 0x55642c255248 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55642c2551b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55642c2552f0 <col:58> "" ""
|-CXXMethodDecl 0x55642c255488 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55642c255378 <col:33> col:36 'int'
| |-ParmVarDecl 0x55642c2553f0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55642c255538 <col:62> "" ""
|-CXXMethodDecl 0x55642c255650 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55642c2555c0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55642c2556f8 <col:60> "" ""
|-CXXMethodDecl 0x55642c255890 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55642c255780 <col:34> col:37 'int'
| |-ParmVarDecl 0x55642c2557f8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55642c255940 <col:64> "" ""
|-CXXMethodDecl 0x55642c255a58 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55642c2559c8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55642c255b00 <col:58> "" ""
|-CXXMethodDecl 0x55642c255c98 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55642c255b88 <col:33> col:36 'int'
| |-ParmVarDecl 0x55642c255c00 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55642c255d48 <col:62> "" ""
|-CXXMethodDecl 0x55642c255e60 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55642c255dd0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55642c255f08 <col:59> "" ""
|-CXXMethodDecl 0x55642c2560a0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55642c255f90 <col:33> col:36 'int'
| |-ParmVarDecl 0x55642c256008 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55642c256150 <col:63> "" ""
|-AccessSpecDecl 0x55642c2561c0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55642c2561e8 prev 0x55642c24b3f0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55642c2562e0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55642c2563d0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55642c2564f8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55642c256678 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55642c2567f8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55642c256978 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55642c2677a8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55642c268018 <col:11>
| |-CXXDestructorDecl 0x55642c267880 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55642c2679b8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55642c2679b8
| | `-ParmVarDecl 0x55642c267ac8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55642c267b68 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55642c267b68
| | `-ParmVarDecl 0x55642c267c78 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55642c26aa38 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55642c26ab48 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55642c26adc8 <col:11>
| |   `-ReturnStmt 0x55642c26adb8 <col:11>
| |     `-UnaryOperator 0x55642c26ada0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55642c26ad90 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55642c26abb8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55642c26abb8
|   `-ParmVarDecl 0x55642c26acc8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55642c2569e0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55642c256af8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55642c256b98 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55642c256c00 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55642c256c68 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55642c256cd0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55642c256d30 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55642c256df0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55642c256e50 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55642c256eb0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55642c2676b8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55642c256b98 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55642c268028 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55642c268080 <col:12>
| |-CXXConstructorDecl 0x55642c267ce8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55642c267ce8
| | `-ParmVarDecl 0x55642c267df8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55642c267e98 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55642c267e98
| | `-ParmVarDecl 0x55642c267fa8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55642c26a120 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55642c256f28 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55642c256f88 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55642c256ff0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55642c257058 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55642c2570c0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55642c257128 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55642c257188 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55642c2571e8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55642c257250 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55642c2572d8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55642c256f28 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55642c267650 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55642c257188 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55642c268090 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55642c2680f0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55642c257478 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55642c2573b8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55642c257570 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55642c257758 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55642c257660 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55642c257a28 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55642c257810 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55642c257888 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55642c257900 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c257c48 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55642c257af8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55642c257b70 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55642c260228 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55642c257d08 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55642c257d80 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55642c257df8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55642c260380 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55642c2602f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55642c2604c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55642c260438 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55642c2605c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c339820 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55642c339938 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55642c3399c8 <col:16, col:22> col:16 public
|-EnumDecl 0x55642c3399f0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55642c339af0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55642c339d40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c339ad0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55642c339ab0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55642c339b80 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55642c339d58 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c339b60 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55642c339b40 <col:24> 'int' 22
| |-EnumConstantDecl 0x55642c339c10 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55642c339d70 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c339bf0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55642c339bd0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55642c339ca0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55642c339d88 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55642c339c80 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55642c339c60 <col:25> 'int' 95
| `-EnumConstantDecl 0x55642c339cf0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55642c33b700 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55642c33bb38 <col:7>
|-CXXConstructorDecl 0x55642c33b808 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55642c33b808
| `-ParmVarDecl 0x55642c33b918 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55642c33b9b8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55642c33b9b8
| `-ParmVarDecl 0x55642c33bac8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55642c33dc58 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55642c339db8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55642c339f18 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55642c339fa8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55642c339fe0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55642be71720 'uint32_t' sugar
|   |-Typedef 0x55642bd853d8 'uint32_t'
|   `-TypedefType 0x55642bd5e480 '__uint32_t' sugar
|     |-Typedef 0x55642bd5e078 '__uint32_t'
|     `-BuiltinType 0x55642bd1c450 'unsigned int'
|-CXXConstructorDecl 0x55642c33a128 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55642c33a050 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55642c33b608 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55642c33bb48 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55642c33aec0 'base' 'int'
| | `-ImplicitCastExpr 0x55642c33b6a8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55642c33b668 <col:16> 'int' lvalue ParmVar 0x55642c33a050 'b' 'int'
| `-CompoundStmt 0x55642c33bbb8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55642c33a620 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55642c33a1f0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55642c33a270 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55642c33a2e8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55642c33a368 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55642c33a428 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55642c33a4a8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55642c33aa78 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55642c33a6f0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55642c33a9d8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55642c33a798 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55642c33a838 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55642c33a8b0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55642c33b628 <col:82> 'const ArgContext' lvalue Var 0x55642c32f588 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55642c33cb08 <col:94, line:1067:5>
|     |-DeclStmt 0x55642c33bd48 <line:1054:9, col:64>
|     | `-VarDecl 0x55642c33bbd8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55642c33bd00 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55642c33bf68 <line:1055:9, col:91>
|     | `-VarDecl 0x55642c33bd78 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55642c33bf40 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55642c33bf20 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55642c33bed0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55642c33beb0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55642c33be58 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55642c33be08 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55642c33be38 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55642c33be98 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55642c33be78 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55642c33bf00 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55642c33c0c8 <line:1056:9, col:27>
|     | `-VarDecl 0x55642c33c060 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55642c33c530 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55642c33c460 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55642c33c3e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55642c23b708 0x55642c084ce8 0x55642c0849c0 0x55642c0761a0 0x55642c075e50 0x55642c075740 0x55642c0480b0 0x55642bfd4570
|     | | |-CallExpr 0x55642c33c320 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55642c33c0f0 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55642c33c1a0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55642c33c170 <col:19, col:23> '<bound member function type>' .begin 0x55642c0653a8
|     | | | |   `-DeclRefExpr 0x55642c33c150 <col:19> 'const String' lvalue ParmVar 0x55642c33a798 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55642c33c230 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55642c33c200 <col:32, col:36> '<bound member function type>' .end 0x55642c0655c0
|     | | | |   `-DeclRefExpr 0x55642c33c1e0 <col:32> 'const String' lvalue ParmVar 0x55642c33a798 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55642c33c250 <col:43> 'const bool' lvalue Var 0x55642c33bbd8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55642c33c2b8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55642c33c298 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55642c33c2e0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55642c33c060 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55642c33c300 <col:73> 'const int' lvalue Var 0x55642c33bd78 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55642c33c3c0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55642c33c390 <col:16, col:20> '<bound member function type>' .end 0x55642c0655c0
|     | |     `-DeclRefExpr 0x55642c33c370 <col:16> 'const String' lvalue ParmVar 0x55642c33a798 'str' 'const String &'
|     | `-BinaryOperator 0x55642c33c510 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55642c33c4a8 <col:13> 'int' lvalue ->status 0x55642c33af28
|     |   | `-CXXThisExpr 0x55642c33c498 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55642c33c4f8 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55642c33c4d8 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55642c339b80 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55642c33c780 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55642c33c668 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55642c33c650 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55642c33c638 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55642c33c558 <col:13> 'int' lvalue ->status 0x55642c33af28
|     | | |     `-CXXThisExpr 0x55642c33c548 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55642c33c618 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55642c33c5e8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55642c33c598 <col:23> 'int' lvalue ->status 0x55642c33af28
|     | |   |   `-CXXThisExpr 0x55642c33c588 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55642c33c600 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55642c33c5c8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55642c339c10 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55642c33c760 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55642c33c700 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55642c33c6a8 <col:13, col:18> '<bound member function type>' .error 0x55642c1ff380
|     |   | | `-DeclRefExpr 0x55642c33c688 <col:13> 'const ArgContext' lvalue ParmVar 0x55642c33a8b0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55642c33c728 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55642c33c6d8 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55642c33c750 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55642c33c740 <col:20> 'bool' false
|     |-DeclStmt 0x55642c33c958 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55642c33c900 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55642c33c890 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55642c33cab8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55642c33c970 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55642c008538
|     | |-DeclRefExpr 0x55642c33c9b8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55642c33c060 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55642c33ca88 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55642c33ca00 <col:64> 'V' lvalue ParmVar 0x55642c33a838 'result' 'V &'
|     `-ReturnStmt 0x55642c33caf8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55642c33cae8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55642c33ae38 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55642c33aae8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55642c33ad98 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55642c33ab98 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55642c33ac38 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55642c33acb0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55642c33b648 <col:71> 'const ArgContext' lvalue Var 0x55642c32f588 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55642c33d278 <col:83, line:1083:5>
| |   |-DeclStmt 0x55642c33cbd0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55642c33cb68 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55642c33d250 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55642c33ce60 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55642c33cce8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55642c33ccb0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55642c33cbf8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55642c33cc50 <col:31> 'const String' lvalue ParmVar 0x55642c33ab98 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55642c33cc70 <col:36> 'V' lvalue Var 0x55642c33cb68 'x' 'V'
| |     | |   `-DeclRefExpr 0x55642c33cc90 <col:39> 'const ArgContext' lvalue ParmVar 0x55642c33acb0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55642c33ce40 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55642c33ce20 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55642c33ce08 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55642c33cdf0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55642c33cd10 <col:17> 'int' lvalue ->status 0x55642c33af28
| |     |     |     `-CXXThisExpr 0x55642c33cd00 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55642c33cdd0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55642c33cda0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55642c33cd50 <col:27> 'int' lvalue ->status 0x55642c33af28
| |     |       |   `-CXXThisExpr 0x55642c33cd40 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55642c33cdb8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55642c33cd80 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55642c339c10 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55642c33ce90 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55642c33ce80 <col:20> 'bool' false
| |     `-IfStmt 0x55642c33d228 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55642c33cf30 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55642c33cf00 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55642c33ceb0 <col:18> 'int' lvalue ->status 0x55642c33af28
| |       | |   `-CXXThisExpr 0x55642c33cea0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55642c33cf18 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55642c33cee0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55642c339c10 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55642c33d168 <col:42, line:1079:9>
| |       | |-CallExpr 0x55642c33d110 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55642c33cf60 <line:1076:13> '<bound member function type>' ->range_error 0x55642c33b538
| |       | | | `-CXXThisExpr 0x55642c33cf50 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55642c33cf90 <col:25> 'const ArgContext' lvalue ParmVar 0x55642c33acb0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55642c33d070 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55642c33d0e8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55642c33d0c8 <col:43> 'V' lvalue Var 0x55642c33cb68 'x' 'V'
| |       | `-ReturnStmt 0x55642c33d158 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55642c33d148 <col:20> 'bool' false
| |       `-CompoundStmt 0x55642c33d208 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55642c33d1c8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55642c33d188 <col:13> 'V' lvalue ParmVar 0x55642c33ac38 'result' 'V &'
| |         | `-DeclRefExpr 0x55642c33d1a8 <col:22> 'V' lvalue Var 0x55642c33cb68 'x' 'V'
| |         `-ReturnStmt 0x55642c33d1f8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55642c33d1e8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55642c3800a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55642c37fe88 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55642c37ff58 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55642c37ffc0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55642c33b648 <col:71> 'const ArgContext' lvalue Var 0x55642c32f588 'blank_args' 'const ArgContext'
|-FieldDecl 0x55642c33aec0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55642c33af28 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55642c33af78 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55642c33b230 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55642c33afb8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55642c33b038 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55642c33b0b0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55642c33b130 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55642c33b538 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55642c33b300 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55642c33b378 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55642c33b410 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55642c33dad8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55642c33dad8
| `-ParmVarDecl 0x55642c33dbe8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55642c33dd68 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55642c33dd68
| `-ParmVarDecl 0x55642c33de78 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55642c37fc30 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55642c3423a0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55642c3425f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55642c3a7a68 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55642c3a7f40 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55642c3a7f20 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55642c3a7fb0 <col:19>
|-CXXConstructorDecl 0x55642c3a7b68 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55642c3a7b68
| `-ParmVarDecl 0x55642c3a7c78 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55642c3a7d18 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55642c3a7e68 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55642c3a8b70 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55642c3a8890 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55642c3a8860 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55642c3a8830 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55642c3a7e68 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55642c3a8be0 <col:19>
`-CXXDestructorDecl 0x55642c3a7ff0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
