
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class BridgeMessage
         0 |   uint32_t _max_age
         4 |   uint32_t _hello_time
         8 |   uint32_t _forward_delay
        16 |   uint64_t _root
        24 |   uint64_t _bridge_id
        32 |   uint32_t _cost
        36 |   uint16_t _port_id
        38 |   _Bool _tc
        40 |   class Timestamp _timestamp
        40 |     union Timestamp::rep_t _t
        40 |       int64_t x
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct EtherSpanTree::PortInfo
         0 |   enum EtherSpanTree::PortState state
         8 |   class Timestamp since
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   _Bool needs_tca
        24 |   class BridgeMessage msg
        24 |     uint32_t _max_age
        28 |     uint32_t _hello_time
        32 |     uint32_t _forward_delay
        40 |     uint64_t _root
        48 |     uint64_t _bridge_id
        56 |     uint32_t _cost
        60 |     uint16_t _port_id
        62 |     _Bool _tc
        64 |     class Timestamp _timestamp
        64 |       union Timestamp::rep_t _t
        64 |         int64_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691804368 prev 0x5606917fbb08 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560691804460 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5606918044f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x560691804568 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x560691804628 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5606918046f0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x560691804868 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5606918047a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x560691804910 <col:24>
| `-OptimizeNoneAttr 0x560691804968 <col:34>
|-CXXMethodDecl 0x5606918049b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x560691804c68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x560691804a60 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560691804ad8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x560691804b58 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x560691804d20 <line:229:7, col:14> col:7 private
|-FieldDecl 0x560691804d58 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x560691804dc0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x560691804e48 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x560691805168 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x560691804f00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560691804f78 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x560691804ff0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x560691805070 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x560691805280 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56069180cbf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56069180cbf8
| `-ParmVarDecl 0x56069180cd08 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56069180cda8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56069180cda8
| `-ParmVarDecl 0x56069180ceb8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5606917ac0f8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917f7380 prev 0x5606917f7100 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606917f7478 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5606917f7508 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5606917f7568 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5606917f7658 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5606917f7758 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5606917f7928 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5606917f77d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5606917f7850 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5606917f7ab8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5606917f79f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5606917f7b60 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5606917f7c98 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5606917f7bd0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5606917f7e38 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5606917f7d78 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5606917f7fd8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5606917f7f18 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5606917f8080 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5606917f8180 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5606917f8260 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917f8160 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5606917f8140 <col:26> 'int' 1
| `-EnumConstantDecl 0x5606917f8210 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5606917f8278 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917f81f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5606917f81d0 <col:44> 'int' 2
|-CXXMethodDecl 0x5606917f83c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5606917f82a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5606917f8328 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5606917f8518 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5606917f8488 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5606917f8758 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5606917f85d8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5606917f8650 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5606917f8808 <col:20>
| `-OptimizeNoneAttr 0x5606917f8860 <col:30>
|-CXXMethodDecl 0x5606917f8968 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5606917f88a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5606917f8a10 <col:20>
| `-OptimizeNoneAttr 0x5606917f8a68 <col:30>
|-CXXMethodDecl 0x5606917f8ab8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5606917f8b80 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5606917f8c98 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5606917f8d20 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5606917f8da8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5606917f8e30 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5606917f8eb8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5606917f8f48 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5606917f9008 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5606917f9090 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x5606917f9118 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5606917f91a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5606917f9228 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5606917f92b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5606917f9340 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5606917f9400 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5606917f9490 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5606917f95e0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5606917f9548 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5606917f9770 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5606917f96a0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5606917f9a20 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5606917f9828 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5606917f98a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5606917f9928 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5606917f9ad8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5606917f9be0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5606917f9e70 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917f9bc0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5606917f9ba0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5606917f9c70 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5606917f9e88 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917f9c50 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5606917f9c30 <col:32> 'int' 20
| |-EnumConstantDecl 0x5606917f9d00 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5606917f9ea0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917f9ce0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5606917f9cc0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5606917f9d90 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5606917f9eb8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917f9d70 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5606917f9d50 <col:35> 'int' 100
| `-EnumConstantDecl 0x5606917f9e20 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5606917f9ed0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917f9e00 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5606917f9de0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5606917f9f10 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5606917fa350 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5606917fa1c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5606917fa238 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5606917fa420 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5606917fa5a0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5606917fa4d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5606917fa7a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5606917fa658 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5606917fa6d0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5606917fa8a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5606917fa948 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5606917faa10 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917faaa0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5606917facd0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917faa80 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5606917faa60 <col:36> 'int' EnumConstant 0x5606917faa10 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917faaf0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917fab40 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917fab90 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917fabe0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5606917fac30 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5606917fac80 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5606917fadb8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5606917facf8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5606917fae80 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5606917faf40 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5606917fb000 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5606917fb0c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5606917fb1d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5606917fb2a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5606917fb420 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5606917fb350 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5606917fb548 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5606917fb748 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5606917fb5f8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5606917fb678 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x560691809098 <col:54, line:127:5>
|   |-ParenExpr 0x560691808f48 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x560691808f18 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x560691808c08 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560691808be0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x560691808bc8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x560691808bb0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x560691808b80 <col:31> 'Router *' lvalue ->_router 0x560691806a60
|   |   |         `-CXXThisExpr 0x560691808b70 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x560691808c68 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560691808c48 <col:48> 'int' 0
|   |   `-CallExpr 0x560691808e78 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x560691808e60 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560691808e40 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560691808eb8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560691808cd8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x560691808ed0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560691808cf8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x560691808ee8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560691808d30 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x560691808f00 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560691808e28 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560691808e10 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560691808dc8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x560691808fe0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x560691808f78 <col:9> 'Router *' lvalue ->_router 0x560691806a60
|   | | `-CXXThisExpr 0x560691808f68 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x560691808fc8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x560691808fa8 <col:19> 'Router *' lvalue ParmVar 0x5606917fb5f8 'r' 'Router *'
|   `-BinaryOperator 0x560691809078 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x560691809010 <col:9> 'int' lvalue ->_eindex 0x560691806ac8
|     | `-CXXThisExpr 0x560691809000 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x560691809060 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x560691809040 <col:19> 'int' lvalue ParmVar 0x5606917fb678 'eindex' 'int'
|-CXXMethodDecl 0x5606917fb8d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5606917fb808 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5606917fb9a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5606917fba68 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5606917fbb08 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5606917fbd58 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5606917fbbd0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5606917fbc50 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5606917fbe08 <col:20>
| `-OptimizeNoneAttr 0x5606917fbe60 <col:30>
|-CXXMethodDecl 0x5606917fbf68 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5606917fbea0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5606917fc010 <col:20>
| `-OptimizeNoneAttr 0x5606917fc068 <col:30>
|-CXXMethodDecl 0x5606917fc138 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5606917fc0a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5606917fc1e0 <col:20>
| `-OptimizeNoneAttr 0x5606917fc238 <col:30>
|-CXXMethodDecl 0x5606917fc3c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5606917fc270 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5606917fc2f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5606917fc558 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5606917fc490 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5606917fc6a8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5606917fc618 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5606917fc7f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5606917fc768 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5606917fc948 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5606917fc8b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5606917fcc08 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5606917fca00 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5606917fca80 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5606917fcb28 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5606917fcce0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5606917fcda0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5606917fd070 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5606917fcf20 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5606917fcf98 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5606917fd198 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5606917fd370 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5606917fd250 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5606917fd2d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5606917fd558 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5606917fd438 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5606917fd4b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5606917fd8c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5606917fd618 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5606917fd690 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5606917fd710 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560691808680 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560691808660 <col:106> 'int' 0
| `-ParmVarDecl 0x5606917fd788 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5606918086b8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560691808698 <col:126> 'int' 0
|-CXXMethodDecl 0x5606917fdc68 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5606917fd998 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5606917fda30 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5606917fdab0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5606917fdb28 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5606918086f0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5606918086d0 <col:114> 'int' 0
|-CXXMethodDecl 0x5606917fdff8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5606917fdd40 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5606917fddb8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5606917fde38 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x560691808708 <col:96> 'int' 0
| `-ParmVarDecl 0x5606917fdeb0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560691808748 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560691808728 <col:116> 'int' 0
|-CXXMethodDecl 0x5606917fe378 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5606917fe0c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5606917fe140 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917fe1c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560691808780 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560691808760 <col:109> 'int' 0
| `-ParmVarDecl 0x5606917fe238 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5606918087b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560691808798 <col:129> 'int' 0
|-CXXMethodDecl 0x5606917fe6f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5606917fe448 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5606917fe4c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917fe540 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5606917fe5b8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5606918087f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5606918087d0 <col:117> 'int' 0
|-CXXMethodDecl 0x5606917fea88 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5606917fe7d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5606917fe848 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917fe8c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x560691808808 <col:99> 'int' 0
| `-ParmVarDecl 0x5606917fe940 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560691808848 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560691808828 <col:119> 'int' 0
|-CXXMethodDecl 0x5606917feea8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5606917feb58 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5606917febd8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5606917fec50 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917fecd0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560691808880 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560691808860 <col:108> 'int' 0
| `-ParmVarDecl 0x5606917fed50 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5606918088b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x560691808898 <col:141> 'int' 0
|-CXXMethodDecl 0x5606917ff2c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5606917fef80 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5606917ff000 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5606917ff078 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917ff0f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5606917ff178 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5606918088d0 <col:121> 'int' 0
|-CXXMethodDecl 0x5606917ff6f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5606917ff3a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5606917ff428 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5606917ff4a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5606917ff520 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5606918088f0 <col:98> 'int' 0
| `-ParmVarDecl 0x5606917ff5a0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x560691808910 <col:123> 'int' 0
|-CXXMethodDecl 0x5606917ff9c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5606917ff7d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5606917ff850 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5606917ff8d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x560691808930 <col:80> 'int' 0
|-EnumDecl 0x5606917ffa78 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5606917ffb80 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5606917ffe10 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917ffb60 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5606917ffb40 <col:42> 'int' 1
| |-EnumConstantDecl 0x5606917ffc10 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5606917ffe28 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917ffbf0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5606917ffbd0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5606917ffca0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5606917ffe40 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917ffc80 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5606917ffc60 <col:44> 'int' 4
| |-EnumConstantDecl 0x5606917ffd30 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5606917ffe58 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917ffd10 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5606917ffcf0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5606917ffdc0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5606917ffe70 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917ffda0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5606917ffd80 <col:34> 'int' 6
|-CXXMethodDecl 0x560691800128 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5606917ffe98 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5606917fff38 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5606917fffb8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x560691800030 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5606918089e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5606918089d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5606918089b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x560691808998 <col:98, col:105> 'String' (CXXTemporary 0x560691808998)
|           `-CXXTemporaryObjectExpr 0x560691808960 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5606918003c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5606918001f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560691800270 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5606918002e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560691808a98 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560691808a80 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560691808a68 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560691808a48 <col:94, col:101> 'String' (CXXTemporary 0x560691808a48)
| |         `-CXXTemporaryObjectExpr 0x560691808a10 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x560691809280 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5606918091f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5606918091c8 <col:9> '<bound member function type>' ->add_task_handlers 0x560691800128
|     | `-CXXThisExpr 0x5606918091b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560691809238 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560691809138 <col:27> 'Task *' lvalue ParmVar 0x5606918001f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x560691809250 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x560691809158 <col:33> 'NotifierSignal *' lvalue ParmVar 0x560691800270 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x560691809268 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560691809178 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5606917ffdc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560691809198 <col:62> 'const String' lvalue ParmVar 0x5606918002e8 'prefix' 'const String &'
|-CXXMethodDecl 0x5606918005d8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x560691800490 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560691800508 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560691808b48 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560691808b30 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560691808b18 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560691808af8 <col:70, col:77> 'String' (CXXTemporary 0x560691808af8)
| |         `-CXXTemporaryObjectExpr 0x560691808ac0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x560691809458 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5606918093d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5606918093a0 <col:9> '<bound member function type>' ->add_task_handlers 0x560691800128
|     | `-CXXThisExpr 0x560691809390 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560691809410 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560691809310 <col:27> 'Task *' lvalue ParmVar 0x560691800490 'task' 'Task *'
|     |-ImplicitCastExpr 0x560691809428 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x560691809330 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x560691809440 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560691809350 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5606917ffdc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560691809370 <col:57> 'const String' lvalue ParmVar 0x560691800508 'prefix' 'const String &'
|-CXXMethodDecl 0x5606918008b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5606918006a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691800720 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691800798 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x560691800b68 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x560691800988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691800a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691800a88 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x560691800e58 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x560691800c38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691800cb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691800d30 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x560691801108 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x560691800f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691800fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691801028 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5606918013b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5606918011d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691801258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5606918012d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x560691801668 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x560691801488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691801508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691801580 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x560691801918 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x560691801738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5606918017b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691801838 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x560691801c28 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x560691801a40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691801ac0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691801b40 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x560691801f08 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x560691801cf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691801d78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691801e20 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5606918021e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x560691801fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691802058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691802100 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x560691802450 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5606918022b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x560691802338 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5606918023b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5606918026f8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x560691802520 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5606918025a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x560691802618 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5606918029a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5606918027c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691802848 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5606918028c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x560691802c58 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x560691802a78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691802af8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691802b70 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x560691802f08 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x560691802d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691802da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560691802e20 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5606918031d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x560691802fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691803058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5606918030f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x560691803508 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5606918032a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560691803328 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5606918033a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x560691803418 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560691808b60 <col:93> 'bool' false
|-CXXMethodDecl 0x5606918036f0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5606918035d8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x560691803658 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5606918038c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5606918037b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x560691803830 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x560691803ba8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560691803988 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x560691803a00 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x560691803a80 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x560691803af8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x560691803e98 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560691803c78 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x560691803cf0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x560691803d70 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x560691803de8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5606918040d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x560691803f70 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x560691803ff0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5606918042b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x560691804198 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x560691804218 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x560691804368 prev 0x5606917fbb08 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560691804460 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5606918044f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x560691804568 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x560691804628 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5606918046f0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x560691804868 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5606918047a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x560691804910 <col:24>
| | `-OptimizeNoneAttr 0x560691804968 <col:34>
| |-CXXMethodDecl 0x5606918049b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x560691804c68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x560691804a60 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560691804ad8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x560691804b58 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x560691804d20 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x560691804d58 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x560691804dc0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x560691804e48 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x560691805168 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x560691804f00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560691804f78 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x560691804ff0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x560691805070 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x560691805280 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56069180cbf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56069180cbf8
| | `-ParmVarDecl 0x56069180cd08 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56069180cda8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56069180cda8
| | `-ParmVarDecl 0x56069180ceb8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5606917ac0f8 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5606918052f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x560691805398 <col:38> "" ""
|-CXXMethodDecl 0x560691805428 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5606918054c8 <col:44> "" ""
|-AccessSpecDecl 0x560691805538 <line:260:3, col:10> col:3 private
|-EnumDecl 0x560691805560 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x560691805660 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5606918056b0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560691805640 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x560691805620 <col:27> 'int' 4
|-FieldDecl 0x560691805768 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x560691805918 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5606918059d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x560691806a60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x560691806ac8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x560691806c18 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x560691806b58 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x560691806dc8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x560691806cd8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x560691806fa8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x560691806e88 <col:20> col:23 'int'
| `-ParmVarDecl 0x560691806f08 <col:25> col:28 'int'
|-CXXMethodDecl 0x560691807250 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x560691807070 <col:23> col:26 'int'
| |-ParmVarDecl 0x5606918070f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x560691807168 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x560691807308 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5606918073d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x560691807420 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x560691807470 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x560691807650 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x560691807500 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x560691807578 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5606918078f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x560691807718 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x560691807798 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x560691807810 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x560691807b18 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5606918079c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x560691807a48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x560691807e50 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x560691807bd8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x560691807c58 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x560691807cd0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x560691807d50 <col:57> col:60 'int'
|-CXXMethodDecl 0x560691808038 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560691807f20 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x560691807fa0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x560691808188 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5606918080f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x560691808508 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x560691808248 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5606918082c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x560691808340 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5606918083c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x560691808620 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<72> >
         0 |   vector_memory<class sized_array_memory<72> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct EtherSpanTree::PortInfo>
         0 |   class vector_memory<class sized_array_memory<72> > vm_
         0 |     vector_memory<class sized_array_memory<72> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherSpanTree
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Suppressor * _input_sup
       120 |   class Suppressor * _output_sup
       128 |   class EtherSwitch * _switch
       136 |   class Timestamp * _topology_change
       144 |   _Bool _send_tc_msg
       152 |   uint64_t _bridge_id
       160 |   uint16_t _bridge_priority
       162 |   uint16_t _long_cache_timeout
       164 |   uint8_t [6] _addr
       176 |   class BridgeMessage _best
       176 |     uint32_t _max_age
       180 |     uint32_t _hello_time
       184 |     uint32_t _forward_delay
       192 |     uint64_t _root
       200 |     uint64_t _bridge_id
       208 |     uint32_t _cost
       212 |     uint16_t _port_id
       214 |     _Bool _tc
       216 |     class Timestamp _timestamp
       216 |       union Timestamp::rep_t _t
       216 |         int64_t x
       224 |   class Vector<struct EtherSpanTree::PortInfo> _port
       224 |     class vector_memory<class sized_array_memory<72> > vm_
       224 |       vector_memory<class sized_array_memory<72> >::type * l_
       232 |       vector_memory::size_type n_
       236 |       vector_memory::size_type capacity_
       240 |   class Timer _hello_timer
       240 |     int _schedpos1
       248 |     class Timestamp _expiry_s
       248 |       union Timestamp::rep_t _t
       248 |         int64_t x
       256 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       256 |       TimerCallback callback
       264 |     void * _thunk
       272 |     class Element * _owner
       280 |     class RouterThread * _thread
           | [sizeof=288, dsize=288, align=8,
           |  nvsize=288, nvalign=8]

*** Dumping AST Record Layout
         0 | class Bitvector
         0 |   int _max
         8 |   Bitvector::word_type * _data
        16 |   Bitvector::word_type [2] _f
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Suppressor
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Bitvector _suppressed
       112 |     int _max
       120 |     Bitvector::word_type * _data
       128 |     Bitvector::word_type [2] _f
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918f4e40 prev 0x5606917f7220 <../dummy_inc/click/bitvector.hh:20:1, line:95:1> line:20:7 referenced class Bitvector definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606918f4f38 <col:1, col:7> col:7 implicit referenced class Bitvector
|-AccessSpecDecl 0x5606918f4fc8 <line:21:3, col:9> col:3 public
|-CXXRecordDecl 0x5606918f4ff0 <line:23:5, col:11> col:11 referenced class Bit
|-TypedefDecl 0x5606918f5178 <line:24:5, col:56> col:31 referenced unspecified_bool_type 'bool (Bitvector::*)() const'
| `-MemberPointerType 0x5606918f50f0 'bool (Bitvector::*)() const'
|   |-RecordType 0x5606917f72b0 'Bitvector'
|   | `-CXXRecord 0x5606918f4e40 'Bitvector'
|   `-ParenType 0x5606918edc60 'bool () const' sugar
|     `-FunctionProtoType 0x56069133d760 'bool () const' const cdecl
|       `-BuiltinType 0x5606912942f0 'bool'
|-TypedefDecl 0x5606918f51e0 <line:26:5, col:22> col:22 referenced word_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5606913ead90 'uint32_t' sugar
|   |-Typedef 0x5606912fd408 'uint32_t'
|   `-TypedefType 0x5606912d6440 '__uint32_t' sugar
|     |-Typedef 0x5606912d6038 '__uint32_t'
|     `-BuiltinType 0x560691294410 'unsigned int'
|-EnumDecl 0x5606918f5238 <line:27:5, col:47> col:5
| |-EnumConstantDecl 0x5606918f5340 <col:12, col:20> col:12 referenced wbits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
| | `-ImplicitCastExpr 0x5606918f54b0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606918f5320 <col:20> 'int' Int: 32
| |     `-IntegerLiteral 0x5606918f5300 <col:20> 'int' 32
| |-EnumConstantDecl 0x5606918f53d0 <col:24, col:33> col:24 referenced wshift 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
| | `-ImplicitCastExpr 0x5606918f54c8 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606918f53b0 <col:33> 'int' Int: 5
| |     `-IntegerLiteral 0x5606918f5390 <col:33> 'int' 5
| `-EnumConstantDecl 0x5606918f5460 <col:36, col:44> col:36 referenced wmask 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|   `-ImplicitCastExpr 0x5606918f54e0 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606918f5440 <col:44> 'int' Int: 31
|       `-IntegerLiteral 0x5606918f5420 <col:44> 'int' 31
|-CXXConstructorDecl 0x5606918f5530 <line:29:5, col:22> col:12 Bitvector 'void ()' inline
|-CXXConstructorDecl 0x5606918f5680 <line:30:5, col:36> col:21 Bitvector 'void (int)' inline
| `-ParmVarDecl 0x5606918f55f0 <col:31, col:35> col:35 n 'int'
|-CXXConstructorDecl 0x5606918f57d0 <line:31:5, col:39> col:21 Bitvector 'void (bool)' inline
| `-ParmVarDecl 0x5606918f5740 <col:31, col:36> col:36 bit 'bool'
|-CXXConstructorDecl 0x5606918f59e8 <line:32:5, col:37> col:12 Bitvector 'void (int, bool)' inline
| |-ParmVarDecl 0x5606918f5898 <col:22, col:26> col:26 n 'int'
| `-ParmVarDecl 0x5606918f5910 <col:29, col:34> col:34 bit 'bool'
|-CXXConstructorDecl 0x5606918f5b98 <line:33:5, col:40> col:12 used Bitvector 'void (const Bitvector &)' inline
| `-ParmVarDecl 0x5606918f5ad8 <col:22, col:39> col:39 x 'const Bitvector &'
|-CXXDestructorDecl 0x5606918f5c90 <line:34:5, col:23> col:12 used ~Bitvector 'void () noexcept' inline
|-CXXMethodDecl 0x5606918f5dc0 <line:36:5, col:23> col:16 used size 'int () const' inline
|-CXXMethodDecl 0x5606918f5f38 <line:37:5, col:32> col:16 used operator[] 'Bitvector::Bit (int)' inline
| `-ParmVarDecl 0x5606918f5e78 <col:27, col:31> col:31 i 'int'
|-CXXMethodDecl 0x5606918f6088 <line:38:5, col:35> col:17 used operator[] 'bool (int) const' inline
| `-ParmVarDecl 0x5606918f5ff8 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5606918f61d8 <line:39:5, col:31> col:16 force_bit 'Bitvector::Bit (int)' inline
| `-ParmVarDecl 0x5606918f6148 <col:26, col:30> col:30 i 'int'
|-CXXMethodDecl 0x5606918f62a8 <line:41:5, col:28> col:16 used word_size 'int () const' inline
|-CXXMethodDecl 0x5606918f6370 <line:42:5, col:27> col:16 max_word 'int () const' inline
|-CXXMethodDecl 0x5606918f64a8 <line:43:5, col:29> col:23 words 'Bitvector::word_type *()' inline
|-CXXMethodDecl 0x5606918f65c8 <line:44:5, col:37> col:29 used words 'const Bitvector::word_type *() const' inline
|-CXXMethodDecl 0x5606918f6688 <line:46:5, col:17> col:10 used zero 'bool () const'
|-CXXConversionDecl 0x5606918f67f8 <line:47:5, col:45> col:12 operator bool (Bitvector::*)() const 'Bitvector::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5606918f68c8 <line:48:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5606918f6b18 <line:50:5, col:38> col:16 used assign 'Bitvector &(int, bool)'
| |-ParmVarDecl 0x5606918f6980 <col:23, col:27> col:27 n 'int'
| `-ParmVarDecl 0x5606918f69f8 <col:30, col:35> col:35 bit 'bool'
|-CXXMethodDecl 0x5606918f6c98 <line:51:5, col:44> col:16 operator= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5606918f6bd8 <col:26, col:43> col:43 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f6d60 <line:52:5, col:16> col:10 used clear 'void ()'
|-CXXMethodDecl 0x5606918f6ea8 <line:53:5, col:22> col:10 used resize 'void (int)'
| `-ParmVarDecl 0x5606918f6e18 <col:17, col:21> col:21 n 'int'
|-FriendDecl 0x5606918f7168 <line:55:5, col:73> col:24
| `-FunctionDecl 0x5606918f70a8 parent 0x560691294278 <col:5, col:73> col:24 used operator== 'bool (const Bitvector &, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f6f60 <col:35, col:52> col:52 a 'const Bitvector &'
|   `-ParmVarDecl 0x5606918f6fd8 <col:55, col:72> col:72 b 'const Bitvector &'
|-FriendDecl 0x5606918f7388 <line:56:5, col:73> col:24
| `-FunctionDecl 0x5606918f72c8 parent 0x560691294278 <col:5, col:73> col:24 operator!= 'bool (const Bitvector &, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f71b8 <col:35, col:52> col:52 a 'const Bitvector &'
|   `-ParmVarDecl 0x5606918f7230 <col:55, col:72> col:72 b 'const Bitvector &'
|-CXXMethodDecl 0x5606918f7498 <line:57:5, col:51> col:10 nonzero_intersection 'bool (const Bitvector &) const'
| `-ParmVarDecl 0x5606918f73d8 <col:31, col:48> col:48 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f7588 <line:59:5, col:34> col:22 used operator~ 'Bitvector () const' inline
|-FriendDecl 0x5606918f7848 <line:60:5, col:70> col:29
| `-FunctionDecl 0x5606918f7788 parent 0x560691294278 <col:5, col:70> col:29 used operator& 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f7638 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5606918f76b0 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5606918f7a68 <line:61:5, col:70> col:29
| `-FunctionDecl 0x5606918f79a8 parent 0x560691294278 <col:5, col:70> col:29 operator| 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f7898 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5606918f7910 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5606918f7c88 <line:62:5, col:70> col:29
| `-FunctionDecl 0x5606918f7bc8 parent 0x560691294278 <col:5, col:70> col:29 operator^ 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f7ab8 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5606918f7b30 <col:52, col:69> col:69 b 'const Bitvector &'
|-FriendDecl 0x5606918f7ea8 <line:63:5, col:70> col:29
| `-FunctionDecl 0x5606918f7de8 parent 0x560691294278 <col:5, col:70> col:29 operator- 'Bitvector (Bitvector, const Bitvector &)' inline
|   |-ParmVarDecl 0x5606918f7cd8 <col:39, col:49> col:49 a 'Bitvector' destroyed
|   `-ParmVarDecl 0x5606918f7d50 <col:52, col:69> col:69 b 'const Bitvector &'
|-CXXMethodDecl 0x5606918f7f08 <line:65:5, col:15> col:10 used flip 'void ()'
|-CXXMethodDecl 0x5606918f7fc8 <line:66:5, col:24> col:17 negate 'void ()' inline
|-CXXMethodDecl 0x5606918f8108 <line:67:5, col:45> col:16 used operator&= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5606918f8078 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f8250 <line:68:5, col:45> col:16 used operator|= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5606918f81c0 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f8398 <line:69:5, col:45> col:16 used operator^= 'Bitvector &(const Bitvector &)'
| `-ParmVarDecl 0x5606918f8308 <col:27, col:44> col:44 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f84e0 <line:70:5, col:52> col:23 operator-= 'Bitvector &(const Bitvector &)' inline
| `-ParmVarDecl 0x5606918f8450 <col:34, col:51> col:51 x 'const Bitvector &'
|-CXXMethodDecl 0x5606918f86e8 <line:71:5, col:50> col:10 offset_or 'void (const Bitvector &, int)'
| |-ParmVarDecl 0x5606918f8598 <col:20, col:37> col:37 x 'const Bitvector &'
| `-ParmVarDecl 0x5606918f8618 <col:40, col:44> col:44 offset 'int'
|-CXXMethodDecl 0x5606918f88f8 <line:72:5, col:70> col:10 or_with_difference 'void (const Bitvector &, Bitvector &)'
| |-ParmVarDecl 0x5606918f87a8 <col:29, col:46> col:46 x 'const Bitvector &'
| `-ParmVarDecl 0x5606918f8820 <col:49, col:60> col:60 difference 'Bitvector &'
|-CXXMethodDecl 0x5606918f8a78 <line:74:5, col:27> col:10 used swap 'void (Bitvector &)'
| `-ParmVarDecl 0x5606918f89b8 <col:15, col:26> col:26 x 'Bitvector &'
|-TypedefDecl 0x5606918f8b30 <line:77:5, col:23> col:23 data_word_type 'Bitvector::word_type':'unsigned int'
| |-TypedefType 0x5606918f6410 'Bitvector::word_type' sugar
| | |-Typedef 0x5606918f51e0 'word_type'
| | `-TypedefType 0x5606913ead90 'uint32_t' sugar
| |   |-Typedef 0x5606912fd408 'uint32_t'
| |   `-TypedefType 0x5606912d6440 '__uint32_t' sugar
| |     |-Typedef 0x5606912d6038 '__uint32_t'
| |     `-BuiltinType 0x560691294410 'unsigned int'
| `-DeprecatedAttr 0x5606918f8b88 <col:53> "" ""
|-EnumDecl 0x5606918f8bf8 <line:78:5, col:35> col:5
| `-EnumConstantDecl 0x5606918f8d00 <col:12, col:29> col:12 data_word_bits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:78:5)'
|   `-ImplicitCastExpr 0x5606918f8d50 <col:29> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606918f8ce0 <col:29> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' Int: 32
|       `-DeclRefExpr 0x5606918f8cc0 <col:29> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' EnumConstant 0x5606918f5340 'wbits' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|-CXXMethodDecl 0x5606918f8d88 <line:79:5, col:62> col:23 data_words 'Bitvector::word_type *()' inline
| `-DeprecatedAttr 0x5606918f8e28 <col:51> "" ""
|-CXXMethodDecl 0x5606918f8eb8 <line:80:5, col:74> col:29 data_words 'const Bitvector::word_type *() const' inline
| `-DeprecatedAttr 0x5606918f8f58 <col:63> "" ""
|-AccessSpecDecl 0x5606918f8fc8 <line:83:3, col:10> col:3 private
|-EnumDecl 0x5606918f8ff0 <line:85:5, col:54> col:5
| |-EnumConstantDecl 0x5606918f90f0 <col:12, col:22> col:12 referenced ninline 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
| | `-ImplicitCastExpr 0x5606918f9228 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606918f90d0 <col:22> 'int' Int: 2
| |     `-IntegerLiteral 0x5606918f90b0 <col:22> 'int' 2
| `-EnumConstantDecl 0x5606918f91d8 <col:25, col:48> col:25 referenced inlinebits 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
|   `-ImplicitCastExpr 0x5606918f9240 <col:38, col:48> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606918f91b8 <col:38, col:48> 'int' Int: 64
|       `-BinaryOperator 0x5606918f9198 <col:38, col:48> 'int' '*'
|         |-DeclRefExpr 0x5606918f9140 <col:38> 'int' EnumConstant 0x5606918f90f0 'ninline' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:85:5)'
|         `-ImplicitCastExpr 0x5606918f9180 <col:48> 'int' <IntegralCast>
|           `-DeclRefExpr 0x5606918f9160 <col:48> 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)' EnumConstant 0x5606918f5340 'wbits' 'Bitvector::(anonymous enum at ../dummy_inc/click/bitvector.hh:27:5)'
|-FieldDecl 0x5606918f9270 <line:87:5, col:9> col:9 referenced _max 'int'
|-FieldDecl 0x5606918f92d0 <line:88:5, col:16> col:16 referenced _data 'Bitvector::word_type *'
|-FieldDecl 0x5606918f93b8 <line:89:5, col:25> col:15 referenced _f 'Bitvector::word_type [2]'
|-CXXMethodDecl 0x5606918f94a8 <line:91:5, col:51> col:10 used finish_copy_constructor 'void (const Bitvector &)'
| `-ParmVarDecl 0x5606918f9418 <col:34, col:50> col:51 'const Bitvector &'
|-CXXMethodDecl 0x5606918f9570 <line:92:5, col:28> col:17 clear_last 'void ()' inline
`-CXXMethodDecl 0x5606918f9738 <line:93:5, col:31> col:10 hard_resize 'void (int, bool)'
  |-ParmVarDecl 0x5606918f9628 <col:22> col:25 'int'
  `-ParmVarDecl 0x5606918f96a0 <col:27> col:31 'bool'

Layout: <CGRecordLayout
  LLVMType:%class.Bitvector = type { i32, i32*, [2 x i32] }
  NonVirtualBaseLLVMType:%class.Bitvector = type { i32, i32*, [2 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691904820 prev 0x5606918305a8 <../elements/standard/suppressor.hh:27:1, line:51:1> line:27:7 class Suppressor definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x560691904958 <col:1, col:7> col:7 implicit referenced class Suppressor
|-AccessSpecDecl 0x5606919049e8 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x560691904a48 <line:29:3, col:14> col:3 Suppressor 'void ()'
|-CXXMethodDecl 0x560691904b40 <line:31:3, col:57> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5606917f8ab8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x560691906320 <col:34, col:57>
|   `-ReturnStmt 0x560691906310 <col:36, col:43>
|     `-ImplicitCastExpr 0x5606919062f8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5606919062d0 <col:43> 'const char [11]' lvalue "Suppressor"
|-CXXMethodDecl 0x560691904c08 <line:32:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5606917f8b80 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x560691906380 <col:34, col:50>
|   `-ReturnStmt 0x560691906370 <col:36, col:43>
|     `-ImplicitCastExpr 0x560691906358 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x560691906338 <col:43> 'const char [4]' lvalue "-/="
|-CXXMethodDecl 0x560691904cd0 <line:33:3, col:49> col:15 flow_code 'const char *() const'
| |-Overrides: [ 0x5606917f9340 Element::flow_code 'const char *() const' ]
| `-CompoundStmt 0x5606919063e0 <col:33, col:49>
|   `-ReturnStmt 0x5606919063d0 <col:35, col:42>
|     `-ImplicitCastExpr 0x5606919063b8 <col:42> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x560691906398 <col:42> 'const char [4]' lvalue "#/#"
|-CXXMethodDecl 0x560691904fa0 <line:35:3, col:57> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5606917fa350 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x560691904e50 <col:17, col:33> col:33 conf 'Vector<String> &'
| `-ParmVarDecl 0x560691904ec8 <col:39, col:53> col:53 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560691905070 <line:36:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5606917fa420 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x560691905238 <line:38:3, col:32> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5606917f7928 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x560691905128 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x5606919051a0 <col:23, col:31> col:31 p 'Packet *'
|-CXXMethodDecl 0x560691905390 <line:39:3, col:24> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x5606917f7ab8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x560691905300 <col:16, col:20> col:20 port 'int'
|-CXXMethodDecl 0x5606919054e0 <line:41:3, col:67> col:8 suppressed 'bool (int) const'
| |-ParmVarDecl 0x560691905450 <col:19, col:23> col:23 used output 'int'
| `-CompoundStmt 0x560691906518 <col:37, col:67>
|   `-ReturnStmt 0x560691906508 <col:39, col:64>
|     `-CXXOperatorCallExpr 0x5606919064d0 <col:46, col:64> 'bool'
|       |-ImplicitCastExpr 0x5606919064b8 <col:57, col:64> 'bool (*)(int) const' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560691906470 <col:57, col:64> 'bool (int) const' lvalue CXXMethod 0x5606918fddb0 'operator[]' 'bool (int) const'
|       |-MemberExpr 0x560691906408 <col:46> 'const Bitvector' lvalue ->_suppressed 0x560691905af8
|       | `-CXXThisExpr 0x5606919063f8 <col:46> 'const Suppressor *' implicit this
|       `-ImplicitCastExpr 0x560691906458 <col:58> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x560691906438 <col:58> 'int' lvalue ParmVar 0x560691905450 'output' 'int'
|-CXXMethodDecl 0x560691905630 <line:42:3, col:59> col:8 suppress 'void (int)'
| |-ParmVarDecl 0x5606919055a0 <col:17, col:21> col:21 used output 'int'
| `-CompoundStmt 0x560691906780 <col:29, col:59>
|   `-ExprWithCleanups 0x560691906768 <col:31, col:53> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|     `-CXXOperatorCallExpr 0x560691906730 <col:31, col:53> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       |-ImplicitCastExpr 0x560691906718 <col:51> 'Bitvector::Bit &(*)(bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606919066a0 <col:51> 'Bitvector::Bit &(bool)' lvalue CXXMethod 0x560691902ef0 'operator=' 'Bitvector::Bit &(bool)'
|       |-MaterializeTemporaryExpr 0x560691906688 <col:31, col:49> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       | `-CXXOperatorCallExpr 0x560691906640 <col:31, col:49> 'Bitvector::Bit':'Bitvector::Bit'
|       |   |-ImplicitCastExpr 0x560691906628 <col:42, col:49> 'Bitvector::Bit (*)(int)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5606919065a8 <col:42, col:49> 'Bitvector::Bit (int)' lvalue CXXMethod 0x5606918fd0b8 'operator[]' 'Bitvector::Bit (int)'
|       |   |-MemberExpr 0x560691906540 <col:31> 'Bitvector' lvalue ->_suppressed 0x560691905af8
|       |   | `-CXXThisExpr 0x560691906530 <col:31> 'Suppressor *' implicit this
|       |   `-ImplicitCastExpr 0x560691906590 <col:43> 'int' <LValueToRValue>
|       |     `-DeclRefExpr 0x560691906570 <col:43> 'int' lvalue ParmVar 0x5606919055a0 'output' 'int'
|       `-CXXBoolLiteralExpr 0x560691906678 <col:53> 'bool' true
|-CXXMethodDecl 0x560691905780 <line:43:3, col:57> col:8 allow 'void (int)'
| |-ParmVarDecl 0x5606919056f0 <col:14, col:18> col:18 used output 'int'
| `-CompoundStmt 0x560691906930 <col:26, col:57>
|   `-ExprWithCleanups 0x560691906918 <col:28, col:50> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|     `-CXXOperatorCallExpr 0x5606919068e0 <col:28, col:50> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       |-ImplicitCastExpr 0x5606919068c8 <col:48> 'Bitvector::Bit &(*)(bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606919068a8 <col:48> 'Bitvector::Bit &(bool)' lvalue CXXMethod 0x560691902ef0 'operator=' 'Bitvector::Bit &(bool)'
|       |-MaterializeTemporaryExpr 0x560691906890 <col:28, col:46> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       | `-CXXOperatorCallExpr 0x560691906848 <col:28, col:46> 'Bitvector::Bit':'Bitvector::Bit'
|       |   |-ImplicitCastExpr 0x560691906830 <col:39, col:46> 'Bitvector::Bit (*)(int)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x560691906810 <col:39, col:46> 'Bitvector::Bit (int)' lvalue CXXMethod 0x5606918fd0b8 'operator[]' 'Bitvector::Bit (int)'
|       |   |-MemberExpr 0x5606919067a8 <col:28> 'Bitvector' lvalue ->_suppressed 0x560691905af8
|       |   | `-CXXThisExpr 0x560691906798 <col:28> 'Suppressor *' implicit this
|       |   `-ImplicitCastExpr 0x5606919067f8 <col:40> 'int' <LValueToRValue>
|       |     `-DeclRefExpr 0x5606919067d8 <col:40> 'int' lvalue ParmVar 0x5606919056f0 'output' 'int'
|       `-CXXBoolLiteralExpr 0x560691906880 <col:50> 'bool' false
|-CXXMethodDecl 0x560691905848 <line:44:3, col:43> col:8 allow_all 'void ()'
| `-CompoundStmt 0x5606919069d8 <col:20, col:43>
|   `-CXXMemberCallExpr 0x5606919069b8 <col:22, col:40> 'void'
|     `-MemberExpr 0x560691906988 <col:22, col:34> '<bound member function type>' .clear 0x5606918f6d60
|       `-MemberExpr 0x560691906958 <col:22> 'Bitvector' lvalue ->_suppressed 0x560691905af8
|         `-CXXThisExpr 0x560691906948 <col:22> 'Suppressor *' implicit this
|-CXXMethodDecl 0x560691905a10 <line:45:3, col:77> col:8 set 'void (int, bool)'
| |-ParmVarDecl 0x560691905900 <col:12, col:16> col:16 used output 'int'
| |-ParmVarDecl 0x560691905978 <col:24, col:29> col:29 used suppressed 'bool'
| `-CompoundStmt 0x560691908a58 <col:41, col:77>
|   `-ExprWithCleanups 0x560691908a40 <col:43, col:65> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|     `-CXXOperatorCallExpr 0x560691908a08 <col:43, col:65> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       |-ImplicitCastExpr 0x5606919089f0 <col:63> 'Bitvector::Bit &(*)(bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606919089d0 <col:63> 'Bitvector::Bit &(bool)' lvalue CXXMethod 0x560691902ef0 'operator=' 'Bitvector::Bit &(bool)'
|       |-MaterializeTemporaryExpr 0x5606919089b8 <col:43, col:61> 'Bitvector::Bit':'Bitvector::Bit' lvalue
|       | `-CXXOperatorCallExpr 0x560691908948 <col:43, col:61> 'Bitvector::Bit':'Bitvector::Bit'
|       |   |-ImplicitCastExpr 0x560691908930 <col:54, col:61> 'Bitvector::Bit (*)(int)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x560691906a68 <col:54, col:61> 'Bitvector::Bit (int)' lvalue CXXMethod 0x5606918fd0b8 'operator[]' 'Bitvector::Bit (int)'
|       |   |-MemberExpr 0x560691906a00 <col:43> 'Bitvector' lvalue ->_suppressed 0x560691905af8
|       |   | `-CXXThisExpr 0x5606919069f0 <col:43> 'Suppressor *' implicit this
|       |   `-ImplicitCastExpr 0x560691906a50 <col:55> 'int' <LValueToRValue>
|       |     `-DeclRefExpr 0x560691906a30 <col:55> 'int' lvalue ParmVar 0x560691905900 'output' 'int'
|       `-ImplicitCastExpr 0x5606919089a0 <col:65> 'bool' <LValueToRValue>
|         `-DeclRefExpr 0x560691908980 <col:65> 'bool' lvalue ParmVar 0x560691905978 'suppressed' 'bool'
|-AccessSpecDecl 0x560691905ac0 <line:47:3, col:10> col:3 private
|-FieldDecl 0x560691905af8 <line:49:5, col:15> col:15 referenced _suppressed 'Bitvector'
|-CXXConstructorDecl 0x560691905b78 <line:27:7> col:7 implicit Suppressor 'void (const Suppressor &)' inline default_delete noexcept-unevaluated 0x560691905b78
| `-ParmVarDecl 0x560691905c88 <col:7> col:7 'const Suppressor &'
|-CXXConstructorDecl 0x560691905d28 <col:7> col:7 implicit Suppressor 'void (Suppressor &&)' inline default_delete noexcept-unevaluated 0x560691905d28
| `-ParmVarDecl 0x560691905e38 <col:7> col:7 'Suppressor &&'
|-CXXMethodDecl 0x560691905ed8 <col:7> col:7 implicit operator= 'Suppressor &(const Suppressor &)' inline default_delete noexcept-unevaluated 0x560691905ed8
| `-ParmVarDecl 0x560691905fe8 <col:7> col:7 'const Suppressor &'
|-CXXMethodDecl 0x560691906058 <col:7> col:7 implicit operator= 'Suppressor &(Suppressor &&)' inline default_delete noexcept-unevaluated 0x560691906058
| `-ParmVarDecl 0x560691906168 <col:7> col:7 'Suppressor &&'
`-CXXDestructorDecl 0x5606919061f0 <col:7> col:7 implicit ~Suppressor 'void ()' inline default noexcept-unevaluated 0x5606919061f0
  `-Overrides: [ 0x5606917f7658 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Suppressor = type { %class.Element.base, %class.Bitvector }
  NonVirtualBaseLLVMType:%class.Suppressor = type { %class.Element.base, %class.Bitvector }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56069178fcb0 prev 0x560691786af0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56069178fda8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56069178fe48 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x560691796c10 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560691796ff8 <col:11>
|-CXXConstructorDecl 0x560691796cf0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x560691796dd8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x560691797740 <col:11>
|-CXXConstructorDecl 0x560691796e78 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560691796f88 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x560691798f98 <col:11>
|-CXXDestructorDecl 0x5606917982a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56069149ec38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56069149ed48 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56069149f610 <col:11>
|   `-ReturnStmt 0x56069149f600 <col:11>
|     `-UnaryOperator 0x56069149f5e8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56069149f5d8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x56069149edb8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56069149eec8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x56069177da00 <col:11>
    `-ReturnStmt 0x56069177d9f0 <col:11>
      `-UnaryOperator 0x56069177d9d8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56069177d9c8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691785ca8 prev 0x5606917859b8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560691785da0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x560691785e30 <col:19, col:25> col:19 public
|-TypedefDecl 0x560691785e68 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5606913eae70 'int32_t' sugar
|   |-Typedef 0x5606912fd268 'int32_t'
|   `-TypedefType 0x5606912d63b0 '__int32_t' sugar
|     |-Typedef 0x5606912d5fc8 '__int32_t'
|     `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x560691785ed0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5606913eb030 'int64_t' sugar
|   |-Typedef 0x5606912fd2d0 'int64_t'
|   `-TypedefType 0x5606912d64d0 '__int64_t' sugar
|     |-Typedef 0x5606912d60a8 '__int64_t'
|     `-BuiltinType 0x560691294390 'long'
|-EnumDecl 0x560691785f28 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5606917860a0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x560691786080 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x560691786058 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x560691786040 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x560691786010 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x560691786198 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x560691786178 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x560691786150 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x560691786138 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x560691786110 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5606917860f0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5606917861e8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5606917862f0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x560691786840 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917862d0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5606917862b0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x560691786380 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x560691786858 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691786360 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x560691786340 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x560691786410 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x560691786870 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917863f0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5606917863d0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5606917864a0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x560691786888 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691786480 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x560691786460 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x560691786530 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5606917868a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691786510 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5606917864f0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5606917865c0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5606917868b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917865a0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x560691786580 <col:24> 'int' 1000
| |-EnumConstantDecl 0x560691786650 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5606917868d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691786630 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x560691786610 <col:26> 'int' EnumConstant 0x5606917862f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x560691786720 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5606917868e8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691786700 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5606917866e0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5606917866a0 <col:27> 'int' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5606917866c0 <col:44> 'int' EnumConstant 0x5606917865c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5606917867f0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x560691786900 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917867d0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5606917867b0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x560691786770 <col:27> 'int' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x560691786790 <col:44> 'int' EnumConstant 0x5606917864a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x560691786918 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x560691786a20 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x560691786a70 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560691786a00 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5606917869e0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x560691786a98 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5606913eaaa0 'uninitialized_type'
|   `-CXXRecord 0x5606913eaa08 'uninitialized_type'
|-CXXRecordDecl 0x560691786af0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x560691786c00 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691797008 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560691797128 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5606917970e0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x560691797070 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x560691797060 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5606917970a0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x560691797110 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5606917970c0 <col:19> 'int' 0
|-CXXConstructorDecl 0x560691786e48 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x560691786cc0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x560691786d38 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x560691792940 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x560691792920 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691797140 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560691797290 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x560691797218 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5606917971a8 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x560691797198 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x560691797260 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x560691797248 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5606917971d8 <col:16> 'long' lvalue ParmVar 0x560691786cc0 'sec' 'long'
|     `-ImplicitCastExpr 0x560691797278 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5606917971f8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691786d38 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5606917870a8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560691786f18 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x560691786f90 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x560691792978 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x560691792958 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5606917972a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5606917973e0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x560691797380 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x560691797310 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x560691797300 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5606917973b0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x560691797340 <col:16> 'int' lvalue ParmVar 0x560691786f18 'sec' 'int'
|     `-ImplicitCastExpr 0x5606917973c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x560691797360 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691786f90 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x560691787308 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x560691787178 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5606917871f0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5606917929b0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x560691792990 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5606917973f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560691797548 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5606917974d0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x560691797460 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x560691797450 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x560691797518 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x560691797500 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x560691797490 <col:16> 'unsigned long' lvalue ParmVar 0x560691787178 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x560691797530 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5606917974b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5606917871f0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5606917884a0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5606917873d8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x560691787450 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5606917929e8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5606917929c8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691797560 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5606917976b0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x560691797638 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5606917975c8 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x5606917975b8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x560691797680 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x560691797668 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5606917975f8 <col:16> 'unsigned int' lvalue ParmVar 0x5606917873d8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x560691797698 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x560691797618 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691787450 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x560691788600 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x560691788570 <col:31> col:37 'double'
|-CXXConstructorDecl 0x560691788798 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5606917886d8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5606917889c8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5606917888d0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x560691788b78 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x560691788ab8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691797750 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5606917976c8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x560691788ab8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5606917977b0 <col:19, line:214:5>
|-CXXConstructorDecl 0x560691788d48 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x560691788c88 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5606917977c0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560691797870 <col:53, line:219:5>
|   `-CStyleCastExpr 0x560691797848 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x560691797818 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x560691788c88 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x560691788f38 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x560691788eb0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x560691785a50 'Timestamp'
|   | `-CXXRecord 0x560691785ca8 'Timestamp'
|   `-ParenType 0x560691788e50 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x560691788e20 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x560691785ff0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x560691785e68 'seconds_type'
|         `-TypedefType 0x5606913eae70 'int32_t' sugar
|           |-Typedef 0x5606912fd268 'int32_t'
|           `-TypedefType 0x5606912d63b0 '__int32_t' sugar
|             |-Typedef 0x5606912d5fc8 '__int32_t'
|             `-BuiltinType 0x560691294370 'int'
|-CXXConversionDecl 0x560691789078 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x560691789148 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x560691797978 <col:37, line:231:5>
|   `-ReturnStmt 0x560691797968 <line:227:9, col:23>
|     `-BinaryOperator 0x560691797948 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x560691797918 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5606917978c8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56069178fe48
|       |   `-MemberExpr 0x560691797898 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x560691790df8
|       |     `-CXXThisExpr 0x560691797888 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x560691797930 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5606917978f8 <col:23> 'int' 0
|-CXXMethodDecl 0x560691789208 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5606917892c8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x560691789388 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x560691789448 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x560691789508 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x560691789678 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5606917895b8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5606917897c0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x560691789730 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560691789888 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x560691789928 <col:54> "" ""
|-CXXMethodDecl 0x5606917899b8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x560691789a58 <col:54> "" ""
|-CXXMethodDecl 0x560691789ae8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x560691789b88 <col:54> "" ""
|-CXXMethodDecl 0x560691789c88 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x560691789d58 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x560691789e88 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x560691789f80 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x56069178a0b8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x560691797b90 <col:39, line:271:5>
|   `-ReturnStmt 0x560691797b80 <line:267:9, col:61>
|     `-CallExpr 0x560691797b20 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x560691797b08 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560691797990 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x560691791128 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x560691797b50 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5606917979f0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56069178fe48
|       |   `-MemberExpr 0x5606917979c0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x560691790df8
|       |     `-CXXThisExpr 0x5606917979b0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x560691797b68 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x560691797a90 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x560691797a60 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x560691797a20 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x560691797a78 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x560691797a40 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917865c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178a178 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x560691797d50 <col:39, line:279:5>
|   `-ReturnStmt 0x560691797d40 <line:275:9, col:61>
|     `-CallExpr 0x560691797ce0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x560691797cc8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560691797ba8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x560691791128 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x560691797d10 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x560691797c08 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56069178fe48
|       |   `-MemberExpr 0x560691797bd8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x560691790df8
|       |     `-CXXThisExpr 0x560691797bc8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x560691797d28 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x560691797ca8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x560691797c78 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x560691797c38 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x560691797c90 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x560691797c58 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917864a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178a238 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x560691797ee8 <col:39, line:287:5>
|   `-ReturnStmt 0x560691797ed8 <line:283:9, col:53>
|     `-BinaryOperator 0x560691797eb8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x560691797e88 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x560691797da8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56069178fe48
|       |   `-MemberExpr 0x560691797d78 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x560691790df8
|       |     `-CXXThisExpr 0x560691797d68 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x560691797ea0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x560691797e68 <col:23, col:53> 'int'
|           `-BinaryOperator 0x560691797e48 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x560691797e18 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x560691797dd8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917862f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x560691797e30 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x560691797df8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178a328 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x560691799180 <col:40, line:293:5>
|   |-DeclStmt 0x560691798030 <line:291:9, col:48>
|   | `-VarDecl 0x560691797f10 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x560691798010 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x560691797fb8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x560691797f88 <col:22> '<bound member function type>' ->subsec 0x5606917892c8
|   |     |   `-CXXThisExpr 0x560691797f78 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x560691797ff8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x560691797fd8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786720 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x560691799170 <line:292:9, col:70>
|     `-ExprWithCleanups 0x560691799158 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x560691799128 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x560691799110 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5606917990f0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5606917990c0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x560691798e58 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x560691798e40 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x560691798048 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x560691797f10 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x560691799060 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x560691799048 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x560691799018 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x560691798e70 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x560691798de0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x560691798dc8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x560691798d78 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x560691785bf8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x560691798d18 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x560691798078 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x560691798068 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x560691798d60 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x560691798d48 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x560691798538 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5606917980a0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x560691798130 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x560691798100 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5606917980c0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786720 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x560691798118 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5606917980e0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x560691797f10 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x560691799090 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x560691798e28 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x560691798e18 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56069178a3e8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5606917996d8 <col:40, line:302:5>
|   |-DeclStmt 0x5606917992d0 <line:297:9, col:48>
|   | `-VarDecl 0x5606917991b0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5606917992b0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x560691799258 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x560691799228 <col:22> '<bound member function type>' ->subsec 0x5606917892c8
|   |     |   `-CXXThisExpr 0x560691799218 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x560691799298 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x560691799278 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917867f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5606917996c8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5606917996b0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x560691799680 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x560691799668 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x560691799648 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x560691799618 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x560691799540 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x560691799528 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5606917992e8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5606917991b0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5606917995b8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5606917995a0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x560691799570 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x560691799558 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5606917994c8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5606917994b0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x560691799490 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x560691785bf8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x560691799430 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x560691799318 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x560691799308 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x560691799478 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x560691799460 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5606917993f0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x560691799340 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5606917993d0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5606917993a0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x560691799360 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917867f0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5606917993b8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x560691799380 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5606917991b0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5606917995e8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x560691799510 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x560691799500 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56069178a4a8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x560691799760 <col:40, line:306:5>
|   `-ReturnStmt 0x560691799750 <line:305:9, col:17>
|     `-CXXConstructExpr 0x560691799720 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x560691799708 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606917996f8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x56069178a648 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x56069178a558 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x56069178a818 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x56069178a720 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x56069178a908 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x56069178aa78 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x56069178a9b8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5606917998a8 <col:56, line:320:5>
|   `-ReturnStmt 0x560691799898 <line:319:9, col:32>
|     `-ExprWithCleanups 0x560691799880 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x560691799850 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x560691799838 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5606917997f8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5606917997c8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x560691799788 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178a9b8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5606917997e0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5606917997a8 <col:31> 'int' 0
|-CXXMethodDecl 0x56069178acb8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56069178ab30 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178aba8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x560691799a78 <col:72, line:326:5>
|   `-ReturnStmt 0x560691799a68 <line:325:9, col:51>
|     `-ExprWithCleanups 0x560691799a50 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x560691799a20 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x560691799a08 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5606917999c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5606917999b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5606917998d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178ab30 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x560691799970 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x560691799958 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5606917998f0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56069178f5a0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x560691799998 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x560691799910 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178aba8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178ae68 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56069178ad78 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56069179a140 <col:56, line:337:5>
|   |-DeclStmt 0x560691799d78 <line:329:9, col:51>
|   | `-VarDecl 0x560691799aa0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x560691799d60 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x560691799d30 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x560691799d18 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x560691799d00 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x560691799cd0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x560691799cb8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x560691799ca0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x560691799b90 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x560691799f30 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x560691799de0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56069178fe48
|   | | `-MemberExpr 0x560691799db0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x560691790df8
|   | |   `-DeclRefExpr 0x560691799d90 <col:9> 'Timestamp' lvalue Var 0x560691799aa0 't' 'Timestamp'
|   | `-BinaryOperator 0x560691799f10 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x560691799ee0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x560691799e10 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56069178ad78 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x560691799ef8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x560691799ec0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x560691799ea0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x560691799e70 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x560691799e30 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x560691799e88 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x560691799e50 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917865c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56069179a128 <line:336:9, col:16>
|     `-CXXConstructExpr 0x56069179a0f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56069179a0e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56069179a0c0 <col:16> 'Timestamp' lvalue Var 0x560691799aa0 't' 'Timestamp'
|-CXXMethodDecl 0x56069178b030 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56069178af20 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178af98 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069179a2f8 <col:72, line:343:5>
|   `-ReturnStmt 0x56069179a2e8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x56069179a2d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56069179a2a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56069179a288 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56069179a248 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56069179a230 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56069179a178 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178af20 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56069179a1f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56069179a1d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56069179a198 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56069178f6e8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56069179a218 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56069179a1b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178af98 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178b180 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56069178b0f0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56069179a740 <col:56, line:354:5>
|   |-DeclStmt 0x56069179a4e8 <line:346:9, col:51>
|   | `-VarDecl 0x56069179a320 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56069179a4d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56069179a4a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56069179a488 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56069179a470 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56069179a440 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56069179a428 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56069179a410 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56069179a3e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56069179a6a0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56069179a550 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56069178fe48
|   | | `-MemberExpr 0x56069179a520 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x560691790df8
|   | |   `-DeclRefExpr 0x56069179a500 <col:9> 'Timestamp' lvalue Var 0x56069179a320 't' 'Timestamp'
|   | `-BinaryOperator 0x56069179a680 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56069179a650 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56069179a580 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56069178b0f0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56069179a668 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56069179a630 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56069179a610 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56069179a5e0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56069179a5a0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56069179a5f8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56069179a5c0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917864a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56069179a728 <line:353:9, col:16>
|     `-CXXConstructExpr 0x56069179a6f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56069179a6e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56069179a6c0 <col:16> 'Timestamp' lvalue Var 0x56069179a320 't' 'Timestamp'
|-CXXMethodDecl 0x56069178b348 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56069178b238 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178b2b0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069179a8f8 <col:72, line:360:5>
|   `-ReturnStmt 0x56069179a8e8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x56069179a8d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56069179a8a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56069179a888 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56069179a848 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56069179a830 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56069179a778 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178b238 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56069179a7f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56069179a7d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56069179a798 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56069178f830 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56069179a818 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56069179a7b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178b2b0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178b498 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56069178b408 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5606917a7268 <col:56, line:371:5>
|   |-DeclStmt 0x56069179aae8 <line:363:9, col:51>
|   | `-VarDecl 0x56069179a920 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56069179aad0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56069179aaa0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56069179aa88 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56069179aa70 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56069179aa40 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56069179aa28 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56069179aa10 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56069179a9e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5606917a71c8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56069179ab50 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56069178fe48
|   | | `-MemberExpr 0x56069179ab20 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x560691790df8
|   | |   `-DeclRefExpr 0x56069179ab00 <col:9> 'Timestamp' lvalue Var 0x56069179a920 't' 'Timestamp'
|   | `-CallExpr 0x5606917a7168 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5606917a7150 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56069179ab80 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x560691791128 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5606917a7198 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56069179aba0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x56069178b408 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5606917a71b0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5606917a7130 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5606917a7100 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x56069179abc0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917862f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5606917a7118 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x56069179abe0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5606917a7250 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5606917a7220 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5606917a7208 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5606917a71e8 <col:16> 'Timestamp' lvalue Var 0x56069179a920 't' 'Timestamp'
|-CXXMethodDecl 0x56069178b588 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5606917a73a8 <col:39, line:377:5>
|   `-ReturnStmt 0x5606917a7398 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5606917a7380 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5606917a7350 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5606917a7338 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5606917a72f8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5606917a72a0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5606917a72e0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5606917a72c0 <col:29> 'int' 1
|-CXXMethodDecl 0x56069178b648 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5606917a7488 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5606917a7440 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5606917a73d0 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x5606917a73c0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5606917a7400 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5606917a7470 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5606917a7420 <col:19> 'int' 0
|-CXXMethodDecl 0x56069178b848 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178b6f8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178b770 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x560691792a20 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x560691792a00 <col:60> 'int' 0
| `-CompoundStmt 0x5606917a7680 <col:63, line:395:5>
|   `-BinaryOperator 0x5606917a7660 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5606917a74e0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56069178fe48
|     | `-MemberExpr 0x5606917a74b0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x560691790df8
|     |   `-CXXThisExpr 0x5606917a74a0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5606917a7640 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5606917a75d0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5606917a7570 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5606917a7558 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5606917a7540 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5606917a7510 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178b6f8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5606917a75b8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5606917a7598 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5606917a7628 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5606917a7610 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5606917a75f0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178b770 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178ba18 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178b908 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178b980 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a77d8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5606917a7790 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5606917a76a8 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x5606917a7698 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5606917a77c0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5606917a76d8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178b908 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5606917a7750 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5606917a7738 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606917a76f8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56069178f6e8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5606917a7778 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5606917a7718 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178b980 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178bbe8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178bad8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178bb50 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7930 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5606917a78e8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5606917a7800 <col:9> '<bound member function type>' ->assign 0x56069178b848
|     | `-CXXThisExpr 0x5606917a77f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5606917a7918 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5606917a7830 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56069178bad8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5606917a78a8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5606917a7890 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606917a7850 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56069178f830 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5606917a78d0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5606917a7870 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178bb50 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56069178bdb8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178bca8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178bd20 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x560691792a58 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x560691792a38 <col:57> 'int' 0
| `-DeprecatedAttr 0x56069178be68 <col:75> "" ""
|-CXXMethodDecl 0x56069178bff8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178bee8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178bf60 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069178c0a8 <col:74> "" ""
|-CXXMethodDecl 0x56069178c238 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56069178c128 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56069178c1a0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069178c2e8 <col:74> "" ""
|-CXXMethodDecl 0x56069178c378 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x56069178c418 <col:42> "" ""
|-CXXMethodDecl 0x56069178ec50 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56069178eb30 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56069178ebb0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56069178ed20 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56069178ede0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56069178ee80 <col:20>
| `-OptimizeNoneAttr 0x56069178eed8 <col:30>
|-CXXMethodDecl 0x56069178ef20 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56069178efe0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56069178f0a0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56069178f160 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56069178f220 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56069178f2e0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56069178f3a0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56069178f460 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56069178f5a0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178f510 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7a78 <col:58, line:512:5>
|   `-ReturnStmt 0x5606917a7a68 <line:511:9, col:53>
|     `-BinaryOperator 0x5606917a7a48 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5606917a7a18 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7948 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178f510 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a7a30 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a79f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5606917a79d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a79a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7968 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a79c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7988 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917865c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178f6e8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178f658 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7bc0 <col:58, line:516:5>
|   `-ReturnStmt 0x5606917a7bb0 <line:515:9, col:53>
|     `-BinaryOperator 0x5606917a7b90 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5606917a7b60 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7a90 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178f658 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a7b78 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a7b40 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5606917a7b20 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a7af0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7ab0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a7b08 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7ad0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917864a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178f830 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178f7a0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7d08 <col:58, line:520:5>
|   `-ReturnStmt 0x5606917a7cf8 <line:519:9, col:53>
|     `-BinaryOperator 0x5606917a7cd8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5606917a7ca8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7bd8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178f7a0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a7cc0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a7c88 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5606917a7c68 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a7c38 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7bf8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917862f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a7c50 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7c18 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178f978 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178f8e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7e50 <col:60, line:524:5>
|   `-ReturnStmt 0x5606917a7e40 <line:523:9, col:55>
|     `-BinaryOperator 0x5606917a7e20 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5606917a7df0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7d20 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178f8e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a7e08 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a7dd0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5606917a7db0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a7d80 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7d40 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a7d98 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7d60 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917865c0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178fac0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178fa30 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a7f98 <col:60, line:528:5>
|   `-ReturnStmt 0x5606917a7f88 <line:527:9, col:55>
|     `-BinaryOperator 0x5606917a7f68 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5606917a7f38 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7e68 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178fa30 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a7f50 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a7f18 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5606917a7ef8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a7ec8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7e88 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a7ee0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7ea8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917864a0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56069178fc08 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56069178fb78 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a80e0 <col:60, line:532:5>
|   `-ReturnStmt 0x5606917a80d0 <line:531:9, col:55>
|     `-BinaryOperator 0x5606917a80b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5606917a8080 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a7fb0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56069178fb78 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5606917a8098 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5606917a8060 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5606917a8040 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5606917a8010 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5606917a7fd0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5606917862f0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5606917a8028 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5606917a7ff0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x560691786650 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56069178fcb0 prev 0x560691786af0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56069178fda8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56069178fe48 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x560691796c10 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x560691796ff8 <col:11>
| |-CXXConstructorDecl 0x560691796cf0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560691796dd8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x560691797740 <col:11>
| |-CXXConstructorDecl 0x560691796e78 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x560691796f88 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x560691798f98 <col:11>
| |-CXXDestructorDecl 0x5606917982a8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56069149ec38 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56069149ed48 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56069149f610 <col:11>
| |   `-ReturnStmt 0x56069149f600 <col:11>
| |     `-UnaryOperator 0x56069149f5e8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56069149f5d8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x56069149edb8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56069149eec8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x56069177da00 <col:11>
|     `-ReturnStmt 0x56069177d9f0 <col:11>
|       `-UnaryOperator 0x56069177d9d8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56069177d9c8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56069178feb0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56069178ffb0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5606917901b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069178ff90 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56069178ff70 <col:21> 'int' 0
| |-EnumConstantDecl 0x560691790040 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5606917901c8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560691790020 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x560691790000 <col:23> 'int' 1
| |-EnumConstantDecl 0x5606917900d0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5606917901e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917900b0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x560691790090 <col:23> 'int' 2
| `-EnumConstantDecl 0x560691790160 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5606917901f8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560691790140 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x560691790120 <col:27> 'int' 3
|-CXXMethodDecl 0x560691790238 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x560691790300 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x560691790508 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5606917903b0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x560691790430 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x560691792a70 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x560691790718 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5606917905c8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x560691790640 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5606917907e8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5606917908a8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x560691790a18 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x560691790958 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x560691790ae0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x560691790ba0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x560691790c60 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x560691790d20 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x560691790dc0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x560691790df8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x560691790e68 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5606917a80f8 <col:27, line:684:5>
|-CXXMethodDecl 0x560691790f28 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5606917a8108 <col:27, line:696:5>
|-CXXMethodDecl 0x560691791128 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x560691790fd8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x560691791050 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a8290 <col:66, line:700:5>
|   `-ReturnStmt 0x5606917a8280 <line:699:9, col:31>
|     `-CallExpr 0x5606917a8220 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5606917a8208 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606917a81b8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5606916134d8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5606917a8250 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5606917a8178 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x560691790fd8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5606917a8268 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5606917a8198 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691791050 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560691791498 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5606917911e8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x560691791260 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5606917912d8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x560691791350 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5606917a85e0 <col:64, line:707:5>
|   |-DeclStmt 0x5606917a8320 <line:704:9, col:24>
|   | `-VarDecl 0x5606917a82b8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5606917a8530 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5606917a8338 <col:9> 'int32_t':'int' lvalue ParmVar 0x560691791260 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5606917a8518 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5606917a84b0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5606917a8498 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917a8418 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5606916187a8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5606917a84e8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5606917a83b8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5606917912d8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5606917a8500 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5606917a83d8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691791350 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5606917a83f8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5606917a82b8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5606917a85c0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5606917a8550 <col:9> 'int32_t':'int' lvalue ParmVar 0x5606917911e8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5606917a85a8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5606917a8590 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5606917a8570 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5606917a82b8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x560691791738 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x560691791568 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5606917915e0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x560691791658 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5606917919d8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x560691791800 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x560691791878 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5606917918f0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x560691791b68 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x560691791aa0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x560691791d68 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x560691791c20 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x560691791c98 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x560691792038 <line:717:5, col:73> col:24
| `-FunctionDecl 0x560691791f78 parent 0x560691294278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x560691791e28 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x560691791ea0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x560691792258 <line:718:5, col:72> col:24
| `-FunctionDecl 0x560691792198 parent 0x560691294278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x560691792088 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x560691792100 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x560691792420 <line:719:5, col:57> col:29
| `-FunctionDecl 0x560691792368 parent 0x560691294278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5606917922a8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5606917926a8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5606917925e8 parent 0x560691294278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x560691792498 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x560691792510 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5606917928c8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x560691792808 parent 0x560691294278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5606917926f8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x560691792770 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x560691798150 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x560691798238 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691798ca8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x560691798c60 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x560691790df8
| |     `-DeclRefExpr 0x560691798c40 <col:7> 'const Timestamp' lvalue ParmVar 0x560691798238 '' 'const Timestamp &'
| `-CompoundStmt 0x560691798d08 <col:7>
|-CXXConstructorDecl 0x5606917983b8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5606917984c8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x560691790df8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x560691798fa8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x560691798f50 <col:7> 'Timestamp::rep_t' xvalue ._t 0x560691790df8
| |     `-CXXStaticCastExpr 0x560691798f20 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x560691798ef0 <col:7> 'Timestamp' lvalue ParmVar 0x5606917984c8 '' 'Timestamp &&'
| `-CompoundStmt 0x560691799008 <col:7>
|-CXXDestructorDecl 0x560691798578 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56069149ea88 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56069149eb98 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x56069149f688 <col:7>
|   |-CXXMemberCallExpr 0x56069149f628 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x56069149f568 <col:7> '<bound member function type>' .operator= 0x56069149ec38
|   | | `-MemberExpr 0x56069149f478 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x560691790df8
|   | |   `-CXXThisExpr 0x56069149f468 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x56069149f538 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x560691790df8
|   |   `-DeclRefExpr 0x56069149f518 <col:7> 'const Timestamp' lvalue ParmVar 0x56069149eb98 '' 'const Timestamp &'
|   `-ReturnStmt 0x56069149f678 <col:7>
|     `-UnaryOperator 0x56069149f660 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56069149f650 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x56069149ef38 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56069149f048 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x56069177da78 <col:7>
    |-CXXMemberCallExpr 0x56069177da18 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x56069177d980 <col:7> '<bound member function type>' .operator= 0x56069149edb8
    | | `-MemberExpr 0x56069177d850 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x560691790df8
    | |   `-CXXThisExpr 0x56069177d840 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x56069177d950 <col:7> 'Timestamp::rep_t' xvalue ._t 0x560691790df8
    |   `-CXXStaticCastExpr 0x56069177d920 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x56069177d8f0 <col:7> 'Timestamp' lvalue ParmVar 0x56069149f048 '' 'Timestamp &&'
    `-ReturnStmt 0x56069177da68 <col:7>
      `-UnaryOperator 0x56069177da50 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56069177da40 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56069180fd68 <../elements/etherswitch/bridgemessage.hh:9:1, line:88:1> line:9:7 referenced class BridgeMessage definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56069180fe88 <col:1, col:7> col:7 implicit referenced class BridgeMessage
|-AccessSpecDecl 0x56069180ff18 <line:10:1, col:7> col:1 public
|-CXXRecordDecl 0x56069180ff40 <line:11:3, col:10> col:10 referenced struct wire
|-CXXConstructorDecl 0x560691810050 <line:13:3, col:32> col:3 used BridgeMessage 'void ()'
| |-CXXCtorInitializer Field 0x560691812348 '_timestamp' 'Timestamp'
| | `-CXXConstructExpr 0x560691812848 <col:3> 'Timestamp' 'void ()'
| `-CompoundStmt 0x560691812970 <col:19, col:32>
|   `-CXXMemberCallExpr 0x560691812950 <col:21, col:29> 'void'
|     `-MemberExpr 0x560691812920 <col:21> '<bound member function type>' ->expire 0x560691810a60
|       `-CXXThisExpr 0x560691812910 <col:21> 'BridgeMessage *' implicit this
|-CXXConstructorDecl 0x5606918101f8 <line:14:3, col:52> col:3 BridgeMessage 'void (const BridgeMessage::wire *)'
| |-ParmVarDecl 0x560691810138 <col:17, col:29> col:29 used msg 'const BridgeMessage::wire *'
| |-CXXCtorInitializer Field 0x560691812348 '_timestamp' 'Timestamp'
| | `-CXXConstructExpr 0x560691812988 <col:3> 'Timestamp' 'void ()'
| `-CompoundStmt 0x560691812a80 <col:34, col:52>
|   `-CXXMemberCallExpr 0x560691812a40 <col:36, col:49> 'void'
|     |-MemberExpr 0x5606918129f0 <col:36> '<bound member function type>' ->from_wire 0x5606918104c0
|     | `-CXXThisExpr 0x5606918129e0 <col:36> 'BridgeMessage *' implicit this
|     `-ImplicitCastExpr 0x560691812a68 <col:46> 'const BridgeMessage::wire *' <LValueToRValue>
|       `-DeclRefExpr 0x560691812a20 <col:46> 'const BridgeMessage::wire *' lvalue ParmVar 0x560691810138 'msg' 'const BridgeMessage::wire *'
|-CXXMethodDecl 0x560691810378 <line:17:3, col:32> col:8 reset 'void (uint64_t)'
| `-ParmVarDecl 0x5606918102b8 <col:14, col:23> col:23 bridge_id 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5606918104c0 <line:18:3, col:33> col:8 used from_wire 'void (const BridgeMessage::wire *)'
| `-ParmVarDecl 0x560691810430 <col:18, col:30> col:30 msg 'const BridgeMessage::wire *'
|-CXXMethodDecl 0x560691810698 <line:19:3, col:27> col:8 to_wire 'void (BridgeMessage::wire *) const'
| `-ParmVarDecl 0x5606918105a8 <col:16, col:22> col:22 msg 'BridgeMessage::wire *'
|-CXXMethodDecl 0x560691810818 <line:20:3, col:33> col:15 fill_tcm 'void (BridgeMessage::wire *)' static
| `-ParmVarDecl 0x560691810750 <col:24, col:30> col:30 msg 'BridgeMessage::wire *'
|-CXXMethodDecl 0x560691810998 <line:23:3, col:38> col:8 expire 'bool (const Timestamp &)'
| `-ParmVarDecl 0x5606918108d0 <col:15, col:32> col:32 cutoff 'const Timestamp &'
|-CXXMethodDecl 0x560691810a60 <line:24:3, col:15> col:8 used expire 'void ()'
|-CXXMethodDecl 0x560691810be0 <line:33:3, col:43> col:7 compare 'int (const BridgeMessage *) const'
| `-ParmVarDecl 0x560691810b10 <col:15, col:36> col:36 other 'const BridgeMessage *'
|-CXXMethodDecl 0x560691810d60 <line:34:3, col:34> col:7 compare 'int (const BridgeMessage::wire *) const'
| `-ParmVarDecl 0x560691810c98 <col:15, col:27> col:27 other 'const BridgeMessage::wire *'
|-CXXMethodDecl 0x560691811030 <line:35:3, line:36:48> line:35:7 compare 'int (const BridgeMessage *, uint64_t, uint16_t) const'
| |-ParmVarDecl 0x560691810e18 <col:15, col:36> col:36 other 'const BridgeMessage *'
| |-ParmVarDecl 0x560691810e90 <line:36:8, col:17> col:17 _bridge_id 'uint64_t':'unsigned long'
| `-ParmVarDecl 0x560691810f08 <col:29, col:38> col:38 _port_id 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5606918111b8 <line:38:3, col:29> col:10 s 'String (String) const'
| `-ParmVarDecl 0x5606918110f8 <col:12, col:25> col:19 tag 'String' cinit destroyed
|   `-ExprWithCleanups 0x560691812708 <col:25> 'String'
|     `-CXXBindTemporaryExpr 0x5606918126e8 <col:25> 'String' (CXXTemporary 0x5606918126e8)
|       `-CXXConstructExpr 0x5606918126b0 <col:25> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x560691812698 <col:25> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x560691812678 <col:25> 'String' (CXXTemporary 0x560691812678)
|             `-ImplicitCastExpr 0x560691812658 <col:25> 'String' <ConstructorConversion>
|               `-CXXConstructExpr 0x560691812628 <col:25> 'String' 'void (const char *)'
|                 `-ImplicitCastExpr 0x560691812610 <col:25> 'const char *' <ArrayToPointerDecay>
|                   `-StringLiteral 0x5606918125f8 <col:25> 'const char [1]' lvalue ""
|-CXXRecordDecl 0x560691811260 prev 0x56069180ff40 <line:40:3, col:409> col:10 referenced struct wire definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-PackedAttr 0x560691811f50 <col:426>
| |-CXXRecordDecl 0x560691811358 <col:3, col:10> col:10 implicit struct wire
| |-AccessSpecDecl 0x5606918113e8 <col:17, col:23> col:17 public
| |-FieldDecl 0x5606918114e8 <col:25, col:38> col:33 dst 'uint8_t [6]'
| |-FieldDecl 0x560691811598 <col:41, col:54> col:49 src 'uint8_t [6]'
| |-FieldDecl 0x5606918115f8 <col:57, col:66> col:66 length 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811658 <col:74, col:83> col:83 sap 'uint16_t':'unsigned short'
| |-FieldDecl 0x5606918116b8 <col:88, col:96> col:96 ctl 'uint8_t':'unsigned char'
| |-FieldDecl 0x560691811718 <col:101, col:110> col:110 protocol 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811778 <col:120, col:128> col:128 version 'uint8_t':'unsigned char'
| |-FieldDecl 0x5606918117d8 <col:137, col:145> col:145 type 'uint8_t':'unsigned char'
| |-FieldDecl 0x560691811880 <col:151, col:163> col:160 tc 'unsigned int'
| | `-ConstantExpr 0x560691811860 <col:163> 'int' Int: 1
| |   `-IntegerLiteral 0x560691811828 <col:163> 'int' 1
| |-FieldDecl 0x560691811928 <col:166, col:184> col:175 reserved 'unsigned int'
| | `-ConstantExpr 0x560691811908 <col:184> 'int' Int: 6
| |   `-IntegerLiteral 0x5606918118d0 <col:184> 'int' 6
| |-FieldDecl 0x5606918119d0 <col:187, col:200> col:196 tca 'unsigned int'
| | `-ConstantExpr 0x5606918119b0 <col:200> 'int' Int: 1
| |   `-IntegerLiteral 0x560691811978 <col:200> 'int' 1
| |-FieldDecl 0x560691811a30 <col:203, col:212> col:212 root 'uint64_t':'unsigned long'
| |-FieldDecl 0x560691811a90 <col:218, col:227> col:227 cost 'uint32_t':'unsigned int'
| |-FieldDecl 0x560691811af0 <col:233, col:242> col:242 bridge_id 'uint64_t':'unsigned long'
| |-FieldDecl 0x560691811b50 <col:253, col:262> col:262 port_id 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811bb0 <col:271, col:280> col:280 message_age 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811c10 <col:293, col:302> col:302 max_age 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811c70 <col:311, col:320> col:320 hello_time 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811cd0 <col:332, col:341> col:341 forward_delay 'uint16_t':'unsigned short'
| |-FieldDecl 0x560691811db8 <col:356, col:373> col:364 padding 'uint8_t [8]'
| `-CXXMethodDecl 0x560691811ea8 <col:376, col:402> col:383 s 'String (String) const'
|   `-ParmVarDecl 0x560691811e18 <col:385, col:398> col:392 tag 'String' cinit destroyed
|     `-ExprWithCleanups 0x560691812830 <col:398> 'String'
|       `-CXXBindTemporaryExpr 0x560691812810 <col:398> 'String' (CXXTemporary 0x560691812810)
|         `-CXXConstructExpr 0x5606918127d8 <col:398> 'String' 'void (String &&)' elidable
|           `-MaterializeTemporaryExpr 0x5606918127c0 <col:398> 'String' xvalue
|             `-CXXBindTemporaryExpr 0x5606918127a0 <col:398> 'String' (CXXTemporary 0x5606918127a0)
|               `-ImplicitCastExpr 0x560691812780 <col:398> 'String' <ConstructorConversion>
|                 `-CXXConstructExpr 0x560691812750 <col:398> 'String' 'void (const char *)'
|                   `-ImplicitCastExpr 0x560691812738 <col:398> 'const char *' <ArrayToPointerDecay>
|                     `-StringLiteral 0x560691812720 <col:398> 'const char [1]' lvalue ""
|-FieldDecl 0x560691811fd0 <line:71:3, col:12> col:12 _max_age 'uint32_t':'unsigned int'
|-FieldDecl 0x560691812030 <line:72:3, col:12> col:12 _hello_time 'uint32_t':'unsigned int'
|-FieldDecl 0x560691812090 <line:73:3, col:12> col:12 _forward_delay 'uint32_t':'unsigned int'
|-AccessSpecDecl 0x5606918120e0 <line:75:1, col:8> col:1 private
|-FieldDecl 0x560691812118 <line:76:3, col:12> col:12 _root 'uint64_t':'unsigned long'
|-FieldDecl 0x560691812178 <line:77:3, col:12> col:12 _bridge_id 'uint64_t':'unsigned long'
|-AccessSpecDecl 0x5606918121c8 <line:78:1, col:7> col:1 public
|-FieldDecl 0x560691812200 <col:9, col:18> col:18 _cost 'uint32_t':'unsigned int'
|-AccessSpecDecl 0x560691812250 <col:25, col:32> col:25 private
|-FieldDecl 0x560691812288 <line:79:3, col:12> col:12 _port_id 'uint16_t':'unsigned short'
|-FieldDecl 0x5606918122e8 <line:81:3, col:8> col:8 _tc 'bool'
|-FieldDecl 0x560691812348 <line:83:3, col:13> col:13 _timestamp 'Timestamp'
|-CXXMethodDecl 0x560691812438 <line:86:3, col:33> col:15 prep_msg 'void (BridgeMessage::wire *)' static
| `-ParmVarDecl 0x5606918123a8 <col:24, col:30> col:30 msg 'BridgeMessage::wire *'
|-VarDecl 0x560691812540 <line:87:3, col:32> col:18 _all_bridges 'uint8_t [6]' static
|-CXXConstructorDecl 0x56069183e298 <line:9:7> col:7 implicit constexpr BridgeMessage 'void (const BridgeMessage &)' inline default trivial noexcept-unevaluated 0x56069183e298
| `-ParmVarDecl 0x56069183e3a8 <col:7> col:7 'const BridgeMessage &'
`-CXXConstructorDecl 0x56069183e448 <col:7> col:7 implicit constexpr BridgeMessage 'void (BridgeMessage &&)' inline default trivial noexcept-unevaluated 0x56069183e448
  `-ParmVarDecl 0x56069183e558 <col:7> col:7 'BridgeMessage &&'

Layout: <CGRecordLayout
  LLVMType:%class.BridgeMessage = type { i32, i32, i32, i64, i64, i32, i16, i8, %class.Timestamp }
  NonVirtualBaseLLVMType:%class.BridgeMessage = type { i32, i32, i32, i64, i64, i32, i16, i8, %class.Timestamp }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560691833fc0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<72>'
|-CXXRecordDecl 0x560691834198 prev 0x560691833fc0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x560691834228 <col:46, col:52> col:46 public
|-TypedefDecl 0x560691834250 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x560691835e20 <line:13:5, col:31> col:31 type 'typename sized_array_memory<72>::type':'char_array<72>'
| `-ElaboratedType 0x560691835dd0 'typename sized_array_memory<72>::type' sugar
|   `-TypedefType 0x560691834700 'sized_array_memory<72>::type' sugar
|     |-Typedef 0x560691834600 'type'
|     `-TemplateSpecializationType 0x560691834590 'char_array<72UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x560691834470 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 72
|       |   `-SubstNonTypeTemplateParmExpr 0x560691834450 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x560691834430 <col:24> 'unsigned long' 72
|       `-RecordType 0x560691834570 'char_array<72>'
|         `-ClassTemplateSpecialization 0x560691834490 'char_array'
|-TypedefDecl 0x560691835ed8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<72> >::type *'
| `-PointerType 0x560691835ea0 'vector_memory<sized_array_memory<72> >::type *'
|   `-TypedefType 0x560691835e80 'vector_memory<sized_array_memory<72> >::type' sugar
|     |-Typedef 0x560691835e20 'type'
|     `-ElaboratedType 0x560691835dd0 'typename sized_array_memory<72>::type' sugar
|       `-TypedefType 0x560691834700 'sized_array_memory<72>::type' sugar
|         |-Typedef 0x560691834600 'type'
|         `-TemplateSpecializationType 0x560691834590 'char_array<72UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x560691834470 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 72
|           |   `-SubstNonTypeTemplateParmExpr 0x560691834450 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x560691834430 <col:24> 'unsigned long' 72
|           `-RecordType 0x560691834570 'char_array<72>'
|             `-ClassTemplateSpecialization 0x560691834490 'char_array'
|-CXXMethodDecl 0x560691836058 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<72> >::type *) const' inline
| `-ParmVarDecl 0x560691835f68 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXConstructorDecl 0x560691836148 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560691836228 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5606918364f8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<72> > &)'
| `-ParmVarDecl 0x560691836400 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<72> > &'
|-CXXMethodDecl 0x560691836738 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<72> >::type *)'
| |-ParmVarDecl 0x5606918365b0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560691836628 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x560691836908 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<72> >::type *)'
| |-ParmVarDecl 0x5606918367f8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560691836870 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x560691836a68 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<72> >::iterator ()'
|-CXXMethodDecl 0x560691836b38 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<72> >::iterator ()'
|-CXXMethodDecl 0x560691836d88 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<72> >::iterator (vector_memory<sized_array_memory<72> >::iterator, const vector_memory<sized_array_memory<72> >::type *)'
| |-ParmVarDecl 0x560691836bf8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<72> >::iterator':'vector_memory<sized_array_memory<72> >::type *'
| `-ParmVarDecl 0x560691836c70 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x560691836fe8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<72> >::iterator (vector_memory<sized_array_memory<72> >::iterator, vector_memory<sized_array_memory<72> >::iterator)'
| |-ParmVarDecl 0x560691836e58 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<72> >::iterator':'vector_memory<sized_array_memory<72> >::type *'
| `-ParmVarDecl 0x560691836ed0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<72> >::iterator':'vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x5606918371a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<72> >::type *)' inline
| `-ParmVarDecl 0x5606918370b8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x560691837368 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<72> >::type *)' inline
| `-ParmVarDecl 0x560691837270 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x560691837420 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5606918374d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x560691837708 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<72> >::type *)'
| |-ParmVarDecl 0x560691837580 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5606918375f8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<72> >::type *'
|-CXXMethodDecl 0x5606918379f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<72> > &)'
| `-ParmVarDecl 0x560691837900 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<72> > &'
|-FieldDecl 0x560691837ac0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<72> >::type *'
|-FieldDecl 0x560691837b10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x560691837b60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5606918327d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'EtherSpanTree::PortInfo'
|-CXXRecordDecl 0x5606918329e8 prev 0x5606918327d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x560691833f30 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<PortInfo>::type':'sized_array_memory<72>'
| `-ElaboratedType 0x560691833ee0 'typename array_memory<PortInfo>::type' sugar
|   `-TypedefType 0x560691833ec0 'conditional<true, sized_array_memory<72>, typed_array_memory<EtherSpanTree::PortInfo> >::type' sugar
|     |-Typedef 0x560691833d70 'type'
|     `-SubstTemplateTypeParmType 0x560691833b90 'sized_array_memory<72>' sugar
|       |-TemplateTypeParmType 0x56069155b660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56069155b608 'T'
|       `-RecordType 0x5606918336e0 'sized_array_memory<72>'
|         `-ClassTemplateSpecialization 0x560691833600 'sized_array_memory'
|-FieldDecl 0x560691837bb0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<EtherSpanTree::PortInfo>::array_memory_type>':'vector_memory<sized_array_memory<72> >' mutable
|-AccessSpecDecl 0x560691837c00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x560691837c38 <line:118:5, col:15> col:15 value_type 'EtherSpanTree::PortInfo':'EtherSpanTree::PortInfo'
| `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|   |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5606915932f8 'T'
|   `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|     `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691837cf8 <line:119:5, col:16> col:16 reference 'EtherSpanTree::PortInfo &'
| `-LValueReferenceType 0x560691837cc0 'EtherSpanTree::PortInfo &'
|   `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|       `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691837db8 <line:120:5, col:22> col:22 const_reference 'const EtherSpanTree::PortInfo &'
| `-LValueReferenceType 0x560691837d80 'const EtherSpanTree::PortInfo &'
|   `-QualType 0x560691832a81 'const EtherSpanTree::PortInfo' const
|     `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|         `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691837e48 <line:121:5, col:16> col:16 pointer 'EtherSpanTree::PortInfo *'
| `-PointerType 0x560691837e10 'EtherSpanTree::PortInfo *'
|   `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|       `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691837f08 <line:122:5, col:22> col:22 const_pointer 'const EtherSpanTree::PortInfo *'
| `-PointerType 0x560691837ed0 'const EtherSpanTree::PortInfo *'
|   `-QualType 0x560691832a81 'const EtherSpanTree::PortInfo' const
|     `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|         `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691838d70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<PortInfo>::type':'const EtherSpanTree::PortInfo &'
| `-ElaboratedType 0x560691838d20 'typename fast_argument<PortInfo>::type' sugar
|   `-TypedefType 0x560691838d00 'fast_argument<EtherSpanTree::PortInfo, true>::type' sugar
|     |-Typedef 0x560691838c38 'type'
|     `-LValueReferenceType 0x560691838c00 'const EtherSpanTree::PortInfo &'
|       `-QualType 0x5606918389a1 'const EtherSpanTree::PortInfo' const
|         `-SubstTemplateTypeParmType 0x5606918389a0 'EtherSpanTree::PortInfo' sugar
|           |-TemplateTypeParmType 0x560691565d30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560691565cd8 'T'
|           `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|             `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691838dd8 <line:126:5, col:22> col:22 const_access_type 'const EtherSpanTree::PortInfo &'
| `-LValueReferenceType 0x560691837d80 'const EtherSpanTree::PortInfo &'
|   `-QualType 0x560691832a81 'const EtherSpanTree::PortInfo' const
|     `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|         `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691838e30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x560691838e98 <line:130:5, col:16> col:16 iterator 'EtherSpanTree::PortInfo *'
| `-PointerType 0x560691837e10 'EtherSpanTree::PortInfo *'
|   `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|       `-CXXRecord 0x560691832160 'PortInfo'
|-TypedefDecl 0x560691838f00 <line:131:5, col:22> col:22 const_iterator 'const EtherSpanTree::PortInfo *'
| `-PointerType 0x560691837ed0 'const EtherSpanTree::PortInfo *'
|   `-QualType 0x560691832a81 'const EtherSpanTree::PortInfo' const
|     `-SubstTemplateTypeParmType 0x560691832a80 'EtherSpanTree::PortInfo' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606918321f0 'EtherSpanTree::PortInfo'
|         `-CXXRecord 0x560691832160 'PortInfo'
|-EnumDecl 0x560691838f58 <line:134:5> col:5
| `-EnumConstantDecl 0x560691839050 <col:12, col:40> col:12 RESERVE_GROW 'Vector<EtherSpanTree::PortInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x560691839030 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5606915949d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5606915949b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560691594990 <col:40> 'int' 1
|-CXXConstructorDecl 0x5606918390d8 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x560691839368 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x560691839190 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560691839230 <col:41, col:61> col:61 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-CXXConstructorDecl 0x560691839628 <line:139:5, col:37> col:12 Vector 'void (const Vector<EtherSpanTree::PortInfo> &)' inline
| `-ParmVarDecl 0x560691839510 <col:19, col:36> col:36 x 'const Vector<EtherSpanTree::PortInfo> &'
|-CXXConstructorDecl 0x5606918398e8 <line:141:5, col:32> col:12 Vector 'void (Vector<EtherSpanTree::PortInfo> &&)' inline
| `-ParmVarDecl 0x5606918397d0 <col:19, col:31> col:31 x 'Vector<EtherSpanTree::PortInfo> &&'
|-CXXMethodDecl 0x560691839c30 <line:144:5, col:51> col:23 operator= 'Vector<EtherSpanTree::PortInfo> &(const Vector<EtherSpanTree::PortInfo> &)' inline
| `-ParmVarDecl 0x560691839b10 <col:33, col:50> col:50 x 'const Vector<EtherSpanTree::PortInfo> &'
|-CXXMethodDecl 0x560691839f40 <line:146:5, col:46> col:23 operator= 'Vector<EtherSpanTree::PortInfo> &(Vector<EtherSpanTree::PortInfo> &&)' inline
| `-ParmVarDecl 0x560691839e20 <col:33, col:45> col:45 x 'Vector<EtherSpanTree::PortInfo> &&'
|-CXXMethodDecl 0x56069183a230 <line:148:5, col:70> col:23 assign 'Vector<EtherSpanTree::PortInfo> &(Vector::size_type, Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56069183a078 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56069183a0f0 <col:43, col:69> col:63 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-CXXMethodDecl 0x56069183a388 <line:150:5, col:55> col:49 begin 'Vector<EtherSpanTree::PortInfo>::iterator ()'
| |-NoInlineAttr 0x56069183a468 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183a4c0 <col:30> Inherited
|-CXXMethodDecl 0x56069183a508 <line:151:5, col:53> col:49 end 'Vector<EtherSpanTree::PortInfo>::iterator ()'
| |-NoInlineAttr 0x56069183a5b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183a610 <col:30> Inherited
|-CXXMethodDecl 0x56069183a6d8 <line:152:5, col:63> col:55 begin 'Vector<EtherSpanTree::PortInfo>::const_iterator () const'
| |-NoInlineAttr 0x56069183a788 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183a7e0 <col:30> Inherited
|-CXXMethodDecl 0x56069183a828 <line:153:5, col:61> col:55 end 'Vector<EtherSpanTree::PortInfo>::const_iterator () const'
| |-NoInlineAttr 0x56069183a8d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183a930 <col:30> Inherited
|-CXXMethodDecl 0x56069183a978 <line:154:5, col:64> col:55 cbegin 'Vector<EtherSpanTree::PortInfo>::const_iterator () const'
| |-NoInlineAttr 0x56069183aa28 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183aa80 <col:30> Inherited
|-CXXMethodDecl 0x56069183aac8 <line:155:5, col:62> col:55 cend 'Vector<EtherSpanTree::PortInfo>::const_iterator () const'
| |-NoInlineAttr 0x56069183ab78 <col:20> Inherited
| `-OptimizeNoneAttr 0x56069183abd0 <col:30> Inherited
|-CXXMethodDecl 0x56069183abf8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56069183aca8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56069183ad58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56069183af18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56069183ae08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56069183ae80 <col:37, col:63> col:57 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-CXXMethodDecl 0x56069183b068 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56069183afd8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56069183b218 <line:163:5, col:65> col:43 operator[] 'EtherSpanTree::PortInfo &(Vector::size_type)'
| |-ParmVarDecl 0x56069183b120 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56069183b2d0 <col:20>
| `-OptimizeNoneAttr 0x56069183b328 <col:30>
|-CXXMethodDecl 0x56069183b448 <line:164:5, col:73> col:49 operator[] 'const EtherSpanTree::PortInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x56069183b350 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56069183b500 <col:20>
| `-OptimizeNoneAttr 0x56069183b558 <col:30>
|-CXXMethodDecl 0x56069183b610 <line:165:5, col:29> col:15 at 'EtherSpanTree::PortInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56069183b580 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56069183b758 <line:166:5, col:37> col:21 at 'const EtherSpanTree::PortInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56069183b6c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56069183b888 <line:167:5, col:21> col:15 front 'EtherSpanTree::PortInfo &()' inline
|-CXXMethodDecl 0x56069183b9b8 <line:168:5, col:29> col:21 front 'const EtherSpanTree::PortInfo &() const' inline
|-CXXMethodDecl 0x56069183ba88 <line:169:5, col:20> col:15 back 'EtherSpanTree::PortInfo &()' inline
|-CXXMethodDecl 0x56069183bb58 <line:170:5, col:28> col:21 back 'const EtherSpanTree::PortInfo &() const' inline
|-CXXMethodDecl 0x56069183bc98 <line:172:5, col:39> col:15 unchecked_at 'EtherSpanTree::PortInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56069183bc08 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56069183bde0 <line:173:5, col:47> col:21 unchecked_at 'const EtherSpanTree::PortInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56069183bd50 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56069183bf28 <line:174:5, col:59> col:15 at_u 'EtherSpanTree::PortInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x56069183be98 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56069183bfe0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56069183c0e0 <line:175:5, col:71> col:21 at_u 'const EtherSpanTree::PortInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56069183c050 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56069183c198 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56069183c258 <line:177:5, col:20> col:15 data 'EtherSpanTree::PortInfo *()' inline
|-CXXMethodDecl 0x56069183c358 <line:178:5, col:28> col:21 data 'const EtherSpanTree::PortInfo *() const' inline
|-CXXMethodDecl 0x56069183c508 <line:180:5, col:48> col:17 push_back 'void (Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56069183c418 <col:27, col:47> col:47 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-FunctionTemplateDecl 0x56069183ccf8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56069183c5c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<EtherSpanTree::PortInfo>':'fast_argument<EtherSpanTree::PortInfo, true>'
| `-CXXMethodDecl 0x56069183cc58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (EtherSpanTree::PortInfo &&)' inline
|   `-ParmVarDecl 0x56069183cb58 <col:58, col:62> col:62 v 'EtherSpanTree::PortInfo &&'
|-CXXMethodDecl 0x56069183cdd8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56069183cf28 <line:186:5, col:49> col:17 push_front 'void (Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56069183ce98 <col:28, col:48> col:48 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-CXXMethodDecl 0x56069183cfe0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56069183d228 <line:189:5, col:62> col:21 insert 'Vector<EtherSpanTree::PortInfo>::iterator (Vector<EtherSpanTree::PortInfo>::iterator, Vector<EtherSpanTree::PortInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56069183d0a0 <col:28, col:37> col:37 it 'Vector<EtherSpanTree::PortInfo>::iterator':'EtherSpanTree::PortInfo *'
| `-ParmVarDecl 0x56069183d118 <col:41, col:61> col:61 v 'Vector<EtherSpanTree::PortInfo>::value_argument_type':'const EtherSpanTree::PortInfo &'
|-CXXMethodDecl 0x56069183d3e8 <line:190:5, col:38> col:21 erase 'Vector<EtherSpanTree::PortInfo>::iterator (Vector<EtherSpanTree::PortInfo>::iterator)' inline
| `-ParmVarDecl 0x56069183d2f8 <col:27, col:36> col:36 it 'Vector<EtherSpanTree::PortInfo>::iterator':'EtherSpanTree::PortInfo *'
|-CXXMethodDecl 0x56069183d638 <line:191:5, col:49> col:21 erase 'Vector<EtherSpanTree::PortInfo>::iterator (Vector<EtherSpanTree::PortInfo>::iterator, Vector<EtherSpanTree::PortInfo>::iterator)' inline
| |-ParmVarDecl 0x56069183d4b0 <col:27, col:36> col:36 a 'Vector<EtherSpanTree::PortInfo>::iterator':'EtherSpanTree::PortInfo *'
| `-ParmVarDecl 0x56069183d528 <col:39, col:48> col:48 b 'Vector<EtherSpanTree::PortInfo>::iterator':'EtherSpanTree::PortInfo *'
|-CXXMethodDecl 0x56069183d6f8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56069183d958 <line:195:5, col:34> col:17 swap 'void (Vector<EtherSpanTree::PortInfo> &)' inline
| `-ParmVarDecl 0x56069183d860 <col:22, col:33> col:33 x 'Vector<EtherSpanTree::PortInfo> &'
`-CXXDestructorDecl 0x56069183da28 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x5606917ac0e8 <col:29>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56069177aa58 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56069177ab88 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x56069177b678 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917772f8 prev 0x5606917f6fa0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606917773f0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x560691777480 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5606917774e0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x560691777588 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5606917776a8 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x560691777848 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x560691777788 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x560691777a98 <line:38:5, col:43> col:5 used Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x560691777908 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x560691777988 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x560691777c28 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x560691777b60 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x560691777da8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x560691777ce8 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x560691777f58 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x560691777e98 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x560691778050 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x56069177b850 <col:21, line:58:5>
|   `-IfStmt 0x56069177b838 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x56069177b7a0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x56069177b770 <col:6> '<bound member function type>' ->scheduled 0x5606917788a8
|     |   `-ImplicitCastExpr 0x56069177b7c0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x56069177b760 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x56069177b818 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x56069177b7e8 <col:6> '<bound member function type>' ->unschedule 0x560691779f00
|         `-CXXThisExpr 0x56069177b7d8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x560691778150 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x56069177b9f0 <col:26, line:65:5>
|   |-BinaryOperator 0x56069177b910 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56069177b8a8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56069177ab88
|   | | `-MemberExpr 0x56069177b878 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56069177ac48
|   | |   `-CXXThisExpr 0x56069177b868 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56069177b8f8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56069177b8d8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56069177b0a8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56069177b9d0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x56069177b940 <col:2> 'void *' lvalue ->_thunk 0x56069177acc8
|     | `-CXXThisExpr 0x56069177b930 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x56069177b9a8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x56069177b970 <col:20> 'int' 1
|-CXXMethodDecl 0x560691778290 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x560691778200 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x56069177bb50 <col:52, line:71:5>
|   |-CStyleCastExpr 0x56069177ba40 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56069177ba10 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x560691778200 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x56069177bb30 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x56069177bb00 <col:2> '<bound member function type>' ->assign 0x560691778150
|       `-CXXThisExpr 0x56069177baf0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x560691778460 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x560691778348 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5606917783c8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x56069177bcd0 <col:58, line:79:5>
|   |-BinaryOperator 0x56069177bc18 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56069177bbb0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56069177ab88
|   | | `-MemberExpr 0x56069177bb80 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56069177ac48
|   | |   `-CXXThisExpr 0x56069177bb70 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56069177bc00 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x56069177bbe0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x560691778348 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x56069177bcb0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56069177bc48 <col:2> 'void *' lvalue ->_thunk 0x56069177acc8
|     | `-CXXThisExpr 0x56069177bc38 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56069177bc98 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56069177bc78 <col:11> 'void *' lvalue ParmVar 0x5606917783c8 'user_data' 'void *'
|-CXXMethodDecl 0x5606917785b0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x560691778520 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x56069177be68 <col:35, line:87:5>
|   |-BinaryOperator 0x56069177bd98 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56069177bd30 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56069177ab88
|   | | `-MemberExpr 0x56069177bd00 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56069177ac48
|   | |   `-CXXThisExpr 0x56069177bcf0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56069177bd80 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56069177bd60 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56069177b280 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56069177be48 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56069177bdc8 <col:2> 'void *' lvalue ->_thunk 0x56069177acc8
|     | `-CXXThisExpr 0x56069177bdb8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56069177be30 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56069177be18 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x56069177bdf8 <col:11> 'Element *' lvalue ParmVar 0x560691778520 'element' 'Element *'
|-CXXMethodDecl 0x5606917786f8 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x560691778668 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x56069177c000 <col:29, line:94:5>
|   |-BinaryOperator 0x56069177bf30 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56069177bec8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56069177ab88
|   | | `-MemberExpr 0x56069177be98 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56069177ac48
|   | |   `-CXXThisExpr 0x56069177be88 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56069177bf18 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56069177bef8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56069177b458 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56069177bfe0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56069177bf60 <col:2> 'void *' lvalue ->_thunk 0x56069177acc8
|     | `-CXXThisExpr 0x56069177bf50 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56069177bfc8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56069177bfb0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x56069177bf90 <col:11> 'Task *' lvalue ParmVar 0x560691778668 'task' 'Task *'
|-CXXMethodDecl 0x5606917787e8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56069177c0e0 <col:37, line:100:5>
|   `-ReturnStmt 0x56069177c0d0 <line:99:2, col:19>
|     `-BinaryOperator 0x56069177c0b0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x56069177c080 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x56069177c030 <col:9> 'Element *const' lvalue ->_owner 0x56069177ad28
|       |   `-CXXThisExpr 0x56069177c020 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x56069177c098 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x56069177c060 <col:19> 'int' 0
|-CXXMethodDecl 0x5606917788a8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x56069177c1a0 <col:35, line:105:5>
|   `-ReturnStmt 0x56069177c190 <line:104:2, col:23>
|     `-BinaryOperator 0x56069177c170 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x56069177c158 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x56069177c108 <col:9> 'const int' lvalue ->_schedpos1 0x56069177a9a8
|       |   `-CXXThisExpr 0x56069177c0f8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x56069177c138 <col:23> 'int' 0
|-CXXMethodDecl 0x560691778968 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x56069177c208 <col:51, line:118:5>
|   `-ReturnStmt 0x56069177c1f8 <line:117:2, col:9>
|     `-MemberExpr 0x56069177c1c8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x56069177aa08
|       `-CXXThisExpr 0x56069177c1b8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x560691778a28 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x56069177c760 <col:37, line:136:5>
|   `-IfStmt 0x56069177c738 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x56069177c2c8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x56069177c2b0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x56069177c290 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x56069177c260 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x560691789078
|     |       `-MemberExpr 0x56069177c230 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x56069177aa08
|     |         `-CXXThisExpr 0x56069177c220 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x56069177c6a8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x56069177c690 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x56069177c660 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x56069177c648 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x56069177c610 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x56069177c5f8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x56069177c5d8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5606917b7850 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x56069177c578 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x56069177c560 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x56069177c488 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x56069177c470 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x56069177c450 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5606917b7510 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x56069177c3f0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x56069177c2f0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56069177aa08
|     |         |     |   `-CXXThisExpr 0x56069177c2e0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x56069177c438 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x56069177c420 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x56069177c3d0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x56069177c3b8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x56069177c358 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5606917aab70 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x56069177c5c0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x56069177c5a8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x56069177c540 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x56069177c528 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x56069177c4f8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5606916060c0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x56069177c728 <line:135:6, col:13>
|       `-CXXConstructExpr 0x56069177c6f8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x56069177c6c8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56069177aa08
|           `-CXXThisExpr 0x56069177c6b8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x560691778ae8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x56069177c848 <col:35, line:141:5>
|   `-ReturnStmt 0x56069177c838 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x56069177c800 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x56069177c7d0 <col:9, col:17> '<bound member function type>' ->router 0x560691809700
|         `-ImplicitCastExpr 0x56069177c820 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56069177c7b8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56069177c788 <col:9> 'Element *const' lvalue ->_owner 0x56069177ad28
|               `-CXXThisExpr 0x56069177c778 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x560691778ba8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x56069177c8c8 <col:37, line:146:5>
|   `-ReturnStmt 0x56069177c8b8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x56069177c8a0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56069177c870 <col:9> 'Element *const' lvalue ->_owner 0x56069177ad28
|         `-CXXThisExpr 0x56069177c860 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x560691778c68 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x56069177c948 <col:41, line:151:5>
|   `-ReturnStmt 0x56069177c938 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x56069177c920 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x56069177c8f0 <col:9> 'RouterThread *const' lvalue ->_thread 0x56069177ad88
|         `-CXXThisExpr 0x56069177c8e0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x560691778d30 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x560691778f28 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x560691778de0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x560691778e58 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56069177b668 <col:50> 'bool' false
|-CXXMethodDecl 0x5606917790a8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x560691778fe8 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5606917791f0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x560691779160 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x560691779338 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5606917792a8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x560691779480 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5606917793f0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5606917795c8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x560691779538 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x560691779690 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x56069177cab0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x56069177ca98 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x56069177ca40 <col:2, col:47> 'void'
|       |-MemberExpr 0x56069177c970 <col:2> '<bound member function type>' ->schedule_at_steady 0x5606917791f0
|       | `-CXXThisExpr 0x56069177c960 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177ca80 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177ca68 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56069177ca20 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x56069177ca08 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x56069177c9d8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5606916060c0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5606917797d0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x560691779740 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x560691779918 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x560691779888 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069177cc38 <col:56, line:241:5>
|   `-ExprWithCleanups 0x56069177cc20 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x56069177cbc8 <col:2, col:40> 'void'
|       |-MemberExpr 0x56069177cad8 <col:2> '<bound member function type>' ->schedule_after 0x5606917797d0
|       | `-CXXThisExpr 0x56069177cac8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177cc08 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177cbf0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56069177cb88 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x56069177cb58 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x56069177cb18 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691779888 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x56069177cb70 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56069177cb38 <col:38> 'int' 0
|-CXXMethodDecl 0x560691779a60 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5606917799d0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069177cea8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x56069177ce90 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x56069177ce38 <col:2, col:49> 'void'
|       |-MemberExpr 0x56069177cc60 <col:2> '<bound member function type>' ->schedule_after 0x5606917797d0
|       | `-CXXThisExpr 0x56069177cc50 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177ce78 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177ce60 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56069177cde0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x56069177cdc8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56069177cd38 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56069178ae68 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56069177ce20 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x56069177ce08 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56069177cd18 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5606917799d0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560691779ba8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x560691779b18 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x56069177d088 <col:58, line:261:5>
|   `-ExprWithCleanups 0x56069177d070 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x56069177d018 <col:2, col:38> 'void'
|       |-MemberExpr 0x56069177ced0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5606917791f0
|       | `-CXXThisExpr 0x56069177cec0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177d058 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177d040 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56069177cfe0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56069177cfc8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56069177cfa8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5606917b7510 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56069177cf78 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56069177cf60 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56069177cf10 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56069177aa08
|             |     `-CXXThisExpr 0x56069177cf00 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x56069177cf40 <col:33> 'const Timestamp' lvalue ParmVar 0x560691779b18 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x560691779cf0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x560691779c60 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069177d360 <col:58, line:270:5>
|   `-ExprWithCleanups 0x56069177d348 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x56069177d2f0 <col:2, col:79> 'void'
|       |-MemberExpr 0x56069177d0b0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5606917791f0
|       | `-CXXThisExpr 0x56069177d0a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177d330 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177d318 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56069177d2b0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x56069177d1e8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x56069177d1d0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x56069177d160 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x56069177d130 <col:31, col:41> '<bound member function type>' .sec 0x560691607bb8
|             | |     `-ImplicitCastExpr 0x56069177d180 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x56069177d100 <col:31> 'Timestamp' lvalue ->_expiry_s 0x56069177aa08
|             | |         `-CXXThisExpr 0x56069177d0f0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x56069177d1b8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x56069177d198 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691779c60 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x56069177d278 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x56069177d248 <col:60, col:70> '<bound member function type>' .subsec 0x5606916082b0
|                 `-ImplicitCastExpr 0x56069177d298 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x56069177d218 <col:60> 'Timestamp' lvalue ->_expiry_s 0x56069177aa08
|                     `-CXXThisExpr 0x56069177d208 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x560691779e38 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x560691779da8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56069177d698 <col:60, line:279:5>
|   `-ExprWithCleanups 0x56069177d680 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x56069177d628 <col:2, col:65> 'void'
|       |-MemberExpr 0x56069177d388 <col:2> '<bound member function type>' ->schedule_at_steady 0x5606917791f0
|       | `-CXXThisExpr 0x56069177d378 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177d668 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56069177d650 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56069177d5f0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x56069177d5d8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56069177d5b8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5606917b7510 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56069177d558 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56069177d540 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56069177d3c8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56069177aa08
|             |     `-CXXThisExpr 0x56069177d3b8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x56069177d5a0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x56069177d588 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x56069177d4e8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x56069177d4d0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x56069177d4a0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56069178ae68 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x56069177d528 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x56069177d510 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x56069177d480 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x560691779da8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560691779f00 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x560691779fc0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x56069177db60 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x56069177d6f0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x56069177d6c0 <col:2> '<bound member function type>' ->unschedule 0x560691779f00
|   |   `-CXXThisExpr 0x56069177d6b0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x56069177db48 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x56069177db10 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x56069177daf8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56069177d7a8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56069149ef38 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x56069177d720 <col:2> 'Timestamp' lvalue ->_expiry_s 0x56069177aa08
|       | `-CXXThisExpr 0x56069177d710 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56069177d790 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x56069177d760 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56069177a080 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x56069177deb8 <col:42, line:310:5>
|   |-IfStmt 0x56069177dd00 <line:306:2, line:307:23>
|   | |-CallExpr 0x56069177dc30 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x56069177dc18 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x56069177dbb8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5606917a8fe0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x56069177dcf0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x56069177dcd8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x56069177dca8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56069177dc90 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x56069177dc60 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x56069177dea8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x56069177de90 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x56069177de60 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56069177de48 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x56069177de08 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56069177ddf0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56069177ddc0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56069178b180 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56069177de30 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x56069177dda0 <col:30> 'int' 500
|-CXXMethodDecl 0x56069177a1c0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56069177a130 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069177a268 <col:69> "" ""
|-CXXMethodDecl 0x56069177a378 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56069177a2e8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069177a420 <col:70> "" ""
|-CXXMethodDecl 0x56069177a530 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56069177a4a0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069177a5d8 <col:71> "" ""
|-CXXMethodDecl 0x56069177a6e8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56069177a658 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56069177a790 <col:72> "" ""
|-EnumDecl 0x56069177a800 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x56069177a900 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x56069177a950 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56069177a8e0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x56069177a8c0 <col:25> 'int' 1
|-AccessSpecDecl 0x56069177a968 <line:339:3, col:10> col:3 private
|-FieldDecl 0x56069177a9a8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x56069177aa08 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x56069177aa58 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56069177ab88 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x56069177b678 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x56069177ac48 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x56069177acc8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56069177ad28 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x56069177ad88 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x56069177aed8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x56069177ade8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x56069177b0a8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56069177af90 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x56069177b010 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x56069177b280 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56069177b168 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x56069177b1e8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x56069177b458 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56069177b340 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x56069177b3c0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x56069177b628 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691830710 <../elements/etherswitch/spantree.hh:57:1, line:117:1> line:57:7 class EtherSpanTree definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x560691830868 <col:1, col:7> col:7 implicit referenced class EtherSpanTree
|-AccessSpecDecl 0x5606918308f8 <line:59:1, col:7> col:1 public
|-CXXConstructorDecl 0x560691830980 <line:60:3, col:17> col:3 EtherSpanTree 'void ()'
|-CXXDestructorDecl 0x560691830a70 <line:61:3, col:18> col:3 ~EtherSpanTree 'void ()' noexcept-unevaluated 0x560691830a70
| `-Overrides: [ 0x5606917f7658 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x560691830ba0 <line:63:3, col:60> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5606917f8ab8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56069183e148 <col:34, col:60>
|   `-ReturnStmt 0x56069183e138 <col:36, col:43>
|     `-ImplicitCastExpr 0x56069183e120 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56069183e0f8 <col:43> 'const char [14]' lvalue "EtherSpanTree"
|-CXXMethodDecl 0x560691830c68 <line:64:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5606917f8b80 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56069183e1a8 <col:34, col:50>
|   `-ReturnStmt 0x56069183e198 <col:36, col:43>
|     `-ImplicitCastExpr 0x56069183e180 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56069183e160 <col:43> 'const char [4]' lvalue "-/="
|-CXXMethodDecl 0x560691830d30 <line:65:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5606917f8f48 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56069183e208 <col:34, col:49>
|   `-ReturnStmt 0x56069183e1f8 <col:36, col:43>
|     `-ImplicitCastExpr 0x56069183e1e0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56069183e1c0 <col:43> 'const char []' lvalue Var 0x5606917f9090 'PUSH' 'const char []'
|-CXXMethodDecl 0x560691831000 <line:67:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5606917fa350 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x560691830eb0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x560691830f28 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x560691831158 <line:68:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5606917fa5a0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5606918310c0 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x560691831328 <line:70:3, col:45> col:17 read_msgs 'String (Element *, void *)' static
| |-ParmVarDecl 0x560691831210 <col:27, col:36> col:36 f 'Element *'
| `-ParmVarDecl 0x560691831290 <col:39, col:44> col:45 'void *'
|-CXXMethodDecl 0x5606918313f8 <line:71:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5606917fa420 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5606918314b8 <line:74:3, col:17> col:8 periodic 'void ()'
|-CXXMethodDecl 0x560691831578 <line:76:3, col:15> col:8 expire 'bool ()'
|-CXXMethodDecl 0x560691831638 <line:77:3, col:18> col:8 find_best 'void ()'
|-CXXMethodDecl 0x5606918316f8 <line:78:3, col:18> col:8 find_tree 'void ()'
|-CXXMethodDecl 0x5606918318c0 <line:80:3, col:32> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5606917f7928 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5606918317b0 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x560691831828 <col:23, col:31> col:31 p 'Packet *'
|-CXXMethodDecl 0x560691831a18 <line:81:3, col:37> col:11 generate_packet 'Packet *(int)'
| `-ParmVarDecl 0x560691831988 <col:27, col:31> col:31 output 'int'
|-AccessSpecDecl 0x560691831ac0 <line:83:1, col:8> col:1 private
|-FieldDecl 0x560691831b28 <line:84:3, col:15> col:15 _input_sup 'Suppressor *'
|-FieldDecl 0x560691831b88 <line:85:3, col:15> col:15 _output_sup 'Suppressor *'
|-FieldDecl 0x560691831c18 <line:86:3, col:16> col:16 _switch 'EtherSwitch *'
|-FieldDecl 0x560691831c78 <line:87:3, col:14> col:14 _topology_change 'Timestamp *'
|-FieldDecl 0x560691831cd8 <line:88:3, col:8> col:8 _send_tc_msg 'bool'
|-FieldDecl 0x560691831d38 <line:90:3, col:12> col:12 _bridge_id 'uint64_t':'unsigned long'
|-FieldDecl 0x560691831d98 <line:92:3, col:12> col:12 _bridge_priority 'uint16_t':'unsigned short'
|-FieldDecl 0x560691831df8 <line:93:3, col:12> col:12 _long_cache_timeout 'uint16_t':'unsigned short'
|-FieldDecl 0x560691831ea8 <line:95:3, col:18> col:11 _addr 'uint8_t [6]'
|-FieldDecl 0x560691831f08 <line:97:3, col:17> col:17 _best 'BridgeMessage'
|-EnumDecl 0x560691831f58 <line:101:3, col:48> col:8 referenced PortState
| |-EnumConstantDecl 0x560691832020 <col:19> col:19 referenced BLOCK 'EtherSpanTree::PortState'
| |-EnumConstantDecl 0x560691832070 <col:26> col:26 LISTEN 'EtherSpanTree::PortState'
| |-EnumConstantDecl 0x5606918320c0 <col:34> col:34 LEARN 'EtherSpanTree::PortState'
| `-EnumConstantDecl 0x560691832110 <col:41> col:41 FORWARD 'EtherSpanTree::PortState'
|-CXXRecordDecl 0x560691832160 <line:102:3, line:108:3> line:102:10 referenced struct PortInfo definition
| |-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x560691832278 <col:3, col:10> col:10 implicit referenced struct PortInfo
| |-FieldDecl 0x560691832318 <line:103:5, col:15> col:15 referenced state 'EtherSpanTree::PortState'
| |-FieldDecl 0x560691832378 <line:104:5, col:15> col:15 since 'Timestamp'
| |-FieldDecl 0x5606918323d8 <line:105:5, col:10> col:10 referenced needs_tca 'bool'
| |-FieldDecl 0x560691832438 <line:106:5, col:19> col:19 msg 'BridgeMessage'
| `-CXXConstructorDecl 0x5606918324f0 <line:107:5, col:52> col:5 PortInfo 'void ()'
|   |-CXXCtorInitializer Field 0x560691832378 'since' 'Timestamp'
|   | `-CXXConstructExpr 0x56069183e220 <col:5> 'Timestamp' 'void ()'
|   |-CXXCtorInitializer Field 0x560691832438 'msg' 'BridgeMessage'
|   | `-CXXConstructExpr 0x56069183e5c8 <col:5> 'BridgeMessage' 'void ()'
|   `-CompoundStmt 0x56069183e778 <col:16, col:52>
|     |-BinaryOperator 0x56069183e6e8 <col:18, col:26> 'EtherSpanTree::PortState' lvalue '='
|     | |-MemberExpr 0x56069183e638 <col:18> 'EtherSpanTree::PortState' lvalue ->state 0x560691832318
|     | | `-CXXThisExpr 0x56069183e628 <col:18> 'EtherSpanTree::PortInfo *' implicit this
|     | `-DeclRefExpr 0x56069183e668 <col:26> 'EtherSpanTree::PortState' EnumConstant 0x560691832020 'BLOCK' 'EtherSpanTree::PortState'
|     `-BinaryOperator 0x56069183e758 <col:33, col:45> 'bool' lvalue '='
|       |-MemberExpr 0x56069183e718 <col:33> 'bool' lvalue ->needs_tca 0x5606918323d8
|       | `-CXXThisExpr 0x56069183e708 <col:33> 'EtherSpanTree::PortInfo *' implicit this
|       `-CXXBoolLiteralExpr 0x56069183e748 <col:45> 'bool' false
|-CXXMethodDecl 0x560691832718 <line:110:3, col:40> col:8 set_state 'bool (int, EtherSpanTree::PortState)'
| |-ParmVarDecl 0x5606918325c8 <col:18, col:22> col:22 i 'int'
| `-ParmVarDecl 0x560691832640 <col:25, col:35> col:35 state 'EtherSpanTree::PortState'
|-FieldDecl 0x56069183db10 <line:112:3, col:20> col:20 _port 'Vector<EtherSpanTree::PortInfo>':'Vector<EtherSpanTree::PortInfo>'
|-FieldDecl 0x56069183db70 <line:114:3, col:9> col:9 _hello_timer 'Timer'
|-CXXMethodDecl 0x56069183dce8 <line:115:3, col:41> col:15 used hello_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56069183dbd0 <col:26, col:32> col:33 'Timer *'
| `-ParmVarDecl 0x56069183dc50 <col:35, col:40> col:41 'void *'
|-CXXConstructorDecl 0x56069183ddc8 <line:57:7> col:7 implicit EtherSpanTree 'void (const EtherSpanTree &)' inline default_delete noexcept-unevaluated 0x56069183ddc8
| `-ParmVarDecl 0x56069183ded8 <col:7> col:7 'const EtherSpanTree &'
`-CXXMethodDecl 0x56069183df78 <col:7> col:7 implicit operator= 'EtherSpanTree &(const EtherSpanTree &)' inline default_delete noexcept-unevaluated 0x56069183df78
  `-ParmVarDecl 0x56069183e088 <col:7> col:7 'const EtherSpanTree &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherSpanTree = type { %class.Element.base, %class.Suppressor*, %class.Suppressor*, %class.EtherSwitch*, %class.Timestamp*, i8, i64, i16, i16, [6 x i8], %class.BridgeMessage, %class.Vector, %class.Timer }
  NonVirtualBaseLLVMType:%class.EtherSpanTree = type { %class.Element.base, %class.Suppressor*, %class.Suppressor*, %class.EtherSwitch*, %class.Timestamp*, i8, i64, i16, i16, [6 x i8], %class.BridgeMessage, %class.Vector, %class.Timer }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606915cb220 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5606915cb338 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5606915cb3d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5606915cb438 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5606915cb498 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5606915cb548 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606915cb850 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606915cb968 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5606915cba10 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5606915cba78 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5606915cbb08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5606915d1ba0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5606915d1fd8 <col:12>
|-CXXConstructorDecl 0x5606915d1ca8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5606915d1db8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5606915cba10 'data' 'const char *'
| | `-ImplicitCastExpr 0x5606915d4560 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5606915d4530 <col:12> 'const char *const' lvalue .data 0x5606915cba10
| |     `-DeclRefExpr 0x5606915d4510 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5606915cba78 'length' 'int'
| | `-ImplicitCastExpr 0x5606915d45f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5606915d45c0 <col:12> 'const int' lvalue .length 0x5606915cba78
| |     `-DeclRefExpr 0x5606915d45a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5606915cbb08 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5606915d4680 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5606915d4650 <col:12> 'String::memo_t *const' lvalue .memo 0x5606915cbb08
| |     `-DeclRefExpr 0x5606915d4630 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5606915d46d8 <col:12>
|-CXXConstructorDecl 0x5606915d1e58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5606915d1e58
| `-ParmVarDecl 0x5606915d1f68 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5606915d74c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5606915e2ed8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5606915e2fe8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5606915e3500 <col:12>
|   |-BinaryOperator 0x5606915e3318 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5606915e32d0 <col:12> 'const char *' lvalue ->data 0x5606915cba10
|   | | `-CXXThisExpr 0x5606915e32c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5606915e3300 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5606915e3290 <col:12> 'const char *const' lvalue .data 0x5606915cba10
|   |     `-DeclRefExpr 0x5606915e3270 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5606915e33e0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5606915e3398 <col:12> 'int' lvalue ->length 0x5606915cba78
|   | | `-CXXThisExpr 0x5606915e3388 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5606915e33c8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5606915e3358 <col:12> 'const int' lvalue .length 0x5606915cba78
|   |     `-DeclRefExpr 0x5606915e3338 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5606915e34a8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5606915e3460 <col:12> 'String::memo_t *' lvalue ->memo 0x5606915cbb08
|   | | `-CXXThisExpr 0x5606915e3450 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5606915e3490 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5606915e3420 <col:12> 'String::memo_t *const' lvalue .memo 0x5606915cbb08
|   |     `-DeclRefExpr 0x5606915e3400 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5606915e34f0 <col:12>
|     `-UnaryOperator 0x5606915e34d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606915e34c8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5606915e3058 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5606915e3058
  `-ParmVarDecl 0x5606915e3168 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606915c2790 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606915c28a8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5606915c2938 <col:16, col:22> col:16 public
|-TypedefDecl 0x5606915c2978 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x560691294dc0 'const char *'
|   `-QualType 0x560691294311 'const char' const
|     `-BuiltinType 0x560691294310 'char'
|-TypedefDecl 0x5606915c2a00 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5606915c29d0 'String::const_iterator' sugar
|   |-Typedef 0x5606915c2978 'const_iterator'
|   `-PointerType 0x560691294dc0 'const char *'
|     `-QualType 0x560691294311 'const char' const
|       `-BuiltinType 0x560691294310 'char'
|-TypedefDecl 0x5606915c2b70 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5606915c2ae0 'int (String::*)() const'
|   |-RecordType 0x5606915c2820 'String'
|   | `-CXXRecord 0x5606915c2790 'String'
|   `-ParenType 0x5606915c2a80 'int () const' sugar
|     `-FunctionProtoType 0x560691596610 'int () const' const cdecl
|       `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606915c2bd8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5606913eb030 'int64_t' sugar
|   |-Typedef 0x5606912fd2d0 'int64_t'
|   `-TypedefType 0x5606912d64d0 '__int64_t' sugar
|     |-Typedef 0x5606912d60a8 '__int64_t'
|     `-BuiltinType 0x560691294390 'long'
|-TypedefDecl 0x5606915c2c40 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5606913eaf50 'uint64_t' sugar
|   |-Typedef 0x5606912fd470 'uint64_t'
|   `-TypedefType 0x5606912d6560 '__uint64_t' sugar
|     |-Typedef 0x5606912d6118 '__uint64_t'
|     `-BuiltinType 0x560691294430 'unsigned long'
|-TypedefDecl 0x5606915c2cd0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5606915c2ca0 'String::intmax_t' sugar
|   |-Typedef 0x5606915c2bd8 'intmax_t'
|   `-TypedefType 0x5606913eb030 'int64_t' sugar
|     |-Typedef 0x5606912fd2d0 'int64_t'
|     `-TypedefType 0x5606912d64d0 '__int64_t' sugar
|       |-Typedef 0x5606912d60a8 '__int64_t'
|       `-BuiltinType 0x560691294390 'long'
|-TypedefDecl 0x5606915c2d60 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5606915c2d30 'String::uintmax_t' sugar
|   |-Typedef 0x5606915c2c40 'uintmax_t'
|   `-TypedefType 0x5606913eaf50 'uint64_t' sugar
|     |-Typedef 0x5606912fd470 'uint64_t'
|     `-TypedefType 0x5606912d6560 '__uint64_t' sugar
|       |-Typedef 0x5606912d6118 '__uint64_t'
|       `-BuiltinType 0x560691294430 'unsigned long'
|-CXXConstructorDecl 0x5606915c2e20 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5606915c2fc8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5606915c2f08 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5606915c3178 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5606915c30b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5606915c32d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5606915c3240 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5606915c34e8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5606915c3398 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5606915c3418 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5606915c3708 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5606915c35b8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5606915c3638 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5606915c3928 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5606915c37d8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5606915c3858 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5606915c3b48 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5606915c39f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5606915c3a78 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5606915c3cd8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5606915c3c10 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5606915c3e58 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5606915c3d98 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5606915c3fe8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5606915c3f20 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5606915c4140 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5606915c40b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5606915c4298 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5606915c4208 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5606915c43f0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5606915c4360 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5606915c4578 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5606915c44b8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5606915c4708 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5606915c4640 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5606915c4898 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5606915c47d0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5606915c4a28 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5606915c4960 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5606915c4b20 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5606915c4c48 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5606915c4dc8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5606915c4d00 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5606915c4f18 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5606915c4e88 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5606915c4fd0 <col:63> "" ""
|-CXXMethodDecl 0x5606915c5118 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5606915c5058 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5606915c5328 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5606915c51d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5606915c5258 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5606915c5548 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5606915c53f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5606915c5470 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5606915c5828 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5606915c5608 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5606915c5688 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5606915d1670 <col:55> 'int' 10
| `-ParmVarDecl 0x5606915c5700 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5606915d1690 <col:76> 'bool' true
|-CXXMethodDecl 0x5606915c5b08 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5606915c58f0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5606915c5970 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5606915d16a0 <col:56> 'int' 10
| `-ParmVarDecl 0x5606915c59e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5606915d16c0 <col:77> 'bool' true
|-CXXMethodDecl 0x5606915c5c10 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5606915c5cd8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5606915c5da0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5606915c5e40 <col:20>
| `-OptimizeNoneAttr 0x5606915c5e98 <col:30>
|-CXXConversionDecl 0x5606915c5f88 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5606915c6058 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5606915c6118 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5606915c6208 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5606915c62c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5606915c6448 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5606915c6380 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5606915c6598 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5606915c6508 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5606915c6688 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5606915c6748 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5606915c6998 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5606915c6800 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5606915c6880 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5606915c6bf8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5606915c6a60 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5606915c6ae0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5606915c6cc8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5606915c6ed8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5606915c6d80 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5606915c6e00 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5606915c70f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5606915c6fa0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5606915c7020 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5606915c7288 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5606915c71c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5606915c7378 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5606915c74e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5606915c7428 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5606915c76f8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5606915c75a8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5606915c7628 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5606915c7910 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5606915c77b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5606915c7830 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5606915c7aa0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5606915c79d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5606915c7cc0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5606915c7b60 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5606915c7be0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5606915c7e10 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5606915c7d80 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5606915c7fe8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5606915c7ed0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5606915c7f50 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5606915c8138 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5606915c80a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5606915c8350 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5606915c81f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5606915c8270 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5606915d16d0 <col:39> 'int' 0
|-CXXMethodDecl 0x5606915c8570 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5606915c8410 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5606915c8490 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5606915d16f0 <col:48> 'int' 0
|-CXXMethodDecl 0x5606915c8750 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5606915c8630 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5606915c86b0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5606915d1710 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5606915c8820 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5606915c88e0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5606915c89a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5606915c8a60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5606915c8b20 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5606915c8cc8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5606915c8bd0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5606915c8e48 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5606915c8d80 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5606915c9020 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5606915c8f08 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5606915c9198 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5606915c90d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5606915c92e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5606915c9250 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5606915c9430 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5606915c93a0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5606915c9608 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5606915c94f0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5606915c9570 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5606915c97e8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5606915c96d0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5606915c9750 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5606915c9938 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5606915c98a8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5606915c9b48 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5606915c99f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5606915c9a78 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5606915c9ca8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5606915c9c10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5606915c9e00 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5606915c9d68 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5606915c9ea8 <col:57> "" ""
|-CXXMethodDecl 0x5606915c9fb8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5606915c9f28 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5606915ca108 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5606915ca078 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5606915ca288 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5606915ca1c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5606915ca350 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5606915ca410 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5606915ca4d0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5606915ca570 <col:49> "" ""
|-CXXMethodDecl 0x5606915ca600 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5606915ca6c0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5606915ca7b0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5606915ca878 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5606915ca938 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5606915ca9f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5606915caaf0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5606915cabb8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5606915cac80 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5606915cae58 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5606915cad38 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5606915cadb8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5606915cb080 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5606915caf20 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5606915cafa0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5606915cb190 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5606915cb1f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5606915cb220 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5606915cb338 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5606915cb3d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5606915cb438 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5606915cb498 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5606915cb548 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5606915cb5b0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5606915cb7e8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5606915cb838 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606915cb7c8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5606915cb6d8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5606915cb680 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5606915cb6c0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5606915cb6a0 <col:32> 'int' 8
|-CXXRecordDecl 0x5606915cb850 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5606915cb968 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5606915cba10 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5606915cba78 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5606915cbb08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5606915d1ba0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5606915d1fd8 <col:12>
| |-CXXConstructorDecl 0x5606915d1ca8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5606915d1db8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5606915cba10 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5606915d4560 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5606915d4530 <col:12> 'const char *const' lvalue .data 0x5606915cba10
| | |     `-DeclRefExpr 0x5606915d4510 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5606915cba78 'length' 'int'
| | | `-ImplicitCastExpr 0x5606915d45f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5606915d45c0 <col:12> 'const int' lvalue .length 0x5606915cba78
| | |     `-DeclRefExpr 0x5606915d45a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5606915cbb08 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5606915d4680 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5606915d4650 <col:12> 'String::memo_t *const' lvalue .memo 0x5606915cbb08
| | |     `-DeclRefExpr 0x5606915d4630 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915d1db8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5606915d46d8 <col:12>
| |-CXXConstructorDecl 0x5606915d1e58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5606915d1e58
| | `-ParmVarDecl 0x5606915d1f68 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5606915d74c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5606915e2ed8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5606915e2fe8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5606915e3500 <col:12>
| |   |-BinaryOperator 0x5606915e3318 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5606915e32d0 <col:12> 'const char *' lvalue ->data 0x5606915cba10
| |   | | `-CXXThisExpr 0x5606915e32c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5606915e3300 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5606915e3290 <col:12> 'const char *const' lvalue .data 0x5606915cba10
| |   |     `-DeclRefExpr 0x5606915e3270 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5606915e33e0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5606915e3398 <col:12> 'int' lvalue ->length 0x5606915cba78
| |   | | `-CXXThisExpr 0x5606915e3388 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5606915e33c8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5606915e3358 <col:12> 'const int' lvalue .length 0x5606915cba78
| |   |     `-DeclRefExpr 0x5606915e3338 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5606915e34a8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5606915e3460 <col:12> 'String::memo_t *' lvalue ->memo 0x5606915cbb08
| |   | | `-CXXThisExpr 0x5606915e3450 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5606915e3490 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5606915e3420 <col:12> 'String::memo_t *const' lvalue .memo 0x5606915cbb08
| |   |     `-DeclRefExpr 0x5606915e3400 <col:12> 'const String::rep_t' lvalue ParmVar 0x5606915e2fe8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5606915e34f0 <col:12>
| |     `-UnaryOperator 0x5606915e34d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5606915e34c8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5606915e3058 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5606915e3058
|   `-ParmVarDecl 0x5606915e3168 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5606915cbb80 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5606915cbdc8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5606915cbbe8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5606915cbc68 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5606915cbce0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5606915d1b60 <col:79, line:261:5>
|   |-BinaryOperator 0x5606915d17d8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5606915d1770 <col:2, col:5> 'const char *' lvalue .data 0x5606915cba10
|   | | `-MemberExpr 0x5606915d1740 <col:2> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|   | |   `-CXXThisExpr 0x5606915d1730 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5606915d17c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5606915d17a0 <col:12> 'const char *' lvalue ParmVar 0x5606915cbbe8 'data' 'const char *'
|   |-BinaryOperator 0x5606915d18a0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5606915d1838 <col:2, col:5> 'int' lvalue .length 0x5606915cba78
|   | | `-MemberExpr 0x5606915d1808 <col:2> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|   | |   `-CXXThisExpr 0x5606915d17f8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5606915d1888 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5606915d1868 <col:14> 'int' lvalue ParmVar 0x5606915cbc68 'length' 'int'
|   `-IfStmt 0x5606915d1b48 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5606915d19c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5606915d19a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5606915d1988 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5606915d1968 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5606915d1900 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|     |       | `-MemberExpr 0x5606915d18d0 <col:7> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|     |       |   `-CXXThisExpr 0x5606915d18c0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5606915d1950 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5606915d1930 <col:17> 'String::memo_t *' lvalue ParmVar 0x5606915cbce0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5606915d1b20 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5606915d1b08 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606915d1a10 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5606915ba7f8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5606915d1a78 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5606915cb3d8
|         `-ImplicitCastExpr 0x5606915d1a60 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5606915d1a40 <col:27> 'String::memo_t *' lvalue ParmVar 0x5606915cbce0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5606915cc078 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5606915cbe98 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5606915cbf18 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5606915cbf90 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5606915cbb80 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5606915d1fe8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5606915d2178 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5606915d20e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5606915d2050 <col:2> '<bound member function type>' ->assign_memo 0x5606915cbdc8
|     | `-ImplicitCastExpr 0x5606915d2118 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5606915d2040 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5606915d2130 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5606915d2080 <col:14> 'const char *' lvalue ParmVar 0x5606915cbe98 'data' 'const char *'
|     |-ImplicitCastExpr 0x5606915d2148 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5606915d20a0 <col:20> 'int' lvalue ParmVar 0x5606915cbf18 'length' 'int'
|     `-ImplicitCastExpr 0x5606915d2160 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5606915d20c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5606915cbf90 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5606915cc208 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5606915cc148 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5606915d23d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5606915d2350 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5606915d21a0 <col:2> '<bound member function type>' ->assign_memo 0x5606915cbdc8
|     | `-CXXThisExpr 0x5606915d2190 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5606915d2388 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5606915d2220 <col:14, col:19> 'const char *' lvalue .data 0x5606915cba10
|     |   `-MemberExpr 0x5606915d21f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5606915cbb80
|     |     `-DeclRefExpr 0x5606915d21d0 <col:14> 'const String' lvalue ParmVar 0x5606915cc148 'x' 'const String &'
|     |-ImplicitCastExpr 0x5606915d23a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5606915d22a0 <col:25, col:30> 'int' lvalue .length 0x5606915cba78
|     |   `-MemberExpr 0x5606915d2270 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5606915cbb80
|     |     `-DeclRefExpr 0x5606915d2250 <col:25> 'const String' lvalue ParmVar 0x5606915cc148 'x' 'const String &'
|     `-ImplicitCastExpr 0x5606915d23b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5606915d2320 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|         `-MemberExpr 0x5606915d22f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5606915cbb80
|           `-DeclRefExpr 0x5606915d22d0 <col:38> 'const String' lvalue ParmVar 0x5606915cc148 'x' 'const String &'
|-CXXMethodDecl 0x5606915cc2d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5606915d2d90 <col:31, line:278:5>
|   `-IfStmt 0x5606915d2d78 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5606915d2470 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5606915d2458 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5606915d2428 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|     |     `-MemberExpr 0x5606915d23f8 <col:6> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|     |       `-CXXThisExpr 0x5606915d23e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5606915d2d50 <col:15, line:277:2>
|       |-ParenExpr 0x5606915d2920 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5606915d28f0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5606915d2580 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5606915d2568 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5606915d2550 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5606915d2510 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5606915cb3d8
|       |   |       `-ImplicitCastExpr 0x5606915d24f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5606915d24c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|       |   |           `-MemberExpr 0x5606915d2498 <col:27> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|       |   |             `-CXXThisExpr 0x5606915d2488 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5606915d25e0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5606915d25c0 <col:54> 'int' 0
|       |   `-CallExpr 0x5606915d2850 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5606915d2838 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5606915d27b8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5606915d2890 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5606915d26c8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5606915d28a8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5606915d26f8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5606915d28c0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5606915d2730 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5606915d28d8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5606915d27a0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5606915d2788 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5606915d2750 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5606915d2c70 <line:274:6, line:275:22>
|       | |-CallExpr 0x5606915d2b30 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5606915d2b18 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5606915d2a90 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5606915bbc40 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5606915d2a60 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5606915cb3d8
|       | |   `-ImplicitCastExpr 0x5606915d2a48 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5606915d2a18 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|       | |       `-MemberExpr 0x5606915d29e8 <col:40> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|       | |         `-CXXThisExpr 0x5606915d29d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5606915d2c30 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5606915d2c18 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5606915d2b58 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5606915d0ab0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5606915d2c58 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5606915d2bb8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|       |       `-MemberExpr 0x5606915d2b88 <col:15> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|       |         `-CXXThisExpr 0x5606915d2b78 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5606915d2d30 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5606915d2cc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5606915cbb08
|         | `-MemberExpr 0x5606915d2c98 <col:6> 'String::rep_t' lvalue ->_r 0x5606915cbb80
|         |   `-CXXThisExpr 0x5606915d2c88 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5606915d2d18 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5606915d2cf8 <col:16> 'int' 0
|-CXXMethodDecl 0x5606915cc568 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5606915cc388 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5606915cc408 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5606915cc480 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5606915cc640 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5606915cc890 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5606915cc6f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5606915cc778 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5606915cc7f0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5606915cca78 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5606915cc960 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5606915cc9e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5606915ccb78 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5606915d2e68 <col:41, line:286:5>
|   `-ReturnStmt 0x5606915d2e58 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5606915d2e28 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5606915d2df0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5606915d2dd8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5606915d2db8 <col:46> 'int' 1
|-CXXMethodDecl 0x5606915cce18 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5606915ccc30 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5606915cccb0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5606915ccd30 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5606915d0ab0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5606915ccee0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5606915d0b80 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5606915d0d50 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5606915d0c38 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5606915d0cb8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5606915d0e10 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5606915d0ed8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5606915d0fd8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5606915d1050 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5606915d10c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5606915d1130 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5606915d1230 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5606915d1280 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606915d1210 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5606915d11f0 <col:22> 'int' 14
|-CXXMethodDecl 0x5606915d1498 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5606915d12b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5606915d1330 <col:38> col:41 'int'
| `-ParmVarDecl 0x5606915d13b0 <col:43> col:46 'int'
|-FriendDecl 0x5606915d15a0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5606915d1630 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56069186aa10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56069186abe8 prev 0x56069186aa10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56069186ac78 <col:46, col:52> col:46 public
|-TypedefDecl 0x56069186aca0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x56069186c600 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56069186c5b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56069186c590 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56069186aeb8 'type'
|     `-SubstTemplateTypeParmType 0x56069186ae80 'String' sugar
|       |-TemplateTypeParmType 0x560691586030 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560691585fe0 'T'
|       `-RecordType 0x5606915c2820 'String'
|         `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186c6b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56069186c680 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56069186c660 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56069186c600 'type'
|     `-ElaboratedType 0x56069186c5b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56069186c590 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56069186aeb8 'type'
|         `-SubstTemplateTypeParmType 0x56069186ae80 'String' sugar
|           |-TemplateTypeParmType 0x560691586030 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560691585fe0 'T'
|           `-RecordType 0x5606915c2820 'String'
|             `-CXXRecord 0x5606915c2790 'String'
|-CXXMethodDecl 0x56069186c838 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56069186c748 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56069186c928 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56069186ca08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56069186ca08
|-CXXMethodDecl 0x56069186ccd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56069186cbe0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56069186cf18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56069186cd90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56069186ce08 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186d0e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56069186cfd8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56069186d050 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186d248 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56069186d318 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56069186d568 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56069186d3d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56069186d450 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186d7c8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56069186d638 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56069186d6b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186d988 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56069186d898 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186db48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56069186da50 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186dc00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56069186dcb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56069186dee8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56069186dd60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56069186ddd8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56069186e188 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56069186e090 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56069186e250 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56069186e2a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56069186e2f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5606917f9fc0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5606918696b8 prev 0x5606917f9fc0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56069186a980 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56069186a930 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56069186a910 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56069186a7c0 'type'
|     `-SubstTemplateTypeParmType 0x56069186a650 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56069155bde0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56069155bd88 'F'
|       `-RecordType 0x56069186a2b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56069186a1d0 'typed_array_memory'
|-FieldDecl 0x56069186e340 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56069186e390 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56069186e3c8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|   |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5606915932f8 'T'
|   `-RecordType 0x5606915c2820 'String'
|     `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186e458 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56069186e420 'String &'
|   `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606915c2820 'String'
|       `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186e4e8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56069186e4b0 'const String &'
|   `-QualType 0x560691869751 'const String' const
|     `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606915c2820 'String'
|         `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186e578 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56069186e540 'String *'
|   `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606915c2820 'String'
|       `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186e608 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56069186e5d0 'const String *'
|   `-QualType 0x560691869751 'const String' const
|     `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606915c2820 'String'
|         `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186f260 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56069186f210 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56069186f1f0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56069186f128 'type'
|     `-LValueReferenceType 0x56069186f0f0 'const String &'
|       `-QualType 0x56069186ee91 'const String' const
|         `-SubstTemplateTypeParmType 0x56069186ee90 'String' sugar
|           |-TemplateTypeParmType 0x560691565d30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560691565cd8 'T'
|           `-RecordType 0x5606915c2820 'String'
|             `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186f2c8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56069186e4b0 'const String &'
|   `-QualType 0x560691869751 'const String' const
|     `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606915c2820 'String'
|         `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186f320 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x56069186f388 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56069186e540 'String *'
|   `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-RecordType 0x5606915c2820 'String'
|       `-CXXRecord 0x5606915c2790 'String'
|-TypedefDecl 0x56069186f3f0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56069186e5d0 'const String *'
|   `-QualType 0x560691869751 'const String' const
|     `-SubstTemplateTypeParmType 0x560691869750 'String' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-RecordType 0x5606915c2820 'String'
|         `-CXXRecord 0x5606915c2790 'String'
|-EnumDecl 0x56069186f448 <line:134:5> col:5
| `-EnumConstantDecl 0x56069186f540 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56069186f520 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5606915949d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5606915949b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560691594990 <col:40> 'int' 1
|-CXXConstructorDecl 0x56069186f5c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56069186f858 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56069186f680 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56069186f720 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56069186fae8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56069186f9d0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56069186fda8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56069186fc90 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5606918700c0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56069186ffa0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5606918703d0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5606918702b0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5606918706c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560691870508 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560691870580 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5606918707e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560691870898 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918708f0 <col:30> Inherited
|-CXXMethodDecl 0x560691870938 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5606918709e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560691870a40 <col:30> Inherited
|-CXXMethodDecl 0x560691870b08 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560691870bb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560691870c10 <col:30> Inherited
|-CXXMethodDecl 0x5606918710a0 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560691871150 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918711a8 <col:30> Inherited
|-CXXMethodDecl 0x5606918711f0 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5606918712a0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918712f8 <col:30> Inherited
|-CXXMethodDecl 0x560691871340 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5606918713f0 <col:20> Inherited
| `-OptimizeNoneAttr 0x560691871448 <col:30> Inherited
|-CXXMethodDecl 0x560691871470 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560691871520 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5606918715d0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560691871790 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560691871680 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5606918716f8 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5606918718e0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560691871850 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560691871a88 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x560691871998 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560691871b40 <col:20>
| `-OptimizeNoneAttr 0x560691871b98 <col:30>
|-CXXMethodDecl 0x560691871cb8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x560691871bc0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560691871d70 <col:20>
| `-OptimizeNoneAttr 0x560691871dc8 <col:30>
|-CXXMethodDecl 0x560691871e80 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560691871df0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560691871fc8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560691871f38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918720f8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5606918721f8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5606918722c8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x560691872398 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5606918724d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560691872448 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560691872620 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560691872590 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560691872768 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5606918726d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560691872820 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560691872920 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560691872890 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5606918729d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560691872a98 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x560691872b98 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x560691872d18 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560691872c58 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5606918734a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560691872dd0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x560691873408 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x560691873308 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x560691873588 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5606918736d8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560691873648 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560691873790 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5606918739d8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560691873850 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5606918738c8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560691873b68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x560691873aa8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560691873d78 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x560691873c30 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560691873ca8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560691873e38 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560691874098 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x560691873fa0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x560691874168 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x560691874168

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691908a70 prev 0x56069187f2d8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560691908b68 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x560691908bf8 <col:22, col:28> col:22 public
|-EnumDecl 0x560691908c20 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x560691908d38 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691908d18 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x560691908d00 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560691908ce0 <col:14> 'int' 999
| |-EnumConstantDecl 0x560691908de0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691908dc0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x560691908da8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560691908d88 <col:14> 'int' 1
| |-EnumConstantDecl 0x560691908e70 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691908e50 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x560691908e30 <col:17> 'int' 0
| |-EnumConstantDecl 0x560691908f00 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691908ee0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x560691908ec0 <col:13> 'int' 1
| |-EnumConstantDecl 0x560691908f90 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691908f70 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x560691908f50 <col:16> 'int' 2
| |-EnumConstantDecl 0x560691909020 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691909000 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x560691908fe0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5606919090b0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691909090 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x560691909070 <col:15> 'int' 4
| |-EnumConstantDecl 0x560691909140 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x560691909120 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x560691909100 <col:14> 'int' 5
| |-EnumConstantDecl 0x5606919091d0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5606919091b0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x560691909190 <col:12> 'int' 6
| `-EnumConstantDecl 0x560691909260 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x560691909240 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x560691909220 <col:13> 'int' 7
|-VarDecl 0x5606919092d0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x560691909358 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5606919093e0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x560691909468 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5606919094f0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x560691909578 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x560691909600 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x560691909688 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x560691909710 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x560691909798 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x560691909820 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x560691909920 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56069190ec08 '_nerrors' 'int'
| | `-IntegerLiteral 0x56069190f398 <line:128:13> 'int' 0
| `-CompoundStmt 0x56069190f408 <col:16, line:129:5>
|-CXXDestructorDecl 0x560691909a10 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56069190f418 <col:29, line:132:5>
|-CXXMethodDecl 0x560691909bc8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x560691909b00 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560691909c90 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x560691909d78 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56069190f470 <col:44, line:161:5>
|   `-ReturnStmt 0x56069190f460 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56069190f448 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56069190f428 <col:9> 'ErrorHandler *' lvalue Var 0x56069190ec68 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x560691909eb8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x560691909e28 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560691909f80 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56069190f4d0 <col:43, line:173:5>
|   `-ReturnStmt 0x56069190f4c0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56069190f4a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56069190f488 <col:9> 'ErrorHandler *' lvalue Var 0x56069190ece0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56069190a038 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56069190a0b8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56069190a1c8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56069190a138 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56069190a318 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56069190a288 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56069190a470 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56069190a3d8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56069190a5c8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x56069190a530 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56069190a720 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56069190a688 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56069190a930 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56069190a7d8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56069190a858 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56069190ab08 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56069190a9f0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56069190aa70 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56069190ad28 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56069190abc8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56069190ac48 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56069190af08 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56069190ade8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56069190ae68 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56069190b0e8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56069190afc8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56069190b048 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56069190b270 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56069190b1a8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56069190b440 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56069190b328 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56069190b3a0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56069190f728 <col:57, line:234:5>
|   `-ReturnStmt 0x56069190f718 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56069190f700 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56069190f6a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x56069190f678 <col:9> '<bound member function type>' ->xmessage 0x56069190b270
|         | `-CXXThisExpr 0x56069190f668 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56069190f6e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56069190f6d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56069190f648 <col:18, col:40> 'String' (CXXTemporary 0x56069190f648)
|               `-CallExpr 0x56069190f610 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56069190f5f8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56069190f570 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56069190d438 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56069190f590 <col:31> 'const String' lvalue ParmVar 0x56069190b3a0 'str' 'const String &'
|                 `-DeclRefExpr 0x56069190f5b0 <col:36> 'const String' lvalue ParmVar 0x56069190b328 'anno' 'const String &'
|-CXXMethodDecl 0x56069190b720 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56069190b500 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56069190b580 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56069190b5f8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56069190f9b8 <col:68, line:243:5>
|   `-ReturnStmt 0x56069190f9a8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56069190f990 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56069190f930 <col:9, col:41> 'int'
|         |-MemberExpr 0x56069190f900 <col:9> '<bound member function type>' ->xmessage 0x56069190b440
|         | `-CXXThisExpr 0x56069190f8f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56069190f7c8 <col:18> 'const String' lvalue ParmVar 0x56069190b500 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56069190f978 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56069190f960 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56069190f8d0 <col:24, col:40> 'String' (CXXTemporary 0x56069190f8d0)
|               `-CXXMemberCallExpr 0x56069190f868 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56069190f7f8 <col:24> '<bound member function type>' ->vformat 0x56069190c900
|                 | `-CXXThisExpr 0x56069190f7e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56069190f898 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56069190f828 <col:32> 'const char *' lvalue ParmVar 0x56069190b580 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56069190f8b0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56069190f848 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56069190b5f8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56069190b9c0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56069190b7e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56069190b860 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56069190b8d8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56069190fcf8 <col:23, line:254:5>
|   `-ReturnStmt 0x56069190fce8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56069190fcd0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56069190fc70 <col:9, col:71> 'int'
|         |-MemberExpr 0x56069190fc40 <col:9> '<bound member function type>' ->xmessage 0x56069190b440
|         | `-CXXThisExpr 0x56069190fc30 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56069190fcb8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56069190fca0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56069190fbf0 <col:18, col:65> 'String' (CXXTemporary 0x56069190fbf0)
|         |     `-CallExpr 0x56069190fb88 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56069190fb70 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56069190fa58 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56069190d438 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56069190fa78 <col:31> 'const String' lvalue ParmVar 0x56069190b860 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56069190fbd0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56069190fbb8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56069190fb50 <col:37, col:64> 'String' (CXXTemporary 0x56069190fb50)
|         |             `-CallExpr 0x56069190fb20 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56069190fb08 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56069190fa98 <col:37> 'String (const String &)' lvalue CXXMethod 0x56069190da88 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56069190fab8 <col:56> 'const String' lvalue ParmVar 0x56069190b7e8 'landmark' 'const String &'
|         `-DeclRefExpr 0x56069190fc10 <col:68> 'const String' lvalue ParmVar 0x56069190b8d8 'str' 'const String &'
|-CXXMethodDecl 0x56069190bd40 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56069190ba88 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56069190bb00 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56069190bb80 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56069190bbf8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56069190ffb0 <col:34, line:267:5>
|   `-ReturnStmt 0x56069190ffa0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56069190ff88 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56069190ff20 <col:9, col:51> 'int'
|         |-MemberExpr 0x56069190fef0 <col:9> '<bound member function type>' ->xmessage 0x56069190b9c0
|         | `-CXXThisExpr 0x56069190fee0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56069190fd98 <col:18> 'const String' lvalue ParmVar 0x56069190ba88 'landmark' 'const String &'
|         |-DeclRefExpr 0x56069190fdb8 <col:28> 'const String' lvalue ParmVar 0x56069190bb00 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56069190ff70 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56069190ff58 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56069190fec0 <col:34, col:50> 'String' (CXXTemporary 0x56069190fec0)
|               `-CXXMemberCallExpr 0x56069190fe58 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56069190fde8 <col:34> '<bound member function type>' ->vformat 0x56069190c900
|                 | `-CXXThisExpr 0x56069190fdd8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56069190fe88 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56069190fe18 <col:42> 'const char *' lvalue ParmVar 0x56069190bb80 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56069190fea0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56069190fe38 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56069190bbf8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56069190be50 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x560691910030 <col:25, line:288:5>
|   `-ReturnStmt 0x560691910020 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x560691910008 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56069190ffd8 <col:9> 'const int' lvalue ->_nerrors 0x56069190ec08
|         `-CXXThisExpr 0x56069190ffc8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56069190c060 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56069190bf08 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56069190bf88 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56069190c348 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56069190c128 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56069190c1a8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56069190c220 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56069190c4e0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56069190c418 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56069190c728 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56069190c5a0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56069190c618 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560691910290 <col:58, line:357:5>
|   `-ReturnStmt 0x560691910280 <line:356:2, col:29>
|     `-ExprWithCleanups 0x560691910268 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x560691910238 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x560691910220 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x560691910200 <col:9, col:29> 'String' (CXXTemporary 0x560691910200)
|             `-CallExpr 0x560691910190 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x560691910178 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5606919100f8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56069190c348 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x560691910098 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5606919101c8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5606919100b8 <col:21> 'const char *' lvalue ParmVar 0x56069190c5a0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5606919101e0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5606919100d8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56069190c618 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56069190c900 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56069190c7f0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56069190c868 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56069190ca58 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56069190c9c8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56069190cba0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56069190cb10 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56069190ce40 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56069190cc58 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56069190ccd8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56069190cd50 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56069190cfa0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56069190cf10 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5606919103a8 <col:37, line:441:5>
|   `-IfStmt 0x560691910390 <line:439:2, line:440:8>
|     |-BinaryOperator 0x560691910318 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5606919102e8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5606919102a8 <col:6> 'int' lvalue ParmVar 0x56069190cf10 'level' 'int'
|     | `-ImplicitCastExpr 0x560691910300 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5606919102c8 <col:15> 'ErrorHandler::Level' EnumConstant 0x560691909020 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x560691910378 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x560691910348 <col:8> 'int' lvalue ->_nerrors 0x56069190ec08
|         `-CXXThisExpr 0x560691910338 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56069190d068 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x560691910440 <col:26, line:448:5>
|   `-BinaryOperator 0x560691910420 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5606919103d0 <col:2> 'int' lvalue ->_nerrors 0x56069190ec08
|     | `-CXXThisExpr 0x5606919103c0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x560691910400 <col:13> 'int' 0
|-CXXMethodDecl 0x56069190d230 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56069190d120 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56069190d198 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56069190d438 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56069190d2f0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56069190d368 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56069190d6e8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56069190d4f8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56069190d578 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56069190d5f8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56069190d7a0 <col:59> 0 0
|-CXXMethodDecl 0x56069190d938 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56069190d818 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56069190d898 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56069191aad8 <col:70, line:534:5>
|   |-DeclStmt 0x5606919105b0 <line:528:2, col:20>
|   | |-VarDecl 0x560691910468 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5606919104d0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x560691910508 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x560691910570 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x560691910680 <line:529:2, col:23>
|   | `-VarDecl 0x5606919105e0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x560691910668 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x560691910648 <col:18> 'const char *' lvalue ParmVar 0x56069190d818 'begin' 'const char *'
|   |-DoStmt 0x56069191aa70 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56069191a9a0 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56069191a988 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56069191a968 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x560691910698 <col:6> 'const char *' lvalue Var 0x5606919105e0 'x' 'const char *'
|   | |     `-CallExpr 0x560691910890 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x560691910878 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x560691910830 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56069190f0e0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5606919108f8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5606919108e0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x560691910750 <col:20, col:27> 'String' (CXXTemporary 0x560691910750)
|   | |       |     `-CXXTemporaryObjectExpr 0x560691910718 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x560691910910 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560691910770 <col:30> 'const char *' lvalue Var 0x5606919105e0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56069191a950 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560691910790 <col:33> 'const char *' lvalue ParmVar 0x56069190d898 'end' 'const char *'
|   | |       |-UnaryOperator 0x5606919107d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5606919107b0 <col:39> 'String' lvalue Var 0x560691910468 'name' 'String'
|   | |       |-UnaryOperator 0x560691910808 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5606919107e8 <col:46> 'String' lvalue Var 0x560691910508 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x560691910820 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56069191aa58 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56069191aa40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56069191aa20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56069191a9f0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|   |         `-ImplicitCastExpr 0x56069191a9d8 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56069191a9b8 <col:11> 'String' lvalue Var 0x560691910468 'name' 'String'
|   `-ReturnStmt 0x56069191aac8 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56069191aab0 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56069191aa90 <col:9> 'const char *' lvalue Var 0x5606919105e0 'x' 'const char *'
|-CXXMethodDecl 0x56069190da88 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56069190d9f8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56069191b0e8 <col:55, line:550:5>
|   `-IfStmt 0x56069191b0c0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56069191ad20 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56069191ad08 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56069191acf0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56069191acd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56069191aca0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|     | |       `-DeclRefExpr 0x56069191ab38 <col:6> 'const String' lvalue ParmVar 0x56069190d9f8 'x' 'const String &'
|     | `-BinaryOperator 0x56069191ac80 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56069191ac50 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56069191ac00 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56069191abe8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56069191ab98 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5606915df7c0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56069191ab58 <col:11> 'const String' lvalue ParmVar 0x56069190d9f8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56069191ab78 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56069191ac68 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56069191ac38 <col:19> 'char' 123
|     |-ReturnStmt 0x56069191ad90 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56069191ad60 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56069191ad40 <col:13> 'const String' lvalue ParmVar 0x56069190d9f8 'x' 'const String &'
|     `-IfStmt 0x56069191b098 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56069191ae28 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56069191ae10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56069191adf0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56069191adc0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |       `-DeclRefExpr 0x56069191ada0 <col:11> 'const String' lvalue ParmVar 0x56069190d9f8 'x' 'const String &'
|       |-ReturnStmt 0x56069191afb0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56069191af98 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56069191af68 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56069191af50 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56069191af30 <col:13, col:29> 'String' (CXXTemporary 0x56069191af30)
|       |         `-CallExpr 0x56069191aee0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56069191aec8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56069191ae40 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56069190d230 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56069191af10 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56069191ae60 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56069191ae80 <col:28> 'const String' lvalue ParmVar 0x56069190d9f8 'x' 'const String &'
|       `-ReturnStmt 0x56069191b088 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56069191b070 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56069191b040 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56069191b028 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56069191b008 <col:13, col:20> 'String' (CXXTemporary 0x56069191b008)
|                 `-CXXTemporaryObjectExpr 0x56069191afd0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56069190dc50 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56069190db40 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56069190dbb8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56069190f388 <col:71> 'bool' false
|-CXXRecordDecl 0x56069190dd00 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56069190dff8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56069190df90 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56069190df30 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56069190def0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5606915c2820 'String'
|       | `-CXXRecord 0x5606915c2790 'String'
|       |-BuiltinType 0x560691294370 'int'
|       `-DecayedType 0x560691880320 '__va_list_tag *' sugar
|         |-TypedefType 0x5606918802f0 'va_list' sugar
|         | |-Typedef 0x5606914b3710 'va_list'
|         | `-TypedefType 0x5606914b36c0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5606913eb2e8 '__gnuc_va_list'
|         |   `-TypedefType 0x5606913eb250 '__builtin_va_list' sugar
|         |     |-Typedef 0x5606912d5bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5606912d5b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5606912950c0 '__va_list_tag'
|         |         `-CXXRecord 0x560691295028 '__va_list_tag'
|         `-PointerType 0x5606914b8fb0 '__va_list_tag *'
|           `-RecordType 0x5606912950c0 '__va_list_tag'
|             `-CXXRecord 0x560691295028 '__va_list_tag'
|-EnumDecl 0x56069190e050 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56069190e150 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e6b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e130 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56069190e110 <col:16> 'int' 1
| |-EnumConstantDecl 0x56069190e1e0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e6c8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e1c0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56069190e1a0 <col:21> 'int' 2
| |-EnumConstantDecl 0x56069190e270 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e6e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e250 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56069190e230 <col:22> 'int' 4
| |-EnumConstantDecl 0x56069190e300 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e6f8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e2e0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56069190e2c0 <col:17> 'int' 8
| |-EnumConstantDecl 0x56069190e390 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e710 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e370 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56069190e350 <col:22> 'int' 16
| |-EnumConstantDecl 0x56069190e420 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e728 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e400 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56069190e3e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56069190e4b0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e740 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e490 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56069190e470 <col:17> 'int' 64
| |-EnumConstantDecl 0x56069190e540 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e758 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e520 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56069190e500 <col:14> 'int' 128
| |-EnumConstantDecl 0x56069190e5d0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56069190e770 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56069190e5b0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56069190e590 <col:16> 'int' 256
| `-EnumConstantDecl 0x56069190e660 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56069190e788 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56069190e640 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56069190e620 <col:12> 'int' 1024
|-CXXMethodDecl 0x56069190e998 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56069190e7b0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56069190e850 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56069190eb20 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56069190ea58 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56069190ebc8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56069190ec08 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56069190ec68 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56069190ece0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56069190f0e0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56069190ed58 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56069190edd8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56069190ee58 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56069190eed0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56069190ef48 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56069190efc0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56069190f208 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56069190f208
| `-ParmVarDecl 0x56069190f318 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56069191b448 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56069191b448
  `-ParmVarDecl 0x56069191b558 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691832160 <../elements/etherswitch/spantree.hh:102:3, line:108:3> line:102:10 referenced struct PortInfo definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560691832278 <col:3, col:10> col:10 implicit referenced struct PortInfo
|-FieldDecl 0x560691832318 <line:103:5, col:15> col:15 referenced state 'EtherSpanTree::PortState'
|-FieldDecl 0x560691832378 <line:104:5, col:15> col:15 since 'Timestamp'
|-FieldDecl 0x5606918323d8 <line:105:5, col:10> col:10 referenced needs_tca 'bool'
|-FieldDecl 0x560691832438 <line:106:5, col:19> col:19 msg 'BridgeMessage'
|-CXXConstructorDecl 0x5606918324f0 <line:107:5, col:52> col:5 used PortInfo 'void ()'
| |-CXXCtorInitializer Field 0x560691832378 'since' 'Timestamp'
| | `-CXXConstructExpr 0x56069183e220 <col:5> 'Timestamp' 'void ()'
| |-CXXCtorInitializer Field 0x560691832438 'msg' 'BridgeMessage'
| | `-CXXConstructExpr 0x56069183e5c8 <col:5> 'BridgeMessage' 'void ()'
| `-CompoundStmt 0x56069183e778 <col:16, col:52>
|   |-BinaryOperator 0x56069183e6e8 <col:18, col:26> 'EtherSpanTree::PortState' lvalue '='
|   | |-MemberExpr 0x56069183e638 <col:18> 'EtherSpanTree::PortState' lvalue ->state 0x560691832318
|   | | `-CXXThisExpr 0x56069183e628 <col:18> 'EtherSpanTree::PortInfo *' implicit this
|   | `-DeclRefExpr 0x56069183e668 <col:26> 'EtherSpanTree::PortState' EnumConstant 0x560691832020 'BLOCK' 'EtherSpanTree::PortState'
|   `-BinaryOperator 0x56069183e758 <col:33, col:45> 'bool' lvalue '='
|     |-MemberExpr 0x56069183e718 <col:33> 'bool' lvalue ->needs_tca 0x5606918323d8
|     | `-CXXThisExpr 0x56069183e708 <col:33> 'EtherSpanTree::PortInfo *' implicit this
|     `-CXXBoolLiteralExpr 0x56069183e748 <col:45> 'bool' false
|-CXXConstructorDecl 0x5606917ad170 <line:102:10> col:10 implicit constexpr PortInfo 'void (const EtherSpanTree::PortInfo &)' inline default trivial noexcept-unevaluated 0x5606917ad170
| `-ParmVarDecl 0x5606917ad258 <col:10> col:10 'const EtherSpanTree::PortInfo &'
|-CXXConstructorDecl 0x5606917ad2c8 <col:10> col:10 implicit constexpr PortInfo 'void (EtherSpanTree::PortInfo &&)' inline default trivial noexcept-unevaluated 0x5606917ad2c8
| `-ParmVarDecl 0x5606917ad3d8 <col:10> col:10 'EtherSpanTree::PortInfo &&'
`-CXXDestructorDecl 0x5606917ad478 <col:10> col:10 implicit referenced ~PortInfo 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.EtherSpanTree::PortInfo" = type { i32, %class.Timestamp, i8, %class.BridgeMessage }
  NonVirtualBaseLLVMType:%"struct.EtherSpanTree::PortInfo" = type { i32, %class.Timestamp, i8, %class.BridgeMessage }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56069187f368 prev 0x5606917bca68 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56069187f460 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56069187f4f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56069187f628 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56069187f528 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560691880a50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560691880a30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5606918805c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560691880ae0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560691880aa0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56069187f528 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560691880630 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560691880b60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560691880b20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560691880690 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560691880ba0 <col:54> 'bool' false
| `-CompoundStmt 0x560691880ca8 <col:61, line:38:5>
|   `-BinaryOperator 0x560691880c88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x560691880c20 <col:9> 'const Element *' lvalue ->_context 0x560691880568
|     | `-CXXThisExpr 0x560691880c10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x560691880c70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x560691880c50 <col:20> 'int' 0
|-CXXConstructorDecl 0x56069187f838 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56069187f6e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56069187f760 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560691880a88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560691880a68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x560691880568 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x560691880d00 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x560691880cc0 <col:20> 'const Element *' lvalue ParmVar 0x56069187f6e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5606918805c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560691880d80 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560691880d40 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56069187f760 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560691880630 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560691880e00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560691880dc0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x560691880690 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560691880e40 <col:73> 'bool' false
| `-CompoundStmt 0x560691880eb8 <col:80, line:46:5>
|-CXXMethodDecl 0x56069187f968 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x560691880f30 <col:36, line:51:5>
|   `-ReturnStmt 0x560691880f20 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x560691880f08 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x560691880ed8 <col:16> 'const Element *const' lvalue ->_context 0x560691880568
|         `-CXXThisExpr 0x560691880ec8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56069187fa58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x560691880fb0 <col:32, line:57:5>
|   `-ReturnStmt 0x560691880fa0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x560691880f88 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x560691880f58 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5606918805c8
|         `-CXXThisExpr 0x560691880f48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56069187fb18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56069187fca0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56069187fbd0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56069187fdf0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56069187fd60 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56069187ff40 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56069187feb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560691880148 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56069187fff8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x560691880070 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x560691880478 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x560691880208 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x560691880288 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x560691880350 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x560691880530 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x560691880568 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5606918805c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x560691880630 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x560691880690 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5606918806e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5606918806e0
| `-ParmVarDecl 0x5606918807f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x560691880898 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x560691880898
| `-ParmVarDecl 0x5606918809a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5606917ad6d8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5606918b05c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5606918b0798 prev 0x5606918b05c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5606918b0828 <col:46, col:52> col:46 public
|-TypedefDecl 0x5606918b0850 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b2420 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5606918b23d0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5606918b0d00 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5606918b0c00 'type'
|     `-TemplateSpecializationType 0x5606918b0b90 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5606918b0a70 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5606918b0a50 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5606918b0a30 <col:24> 'unsigned long' 4
|       `-RecordType 0x5606918b0b70 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5606918b0a90 'char_array'
|-TypedefDecl 0x5606918b24d8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5606918b24a0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5606918b2480 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5606918b2420 'type'
|     `-ElaboratedType 0x5606918b23d0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5606918b0d00 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5606918b0c00 'type'
|         `-TemplateSpecializationType 0x5606918b0b90 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5606918b0a70 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5606918b0a50 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5606918b0a30 <col:24> 'unsigned long' 4
|           `-RecordType 0x5606918b0b70 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5606918b0a90 'char_array'
|-CXXMethodDecl 0x5606918b2658 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5606918b2568 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5606918b2748 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5606918b2828 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5606918b2af8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5606918b2a00 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5606918b2d38 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5606918b2bb0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5606918b2c28 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b2f08 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5606918b2df8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5606918b2e70 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b3068 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5606918b3138 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5606918b3388 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5606918b31f8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5606918b3270 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b35e8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5606918b3458 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5606918b34d0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b37a8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5606918b36b8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b3968 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5606918b3870 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b3a20 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5606918b3ad0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5606918b3d08 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5606918b3b80 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5606918b3bf8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5606918b3fa8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5606918b3eb0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5606918b4070 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5606918b40c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5606918b4110 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.3 = type { %struct.char_array.4*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5606918a2518 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5606918a2728 prev 0x5606918a2518 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5606918b0530 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5606918b04e0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5606918b04c0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5606918b0370 'type'
|     `-SubstTemplateTypeParmType 0x5606918b0190 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56069155b660 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56069155b608 'T'
|       `-RecordType 0x5606918afce0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5606918afbf8 'sized_array_memory'
|-FieldDecl 0x5606918b4160 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5606918b41b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5606918b41e8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|   |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5606915932f8 'T'
|   `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b4278 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5606918b4240 'int &'
|   `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b4338 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5606918b4300 'const int &'
|   `-QualType 0x5606918a27c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b43c8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5606918b4390 'int *'
|   `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b4458 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5606918b4420 'const int *'
|   `-QualType 0x5606918a27c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b5040 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5606918b4ff0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5606918b4fd0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5606918b4f60 'type'
|     `-SubstTemplateTypeParmType 0x5606918b4d20 'int' sugar
|       |-TemplateTypeParmType 0x560691566460 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560691566410 'T'
|       `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b50a8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5606918b4300 'const int &'
|   `-QualType 0x5606918a27c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b5100 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b5168 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5606918b4390 'int *'
|   `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|     |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5606915932f8 'T'
|     `-BuiltinType 0x560691294370 'int'
|-TypedefDecl 0x5606918b51d0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5606918b4420 'const int *'
|   `-QualType 0x5606918a27c1 'const int' const
|     `-SubstTemplateTypeParmType 0x5606918a27c0 'int' sugar
|       |-TemplateTypeParmType 0x560691593350 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5606915932f8 'T'
|       `-BuiltinType 0x560691294370 'int'
|-EnumDecl 0x5606918b5228 <line:134:5> col:5
| `-EnumConstantDecl 0x5606918b5320 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5606918b5300 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5606915949d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5606915949b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560691594990 <col:40> 'int' 1
|-CXXConstructorDecl 0x5606918b53a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5606918b55f8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5606918b5460 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5606918b5500 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5606918b58b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5606918b57a0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5606918b5b78 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5606918b5a60 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5606918b5ec0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5606918b5da0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5606918b61d0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5606918b60b0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5606918b64c0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5606918b6308 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5606918b6380 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5606918b65e8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5606918b66c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6720 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6768 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5606918b6818 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6870 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6938 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5606918b69e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6a40 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6a88 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5606918b6b38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6b90 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6bd8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5606918b6c88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6ce0 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6d28 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5606918b6dd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5606918b6e30 <col:30> Inherited
|-CXXMethodDecl 0x5606918b6e58 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5606918b6f08 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5606918b6fb8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5606918b7178 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5606918b7068 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5606918b70e0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5606918b72c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5606918b7238 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918b7478 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5606918b7380 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5606918b7530 <col:20>
| `-OptimizeNoneAttr 0x5606918b7588 <col:30>
|-CXXMethodDecl 0x5606918b76a8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5606918b75b0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5606918b7760 <col:20>
| `-OptimizeNoneAttr 0x5606918b77b8 <col:30>
|-CXXMethodDecl 0x5606918b8df0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5606918b77e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918b8f38 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5606918b8ea8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918b9068 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5606918b9198 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5606918b9268 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5606918b9338 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5606918b9478 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5606918b93e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918b95c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5606918b9530 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5606918b9708 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5606918b9678 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5606918b97c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5606918b98c0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5606918b9830 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5606918b9978 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5606918b9a38 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5606918b9b38 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5606918b9cb8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5606918b9bf8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5606918ba478 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5606918b9d70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5606918ba3d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5606918ba2d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5606918ba558 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5606918ba6a8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5606918ba618 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5606918ba760 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5606918ba9a8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5606918ba820 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5606918ba898 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5606918bab68 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5606918baa78 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5606918badb8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5606918bac30 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5606918baca8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5606918bae78 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5606918bb0d8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5606918bafe0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5606918bb1a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  NonVirtualBaseLLVMType:%class.Vector.2 = type { %class.vector_memory.3 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918a0688 prev 0x560691887618 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606918a0780 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5606918a0870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5606918cef00 <col:16, line:828:9>
|-CXXDestructorDecl 0x5606918a0960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5606918cef10 <col:25, line:830:9>
|-CXXMethodDecl 0x5606918a0a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5606918a0b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5606918a0bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5606918a0bb8
| `-ParmVarDecl 0x5606918a0cc8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5606918a1488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5606918a1488
  `-ParmVarDecl 0x5606918a1598 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691887428 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x560691887588 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x560691887618 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5606918876d0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5606918877d8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x560691887708 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5606918bc768 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5606918bc748 <col:31> 'int' 0
|-CXXConstructorDecl 0x560691887af8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x560691887970 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5606918879e8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5606918bc7a0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5606918bc780 <col:59> 'int' 0
|-CXXConstructorDecl 0x560691887cd0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560691887bc0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x560691887c38 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5606918bc7d8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5606918bc7b8 <col:55> 'int' 0
|-CXXConstructorDecl 0x560691888088 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560691887e70 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x560691887ee8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x560691887f60 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5606918bc810 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5606918bc7f0 <col:31> 'int' 0
|-CXXConstructorDecl 0x560691888248 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x560691888188 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x560691888340 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x560691888528 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x560691888430 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x560691888618 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5606918bcbc0 <col:24, line:291:5>
|   `-ReturnStmt 0x5606918bcbb0 <line:290:9, col:79>
|     `-BinaryOperator 0x5606918bcb90 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5606918bca68 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5606918bc9c0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5606918bc9a0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5606918bc898 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5606918bc880 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5606918bc868 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5606918bc838 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5606918a24b0
|       | |   |       `-CXXThisExpr 0x5606918bc828 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5606918bc988 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5606918bc970 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5606918bc938 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5606918bc908 <col:28, col:35> '<bound member function type>' ->size 0x560691871470
|       | |           `-ImplicitCastExpr 0x5606918bc958 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5606918bc8f0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5606918bc8c0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5606918a24b0
|       | |                 `-CXXThisExpr 0x5606918bc8b0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5606918bca50 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5606918bca38 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5606918bca20 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5606918bc9f0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5606918bb2f0
|       |         `-CXXThisExpr 0x5606918bc9e0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5606918bcb70 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5606918bcb58 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5606918bcb40 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5606918bcb00 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5606918bcae8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5606918bca98 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5606918bb3a0
|         |     |   `-CXXThisExpr 0x5606918bca88 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5606918bcac8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5606918bcb20 <col:79> 'int' 0
|-CXXMethodDecl 0x5606918886d8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5606918bcd98 <col:32, line:296:5>
|   `-ReturnStmt 0x5606918bcd88 <line:295:9, col:49>
|     `-BinaryOperator 0x5606918bcd68 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5606918bcc48 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5606918bcc30 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5606918bcc18 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5606918bcbe8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5606918bb2f0
|       |       `-CXXThisExpr 0x5606918bcbd8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5606918bcd48 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5606918bcd30 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5606918bcd18 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5606918bccd8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5606918bccc0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5606918bcc70 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5606918bb3a0
|         |     |   `-CXXThisExpr 0x5606918bcc60 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5606918bcca0 <col:43> 'int' 0
|         `-IntegerLiteral 0x5606918bccf8 <col:49> 'int' 0
|-CXXMethodDecl 0x5606918887c8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5606918bcfa8 <col:19, line:306:5>
|   |-IfStmt 0x5606918bcec8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5606918bce08 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5606918bcdf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5606918bcdc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5606918a24b0
|   | |     `-CXXThisExpr 0x5606918bcdb0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5606918bcea8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5606918bce78 <col:13, col:20> '<bound member function type>' ->clear 0x560691873e38
|   |     `-ImplicitCastExpr 0x5606918bce60 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5606918bce30 <col:13> 'Vector<String> *' lvalue ->_conf 0x5606918a24b0
|   |         `-CXXThisExpr 0x5606918bce20 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5606918bcf50 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5606918bcf20 <col:9, col:16> '<bound member function type>' .clear 0x5606918bae78
|   |   `-MemberExpr 0x5606918bcef0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5606918bb290
|   |     `-CXXThisExpr 0x5606918bcee0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5606918bcf98 <line:305:9, col:17>
|     `-UnaryOperator 0x5606918bcf80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918bcf70 <col:17> 'Args *' this
|-CXXMethodDecl 0x560691888a48 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x560691888950 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x560691888bc8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x560691888b00 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x560691888f48 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x560691888c70 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x560691888ea8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x560691888d18 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x560691888d90 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5606918bd2c8 <col:67, line:327:5>
|     |-WhileStmt 0x5606918bd278 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5606918bd090 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5606918bd010 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5606917b4f38 0x5606915fe518 0x5606915fe1f0 0x5606915ef9d0 0x5606915ef680 0x5606915eef70 0x5606915c18e0 0x56069154dda0
|     | | |-DeclRefExpr 0x5606918bcfd0 <col:16> 'Iter' lvalue ParmVar 0x560691888d18 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5606918bcff0 <col:25> 'Iter' lvalue ParmVar 0x560691888d90 'end' 'Iter'
|     | `-CompoundStmt 0x5606918bd258 <col:30, line:325:9>
|     |   |-CallExpr 0x5606918bd1f8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5606918bd0d8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5606918bd1c8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5606918bd158 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|     |   |   `-DeclRefExpr 0x5606918bd138 <col:24> 'Iter' lvalue ParmVar 0x560691888d18 'begin' 'Iter'
|     |   `-UnaryOperator 0x5606918bd240 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5606918bd220 <col:15> 'Iter' lvalue ParmVar 0x560691888d18 'begin' 'Iter'
|     `-ReturnStmt 0x5606918bd2b8 <line:326:9, col:17>
|       `-UnaryOperator 0x5606918bd2a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918bd290 <col:17> 'Args *' this
|-CXXMethodDecl 0x560691889050 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x560691888fc0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x560691889198 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x560691889108 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x560691889260 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5606918bd3a8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5606918bd348 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5606918bd2f8 <col:9> '<bound member function type>' ->reset_from 0x5606918bb718
|   | | `-CXXThisExpr 0x5606918bd2e8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5606918bd328 <col:20> 'int' 0
|   `-ReturnStmt 0x5606918bd398 <line:352:9, col:17>
|     `-UnaryOperator 0x5606918bd380 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918bd370 <col:17> 'Args *' this
|-VarDecl 0x560691889318 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x560691889380 <col:38> 'int' 1
|-VarDecl 0x560691889410 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x560691889478 <col:39> 'int' 2
|-VarDecl 0x560691889508 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x560691889570 <col:39> 'int' 4
|-VarDecl 0x560691889600 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x560691889668 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5606918899e8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5606918896e0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560691889948 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560691889790 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691889838 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5606918bd500 <col:43, line:371:5>
|     `-ReturnStmt 0x5606918bd4f0 <line:370:9, col:34>
|       `-CallExpr 0x5606918bd4b8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bd3d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bd458 <col:21> 'const char *' lvalue ParmVar 0x560691889790 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918bd478 <col:30> 'int' 0
|         `-DeclRefExpr 0x5606918bd498 <col:33> 'T' lvalue ParmVar 0x560691889838 'x' 'T &'
|-FunctionTemplateDecl 0x560691889d18 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x560691889a50 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560691889c78 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560691889b00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691889ba8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5606918bd650 <col:45, line:375:5>
|     `-ReturnStmt 0x5606918bd640 <line:374:9, col:42>
|       `-CallExpr 0x5606918bd608 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bd528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bd5a8 <col:21> 'const char *' lvalue ParmVar 0x560691889b00 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bd5c8 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int'
|         `-DeclRefExpr 0x5606918bd5e8 <col:41> 'T' lvalue ParmVar 0x560691889ba8 'x' 'T &'
|-FunctionTemplateDecl 0x56069188a048 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x560691889d80 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560691889fa8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560691889e30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691889ed8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5606918bd7a0 <col:45, line:379:5>
|     `-ReturnStmt 0x5606918bd790 <line:378:9, col:43>
|       `-CallExpr 0x5606918bd758 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bd678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bd6f8 <col:21> 'const char *' lvalue ParmVar 0x560691889e30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bd718 <col:30> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         `-DeclRefExpr 0x5606918bd738 <col:42> 'T' lvalue ParmVar 0x560691889ed8 'x' 'T &'
|-FunctionTemplateDecl 0x56069188a378 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56069188a0b0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069188a2d8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56069188a160 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188a208 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5606918bd9a0 <col:46, line:383:5>
|     `-ReturnStmt 0x5606918bd990 <line:382:9, col:55>
|       `-CallExpr 0x5606918bd958 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bd7c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bd848 <col:21> 'const char *' lvalue ParmVar 0x56069188a160 'keyword' 'const char *'
|         |-BinaryOperator 0x5606918bd918 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5606918bd8c8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5606918bd8a8 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5606918bd900 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5606918bd8e0 <col:42> 'const int' lvalue Var 0x560691889410 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5606918bd938 <col:54> 'T' lvalue ParmVar 0x56069188a208 'x' 'T &'
|-FunctionTemplateDecl 0x56069188a778 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56069188a3e0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069188a6d8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56069188a490 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188a510 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56069188a5b8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5606918bdae0 <col:54, line:388:5>
|     |-CallExpr 0x5606918bda68 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918bd9b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5606918bd9f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5606918bda08 <col:30> 'const char *' lvalue ParmVar 0x56069188a490 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918bda28 <col:39> 'int' lvalue ParmVar 0x56069188a510 'flags' 'int'
|     | `-DeclRefExpr 0x5606918bda48 <col:46> 'T' lvalue ParmVar 0x56069188a5b8 'x' 'T &'
|     `-ReturnStmt 0x5606918bdad0 <line:387:9, col:17>
|       `-UnaryOperator 0x5606918bdab8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918bdaa8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56069188ac28 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56069188a7e8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069188a868 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56069188ab88 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56069188a928 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188a9c8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56069188aa68 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918bdc50 <col:74, line:403:5>
|     `-ReturnStmt 0x5606918bdc40 <line:402:9, col:56>
|       `-CallExpr 0x5606918bdc00 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bdb10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bdb80 <col:28> 'const char *' lvalue ParmVar 0x56069188a928 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918bdba0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5606918bdbc0 <col:40> 'T' lvalue ParmVar 0x56069188a9c8 'x' 'T &'
|         `-DeclRefExpr 0x5606918bdbe0 <col:43> 'const V' lvalue ParmVar 0x56069188aa68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56069188e228 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56069188ac98 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069188ad18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56069188e188 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56069188df68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188e008 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56069188e0a8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918bddb8 <col:76, line:407:5>
|     `-ReturnStmt 0x5606918bdda8 <line:406:9, col:65>
|       `-CallExpr 0x5606918bdd68 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bdc78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bdce8 <col:28> 'const char *' lvalue ParmVar 0x56069188df68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bdd08 <col:37> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         |-DeclRefExpr 0x5606918bdd28 <col:49> 'T' lvalue ParmVar 0x56069188e008 'x' 'T &'
|         `-DeclRefExpr 0x5606918bdd48 <col:52> 'const V' lvalue ParmVar 0x56069188e0a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56069188e778 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56069188e298 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069188e318 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56069188e6d8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56069188e3d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188e458 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56069188e4f8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56069188e598 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918bdf20 <col:85, line:412:5>
|     |-CallExpr 0x5606918bdea0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918bddd0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5606918bde10 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5606918bde20 <col:37> 'const char *' lvalue ParmVar 0x56069188e3d8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918bde40 <col:46> 'int' lvalue ParmVar 0x56069188e458 'flags' 'int'
|     | |-DeclRefExpr 0x5606918bde60 <col:53> 'T' lvalue ParmVar 0x56069188e4f8 'x' 'T &'
|     | `-DeclRefExpr 0x5606918bde80 <col:56> 'const V' lvalue ParmVar 0x56069188e598 'default_value' 'const V &'
|     `-ReturnStmt 0x5606918bdf10 <line:411:9, col:17>
|       `-UnaryOperator 0x5606918bdef8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918bdee8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56069188ec08 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56069188e7f0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188e868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069188eb68 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56069188e928 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188e9a0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56069188ea48 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5606918be0a0 <col:53, line:425:5>
|     `-ReturnStmt 0x5606918be090 <line:424:9, col:42>
|       `-CallExpr 0x5606918be050 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bdf50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bdfd0 <col:21> 'const char *' lvalue ParmVar 0x56069188e928 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918bdff0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5606918be010 <col:33> 'P' lvalue ParmVar 0x56069188e9a0 'parser' 'P'
|         `-DeclRefExpr 0x5606918be030 <col:41> 'T' lvalue ParmVar 0x56069188ea48 'x' 'T &'
|-FunctionTemplateDecl 0x56069188f058 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56069188ec78 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188ecf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069188efb8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56069188edb8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188ee30 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56069188eed8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5606918be218 <col:55, line:429:5>
|     `-ReturnStmt 0x5606918be208 <line:428:9, col:50>
|       `-CallExpr 0x5606918be1c8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918be0c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918be148 <col:21> 'const char *' lvalue ParmVar 0x56069188edb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918be168 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int'
|         |-DeclRefExpr 0x5606918be188 <col:41> 'P' lvalue ParmVar 0x56069188ee30 'parser' 'P'
|         `-DeclRefExpr 0x5606918be1a8 <col:49> 'T' lvalue ParmVar 0x56069188eed8 'x' 'T &'
|-FunctionTemplateDecl 0x56069188f4a8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56069188f0c8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188f148 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069188f408 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56069188f208 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188f280 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56069188f328 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5606918be390 <col:55, line:433:5>
|     `-ReturnStmt 0x5606918be380 <line:432:9, col:51>
|       `-CallExpr 0x5606918be340 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918be240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918be2c0 <col:21> 'const char *' lvalue ParmVar 0x56069188f208 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918be2e0 <col:30> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         |-DeclRefExpr 0x5606918be300 <col:42> 'P' lvalue ParmVar 0x56069188f280 'parser' 'P'
|         `-DeclRefExpr 0x5606918be320 <col:50> 'T' lvalue ParmVar 0x56069188f328 'x' 'T &'
|-FunctionTemplateDecl 0x56069188f8f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56069188f518 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188f598 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x56069188f858 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x56069188f658 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56069188f6d0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x56069188f778 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x5606918be5b8 <col:56, line:437:5>
| |   `-ReturnStmt 0x5606918be5a8 <line:436:9, col:63>
| |     `-CallExpr 0x5606918be568 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5606918be3b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5606918be438 <col:21> 'const char *' lvalue ParmVar 0x56069188f658 'keyword' 'const char *'
| |       |-BinaryOperator 0x5606918be508 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5606918be4b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5606918be498 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5606918be4f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5606918be4d0 <col:42> 'const int' lvalue Var 0x560691889410 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x5606918be528 <col:54> 'P' lvalue ParmVar 0x56069188f6d0 'parser' 'P'
| |       `-DeclRefExpr 0x5606918be548 <col:62> 'T' lvalue ParmVar 0x56069188f778 'x' 'T &'
| |-CXXMethodDecl 0x5606917ae1a8 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, EtherAddressArg, unsigned char &[6])'
| | |-TemplateArgument type 'EtherAddressArg'
| | |-TemplateArgument type 'unsigned char [6]'
| | |-ParmVarDecl 0x5606917adee8 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x5606917adf88 <col:40, col:42> col:42 parser 'EtherAddressArg':'EtherAddressArg'
| | `-ParmVarDecl 0x5606917ae088 <col:50, col:53> col:53 x 'unsigned char &[6]'
| |-CXXMethodDecl 0x5606917aedb8 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, ElementCastArg, Suppressor *&)'
| | |-TemplateArgument type 'ElementCastArg'
| | |-TemplateArgument type 'Suppressor *'
| | |-ParmVarDecl 0x5606917aeaf8 <col:19, col:31> col:31 keyword 'const char *'
| | |-ParmVarDecl 0x5606917aeb98 <col:40, col:42> col:42 parser 'ElementCastArg':'ElementCastArg'
| | `-ParmVarDecl 0x5606917aec98 <col:50, col:53> col:53 x 'Suppressor *&'
| `-CXXMethodDecl 0x5606917af808 <col:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, ElementCastArg, EtherSwitch *&)'
|   |-TemplateArgument type 'ElementCastArg'
|   |-TemplateArgument type 'EtherSwitch *'
|   |-ParmVarDecl 0x5606917af568 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x5606917af5e0 <col:40, col:42> col:42 parser 'ElementCastArg':'ElementCastArg'
|   `-ParmVarDecl 0x5606917af6e8 <col:50, col:53> col:53 x 'EtherSwitch *&'
|-FunctionTemplateDecl 0x56069188fe28 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56069188f968 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188f9e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069188fd88 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56069188faa8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069188fb28 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56069188fba0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56069188fc48 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5606918be720 <col:64, line:442:5>
|     |-CallExpr 0x5606918be6a0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918be5d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5606918be610 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5606918be620 <col:30> 'const char *' lvalue ParmVar 0x56069188faa8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918be640 <col:39> 'int' lvalue ParmVar 0x56069188fb28 'flags' 'int'
|     | |-DeclRefExpr 0x5606918be660 <col:46> 'P' lvalue ParmVar 0x56069188fba0 'parser' 'P'
|     | `-DeclRefExpr 0x5606918be680 <col:54> 'T' lvalue ParmVar 0x56069188fc48 'x' 'T &'
|     `-ReturnStmt 0x5606918be710 <line:441:9, col:17>
|       `-UnaryOperator 0x5606918be6f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918be6e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560691890428 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56069188fea0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069188ff18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56069188ff98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560691890388 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560691890060 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918900d8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560691890178 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x560691890248 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918be8b8 <col:84, line:458:5>
|     `-ReturnStmt 0x5606918be8a8 <line:457:9, col:64>
|       `-CallExpr 0x5606918be860 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918be750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918be7c0 <col:28> 'const char *' lvalue ParmVar 0x560691890060 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918be7e0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5606918be800 <col:40> 'P' lvalue ParmVar 0x5606918900d8 'parser' 'P'
|         |-DeclRefExpr 0x5606918be820 <col:48> 'T' lvalue ParmVar 0x560691890178 'x' 'T &'
|         `-DeclRefExpr 0x5606918be840 <col:51> 'const V' lvalue ParmVar 0x560691890248 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5606918909a8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5606918904a0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691890518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560691890598 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560691890908 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560691890660 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918906d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560691890778 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x560691890818 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918bea48 <col:86, line:462:5>
|     `-ReturnStmt 0x5606918bea38 <line:461:9, col:73>
|       `-CallExpr 0x5606918be9f0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918be8e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918be950 <col:28> 'const char *' lvalue ParmVar 0x560691890660 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918be970 <col:37> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         |-DeclRefExpr 0x5606918be990 <col:49> 'P' lvalue ParmVar 0x5606918906d8 'parser' 'P'
|         |-DeclRefExpr 0x5606918be9b0 <col:57> 'T' lvalue ParmVar 0x560691890778 'x' 'T &'
|         `-DeclRefExpr 0x5606918be9d0 <col:60> 'const V' lvalue ParmVar 0x560691890818 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560691891008 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x560691890a20 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691890a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560691890b18 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560691890f68 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560691890be0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691890c60 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560691890cd8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x560691890d78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x560691890e18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5606918bebd8 <col:95, line:467:5>
|     |-CallExpr 0x5606918beb50 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918bea60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5606918beaa0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5606918beab0 <col:37> 'const char *' lvalue ParmVar 0x560691890be0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918bead0 <col:46> 'int' lvalue ParmVar 0x560691890c60 'flags' 'int'
|     | |-DeclRefExpr 0x5606918beaf0 <col:53> 'P' lvalue ParmVar 0x560691890cd8 'parser' 'P'
|     | |-DeclRefExpr 0x5606918beb10 <col:61> 'T' lvalue ParmVar 0x560691890d78 'x' 'T &'
|     | `-DeclRefExpr 0x5606918beb30 <col:64> 'const V' lvalue ParmVar 0x560691890e18 'default_value' 'const V &'
|     `-ReturnStmt 0x5606918bebc8 <line:466:9, col:17>
|       `-UnaryOperator 0x5606918bebb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918beba0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5606918915e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x560691891088 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691891108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560691891188 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560691891548 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560691891250 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918912c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560691891368 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560691891408 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5606918bed80 <col:63, line:481:5>
|     `-ReturnStmt 0x5606918bed70 <line:480:9, col:47>
|       `-CallExpr 0x5606918bed28 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bec08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bec88 <col:21> 'const char *' lvalue ParmVar 0x560691891250 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918beca8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5606918becc8 <col:33> 'P' lvalue ParmVar 0x5606918912c8 'parser' 'P'
|         |-DeclRefExpr 0x5606918bece8 <col:41> 'T1' lvalue ParmVar 0x560691891368 'x1' 'T1 &'
|         `-DeclRefExpr 0x5606918bed08 <col:45> 'T2' lvalue ParmVar 0x560691891408 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560691891b68 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x560691891660 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5606918916d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560691891758 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560691891ac8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560691891820 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691891898 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560691891938 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5606918919d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5606918bef20 <col:65, line:485:5>
|     `-ReturnStmt 0x5606918bef10 <line:484:9, col:55>
|       `-CallExpr 0x5606918beec8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918beda8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bee28 <col:21> 'const char *' lvalue ParmVar 0x560691891820 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bee48 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int'
|         |-DeclRefExpr 0x5606918bee68 <col:41> 'P' lvalue ParmVar 0x560691891898 'parser' 'P'
|         |-DeclRefExpr 0x5606918bee88 <col:49> 'T1' lvalue ParmVar 0x560691891938 'x1' 'T1 &'
|         `-DeclRefExpr 0x5606918beea8 <col:53> 'T2' lvalue ParmVar 0x5606918919d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5606918920e8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x560691891be0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691891c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560691891cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560691892048 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560691891da0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691891e18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560691891eb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560691891f58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5606918bf0c0 <col:65, line:489:5>
|     `-ReturnStmt 0x5606918bf0b0 <line:488:9, col:56>
|       `-CallExpr 0x5606918bf068 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bef48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918befc8 <col:21> 'const char *' lvalue ParmVar 0x560691891da0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918befe8 <col:30> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         |-DeclRefExpr 0x5606918bf008 <col:42> 'P' lvalue ParmVar 0x560691891e18 'parser' 'P'
|         |-DeclRefExpr 0x5606918bf028 <col:50> 'T1' lvalue ParmVar 0x560691891eb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5606918bf048 <col:54> 'T2' lvalue ParmVar 0x560691891f58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560691892668 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x560691892160 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5606918921d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560691892258 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5606918925c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560691892320 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691892398 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x560691892438 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5606918924d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5606918bf310 <col:66, line:493:5>
|     `-ReturnStmt 0x5606918bf300 <line:492:9, col:68>
|       `-CallExpr 0x5606918bf2b8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bf0e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bf168 <col:21> 'const char *' lvalue ParmVar 0x560691892320 'keyword' 'const char *'
|         |-BinaryOperator 0x5606918bf238 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5606918bf1e8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5606918bf1c8 <col:30> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5606918bf220 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5606918bf200 <col:42> 'const int' lvalue Var 0x560691889410 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5606918bf258 <col:54> 'P' lvalue ParmVar 0x560691892398 'parser' 'P'
|         |-DeclRefExpr 0x5606918bf278 <col:62> 'T1' lvalue ParmVar 0x560691892438 'x1' 'T1 &'
|         `-DeclRefExpr 0x5606918bf298 <col:66> 'T2' lvalue ParmVar 0x5606918924d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560691892cc8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5606918926e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691892758 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5606918927d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560691892c28 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5606918928a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691892920 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560691892998 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560691892a38 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560691892ad8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5606918bf4a0 <col:74, line:498:5>
|     |-CallExpr 0x5606918bf418 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918bf328 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5606918bf368 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5606918bf378 <col:30> 'const char *' lvalue ParmVar 0x5606918928a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918bf398 <col:39> 'int' lvalue ParmVar 0x560691892920 'flags' 'int'
|     | |-DeclRefExpr 0x5606918bf3b8 <col:46> 'P' lvalue ParmVar 0x560691892998 'parser' 'P'
|     | |-DeclRefExpr 0x5606918bf3d8 <col:54> 'T1' lvalue ParmVar 0x560691892a38 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5606918bf3f8 <col:58> 'T2' lvalue ParmVar 0x560691892ad8 'x2' 'T2 &'
|     `-ReturnStmt 0x5606918bf490 <line:497:9, col:17>
|       `-UnaryOperator 0x5606918bf478 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918bf468 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560691893028 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x560691892d48 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691892f88 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560691892e00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691892e78 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5606918bf5e8 <col:52, line:509:5>
|     `-ReturnStmt 0x5606918bf5d8 <line:508:9, col:44>
|       `-CallExpr 0x5606918bf5a0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bf4d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bf540 <col:26> 'const char *' lvalue ParmVar 0x560691892e00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918bf560 <col:35> 'int' 0
|         `-DeclRefExpr 0x5606918bf580 <col:38> 'P' lvalue ParmVar 0x560691892e78 'parser' 'P'
|-FunctionTemplateDecl 0x560691893328 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x560691893090 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691893288 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560691893140 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918931b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5606918bf728 <col:54, line:513:5>
|     `-ReturnStmt 0x5606918bf718 <line:512:9, col:52>
|       `-CallExpr 0x5606918bf6e0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bf610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bf680 <col:26> 'const char *' lvalue ParmVar 0x560691893140 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bf6a0 <col:35> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int'
|         `-DeclRefExpr 0x5606918bf6c0 <col:46> 'P' lvalue ParmVar 0x5606918931b8 'parser' 'P'
|-FunctionTemplateDecl 0x560691893628 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x560691893390 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691893588 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560691893440 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918934b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5606918bf868 <col:54, line:517:5>
|     `-ReturnStmt 0x5606918bf858 <line:516:9, col:53>
|       `-CallExpr 0x5606918bf820 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bf750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bf7c0 <col:26> 'const char *' lvalue ParmVar 0x560691893440 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bf7e0 <col:35> 'const int' lvalue Var 0x560691889410 'positional' 'const int'
|         `-DeclRefExpr 0x5606918bf800 <col:47> 'P' lvalue ParmVar 0x5606918934b8 'parser' 'P'
|-FunctionTemplateDecl 0x560691893928 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x560691893690 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691893888 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560691893740 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918937b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5606918bfa58 <col:55, line:521:5>
|     `-ReturnStmt 0x5606918bfa48 <line:520:9, col:65>
|       `-CallExpr 0x5606918bfa10 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bf890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bf900 <col:26> 'const char *' lvalue ParmVar 0x560691893740 'keyword' 'const char *'
|         |-BinaryOperator 0x5606918bf9d0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5606918bf980 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5606918bf960 <col:35> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5606918bf9b8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5606918bf998 <col:47> 'const int' lvalue Var 0x560691889410 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5606918bf9f0 <col:59> 'P' lvalue ParmVar 0x5606918937b8 'parser' 'P'
|-FunctionTemplateDecl 0x560691893cf8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x560691893990 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691893c58 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560691893a40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691893ac0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x560691893b38 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5606918bfb98 <col:63, line:526:5>
|     |-CallExpr 0x5606918bfb20 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918bfa70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5606918bfab0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5606918bfac0 <col:35> 'const char *' lvalue ParmVar 0x560691893a40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5606918bfae0 <col:44> 'int' lvalue ParmVar 0x560691893ac0 'flags' 'int'
|     | `-DeclRefExpr 0x5606918bfb00 <col:51> 'P' lvalue ParmVar 0x560691893b38 'parser' 'P'
|     `-ReturnStmt 0x5606918bfb88 <line:525:9, col:17>
|       `-UnaryOperator 0x5606918bfb70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918bfb60 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560691894148 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x560691893d68 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691893de8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5606918940a8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560691893ea8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691893f20 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x560691893fc8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5606918bfcf0 <col:58, line:541:5>
|     `-ReturnStmt 0x5606918bfce0 <line:540:9, col:39>
|       `-CallExpr 0x5606918bfca8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bfbc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bfc48 <col:21> 'const char *' lvalue ParmVar 0x560691893ea8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bfc68 <col:30> 'P' lvalue ParmVar 0x560691893f20 'parser' 'P'
|         `-DeclRefExpr 0x5606918bfc88 <col:38> 'T' lvalue ParmVar 0x560691893fc8 'x' 'T &'
|-FunctionTemplateDecl 0x560691894598 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5606918941b8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691894238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5606918944f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5606918942f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691894370 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560691894418 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5606918bfe28 <col:60, line:545:5>
|     `-ReturnStmt 0x5606918bfe18 <line:544:9, col:41>
|       `-CallExpr 0x5606918bfde0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bfd18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bfd80 <col:23> 'const char *' lvalue ParmVar 0x5606918942f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bfda0 <col:32> 'P' lvalue ParmVar 0x560691894370 'parser' 'P'
|         `-DeclRefExpr 0x5606918bfdc0 <col:40> 'T' lvalue ParmVar 0x560691894418 'x' 'T &'
|-FunctionTemplateDecl 0x5606918949e8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x560691894608 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691894688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560691894948 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560691894748 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918947c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560691894868 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5606918bff60 <col:60, line:549:5>
|     `-ReturnStmt 0x5606918bff50 <line:548:9, col:41>
|       `-CallExpr 0x5606918bff18 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bfe50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bfeb8 <col:23> 'const char *' lvalue ParmVar 0x560691894748 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918bfed8 <col:32> 'P' lvalue ParmVar 0x5606918947c0 'parser' 'P'
|         `-DeclRefExpr 0x5606918bfef8 <col:40> 'T' lvalue ParmVar 0x560691894868 'x' 'T &'
|-FunctionTemplateDecl 0x560691894e38 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x560691894a58 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691894ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560691894d98 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560691894b98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691894c10 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x560691894cb8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5606918c0098 <col:61, line:553:5>
|     `-ReturnStmt 0x5606918c0088 <line:552:9, col:42>
|       `-CallExpr 0x5606918c0050 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918bff88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918bfff0 <col:24> 'const char *' lvalue ParmVar 0x560691894b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918c0010 <col:33> 'P' lvalue ParmVar 0x560691894c10 'parser' 'P'
|         `-DeclRefExpr 0x5606918c0030 <col:41> 'T' lvalue ParmVar 0x560691894cb8 'x' 'T &'
|-FunctionTemplateDecl 0x560691895318 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x560691894ea8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691894f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560691895278 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560691894fe8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691895068 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5606918950e0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x560691895188 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5606918c0210 <col:69, line:557:5>
|     `-ReturnStmt 0x5606918c0200 <line:556:9, col:46>
|       `-CallExpr 0x5606918c01c0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c00c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c0140 <col:21> 'const char *' lvalue ParmVar 0x560691894fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918c0160 <col:30> 'int' lvalue ParmVar 0x560691895068 'flags' 'int'
|         |-DeclRefExpr 0x5606918c0180 <col:37> 'P' lvalue ParmVar 0x5606918950e0 'parser' 'P'
|         `-DeclRefExpr 0x5606918c01a0 <col:45> 'T' lvalue ParmVar 0x560691895188 'x' 'T &'
|-FunctionTemplateDecl 0x560691895628 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x560691895390 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691895588 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560691895440 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918954b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5606918c0350 <col:56, line:571:5>
|     `-ReturnStmt 0x5606918c0340 <line:570:9, col:48>
|       `-CallExpr 0x5606918c0308 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c0238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c02a8 <col:30> 'const char *' lvalue ParmVar 0x560691895440 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918c02c8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5606918c02e8 <col:42> 'P' lvalue ParmVar 0x5606918954b8 'parser' 'P'
|-FunctionTemplateDecl 0x5606918959b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x560691895690 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560691895918 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560691895740 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918957c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560691895838 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5606918c0520 <col:67, line:576:5>
|     |-CallExpr 0x5606918c04a8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918c0368 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5606918c03a8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5606918c03b8 <col:39> 'const char *' lvalue ParmVar 0x560691895740 'keyword' 'const char *'
|     | |-BinaryOperator 0x5606918c0468 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5606918c0418 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5606918c03d8 <col:48> 'int' lvalue ParmVar 0x5606918957c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5606918c0450 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5606918c0430 <col:56> 'const int' lvalue Var 0x560691889600 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5606918c0488 <col:68> 'P' lvalue ParmVar 0x560691895838 'parser' 'P'
|     `-ReturnStmt 0x5606918c0510 <line:575:9, col:17>
|       `-UnaryOperator 0x5606918c04f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918c04e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560691895e08 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x560691895a28 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691895aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560691895d68 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560691895b68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560691895be0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560691895c88 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5606918c0690 <col:62, line:592:5>
|     `-ReturnStmt 0x5606918c0680 <line:591:9, col:51>
|       `-CallExpr 0x5606918c0640 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c0550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c05c0 <col:30> 'const char *' lvalue ParmVar 0x560691895b68 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918c05e0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5606918c0600 <col:42> 'P' lvalue ParmVar 0x560691895be0 'parser' 'P'
|         `-DeclRefExpr 0x5606918c0620 <col:50> 'T' lvalue ParmVar 0x560691895c88 'x' 'T &'
|-FunctionTemplateDecl 0x56069189af58 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x560691895e78 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560691895ef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189aeb8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56069189ac28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189aca8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56069189ad20 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56069189adc8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5606918c0888 <col:73, line:597:5>
|     |-CallExpr 0x5606918c0808 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918c06a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5606918c06e8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5606918c06f8 <col:39> 'const char *' lvalue ParmVar 0x56069189ac28 'keyword' 'const char *'
|     | |-BinaryOperator 0x5606918c07a8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5606918c0758 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5606918c0718 <col:48> 'int' lvalue ParmVar 0x56069189aca8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5606918c0790 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5606918c0770 <col:56> 'const int' lvalue Var 0x560691889600 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5606918c07c8 <col:68> 'P' lvalue ParmVar 0x56069189ad20 'parser' 'P'
|     | `-DeclRefExpr 0x5606918c07e8 <col:76> 'T' lvalue ParmVar 0x56069189adc8 'x' 'T &'
|     `-ReturnStmt 0x5606918c0878 <line:596:9, col:17>
|       `-UnaryOperator 0x5606918c0860 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918c0850 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56069189b508 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56069189afd0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189b048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189b468 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56069189b108 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189b180 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56069189b340 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5606918c09f8 <col:65, line:614:5>
|     `-ReturnStmt 0x5606918c09e8 <line:613:9, col:46>
|       `-CallExpr 0x5606918c09a8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c08b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c0928 <col:25> 'const char *' lvalue ParmVar 0x56069189b108 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918c0948 <col:34> 'int' 0
|         |-DeclRefExpr 0x5606918c0968 <col:37> 'P' lvalue ParmVar 0x56069189b180 'parser' 'P'
|         `-DeclRefExpr 0x5606918c0988 <col:45> 'Vector<T>' lvalue ParmVar 0x56069189b340 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56069189b938 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56069189b578 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069189b898 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56069189b630 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189b780 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5606918c0c10 <col:55, line:618:5>
|     `-ReturnStmt 0x5606918c0c00 <line:617:9, col:55>
|       `-CallExpr 0x5606918c0bc0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c0a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c0a90 <col:25> 'const char *' lvalue ParmVar 0x56069189b630 'keyword' 'const char *'
|         |-IntegerLiteral 0x5606918c0ab0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5606918c0b80 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5606918c0ba0 <col:54> 'Vector<T>' lvalue ParmVar 0x56069189b780 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56069189bf08 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56069189b9a0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189ba18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189be68 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56069189bad8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189bb58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56069189bbd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56069189bd20 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5606918c3378 <col:76, line:623:5>
|     |-CallExpr 0x5606918c0d88 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5606918c0c28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5606918c0c68 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5606918c0c78 <col:34> 'const char *' lvalue ParmVar 0x56069189bad8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5606918c0d28 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5606918c0cd8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5606918c0c98 <col:43> 'int' lvalue ParmVar 0x56069189bb58 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5606918c0d10 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5606918c0cf0 <col:51> 'const int' lvalue Var 0x560691889600 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5606918c0d48 <col:63> 'P' lvalue ParmVar 0x56069189bbd0 'parser' 'P'
|     | `-DeclRefExpr 0x5606918c0d68 <col:71> 'Vector<T>' lvalue ParmVar 0x56069189bd20 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5606918c3368 <line:622:9, col:17>
|       `-UnaryOperator 0x5606918c3350 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918c0dd0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56069189c448 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56069189bf80 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189bff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189c3a8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56069189c0b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189c138 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56069189c280 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5606918c35e0 <col:66, line:627:5>
|     `-ReturnStmt 0x5606918c35d0 <line:626:9, col:59>
|       `-CallExpr 0x5606918c3590 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5606918c33a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5606918c3418 <col:25> 'const char *' lvalue ParmVar 0x56069189c0b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5606918c3438 <col:34> 'int' lvalue ParmVar 0x56069189c138 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5606918c3550 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5606918c3570 <col:58> 'Vector<T>' lvalue ParmVar 0x56069189c280 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56069189c4d8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5606918c3660 <col:25, line:633:5>
|   `-ReturnStmt 0x5606918c3650 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5606918c3638 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5606918c3608 <col:16> 'const bool' lvalue ->_status 0x5606918a2318
|         `-CXXThisExpr 0x5606918c35f8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56069189c658 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56069189c590 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5606918c3748 <col:27, line:639:5>
|   |-BinaryOperator 0x5606918c36f0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5606918c3678 <col:9> 'bool' lvalue ParmVar 0x56069189c590 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5606918c36d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5606918c36a8 <col:13> 'bool' lvalue ->_status 0x5606918a2318
|   |     `-CXXThisExpr 0x5606918c3698 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5606918c3738 <line:638:9, col:17>
|     `-UnaryOperator 0x5606918c3720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918c3710 <col:17> 'Args *' this
|-CXXMethodDecl 0x56069189c7d8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56069189c718 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5606918c3838 <col:39, line:644:5>
|   |-BinaryOperator 0x5606918c37e0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5606918c3768 <col:9> 'bool' lvalue ParmVar 0x56069189c718 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5606918c37c8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5606918c3798 <col:13> 'const bool' lvalue ->_status 0x5606918a2318
|   |     `-CXXThisExpr 0x5606918c3788 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5606918c3828 <line:643:9, col:17>
|     `-UnaryOperator 0x5606918c3810 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918c3800 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56069189c8a0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5606918c38e0 <col:30, line:651:5>
|   `-ReturnStmt 0x5606918c38d0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5606918c38b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5606918c3888 <col:16> 'bool' lvalue ->_read_status 0x560691880690
|         `-ImplicitCastExpr 0x5606918c3868 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5606918c3858 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56069189c9e8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56069189c958 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5606918c39e8 <col:32, line:658:5>
|   |-BinaryOperator 0x5606918c3990 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5606918c38f8 <col:9> 'bool' lvalue ParmVar 0x56069189c958 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5606918c3978 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5606918c3948 <col:13> 'bool' lvalue ->_read_status 0x560691880690
|   |     `-ImplicitCastExpr 0x5606918c3928 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5606918c3918 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5606918c39d8 <line:657:9, col:17>
|     `-UnaryOperator 0x5606918c39c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918c39b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56069189cb38 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56069189caa8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5606918c3af8 <col:44, line:663:5>
|   |-BinaryOperator 0x5606918c3aa0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5606918c3a08 <col:9> 'bool' lvalue ParmVar 0x56069189caa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5606918c3a88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5606918c3a58 <col:13> 'bool' lvalue ->_read_status 0x560691880690
|   |     `-ImplicitCastExpr 0x5606918c3a38 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5606918c3a28 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5606918c3ae8 <line:662:9, col:17>
|     `-UnaryOperator 0x5606918c3ad0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606918c3ac0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56069189cc00 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56069189ccc8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56069189cd90 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56069189ce58 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56069189d168 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56069189cef8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069189d0c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56069189cfd8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5606918c3eb0 <col:19, line:706:5>
|     `-IfStmt 0x5606918c3e88 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5606918c3bf8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5606918c3db8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5606918c3d88 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5606918c3d48 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5606918c3c50 <col:42> '<bound member function type>' ->simple_slot 0x5606918bc3d0
|       |     | `-CXXThisExpr 0x5606918c3c40 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5606918c3ce8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5606918c3ca0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x560691602fb8
|       |     | `-DeclRefExpr 0x5606918c3c80 <col:55> 'T' lvalue ParmVar 0x56069189cfd8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5606918c3d28 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5606918c3e78 <line:705:13, col:34>
|         `-CallExpr 0x5606918c3e50 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5606918c3dd8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5606918c3e30 <col:33> 'T' lvalue ParmVar 0x56069189cfd8 'x' 'T &'
|-FunctionTemplateDecl 0x56069189d438 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56069189d1c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069189d398 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56069189d2a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5606918c4290 <col:31, line:717:5>
|     |-DeclStmt 0x5606918c3ff0 <line:713:9, col:23>
|     | `-VarDecl 0x5606918c3ed8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5606918c3fc8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5606918c3f50 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5606918c3fa8 <col:21> 'T' lvalue ParmVar 0x56069189d2a8 'x' 'T &'
|     |-IfStmt 0x5606918c4240 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5606918c40e8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5606918c4220 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5606918c41c0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5606918c4150 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|     |   | `-DeclRefExpr 0x5606918c4130 <col:14> 'T *' lvalue Var 0x5606918c3ed8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5606918c4200 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5606918c4278 <line:716:9, col:16>
|       `-DeclRefExpr 0x5606918c4258 <col:16> 'T *' lvalue Var 0x5606918c3ed8 's' 'T *'
|-FunctionTemplateDecl 0x56069189d848 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56069189d498 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069189d518 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56069189d7a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56069189d5f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56069189d698 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5606918c45a0 <col:37, line:726:5>
|     |-IfStmt 0x5606918c4530 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5606918c4550 <line:723:13, col:26>
|     | | `-VarDecl 0x5606918c42f8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5606918c43e8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5606918c4370 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5606918c43c8 <col:25> 'T' lvalue ParmVar 0x56069189d5f8 'x' 'T &'
|     | |-DeclRefExpr 0x5606918c4410 <col:16> 'T *' lvalue Var 0x5606918c42f8 's' 'T *'
|     | `-BinaryOperator 0x5606918c4510 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5606918c44c0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5606918c4450 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|     |   | `-DeclRefExpr 0x5606918c4430 <col:14> 'T *' lvalue Var 0x5606918c42f8 's' 'T *'
|     |   `-DeclRefExpr 0x5606918c44f0 <col:18> 'const V' lvalue ParmVar 0x56069189d698 'value' 'const V &'
|     `-ReturnStmt 0x5606918c4590 <line:725:9, col:17>
|       `-UnaryOperator 0x5606918c4578 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5606918c4568 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56069189dc48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56069189d8b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56069189dba8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56069189d960 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189d9e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56069189da88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5606918c53c0 <col:65, line:737:5>
|     |-DeclStmt 0x5606918c4638 <line:732:9, col:26>
|     | `-VarDecl 0x5606918c45d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5606918c5388 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5606918c53a8 <line:733:13, col:58>
|       | `-VarDecl 0x5606918c4660 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5606918c4840 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5606918c4810 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5606918c47f8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5606918c47d8 <col:26, col:58> 'String' (CXXTemporary 0x5606918c47d8)
|       |           `-CXXMemberCallExpr 0x5606918c4768 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5606918c46d8 <col:26> '<bound member function type>' ->find 0x5606918bb9e8
|       |             | `-CXXThisExpr 0x5606918c46c8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5606918c47a0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c4708 <col:31> 'const char *' lvalue ParmVar 0x56069189d960 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5606918c47b8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c4728 <col:40> 'int' lvalue ParmVar 0x56069189d9e0 'flags' 'int'
|       |             `-DeclRefExpr 0x5606918c4748 <col:47> 'Args::Slot *' lvalue Var 0x5606918c45d0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5606918c48f8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5606918c48e0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5606918c48c0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5606918c4890 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |       `-ImplicitCastExpr 0x5606918c4878 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5606918c4858 <col:20> 'String' lvalue Var 0x5606918c4660 'str' 'String'
|       `-CompoundStmt 0x5606918c5368 <col:61, line:736:9>
|         |-DeclStmt 0x5606918c4db0 <line:734:13, col:76>
|         | `-VarDecl 0x5606918c4948 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5606918c4d80 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5606918c4cf0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5606918c4d38 <col:60> 'T' lvalue ParmVar 0x56069189da88 'variable' 'T &'
|         |     `-UnaryOperator 0x5606918c4d68 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5606918c4d58 <col:71> 'Args *' this
|         `-CallExpr 0x5606918c5338 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5606918c4dd8 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|           | `-CXXThisExpr 0x5606918c4dc8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5606918c52f8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5606918c4e08 <col:23> 'T *' lvalue Var 0x5606918c4948 's' 'T *'
|           | `-CallExpr 0x5606918c52b8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5606918c5090 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5606918c5190 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5606918c51b0 <col:86> 'String' lvalue Var 0x5606918c4660 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5606918c5260 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5606918c51f0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|           |   | `-DeclRefExpr 0x5606918c51d0 <col:92> 'T *' lvalue Var 0x5606918c4948 's' 'T *'
|           |   `-UnaryOperator 0x5606918c52a0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5606918c5290 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5606918c5318 <col:103> 'Args::Slot *' lvalue Var 0x5606918c45d0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189e198 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56069189dcb8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069189dd38 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56069189e0f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56069189ddf8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189de78 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56069189df18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56069189dfb8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5606918c6260 <col:88, line:745:5>
|     |-DeclStmt 0x5606918c5458 <line:741:9, col:26>
|     | `-VarDecl 0x5606918c53f0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5606918c5678 <line:742:9, col:55>
|     | `-VarDecl 0x5606918c5480 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5606918c5660 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5606918c5630 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5606918c5618 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5606918c55f8 <col:22, col:54> 'String' (CXXTemporary 0x5606918c55f8)
|     |           `-CXXMemberCallExpr 0x5606918c5588 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5606918c54f8 <col:22> '<bound member function type>' ->find 0x5606918bb9e8
|     |             | `-CXXThisExpr 0x5606918c54e8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5606918c55c0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5606918c5528 <col:27> 'const char *' lvalue ParmVar 0x56069189ddf8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5606918c55d8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5606918c5548 <col:36> 'int' lvalue ParmVar 0x56069189de78 'flags' 'int'
|     |             `-DeclRefExpr 0x5606918c5568 <col:43> 'Args::Slot *' lvalue Var 0x5606918c53f0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5606918c5a50 <line:743:9, col:72>
|     | `-VarDecl 0x5606918c56c8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5606918c5a20 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5606918c5990 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5606918c59d8 <col:56> 'T' lvalue ParmVar 0x56069189df18 'variable' 'T &'
|     |     `-UnaryOperator 0x5606918c5a08 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5606918c59f8 <col:67> 'Args *' this
|     `-CallExpr 0x5606918c6230 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5606918c5a78 <col:9> '<bound member function type>' ->postparse 0x5606918bbbf8
|       | `-CXXThisExpr 0x5606918c5a68 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5606918c61f0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5606918c5aa8 <col:19> 'T *' lvalue Var 0x5606918c56c8 's' 'T *'
|       | `-ParenExpr 0x5606918c61d0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5606918c61a0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5606918c6188 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5606918c6170 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5606918c6150 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5606918c6120 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |     |       `-ImplicitCastExpr 0x5606918c6108 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5606918c5ac8 <col:25> 'String' lvalue Var 0x5606918c5480 'str' 'String'
|       |     |-CallExpr 0x5606918c5f78 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5606918c5d50 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5606918c5e50 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5606918c5e70 <col:89> 'String' lvalue Var 0x5606918c5480 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5606918c5f20 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5606918c5eb0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|       |     | | `-DeclRefExpr 0x5606918c5e90 <col:95> 'T *' lvalue Var 0x5606918c56c8 's' 'T *'
|       |     | `-UnaryOperator 0x5606918c5f60 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5606918c5f50 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5606918c60e8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5606918c60c8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5606918c6098 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5606918c6048 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5606918c5fd8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|       |         | | `-DeclRefExpr 0x5606918c5fb8 <col:109> 'T *' lvalue Var 0x5606918c56c8 's' 'T *'
|       |         | `-DeclRefExpr 0x5606918c6078 <col:113> 'const V' lvalue ParmVar 0x56069189dfb8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5606918c60b8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5606918c6210 <col:128> 'Args::Slot *' lvalue Var 0x5606918c53f0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189e6c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56069189e210 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189e288 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189e628 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56069189e348 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189e3c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56069189e440 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56069189e4e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5606918c6e58 <col:75, line:754:5>
|     |-DeclStmt 0x5606918c6308 <line:749:9, col:26>
|     | `-VarDecl 0x5606918c62a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5606918c6e20 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5606918c6e40 <line:750:13, col:58>
|       | `-VarDecl 0x5606918c6330 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5606918c6510 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5606918c64e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5606918c64c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5606918c64a8 <col:26, col:58> 'String' (CXXTemporary 0x5606918c64a8)
|       |           `-CXXMemberCallExpr 0x5606918c6438 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5606918c63a8 <col:26> '<bound member function type>' ->find 0x5606918bb9e8
|       |             | `-CXXThisExpr 0x5606918c6398 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5606918c6470 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c63d8 <col:31> 'const char *' lvalue ParmVar 0x56069189e348 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5606918c6488 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c63f8 <col:40> 'int' lvalue ParmVar 0x56069189e3c8 'flags' 'int'
|       |             `-DeclRefExpr 0x5606918c6418 <col:47> 'Args::Slot *' lvalue Var 0x5606918c62a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5606918c65c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5606918c65b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5606918c6590 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5606918c6560 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |       `-ImplicitCastExpr 0x5606918c6548 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5606918c6528 <col:20> 'String' lvalue Var 0x5606918c6330 'str' 'String'
|       `-CompoundStmt 0x5606918c6e00 <col:61, line:753:9>
|         |-DeclStmt 0x5606918c69a0 <line:751:13, col:63>
|         | `-VarDecl 0x5606918c6618 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5606918c6970 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5606918c68e0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5606918c6928 <col:47> 'T' lvalue ParmVar 0x56069189e4e8 'variable' 'T &'
|         |     `-UnaryOperator 0x5606918c6958 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5606918c6948 <col:58> 'Args *' this
|         `-CallExpr 0x5606918c6dd0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5606918c69c8 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|           | `-CXXThisExpr 0x5606918c69b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5606918c6d90 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5606918c69f8 <col:23> 'T *' lvalue Var 0x5606918c6618 's' 'T *'
|           | `-CallExpr 0x5606918c6d50 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5606918c6be0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5606918c6c28 <col:56> 'P' lvalue ParmVar 0x56069189e440 'parser' 'P'
|           |   |-DeclRefExpr 0x5606918c6c48 <col:64> 'String' lvalue Var 0x5606918c6330 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5606918c6cf8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5606918c6c88 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|           |   | `-DeclRefExpr 0x5606918c6c68 <col:70> 'T *' lvalue Var 0x5606918c6618 's' 'T *'
|           |   `-UnaryOperator 0x5606918c6d38 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5606918c6d28 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5606918c6db0 <col:81> 'Args::Slot *' lvalue Var 0x5606918c62a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189ed28 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56069189e740 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56069189e7b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56069189e838 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56069189ec88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56069189e900 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189e980 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56069189e9f8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56069189ea98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56069189eb38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5606918c7be8 <col:98, line:762:5>
|     |-DeclStmt 0x5606918c6ef0 <line:758:9, col:26>
|     | `-VarDecl 0x5606918c6e88 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5606918c7110 <line:759:9, col:55>
|     | `-VarDecl 0x5606918c6f18 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5606918c70f8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5606918c70c8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5606918c70b0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5606918c7090 <col:22, col:54> 'String' (CXXTemporary 0x5606918c7090)
|     |           `-CXXMemberCallExpr 0x5606918c7020 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5606918c6f90 <col:22> '<bound member function type>' ->find 0x5606918bb9e8
|     |             | `-CXXThisExpr 0x5606918c6f80 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5606918c7058 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5606918c6fc0 <col:27> 'const char *' lvalue ParmVar 0x56069189e900 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5606918c7070 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5606918c6fe0 <col:36> 'int' lvalue ParmVar 0x56069189e980 'flags' 'int'
|     |             `-DeclRefExpr 0x5606918c7000 <col:43> 'Args::Slot *' lvalue Var 0x5606918c6e88 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5606918c7530 <line:760:9, col:59>
|     | `-VarDecl 0x5606918c7168 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5606918c7500 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5606918c7470 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5606918c74b8 <col:43> 'T' lvalue ParmVar 0x56069189ea98 'variable' 'T &'
|     |     `-UnaryOperator 0x5606918c74e8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5606918c74d8 <col:54> 'Args *' this
|     `-CallExpr 0x5606918c7bb8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5606918c7558 <col:9> '<bound member function type>' ->postparse 0x5606918bbbf8
|       | `-CXXThisExpr 0x5606918c7548 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5606918c7b78 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5606918c7588 <col:19> 'T *' lvalue Var 0x5606918c7168 's' 'T *'
|       | `-ParenExpr 0x5606918c7b58 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5606918c7b28 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5606918c7b10 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5606918c7af8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5606918c7ad8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5606918c7aa8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |     |       `-ImplicitCastExpr 0x5606918c7a90 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5606918c75a8 <col:25> 'String' lvalue Var 0x5606918c6f18 'str' 'String'
|       |     |-CallExpr 0x5606918c7900 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5606918c7790 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5606918c77d8 <col:59> 'P' lvalue ParmVar 0x56069189e9f8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5606918c77f8 <col:67> 'String' lvalue Var 0x5606918c6f18 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5606918c78a8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5606918c7838 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|       |     | | `-DeclRefExpr 0x5606918c7818 <col:73> 'T *' lvalue Var 0x5606918c7168 's' 'T *'
|       |     | `-UnaryOperator 0x5606918c78e8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5606918c78d8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5606918c7a70 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5606918c7a50 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5606918c7a20 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5606918c79d0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5606918c7960 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|       |         | | `-DeclRefExpr 0x5606918c7940 <col:87> 'T *' lvalue Var 0x5606918c7168 's' 'T *'
|       |         | `-DeclRefExpr 0x5606918c7a00 <col:91> 'const V' lvalue ParmVar 0x56069189eb38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5606918c7a40 <col:98> 'bool' true
|       `-DeclRefExpr 0x5606918c7b98 <col:106> 'Args::Slot *' lvalue Var 0x5606918c6e88 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189f398 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56069189eda8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189ee28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56069189eea8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56069189f2f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56069189ef70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189eff0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56069189f068 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56069189f108 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56069189f1a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5606918c8bc8 <col:60, line:773:5>
|     |-DeclStmt 0x5606918c7c90 <line:767:9, col:26>
|     | `-VarDecl 0x5606918c7c28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5606918c8b90 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5606918c8bb0 <line:768:13, col:58>
|       | `-VarDecl 0x5606918c7cb8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5606918c7e98 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5606918c7e68 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5606918c7e50 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5606918c7e30 <col:26, col:58> 'String' (CXXTemporary 0x5606918c7e30)
|       |           `-CXXMemberCallExpr 0x5606918c7dc0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5606918c7d30 <col:26> '<bound member function type>' ->find 0x5606918bb9e8
|       |             | `-CXXThisExpr 0x5606918c7d20 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5606918c7df8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c7d60 <col:31> 'const char *' lvalue ParmVar 0x56069189ef70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5606918c7e10 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c7d80 <col:40> 'int' lvalue ParmVar 0x56069189eff0 'flags' 'int'
|       |             `-DeclRefExpr 0x5606918c7da0 <col:47> 'Args::Slot *' lvalue Var 0x5606918c7c28 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5606918c7f50 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5606918c7f38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5606918c7f18 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5606918c7ee8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |       `-ImplicitCastExpr 0x5606918c7ed0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5606918c7eb0 <col:20> 'String' lvalue Var 0x5606918c7cb8 'str' 'String'
|       `-CompoundStmt 0x5606918c8b68 <col:61, line:772:9>
|         |-DeclStmt 0x5606918c8290 <line:769:13, col:66>
|         | `-VarDecl 0x5606918c7fa8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5606918c8260 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5606918c81d0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5606918c8218 <col:49> 'T1' lvalue ParmVar 0x56069189f108 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5606918c8248 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5606918c8238 <col:61> 'Args *' this
|         |-DeclStmt 0x5606918c8600 <line:770:13, col:66>
|         | `-VarDecl 0x5606918c8318 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5606918c85d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5606918c8540 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5606918c8588 <col:49> 'T2' lvalue ParmVar 0x56069189f1a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5606918c85b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5606918c85a8 <col:61> 'Args *' this
|         `-CallExpr 0x5606918c8b38 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5606918c8628 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|           | `-CXXThisExpr 0x5606918c8618 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5606918c8af8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5606918c8698 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5606918c8658 <col:23> 'T1 *' lvalue Var 0x5606918c7fa8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5606918c8678 <col:29> 'T2 *' lvalue Var 0x5606918c8318 's2' 'T2 *'
|           | `-CallExpr 0x5606918c8ab0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5606918c8880 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5606918c88c8 <col:63> 'P' lvalue ParmVar 0x56069189f068 'parser' 'P'
|           |   |-DeclRefExpr 0x5606918c88e8 <col:71> 'String' lvalue Var 0x5606918c7cb8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5606918c8998 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5606918c8928 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|           |   | `-DeclRefExpr 0x5606918c8908 <col:77> 'T1 *' lvalue Var 0x5606918c7fa8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5606918c8a58 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5606918c89e8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|           |   | `-DeclRefExpr 0x5606918c89c8 <col:82> 'T2 *' lvalue Var 0x5606918c8318 's2' 'T2 *'
|           |   `-UnaryOperator 0x5606918c8a98 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5606918c8a88 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5606918c8b18 <col:94> 'Args::Slot *' lvalue Var 0x5606918c7c28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189f788 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56069189f418 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56069189f6e8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56069189f4d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189f550 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56069189f5c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5606918c90e0 <col:67, line:780:5>
|     |-DeclStmt 0x5606918c8c60 <line:777:9, col:26>
|     | `-VarDecl 0x5606918c8bf8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5606918c90a8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5606918c90c8 <line:778:13, col:58>
|       | `-VarDecl 0x5606918c8c88 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5606918c8e68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5606918c8e38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5606918c8e20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5606918c8e00 <col:26, col:58> 'String' (CXXTemporary 0x5606918c8e00)
|       |           `-CXXMemberCallExpr 0x5606918c8d90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5606918c8d00 <col:26> '<bound member function type>' ->find 0x5606918bb9e8
|       |             | `-CXXThisExpr 0x5606918c8cf0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5606918c8dc8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c8d30 <col:31> 'const char *' lvalue ParmVar 0x56069189f4d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5606918c8de0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5606918c8d50 <col:40> 'int' lvalue ParmVar 0x56069189f550 'flags' 'int'
|       |             `-DeclRefExpr 0x5606918c8d70 <col:47> 'Args::Slot *' lvalue Var 0x5606918c8bf8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5606918c8f20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5606918c8f08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5606918c8ee8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5606918c8eb8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|       |       `-ImplicitCastExpr 0x5606918c8ea0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5606918c8e80 <col:20> 'String' lvalue Var 0x5606918c8c88 'str' 'String'
|       `-CallExpr 0x5606918c9078 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5606918c8f48 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|         | `-CXXThisExpr 0x5606918c8f38 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5606918c9028 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5606918c8f98 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5606918c8f78 <col:23> 'P' lvalue ParmVar 0x56069189f5c8 'parser' 'P'
|         | |-DeclRefExpr 0x5606918c8fe0 <col:36> 'String' lvalue Var 0x5606918c8c88 'str' 'String'
|         | `-UnaryOperator 0x5606918c9010 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5606918c9000 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5606918c9058 <col:49> 'Args::Slot *' lvalue Var 0x5606918c8bf8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56069189fb28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56069189f7f8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56069189fa88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56069189f8b0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189f930 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56069189f9a8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5606918c9a50 <col:71, line:792:5>
|     |-DeclStmt 0x5606918c9178 <line:784:9, col:26>
|     | `-VarDecl 0x5606918c9110 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5606918c9248 <line:785:9, col:29>
|     | `-VarDecl 0x5606918c91a8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5606918c9230 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5606918c9210 <col:28> 'int' 1
|     |-WhileStmt 0x5606918c9900 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5606918c9920 <line:786:16, col:61>
|     | | `-VarDecl 0x5606918c9270 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5606918c9450 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5606918c9420 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5606918c9408 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5606918c93e8 <col:29, col:61> 'String' (CXXTemporary 0x5606918c93e8)
|     | |           `-CXXMemberCallExpr 0x5606918c9378 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5606918c92e8 <col:29> '<bound member function type>' ->find 0x5606918bb9e8
|     | |             | `-CXXThisExpr 0x5606918c92d8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5606918c93b0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918c9318 <col:34> 'const char *' lvalue ParmVar 0x56069189f8b0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5606918c93c8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918c9338 <col:43> 'int' lvalue ParmVar 0x56069189f930 'flags' 'int'
|     | |             `-DeclRefExpr 0x5606918c9358 <col:50> 'Args::Slot *' lvalue Var 0x5606918c9110 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5606918c9508 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5606918c94f0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5606918c94d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5606918c94a0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|     | |       `-ImplicitCastExpr 0x5606918c9488 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5606918c9468 <col:23> 'String' lvalue Var 0x5606918c9270 'str' 'String'
|     | `-CompoundStmt 0x5606918c98d8 <col:64, line:790:9>
|     |   |-CallExpr 0x5606918c9660 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5606918c9530 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|     |   | | `-CXXThisExpr 0x5606918c9520 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5606918c9610 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5606918c9580 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5606918c9560 <col:23> 'P' lvalue ParmVar 0x56069189f9a8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5606918c95c8 <col:36> 'String' lvalue Var 0x5606918c9270 'str' 'String'
|     |   | | `-UnaryOperator 0x5606918c95f8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5606918c95e8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5606918c9640 <col:49> 'Args::Slot *' lvalue Var 0x5606918c9110 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5606918c97f8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5606918c9690 <col:13> 'int' lvalue Var 0x5606918c91a8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5606918c97e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5606918c97c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5606918c9728 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5606918c9708 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5606918c96f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5606918c96b0 <col:28> 'int' lvalue Var 0x5606918c91a8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5606918c96d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5606918c97a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5606918c9778 <col:49> 'bool' lvalue ->_read_status 0x560691880690
|     |   |         `-ImplicitCastExpr 0x5606918c9758 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5606918c9748 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5606918c98a8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5606918c9818 <col:13> 'int' lvalue ParmVar 0x56069189f930 'flags' 'int'
|     |     `-UnaryOperator 0x5606918c9890 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5606918c9878 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5606918c9858 <col:23> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5606918c9a30 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5606918c9968 <col:9> 'bool' lvalue ->_read_status 0x560691880690
|       | `-ImplicitCastExpr 0x5606918c9948 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5606918c9938 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5606918c9a10 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5606918c99f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5606918c99d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5606918c9998 <col:25> 'int' lvalue Var 0x5606918c91a8 'read_status' 'int'
|           `-IntegerLiteral 0x5606918c99b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5606918a0008 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56069189fb98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56069189fc18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56069189ff68 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56069189fcd8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56069189fd58 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56069189fdd0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56069189fe78 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5606918ca9e0 <col:84, line:805:5>
|     |-DeclStmt 0x5606918c9af8 <line:796:9, col:26>
|     | `-VarDecl 0x5606918c9a90 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5606918c9bc8 <line:797:9, col:29>
|     | `-VarDecl 0x5606918c9b28 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5606918c9bb0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5606918c9b90 <col:28> 'int' 1
|     |-DeclStmt 0x5606918c9f00 <line:798:9, col:71>
|     | `-VarDecl 0x5606918c9c18 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5606918c9ed0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5606918c9e40 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5606918c9e88 <col:55> 'T' lvalue ParmVar 0x56069189fe78 'variable' 'T &'
|     |     `-UnaryOperator 0x5606918c9eb8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5606918c9ea8 <col:66> 'Args *' this
|     |-WhileStmt 0x5606918ca890 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5606918ca8b0 <line:799:16, col:61>
|     | | `-VarDecl 0x5606918c9f28 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5606918ca108 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5606918ca0d8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5606918ca0c0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5606918ca0a0 <col:29, col:61> 'String' (CXXTemporary 0x5606918ca0a0)
|     | |           `-CXXMemberCallExpr 0x5606918ca030 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5606918c9fa0 <col:29> '<bound member function type>' ->find 0x5606918bb9e8
|     | |             | `-CXXThisExpr 0x5606918c9f90 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5606918ca068 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918c9fd0 <col:34> 'const char *' lvalue ParmVar 0x56069189fcd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5606918ca080 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918c9ff0 <col:43> 'int' lvalue ParmVar 0x56069189fd58 'flags' 'int'
|     | |             `-DeclRefExpr 0x5606918ca010 <col:50> 'Args::Slot *' lvalue Var 0x5606918c9a90 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5606918ca1c0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5606918ca1a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5606918ca188 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5606918ca158 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|     | |       `-ImplicitCastExpr 0x5606918ca140 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5606918ca120 <col:23> 'String' lvalue Var 0x5606918c9f28 'str' 'String'
|     | `-CompoundStmt 0x5606918ca868 <col:64, line:803:9>
|     |   |-CallExpr 0x5606918ca5f0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5606918ca1e8 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|     |   | | `-CXXThisExpr 0x5606918ca1d8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5606918ca5b0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5606918ca218 <col:23> 'T *' lvalue Var 0x5606918c9c18 's' 'T *'
|     |   | | `-CallExpr 0x5606918ca570 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5606918ca400 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5606918ca448 <col:56> 'P' lvalue ParmVar 0x56069189fdd0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5606918ca468 <col:64> 'String' lvalue Var 0x5606918c9f28 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5606918ca518 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5606918ca4a8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|     |   | |   | `-DeclRefExpr 0x5606918ca488 <col:70> 'T *' lvalue Var 0x5606918c9c18 's' 'T *'
|     |   | |   `-UnaryOperator 0x5606918ca558 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5606918ca548 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5606918ca5d0 <col:81> 'Args::Slot *' lvalue Var 0x5606918c9a90 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5606918ca788 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5606918ca620 <col:13> 'int' lvalue Var 0x5606918c9b28 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5606918ca770 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5606918ca750 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5606918ca6b8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5606918ca698 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5606918ca680 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5606918ca640 <col:28> 'int' lvalue Var 0x5606918c9b28 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5606918ca660 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5606918ca738 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5606918ca708 <col:49> 'bool' lvalue ->_read_status 0x560691880690
|     |   |         `-ImplicitCastExpr 0x5606918ca6e8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5606918ca6d8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5606918ca838 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5606918ca7a8 <col:13> 'int' lvalue ParmVar 0x56069189fd58 'flags' 'int'
|     |     `-UnaryOperator 0x5606918ca820 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5606918ca808 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5606918ca7e8 <col:23> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5606918ca9c0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5606918ca8f8 <col:9> 'bool' lvalue ->_read_status 0x560691880690
|       | `-ImplicitCastExpr 0x5606918ca8d8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5606918ca8c8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5606918ca9a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5606918ca980 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5606918ca968 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5606918ca928 <col:25> 'int' lvalue Var 0x5606918c9b28 'read_status' 'int'
|           `-IntegerLiteral 0x5606918ca948 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5606918a05e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5606918a0080 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5606918a00f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5606918a0548 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5606918a01b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5606918a0238 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5606918a02b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5606918a0400 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5606918ceec8 <col:87, line:821:5>
|     |-DeclStmt 0x5606918caa90 <line:809:9, col:26>
|     | `-VarDecl 0x5606918caa28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5606918cab60 <line:810:9, col:29>
|     | `-VarDecl 0x5606918caac0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5606918cab48 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5606918cab28 <col:28> 'int' 1
|     |-DeclStmt 0x5606918cada8 <line:811:9, col:38>
|     | `-VarDecl 0x5606918cac90 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5606918cad80 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5606918cad08 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5606918cad60 <col:29> 'Vector<T>' lvalue ParmVar 0x5606918a0400 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5606918ced78 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5606918ced98 <line:812:16, col:61>
|     | | `-VarDecl 0x5606918cadd0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5606918cafb0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5606918caf80 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5606918caf68 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5606918caf48 <col:29, col:61> 'String' (CXXTemporary 0x5606918caf48)
|     | |           `-CXXMemberCallExpr 0x5606918caed8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5606918cae48 <col:29> '<bound member function type>' ->find 0x5606918bb9e8
|     | |             | `-CXXThisExpr 0x5606918cae38 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5606918caf10 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918cae78 <col:34> 'const char *' lvalue ParmVar 0x5606918a01b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5606918caf28 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5606918cae98 <col:43> 'int' lvalue ParmVar 0x5606918a0238 'flags' 'int'
|     | |             `-DeclRefExpr 0x5606918caeb8 <col:50> 'Args::Slot *' lvalue Var 0x5606918caa28 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5606918cb068 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5606918cb050 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5606918cb030 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5606918cb000 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5606915c5f88
|     | |       `-ImplicitCastExpr 0x5606918cafe8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5606918cafc8 <col:23> 'String' lvalue Var 0x5606918cadd0 'str' 'String'
|     | `-CompoundStmt 0x5606918ced40 <col:64, line:819:9>
|     |   |-DeclStmt 0x5606918cb128 <line:813:13, col:23>
|     |   | `-VarDecl 0x5606918cb090 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5606918cb108 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5606918cb2a8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5606918cb150 <col:13> '<bound member function type>' ->postparse 0x5606918bbbf8
|     |   | | `-CXXThisExpr 0x5606918cb140 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5606918cb250 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5606918cb1a0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5606918cb180 <col:23> 'P' lvalue ParmVar 0x5606918a02b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5606918cb1e8 <col:36> 'String' lvalue Var 0x5606918cadd0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5606918cb208 <col:41> 'T' lvalue Var 0x5606918cb090 'sx' 'T'
|     |   | | `-UnaryOperator 0x5606918cb238 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5606918cb228 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5606918cb288 <col:53> 'Args::Slot *' lvalue Var 0x5606918caa28 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5606918ceae0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5606918cb338 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5606918cb308 <col:17> 'bool' lvalue ->_read_status 0x560691880690
|     |   | |   `-ImplicitCastExpr 0x5606918cb2e8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5606918cb2d8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5606918ceab8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5606918cea50 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5606918cea30 <col:17> 'Vector<T> *' lvalue Var 0x5606918cac90 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5606918cea98 <col:30> 'T' lvalue Var 0x5606918cb090 'sx' 'T'
|     |   |-BinaryOperator 0x5606918cec60 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5606918ceaf8 <col:13> 'int' lvalue Var 0x5606918caac0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5606918cec48 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5606918cec28 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5606918ceb90 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5606918ceb70 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5606918ceb58 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5606918ceb18 <col:28> 'int' lvalue Var 0x5606918caac0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5606918ceb38 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5606918cec10 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5606918cebe0 <col:49> 'bool' lvalue ->_read_status 0x560691880690
|     |   |         `-ImplicitCastExpr 0x5606918cebc0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5606918cebb0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5606918ced10 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5606918cec80 <col:13> 'int' lvalue ParmVar 0x5606918a0238 'flags' 'int'
|     |     `-UnaryOperator 0x5606918cecf8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5606918cece0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5606918cecc0 <col:23> 'const int' lvalue Var 0x560691889318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5606918ceea8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5606918cede0 <col:9> 'bool' lvalue ->_read_status 0x560691880690
|       | `-ImplicitCastExpr 0x5606918cedc0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5606918cedb0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5606918cee88 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5606918cee68 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5606918cee50 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5606918cee10 <col:25> 'int' lvalue Var 0x5606918caac0 'read_status' 'int'
|           `-IntegerLiteral 0x5606918cee30 <col:40> 'int' 1
|-AccessSpecDecl 0x5606918a0660 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5606918a0688 prev 0x560691887618 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5606918a0780 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5606918a0870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5606918cef00 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5606918a0960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5606918cef10 <col:25, line:830:9>
| |-CXXMethodDecl 0x5606918a0a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5606918a0b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5606918a0bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5606918a0bb8
| | `-ParmVarDecl 0x5606918a0cc8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5606918a1488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5606918a1488
|   `-ParmVarDecl 0x5606918a1598 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5606918a0d38 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5606918a0e98 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5606918a1090 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5606918a0f40 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5606918a0fb8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5606918cf0f0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5606918a1348 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5606918cef60 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5606918cef20 <col:20> 'void *' lvalue ParmVar 0x5606918a0f40 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5606918a13b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5606918cefe8 <col:32, col:45> 'char *' array Function 0x5606913e89d8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5606918cefd0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5606918cefa0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5606918a0fb8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5606918a1410 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5606918cf0b0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5606918cf070 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5606918a0fb8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5606918cf170 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5606918a1190 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5606918a0960 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5606918cf1f8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5606918cf1d8 <line:840:13, col:22> 'void' array Function 0x5606913e8d38 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5606918cf1c0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5606918cf190 <col:22> 'char *' lvalue ->_slot 0x5606918a13b0
| |         `-CXXThisExpr 0x5606918cf180 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5606918a1290 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5606918a0a60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5606918cf3e8 <col:22, line:844:9>
| |   `-CallExpr 0x5606918cf350 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5606918cf338 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5606918cf318 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5606914f49d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5606918cf388 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5606918cf268 <col:20> 'void *' lvalue ->_ptr 0x5606918a1348
| |     |   `-CXXThisExpr 0x5606918cf258 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5606918cf3b8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5606918cf3a0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5606918cf2a8 <col:26> 'char *' lvalue ->_slot 0x5606918a13b0
| |     |     `-CXXThisExpr 0x5606918cf298 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5606918cf3d0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5606918cf2e8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5606918a1410
| |         `-CXXThisExpr 0x5606918cf2d8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5606918a1348 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5606918a13b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5606918a1410 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5606918a1608 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5606918a1608
| | `-ParmVarDecl 0x5606918a1718 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5606918a17b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5606918a17b8
|   `-ParmVarDecl 0x5606918a18c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5606918a1a68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5606918a1938 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5606918a19d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5606918a1d00 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5606918a1ef8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5606918a1dc8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5606918a2078 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5606918cf420 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5606918cf400 <col:20> 'T *' lvalue ParmVar 0x5606918a1dc8 'ptr' 'T *'
|   | `-CompoundStmt 0x5606918cf470 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5606918a1fc8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5606918a0a60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5606918cf620 <col:22, line:857:9>
|   |   `-CallExpr 0x5606918cf5f0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5606918cf480 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5606915ad108 0x560691557438
|   |     |-CXXOperatorCallExpr 0x5606918cf580 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5606918cf510 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5606917ba0b8 0x5606917b9cd8 0x5606917b9908 0x5606917b9528 0x5606917b9148 0x5606917b8d78
|   |     | `-MemberExpr 0x5606918cf4e0 <col:29> 'T *' lvalue ->_ptr 0x5606918a2078
|   |     |   `-CXXThisExpr 0x5606918cf4d0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5606918cf5c0 <col:35> 'T' lvalue ->_slot 0x5606918a20d8
|   |       `-CXXThisExpr 0x5606918cf5b0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5606918a2078 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5606918a20d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5606918a2140 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5606918a2240 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5606918a2290 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606918a2220 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5606918a2200 <col:31> 'int' 48
|-FieldDecl 0x5606918a22b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5606918a2318 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5606918a2378 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5606918a24b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5606918bb290 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5606918bb2f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5606918bb3a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5606918bb5c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5606918bb4d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5606918bb718 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5606918bb688 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5606918bb9e8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5606918bb7d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5606918bb858 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5606918bb900 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5606918bbbf8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5606918bbab0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5606918bbb28 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5606918bbcc8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5606918bbe18 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5606918bbd80 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5606918bc1a8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5606918bbed8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5606918bbf58 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5606918bc000 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5606918bc0b8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5606918bc3d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5606918bc280 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5606918bc2f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5606918bc6e8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5606918bc480 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5606918bc648 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5606918bc558 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.0*, %class.Vector.2, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddressArg
         0 |   int flags_
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918f29e0 <../dummy_inc/click/etheraddress.hh:205:1, line:224:1> line:205:7 referenced class EtherAddressArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606918f2af8 <col:1, col:7> col:7 implicit referenced class EtherAddressArg
|-AccessSpecDecl 0x5606918f2b88 <col:25, col:31> col:25 public
|-TypedefDecl 0x5606918f2bc0 <line:206:5, col:18> col:18 enable_direct_parse 'void'
| `-BuiltinType 0x5606912942d0 'void'
|-CXXConstructorDecl 0x5606918f2d08 <line:207:5, col:53> col:5 used EtherAddressArg 'void (int)'
| |-ParmVarDecl 0x5606918f2c30 <col:21, col:33> col:25 used flags 'int' cinit
| | `-IntegerLiteral 0x5606918f3f70 <col:33> 'int' 0
| |-CXXCtorInitializer Field 0x5606918f38a0 'flags_' 'int'
| | `-ImplicitCastExpr 0x5606918f4010 <col:45> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5606918f3fd0 <col:45> 'int' lvalue ParmVar 0x5606918f2c30 'flags' 'int'
| `-CompoundStmt 0x5606918f4058 <col:52, col:53>
|-CXXMethodDecl 0x5606918f2fc8 <line:208:5, line:210:5> line:208:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &)' inline
| |-ParmVarDecl 0x5606918f2dc8 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5606918f2e68 <col:42, col:56> col:56 used value 'EtherAddress &'
| |-ParmVarDecl 0x5606918f2ee0 <col:63, col:88> col:81 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5606918f3f90 <col:88> 'const ArgContext' lvalue Var 0x5606918f2978 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5606918f4238 <col:100, line:210:5>
|   `-ReturnStmt 0x5606918f4228 <line:209:9, col:46>
|     `-CallExpr 0x5606918f41d0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5606918f41b8 <col:16> 'bool (*)(const String &, EtherAddress &, const ArgContext &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606918f4170 <col:16> 'bool (const String &, EtherAddress &, const ArgContext &, int)' lvalue CXXMethod 0x5606918f3b68 'parse' 'bool (const String &, EtherAddress &, const ArgContext &, int)'
|       |-DeclRefExpr 0x5606918f40d0 <col:22> 'const String' lvalue ParmVar 0x5606918f2dc8 'str' 'const String &'
|       |-DeclRefExpr 0x5606918f40f0 <col:27> 'EtherAddress' lvalue ParmVar 0x5606918f2e68 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5606918f4110 <col:34> 'const ArgContext' lvalue ParmVar 0x5606918f2ee0 'args' 'const ArgContext &'
|       `-ImplicitCastExpr 0x5606918f4210 <col:40> 'int' <LValueToRValue>
|         `-MemberExpr 0x5606918f4140 <col:40> 'int' lvalue ->flags_ 0x5606918f38a0
|           `-CXXThisExpr 0x5606918f4130 <col:40> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5606918f3268 <line:211:5, line:213:5> line:211:17 parse 'bool (const String &, unsigned char *, const ArgContext &)' inline
| |-ParmVarDecl 0x5606918f3090 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5606918f3110 <col:42, col:57> col:57 used value 'unsigned char *'
| |-ParmVarDecl 0x5606918f3188 <col:64, col:89> col:82 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5606918f3fb0 <col:89> 'const ArgContext' lvalue Var 0x5606918f2978 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5606918f4410 <col:101, line:213:5>
|   `-ReturnStmt 0x5606918f4400 <line:212:2, col:66>
|     `-CXXMemberCallExpr 0x5606918f43c8 <col:9, col:66> 'bool'
|       |-MemberExpr 0x5606918f4398 <col:9> '<bound member function type>' ->parse 0x5606918f2fc8
|       | `-CXXThisExpr 0x5606918f4388 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5606918f42b8 <col:15> 'const String' lvalue ParmVar 0x5606918f3090 'str' 'const String &'
|       |-UnaryOperator 0x5606918f4350 <col:20, col:59> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5606918f4320 <col:21, col:59> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5606918f4308 <col:54> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5606918f42d8 <col:54> 'unsigned char *' lvalue ParmVar 0x5606918f3110 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5606918f4368 <col:62> 'const ArgContext' lvalue ParmVar 0x5606918f3188 'args' 'const ArgContext &'
|-CXXMethodDecl 0x5606918f3508 <line:214:5, line:216:5> line:214:17 used direct_parse 'bool (const String &, EtherAddress &, Args &)' inline
| |-ParmVarDecl 0x5606918f3330 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5606918f33a8 <col:49, col:63> col:63 used value 'EtherAddress &'
| |-ParmVarDecl 0x5606918f3420 <col:70, col:76> col:76 used args 'Args &'
| `-CompoundStmt 0x5606918f45f8 <col:82, line:216:5>
|   `-ReturnStmt 0x5606918f45e8 <line:215:9, col:53>
|     `-CallExpr 0x5606918f4590 <col:16, col:53> 'bool'
|       |-ImplicitCastExpr 0x5606918f4578 <col:16> 'bool (*)(const String &, EtherAddress &, Args &, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5606918f4530 <col:16> 'bool (const String &, EtherAddress &, Args &, int)' lvalue CXXMethod 0x5606918f3e98 'direct_parse' 'bool (const String &, EtherAddress &, Args &, int)'
|       |-DeclRefExpr 0x5606918f4490 <col:29> 'const String' lvalue ParmVar 0x5606918f3330 'str' 'const String &'
|       |-DeclRefExpr 0x5606918f44b0 <col:34> 'EtherAddress' lvalue ParmVar 0x5606918f33a8 'value' 'EtherAddress &'
|       |-DeclRefExpr 0x5606918f44d0 <col:41> 'Args' lvalue ParmVar 0x5606918f3420 'args' 'Args &'
|       `-ImplicitCastExpr 0x5606918f45d0 <col:47> 'int' <LValueToRValue>
|         `-MemberExpr 0x5606918f4500 <col:47> 'int' lvalue ->flags_ 0x5606918f38a0
|           `-CXXThisExpr 0x5606918f44f0 <col:47> 'EtherAddressArg *' implicit this
|-CXXMethodDecl 0x5606918f37a8 <line:217:5, line:219:5> line:217:17 direct_parse 'bool (const String &, unsigned char *, Args &)' inline
| |-ParmVarDecl 0x5606918f35d0 <col:30, col:44> col:44 used str 'const String &'
| |-ParmVarDecl 0x5606918f3650 <col:49, col:64> col:64 used value 'unsigned char *'
| |-ParmVarDecl 0x5606918f36c8 <col:71, col:77> col:77 used args 'Args &'
| `-CompoundStmt 0x5606918f47d0 <col:83, line:219:5>
|   `-ReturnStmt 0x5606918f47c0 <line:218:2, col:73>
|     `-CXXMemberCallExpr 0x5606918f4788 <col:9, col:73> 'bool'
|       |-MemberExpr 0x5606918f4758 <col:9> '<bound member function type>' ->direct_parse 0x5606918f3508
|       | `-CXXThisExpr 0x5606918f4748 <col:9> 'EtherAddressArg *' implicit this
|       |-DeclRefExpr 0x5606918f4678 <col:22> 'const String' lvalue ParmVar 0x5606918f35d0 'str' 'const String &'
|       |-UnaryOperator 0x5606918f4710 <col:27, col:66> 'EtherAddress' lvalue prefix '*' cannot overflow
|       | `-CXXReinterpretCastExpr 0x5606918f46e0 <col:28, col:66> 'EtherAddress *' reinterpret_cast<class EtherAddress *> <BitCast>
|       |   `-ImplicitCastExpr 0x5606918f46c8 <col:61> 'unsigned char *' <LValueToRValue> part_of_explicit_cast
|       |     `-DeclRefExpr 0x5606918f4698 <col:61> 'unsigned char *' lvalue ParmVar 0x5606918f3650 'value' 'unsigned char *'
|       `-DeclRefExpr 0x5606918f4728 <col:69> 'Args' lvalue ParmVar 0x5606918f36c8 'args' 'Args &'
|-AccessSpecDecl 0x5606918f3860 <line:220:3, col:10> col:3 private
|-FieldDecl 0x5606918f38a0 <line:221:5, col:9> col:9 referenced flags_ 'int'
|-CXXMethodDecl 0x5606918f3b68 <line:222:5, col:96> col:17 used parse 'bool (const String &, EtherAddress &, const ArgContext &, int)' static
| |-ParmVarDecl 0x5606918f3900 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5606918f3978 <col:42, col:56> col:56 value 'EtherAddress &'
| |-ParmVarDecl 0x5606918f39f0 <col:63, col:81> col:81 args 'const ArgContext &'
| `-ParmVarDecl 0x5606918f3a70 <col:87, col:91> col:91 flags 'int'
|-CXXMethodDecl 0x5606918f3e98 <line:223:5, col:91> col:17 used direct_parse 'bool (const String &, EtherAddress &, Args &, int)' static
| |-ParmVarDecl 0x5606918f3c38 <col:30, col:44> col:44 str 'const String &'
| |-ParmVarDecl 0x5606918f3cb0 <col:49, col:63> col:63 value 'EtherAddress &'
| |-ParmVarDecl 0x5606918f3d28 <col:70, col:76> col:76 args 'Args &'
| `-ParmVarDecl 0x5606918f3da8 <col:82, col:86> col:86 flags 'int'
|-CXXConstructorDecl 0x5606917ad948 <line:205:7> col:7 implicit constexpr EtherAddressArg 'void (const EtherAddressArg &)' inline default trivial noexcept-unevaluated 0x5606917ad948
| `-ParmVarDecl 0x5606917ada58 <col:7> col:7 'const EtherAddressArg &'
|-CXXConstructorDecl 0x5606917adaf8 <col:7> col:7 implicit used constexpr EtherAddressArg 'void (EtherAddressArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5606917adc08 <col:7> col:7 used 'EtherAddressArg &&'
| |-CXXCtorInitializer Field 0x5606918f38a0 'flags_' 'int'
| | `-ImplicitCastExpr 0x5606917ae458 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5606917ae410 <col:7> 'int' xvalue .flags_ 0x5606918f38a0
| |     `-CXXStaticCastExpr 0x5606917ae3e0 <col:7> 'EtherAddressArg' xvalue static_cast<class EtherAddressArg &&> <NoOp>
| |       `-DeclRefExpr 0x5606917ae3b0 <col:7> 'EtherAddressArg' lvalue ParmVar 0x5606917adc08 '' 'EtherAddressArg &&'
| `-CompoundStmt 0x5606917ae4a0 <col:7>
`-CXXDestructorDecl 0x5606917adcd0 <col:7> col:7 implicit referenced ~EtherAddressArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddressArg = type { i32 }
  NonVirtualBaseLLVMType:%class.EtherAddressArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ElementCastArg
         0 |   const char * type
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918ec360 <../dummy_inc/click/args.hh:1396:1, line:1405:1> line:1396:7 referenced class ElementCastArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606918ec478 <col:1, col:7> col:7 implicit referenced class ElementCastArg
|-AccessSpecDecl 0x5606918ec508 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5606918ec618 <line:1397:5, line:1399:5> line:1397:5 used ElementCastArg 'void (const char *)'
| |-ParmVarDecl 0x5606918ec548 <col:20, col:32> col:32 used t 'const char *'
| |-CXXCtorInitializer Field 0x5606918ecda0 'type' 'const char *'
| | `-ImplicitCastExpr 0x5606918ece48 <line:1398:16> 'const char *' <LValueToRValue>
| |   `-DeclRefExpr 0x5606918ece08 <col:16> 'const char *' lvalue ParmVar 0x5606918ec548 't' 'const char *'
| `-CompoundStmt 0x5606918ece90 <col:19, line:1399:5>
|-CXXMethodDecl 0x5606918ec870 <line:1400:5, col:75> col:10 referenced parse 'bool (const String &, Element *&, const ArgContext &)'
| |-ParmVarDecl 0x5606918ec6d8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x5606918ec758 <col:35, col:45> col:45 result 'Element *&'
| `-ParmVarDecl 0x5606918ec7d0 <col:53, col:71> col:71 args 'const ArgContext &'
|-FunctionTemplateDecl 0x5606918ecd18 <line:1401:5, line:1403:5> line:1401:31 parse
| |-TemplateTypeParmDecl 0x5606918ec928 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5606918ecc78 <col:26, line:1403:5> line:1401:31 parse 'bool (const String &, T *&, const ArgContext &)'
| | |-ParmVarDecl 0x5606918ec9d8 <col:37, col:51> col:51 referenced str 'const String &'
| | |-ParmVarDecl 0x5606918ecae0 <col:56, col:60> col:60 referenced result 'T *&'
| | |-ParmVarDecl 0x5606918ecb58 <col:68, col:86> col:86 referenced args 'const ArgContext &'
| | `-CompoundStmt 0x5606918ed460 <col:92, line:1403:5>
| |   `-ReturnStmt 0x5606918ed450 <line:1402:9, col:69>
| |     `-CXXMemberCallExpr 0x5606918ed418 <col:16, col:69> 'bool'
| |       |-MemberExpr 0x5606918ed3e8 <col:16> '<bound member function type>' ->parse 0x5606918ec870
| |       | `-CXXThisExpr 0x5606918ed3d8 <col:16> 'ElementCastArg *' implicit this
| |       |-DeclRefExpr 0x5606918ecf10 <col:22> 'const String' lvalue ParmVar 0x5606918ec9d8 'str' 'const String &'
| |       |-CXXReinterpretCastExpr 0x5606918ecf68 <col:27, col:62> 'Element *' lvalue reinterpret_cast<class Element *&> <Dependent>
| |       | `-DeclRefExpr 0x5606918ecf30 <col:56> 'T *' lvalue ParmVar 0x5606918ecae0 'result' 'T *&'
| |       `-DeclRefExpr 0x5606918ecf98 <col:65> 'const ArgContext' lvalue ParmVar 0x5606918ecb58 'args' 'const ArgContext &'
| `-CXXMethodDecl 0x5606918ed2c8 <line:1401:26, col:90> col:31 parse 'bool (const String &, Element *&, const ArgContext &)'
|   |-TemplateArgument type 'Element'
|   |-ParmVarDecl 0x5606918ed070 <col:37, col:51> col:51 str 'const String &'
|   |-ParmVarDecl 0x5606918ed180 <col:56, col:60> col:60 result 'Element *&'
|   `-ParmVarDecl 0x5606918ed1e8 <col:68, col:86> col:86 args 'const ArgContext &'
|-FieldDecl 0x5606918ecda0 <line:1404:5, col:17> col:17 referenced type 'const char *'
|-CXXConstructorDecl 0x5606917ae5d8 <line:1396:7> col:7 implicit constexpr ElementCastArg 'void (const ElementCastArg &)' inline default trivial noexcept-unevaluated 0x5606917ae5d8
| `-ParmVarDecl 0x5606917ae6e8 <col:7> col:7 'const ElementCastArg &'
|-CXXConstructorDecl 0x5606917ae788 <col:7> col:7 implicit used constexpr ElementCastArg 'void (ElementCastArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5606917ae898 <col:7> col:7 used 'ElementCastArg &&'
| |-CXXCtorInitializer Field 0x5606918ecda0 'type' 'const char *'
| | `-ImplicitCastExpr 0x5606917af050 <col:7> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5606917af020 <col:7> 'const char *' xvalue .type 0x5606918ecda0
| |     `-CXXStaticCastExpr 0x5606917aeff0 <col:7> 'ElementCastArg' xvalue static_cast<class ElementCastArg &&> <NoOp>
| |       `-DeclRefExpr 0x5606917aefc0 <col:7> 'ElementCastArg' lvalue ParmVar 0x5606917ae898 '' 'ElementCastArg &&'
| `-CompoundStmt 0x5606917af098 <col:7>
`-CXXDestructorDecl 0x5606917ae950 <col:7> col:7 implicit referenced ~ElementCastArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ElementCastArg = type { i8* }
  NonVirtualBaseLLVMType:%class.ElementCastArg = type { i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606915b5e30 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606915b5f48 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5606915b5fd8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5606915b60a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5606915b6190 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5606915b63a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5606915b6250 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b6558 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5606915b6460 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5606915b66a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5606915b6610 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5606915b67e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5606915b6758 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b6930 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5606915b68a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b69f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5606915b6b40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5606915b6ab0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5606915b6c08 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5606915b6d50 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5606915b6cc0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5606915b6ec8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5606915b6e08 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b7010 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5606915b6f80 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b70d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5606915b7298 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5606915b7188 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5606915b7200 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b74e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5606915b7358 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606915b73d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5606915b7598 <col:86> "" ""
|-CXXMethodDecl 0x5606915b7808 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5606915b7678 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5606915b76f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b79b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5606915b78c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5606915b7b68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5606915b7a70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5606915b7e38 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5606915b7c20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5606915b7c98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5606915b7d10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b8118 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5606915b7f00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5606915b7f78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606915b7ff0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5606915b81d0 <col:115> "" ""
|-AccessSpecDecl 0x5606915b8240 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5606915b8278 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606915b9790 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5606915b9790
| `-ParmVarDecl 0x5606915b9898 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5606915b9938 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5606915b9938
| `-ParmVarDecl 0x5606915b9a48 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5606915ef078 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5606917e0e70 <col:7>
|-CXXConstructorDecl 0x5606915ef150 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5606915ef150
| `-ParmVarDecl 0x5606915ef268 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5606915ef2d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5606915ef2d8
| `-ParmVarDecl 0x5606915ef3e8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5606917e3870 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917cfa18 prev 0x5606917c4c20 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606917cfb10 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5606917cfc00 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5606917cfd28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5606917cfea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5606917d0028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5606917d01a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5606917e0fd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5606917e1848 <col:11>
|-CXXDestructorDecl 0x5606917e10b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5606917e11e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5606917e11e8
| `-ParmVarDecl 0x5606917e12f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5606917e1398 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5606917e1398
| `-ParmVarDecl 0x5606917e14a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5606917e4268 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5606917e4378 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5606917e45f8 <col:11>
|   `-ReturnStmt 0x5606917e45e8 <col:11>
|     `-UnaryOperator 0x5606917e45d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5606917e45c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5606917e43e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5606917e43e8
  `-ParmVarDecl 0x5606917e44f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917d0210 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606917d0328 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5606917d03c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5606917d0430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5606917d0498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5606917d0500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5606917d0560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5606917d0620 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5606917d0680 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5606917d06e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5606917e0ee8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5606917d03c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5606917e1858 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5606917e18b0 <col:12>
|-CXXConstructorDecl 0x5606917e1518 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5606917e1518
| `-ParmVarDecl 0x5606917e1628 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5606917e16c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5606917e16c8
| `-ParmVarDecl 0x5606917e17d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5606917e3950 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917be330 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5606917be448 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5606917be4d8 <col:16, col:22> col:16 public
|-EnumDecl 0x5606917be500 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5606917be600 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5606917be6e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917be5e0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5606917be5c0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5606917be690 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5606917be6f8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917be670 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5606917be650 <col:22> 'int' 64
|-CXXMethodDecl 0x5606917bea38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5606917be720 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606917be7a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5606917be818 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606917be890 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917beaf8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5606917becf8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5606917beb70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5606917bebe8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917beda8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5606917bef08 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5606917bee18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917befb0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5606917bf310 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5606917bf2a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5606917bf240 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5606917bf200 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5606912942d0 'void'
|       |-PointerType 0x56069153e6d0 'unsigned char *'
|       | `-BuiltinType 0x5606912943d0 'unsigned char'
|       |-TypedefType 0x56069133aa20 'size_t' sugar
|       | |-Typedef 0x560691304b20 'size_t'
|       | `-BuiltinType 0x560691294430 'unsigned long'
|       `-PointerType 0x560691294ad0 'void *'
|         `-BuiltinType 0x5606912942d0 'void'
|-CXXMethodDecl 0x5606917bf788 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5606917bf380 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5606917bf3f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606917bf490 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5606917bf510 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5606917d9e80 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5606917d9e68 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5606917d9e30 <col:58> 'int' 0
| |-ParmVarDecl 0x5606917bf590 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5606917d9ea8 <col:76> 'int' 0
| |-ParmVarDecl 0x5606917bf610 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5606917d9ec8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5606917bf858 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5606917bf8d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5606917bf998 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5606917bfa38 <col:20>
| `-OptimizeNoneAttr 0x5606917bfa90 <col:30>
|-CXXMethodDecl 0x5606917bfb08 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5606917bfba8 <col:20>
| `-OptimizeNoneAttr 0x5606917bfc00 <col:30>
|-CXXMethodDecl 0x5606917bfc78 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5606917bfd18 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5606917bfdc8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5606917bfe68 <col:20>
| |-OptimizeNoneAttr 0x5606917bfec0 <col:30>
| `-WarnUnusedResultAttr 0x5606917bfee8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5606917bff40 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5606917bffe0 <col:20>
| `-OptimizeNoneAttr 0x5606917c0038 <col:30>
|-CXXMethodDecl 0x5606917c0088 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5606917c0128 <col:20>
| `-OptimizeNoneAttr 0x5606917c0180 <col:30>
|-CXXMethodDecl 0x5606917c01c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5606917c0268 <col:20>
| `-OptimizeNoneAttr 0x5606917c02c0 <col:30>
|-CXXMethodDecl 0x5606917c0308 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c03c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c0490 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5606917c0558 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5606917c0618 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c0738 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5606917d9f90 <col:54, line:99:5>
|   `-ReturnStmt 0x5606917d9f80 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5606917d9f68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5606917d9f38 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5606917d0a18
|         `-CXXThisExpr 0x5606917d9f28 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5606917c08d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5606917c07e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5606917da040 <col:67, line:103:5>
|   `-BinaryOperator 0x5606917da020 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5606917d9fb8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5606917d0a18
|     | `-CXXThisExpr 0x5606917d9fa8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5606917da008 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5606917d9fe8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5606917c07e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5606917c09d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5606917da0c0 <col:33, line:107:5>
|   `-ReturnStmt 0x5606917da0b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5606917da098 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5606917da068 <col:16> 'void *' lvalue ->_destructor_argument 0x5606917d0a80
|         `-CXXThisExpr 0x5606917da058 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5606917c0a90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5606917da6f0 <col:25, line:113:5>
|   |-ParenExpr 0x5606917da438 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5606917da408 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5606917da178 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5606917da150 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5606917da118 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5606917da0e8 <col:24> '<bound member function type>' ->shared 0x5606917bfb08
|   |   |       `-ImplicitCastExpr 0x5606917da138 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5606917da0d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5606917da1d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917da1b8 <col:42> 'int' 0
|   |   `-CallExpr 0x5606917da368 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5606917da350 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917da330 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917da3a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917da248 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5606917da3c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917da270 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917da3d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917da2a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5606917da3f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917da318 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917da300 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917da2c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5606917da638 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5606917da468 <col:2> 'unsigned char *' lvalue ->_head 0x5606917d0820
|   | | `-CXXThisExpr 0x5606917da458 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5606917da620 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5606917da600 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5606917da4a8 <col:10> 'unsigned char *' lvalue ->_data 0x5606917d0888
|   |     | `-CXXThisExpr 0x5606917da498 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5606917da5e8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5606917da5c8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5606917da4e8 <col:18> 'unsigned char *' lvalue ->_tail 0x5606917d08f0
|   |         | `-CXXThisExpr 0x5606917da4d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5606917da5b0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5606917da590 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5606917da528 <col:26> 'unsigned char *' lvalue ->_end 0x5606917d0958
|   |             | `-CXXThisExpr 0x5606917da518 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5606917da578 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5606917da558 <col:33> 'int' 0
|   `-BinaryOperator 0x5606917da6d0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5606917da668 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5606917d0a18
|     | `-CXXThisExpr 0x5606917da658 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5606917da6b8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5606917da698 <col:16> 'int' 0
|-CXXMethodDecl 0x5606917c0bd0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5606917c0b40 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c0c78 <col:20>
| |-OptimizeNoneAttr 0x5606917c0cd0 <col:30>
| `-WarnUnusedResultAttr 0x5606917c0cf8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5606917c0dc8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5606917c0d38 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c0e70 <col:20>
| |-OptimizeNoneAttr 0x5606917c0ec8 <col:30>
| `-WarnUnusedResultAttr 0x5606917c0ef0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5606917c1028 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5606917c0f30 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917c10d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5606917c11d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5606917c1140 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c1278 <col:20>
| `-OptimizeNoneAttr 0x5606917c12d0 <col:30>
|-CXXMethodDecl 0x5606917c1398 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5606917c1308 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917c1440 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5606917c1540 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5606917c14b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5606917c15e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5606917c16e8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5606917c1658 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c1790 <col:20>
| `-OptimizeNoneAttr 0x5606917c17e8 <col:30>
|-CXXMethodDecl 0x5606917c1978 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5606917c1828 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5606917c18a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5606917d9ee8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5606917c1a28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5606917c1c28 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5606917c1aa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5606917c1b18 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917c1e38 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5606917c1ce8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5606917c1d60 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917c2048 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5606917c1ef8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5606917c1f78 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5606917d9ef8 <col:39> 'int' 0
|-CXXMethodDecl 0x5606917c2118 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5606917c21e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5606917c22a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5606917c2368 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c2430 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5606917c2578 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5606917c24e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5606917c2748 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5606917c2638 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5606917c26b0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917c2818 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5606917c28d8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5606917c2978 <col:20>
| `-OptimizeNoneAttr 0x5606917c29d0 <col:30>
|-CXXMethodDecl 0x5606917c2a20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5606917c2ac0 <col:20>
| `-OptimizeNoneAttr 0x5606917c2b18 <col:30>
|-CXXMethodDecl 0x5606917c2b68 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5606917c2c28 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c2cf0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5606917c2d90 <col:20>
| `-OptimizeNoneAttr 0x5606917c2de8 <col:30>
|-CXXMethodDecl 0x5606917c2f38 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5606917c2e28 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5606917c2ea0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917c3088 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5606917c2ff8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917c3160 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5606917c3220 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5606917c32c0 <col:20>
| `-OptimizeNoneAttr 0x5606917c3318 <col:30>
|-CXXMethodDecl 0x5606917c3368 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5606917c3408 <col:20>
| `-OptimizeNoneAttr 0x5606917c3460 <col:30>
|-CXXMethodDecl 0x5606917c34b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5606917c3578 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5606917c3618 <col:20>
| `-OptimizeNoneAttr 0x5606917c3670 <col:30>
|-CXXMethodDecl 0x5606917c36b8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5606917c37d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5606917c3948 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5606917c3888 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5606917c3a38 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5606917c3ad8 <col:20>
| `-OptimizeNoneAttr 0x5606917c3b30 <col:30>
|-CXXMethodDecl 0x5606917c3b80 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5606917c3c40 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5606917c3e78 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5606917c3cf0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5606917c3d68 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c3f28 <col:20>
| `-OptimizeNoneAttr 0x5606917c3f80 <col:30>
|-CXXMethodDecl 0x5606917c4028 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5606917c40c8 <col:20>
| `-OptimizeNoneAttr 0x5606917c4120 <col:30>
|-CXXMethodDecl 0x5606917c4170 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5606917c4210 <col:20>
| `-OptimizeNoneAttr 0x5606917c4268 <col:30>
|-CXXMethodDecl 0x5606917c42b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5606917c4350 <col:20>
| `-OptimizeNoneAttr 0x5606917c43a8 <col:30>
|-CXXMethodDecl 0x5606917c44a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5606917c43e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5606917c4550 <col:20>
| `-OptimizeNoneAttr 0x5606917c45a8 <col:30>
|-CXXMethodDecl 0x5606917c4768 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5606917c45e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5606917c4658 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c4818 <col:20>
| `-OptimizeNoneAttr 0x5606917c4870 <col:30>
|-CXXMethodDecl 0x5606917c4918 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5606917c4a38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5606917c4b58 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5606917c4bf8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5606917c4c20 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5606917c4d48 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5606917c4de8 <col:20>
| `-OptimizeNoneAttr 0x5606917c4e40 <col:30>
|-CXXMethodDecl 0x5606917c4ee8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5606917c4f88 <col:20>
| `-OptimizeNoneAttr 0x5606917c4fe0 <col:30>
|-AccessSpecDecl 0x5606917c5008 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5606917c5030 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5606917c5130 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5606917c5180 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917c5110 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5606917c50f0 <col:14> 'int' 48
|-CXXMethodDecl 0x5606917c51e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5606917c5288 <col:20>
| `-OptimizeNoneAttr 0x5606917c52e0 <col:30>
|-CXXMethodDecl 0x5606917c5358 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5606917c53f8 <col:20>
| `-OptimizeNoneAttr 0x5606917c5450 <col:30>
|-CXXMethodDecl 0x5606917c5518 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5606917c5488 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5606917c56b8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5606917c5858 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5606917c5768 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5606917c5900 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5606917c5a00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5db0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c59e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5606917c59c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5606917c5a90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5dc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c5a70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5606917c5a50 <col:14> 'int' 1
| |-EnumConstantDecl 0x5606917c5b20 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5de0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c5b00 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5606917c5ae0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5606917c5bb0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5df8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c5b90 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5606917c5b70 <col:14> 'int' 3
| |-EnumConstantDecl 0x5606917c5c40 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5e10 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c5c20 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5606917c5c00 <col:13> 'int' 4
| |-EnumConstantDecl 0x5606917c5cd0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5606917c5e28 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c5cb0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5606917c5c90 <col:13> 'int' 5
| `-EnumConstantDecl 0x5606917c5d60 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5606917c5e40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917c5d40 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5606917c5d20 <col:14> 'int' 6
|-CXXMethodDecl 0x5606917c5ea8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5606917c5f48 <col:20>
| `-OptimizeNoneAttr 0x5606917c5fa0 <col:30>
|-CXXMethodDecl 0x5606917c6098 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5606917c5fd8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5606917c6140 <col:20>
| `-OptimizeNoneAttr 0x5606917c6198 <col:30>
|-CXXMethodDecl 0x5606917c6208 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5606917c6330 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5606917c64a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5606917c63e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5606917c6570 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5606917c6638 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5606917c6778 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5606917c66e8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5606917c6820 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5606917c6920 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5606917c6b20 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c6900 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5606917c68e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5606917c69b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5606917c6b38 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c6990 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5606917c6970 <col:45> 'int' 4
| |-EnumConstantDecl 0x5606917c6a40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5606917c6b50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c6a20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5606917c6a00 <col:24> 'int' 0
| `-EnumConstantDecl 0x5606917c6ad0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5606917c6b68 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917c6ab0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5606917c6a90 <col:47> 'int' 16
|-CXXMethodDecl 0x5606917c6bc8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5606917c6d38 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5606917c6c78 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5606917c6de0 <col:20>
| `-OptimizeNoneAttr 0x5606917c6e38 <col:30>
|-CXXMethodDecl 0x5606917c6e88 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5606917da810 <col:18, col:36>
|   `-ReturnStmt 0x5606917da800 <col:20, col:33>
|     `-ImplicitCastExpr 0x5606917da7e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5606917da7c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5606917da798 <col:27> '<bound member function type>' ->xanno 0x5606917c4ee8
|           `-CXXThisExpr 0x5606917da788 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5606917c6f80 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5606917da920 <col:30, col:48>
|   `-ReturnStmt 0x5606917da910 <col:32, col:45>
|     `-ImplicitCastExpr 0x5606917da8f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5606917da8d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5606917da8a8 <col:39> '<bound member function type>' ->xanno 0x5606917c4d48
|           `-CXXThisExpr 0x5606917da898 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5606917c7068 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5606917daab8 <col:24, col:50>
|   `-ReturnStmt 0x5606917daaa8 <col:26, col:47>
|     `-UnaryOperator 0x5606917daa90 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5606917daa70 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5606917daa58 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5606917daa08 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5606917cfd28
|         |   `-CXXMemberCallExpr 0x5606917da9e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5606917da9b8 <col:34> '<bound member function type>' ->xanno 0x5606917c4ee8
|         |       `-CXXThisExpr 0x5606917da9a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5606917daa38 <col:46> 'int' 0
|-CXXMethodDecl 0x5606917c7170 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5606917dac88 <col:36, col:62>
|   `-ReturnStmt 0x5606917dac78 <col:38, col:59>
|     `-UnaryOperator 0x5606917dac60 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5606917dac40 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5606917dac28 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5606917daba0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5606917cfd28
|         |   `-CXXMemberCallExpr 0x5606917dab80 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5606917dab50 <col:46> '<bound member function type>' ->xanno 0x5606917c4d48
|         |       `-CXXThisExpr 0x5606917dab40 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5606917dabd0 <col:58> 'int' 0
|-CXXMethodDecl 0x5606917c7288 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5606917dae20 <col:26, col:53>
|   `-ReturnStmt 0x5606917dae10 <col:28, col:50>
|     `-UnaryOperator 0x5606917dadf8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5606917dadd8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5606917dadc0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5606917dad70 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5606917d0028
|         |   `-CXXMemberCallExpr 0x5606917dad50 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5606917dad20 <col:36> '<bound member function type>' ->xanno 0x5606917c4ee8
|         |       `-CXXThisExpr 0x5606917dad10 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5606917dada0 <col:49> 'int' 0
|-CXXMethodDecl 0x5606917c73a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5606917daff8 <col:38, col:65>
|   `-ReturnStmt 0x5606917dafe8 <col:40, col:62>
|     `-UnaryOperator 0x5606917dafd0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5606917dafb0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5606917daf98 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5606917daf08 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5606917d0028
|         |   `-CXXMemberCallExpr 0x5606917daee8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5606917daeb8 <col:48> '<bound member function type>' ->xanno 0x5606917c4d48
|         |       `-CXXThisExpr 0x5606917daea8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5606917daf38 <col:61> 'int' 0
|-CXXMethodDecl 0x5606917c7558 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5606917c7460 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5606917db6c8 <col:34, line:463:5>
|   |-ParenExpr 0x5606917db510 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5606917db4e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5606917db148 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917db118 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917db068 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917db050 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917db010 <col:23> 'int' lvalue ParmVar 0x5606917c7460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917db030 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917db0f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917db0c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917db088 <col:33> 'int' lvalue ParmVar 0x5606917c7460 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5606917db0e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5606917db0a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5606917db1a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917db188 <col:56> 'int' 0
|   |   `-CallExpr 0x5606917db440 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5606917db428 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917db408 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917db480 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917db298 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5606917db498 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917db2c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917db4b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917db300 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5606917db4c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917db3f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917db3d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917db398 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5606917db6b8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5606917db6a0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5606917db680 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5606917db650 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5606917db600 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5606917cfd28
|         |   `-CXXMemberCallExpr 0x5606917db5e0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5606917db5b0 <col:9> '<bound member function type>' ->xanno 0x5606917c4d48
|         |       `-CXXThisExpr 0x5606917db5a0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5606917db668 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5606917db630 <col:21> 'int' lvalue ParmVar 0x5606917c7460 'i' 'int'
|-CXXMethodDecl 0x5606917c77a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5606917c7618 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5606917c7690 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5606917dbd58 <col:40, line:472:5>
|   |-ParenExpr 0x5606917dbb70 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5606917dbb40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5606917db820 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917db7f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917db740 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917db728 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917db6e8 <col:23> 'int' lvalue ParmVar 0x5606917c7618 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917db708 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917db7d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917db7a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917db760 <col:33> 'int' lvalue ParmVar 0x5606917c7618 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5606917db7b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5606917db780 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5606917db880 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917db860 <col:56> 'int' 0
|   |   `-CallExpr 0x5606917dbaa0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5606917dba88 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dba68 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dbae0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917db8f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5606917dbaf8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917db920 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dbb10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917db958 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5606917dbb28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dba50 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917dba38 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917db9f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5606917dbd38 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5606917dbce0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5606917dbcb0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5606917dbc60 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5606917cfd28
|     | |   `-CXXMemberCallExpr 0x5606917dbc40 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5606917dbc10 <col:2> '<bound member function type>' ->xanno 0x5606917c4ee8
|     | |       `-CXXThisExpr 0x5606917dbc00 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5606917dbcc8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5606917dbc90 <col:14> 'int' lvalue ParmVar 0x5606917c7618 'i' 'int'
|     `-ImplicitCastExpr 0x5606917dbd20 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5606917dbd00 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5606917c7690 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5606917c7968 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5606917c7870 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5606917dc4d8 <col:36, line:485:5>
|   |-ParenExpr 0x5606917dc240 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dc210 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917dbef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917dbec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917dbdd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917dbdb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917dbd78 <col:23> 'int' lvalue ParmVar 0x5606917c7870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917dbd98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917dbea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917dbe88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917dbdf0 <col:33> 'int' lvalue ParmVar 0x5606917c7870 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917dbe68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917dbe50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917dbe10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917dbe30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5606917dbf50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dbf30 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917dc170 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917dc158 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dc138 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dc1b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dbfc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5606917dc1c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dbff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dc1e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917dc030 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5606917dc1f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dc120 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917dc108 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917dc0c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5606917dc4c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5606917dc4b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5606917dc498 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917dc468 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5606917dc408 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917dc3d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917dc350 <col:61, col:70> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917dc330 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917dc300 <col:61> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917dc2f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917dc3f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917dc380 <col:74> 'int' lvalue ParmVar 0x5606917c7870 'i' 'int'
|-CXXMethodDecl 0x5606917c7bb8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5606917c7a28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5606917c7aa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5606917dcc28 <col:42, line:500:5>
|   |-ParenExpr 0x5606917dc9c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dc990 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917dc670 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917dc640 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917dc550 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917dc538 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917dc4f8 <col:23> 'int' lvalue ParmVar 0x5606917c7a28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917dc518 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917dc620 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917dc608 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917dc570 <col:33> 'int' lvalue ParmVar 0x5606917c7a28 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917dc5e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917dc5d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917dc590 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917dc5b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5606917dc6d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dc6b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917dc8f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917dc8d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dc8b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dc930 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dc740 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5606917dc948 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dc778 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dc960 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917dc7b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5606917dc978 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dc8a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917dc888 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917dc848 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5606917dcc08 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5606917dcbb8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5606917dcb88 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5606917dcb30 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5606917dcb00 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5606917dcab0 <col:48, col:57> 'char [48]' lvalue ->c 0x5606917cfc00
|     |     |   `-CXXMemberCallExpr 0x5606917dca90 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5606917dca60 <col:48> '<bound member function type>' ->xanno 0x5606917c4ee8
|     |     |       `-CXXThisExpr 0x5606917dca50 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5606917dcb18 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5606917dcae0 <col:61> 'int' lvalue ParmVar 0x5606917c7a28 'i' 'int'
|     `-ImplicitCastExpr 0x5606917dcbf0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5606917dcbd0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5606917c7aa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5606917c7d78 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5606917c7c80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5606917dd388 <col:35, line:513:5>
|   |-ParenExpr 0x5606917dd098 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dd068 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917dcdc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917dcd90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917dcca0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917dcc88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917dcc48 <col:23> 'int' lvalue ParmVar 0x5606917c7c80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917dcc68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917dcd70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917dcd58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917dccc0 <col:33> 'int' lvalue ParmVar 0x5606917c7c80 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917dcd38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917dcd20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917dcce0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917dcd00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5606917dce20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dce00 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917dcfc8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917dcfb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dcf90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dd008 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dce90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5606917dd020 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dcec8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dd038 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917dcf00 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5606917dd050 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dcf78 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917dcf60 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917dcf20 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5606917dd378 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5606917dd360 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5606917dd348 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917dd318 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5606917dd290 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917dd260 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917dd210 <col:60, col:69> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917dd1f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917dd1c0 <col:60> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917dd1b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917dd278 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917dd240 <col:73> 'int' lvalue ParmVar 0x5606917c7c80 'i' 'int'
|-CXXMethodDecl 0x5606917c7fc8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5606917c7e38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5606917c7eb0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5606917ddaa8 <col:41, line:528:5>
|   |-ParenExpr 0x5606917dd830 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dd800 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917dd520 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917dd4f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917dd400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917dd3e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917dd3a8 <col:23> 'int' lvalue ParmVar 0x5606917c7e38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917dd3c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917dd4d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917dd4b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917dd420 <col:33> 'int' lvalue ParmVar 0x5606917c7e38 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917dd498 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917dd480 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917dd440 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917dd460 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5606917dd580 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dd560 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917dd760 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917dd748 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dd728 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dd7a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dd5f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5606917dd7b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917dd628 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dd7d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917dd660 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5606917dd7e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dd710 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917dd6f8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917dd6b8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5606917dda88 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5606917dda38 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5606917dda08 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5606917dd9b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5606917dd970 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5606917dd920 <col:47, col:56> 'char [48]' lvalue ->c 0x5606917cfc00
|     |     |   `-CXXMemberCallExpr 0x5606917dd900 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5606917dd8d0 <col:47> '<bound member function type>' ->xanno 0x5606917c4ee8
|     |     |       `-CXXThisExpr 0x5606917dd8c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5606917dd988 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5606917dd950 <col:60> 'int' lvalue ParmVar 0x5606917c7e38 'i' 'int'
|     `-ImplicitCastExpr 0x5606917dda70 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5606917dda50 <col:65> 'int16_t':'short' lvalue ParmVar 0x5606917c7eb0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5606917c8188 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5606917c8090 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5606917de178 <col:36, line:541:5>
|   |-ParenExpr 0x5606917ddf18 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917ddee8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917ddc40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917ddc10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917ddb20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917ddb08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917ddac8 <col:23> 'int' lvalue ParmVar 0x5606917c8090 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917ddae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917ddbf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917ddbd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917ddb40 <col:33> 'int' lvalue ParmVar 0x5606917c8090 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917ddbb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917ddba0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917ddb60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917ddb80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5606917ddca0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917ddc80 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917dde48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917dde30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917dde10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dde88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917ddd10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5606917ddea0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917ddd48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917ddeb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917ddd80 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5606917dded0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917dddf8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917ddde0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917ddda0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5606917de168 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5606917de150 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5606917de138 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917de108 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5606917de0b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917de080 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917de030 <col:61, col:70> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917de010 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917ddfe0 <col:61> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917ddfd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917de098 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917de060 <col:74> 'int' lvalue ParmVar 0x5606917c8090 'i' 'int'
|-CXXMethodDecl 0x5606917c8358 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5606917c8248 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5606917c82c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5606917c8408 <col:20>
| `-OptimizeNoneAttr 0x5606917c8460 <col:30>
|-CXXMethodDecl 0x5606917c8598 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5606917c84a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5606917de848 <col:35, line:562:5>
|   |-ParenExpr 0x5606917de5e8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917de5b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917de310 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917de2e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917de1f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917de1d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917de198 <col:23> 'int' lvalue ParmVar 0x5606917c84a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917de1b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917de2c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917de2a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917de210 <col:33> 'int' lvalue ParmVar 0x5606917c84a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917de288 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917de270 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917de230 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917de250 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5606917de370 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917de350 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917de518 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917de500 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917de4e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917de558 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917de3e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5606917de570 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917de418 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917de588 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917de450 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5606917de5a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917de4c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917de4b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917de470 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5606917de838 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5606917de820 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5606917de808 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917de7d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5606917de780 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917de750 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917de700 <col:60, col:69> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917de6e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917de6b0 <col:60> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917de6a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917de768 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917de730 <col:73> 'int' lvalue ParmVar 0x5606917c84a0 'i' 'int'
|-CXXMethodDecl 0x5606917c87a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5606917c8658 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5606917c86d0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5606917def28 <col:41, line:577:5>
|   |-ParenExpr 0x5606917decb8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dec88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917de9e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917de9b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917de8c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917de8a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917de868 <col:23> 'int' lvalue ParmVar 0x5606917c8658 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917de888 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917de990 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917de978 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917de8e0 <col:33> 'int' lvalue ParmVar 0x5606917c8658 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917de958 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917de940 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917de900 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917de920 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5606917dea40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dea20 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917debe8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917debd0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917debb0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dec28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917deab0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5606917dec40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917deae8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dec58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917deb20 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5606917dec70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917deb98 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917deb80 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917deb40 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5606917def08 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5606917deeb8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5606917dee88 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5606917dee28 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5606917dedf8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5606917deda8 <col:47, col:56> 'char [48]' lvalue ->c 0x5606917cfc00
|     |     |   `-CXXMemberCallExpr 0x5606917ded88 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5606917ded58 <col:47> '<bound member function type>' ->xanno 0x5606917c4ee8
|     |     |       `-CXXThisExpr 0x5606917ded48 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5606917dee10 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5606917dedd8 <col:60> 'int' lvalue ParmVar 0x5606917c8658 'i' 'int'
|     `-ImplicitCastExpr 0x5606917deef0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5606917deed0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5606917c86d0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5606917c8968 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5606917c8870 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5606917df658 <col:36, line:591:5>
|   |-ParenExpr 0x5606917df398 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917df368 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917df0c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917df090 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917defa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917def88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917def48 <col:23> 'int' lvalue ParmVar 0x5606917c8870 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917def68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917df070 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917df058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917defc0 <col:33> 'int' lvalue ParmVar 0x5606917c8870 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917df038 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917df020 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917defe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917df000 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5606917df120 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917df100 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917df2c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917df2b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917df290 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917df308 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917df190 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5606917df320 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917df1c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917df338 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917df200 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5606917df350 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917df278 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917df260 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917df220 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5606917df648 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5606917df630 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5606917df618 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917df5e8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5606917df560 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917df530 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917df4e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917df4c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917df490 <col:61> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917df480 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917df548 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917df510 <col:74> 'int' lvalue ParmVar 0x5606917c8870 'i' 'int'
|-CXXMethodDecl 0x5606917c8bb8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5606917c8a28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5606917c8aa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5606917dfd38 <col:42, line:606:5>
|   |-ParenExpr 0x5606917dfac8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5606917dfa98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5606917df7f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917df7c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917df6d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917df6b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917df678 <col:23> 'int' lvalue ParmVar 0x5606917c8a28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917df698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917df7a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5606917df788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917df6f0 <col:33> 'int' lvalue ParmVar 0x5606917c8a28 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917df768 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917df750 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917df710 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5606917df730 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5606917df850 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917df830 <col:60> 'int' 0
|   |   `-CallExpr 0x5606917df9f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5606917df9e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917df9c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917dfa38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917df8c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5606917dfa50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917df8f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917dfa68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917df930 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5606917dfa80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917df9a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917df990 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917df950 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5606917dfd18 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5606917dfcc8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5606917dfc98 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5606917dfc38 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5606917dfc08 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5606917dfbb8 <col:48, col:57> 'char [48]' lvalue ->c 0x5606917cfc00
|     |     |   `-CXXMemberCallExpr 0x5606917dfb98 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5606917dfb68 <col:48> '<bound member function type>' ->xanno 0x5606917c4ee8
|     |     |       `-CXXThisExpr 0x5606917dfb58 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5606917dfc20 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5606917dfbe8 <col:61> 'int' lvalue ParmVar 0x5606917c8a28 'i' 'int'
|     `-ImplicitCastExpr 0x5606917dfd00 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5606917dfce0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5606917c8aa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5606917c8d50 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5606917c8c80 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5606917e05a8 <col:33, line:620:5>
|   |-ParenExpr 0x5606917e0320 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5606917e02f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5606917dff40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917dff10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917dfdb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917dfd98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917dfd58 <col:23> 'int' lvalue ParmVar 0x5606917c8c80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917dfd78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917dfef0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5606917dfed8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917dfdd0 <col:33> 'int' lvalue ParmVar 0x5606917c8c80 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917dfeb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917dfea0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917dfdf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5606917dfe78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5606917dfe60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5606917dfe28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5606917dffa0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917dff80 <col:79> 'int' 0
|   |   `-CallExpr 0x5606917e0250 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5606917e0238 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917e0218 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917e0290 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917e0088 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5606917e02a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917e00d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917e02c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917e0108 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5606917e02d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917e0200 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917e01e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917e01a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5606917e0598 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5606917e0580 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5606917e0568 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5606917e0538 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5606917e04b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5606917e0480 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5606917e0430 <col:67, col:76> 'char const[48]' lvalue ->c 0x5606917cfc00
|             |   `-CXXMemberCallExpr 0x5606917e0410 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5606917e03e0 <col:67> '<bound member function type>' ->xanno 0x5606917c4d48
|             |       `-CXXThisExpr 0x5606917e03d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5606917e0498 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5606917e0460 <col:80> 'int' lvalue ParmVar 0x5606917c8c80 'i' 'int'
|-CXXMethodDecl 0x5606917c8f68 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5606917c8e10 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5606917c8e90 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5606917e0dd0 <col:45, line:635:5>
|   |-ParenExpr 0x5606917e0b18 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5606917e0ae8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5606917e07b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5606917e0780 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5606917e0620 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5606917e0608 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5606917e05c8 <col:23> 'int' lvalue ParmVar 0x5606917c8e10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5606917e05e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5606917e0760 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5606917e0748 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5606917e0640 <col:33> 'int' lvalue ParmVar 0x5606917c8e10 'i' 'int'
|   |   |     `-BinaryOperator 0x5606917e0728 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5606917e0710 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5606917e0660 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5606917c5130 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5606917e06e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5606917e06d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5606917e0698 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5606917e0810 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5606917e07f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5606917e0a48 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5606917e0a30 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5606917e0a10 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560691331830 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5606917e0a88 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917e0880 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5606917e0aa0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5606917e08c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5606917e0ab8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5606917e0900 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5606917e0ad0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5606917e09f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5606917e09e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5606917e0998 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5606917e0db0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5606917e0d18 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5606917e0ce8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5606917e0c88 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5606917e0c58 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5606917e0c08 <col:54, col:63> 'char [48]' lvalue ->c 0x5606917cfc00
|     |     |   `-CXXMemberCallExpr 0x5606917e0be8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5606917e0bb8 <col:54> '<bound member function type>' ->xanno 0x5606917c4ee8
|     |     |       `-CXXThisExpr 0x5606917e0ba8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5606917e0c70 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5606917e0c38 <col:67> 'int' lvalue ParmVar 0x5606917c8e10 'i' 'int'
|     `-CXXConstCastExpr 0x5606917e0d80 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5606917e0d68 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5606917e0d30 <col:91> 'const void *' lvalue ParmVar 0x5606917c8e90 'x' 'const void *'
|-CXXMethodDecl 0x5606917c9038 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5606917e0e58 <col:34, line:640:5>
|   `-ReturnStmt 0x5606917e0e48 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5606917e0e30 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5606917e0e00 <col:16> 'Packet *' lvalue ->_data_packet 0x5606917d07b8
|         `-CXXThisExpr 0x5606917e0df0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5606917c9178 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5606917c90e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5606917d9f18 <col:46> 'bool' true
|-CXXMethodDecl 0x5606917c92f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5606917c9230 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5606917c93a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5606917c9b50 <line:660:22> "" ""
| |-EnumConstantDecl 0x5606917c94a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9bc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9480 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5606917c9460 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5606917be600 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5606917c9530 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9bd8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9510 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5606917c94f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5606917be690 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5606917c95c0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9bf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c95a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5606917c9580 <col:21> 'int' 0
| |-EnumConstantDecl 0x5606917c9650 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9630 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5606917c9610 <col:19> 'int' 16
| |-EnumConstantDecl 0x5606917c96e0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c96c0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5606917c96a0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5606917c9770 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9750 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5606917c9730 <col:19> 'int' 32
| |-EnumConstantDecl 0x5606917c9800 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c50 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c97e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5606917c97c0 <col:19> 'int' EnumConstant 0x5606917c9650 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5606917c9890 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9870 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5606917c9850 <col:19> 'int' EnumConstant 0x5606917c9770 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5606917c9960 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c80 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9940 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5606917c9920 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5606917c98e0 <col:23> 'int' EnumConstant 0x5606917c9890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5606917c9900 <col:40> 'int' 2
| |-EnumConstantDecl 0x5606917c9a30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5606917c9c98 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5606917c9a10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5606917c99f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5606917c99b0 <col:23> 'int' EnumConstant 0x5606917c9890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5606917c99d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5606917c9b00 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5606917c9cb0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5606917c9ae0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5606917c9ac0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5606917c9a80 <col:23> 'int' EnumConstant 0x5606917c9890 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5606917c9aa0 <col:40> 'int' 8
|-CXXMethodDecl 0x5606917c9cf0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5606917c9d90 <col:68> "" ""
|-CXXMethodDecl 0x5606917c9e28 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5606917c9ec8 <col:45> "" ""
|-CXXMethodDecl 0x5606917c9f60 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5606917ca000 <col:57> "" ""
|-CXXMethodDecl 0x5606917ca098 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5606917ca138 <col:45> "" ""
|-CXXMethodDecl 0x5606917ca1d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5606917ca270 <col:57> "" ""
|-CXXMethodDecl 0x5606917ca300 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5606917ca3a0 <col:51> "" ""
|-CXXMethodDecl 0x5606917ca430 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5606917ca4d0 <col:63> "" ""
|-CXXMethodDecl 0x5606917ca560 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5606917ca600 <col:53> "" ""
|-CXXMethodDecl 0x5606917ca690 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5606917ca730 <col:65> "" ""
|-CXXMethodDecl 0x5606917ca848 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5606917ca7b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5606917ca8f0 <col:61> "" ""
|-CXXMethodDecl 0x5606917caa88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5606917ca978 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5606917ca9f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5606917cab38 <col:67> "" ""
|-CXXMethodDecl 0x5606917cac50 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5606917cabc0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5606917cacf8 <col:63> "" ""
|-CXXMethodDecl 0x5606917cae90 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5606917cad80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5606917cadf8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5606917caf40 <col:69> "" ""
|-CXXMethodDecl 0x5606917cb058 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5606917cafc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5606917cb100 <col:63> "" ""
|-CXXMethodDecl 0x5606917cd7d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5606917cd6c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5606917cd740 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5606917cd888 <col:69> "" ""
|-CXXMethodDecl 0x5606917cd9a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5606917cd910 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5606917cda48 <col:62> "" ""
|-CXXMethodDecl 0x5606917cdbe0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5606917cdad0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5606917cdb48 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5606917cdc90 <col:68> "" ""
|-CXXMethodDecl 0x5606917cdda8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5606917cdd18 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5606917cde50 <col:63> "" ""
|-CXXMethodDecl 0x5606917cdfe8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5606917cded8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5606917cdf50 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5606917ce098 <col:69> "" ""
|-CXXMethodDecl 0x5606917ce128 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5606917ce1c8 <col:64> "" ""
|-CXXMethodDecl 0x5606917ce258 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5606917ce2f8 <col:52> "" ""
|-CXXMethodDecl 0x5606917ce388 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5606917ce428 <col:67> "" ""
|-CXXMethodDecl 0x5606917ce4b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5606917ce558 <col:55> "" ""
|-CXXMethodDecl 0x5606917ce670 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5606917ce5e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5606917ce718 <col:58> "" ""
|-CXXMethodDecl 0x5606917ce8b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5606917ce7a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5606917ce818 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5606917ce960 <col:62> "" ""
|-CXXMethodDecl 0x5606917cea78 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5606917ce9e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5606917ceb20 <col:58> "" ""
|-CXXMethodDecl 0x5606917cecb8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5606917ceba8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5606917cec20 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5606917ced68 <col:62> "" ""
|-CXXMethodDecl 0x5606917cee80 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5606917cedf0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5606917cef28 <col:60> "" ""
|-CXXMethodDecl 0x5606917cf0c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5606917cefb0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5606917cf028 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5606917cf170 <col:64> "" ""
|-CXXMethodDecl 0x5606917cf288 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5606917cf1f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5606917cf330 <col:58> "" ""
|-CXXMethodDecl 0x5606917cf4c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5606917cf3b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5606917cf430 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5606917cf578 <col:62> "" ""
|-CXXMethodDecl 0x5606917cf690 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5606917cf600 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5606917cf738 <col:59> "" ""
|-CXXMethodDecl 0x5606917cf8d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5606917cf7c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5606917cf838 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5606917cf980 <col:63> "" ""
|-AccessSpecDecl 0x5606917cf9f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5606917cfa18 prev 0x5606917c4c20 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5606917cfb10 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5606917cfc00 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5606917cfd28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5606917cfea8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5606917d0028 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5606917d01a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5606917e0fd8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5606917e1848 <col:11>
| |-CXXDestructorDecl 0x5606917e10b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5606917e11e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5606917e11e8
| | `-ParmVarDecl 0x5606917e12f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5606917e1398 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5606917e1398
| | `-ParmVarDecl 0x5606917e14a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5606917e4268 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5606917e4378 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5606917e45f8 <col:11>
| |   `-ReturnStmt 0x5606917e45e8 <col:11>
| |     `-UnaryOperator 0x5606917e45d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5606917e45c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5606917e43e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5606917e43e8
|   `-ParmVarDecl 0x5606917e44f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5606917d0210 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5606917d0328 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5606917d03c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5606917d0430 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5606917d0498 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5606917d0500 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5606917d0560 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5606917d0620 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5606917d0680 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5606917d06e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5606917e0ee8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5606917d03c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5606917e1858 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5606917e18b0 <col:12>
| |-CXXConstructorDecl 0x5606917e1518 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5606917e1518
| | `-ParmVarDecl 0x5606917e1628 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5606917e16c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5606917e16c8
| | `-ParmVarDecl 0x5606917e17d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5606917e3950 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5606917d0758 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5606917d07b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5606917d0820 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5606917d0888 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5606917d08f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5606917d0958 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5606917d09b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5606917d0a18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5606917d0a80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5606917d0b08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5606917d0758 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5606917e0e80 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5606917d09b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5606917e18c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5606917e1920 <col:21, line:755:5>
|-CXXConstructorDecl 0x5606917d0ca8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5606917d0be8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5606917d0da0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5606917d0f88 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5606917d0e90 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5606917d1258 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5606917d1040 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606917d10b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5606917d1130 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917d1478 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5606917d1328 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5606917d13a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5606917d9a58 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5606917d1538 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5606917d15b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5606917d1628 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5606917d9bb0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5606917d9b20 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917d9cf8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5606917d9c68 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5606917d9df0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct BridgeMessage::wire
         0 |   uint8_t [6] dst
         6 |   uint8_t [6] src
        12 |   uint16_t length
        14 |   uint16_t sap
        16 |   uint8_t ctl
        17 |   uint16_t protocol
        19 |   uint8_t version
        20 |   uint8_t type
    21:0-0 |   unsigned int tc
    21:1-6 |   unsigned int reserved
    21:7-7 |   unsigned int tca
        22 |   uint64_t root
        30 |   uint32_t cost
        34 |   uint64_t bridge_id
        42 |   uint16_t port_id
        44 |   uint16_t message_age
        46 |   uint16_t max_age
        48 |   uint16_t hello_time
        50 |   uint16_t forward_delay
        52 |   uint8_t [8] padding
           | [sizeof=60, dsize=60, align=1,
           |  nvsize=60, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560691811260 prev 0x56069180ff40 <../elements/etherswitch/bridgemessage.hh:40:3, col:409> col:10 referenced struct wire definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x560691811f50 <col:426>
|-CXXRecordDecl 0x560691811358 <col:3, col:10> col:10 implicit struct wire
|-AccessSpecDecl 0x5606918113e8 <col:17, col:23> col:17 public
|-FieldDecl 0x5606918114e8 <col:25, col:38> col:33 dst 'uint8_t [6]'
|-FieldDecl 0x560691811598 <col:41, col:54> col:49 src 'uint8_t [6]'
|-FieldDecl 0x5606918115f8 <col:57, col:66> col:66 length 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811658 <col:74, col:83> col:83 sap 'uint16_t':'unsigned short'
|-FieldDecl 0x5606918116b8 <col:88, col:96> col:96 ctl 'uint8_t':'unsigned char'
|-FieldDecl 0x560691811718 <col:101, col:110> col:110 protocol 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811778 <col:120, col:128> col:128 version 'uint8_t':'unsigned char'
|-FieldDecl 0x5606918117d8 <col:137, col:145> col:145 type 'uint8_t':'unsigned char'
|-FieldDecl 0x560691811880 <col:151, col:163> col:160 tc 'unsigned int'
| `-ConstantExpr 0x560691811860 <col:163> 'int' Int: 1
|   `-IntegerLiteral 0x560691811828 <col:163> 'int' 1
|-FieldDecl 0x560691811928 <col:166, col:184> col:175 reserved 'unsigned int'
| `-ConstantExpr 0x560691811908 <col:184> 'int' Int: 6
|   `-IntegerLiteral 0x5606918118d0 <col:184> 'int' 6
|-FieldDecl 0x5606918119d0 <col:187, col:200> col:196 referenced tca 'unsigned int'
| `-ConstantExpr 0x5606918119b0 <col:200> 'int' Int: 1
|   `-IntegerLiteral 0x560691811978 <col:200> 'int' 1
|-FieldDecl 0x560691811a30 <col:203, col:212> col:212 root 'uint64_t':'unsigned long'
|-FieldDecl 0x560691811a90 <col:218, col:227> col:227 cost 'uint32_t':'unsigned int'
|-FieldDecl 0x560691811af0 <col:233, col:242> col:242 bridge_id 'uint64_t':'unsigned long'
|-FieldDecl 0x560691811b50 <col:253, col:262> col:262 port_id 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811bb0 <col:271, col:280> col:280 message_age 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811c10 <col:293, col:302> col:302 max_age 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811c70 <col:311, col:320> col:320 hello_time 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811cd0 <col:332, col:341> col:341 forward_delay 'uint16_t':'unsigned short'
|-FieldDecl 0x560691811db8 <col:356, col:373> col:364 padding 'uint8_t [8]'
`-CXXMethodDecl 0x560691811ea8 <col:376, col:402> col:383 s 'String (String) const'
  `-ParmVarDecl 0x560691811e18 <col:385, col:398> col:392 tag 'String' cinit destroyed
    `-ExprWithCleanups 0x560691812830 <col:398> 'String'
      `-CXXBindTemporaryExpr 0x560691812810 <col:398> 'String' (CXXTemporary 0x560691812810)
        `-CXXConstructExpr 0x5606918127d8 <col:398> 'String' 'void (String &&)' elidable
          `-MaterializeTemporaryExpr 0x5606918127c0 <col:398> 'String' xvalue
            `-CXXBindTemporaryExpr 0x5606918127a0 <col:398> 'String' (CXXTemporary 0x5606918127a0)
              `-ImplicitCastExpr 0x560691812780 <col:398> 'String' <ConstructorConversion>
                `-CXXConstructExpr 0x560691812750 <col:398> 'String' 'void (const char *)'
                  `-ImplicitCastExpr 0x560691812738 <col:398> 'const char *' <ArrayToPointerDecay>
                    `-StringLiteral 0x560691812720 <col:398> 'const char [1]' lvalue ""

Layout: <CGRecordLayout
  LLVMType:%"struct.BridgeMessage::wire" = type <{ [6 x i8], [6 x i8], i16, i16, i8, i16, i8, i8, i8, i64, i32, i64, i16, i16, i16, i16, i16, [8 x i8] }>
  NonVirtualBaseLLVMType:%"struct.BridgeMessage::wire" = type <{ [6 x i8], [6 x i8], i16, i16, i8, i16, i8, i8, i8, i64, i32, i64, i16, i16, i16, i16, i16, [8 x i8] }>
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:21>
    <CGBitFieldInfo Offset:1 Size:6 IsSigned:0 StorageSize:8 StorageOffset:21>
    <CGBitFieldInfo Offset:7 Size:1 IsSigned:0 StorageSize:8 StorageOffset:21>
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606917e19c0 prev 0x5606917be280 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5606917e1af8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5606917e1b88 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5606917e1c30 <line:780:5, col:62> col:55 used data 'unsigned char *() const'
| |-NoInlineAttr 0x5606917e1cd0 <col:20>
| `-OptimizeNoneAttr 0x5606917e1d28 <col:30>
|-CXXMethodDecl 0x5606917e1d78 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5606917e1e18 <col:20>
| `-OptimizeNoneAttr 0x5606917e1e70 <col:30>
|-CXXMethodDecl 0x5606917e1ec0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5606917e1f88 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5606917e2050 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5606917e2168 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5606917e2230 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5606917e22d0 <col:20>
| `-OptimizeNoneAttr 0x5606917e2328 <col:30>
|-CXXMethodDecl 0x5606917e2398 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5606917e2438 <col:20>
| `-OptimizeNoneAttr 0x5606917e2490 <col:30>
|-CXXMethodDecl 0x5606917e2538 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5606917e25d8 <col:20>
| `-OptimizeNoneAttr 0x5606917e2630 <col:30>
|-CXXMethodDecl 0x5606917e2680 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5606917e2798 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5606917e28b8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5606917e29d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5606917e2aa0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5606917e2b40 <col:62> "" ""
|-AccessSpecDecl 0x5606917e2bb0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5606917e2c10 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5606917e3808 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5606917e3a30 <col:29, col:31>
|-CXXMethodDecl 0x5606917e2cd8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5606917e2e18 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5606917e2d88 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5606917e2f10 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5606917e3a40 <col:23, col:25>
|-CXXMethodDecl 0x5606917e30c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5606917e3000 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5606917e3398 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5606917e3180 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5606917e31f8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5606917e3270 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5606917e3528 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5606917e3460 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5606917e3620 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5606917e3688 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5606917e3688
  `-ParmVarDecl 0x5606917e3798 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<72>
         0 |   char [72] x
           | [sizeof=72, dsize=72, align=1,
           |  nvsize=72, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560691834490 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 72
|-PackedAttr 0x5606919b5c78 <line:167:18>
|-CXXRecordDecl 0x5606919b5d38 prev 0x560691834490 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5606919b5e88 <line:166:5, col:13> col:10 x 'char [72]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [72 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [72 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Suppressor *>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Suppressor ** _ptr
        24 |   class Suppressor * _slot
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class EtherSwitch *>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class EtherSwitch ** _ptr
        24 |   class EtherSwitch * _slot
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606913eaa08 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606913eab28 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x5606915fcb60 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5606915fcc40 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x5606915fcc40
| `-ParmVarDecl 0x5606915fcd28 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5606915fcdc8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5606915fcdc8
| `-ParmVarDecl 0x5606915fced8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x560691799bc0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Bitvector::Bit
         0 |   class Bitvector::word_type & _p
         8 |   class Bitvector::word_type _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918f97f0 parent 0x5606918f4e40 prev 0x5606918f4ff0 <../dummy_inc/click/bitvector.hh:103:1, line:123:1> line:103:18 referenced class Bit definition
|-DefinitionData pass_in_registers has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5606918f9928 <col:1, col:18> col:18 implicit referenced class Bit
|-AccessSpecDecl 0x5606918f99b8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5606918f9c78 <line:105:5, col:55> col:12 used Bit 'void (Bitvector::word_type &, int)' inline
| |-ParmVarDecl 0x5606918f9aa0 <col:16, col:38> col:38 w 'Bitvector::word_type &'
| `-ParmVarDecl 0x5606918f9b20 <col:41, col:45> col:45 bit_offset 'int'
|-CXXConversionDecl 0x5606918f9d88 <line:107:5, col:28> col:12 operator bool 'bool () const' inline
|-CXXMethodDecl 0x5606918f9f38 <line:109:5, col:33> col:17 used operator= 'Bitvector::Bit &(bool)' inline
| `-ParmVarDecl 0x5606918f9e48 <col:27, col:32> col:32 x 'bool'
|-CXXMethodDecl 0x5606918fa0d8 <line:110:5, col:39> col:17 operator= 'Bitvector::Bit &(const Bitvector::Bit &)' inline
| `-ParmVarDecl 0x5606918fa018 <col:27, col:38> col:38 x 'const Bitvector::Bit &'
|-CXXMethodDecl 0x5606918fa1a0 <line:111:5, col:22> col:17 flip 'void ()' inline
|-CXXMethodDecl 0x5606918fa2e0 <line:113:5, col:34> col:17 operator&= 'Bitvector::Bit &(bool)' inline
| `-ParmVarDecl 0x5606918fa250 <col:28, col:33> col:33 x 'bool'
|-CXXMethodDecl 0x5606918fa428 <line:114:5, col:34> col:17 operator|= 'Bitvector::Bit &(bool)' inline
| `-ParmVarDecl 0x5606918fa398 <col:28, col:33> col:33 x 'bool'
|-CXXMethodDecl 0x5606918fa570 <line:115:5, col:34> col:17 operator^= 'Bitvector::Bit &(bool)' inline
| `-ParmVarDecl 0x5606918fa4e0 <col:28, col:33> col:33 x 'bool'
|-CXXMethodDecl 0x5606918fa6b8 <line:116:5, col:34> col:17 operator-= 'Bitvector::Bit &(bool)' inline
| `-ParmVarDecl 0x5606918fa628 <col:28, col:33> col:33 x 'bool'
|-AccessSpecDecl 0x5606918fa760 <line:118:3, col:10> col:3 private
|-FieldDecl 0x5606918fa7f0 <line:120:5, col:27> col:27 referenced _p 'Bitvector::word_type &'
|-FieldDecl 0x5606918fa8a0 <line:121:5, col:26> col:26 referenced _mask 'Bitvector::word_type':'unsigned int'
|-CXXConstructorDecl 0x5606918fd820 <line:103:18> col:18 implicit used constexpr Bit 'void (const Bitvector::Bit &) noexcept' inline default trivial
| |-ParmVarDecl 0x5606918fd938 <col:18> col:18 used 'const Bitvector::Bit &'
| |-CXXCtorInitializer Field 0x5606918fa7f0 '_p' 'Bitvector::word_type &'
| | `-MemberExpr 0x5606918fdb50 <col:18> 'Bitvector::word_type':'unsigned int' lvalue ._p 0x5606918fa7f0
| |   `-DeclRefExpr 0x5606918fdb30 <col:18> 'const Bitvector::Bit' lvalue ParmVar 0x5606918fd938 '' 'const Bitvector::Bit &'
| |-CXXCtorInitializer Field 0x5606918fa8a0 '_mask' 'Bitvector::word_type':'unsigned int'
| | `-ImplicitCastExpr 0x5606918fdc28 <col:18> 'Bitvector::word_type':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x5606918fdbe0 <col:18> 'const Bitvector::word_type':'const unsigned int' lvalue ._mask 0x5606918fa8a0
| |     `-DeclRefExpr 0x5606918fdbc0 <col:18> 'const Bitvector::Bit' lvalue ParmVar 0x5606918fd938 '' 'const Bitvector::Bit &'
| `-CompoundStmt 0x5606918fdc78 <col:18>
`-CXXDestructorDecl 0x5606918fd9e8 <col:18> col:18 implicit referenced ~Bit 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Bitvector::Bit" = type <{ i32*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Bitvector::Bit.base" = type <{ i32*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5606918ed478 prev 0x560691854310 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x5606918eef18 <line:148:18>
|-CXXRecordDecl 0x5606918ed570 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x5606918ed600 <col:22, col:28> col:22 public
|-TypedefDecl 0x5606918ed638 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x5606913eaaa0 'uninitialized_type'
|   `-CXXRecord 0x5606913eaa08 'uninitialized_type'
|-CXXConstructorDecl 0x5606918ed6c8 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x5606918ef218 <col:27, line:16:5>
|   `-BinaryOperator 0x5606918ef1f8 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5606918ef000 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5606918eefe8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5606918eef98 <col:2> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|     | |   `-CXXThisExpr 0x5606918eef88 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5606918eefc8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5606918ef1e0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5606918ef1c0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5606918ef098 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5606918ef080 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5606918ef030 <col:13> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|         | |   `-CXXThisExpr 0x5606918ef020 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5606918ef060 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5606918ef1a8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5606918ef188 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5606918ef130 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5606918ef118 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5606918ef0c8 <col:24> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|             | |   `-CXXThisExpr 0x5606918ef0b8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5606918ef0f8 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5606918ef170 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x5606918ef150 <col:35> 'int' 0
|-CXXConstructorDecl 0x5606918ed818 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x5606918ed788 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x5606918ef3e0 <col:61, line:24:5>
|   `-CallExpr 0x5606918ef330 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x5606918ef318 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5606918ef2f8 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5606914f49d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x5606918ef380 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x5606918ef368 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x5606918ef288 <col:9> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|     |     `-CXXThisExpr 0x5606918ef278 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x5606918ef3b0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x5606918ef398 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x5606918ef2b8 <col:16> 'const unsigned char *' lvalue ParmVar 0x5606918ed788 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x5606918ef3c8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x5606918ef2d8 <col:22> 'int' 6
|-CXXConstructorDecl 0x5606918ed968 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x5606918ed8d8 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x5606918ef450 <col:59, line:29:5>
|   `-CStyleCastExpr 0x5606918ef428 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x5606918ef3f8 <col:9> 'const uninitialized_type' lvalue ParmVar 0x5606918ed8d8 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x5606918eda68 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x5606918efb98 <col:42, line:34:5>
|   `-ReturnStmt 0x5606918efb88 <line:33:2, col:28>
|     `-ExprWithCleanups 0x5606918efb70 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x5606918efb40 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5606918ef978 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x5606918ef8f0 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x5606918ef7e0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x5606918ef7c8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x5606918ef478 <col:22> 'int' 65535
|-CXXMethodDecl 0x5606918edb28 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x5606918edbc8 <col:59> "" ""
|-TypedefDecl 0x5606918edd48 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x5606918edcc0 'bool (EtherAddress::*)() const'
|   |-RecordType 0x5606917f7360 'EtherAddress'
|   | `-CXXRecord 0x5606918ed478 'EtherAddress'
|   `-ParenType 0x5606918edc60 'bool () const' sugar
|     `-FunctionProtoType 0x56069133d760 'bool () const' const cdecl
|       `-BuiltinType 0x5606912942f0 'bool'
|-CXXConversionDecl 0x5606918ede88 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x5606918eff78 <col:51, line:43:5>
|   `-ReturnStmt 0x5606918eff68 <line:42:2, col:70>
|     `-ConditionalOperator 0x5606918eff38 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x5606918efe60 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x5606918efd78 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x5606918efd30 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x5606918efd18 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5606918efc60 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5606918efc48 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5606918efbc0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       | | |     |   `-CXXThisExpr 0x5606918efbb0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5606918efbf0 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5606918efd60 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x5606918efd48 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5606918efcf8 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5606918efce0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5606918efc90 <col:21> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       | |       |   `-CXXThisExpr 0x5606918efc80 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5606918efcc0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x5606918efe48 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x5606918efe30 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5606918efe10 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5606918efdf8 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5606918efda8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       |       |   `-CXXThisExpr 0x5606918efd98 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5606918efdd8 <col:39> 'int' 2
|       |-UnaryOperator 0x5606918efee8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5606918efeb8 <col:45, col:59> 'bool () const' CXXMethod 0x5606918edf58 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x5606918eff20 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x5606918eff00 <col:70> 'int' 0
|-CXXMethodDecl 0x5606918edf58 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x5606918f0138 <col:34, line:51:5>
|   `-ReturnStmt 0x5606918f0128 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x5606918f0110 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5606918f00f0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5606918f00d8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5606918f00c0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5606918f0080 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5606918f0040 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5606918f0010 <col:9> '<bound member function type>' ->data 0x5606918ee3f0
|         |     |   `-CXXThisExpr 0x5606918f0000 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5606918f0060 <col:16> 'int' 0
|         `-IntegerLiteral 0x5606918f00a0 <col:21> 'int' 1
|-CXXMethodDecl 0x5606918ee018 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x5606918f02f8 <col:34, line:59:5>
|   `-ReturnStmt 0x5606918f02e8 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x5606918f02d0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x5606918f02b0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x5606918f0298 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5606918f0280 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5606918f0240 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x5606918f0200 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x5606918f01d0 <col:9> '<bound member function type>' ->data 0x5606918ee3f0
|         |     |   `-CXXThisExpr 0x5606918f01c0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x5606918f0220 <col:16> 'int' 0
|         `-IntegerLiteral 0x5606918f0260 <col:21> 'int' 2
|-CXXMethodDecl 0x5606918ee0d8 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x5606918f05f8 <col:38, line:66:5>
|   `-ReturnStmt 0x5606918f05e8 <line:65:2, col:43>
|     `-BinaryOperator 0x5606918f05c8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x5606918f0588 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x5606918f04a0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x5606918f0458 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x5606918f0440 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x5606918f0388 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x5606918f0370 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x5606918f0320 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       | | |     |   `-CXXThisExpr 0x5606918f0310 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x5606918f0350 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x5606918f0488 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x5606918f0470 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x5606918f0420 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x5606918f0408 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x5606918f03b8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       | |       |   `-CXXThisExpr 0x5606918f03a8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x5606918f03e8 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x5606918f0570 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x5606918f0558 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x5606918f0538 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x5606918f0520 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x5606918f04d0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       |       |   `-CXXThisExpr 0x5606918f04c0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x5606918f0500 <col:37> 'int' 2
|       `-IntegerLiteral 0x5606918f05a8 <col:43> 'int' 196605
|-CXXMethodDecl 0x5606918ee258 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x5606918ee190 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x5606918f0748 <col:64, line:75:5>
|   `-ReturnStmt 0x5606918f0738 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x5606918f0718 <col:9, col:68> 'bool'
|       `-MemberExpr 0x5606918f06e8 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x5606918ee0d8
|         `-CXXReinterpretCastExpr 0x5606918f0658 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x5606918f0640 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x5606918f0610 <col:48> 'const unsigned char *' lvalue ParmVar 0x5606918ee190 'data' 'const unsigned char *'
|-CXXMethodDecl 0x5606918ee328 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x5606918f0810 <col:34, line:80:5>
|   `-ReturnStmt 0x5606918f0800 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x5606918f07d0 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5606918f07b8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5606918f0770 <col:43> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|           `-CXXThisExpr 0x5606918f0760 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x5606918ee3f0 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x5606918f08d8 <col:46, line:85:5>
|   `-ReturnStmt 0x5606918f08c8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x5606918f0898 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x5606918f0880 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x5606918f0838 <col:49> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|           `-CXXThisExpr 0x5606918f0828 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5606918ee538 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x5606918f0958 <col:42, line:91:5>
|   `-ReturnStmt 0x5606918f0948 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x5606918f0930 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x5606918f0900 <col:9> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|         `-CXXThisExpr 0x5606918f08f0 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5606918ee628 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x5606918f0d68 <col:36, line:97:5>
|   `-ReturnStmt 0x5606918f0d58 <line:95:2, line:96:31>
|     `-BinaryOperator 0x5606918f0d38 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x5606918f0bb8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x5606918f0b98 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x5606918f0b80 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x5606918f0b68 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x5606918f09e8 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x5606918f09d0 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x5606918f0980 <col:10> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       |   |     |   `-CXXThisExpr 0x5606918f0970 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x5606918f09b0 <col:16> 'int' 2
|       |   `-ParenExpr 0x5606918f0b48 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x5606918f0b28 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x5606918f0ae0 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x5606918f0ac8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x5606918f0ab0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x5606918f0a80 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x5606918f0a68 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x5606918f0a18 <col:31> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|       |       |       |   `-CXXThisExpr 0x5606918f0a08 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x5606918f0a48 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x5606918f0b08 <col:43> 'int' 16
|       `-ParenExpr 0x5606918f0d18 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x5606918f0cf8 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x5606918f0cb0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x5606918f0c98 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x5606918f0c80 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x5606918f0c50 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x5606918f0c38 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x5606918f0be8 <col:18> 'uint16_t const[3]' lvalue ->_data 0x5606918eed18
|           |       |   `-CXXThisExpr 0x5606918f0bd8 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x5606918f0c18 <col:24> 'int' 0
|           `-IntegerLiteral 0x5606918f0cd8 <col:30> 'int' 9
|-CXXMethodDecl 0x5606918ee6e8 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x5606918f0e78 <col:35, line:111:5>
|   `-ReturnStmt 0x5606918f0e68 <line:110:2, col:22>
|     `-ExprWithCleanups 0x5606918f0e50 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x5606918f0e20 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5606918f0e08 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5606918f0de8 <col:9, col:22> 'String' (CXXTemporary 0x5606918f0de8)
|             `-CXXMemberCallExpr 0x5606918f0dc0 <col:9, col:22> 'String'
|               `-MemberExpr 0x5606918f0d90 <col:9> '<bound member function type>' ->unparse_dash 0x5606918ee868
|                 `-CXXThisExpr 0x5606918f0d80 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x5606918ee7a8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x5606918ee868 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x5606918ee928 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x5606918ee9c8 <col:44> "" ""
|-CXXConversionDecl 0x5606918eea90 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x5606918eeb38 <col:51> "" ""
|-TypedefDecl 0x5606918eebf8 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x5606918eebc0 'const EtherAddress &'
|   `-QualType 0x5606917f7361 'const EtherAddress' const
|     `-RecordType 0x5606917f7360 'EtherAddress'
|       `-CXXRecord 0x5606918ed478 'EtherAddress'
|-AccessSpecDecl 0x5606918eec50 <line:140:2, col:9> col:2 private
|-FieldDecl 0x5606918eed18 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x5606918eee68 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x5606918eed78 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5606918f1120 <col:30, line:146:5>
|   `-BinaryOperator 0x5606918f1100 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x5606918f0f08 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x5606918f0ef0 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5606918f0ea0 <col:2> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|     | |   `-CXXThisExpr 0x5606918f0e90 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x5606918f0ed0 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x5606918f10e8 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x5606918f10c8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x5606918f0fa0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x5606918f0f88 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x5606918f0f38 <col:13> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|         | |   `-CXXThisExpr 0x5606918f0f28 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x5606918f0f68 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x5606918f10b0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x5606918f1090 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x5606918f1038 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x5606918f1020 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x5606918f0fd0 <col:24> 'uint16_t [3]' lvalue ->_data 0x5606918eed18
|             | |   `-CXXThisExpr 0x5606918f0fc0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x5606918f1000 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x5606918f1078 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x5606918f1058 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x5606918eed78 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x5606918ef498 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x5606918ef498
| `-ParmVarDecl 0x5606918ef5a8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x5606918ef648 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5606918ef758 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x5606918eed18 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x5606918efae0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x5606918efa68 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x5606918efa20 <col:7> 'uint16_t [3]' xvalue ._data 0x5606918eed18
| |   |   `-CXXStaticCastExpr 0x5606918ef9f0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x5606918ef9c0 <col:7> 'EtherAddress' lvalue ParmVar 0x5606918ef758 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x5606918efac8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x5606918efaa8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x5606918efa90 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x5606918efa68 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x5606918efa20 <col:7> 'uint16_t [3]' xvalue ._data 0x5606918eed18
| |       |     `-CXXStaticCastExpr 0x5606918ef9f0 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x5606918ef9c0 <col:7> 'EtherAddress' lvalue ParmVar 0x5606918ef758 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x5606918efa80 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x5606918efb30 <col:7>
`-CXXDestructorDecl 0x5606918ef810 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>
