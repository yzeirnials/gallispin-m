
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct libdivide_u32_t
         0 |   uint32_t magic
         4 |   uint8_t more
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | class EtherAddress
         0 |   uint16_t [3] _data
           | [sizeof=6, dsize=6, align=1,
           |  nvsize=6, nvalign=1]

*** Dumping AST Record Layout
         0 | struct EtherSwitch::AddrInfo
         0 |   int port
         8 |   class Timestamp stamp
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>
         0 |   class EtherAddress first
         0 |     uint16_t [3] _data
         8 |   struct EtherSwitch::AddrInfo second
         8 |     int port
        16 |     class Timestamp stamp
        16 |       union Timestamp::rep_t _t
        16 |         int64_t x
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt
         0 |   struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> v
         0 |     class EtherAddress first
         0 |       uint16_t [3] _data
         8 |     struct EtherSwitch::AddrInfo second
         8 |       int port
        16 |       class Timestamp stamp
        16 |         union Timestamp::rep_t _t
        16 |           int64_t x
        24 |   struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt * _hashnext
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec7038a9b8 prev 0x55ec70382158 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec7038aab0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55ec7038ab40 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55ec7038abb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55ec7038ac78 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55ec7038ad40 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55ec7038aeb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55ec7038adf0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55ec7038af60 <col:24>
| `-OptimizeNoneAttr 0x55ec7038afb8 <col:34>
|-CXXMethodDecl 0x55ec7038b000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55ec7038b2b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55ec7038b0b0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ec7038b128 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55ec7038b1a8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55ec7038b370 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55ec7038b3a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55ec7038b410 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55ec7038b498 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55ec7038b7b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55ec7038b550 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ec7038b5c8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55ec7038b640 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55ec7038b6c0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55ec7038b8d0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55ec70393248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ec70393248
| `-ParmVarDecl 0x55ec70393358 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55ec703933f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ec703933f8
| `-ParmVarDecl 0x55ec70393508 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55ec70522530 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec7037d9d0 prev 0x55ec7037d750 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec7037dac8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55ec7037db58 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55ec7037dbb8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55ec7037dca8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55ec7037dda8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55ec7037df78 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55ec7037de28 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55ec7037dea0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55ec7037e108 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55ec7037e040 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55ec7037e1b0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55ec7037e2e8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55ec7037e220 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55ec7037e488 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55ec7037e3c8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55ec7037e628 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55ec7037e568 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55ec7037e6d0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55ec7037e7d0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55ec7037e8b0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7037e7b0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55ec7037e790 <col:26> 'int' 1
| `-EnumConstantDecl 0x55ec7037e860 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55ec7037e8c8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7037e840 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55ec7037e820 <col:44> 'int' 2
|-CXXMethodDecl 0x55ec7037ea10 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55ec7037e8f8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55ec7037e978 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55ec7037eb68 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55ec7037ead8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55ec7037eda8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55ec7037ec28 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55ec7037eca0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55ec7037ee58 <col:20>
| `-OptimizeNoneAttr 0x55ec7037eeb0 <col:30>
|-CXXMethodDecl 0x55ec7037efb8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55ec7037eef0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55ec7037f060 <col:20>
| `-OptimizeNoneAttr 0x55ec7037f0b8 <col:30>
|-CXXMethodDecl 0x55ec7037f108 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55ec7037f1d0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55ec7037f2e8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55ec7037f370 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55ec7037f3f8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55ec7037f480 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55ec7037f508 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55ec7037f598 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55ec7037f658 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55ec7037f6e0 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x55ec7037f768 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55ec7037f7f0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55ec7037f878 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55ec7037f900 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55ec7037f990 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55ec7037fa50 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55ec7037fae0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55ec7037fc30 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55ec7037fb98 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55ec7037fdc0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55ec7037fcf0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55ec70380070 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55ec7037fe78 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55ec7037fef8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55ec7037ff78 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55ec70380128 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55ec70380230 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ec703804c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70380210 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec703801f0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55ec703802c0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ec703804d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703802a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55ec70380280 <col:32> 'int' 20
| |-EnumConstantDecl 0x55ec70380350 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ec703804f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70380330 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55ec70380310 <col:38> 'int' 90
| |-EnumConstantDecl 0x55ec703803e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ec70380508 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703803c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55ec703803a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55ec70380470 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55ec70380520 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70380450 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55ec70380430 <col:32> 'int' 2000
|-CXXMethodDecl 0x55ec70380560 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55ec703809a0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ec70380810 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55ec70380888 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70380a70 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55ec70380bf0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55ec70380b20 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70380df8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ec70380ca8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55ec70380d20 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70380ef8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55ec70380f98 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55ec70381060 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec703810f0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55ec70381320 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703810d0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55ec703810b0 <col:36> 'int' EnumConstant 0x55ec70381060 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec70381140 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec70381190 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec703811e0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec70381230 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ec70381280 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55ec703812d0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55ec70381408 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55ec70381348 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55ec703814d0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55ec70381590 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55ec70381650 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55ec70381710 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55ec70381828 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55ec703818f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55ec70381a70 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55ec703819a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55ec70381b98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55ec70381d98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55ec70381c48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55ec70381cc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55ec7038f6e8 <col:54, line:127:5>
|   |-ParenExpr 0x55ec7038f598 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55ec7038f568 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55ec7038f258 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ec7038f230 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55ec7038f218 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55ec7038f200 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55ec7038f1d0 <col:31> 'Router *' lvalue ->_router 0x55ec7038d0b0
|   |   |         `-CXXThisExpr 0x55ec7038f1c0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ec7038f2b8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec7038f298 <col:48> 'int' 0
|   |   `-CallExpr 0x55ec7038f4c8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55ec7038f4b0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec7038f490 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec7038f508 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec7038f328 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55ec7038f520 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec7038f348 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55ec7038f538 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec7038f380 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55ec7038f550 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec7038f478 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec7038f460 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec7038f418 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55ec7038f630 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55ec7038f5c8 <col:9> 'Router *' lvalue ->_router 0x55ec7038d0b0
|   | | `-CXXThisExpr 0x55ec7038f5b8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55ec7038f618 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ec7038f5f8 <col:19> 'Router *' lvalue ParmVar 0x55ec70381c48 'r' 'Router *'
|   `-BinaryOperator 0x55ec7038f6c8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55ec7038f660 <col:9> 'int' lvalue ->_eindex 0x55ec7038d118
|     | `-CXXThisExpr 0x55ec7038f650 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55ec7038f6b0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7038f690 <col:19> 'int' lvalue ParmVar 0x55ec70381cc8 'eindex' 'int'
|-CXXMethodDecl 0x55ec70381f20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55ec70381e58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55ec70381ff0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55ec703820b8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55ec70382158 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55ec703823a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55ec70382220 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55ec703822a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55ec70382458 <col:20>
| `-OptimizeNoneAttr 0x55ec703824b0 <col:30>
|-CXXMethodDecl 0x55ec703825b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ec703824f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55ec70382660 <col:20>
| `-OptimizeNoneAttr 0x55ec703826b8 <col:30>
|-CXXMethodDecl 0x55ec70382788 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ec703826f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55ec70382830 <col:20>
| `-OptimizeNoneAttr 0x55ec70382888 <col:30>
|-CXXMethodDecl 0x55ec70382a18 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55ec703828c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55ec70382940 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55ec70382ba8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ec70382ae0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ec70382cf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ec70382c68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ec70382e48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ec70382db8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ec70382f98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ec70382f08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ec70383258 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55ec70383050 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55ec703830d0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55ec70383178 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55ec70383330 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55ec703833f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55ec703836c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ec70383570 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55ec703835e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55ec703837e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55ec703839c0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55ec703838a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55ec70383920 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55ec70383ba8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55ec70383a88 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55ec70383b08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55ec70383f18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ec70383c68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ec70383ce0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ec70383d60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ec7038ecd0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7038ecb0 <col:106> 'int' 0
| `-ParmVarDecl 0x55ec70383dd8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ed08 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ece8 <col:126> 'int' 0
|-CXXMethodDecl 0x55ec703842b8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ec70383fe8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ec70384080 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ec70384100 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55ec70384178 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ed40 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ed20 <col:114> 'int' 0
|-CXXMethodDecl 0x55ec70384648 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ec70384390 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55ec70384408 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ec70384488 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55ec7038ed58 <col:96> 'int' 0
| `-ParmVarDecl 0x55ec70384500 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ed98 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ed78 <col:116> 'int' 0
|-CXXMethodDecl 0x55ec703849c8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ec70384718 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ec70384790 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70384810 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ec7038edd0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7038edb0 <col:109> 'int' 0
| `-ParmVarDecl 0x55ec70384888 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ee08 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ede8 <col:129> 'int' 0
|-CXXMethodDecl 0x55ec70384d48 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ec70384a98 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ec70384b10 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70384b90 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55ec70384c08 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ee40 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ee20 <col:117> 'int' 0
|-CXXMethodDecl 0x55ec703850d8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ec70384e20 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70384e98 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70384f18 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55ec7038ee58 <col:99> 'int' 0
| `-ParmVarDecl 0x55ec70384f90 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ec7038ee98 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ec7038ee78 <col:119> 'int' 0
|-CXXMethodDecl 0x55ec703854f8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55ec703851a8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ec70385228 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ec703852a0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70385320 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ec7038eed0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7038eeb0 <col:108> 'int' 0
| `-ParmVarDecl 0x55ec703853a0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55ec7038ef08 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55ec7038eee8 <col:141> 'int' 0
|-CXXMethodDecl 0x55ec70385918 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ec703855d0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ec70385650 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ec703856c8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70385748 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55ec703857c8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ec7038ef20 <col:121> 'int' 0
|-CXXMethodDecl 0x55ec70385d48 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ec703859f8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55ec70385a78 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55ec70385af0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70385b70 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55ec7038ef40 <col:98> 'int' 0
| `-ParmVarDecl 0x55ec70385bf0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ec7038ef60 <col:123> 'int' 0
|-CXXMethodDecl 0x55ec70386010 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55ec70385e20 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ec70385ea0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55ec70385f20 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55ec7038ef80 <col:80> 'int' 0
|-EnumDecl 0x55ec703860c8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55ec703861d0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ec70386460 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703861b0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55ec70386190 <col:42> 'int' 1
| |-EnumConstantDecl 0x55ec70386260 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ec70386478 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70386240 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55ec70386220 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ec703862f0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ec70386490 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703862d0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55ec703862b0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55ec70386380 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ec703864a8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70386360 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55ec70386340 <col:36> 'int' 7
| `-EnumConstantDecl 0x55ec70386410 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55ec703864c0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec703863f0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55ec703863d0 <col:34> 'int' 6
|-CXXMethodDecl 0x55ec70386778 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55ec703864e8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55ec70386588 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ec70386608 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55ec70386680 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55ec7038f038 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55ec7038f020 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55ec7038f008 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55ec7038efe8 <col:98, col:105> 'String' (CXXTemporary 0x55ec7038efe8)
|           `-CXXTemporaryObjectExpr 0x55ec7038efb0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55ec70386a18 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55ec70386848 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ec703868c0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ec70386938 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ec7038f0e8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ec7038f0d0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ec7038f0b8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ec7038f098 <col:94, col:101> 'String' (CXXTemporary 0x55ec7038f098)
| |         `-CXXTemporaryObjectExpr 0x55ec7038f060 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55ec7038f8d0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55ec7038f848 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55ec7038f818 <col:9> '<bound member function type>' ->add_task_handlers 0x55ec70386778
|     | `-CXXThisExpr 0x55ec7038f808 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ec7038f888 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7038f788 <col:27> 'Task *' lvalue ParmVar 0x55ec70386848 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ec7038f8a0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7038f7a8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55ec703868c0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55ec7038f8b8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ec7038f7c8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ec70386410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ec7038f7e8 <col:62> 'const String' lvalue ParmVar 0x55ec70386938 'prefix' 'const String &'
|-CXXMethodDecl 0x55ec70386c28 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55ec70386ae0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ec70386b58 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ec7038f198 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ec7038f180 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ec7038f168 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ec7038f148 <col:70, col:77> 'String' (CXXTemporary 0x55ec7038f148)
| |         `-CXXTemporaryObjectExpr 0x55ec7038f110 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55ec7038faa8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55ec7038fa20 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55ec7038f9f0 <col:9> '<bound member function type>' ->add_task_handlers 0x55ec70386778
|     | `-CXXThisExpr 0x55ec7038f9e0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ec7038fa60 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7038f960 <col:27> 'Task *' lvalue ParmVar 0x55ec70386ae0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ec7038fa78 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55ec7038f980 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55ec7038fa90 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ec7038f9a0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ec70386410 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ec7038f9c0 <col:57> 'const String' lvalue ParmVar 0x55ec70386b58 'prefix' 'const String &'
|-CXXMethodDecl 0x55ec70386f08 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55ec70386cf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70386d70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70386de8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55ec703871b8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55ec70386fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70387058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec703870d8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55ec703874a8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ec70387288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70387308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70387380 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55ec70387758 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55ec70387578 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703875f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70387678 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55ec70387a08 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55ec70387828 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703878a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70387928 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55ec70387cb8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55ec70387ad8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70387b58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70387bd0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55ec70387f68 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55ec70387d88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70387e08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70387e88 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55ec70388278 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55ec70388090 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70388110 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70388190 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55ec70388558 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55ec70388348 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703883c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70388470 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55ec70388838 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55ec70388628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703886a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70388750 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55ec70388aa0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ec70388908 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ec70388988 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ec70388a00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55ec70388d48 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55ec70388b70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ec70388bf0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ec70388c68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55ec70388ff8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55ec70388e18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70388e98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70388f18 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55ec703892a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55ec703890c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70389148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec703891c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55ec70389558 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55ec70389378 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703893f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70389470 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55ec70389828 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55ec70389628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec703896a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ec70389748 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55ec70389b58 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55ec703898f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ec70389978 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55ec703899f0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55ec70389a68 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec7038f1b0 <col:93> 'bool' false
|-CXXMethodDecl 0x55ec70389d40 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ec70389c28 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55ec70389ca8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55ec70389f18 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ec70389e00 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55ec70389e80 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55ec7038a1f8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ec70389fd8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55ec7038a050 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55ec7038a0d0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55ec7038a148 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55ec7038a4e8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ec7038a2c8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55ec7038a340 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55ec7038a3c0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55ec7038a438 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55ec7038a720 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55ec7038a5c0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55ec7038a640 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55ec7038a908 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55ec7038a7e8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55ec7038a868 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55ec7038a9b8 prev 0x55ec70382158 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec7038aab0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55ec7038ab40 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55ec7038abb8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55ec7038ac78 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55ec7038ad40 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55ec7038aeb8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55ec7038adf0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55ec7038af60 <col:24>
| | `-OptimizeNoneAttr 0x55ec7038afb8 <col:34>
| |-CXXMethodDecl 0x55ec7038b000 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55ec7038b2b8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55ec7038b0b0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ec7038b128 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55ec7038b1a8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55ec7038b370 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55ec7038b3a8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55ec7038b410 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55ec7038b498 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55ec7038b7b8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55ec7038b550 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ec7038b5c8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55ec7038b640 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55ec7038b6c0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55ec7038b8d0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55ec70393248 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ec70393248
| | `-ParmVarDecl 0x55ec70393358 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55ec703933f8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ec703933f8
| | `-ParmVarDecl 0x55ec70393508 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55ec70522530 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec7038b948 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55ec7038b9e8 <col:38> "" ""
|-CXXMethodDecl 0x55ec7038ba78 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55ec7038bb18 <col:44> "" ""
|-AccessSpecDecl 0x55ec7038bb88 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55ec7038bbb0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55ec7038bcb0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55ec7038bd00 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7038bc90 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55ec7038bc70 <col:27> 'int' 4
|-FieldDecl 0x55ec7038bdb8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55ec7038bf68 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55ec7038c020 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55ec7038d0b0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55ec7038d118 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55ec7038d268 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55ec7038d1a8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55ec7038d418 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55ec7038d328 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55ec7038d5f8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55ec7038d4d8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55ec7038d558 <col:25> col:28 'int'
|-CXXMethodDecl 0x55ec7038d8a0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55ec7038d6c0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55ec7038d740 <col:28> col:31 'int'
| `-ParmVarDecl 0x55ec7038d7b8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55ec7038d958 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55ec7038da20 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55ec7038da70 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55ec7038dac0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55ec7038dca0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55ec7038db50 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55ec7038dbc8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec7038df48 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55ec7038dd68 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55ec7038dde8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55ec7038de60 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55ec7038e168 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55ec7038e018 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55ec7038e098 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55ec7038e4a0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55ec7038e228 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55ec7038e2a8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55ec7038e320 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55ec7038e3a0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55ec7038e688 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ec7038e570 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55ec7038e5f0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55ec7038e7d8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55ec7038e748 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55ec7038eb58 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55ec7038e898 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55ec7038e918 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55ec7038e990 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55ec7038ea10 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55ec7038ec70 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class HashContainer_rep<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >
         0 |   class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (base) (empty)
         0 |   struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** buckets
         8 |   uint32_t nbuckets
        12 |   uint32_t first_bucket
        16 |   size_t size
        24 |   struct libdivide_u32_t bucket_divider
        24 |     uint32_t magic
        28 |     uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >
         0 |   class HashContainer_rep<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |     class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (base) (empty)
         0 |     struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** buckets
         8 |     uint32_t nbuckets
        12 |     uint32_t first_bucket
        16 |     size_t size
        24 |     struct libdivide_u32_t bucket_divider
        24 |       uint32_t magic
        28 |       uint8_t more
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashAllocator
         0 |   struct HashAllocator::link * _free
         8 |   struct HashAllocator::buffer * _buffer
        16 |   size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class SizedHashAllocator<32>
         0 |   class HashAllocator (base)
         0 |     struct HashAllocator::link * _free
         8 |     struct HashAllocator::buffer * _buffer
        16 |     size_t _size
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>
         0 |   class HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |     class HashContainer_rep<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |       class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (base) (empty)
         0 |       struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** buckets
         8 |       uint32_t nbuckets
        12 |       uint32_t first_bucket
        16 |       size_t size
        24 |       struct libdivide_u32_t bucket_divider
        24 |         uint32_t magic
        28 |         uint8_t more
        32 |   class SizedHashAllocator<32> _alloc
        32 |     class HashAllocator (base)
        32 |       struct HashAllocator::link * _free
        40 |       struct HashAllocator::buffer * _buffer
        48 |       size_t _size
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashTable<class EtherAddress, struct EtherSwitch::AddrInfo>
         0 |   class HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void> _rep
         0 |     class HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |       class HashContainer_rep<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |         class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (base) (empty)
         0 |         struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** buckets
         8 |         uint32_t nbuckets
        12 |         uint32_t first_bucket
        16 |         size_t size
        24 |         struct libdivide_u32_t bucket_divider
        24 |           uint32_t magic
        28 |           uint8_t more
        32 |     class SizedHashAllocator<32> _alloc
        32 |       class HashAllocator (base)
        32 |         struct HashAllocator::link * _free
        40 |         struct HashAllocator::buffer * _buffer
        48 |         size_t _size
        56 |   struct EtherSwitch::AddrInfo _default_value
        56 |     int port
        64 |     class Timestamp stamp
        64 |       union Timestamp::rep_t _t
        64 |         int64_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class EtherSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class HashTable<class EtherAddress, struct EtherSwitch::AddrInfo> _table
       112 |     class HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void> _rep
       112 |       class HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
       112 |         class HashContainer_rep<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
       112 |           class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> (base) (empty)
       112 |           struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** buckets
       120 |           uint32_t nbuckets
       124 |           uint32_t first_bucket
       128 |           size_t size
       136 |           struct libdivide_u32_t bucket_divider
       136 |             uint32_t magic
       140 |             uint8_t more
       144 |       class SizedHashAllocator<32> _alloc
       144 |         class HashAllocator (base)
       144 |           struct HashAllocator::link * _free
       152 |           struct HashAllocator::buffer * _buffer
       160 |           size_t _size
       168 |     struct EtherSwitch::AddrInfo _default_value
       168 |       int port
       176 |       class Timestamp stamp
       176 |         union Timestamp::rep_t _t
       176 |           int64_t x
       184 |   uint32_t _timeout
           | [sizeof=192, dsize=188, align=8,
           |  nvsize=188, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70422d28 <../dummy_inc/click/hashcontainer.hh:13:1, col:29> line:33:7 class HashContainer_adapter definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|-CXXRecordDecl 0x55ec70427458 prev 0x55ec70422d28 <col:1, col:7> col:7 implicit class HashContainer_adapter
|-AccessSpecDecl 0x55ec704274e8 <col:31, col:37> col:31 public
|-TypedefDecl 0x55ec70428fe0 <line:34:5, col:34> col:34 referenced key_type 'typename elt::key_type':'const EtherAddress'
| `-ElaboratedType 0x55ec70428f90 'typename elt::key_type' sugar
|   `-TypedefType 0x55ec70428f70 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt::key_type' sugar
|     |-Typedef 0x55ec70427990 'key_type'
|     `-ElaboratedType 0x55ec70426fa0 'typename Pair<const EtherAddress, AddrInfo>::key_type' sugar
|       `-TypedefType 0x55ec70426f80 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_type' sugar
|         |-Typedef 0x55ec70423310 'key_type'
|         `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|           |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec70302138 'T'
|           `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|             `-RecordType 0x55ec7037d9b0 'EtherAddress'
|               `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704290b0 <line:35:5, col:45> col:45 key_const_reference 'typename elt::key_const_reference':'const EtherAddress &'
| `-ElaboratedType 0x55ec70429060 'typename elt::key_const_reference' sugar
|   `-TypedefType 0x55ec70427a80 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt::key_const_reference' sugar
|     |-Typedef 0x55ec70427a28 'key_const_reference'
|     `-ElaboratedType 0x55ec70427090 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference' sugar
|       `-TypedefType 0x55ec70427070 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_const_reference' sugar
|         |-Typedef 0x55ec704233a8 'key_const_reference'
|         `-LValueReferenceType 0x55ec70423370 'const EtherAddress &'
|           `-QualType 0x55ec704231e1 'const const EtherAddress' const
|             `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|               |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|               | `-TemplateTypeParm 0x55ec70302138 'T'
|               `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|                 `-RecordType 0x55ec7037d9b0 'EtherAddress'
|                   `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-CXXMethodDecl 0x55ec704292a0 <line:36:5, line:38:5> line:36:16 hashnext 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *&(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)' static
| `-ParmVarDecl 0x55ec704291a8 <col:25, col:28> col:28 e 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-CXXMethodDecl 0x55ec704294d8 <line:39:5, line:41:5> line:39:32 hashkey 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_const_reference (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)' static
| `-ParmVarDecl 0x55ec704293e8 <col:40, col:49> col:49 e 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-CXXMethodDecl 0x55ec70429738 <line:42:5, line:44:5> line:42:17 hashkeyeq 'bool (const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_type &, const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_type &)' static
| |-ParmVarDecl 0x55ec704295e8 <col:27, col:43> col:43 a 'const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_type &'
| `-ParmVarDecl 0x55ec70429660 <col:46, col:62> col:62 b 'const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_type &'
|-CXXConstructorDecl 0x55ec7042d7e8 <line:33:7> col:7 implicit constexpr HashContainer_adapter 'void (const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &)' inline default trivial noexcept-unevaluated 0x55ec7042d7e8
| `-ParmVarDecl 0x55ec7042d8f8 <col:7> col:7 'const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &'
|-CXXConstructorDecl 0x55ec7042d998 <col:7> col:7 implicit constexpr HashContainer_adapter 'void (HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &&)' inline default trivial noexcept-unevaluated 0x55ec7042d998
| `-ParmVarDecl 0x55ec7042daa8 <col:7> col:7 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &&'
|-CXXDestructorDecl 0x55ec7042dcb8 <col:7> col:7 implicit ~HashContainer_adapter 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec7042ddf8 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &(const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &)' inline default trivial noexcept-unevaluated 0x55ec7042ddf8
| `-ParmVarDecl 0x55ec7042df08 <col:7> col:7 'const HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &'
`-CXXMethodDecl 0x55ec7042df78 <col:7> col:7 implicit constexpr operator= 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &(HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &&)' inline default trivial noexcept-unevaluated 0x55ec7042df78
  `-ParmVarDecl 0x55ec7042e088 <col:7> col:7 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> &&'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_adapter = type { i8 }
  NonVirtualBaseLLVMType:%class.HashContainer_adapter = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec703963b8 prev 0x55ec7037d920 <../dummy_inc/click/etheraddress.hh:9:1, line:148:1> line:9:7 referenced class EtherAddress definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-PackedAttr 0x55ec70397e28 <line:148:18>
|-CXXRecordDecl 0x55ec703964b0 <line:9:1, col:7> col:7 implicit referenced class EtherAddress
|-AccessSpecDecl 0x55ec70396540 <col:22, col:28> col:22 public
|-TypedefDecl 0x55ec70396578 <line:11:5, col:32> col:32 uninitialized_t 'uninitialized_type'
| `-RecordType 0x55ec6ff712b0 'uninitialized_type'
|   `-CXXRecord 0x55ec6ff71218 'uninitialized_type'
|-CXXConstructorDecl 0x55ec70396608 <line:14:5, line:16:5> line:14:12 EtherAddress 'void ()' inline
| `-CompoundStmt 0x55ec70398128 <col:27, line:16:5>
|   `-BinaryOperator 0x55ec70398108 <line:15:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55ec70397f10 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55ec70397ef8 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55ec70397ea8 <col:2> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|     | |   `-CXXThisExpr 0x55ec70397e98 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55ec70397ed8 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55ec703980f0 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55ec703980d0 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55ec70397fa8 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55ec70397f90 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55ec70397f40 <col:13> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|         | |   `-CXXThisExpr 0x55ec70397f30 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55ec70397f70 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55ec703980b8 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55ec70398098 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55ec70398040 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55ec70398028 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55ec70397fd8 <col:24> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|             | |   `-CXXThisExpr 0x55ec70397fc8 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55ec70398008 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55ec70398080 <col:35> 'uint16_t':'unsigned short' <IntegralCast>
|               `-IntegerLiteral 0x55ec70398060 <col:35> 'int' 0
|-CXXConstructorDecl 0x55ec70396758 <line:22:5, line:24:5> line:22:21 EtherAddress 'void (const unsigned char *)' inline
| |-ParmVarDecl 0x55ec703966c8 <col:34, col:55> col:55 used data 'const unsigned char *'
| `-CompoundStmt 0x55ec703982f0 <col:61, line:24:5>
|   `-CallExpr 0x55ec70398240 <line:23:2, col:23> 'void *'
|     |-ImplicitCastExpr 0x55ec70398228 <col:2> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55ec70398208 <col:2> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55ec7007b028 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
|     |-ImplicitCastExpr 0x55ec70398290 <col:9> 'void *' <BitCast>
|     | `-ImplicitCastExpr 0x55ec70398278 <col:9> 'uint16_t *' <ArrayToPointerDecay>
|     |   `-MemberExpr 0x55ec70398198 <col:9> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|     |     `-CXXThisExpr 0x55ec70398188 <col:9> 'EtherAddress *' implicit this
|     |-ImplicitCastExpr 0x55ec703982c0 <col:16> 'const void *' <BitCast>
|     | `-ImplicitCastExpr 0x55ec703982a8 <col:16> 'const unsigned char *' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ec703981c8 <col:16> 'const unsigned char *' lvalue ParmVar 0x55ec703966c8 'data' 'const unsigned char *'
|     `-ImplicitCastExpr 0x55ec703982d8 <col:22> 'size_t':'unsigned long' <IntegralCast>
|       `-IntegerLiteral 0x55ec703981e8 <col:22> 'int' 6
|-CXXConstructorDecl 0x55ec703968a8 <line:27:5, line:29:5> line:27:12 EtherAddress 'void (const uninitialized_type &)' inline
| |-ParmVarDecl 0x55ec70396818 <col:25, col:51> col:51 used unused 'const uninitialized_type &'
| `-CompoundStmt 0x55ec70398360 <col:59, line:29:5>
|   `-CStyleCastExpr 0x55ec70398338 <line:28:2, col:9> 'void' <ToVoid>
|     `-DeclRefExpr 0x55ec70398308 <col:9> 'const uninitialized_type' lvalue ParmVar 0x55ec70396818 'unused' 'const uninitialized_type &'
|-CXXMethodDecl 0x55ec703969a8 <line:32:5, line:34:5> line:32:25 used make_broadcast 'EtherAddress ()' static
| `-CompoundStmt 0x55ec70398aa8 <col:42, line:34:5>
|   `-ReturnStmt 0x55ec70398a98 <line:33:2, col:28>
|     `-ExprWithCleanups 0x55ec70398a80 <col:9, col:28> 'EtherAddress'
|       `-CXXConstructExpr 0x55ec70398a50 <col:9, col:28> 'EtherAddress' 'void (EtherAddress &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec70398888 <col:9, col:28> 'EtherAddress' xvalue
|           `-CXXFunctionalCastExpr 0x55ec70398800 <col:9, col:28> 'EtherAddress' functional cast to class EtherAddress <ConstructorConversion>
|             `-CXXConstructExpr 0x55ec703986f0 <col:9, col:28> 'EtherAddress' 'void (uint16_t)'
|               `-ImplicitCastExpr 0x55ec703986d8 <col:22> 'uint16_t':'unsigned short' <IntegralCast>
|                 `-IntegerLiteral 0x55ec70398388 <col:22> 'int' 65535
|-CXXMethodDecl 0x55ec70396a68 <line:36:5, col:70> col:32 broadcast 'EtherAddress ()' static inline
| `-DeprecatedAttr 0x55ec70396b08 <col:59> "" ""
|-TypedefDecl 0x55ec70396c88 <line:39:5, col:59> col:34 referenced unspecified_bool_type 'bool (EtherAddress::*)() const'
| `-MemberPointerType 0x55ec70396c00 'bool (EtherAddress::*)() const'
|   |-RecordType 0x55ec7037d9b0 'EtherAddress'
|   | `-CXXRecord 0x55ec703963b8 'EtherAddress'
|   `-ParenType 0x55ec70396ba0 'bool () const' sugar
|     `-FunctionProtoType 0x55ec6fec4030 'bool () const' const cdecl
|       `-BuiltinType 0x55ec6fe19540 'bool'
|-CXXConversionDecl 0x55ec70396dc8 <line:41:5, line:43:5> line:41:12 operator bool (EtherAddress::*)() const 'EtherAddress::unspecified_bool_type () const' inline
| `-CompoundStmt 0x55ec70398e88 <col:51, line:43:5>
|   `-ReturnStmt 0x55ec70398e78 <line:42:2, col:70>
|     `-ConditionalOperator 0x55ec70398e48 <col:9, col:70> 'bool (EtherAddress::*)() const'
|       |-BinaryOperator 0x55ec70398d70 <col:9, col:40> 'bool' '||'
|       | |-BinaryOperator 0x55ec70398c88 <col:9, col:28> 'bool' '||'
|       | | |-ImplicitCastExpr 0x55ec70398c40 <col:9, col:16> 'bool' <IntegralToBoolean>
|       | | | `-ImplicitCastExpr 0x55ec70398c28 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55ec70398b70 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55ec70398b58 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55ec70398ad0 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       | | |     |   `-CXXThisExpr 0x55ec70398ac0 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55ec70398b00 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55ec70398c70 <col:21, col:28> 'bool' <IntegralToBoolean>
|       | |   `-ImplicitCastExpr 0x55ec70398c58 <col:21, col:28> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55ec70398c08 <col:21, col:28> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55ec70398bf0 <col:21> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55ec70398ba0 <col:21> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       | |       |   `-CXXThisExpr 0x55ec70398b90 <col:21> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55ec70398bd0 <col:27> 'int' 1
|       | `-ImplicitCastExpr 0x55ec70398d58 <col:33, col:40> 'bool' <IntegralToBoolean>
|       |   `-ImplicitCastExpr 0x55ec70398d40 <col:33, col:40> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55ec70398d20 <col:33, col:40> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55ec70398d08 <col:33> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55ec70398cb8 <col:33> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       |       |   `-CXXThisExpr 0x55ec70398ca8 <col:33> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55ec70398ce8 <col:39> 'int' 2
|       |-UnaryOperator 0x55ec70398df8 <col:44, col:59> 'bool (EtherAddress::*)() const' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55ec70398dc8 <col:45, col:59> 'bool () const' CXXMethod 0x55ec70396e98 'is_group' 'bool () const'
|       `-ImplicitCastExpr 0x55ec70398e30 <col:70> 'bool (EtherAddress::*)() const' <NullToMemberPointer>
|         `-IntegerLiteral 0x55ec70398e10 <col:70> 'int' 0
|-CXXMethodDecl 0x55ec70396e98 <line:49:5, line:51:5> line:49:17 used is_group 'bool () const' inline
| `-CompoundStmt 0x55ec70399048 <col:34, line:51:5>
|   `-ReturnStmt 0x55ec70399038 <line:50:2, col:21>
|     `-ImplicitCastExpr 0x55ec70399020 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55ec70399000 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55ec70398fe8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ec70398fd0 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ec70398f90 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55ec70398f50 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55ec70398f20 <col:9> '<bound member function type>' ->data 0x55ec70397330
|         |     |   `-CXXThisExpr 0x55ec70398f10 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55ec70398f70 <col:16> 'int' 0
|         `-IntegerLiteral 0x55ec70398fb0 <col:21> 'int' 1
|-CXXMethodDecl 0x55ec70396f58 <line:57:5, line:59:5> line:57:17 is_local 'bool () const' inline
| `-CompoundStmt 0x55ec70399208 <col:34, line:59:5>
|   `-ReturnStmt 0x55ec703991f8 <line:58:2, col:21>
|     `-ImplicitCastExpr 0x55ec703991e0 <col:9, col:21> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55ec703991c0 <col:9, col:21> 'int' '&'
|         |-ImplicitCastExpr 0x55ec703991a8 <col:9, col:17> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ec70399190 <col:9, col:17> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ec70399150 <col:9, col:17> 'const unsigned char' lvalue
|         |     |-CXXMemberCallExpr 0x55ec70399110 <col:9, col:14> 'const unsigned char *'
|         |     | `-MemberExpr 0x55ec703990e0 <col:9> '<bound member function type>' ->data 0x55ec70397330
|         |     |   `-CXXThisExpr 0x55ec703990d0 <col:9> 'const EtherAddress *' implicit this
|         |     `-IntegerLiteral 0x55ec70399130 <col:16> 'int' 0
|         `-IntegerLiteral 0x55ec70399170 <col:21> 'int' 2
|-CXXMethodDecl 0x55ec70397018 <line:64:5, line:66:5> line:64:17 used is_broadcast 'bool () const' inline
| `-CompoundStmt 0x55ec70399508 <col:38, line:66:5>
|   `-ReturnStmt 0x55ec703994f8 <line:65:2, col:43>
|     `-BinaryOperator 0x55ec703994d8 <col:9, col:43> 'bool' '=='
|       |-BinaryOperator 0x55ec70399498 <col:9, col:38> 'int' '+'
|       | |-BinaryOperator 0x55ec703993b0 <col:9, col:27> 'int' '+'
|       | | |-ImplicitCastExpr 0x55ec70399368 <col:9, col:16> 'int' <IntegralCast>
|       | | | `-ImplicitCastExpr 0x55ec70399350 <col:9, col:16> 'uint16_t':'unsigned short' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x55ec70399298 <col:9, col:16> 'const uint16_t':'const unsigned short' lvalue
|       | | |     |-ImplicitCastExpr 0x55ec70399280 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       | | |     | `-MemberExpr 0x55ec70399230 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       | | |     |   `-CXXThisExpr 0x55ec70399220 <col:9> 'const EtherAddress *' implicit this
|       | | |     `-IntegerLiteral 0x55ec70399260 <col:15> 'int' 0
|       | | `-ImplicitCastExpr 0x55ec70399398 <col:20, col:27> 'int' <IntegralCast>
|       | |   `-ImplicitCastExpr 0x55ec70399380 <col:20, col:27> 'uint16_t':'unsigned short' <LValueToRValue>
|       | |     `-ArraySubscriptExpr 0x55ec70399330 <col:20, col:27> 'const uint16_t':'const unsigned short' lvalue
|       | |       |-ImplicitCastExpr 0x55ec70399318 <col:20> 'const uint16_t *' <ArrayToPointerDecay>
|       | |       | `-MemberExpr 0x55ec703992c8 <col:20> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       | |       |   `-CXXThisExpr 0x55ec703992b8 <col:20> 'const EtherAddress *' implicit this
|       | |       `-IntegerLiteral 0x55ec703992f8 <col:26> 'int' 1
|       | `-ImplicitCastExpr 0x55ec70399480 <col:31, col:38> 'int' <IntegralCast>
|       |   `-ImplicitCastExpr 0x55ec70399468 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     `-ArraySubscriptExpr 0x55ec70399448 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |-ImplicitCastExpr 0x55ec70399430 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       | `-MemberExpr 0x55ec703993e0 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       |       |   `-CXXThisExpr 0x55ec703993d0 <col:31> 'const EtherAddress *' implicit this
|       |       `-IntegerLiteral 0x55ec70399410 <col:37> 'int' 2
|       `-IntegerLiteral 0x55ec703994b8 <col:43> 'int' 196605
|-CXXMethodDecl 0x55ec70397198 <line:69:5, line:75:5> line:69:24 is_broadcast 'bool (const unsigned char *)' static inline
| |-ParmVarDecl 0x55ec703970d0 <col:37, col:58> col:58 used data 'const unsigned char *'
| `-CompoundStmt 0x55ec70399658 <col:64, line:75:5>
|   `-ReturnStmt 0x55ec70399648 <line:71:2, col:68>
|     `-CXXMemberCallExpr 0x55ec70399628 <col:9, col:68> 'bool'
|       `-MemberExpr 0x55ec703995f8 <col:9, col:55> '<bound member function type>' ->is_broadcast 0x55ec70397018
|         `-CXXReinterpretCastExpr 0x55ec70399568 <col:9, col:52> 'const EtherAddress *' reinterpret_cast<const class EtherAddress *> <BitCast>
|           `-ImplicitCastExpr 0x55ec70399550 <col:48> 'const unsigned char *' <LValueToRValue> part_of_explicit_cast
|             `-DeclRefExpr 0x55ec70399520 <col:48> 'const unsigned char *' lvalue ParmVar 0x55ec703970d0 'data' 'const unsigned char *'
|-CXXMethodDecl 0x55ec70397268 <line:78:5, line:80:5> line:78:27 data 'unsigned char *()' inline
| `-CompoundStmt 0x55ec70399720 <col:34, line:80:5>
|   `-ReturnStmt 0x55ec70399710 <line:79:2, col:48>
|     `-CXXReinterpretCastExpr 0x55ec703996e0 <col:9, col:48> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55ec703996c8 <col:43> 'uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55ec70399680 <col:43> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|           `-CXXThisExpr 0x55ec70399670 <col:43> 'EtherAddress *' implicit this
|-CXXMethodDecl 0x55ec70397330 <line:83:5, line:85:5> line:83:33 used data 'const unsigned char *() const' inline
| `-CompoundStmt 0x55ec703997e8 <col:46, line:85:5>
|   `-ReturnStmt 0x55ec703997d8 <line:84:2, col:54>
|     `-CXXReinterpretCastExpr 0x55ec703997a8 <col:9, col:54> 'const unsigned char *' reinterpret_cast<const unsigned char *> <BitCast>
|       `-ImplicitCastExpr 0x55ec70399790 <col:49> 'const uint16_t *' <ArrayToPointerDecay> part_of_explicit_cast
|         `-MemberExpr 0x55ec70399748 <col:49> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|           `-CXXThisExpr 0x55ec70399738 <col:49> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55ec70397478 <line:89:5, line:91:5> line:89:28 used sdata 'const uint16_t *() const' inline
| `-CompoundStmt 0x55ec70399868 <col:42, line:91:5>
|   `-ReturnStmt 0x55ec70399858 <line:90:2, col:9>
|     `-ImplicitCastExpr 0x55ec70399840 <col:9> 'const uint16_t *' <ArrayToPointerDecay>
|       `-MemberExpr 0x55ec70399810 <col:9> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|         `-CXXThisExpr 0x55ec70399800 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55ec70397568 <line:94:5, line:97:5> line:94:19 hashcode 'size_t () const' inline
| `-CompoundStmt 0x55ec70399c78 <col:36, line:97:5>
|   `-ReturnStmt 0x55ec70399c68 <line:95:2, line:96:31>
|     `-BinaryOperator 0x55ec70399c48 <line:95:9, line:96:31> 'unsigned long' '^'
|       |-ParenExpr 0x55ec70399ac8 <line:95:9, col:46> 'unsigned long'
|       | `-BinaryOperator 0x55ec70399aa8 <col:10, col:45> 'unsigned long' '|'
|       |   |-ImplicitCastExpr 0x55ec70399a90 <col:10, col:17> 'unsigned long' <IntegralCast>
|       |   | `-ImplicitCastExpr 0x55ec70399a78 <col:10, col:17> 'uint16_t':'unsigned short' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x55ec703998f8 <col:10, col:17> 'const uint16_t':'const unsigned short' lvalue
|       |   |     |-ImplicitCastExpr 0x55ec703998e0 <col:10> 'const uint16_t *' <ArrayToPointerDecay>
|       |   |     | `-MemberExpr 0x55ec70399890 <col:10> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       |   |     |   `-CXXThisExpr 0x55ec70399880 <col:10> 'const EtherAddress *' implicit this
|       |   |     `-IntegerLiteral 0x55ec703998c0 <col:16> 'int' 2
|       |   `-ParenExpr 0x55ec70399a58 <col:21, col:45> 'size_t':'unsigned long'
|       |     `-BinaryOperator 0x55ec70399a38 <col:22, col:43> 'size_t':'unsigned long' '<<'
|       |       |-CStyleCastExpr 0x55ec703999f0 <col:22, col:38> 'size_t':'unsigned long' <NoOp>
|       |       | `-ImplicitCastExpr 0x55ec703999d8 <col:31, col:38> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|       |       |   `-ImplicitCastExpr 0x55ec703999c0 <col:31, col:38> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|       |       |     `-ArraySubscriptExpr 0x55ec70399990 <col:31, col:38> 'const uint16_t':'const unsigned short' lvalue
|       |       |       |-ImplicitCastExpr 0x55ec70399978 <col:31> 'const uint16_t *' <ArrayToPointerDecay>
|       |       |       | `-MemberExpr 0x55ec70399928 <col:31> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|       |       |       |   `-CXXThisExpr 0x55ec70399918 <col:31> 'const EtherAddress *' implicit this
|       |       |       `-IntegerLiteral 0x55ec70399958 <col:37> 'int' 1
|       |       `-IntegerLiteral 0x55ec70399a18 <col:43> 'int' 16
|       `-ParenExpr 0x55ec70399c28 <line:96:8, col:31> 'size_t':'unsigned long'
|         `-BinaryOperator 0x55ec70399c08 <col:9, col:30> 'size_t':'unsigned long' '<<'
|           |-CStyleCastExpr 0x55ec70399bc0 <col:9, col:25> 'size_t':'unsigned long' <NoOp>
|           | `-ImplicitCastExpr 0x55ec70399ba8 <col:18, col:25> 'size_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           |   `-ImplicitCastExpr 0x55ec70399b90 <col:18, col:25> 'uint16_t':'unsigned short' <LValueToRValue> part_of_explicit_cast
|           |     `-ArraySubscriptExpr 0x55ec70399b60 <col:18, col:25> 'const uint16_t':'const unsigned short' lvalue
|           |       |-ImplicitCastExpr 0x55ec70399b48 <col:18> 'const uint16_t *' <ArrayToPointerDecay>
|           |       | `-MemberExpr 0x55ec70399af8 <col:18> 'uint16_t const[3]' lvalue ->_data 0x55ec70397c28
|           |       |   `-CXXThisExpr 0x55ec70399ae8 <col:18> 'const EtherAddress *' implicit this
|           |       `-IntegerLiteral 0x55ec70399b28 <col:24> 'int' 0
|           `-IntegerLiteral 0x55ec70399be8 <col:30> 'int' 9
|-CXXMethodDecl 0x55ec70397628 <line:109:5, line:111:5> line:109:19 used unparse 'String () const' inline
| `-CompoundStmt 0x55ec70399d88 <col:35, line:111:5>
|   `-ReturnStmt 0x55ec70399d78 <line:110:2, col:22>
|     `-ExprWithCleanups 0x55ec70399d60 <col:9, col:22> 'String'
|       `-CXXConstructExpr 0x55ec70399d30 <col:9, col:22> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55ec70399d18 <col:9, col:22> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55ec70399cf8 <col:9, col:22> 'String' (CXXTemporary 0x55ec70399cf8)
|             `-CXXMemberCallExpr 0x55ec70399cd0 <col:9, col:22> 'String'
|               `-MemberExpr 0x55ec70399ca0 <col:9> '<bound member function type>' ->unparse_dash 0x55ec703977a8
|                 `-CXXThisExpr 0x55ec70399c90 <col:9> 'const EtherAddress *' implicit this
|-CXXMethodDecl 0x55ec703976e8 <line:118:5, col:28> col:12 unparse_colon 'String () const'
|-CXXMethodDecl 0x55ec703977a8 <line:126:5, col:27> col:12 used unparse_dash 'String () const'
|-CXXMethodDecl 0x55ec70397868 <line:131:5, col:55> col:19 s 'String () const' inline
| `-DeprecatedAttr 0x55ec70397908 <col:44> "" ""
|-CXXConversionDecl 0x55ec703979a8 <line:136:5, col:62> col:12 operator String 'String () const' inline
| `-DeprecatedAttr 0x55ec70397a50 <col:51> "" ""
|-TypedefDecl 0x55ec70397b08 <line:138:5, col:33> col:33 parameter_type 'const EtherAddress &'
| `-LValueReferenceType 0x55ec70397ad0 'const EtherAddress &'
|   `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|     `-RecordType 0x55ec7037d9b0 'EtherAddress'
|       `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-AccessSpecDecl 0x55ec70397b60 <line:140:2, col:9> col:2 private
|-FieldDecl 0x55ec70397c28 <line:142:5, col:21> col:14 referenced _data 'uint16_t [3]'
|-CXXConstructorDecl 0x55ec70397d78 <line:144:5, line:146:5> line:144:5 used EtherAddress 'void (uint16_t)'
| |-ParmVarDecl 0x55ec70397c88 <col:18, col:27> col:27 used m 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55ec7039a030 <col:30, line:146:5>
|   `-BinaryOperator 0x55ec7039a010 <line:145:2, col:35> 'uint16_t':'unsigned short' lvalue '='
|     |-ArraySubscriptExpr 0x55ec70399e18 <col:2, col:9> 'uint16_t':'unsigned short' lvalue
|     | |-ImplicitCastExpr 0x55ec70399e00 <col:2> 'uint16_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55ec70399db0 <col:2> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|     | |   `-CXXThisExpr 0x55ec70399da0 <col:2> 'EtherAddress *' implicit this
|     | `-IntegerLiteral 0x55ec70399de0 <col:8> 'int' 0
|     `-ImplicitCastExpr 0x55ec70399ff8 <col:13, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-BinaryOperator 0x55ec70399fd8 <col:13, col:35> 'uint16_t':'unsigned short' lvalue '='
|         |-ArraySubscriptExpr 0x55ec70399eb0 <col:13, col:20> 'uint16_t':'unsigned short' lvalue
|         | |-ImplicitCastExpr 0x55ec70399e98 <col:13> 'uint16_t *' <ArrayToPointerDecay>
|         | | `-MemberExpr 0x55ec70399e48 <col:13> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|         | |   `-CXXThisExpr 0x55ec70399e38 <col:13> 'EtherAddress *' implicit this
|         | `-IntegerLiteral 0x55ec70399e78 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x55ec70399fc0 <col:24, col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|           `-BinaryOperator 0x55ec70399fa0 <col:24, col:35> 'uint16_t':'unsigned short' lvalue '='
|             |-ArraySubscriptExpr 0x55ec70399f48 <col:24, col:31> 'uint16_t':'unsigned short' lvalue
|             | |-ImplicitCastExpr 0x55ec70399f30 <col:24> 'uint16_t *' <ArrayToPointerDecay>
|             | | `-MemberExpr 0x55ec70399ee0 <col:24> 'uint16_t [3]' lvalue ->_data 0x55ec70397c28
|             | |   `-CXXThisExpr 0x55ec70399ed0 <col:24> 'EtherAddress *' implicit this
|             | `-IntegerLiteral 0x55ec70399f10 <col:30> 'int' 2
|             `-ImplicitCastExpr 0x55ec70399f88 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|               `-DeclRefExpr 0x55ec70399f68 <col:35> 'uint16_t':'unsigned short' lvalue ParmVar 0x55ec70397c88 'm' 'uint16_t':'unsigned short'
|-CXXConstructorDecl 0x55ec703983a8 <line:9:7> col:7 implicit constexpr EtherAddress 'void (const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55ec703983a8
| `-ParmVarDecl 0x55ec703984b8 <col:7> col:7 'const EtherAddress &'
|-CXXConstructorDecl 0x55ec70398558 <col:7> col:7 implicit used constexpr EtherAddress 'void (EtherAddress &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec70398668 <col:7> col:7 used 'EtherAddress &&'
| |-CXXCtorInitializer Field 0x55ec70397c28 '_data' 'uint16_t [3]'
| | `-ArrayInitLoopExpr 0x55ec703989f0 <col:7> 'uint16_t [3]'
| |   |-OpaqueValueExpr 0x55ec70398978 <col:7> 'uint16_t [3]' xvalue
| |   | `-MemberExpr 0x55ec70398930 <col:7> 'uint16_t [3]' xvalue ._data 0x55ec70397c28
| |   |   `-CXXStaticCastExpr 0x55ec70398900 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |   |     `-DeclRefExpr 0x55ec703988d0 <col:7> 'EtherAddress' lvalue ParmVar 0x55ec70398668 '' 'EtherAddress &&'
| |   `-ImplicitCastExpr 0x55ec703989d8 <col:7> 'uint16_t':'unsigned short' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55ec703989b8 <col:7> 'uint16_t':'unsigned short' xvalue
| |       |-ImplicitCastExpr 0x55ec703989a0 <col:7> 'uint16_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55ec70398978 <col:7> 'uint16_t [3]' xvalue
| |       |   `-MemberExpr 0x55ec70398930 <col:7> 'uint16_t [3]' xvalue ._data 0x55ec70397c28
| |       |     `-CXXStaticCastExpr 0x55ec70398900 <col:7> 'EtherAddress' xvalue static_cast<class EtherAddress &&> <NoOp>
| |       |       `-DeclRefExpr 0x55ec703988d0 <col:7> 'EtherAddress' lvalue ParmVar 0x55ec70398668 '' 'EtherAddress &&'
| |       `-ArrayInitIndexExpr 0x55ec70398990 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55ec70398a40 <col:7>
|-CXXDestructorDecl 0x55ec70398720 <col:7> col:7 implicit referenced ~EtherAddress 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec704287e8 <col:7> col:7 implicit operator= 'EtherAddress &(const EtherAddress &)' inline default trivial noexcept-unevaluated 0x55ec704287e8
| `-ParmVarDecl 0x55ec704288f8 <col:7> col:7 'const EtherAddress &'
`-CXXMethodDecl 0x55ec70428968 <col:7> col:7 implicit operator= 'EtherAddress &(EtherAddress &&)' inline default trivial noexcept-unevaluated 0x55ec70428968
  `-ParmVarDecl 0x55ec70428a78 <col:7> col:7 'EtherAddress &&'

Layout: <CGRecordLayout
  LLVMType:%class.EtherAddress = type { [3 x i16] }
  NonVirtualBaseLLVMType:%class.EtherAddress = type { [3 x i16] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70316300 prev 0x55ec7030d140 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec703163f8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55ec70316498 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55ec7031d260 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec7031d648 <col:11>
|-CXXConstructorDecl 0x55ec7031d340 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec7031d428 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55ec7031dd90 <col:11>
|-CXXConstructorDecl 0x55ec7031d4c8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec7031d5d8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55ec7031f5e8 <col:11>
|-CXXDestructorDecl 0x55ec7031e8f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec700254a8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec700255b8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55ec70025e80 <col:11>
|   `-ReturnStmt 0x55ec70025e70 <col:11>
|     `-UnaryOperator 0x55ec70025e58 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec70025e48 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55ec70025628 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec70025628
  `-ParmVarDecl 0x55ec70025738 <col:11> col:11 'Timestamp::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec7030c2f8 prev 0x55ec7030c008 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec7030c3f0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55ec7030c480 <col:19, col:25> col:19 public
|-TypedefDecl 0x55ec7030c4b8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55ec6ff71680 'int32_t' sugar
|   |-Typedef 0x55ec6fe82428 'int32_t'
|   `-TypedefType 0x55ec6fe5b580 '__int32_t' sugar
|     |-Typedef 0x55ec6fe5b198 '__int32_t'
|     `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec7030c520 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55ec6ff71840 'int64_t' sugar
|   |-Typedef 0x55ec6fe82490 'int64_t'
|   `-TypedefType 0x55ec6fe5b6a0 '__int64_t' sugar
|     |-Typedef 0x55ec6fe5b278 '__int64_t'
|     `-BuiltinType 0x55ec6fe195e0 'long'
|-EnumDecl 0x55ec7030c578 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55ec7030c6f0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55ec7030c6d0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55ec7030c6a8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55ec7030c690 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55ec7030c660 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55ec7030c7e8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55ec7030c7c8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55ec7030c7a0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55ec7030c788 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55ec7030c760 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55ec7030c740 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55ec7030c838 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55ec7030c940 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030ce90 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030c920 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55ec7030c900 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55ec7030c9d0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cea8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030c9b0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55ec7030c990 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55ec7030ca60 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cec0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030ca40 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55ec7030ca20 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55ec7030caf0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030ced8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030cad0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55ec7030cab0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55ec7030cb80 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cef0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030cb60 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55ec7030cb40 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55ec7030cc10 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cf08 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030cbf0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55ec7030cbd0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55ec7030cca0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cf20 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030cc80 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55ec7030cc60 <col:26> 'int' EnumConstant 0x55ec7030c940 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55ec7030cd70 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55ec7030cf38 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7030cd50 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55ec7030cd30 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55ec7030ccf0 <col:27> 'int' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55ec7030cd10 <col:44> 'int' EnumConstant 0x55ec7030cc10 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55ec7030ce40 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55ec7030cf50 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7030ce20 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55ec7030ce00 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55ec7030cdc0 <col:27> 'int' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55ec7030cde0 <col:44> 'int' EnumConstant 0x55ec7030caf0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55ec7030cf68 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55ec7030d070 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55ec7030d0c0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7030d050 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55ec7030d030 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55ec7030d0e8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55ec6ff712b0 'uninitialized_type'
|   `-CXXRecord 0x55ec6ff71218 'uninitialized_type'
|-CXXRecordDecl 0x55ec7030d140 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55ec7030d250 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031d658 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031d778 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55ec7031d730 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55ec7031d6c0 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7031d6b0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55ec7031d6f0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55ec7031d760 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55ec7031d710 <col:19> 'int' 0
|-CXXConstructorDecl 0x55ec7030d498 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55ec7030d310 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55ec7030d388 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec70318f90 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70318f70 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031d790 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031d8e0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55ec7031d868 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55ec7031d7f8 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7031d7e8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7031d8b0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55ec7031d898 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ec7031d828 <col:16> 'long' lvalue ParmVar 0x55ec7030d310 'sec' 'long'
|     `-ImplicitCastExpr 0x55ec7031d8c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7031d848 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec7030d388 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55ec7030d6f8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ec7030d568 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55ec7030d5e0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec70318fc8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70318fa8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031d8f8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031da30 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55ec7031d9d0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55ec7031d960 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7031d950 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7031da00 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7031d990 <col:16> 'int' lvalue ParmVar 0x55ec7030d568 'sec' 'int'
|     `-ImplicitCastExpr 0x55ec7031da18 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7031d9b0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec7030d5e0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55ec7030d958 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55ec7030d7c8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55ec7030d840 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec70319000 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70318fe0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031da48 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031db98 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55ec7031db20 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55ec7031dab0 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7031daa0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7031db68 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55ec7031db50 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ec7031dae0 <col:16> 'unsigned long' lvalue ParmVar 0x55ec7030d7c8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55ec7031db80 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7031db00 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec7030d840 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55ec7030eaf0 <line:199:5, line:201:5> line:199:21 Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55ec7030da28 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55ec7030daa0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec70319038 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70319018 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031dbb0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031dd00 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55ec7031dc88 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55ec7031dc18 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7031dc08 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7031dcd0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55ec7031dcb8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ec7031dc48 <col:16> 'unsigned int' lvalue ParmVar 0x55ec7030da28 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55ec7031dce8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7031dc68 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec7030daa0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55ec7030ec50 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55ec7030ebc0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55ec7030ede8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55ec7030ed28 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55ec7030f018 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55ec7030ef20 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55ec7030f1c8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55ec7030f108 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031dda0 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55ec7031dd18 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55ec7030f108 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55ec7031de00 <col:19, line:214:5>
|-CXXConstructorDecl 0x55ec7030f398 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55ec7030f2d8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031de10 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec7031dec0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55ec7031de98 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55ec7031de68 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55ec7030f2d8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55ec7030f588 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55ec7030f500 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55ec7030c0a0 'Timestamp'
|   | `-CXXRecord 0x55ec7030c2f8 'Timestamp'
|   `-ParenType 0x55ec7030f4a0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55ec7030f470 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55ec7030c640 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55ec7030c4b8 'seconds_type'
|         `-TypedefType 0x55ec6ff71680 'int32_t' sugar
|           |-Typedef 0x55ec6fe82428 'int32_t'
|           `-TypedefType 0x55ec6fe5b580 '__int32_t' sugar
|             |-Typedef 0x55ec6fe5b198 '__int32_t'
|             `-BuiltinType 0x55ec6fe195c0 'int'
|-CXXConversionDecl 0x55ec7030f6c8 <line:222:5, col:45> col:12 operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec7030f798 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55ec7031dfc8 <col:37, line:231:5>
|   `-ReturnStmt 0x55ec7031dfb8 <line:227:9, col:23>
|     `-BinaryOperator 0x55ec7031df98 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55ec7031df68 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55ec7031df18 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55ec70316498
|       |   `-MemberExpr 0x55ec7031dee8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|       |     `-CXXThisExpr 0x55ec7031ded8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55ec7031df80 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55ec7031df48 <col:23> 'int' 0
|-CXXMethodDecl 0x55ec7030f858 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55ec7030f918 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7030f9d8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7030fa98 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7030fb58 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7030fcc8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55ec7030fc08 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55ec7030fe10 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55ec7030fd80 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7030fed8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55ec7030ff78 <col:54> "" ""
|-CXXMethodDecl 0x55ec70310008 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55ec703100a8 <col:54> "" ""
|-CXXMethodDecl 0x55ec70310138 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55ec703101d8 <col:54> "" ""
|-CXXMethodDecl 0x55ec703102d8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55ec703103a8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55ec703104d8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55ec703105d0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55ec70310708 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55ec7031e1e0 <col:39, line:271:5>
|   `-ReturnStmt 0x55ec7031e1d0 <line:267:9, col:61>
|     `-CallExpr 0x55ec7031e170 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55ec7031e158 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec7031dfe0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55ec70317778 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55ec7031e1a0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55ec7031e040 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55ec70316498
|       |   `-MemberExpr 0x55ec7031e010 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|       |     `-CXXThisExpr 0x55ec7031e000 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55ec7031e1b8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55ec7031e0e0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55ec7031e0b0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55ec7031e070 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55ec7031e0c8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55ec7031e090 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cc10 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec703107c8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55ec7031e3a0 <col:39, line:279:5>
|   `-ReturnStmt 0x55ec7031e390 <line:275:9, col:61>
|     `-CallExpr 0x55ec7031e330 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55ec7031e318 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec7031e1f8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55ec70317778 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55ec7031e360 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55ec7031e258 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55ec70316498
|       |   `-MemberExpr 0x55ec7031e228 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|       |     `-CXXThisExpr 0x55ec7031e218 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55ec7031e378 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55ec7031e2f8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55ec7031e2c8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55ec7031e288 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55ec7031e2e0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55ec7031e2a8 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030caf0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70310888 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55ec7031e538 <col:39, line:287:5>
|   `-ReturnStmt 0x55ec7031e528 <line:283:9, col:53>
|     `-BinaryOperator 0x55ec7031e508 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55ec7031e4d8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55ec7031e3f8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55ec70316498
|       |   `-MemberExpr 0x55ec7031e3c8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|       |     `-CXXThisExpr 0x55ec7031e3b8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55ec7031e4f0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55ec7031e4b8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55ec7031e498 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7031e468 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7031e428 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030c940 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7031e480 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7031e448 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70310978 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55ec7031f7d0 <col:40, line:293:5>
|   |-DeclStmt 0x55ec7031e680 <line:291:9, col:48>
|   | `-VarDecl 0x55ec7031e560 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55ec7031e660 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55ec7031e608 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55ec7031e5d8 <col:22> '<bound member function type>' ->subsec 0x55ec7030f918
|   |     |   `-CXXThisExpr 0x55ec7031e5c8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55ec7031e648 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55ec7031e628 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cd70 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55ec7031f7c0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55ec7031f7a8 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55ec7031f778 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec7031f760 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55ec7031f740 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55ec7031f710 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55ec7031f4a8 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55ec7031f490 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55ec7031e698 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55ec7031e560 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55ec7031f6b0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55ec7031f698 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55ec7031f668 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55ec7031f4c0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55ec7031f430 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55ec7031f418 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55ec7031f3c8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55ec7030c248 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55ec7031f368 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55ec7031e6c8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55ec7031e6b8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55ec7031f3b0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55ec7031f398 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55ec7031eb88 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55ec7031e6f0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55ec7031e780 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55ec7031e750 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55ec7031e710 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cd70 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55ec7031e768 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55ec7031e730 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55ec7031e560 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55ec7031f6e0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55ec7031f478 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55ec7031f468 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55ec70310a38 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55ec7031fd28 <col:40, line:302:5>
|   |-DeclStmt 0x55ec7031f920 <line:297:9, col:48>
|   | `-VarDecl 0x55ec7031f800 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55ec7031f900 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55ec7031f8a8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55ec7031f878 <col:22> '<bound member function type>' ->subsec 0x55ec7030f918
|   |     |   `-CXXThisExpr 0x55ec7031f868 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55ec7031f8e8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55ec7031f8c8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030ce40 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55ec7031fd18 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55ec7031fd00 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55ec7031fcd0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec7031fcb8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55ec7031fc98 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55ec7031fc68 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55ec7031fb90 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55ec7031fb78 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55ec7031f938 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55ec7031f800 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55ec7031fc08 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55ec7031fbf0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55ec7031fbc0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55ec7031fba8 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55ec7031fb18 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55ec7031fb00 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55ec7031fae0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55ec7030c248 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55ec7031fa80 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55ec7031f968 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55ec7031f958 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55ec7031fac8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55ec7031fab0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55ec7031fa40 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55ec7031f990 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55ec7031fa20 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55ec7031f9f0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55ec7031f9b0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030ce40 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55ec7031fa08 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55ec7031f9d0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55ec7031f800 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55ec7031fc38 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55ec7031fb60 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55ec7031fb50 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55ec70310af8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55ec7031fdb0 <col:40, line:306:5>
|   `-ReturnStmt 0x55ec7031fda0 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55ec7031fd70 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55ec7031fd58 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec7031fd48 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55ec70310c98 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55ec70310ba8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55ec70310e68 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55ec70310d70 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55ec70310f58 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55ec703110c8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55ec70311008 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55ec7031fef8 <col:56, line:320:5>
|   `-ReturnStmt 0x55ec7031fee8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55ec7031fed0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55ec7031fea0 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec7031fe88 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55ec7031fe48 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55ec7031fe18 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55ec7031fdd8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311008 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55ec7031fe30 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55ec7031fdf8 <col:31> 'int' 0
|-CXXMethodDecl 0x55ec70311308 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55ec70311180 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec703111f8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec703200c8 <col:72, line:326:5>
|   `-ReturnStmt 0x55ec703200b8 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55ec703200a0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55ec70320070 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec70320058 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55ec70320018 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55ec70320000 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55ec7031ff20 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311180 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55ec7031ffc0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55ec7031ffa8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ec7031ff40 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55ec70315bf0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55ec7031ffe8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55ec7031ff60 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703111f8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec703114b8 <line:328:5, line:337:5> line:328:29 make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55ec703113c8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55ec70320790 <col:56, line:337:5>
|   |-DeclStmt 0x55ec703203c8 <line:329:9, col:51>
|   | `-VarDecl 0x55ec703200f0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55ec703203b0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55ec70320380 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55ec70320368 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55ec70320350 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55ec70320320 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55ec70320308 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55ec703202f0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55ec703201e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55ec70320580 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55ec70320430 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55ec70316498
|   | | `-MemberExpr 0x55ec70320400 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55ec70317448
|   | |   `-DeclRefExpr 0x55ec703203e0 <col:9> 'Timestamp' lvalue Var 0x55ec703200f0 't' 'Timestamp'
|   | `-BinaryOperator 0x55ec70320560 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55ec70320530 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55ec70320460 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55ec703113c8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55ec70320548 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55ec70320510 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55ec703204f0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55ec703204c0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55ec70320480 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55ec703204d8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55ec703204a0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cc10 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55ec70320778 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55ec70320748 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55ec70320730 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55ec70320710 <col:16> 'Timestamp' lvalue Var 0x55ec703200f0 't' 'Timestamp'
|-CXXMethodDecl 0x55ec70311680 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55ec70311570 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec703115e8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec70320948 <col:72, line:343:5>
|   `-ReturnStmt 0x55ec70320938 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55ec70320920 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55ec703208f0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec703208d8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55ec70320898 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55ec70320880 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55ec703207c8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311570 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55ec70320840 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55ec70320828 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ec703207e8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55ec70315d38 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55ec70320868 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55ec70320808 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703115e8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec703117d0 <line:345:5, line:354:5> line:345:29 make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55ec70311740 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55ec70320d90 <col:56, line:354:5>
|   |-DeclStmt 0x55ec70320b38 <line:346:9, col:51>
|   | `-VarDecl 0x55ec70320970 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55ec70320b20 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55ec70320af0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55ec70320ad8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55ec70320ac0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55ec70320a90 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55ec70320a78 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55ec70320a60 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55ec70320a30 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55ec70320cf0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55ec70320ba0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55ec70316498
|   | | `-MemberExpr 0x55ec70320b70 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55ec70317448
|   | |   `-DeclRefExpr 0x55ec70320b50 <col:9> 'Timestamp' lvalue Var 0x55ec70320970 't' 'Timestamp'
|   | `-BinaryOperator 0x55ec70320cd0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55ec70320ca0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55ec70320bd0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55ec70311740 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55ec70320cb8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55ec70320c80 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55ec70320c60 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55ec70320c30 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55ec70320bf0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55ec70320c48 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55ec70320c10 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030caf0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55ec70320d78 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55ec70320d48 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55ec70320d30 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55ec70320d10 <col:16> 'Timestamp' lvalue Var 0x55ec70320970 't' 'Timestamp'
|-CXXMethodDecl 0x55ec70311998 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55ec70311888 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec70311900 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec70320f48 <col:72, line:360:5>
|   `-ReturnStmt 0x55ec70320f38 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55ec70320f20 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55ec70320ef0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec70320ed8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55ec70320e98 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55ec70320e80 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55ec70320dc8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311888 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55ec70320e40 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55ec70320e28 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ec70320de8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55ec70315e80 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55ec70320e68 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55ec70320e08 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70311900 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70311ae8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55ec70311a58 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55ec7032d8b8 <col:56, line:371:5>
|   |-DeclStmt 0x55ec70321138 <line:363:9, col:51>
|   | `-VarDecl 0x55ec70320f70 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55ec70321120 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55ec703210f0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55ec703210d8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55ec703210c0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55ec70321090 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55ec70321078 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55ec70321060 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55ec70321030 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55ec7032d818 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55ec703211a0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55ec70316498
|   | | `-MemberExpr 0x55ec70321170 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55ec70317448
|   | |   `-DeclRefExpr 0x55ec70321150 <col:9> 'Timestamp' lvalue Var 0x55ec70320f70 't' 'Timestamp'
|   | `-CallExpr 0x55ec7032d7b8 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55ec7032d7a0 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55ec703211d0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55ec70317778 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55ec7032d7e8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55ec703211f0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55ec70311a58 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55ec7032d800 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55ec7032d780 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55ec7032d750 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55ec70321210 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030c940 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55ec7032d768 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55ec70321230 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55ec7032d8a0 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55ec7032d870 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55ec7032d858 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55ec7032d838 <col:16> 'Timestamp' lvalue Var 0x55ec70320f70 't' 'Timestamp'
|-CXXMethodDecl 0x55ec70311bd8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55ec7032d9f8 <col:39, line:377:5>
|   `-ReturnStmt 0x55ec7032d9e8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55ec7032d9d0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55ec7032d9a0 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55ec7032d988 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55ec7032d948 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55ec7032d8f0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55ec7032d930 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55ec7032d910 <col:29> 'int' 1
|-CXXMethodDecl 0x55ec70311c98 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55ec7032dad8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55ec7032da90 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55ec7032da20 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7032da10 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55ec7032da50 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55ec7032dac0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55ec7032da70 <col:19> 'int' 0
|-CXXMethodDecl 0x55ec70311e98 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec70311d48 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec70311dc0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec70319070 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70319050 <col:60> 'int' 0
| `-CompoundStmt 0x55ec7032dcd0 <col:63, line:395:5>
|   `-BinaryOperator 0x55ec7032dcb0 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55ec7032db30 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55ec70316498
|     | `-MemberExpr 0x55ec7032db00 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|     |   `-CXXThisExpr 0x55ec7032daf0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55ec7032dc90 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55ec7032dc20 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55ec7032dbc0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55ec7032dba8 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55ec7032db90 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55ec7032db60 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311d48 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55ec7032dc08 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55ec7032dbe8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55ec7032dc78 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55ec7032dc60 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55ec7032dc40 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70311dc0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70312068 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec70311f58 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec70311fd0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032de28 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55ec7032dde0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55ec7032dcf8 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7032dce8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7032de10 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7032dd28 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70311f58 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55ec7032dda0 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55ec7032dd88 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec7032dd48 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55ec70315d38 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55ec7032ddc8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55ec7032dd68 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70311fd0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70312238 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec70312128 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec703121a0 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032df80 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55ec7032df38 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55ec7032de50 <col:9> '<bound member function type>' ->assign 0x55ec70311e98
|     | `-CXXThisExpr 0x55ec7032de40 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55ec7032df68 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec7032de80 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55ec70312128 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55ec7032def8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55ec7032dee0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec7032dea0 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55ec70315e80 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55ec7032df20 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55ec7032dec0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703121a0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70312408 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec703122f8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec70312370 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55ec703190a8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55ec70319088 <col:57> 'int' 0
| `-DeprecatedAttr 0x55ec703124b8 <col:75> "" ""
|-CXXMethodDecl 0x55ec70312648 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec70312538 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec703125b0 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec703126f8 <col:74> "" ""
|-CXXMethodDecl 0x55ec70312888 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55ec70312778 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55ec703127f0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec70312938 <col:74> "" ""
|-CXXMethodDecl 0x55ec703129c8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55ec70312a68 <col:42> "" ""
|-CXXMethodDecl 0x55ec703152a0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55ec70315180 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55ec70315200 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55ec70315370 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec70315430 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55ec703154d0 <col:20>
| `-OptimizeNoneAttr 0x55ec70315528 <col:30>
|-CXXMethodDecl 0x55ec70315570 <line:446:5, col:36> col:29 recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec70315630 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55ec703156f0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec703157b0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55ec70315870 <line:481:5, col:43> col:29 recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec70315930 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55ec703159f0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55ec70315ab0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55ec70315bf0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec70315b60 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e0c8 <col:58, line:512:5>
|   `-ReturnStmt 0x55ec7032e0b8 <line:511:9, col:53>
|     `-BinaryOperator 0x55ec7032e098 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55ec7032e068 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032df98 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70315b60 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e080 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e048 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55ec7032e028 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032dff8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032dfb8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e010 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032dfd8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cc10 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70315d38 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec70315ca8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e210 <col:58, line:516:5>
|   `-ReturnStmt 0x55ec7032e200 <line:515:9, col:53>
|     `-BinaryOperator 0x55ec7032e1e0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55ec7032e1b0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e0e0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70315ca8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e1c8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e190 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55ec7032e170 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032e140 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032e100 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e158 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032e120 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030caf0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70315e80 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec70315df0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e358 <col:58, line:520:5>
|   `-ReturnStmt 0x55ec7032e348 <line:519:9, col:53>
|     `-BinaryOperator 0x55ec7032e328 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55ec7032e2f8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e228 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70315df0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e310 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e2d8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55ec7032e2b8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032e288 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032e248 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030c940 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e2a0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032e268 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70315fc8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec70315f38 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e4a0 <col:60, line:524:5>
|   `-ReturnStmt 0x55ec7032e490 <line:523:9, col:55>
|     `-BinaryOperator 0x55ec7032e470 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55ec7032e440 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e370 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70315f38 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e458 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e420 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55ec7032e400 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032e3d0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032e390 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e3e8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032e3b0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cc10 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70316110 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec70316080 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e5e8 <col:60, line:528:5>
|   `-ReturnStmt 0x55ec7032e5d8 <line:527:9, col:55>
|     `-BinaryOperator 0x55ec7032e5b8 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55ec7032e588 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e4b8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec70316080 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e5a0 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e568 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55ec7032e548 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032e518 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032e4d8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e530 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032e4f8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030caf0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55ec70316258 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55ec703161c8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e730 <col:60, line:532:5>
|   `-ReturnStmt 0x55ec7032e720 <line:531:9, col:55>
|     `-BinaryOperator 0x55ec7032e700 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55ec7032e6d0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e600 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703161c8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55ec7032e6e8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55ec7032e6b0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55ec7032e690 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55ec7032e660 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55ec7032e620 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030c940 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55ec7032e678 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55ec7032e640 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55ec7030cca0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55ec70316300 prev 0x55ec7030d140 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec703163f8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55ec70316498 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55ec7031d260 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ec7031d648 <col:11>
| |-CXXConstructorDecl 0x55ec7031d340 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec7031d428 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55ec7031dd90 <col:11>
| |-CXXConstructorDecl 0x55ec7031d4c8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec7031d5d8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55ec7031f5e8 <col:11>
| |-CXXDestructorDecl 0x55ec7031e8f8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55ec700254a8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec700255b8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55ec70025e80 <col:11>
| |   `-ReturnStmt 0x55ec70025e70 <col:11>
| |     `-UnaryOperator 0x55ec70025e58 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ec70025e48 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55ec70025628 <col:11> col:11 implicit constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec70025628
|   `-ParmVarDecl 0x55ec70025738 <col:11> col:11 'Timestamp::rep_t &&'
|-EnumDecl 0x55ec70316500 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55ec70316600 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55ec70316800 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703165e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec703165c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ec70316690 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55ec70316818 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70316670 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55ec70316650 <col:23> 'int' 1
| |-EnumConstantDecl 0x55ec70316720 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55ec70316830 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70316700 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55ec703166e0 <col:23> 'int' 2
| `-EnumConstantDecl 0x55ec703167b0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55ec70316848 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70316790 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55ec70316770 <col:27> 'int' 3
|-CXXMethodDecl 0x55ec70316888 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55ec70316950 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55ec70316b58 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55ec70316a00 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55ec70316a80 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55ec703190c0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55ec70316d68 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55ec70316c18 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55ec70316c90 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55ec70316e38 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55ec70316ef8 <line:635:5, col:37> col:24 warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55ec70317068 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55ec70316fa8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55ec70317130 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec703171f0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55ec703172b0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55ec70317370 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55ec70317410 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55ec70317448 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55ec703174b8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55ec7032e748 <col:27, line:684:5>
|-CXXMethodDecl 0x55ec70317578 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55ec7032e758 <col:27, line:696:5>
|-CXXMethodDecl 0x55ec70317778 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55ec70317628 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55ec703176a0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032e8e0 <col:66, line:700:5>
|   `-ReturnStmt 0x55ec7032e8d0 <line:699:9, col:31>
|     `-CallExpr 0x55ec7032e870 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55ec7032e858 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec7032e808 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55ec70199b28 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55ec7032e8a0 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55ec7032e7c8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55ec70317628 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55ec7032e8b8 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55ec7032e7e8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703176a0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70317ae8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55ec70317838 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55ec703178b0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55ec70317928 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55ec703179a0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55ec7032ec30 <col:64, line:707:5>
|   |-DeclStmt 0x55ec7032e970 <line:704:9, col:24>
|   | `-VarDecl 0x55ec7032e908 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55ec7032eb80 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55ec7032e988 <col:9> 'int32_t':'int' lvalue ParmVar 0x55ec703178b0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55ec7032eb68 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55ec7032eb00 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55ec7032eae8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec7032ea68 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55ec7019edf8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55ec7032eb38 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55ec7032ea08 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55ec70317928 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55ec7032eb50 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55ec7032ea28 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55ec703179a0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55ec7032ea48 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55ec7032e908 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55ec7032ec10 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55ec7032eba0 <col:9> 'int32_t':'int' lvalue ParmVar 0x55ec70317838 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55ec7032ebf8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55ec7032ebe0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55ec7032ebc0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55ec7032e908 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55ec70317d88 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55ec70317bb8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55ec70317c30 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55ec70317ca8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55ec70318028 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55ec70317e50 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55ec70317ec8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55ec70317f40 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55ec703181b8 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55ec703180f0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55ec703183b8 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55ec70318270 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55ec703182e8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55ec70318688 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55ec703185c8 parent 0x55ec6fe194c8 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55ec70318478 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55ec703184f0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55ec703188a8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55ec703187e8 parent 0x55ec6fe194c8 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55ec703186d8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55ec70318750 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55ec70318a70 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55ec703189b8 parent 0x55ec6fe194c8 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55ec703188f8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55ec70318cf8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55ec70318c38 parent 0x55ec6fe194c8 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55ec70318ae8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55ec70318b60 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55ec70318f18 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55ec70318e58 parent 0x55ec6fe194c8 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55ec70318d48 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55ec70318dc0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55ec7031e7a0 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec7031e888 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031f2f8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55ec7031f2b0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55ec70317448
| |     `-DeclRefExpr 0x55ec7031f290 <col:7> 'const Timestamp' lvalue ParmVar 0x55ec7031e888 '' 'const Timestamp &'
| `-CompoundStmt 0x55ec7031f358 <col:7>
|-CXXConstructorDecl 0x55ec7031ea08 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec7031eb18 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55ec70317448 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55ec7031f5f8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55ec7031f5a0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55ec70317448
| |     `-CXXStaticCastExpr 0x55ec7031f570 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55ec7031f540 <col:7> 'Timestamp' lvalue ParmVar 0x55ec7031eb18 '' 'Timestamp &&'
| `-CompoundStmt 0x55ec7031f658 <col:7>
|-CXXDestructorDecl 0x55ec7031ebc8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec700252f8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec70025408 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55ec70025ef8 <col:7>
|   |-CXXMemberCallExpr 0x55ec70025e98 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55ec70025dd8 <col:7> '<bound member function type>' .operator= 0x55ec700254a8
|   | | `-MemberExpr 0x55ec70025ce8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55ec70317448
|   | |   `-CXXThisExpr 0x55ec70025cd8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55ec70025da8 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55ec70317448
|   |   `-DeclRefExpr 0x55ec70025d88 <col:7> 'const Timestamp' lvalue ParmVar 0x55ec70025408 '' 'const Timestamp &'
|   `-ReturnStmt 0x55ec70025ee8 <col:7>
|     `-UnaryOperator 0x55ec70025ed0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec70025ec0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55ec700257a8 <col:7> col:7 implicit operator= 'Timestamp &(Timestamp &&)' inline default trivial noexcept-unevaluated 0x55ec700257a8
  `-ParmVarDecl 0x55ec700258b8 <col:7> col:7 'Timestamp &&'

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70421a88 <../elements/etherswitch/etherswitch.hh:77:5, line:81:5> line:77:12 referenced struct AddrInfo definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec70421ba8 <col:5, col:12> col:12 implicit referenced struct AddrInfo
|-FieldDecl 0x55ec70421c50 <line:78:2, col:6> col:6 port 'int'
|-FieldDecl 0x55ec70421cb0 <line:79:2, col:12> col:12 stamp 'Timestamp'
|-CXXConstructorDecl 0x55ec70421ea8 <line:80:2, col:43> col:9 used AddrInfo 'void (int, const Timestamp &)' inline
| |-ParmVarDecl 0x55ec70421d18 <col:18, col:22> col:22 p 'int'
| `-ParmVarDecl 0x55ec70421d90 <col:25, col:42> col:42 t 'const Timestamp &'
|-CXXDestructorDecl 0x55ec704281d0 <line:77:12> col:12 implicit referenced ~AddrInfo 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec70438d80 <col:12> col:12 implicit constexpr AddrInfo 'void (const EtherSwitch::AddrInfo &)' inline default trivial noexcept-unevaluated 0x55ec70438d80
| `-ParmVarDecl 0x55ec70438e68 <col:12> col:12 'const EtherSwitch::AddrInfo &'
`-CXXConstructorDecl 0x55ec70438f08 <col:12> col:12 implicit constexpr AddrInfo 'void (EtherSwitch::AddrInfo &&)' inline default trivial noexcept-unevaluated 0x55ec70438f08
  `-ParmVarDecl 0x55ec70439018 <col:12> col:12 'EtherSwitch::AddrInfo &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.EtherSwitch::AddrInfo" = type { i32, %class.Timestamp }
  NonVirtualBaseLLVMType:%"struct.EtherSwitch::AddrInfo" = type { i32, %class.Timestamp }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec704223f8 <../dummy_inc/click/pair.hh:8:1, line:55:1> line:9:8 struct Pair definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'const EtherAddress'
|-TemplateArgument type 'EtherSwitch::AddrInfo'
|-CXXRecordDecl 0x55ec70423150 prev 0x55ec704223f8 <col:1, col:8> col:8 implicit struct Pair
|-TypedefDecl 0x55ec70423218 <line:11:5, col:15> col:15 first_type 'const EtherAddress':'const EtherAddress'
| `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|   |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec70302138 'T'
|   `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|     `-RecordType 0x55ec7037d9b0 'EtherAddress'
|       `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704232a8 <line:12:5, col:15> col:15 second_type 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'
| `-SubstTemplateTypeParmType 0x55ec70423270 'EtherSwitch::AddrInfo' sugar
|   |-TemplateTypeParmType 0x55ec70302210 'U' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x55ec703021b8 'U'
|   `-RecordType 0x55ec70421b20 'EtherSwitch::AddrInfo'
|     `-CXXRecord 0x55ec70421a88 'AddrInfo'
|-TypedefDecl 0x55ec70423310 <line:13:5, col:15> col:15 referenced key_type 'const EtherAddress':'const EtherAddress'
| `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|   |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec70302138 'T'
|   `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|     `-RecordType 0x55ec7037d9b0 'EtherAddress'
|       `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704233a8 <line:14:5, col:22> col:22 referenced key_const_reference 'const EtherAddress &'
| `-LValueReferenceType 0x55ec70423370 'const EtherAddress &'
|   `-QualType 0x55ec704231e1 'const const EtherAddress' const
|     `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|       |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70302138 'T'
|       `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|         `-RecordType 0x55ec7037d9b0 'EtherAddress'
|           `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-FieldDecl 0x55ec70423410 <line:16:5, col:7> col:7 first 'const EtherAddress':'const EtherAddress'
|-FieldDecl 0x55ec70423470 <line:17:5, col:7> col:7 second 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'
|-CXXConstructorDecl 0x55ec704234f8 <line:19:5, line:21:5> line:19:12 Pair 'void ()' inline
|-CXXConstructorDecl 0x55ec70425c38 <line:23:5, line:26:5> line:23:12 Pair 'void (typename fast_argument<const EtherAddress>::type, typename fast_argument<AddrInfo>::type)' inline
| |-ParmVarDecl 0x55ec704249f0 <col:17, col:49> col:49 t 'typename fast_argument<const EtherAddress>::type':'const EtherAddress'
| `-ParmVarDecl 0x55ec70425b00 <line:24:3, col:35> col:35 u 'typename fast_argument<AddrInfo>::type':'const EtherSwitch::AddrInfo &'
|-CXXConstructorDecl 0x55ec70425f38 <line:28:5, line:30:5> line:28:12 Pair 'void (const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)' inline
| `-ParmVarDecl 0x55ec70425e28 <col:17, col:35> col:35 p 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'
|-FunctionTemplateDecl 0x55ec704263d0 <line:32:5, line:35:5> line:33:12 Pair
| |-TemplateTypeParmDecl 0x55ec70425ff8 <line:32:15, col:24> col:24 typename depth 0 index 0 V
| |-TemplateTypeParmDecl 0x55ec70426078 <col:27, col:36> col:36 typename depth 0 index 1 W
| |-CXXConstructorDecl 0x55ec70426328 <line:33:5, line:35:5> line:33:12 Pair 'void (const Pair<V, W> &)' inline
| | `-ParmVarDecl 0x55ec70426218 <col:17, col:35> col:35 p 'const Pair<V, W> &'
| `-CXXConstructorDecl 0x55ec70427e48 <col:5, line:35:5> line:33:12 Pair 'void (const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)' inline
|   |-TemplateArgument type 'const EtherAddress'
|   |-TemplateArgument type 'EtherSwitch::AddrInfo'
|   `-ParmVarDecl 0x55ec70427d88 <col:17, col:35> col:35 p 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'
|-TypedefDecl 0x55ec70426608 <line:37:5, col:63> col:38 unspecified_bool_type 'hashcode_t (Pair<const EtherAddress, EtherSwitch::AddrInfo>::*)() const'
| `-MemberPointerType 0x55ec704265a0 'hashcode_t (Pair<const EtherAddress, EtherSwitch::AddrInfo>::*)() const'
|   |-TemplateSpecializationType 0x55ec704264d0 'Pair<const EtherAddress, EtherSwitch::AddrInfo>' sugar Pair
|   | |-TemplateArgument type 'const EtherAddress':'const EtherAddress'
|   | |-TemplateArgument type 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'
|   | `-RecordType 0x55ec704224f0 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   |   `-ClassTemplateSpecialization 0x55ec704223f8 'Pair'
|   `-ParenType 0x55ec70303e50 'hashcode_t () const' sugar
|     `-FunctionProtoType 0x55ec70303e20 'hashcode_t () const' const cdecl
|       `-TypedefType 0x55ec702fd960 'hashcode_t' sugar
|         |-Typedef 0x55ec702fd860 'hashcode_t'
|         `-TypedefType 0x55ec6fec12f0 'size_t' sugar
|           |-Typedef 0x55ec6fe89ce0 'size_t'
|           `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-CXXConversionDecl 0x55ec70426720 <line:38:5, line:40:5> line:38:12 operator unsigned long (Pair<const EtherAddress, EtherSwitch::AddrInfo>::*)() const 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec70426858 <line:42:5, line:44:5> line:42:21 hashkey 'const EtherAddress &() const' inline
|-CXXMethodDecl 0x55ec70426908 <line:46:5, col:34> col:23 hashcode 'hashcode_t () const' inline
|-FunctionTemplateDecl 0x55ec70426e88 <line:48:5, line:53:5> line:49:17 operator=
| |-TemplateTypeParmDecl 0x55ec704269b8 <line:48:15, col:24> col:24 typename depth 0 index 0 V
| |-TemplateTypeParmDecl 0x55ec70426a38 <col:27, col:36> col:36 typename depth 0 index 1 W
| |-CXXMethodDecl 0x55ec70426de8 <line:49:5, line:53:5> line:49:17 operator= 'Pair<const EtherAddress, EtherSwitch::AddrInfo> &(const Pair<V, W> &)'
| | `-ParmVarDecl 0x55ec70426cb8 <col:27, col:45> col:45 p 'const Pair<V, W> &'
| `-CXXMethodDecl 0x55ec70428e38 <col:5, line:53:5> line:49:17 operator= 'Pair<const EtherAddress, EtherSwitch::AddrInfo> &(const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)'
|   |-TemplateArgument type 'const EtherAddress'
|   |-TemplateArgument type 'EtherSwitch::AddrInfo'
|   `-ParmVarDecl 0x55ec70428d38 <col:27, col:45> col:45 p 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'
|-CXXDestructorDecl 0x55ec704280e8 <line:9:8> col:8 implicit ~Pair 'void ()' inline default trivial noexcept-unevaluated 0x55ec704280e8
`-CXXMethodDecl 0x55ec70428668 <col:8> col:8 implicit operator= 'Pair<const EtherAddress, EtherSwitch::AddrInfo> &(const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)' inline default_delete trivial noexcept-unevaluated 0x55ec70428668
  `-ParmVarDecl 0x55ec70428778 <col:8> col:8 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'

Layout: <CGRecordLayout
  LLVMType:%struct.Pair = type { %class.EtherAddress, %"struct.EtherSwitch::AddrInfo" }
  NonVirtualBaseLLVMType:%struct.Pair = type { %class.EtherAddress, %"struct.EtherSwitch::AddrInfo" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70422c20 <../dummy_inc/click/hashtable.hh:101:5, line:112:5> line:101:12 struct elt definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists trivial needs_overload_resolution
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ec704275d8 prev 0x55ec70422c20 <col:5, col:12> col:12 implicit struct elt
|-FieldDecl 0x55ec70427678 <line:102:2, col:4> col:4 v 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|-FieldDecl 0x55ec70427708 <line:103:2, col:7> col:7 _hashnext 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-CXXConstructorDecl 0x55ec70427890 <line:104:2, line:106:2> line:104:2 elt 'void (const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)'
| `-ParmVarDecl 0x55ec70427798 <col:6, col:15> col:15 v_ 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'
|-TypedefDecl 0x55ec70427990 <line:107:2, col:31> col:31 referenced key_type 'typename Pair<const EtherAddress, AddrInfo>::key_type':'const EtherAddress'
| `-ElaboratedType 0x55ec70426fa0 'typename Pair<const EtherAddress, AddrInfo>::key_type' sugar
|   `-TypedefType 0x55ec70426f80 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_type' sugar
|     |-Typedef 0x55ec70423310 'key_type'
|     `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|       |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70302138 'T'
|       `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|         `-RecordType 0x55ec7037d9b0 'EtherAddress'
|           `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec70427a28 <line:108:2, col:42> col:42 referenced key_const_reference 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference':'const EtherAddress &'
| `-ElaboratedType 0x55ec70427090 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference' sugar
|   `-TypedefType 0x55ec70427070 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_const_reference' sugar
|     |-Typedef 0x55ec704233a8 'key_const_reference'
|     `-LValueReferenceType 0x55ec70423370 'const EtherAddress &'
|       `-QualType 0x55ec704231e1 'const const EtherAddress' const
|         `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|           |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec70302138 'T'
|           `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|             `-RecordType 0x55ec7037d9b0 'EtherAddress'
|               `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-CXXMethodDecl 0x55ec70427ae8 <line:109:2, line:111:2> line:109:22 hashkey 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt::key_const_reference () const'
|-CXXConstructorDecl 0x55ec70427f68 <line:101:12> col:12 implicit elt 'void (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &)' inline default noexcept-unevaluated 0x55ec70427f68
| `-ParmVarDecl 0x55ec70428078 <col:12> col:12 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &'
|-CXXConstructorDecl 0x55ec70428338 <col:12> col:12 implicit elt 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&)' inline default noexcept-unevaluated 0x55ec70428338
| `-ParmVarDecl 0x55ec70428448 <col:12> col:12 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&'
`-CXXMethodDecl 0x55ec704284e8 <col:12> col:12 implicit operator= 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&)' inline default_delete trivial noexcept-unevaluated 0x55ec704284e8
  `-ParmVarDecl 0x55ec704285f8 <col:12> col:12 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt" = type { %struct.Pair, %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"* }
  NonVirtualBaseLLVMType:%"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt" = type { %struct.Pair, %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec703b3f98 <../dummy_inc/click/libdivide.h:95:1, line:98:1> line:95:8 referenced struct libdivide_u32_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec703b40b8 <col:1, col:8> col:8 implicit struct libdivide_u32_t
|-FieldDecl 0x55ec703b4158 <line:96:5, col:14> col:14 referenced magic 'uint32_t':'unsigned int'
|-FieldDecl 0x55ec703b41b8 <line:97:5, col:13> col:13 referenced more 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55ec703b72a0 <line:95:8> col:8 implicit used libdivide_u32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec703b76d8 <col:8>
|-CXXConstructorDecl 0x55ec703b73a8 <col:8> col:8 implicit constexpr libdivide_u32_t 'void (const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x55ec703b73a8
| `-ParmVarDecl 0x55ec703b74b8 <col:8> col:8 'const libdivide_u32_t &'
|-CXXConstructorDecl 0x55ec703b7558 <col:8> col:8 implicit used constexpr libdivide_u32_t 'void (libdivide_u32_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec703b7668 <col:8> col:8 used 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x55ec703b4158 'magic' 'uint32_t':'unsigned int'
| | `-ImplicitCastExpr 0x55ec703ba9b0 <col:8> 'uint32_t':'unsigned int' <LValueToRValue>
| |   `-MemberExpr 0x55ec703ba980 <col:8> 'uint32_t':'unsigned int' xvalue .magic 0x55ec703b4158
| |     `-CXXStaticCastExpr 0x55ec703ba950 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x55ec703ba920 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x55ec703b7668 '' 'libdivide_u32_t &&'
| |-CXXCtorInitializer Field 0x55ec703b41b8 'more' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55ec703baa80 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55ec703baa50 <col:8> 'uint8_t':'unsigned char' xvalue .more 0x55ec703b41b8
| |     `-CXXStaticCastExpr 0x55ec703baa20 <col:8> 'libdivide_u32_t' xvalue static_cast<struct libdivide_u32_t &&> <NoOp>
| |       `-DeclRefExpr 0x55ec703ba9f0 <col:8> 'libdivide_u32_t' lvalue ParmVar 0x55ec703b7668 '' 'libdivide_u32_t &&'
| `-CompoundStmt 0x55ec703baad0 <col:8>
|-CXXDestructorDecl 0x55ec703bae48 <col:8> col:8 implicit referenced ~libdivide_u32_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec7042e128 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(const libdivide_u32_t &)' inline default trivial noexcept-unevaluated 0x55ec7042e128
| `-ParmVarDecl 0x55ec7042e238 <col:8> col:8 'const libdivide_u32_t &'
`-CXXMethodDecl 0x55ec7042e2a8 <col:8> col:8 implicit constexpr operator= 'libdivide_u32_t &(libdivide_u32_t &&)' inline default trivial noexcept-unevaluated 0x55ec7042e2a8
  `-ParmVarDecl 0x55ec7042e3b8 <col:8> col:8 'libdivide_u32_t &&'

Layout: <CGRecordLayout
  LLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  NonVirtualBaseLLVMType:%struct.libdivide_u32_t = type { i32, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec7042ce00 <../dummy_inc/click/hashcontainer.hh:19:1, line:29:1> line:20:7 class HashContainer_rep definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal has_mutable_fields
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>':'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|-CXXRecordDecl 0x55ec7042d098 prev 0x55ec7042ce00 <col:1, col:7> col:7 implicit class HashContainer_rep
|-FieldDecl 0x55ec7042d200 <line:21:5, col:9> col:9 buckets 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
|-FieldDecl 0x55ec7042d250 <line:22:5, col:14> col:14 nbuckets 'uint32_t':'unsigned int'
|-FieldDecl 0x55ec7042d2a0 <line:23:5, col:22> col:22 first_bucket 'uint32_t':'unsigned int' mutable
|-FieldDecl 0x55ec7042d2f0 <line:24:5, col:12> col:12 size 'size_t':'unsigned long'
|-FieldDecl 0x55ec7042d340 <line:25:5, col:21> col:21 bucket_divider 'libdivide_u32_t'
|-FriendDecl 0x55ec7042d498 <line:26:5, col:36> col:12 'class HashContainer<elt, HashContainer_adapter<elt> >':'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-FriendDecl 0x55ec7042d5e8 <line:27:5, col:51> col:12 'class HashContainer_const_iterator<elt, HashContainer_adapter<elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-FriendDecl 0x55ec7042d738 <line:28:5, col:45> col:12 'class HashContainer_iterator<elt, HashContainer_adapter<elt> >':'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-CXXConstructorDecl 0x55ec7042db30 <line:20:7> col:7 implicit constexpr HashContainer_rep 'void (const HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)' inline default trivial noexcept-unevaluated 0x55ec7042db30
| `-ParmVarDecl 0x55ec7042dc48 <col:7> col:7 'const HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
|-CXXMethodDecl 0x55ec7042e428 <col:7> col:7 implicit constexpr operator= 'HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &(const HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)' inline default trivial noexcept-unevaluated 0x55ec7042e428
| `-ParmVarDecl 0x55ec7042e538 <col:7> col:7 'const HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
`-CXXDestructorDecl 0x55ec70522450 <col:7> col:7 implicit ~HashContainer_rep 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_rep = type { %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"**, i32, i32, i64, %struct.libdivide_u32_t }
  NonVirtualBaseLLVMType:%class.HashContainer_rep = type { %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"**, i32, i32, i64, %struct.libdivide_u32_t }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70422ea0 <../dummy_inc/click/hashcontainer.hh:81:1, line:297:1> line:82:7 class HashContainer definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|-CXXRecordDecl 0x55ec70427260 prev 0x55ec70422ea0 <col:1, col:7> col:7 implicit class HashContainer
|-AccessSpecDecl 0x55ec704272f0 <col:23, col:29> col:23 public
|-TypedefDecl 0x55ec70429860 <line:85:5, col:34> col:34 key_type 'typename HashContainer_adapter<elt>::key_type':'const EtherAddress'
| `-ElaboratedType 0x55ec70429810 'typename HashContainer_adapter<elt>::key_type' sugar
|   `-TypedefType 0x55ec70429590 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>::key_type' sugar
|     |-Typedef 0x55ec70428fe0 'key_type'
|     `-ElaboratedType 0x55ec70428f90 'typename elt::key_type' sugar
|       `-TypedefType 0x55ec70428f70 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt::key_type' sugar
|         |-Typedef 0x55ec70427990 'key_type'
|         `-ElaboratedType 0x55ec70426fa0 'typename Pair<const EtherAddress, AddrInfo>::key_type' sugar
|           `-TypedefType 0x55ec70426f80 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_type' sugar
|             |-Typedef 0x55ec70423310 'key_type'
|             `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|               |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|               | `-TemplateTypeParm 0x55ec70302138 'T'
|               `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|                 `-RecordType 0x55ec7037d9b0 'EtherAddress'
|                   `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704298f8 <line:90:5, col:15> col:15 value_type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
| `-SubstTemplateTypeParmType 0x55ec704298c0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt' sugar
|   |-TemplateTypeParmType 0x55ec703c5360 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec703c5310 'T'
|   `-RecordType 0x55ec70422cb0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|     `-CXXRecord 0x55ec70422c20 'elt'
|-TypedefDecl 0x55ec70429950 <line:93:5, col:20> col:20 referenced size_type 'size_t':'unsigned long'
| `-TypedefType 0x55ec6fec12f0 'size_t' sugar
|   |-Typedef 0x55ec6fe89ce0 'size_t'
|   `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-TypedefDecl 0x55ec704299a8 <line:96:5, col:22> col:22 referenced bucket_count_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55ec6ff715a0 'uint32_t' sugar
|   |-Typedef 0x55ec6fe825c8 'uint32_t'
|   `-TypedefType 0x55ec6fe5b610 '__uint32_t' sugar
|     |-Typedef 0x55ec6fe5b208 '__uint32_t'
|     `-BuiltinType 0x55ec6fe19660 'unsigned int'
|-EnumDecl 0x55ec70429a00 <line:98:5> col:5
| |-EnumConstantDecl 0x55ec70429b30 <line:102:2, col:42> col:2 max_bucket_count 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
| | `-ConstantExpr 0x55ec70429b10 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' Int: 4294967295
| |   `-CStyleCastExpr 0x55ec70429ae8 <col:21, col:42> 'HashContainer::bucket_count_type':'unsigned int' <NoOp>
| |     `-ImplicitCastExpr 0x55ec70429ad0 <col:41, col:42> 'HashContainer::bucket_count_type':'unsigned int' <IntegralCast> part_of_explicit_cast
| |       `-UnaryOperator 0x55ec703c59b0 <col:41, col:42> 'int' prefix '-'
| |         `-IntegerLiteral 0x55ec703c5990 <col:42> 'int' 1
| `-EnumConstantDecl 0x55ec70429ba0 <line:104:2, col:25> col:2 initial_bucket_count 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::(anonymous enum at ../dummy_inc/click/hashcontainer.hh:98:5)'
|   `-ImplicitCastExpr 0x55ec70429bf0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70429b80 <col:25> 'int' Int: 63
|       `-IntegerLiteral 0x55ec703c5a68 <col:25> 'int' 63
|-CXXConstructorDecl 0x55ec70429c40 <line:108:5, col:19> col:5 HashContainer 'void ()'
|-CXXConstructorDecl 0x55ec70429da8 <line:111:5, col:47> col:14 HashContainer 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x55ec70429cf8 <col:28, col:46> col:46 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXDestructorDecl 0x55ec70429e90 <line:114:5, col:20> col:5 ~HashContainer 'void () noexcept'
|-CXXMethodDecl 0x55ec70429f80 <line:118:5, line:120:5> line:118:22 size 'HashContainer::size_type () const' inline
|-CXXMethodDecl 0x55ec7042a030 <line:123:5, line:125:5> line:123:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec7042a0e0 <line:128:5, line:130:5> line:128:30 bucket_count 'HashContainer::bucket_count_type () const' inline
|-CXXMethodDecl 0x55ec7042a278 <line:133:5, line:139:5> line:133:22 bucket_size 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::size_type (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x55ec7042a1b0 <col:34, col:52> col:52 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec7042a498 <line:142:5, col:51> col:23 bucket 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &) const'
| `-ParmVarDecl 0x55ec7042a3a8 <col:30, col:46> col:46 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042a550 <line:145:5, line:147:5> line:145:17 unbalanced 'bool () const' inline
|-TypedefDecl 0x55ec7042a7e0 <line:149:5, col:48> col:48 const_iterator 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| `-TemplateSpecializationType 0x55ec7042a740 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|   |-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>':'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|   `-RecordType 0x55ec7042a720 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|     `-ClassTemplateSpecialization 0x55ec7042a620 'HashContainer_const_iterator'
|-TypedefDecl 0x55ec7042aa10 <line:150:5, col:42> col:42 iterator 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| `-TemplateSpecializationType 0x55ec7042a970 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' sugar HashContainer_iterator
|   |-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|   |-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>':'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|   `-RecordType 0x55ec7042a950 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|     `-ClassTemplateSpecialization 0x55ec7042a858 'HashContainer_iterator'
|-CXXMethodDecl 0x55ec7042ab08 <line:155:5, col:27> col:21 begin 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator ()' inline
|-CXXMethodDecl 0x55ec7042ac58 <line:157:5, col:35> col:27 begin 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::const_iterator () const' inline
|-CXXMethodDecl 0x55ec7042ad28 <line:161:5, col:25> col:21 end 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator ()' inline
|-CXXMethodDecl 0x55ec7042adf8 <line:163:5, col:33> col:27 end 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::const_iterator () const' inline
|-CXXMethodDecl 0x55ec7042af98 <line:166:5, col:46> col:21 begin 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator (HashContainer::bucket_count_type)' inline
| `-ParmVarDecl 0x55ec7042aea8 <col:27, col:45> col:45 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec7042b148 <line:168:5, col:54> col:27 begin 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::const_iterator (HashContainer::bucket_count_type) const' inline
| `-ParmVarDecl 0x55ec7042b050 <col:33, col:51> col:51 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec7042b308 <line:171:5, col:47> col:17 contains 'bool (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &) const' inline
| `-ParmVarDecl 0x55ec7042b210 <col:26, col:42> col:42 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042b4c8 <line:173:5, col:49> col:22 count 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::size_type (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &) const' inline
| `-ParmVarDecl 0x55ec7042b3d0 <col:28, col:44> col:44 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042b688 <line:183:5, col:45> col:21 find 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &)' inline
| `-ParmVarDecl 0x55ec7042b590 <col:26, col:42> col:42 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042b848 <line:185:5, col:53> col:27 find 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::const_iterator (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &) const' inline
| `-ParmVarDecl 0x55ec7042b750 <col:32, col:48> col:48 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042b9a0 <line:191:5, col:52> col:21 find_prefer 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &)' inline
| `-ParmVarDecl 0x55ec7042b910 <col:33, col:49> col:49 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042bb88 <line:197:5, col:68> col:43 get 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &) const'
| |-ParmVarDecl 0x55ec7042ba98 <col:47, col:63> col:63 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
| |-NoInlineAttr 0x55ec7042bc68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7042bcc0 <col:30> Inherited
|-CXXMethodDecl 0x55ec7042bee8 <line:219:5, col:51> col:17 insert_at 'void (HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)' inline
| |-ParmVarDecl 0x55ec7042bd58 <col:27, col:37> col:37 it 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &'
| `-ParmVarDecl 0x55ec7042bdd0 <col:41, col:44> col:44 element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-CXXMethodDecl 0x55ec7042c1b8 <line:239:5, col:58> col:8 set 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *, bool)'
| |-ParmVarDecl 0x55ec7042bfb8 <col:12, col:22> col:22 it 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &'
| |-ParmVarDecl 0x55ec7042c030 <col:26, col:29> col:29 element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
| `-ParmVarDecl 0x55ec7042c098 <col:38, col:53> col:43 balance 'bool'
|-CXXMethodDecl 0x55ec7042c388 <line:249:5, col:57> col:43 set 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)'
| |-ParmVarDecl 0x55ec7042c290 <col:47, col:50> col:50 element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
| |-NoInlineAttr 0x55ec7042c440 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7042c498 <col:30> Inherited
|-CXXMethodDecl 0x55ec7042c5c8 <line:256:5, col:33> col:15 erase 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &)' inline
| `-ParmVarDecl 0x55ec7042c4d0 <col:21, col:31> col:31 it 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::iterator &'
|-CXXMethodDecl 0x55ec7042c788 <line:262:5, col:40> col:15 erase 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &)' inline
| `-ParmVarDecl 0x55ec7042c690 <col:21, col:37> col:37 key 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::key_type &'
|-CXXMethodDecl 0x55ec7042c840 <line:266:5, col:16> col:10 clear 'void ()'
|-CXXMethodDecl 0x55ec7042cb08 <line:269:5, col:44> col:17 swap 'void (HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)' inline
| `-ParmVarDecl 0x55ec7042ca18 <col:22, col:43> col:43 x 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
|-CXXMethodDecl 0x55ec7042cc50 <line:277:5, col:36> col:10 rehash 'void (HashContainer::bucket_count_type)'
| `-ParmVarDecl 0x55ec7042cbc0 <col:17, col:35> col:35 n 'HashContainer::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec7042cd08 <line:282:5, line:285:5> line:282:17 balance 'void ()' inline
|-AccessSpecDecl 0x55ec7042cdb8 <line:287:3, col:10> col:3 private
|-FieldDecl 0x55ec7042e5c0 <line:289:5, col:29> col:29 _rep 'HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_rep<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-CXXConstructorDecl 0x55ec7042e848 <line:291:5, col:46> col:5 HashContainer 'void (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)'
| `-ParmVarDecl 0x55ec7042e738 <col:19, col:45> col:46 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
|-CXXMethodDecl 0x55ec7042ebe8 <line:292:5, col:63> col:26 operator= 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &(const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)'
| `-ParmVarDecl 0x55ec7042eab8 <col:36, col:62> col:63 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
|-FriendDecl 0x55ec7042eda8 <line:294:5, col:45> col:12 'class HashContainer_iterator<elt, HashContainer_adapter<elt> >':'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
`-FriendDecl 0x55ec7042eef8 <line:295:5, col:51> col:12 'class HashContainer_const_iterator<elt, HashContainer_adapter<elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  NonVirtualBaseLLVMType:%class.HashContainer = type { %class.HashContainer_rep }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct HashAllocator::link
         0 |   struct HashAllocator::link * next
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec703ee108 <../dummy_inc/click/hashallocator.hh:26:5, line:28:5> line:26:12 referenced struct link definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ec703ee228 <col:5, col:12> col:12 implicit referenced struct link
`-FieldDecl 0x55ec703ee2f8 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::link" = type { %"struct.HashAllocator::link"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct HashAllocator::buffer
         0 |   struct HashAllocator::buffer * next
         8 |   size_t pos
        16 |   size_t maxpos
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec703ee360 <../dummy_inc/click/hashallocator.hh:30:5, line:34:5> line:30:12 referenced struct buffer definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ec703ee478 <col:5, col:12> col:12 implicit referenced struct buffer
|-FieldDecl 0x55ec703ee548 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
|-FieldDecl 0x55ec703ee5a8 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
`-FieldDecl 0x55ec703ee608 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'

Layout: <CGRecordLayout
  LLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  NonVirtualBaseLLVMType:%"struct.HashAllocator::buffer" = type { %"struct.HashAllocator::buffer"*, i64, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec703ed718 <../dummy_inc/click/hashallocator.hh:9:1, line:55:1> line:9:7 referenced class HashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec703ed838 <col:1, col:7> col:7 implicit referenced class HashAllocator
|-AccessSpecDecl 0x55ec703ed8c8 <col:23, col:29> col:23 public
|-CXXConstructorDecl 0x55ec703eda08 <line:11:5, col:30> col:5 referenced HashAllocator 'void (size_t)'
| `-ParmVarDecl 0x55ec703ed900 <col:19, col:26> col:26 size 'size_t':'unsigned long'
|-CXXDestructorDecl 0x55ec703edb00 <line:12:5, col:20> col:5 ~HashAllocator 'void () noexcept'
|-CXXMethodDecl 0x55ec703edc80 <line:14:5, line:17:5> line:14:17 increase_size 'void (size_t)' inline
| |-ParmVarDecl 0x55ec703edbf0 <col:31, col:38> col:38 used new_size 'size_t':'unsigned long'
| `-CompoundStmt 0x55ec703ef460 <col:48, line:17:5>
|   |-ParenExpr 0x55ec703ef3a8 <line:15:2, col:212> 'void'
|   | `-ConditionalOperator 0x55ec703ef378 <col:3, col:211> 'void'
|   |   |-CXXStaticCastExpr 0x55ec703ef040 <col:3, col:62> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec703ef010 <col:23, col:57> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec703eef40 <col:23, col:34> 'bool' '&&'
|   |   |   | |-UnaryOperator 0x55ec703eeea0 <col:23, col:24> 'bool' prefix '!' cannot overflow
|   |   |   | | `-ImplicitCastExpr 0x55ec703eee88 <col:24> 'bool' <PointerToBoolean>
|   |   |   | |   `-ImplicitCastExpr 0x55ec703eee70 <col:24> 'HashAllocator::link *' <LValueToRValue>
|   |   |   | |     `-MemberExpr 0x55ec703eee40 <col:24> 'HashAllocator::link *' lvalue ->_free 0x55ec703ee938
|   |   |   | |       `-CXXThisExpr 0x55ec703eee30 <col:24> 'HashAllocator *' implicit this
|   |   |   | `-UnaryOperator 0x55ec703eef28 <col:33, col:34> 'bool' prefix '!' cannot overflow
|   |   |   |   `-ImplicitCastExpr 0x55ec703eef10 <col:34> 'bool' <PointerToBoolean>
|   |   |   |     `-ImplicitCastExpr 0x55ec703eeef8 <col:34> 'HashAllocator::buffer *' <LValueToRValue>
|   |   |   |       `-MemberExpr 0x55ec703eeec8 <col:34> 'HashAllocator::buffer *' lvalue ->_buffer 0x55ec703ee998
|   |   |   |         `-CXXThisExpr 0x55ec703eeeb8 <col:34> 'HashAllocator *' implicit this
|   |   |   `-BinaryOperator 0x55ec703eeff0 <col:45, col:57> 'bool' '>='
|   |   |     |-ImplicitCastExpr 0x55ec703eefc0 <col:45> 'size_t':'unsigned long' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec703eef60 <col:45> 'size_t':'unsigned long' lvalue ParmVar 0x55ec703edbf0 'new_size' 'size_t':'unsigned long'
|   |   |     `-ImplicitCastExpr 0x55ec703eefd8 <col:57> 'size_t':'unsigned long' <LValueToRValue>
|   |   |       `-MemberExpr 0x55ec703eef90 <col:57> 'size_t':'unsigned long' lvalue ->_size 0x55ec703ee9f8
|   |   |         `-CXXThisExpr 0x55ec703eef80 <col:57> 'HashAllocator *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ec703ef0a0 <col:66, col:73> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec703ef080 <col:72> 'int' 0
|   |   `-CallExpr 0x55ec703ef2d8 <col:77, col:211> 'void'
|   |     |-ImplicitCastExpr 0x55ec703ef2c0 <col:77> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec703ef2a0 <col:77> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec703ef318 <col:92> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703ef110 <col:92> 'const char [40]' lvalue "!_free && !_buffer && new_size >= _size"
|   |     |-ImplicitCastExpr 0x55ec703ef330 <col:135> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703ef150 <col:135> 'const char [36]' lvalue "../dummy_inc/click/hashallocator.hh"
|   |     |-ImplicitCastExpr 0x55ec703ef348 <col:174> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec703ef190 <col:174> 'int' 15
|   |     `-ImplicitCastExpr 0x55ec703ef360 <col:178, col:192> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec703ef288 <col:178, col:192> 'const char [42]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec703ef270 <col:192> 'const char [42]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec703ef228 <col:192> 'const char [42]' lvalue "void HashAllocator::increase_size(size_t)"
|   `-BinaryOperator 0x55ec703ef440 <line:16:2, col:10> 'size_t':'unsigned long' lvalue '='
|     |-MemberExpr 0x55ec703ef3d8 <col:2> 'size_t':'unsigned long' lvalue ->_size 0x55ec703ee9f8
|     | `-CXXThisExpr 0x55ec703ef3c8 <col:2> 'HashAllocator *' implicit this
|     `-ImplicitCastExpr 0x55ec703ef428 <col:10> 'size_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55ec703ef408 <col:10> 'size_t':'unsigned long' lvalue ParmVar 0x55ec703edbf0 'new_size' 'size_t':'unsigned long'
|-CXXMethodDecl 0x55ec703edd50 <line:19:5, col:27> col:18 allocate 'void *()' inline
|-CXXMethodDecl 0x55ec703ede98 <line:20:5, col:35> col:17 deallocate 'void (void *)' inline
| `-ParmVarDecl 0x55ec703ede08 <col:28, col:34> col:34 p 'void *'
|-CXXMethodDecl 0x55ec703ee038 <line:22:5, col:31> col:10 swap 'void (HashAllocator &)'
| `-ParmVarDecl 0x55ec703edf78 <col:15, col:30> col:30 x 'HashAllocator &'
|-AccessSpecDecl 0x55ec703ee0e0 <line:24:3, col:10> col:3 private
|-CXXRecordDecl 0x55ec703ee108 <line:26:5, line:28:5> line:26:12 referenced struct link definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ec703ee228 <col:5, col:12> col:12 implicit referenced struct link
| `-FieldDecl 0x55ec703ee2f8 <line:27:2, col:8> col:8 referenced next 'HashAllocator::link *'
|-CXXRecordDecl 0x55ec703ee360 <line:30:5, line:34:5> line:30:12 referenced struct buffer definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ec703ee478 <col:5, col:12> col:12 implicit referenced struct buffer
| |-FieldDecl 0x55ec703ee548 <line:31:2, col:10> col:10 next 'HashAllocator::buffer *'
| |-FieldDecl 0x55ec703ee5a8 <line:32:2, col:9> col:9 referenced pos 'size_t':'unsigned long'
| `-FieldDecl 0x55ec703ee608 <line:33:2, col:9> col:9 referenced maxpos 'size_t':'unsigned long'
|-EnumDecl 0x55ec703ee670 <line:36:5, line:44:5> line:36:5
| |-EnumConstantDecl 0x55ec703ee770 <line:37:2, col:20> col:2 min_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x55ec703ee8e0 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703ee750 <col:20> 'int' Int: 1024
| |     `-IntegerLiteral 0x55ec703ee730 <col:20> 'int' 1024
| |-EnumConstantDecl 0x55ec703ee800 <line:41:2, col:20> col:2 max_buffer_size 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
| | `-ImplicitCastExpr 0x55ec703ee8f8 <col:20> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec703ee7e0 <col:20> 'int' Int: 1048576
| |     `-IntegerLiteral 0x55ec703ee7c0 <col:20> 'int' 1048576
| `-EnumConstantDecl 0x55ec703ee890 <line:43:2, col:18> col:2 min_nelements 'HashAllocator::(anonymous enum at ../dummy_inc/click/hashallocator.hh:36:5)'
|   `-ImplicitCastExpr 0x55ec703ee910 <col:18> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec703ee870 <col:18> 'int' Int: 8
|       `-IntegerLiteral 0x55ec703ee850 <col:18> 'int' 8
|-FieldDecl 0x55ec703ee938 <line:46:5, col:11> col:11 referenced _free 'HashAllocator::link *'
|-FieldDecl 0x55ec703ee998 <line:47:5, col:13> col:13 referenced _buffer 'HashAllocator::buffer *'
|-FieldDecl 0x55ec703ee9f8 <line:48:5, col:12> col:12 referenced _size 'size_t':'unsigned long'
|-CXXMethodDecl 0x55ec703eea70 <line:50:5, col:25> col:11 used hard_allocate 'void *()'
|-CXXConstructorDecl 0x55ec703eec08 <line:52:5, col:41> col:5 HashAllocator 'void (const HashAllocator &)'
| `-ParmVarDecl 0x55ec703eeb48 <col:19, col:40> col:40 x 'const HashAllocator &'
`-CXXMethodDecl 0x55ec703eed88 <line:53:5, col:52> col:20 operator= 'HashAllocator &(const HashAllocator &)'
  `-ParmVarDecl 0x55ec703eecc8 <col:30, col:51> col:51 x 'const HashAllocator &'

Layout: <CGRecordLayout
  LLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  NonVirtualBaseLLVMType:%class.HashAllocator = type { %"struct.HashAllocator::link"*, %"struct.HashAllocator::buffer"*, i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70432530 <../dummy_inc/click/hashallocator.hh:58:1, line:65:1> line:59:7 class SizedHashAllocator definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'HashAllocator'
|-TemplateArgument integral 32
|-CXXRecordDecl 0x55ec70432738 prev 0x55ec70432530 <col:1, col:7> col:7 implicit class SizedHashAllocator
|-AccessSpecDecl 0x55ec704327c8 <col:51, col:57> col:51 public
|-CXXConstructorDecl 0x55ec70432828 <line:61:5, line:63:5> line:61:5 SizedHashAllocator 'void ()'
|-CXXConstructorDecl 0x55ec70432908 <line:59:7> col:7 implicit SizedHashAllocator 'void (const SizedHashAllocator<32> &)' inline default_delete noexcept-unevaluated 0x55ec70432908
| `-ParmVarDecl 0x55ec70432a18 <col:7> col:7 'const SizedHashAllocator<32> &'
|-CXXConstructorDecl 0x55ec70432ab8 <col:7> col:7 implicit SizedHashAllocator 'void (SizedHashAllocator<32> &&)' inline default_delete noexcept-unevaluated 0x55ec70432ab8
| `-ParmVarDecl 0x55ec70432bc8 <col:7> col:7 'SizedHashAllocator<32> &&'
|-CXXMethodDecl 0x55ec70432c68 <col:7> col:7 implicit operator= 'SizedHashAllocator<32> &(SizedHashAllocator<32> &&)' inline default_delete noexcept-unevaluated 0x55ec70432c68
| `-ParmVarDecl 0x55ec70432d78 <col:7> col:7 'SizedHashAllocator<32> &&'
`-CXXDestructorDecl 0x55ec70432e00 <col:7> col:7 implicit ~SizedHashAllocator 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  NonVirtualBaseLLVMType:%class.SizedHashAllocator = type { %class.HashAllocator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec704225b0 <../dummy_inc/click/hashtable.hh:98:1, line:321:1> line:99:7 class HashTable definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|-TemplateArgument type 'void'
|-CXXRecordDecl 0x55ec70422b90 prev 0x55ec704225b0 <col:1, col:7> col:7 implicit class HashTable
|-CXXRecordDecl 0x55ec70422c20 <line:101:5, line:112:5> line:101:12 struct elt definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial needs_overload_resolution
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists trivial needs_overload_resolution
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ec704275d8 prev 0x55ec70422c20 <col:5, col:12> col:12 implicit struct elt
| |-FieldDecl 0x55ec70427678 <line:102:2, col:4> col:4 v 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
| |-FieldDecl 0x55ec70427708 <line:103:2, col:7> col:7 _hashnext 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
| |-CXXConstructorDecl 0x55ec70427890 <line:104:2, line:106:2> line:104:2 elt 'void (const Pair<const EtherAddress, EtherSwitch::AddrInfo> &)'
| | `-ParmVarDecl 0x55ec70427798 <col:6, col:15> col:15 v_ 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &'
| |-TypedefDecl 0x55ec70427990 <line:107:2, col:31> col:31 referenced key_type 'typename Pair<const EtherAddress, AddrInfo>::key_type':'const EtherAddress'
| | `-ElaboratedType 0x55ec70426fa0 'typename Pair<const EtherAddress, AddrInfo>::key_type' sugar
| |   `-TypedefType 0x55ec70426f80 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_type' sugar
| |     |-Typedef 0x55ec70423310 'key_type'
| |     `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
| |       |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
| |       | `-TemplateTypeParm 0x55ec70302138 'T'
| |       `-QualType 0x55ec7037d9b1 'const EtherAddress' const
| |         `-RecordType 0x55ec7037d9b0 'EtherAddress'
| |           `-CXXRecord 0x55ec703963b8 'EtherAddress'
| |-TypedefDecl 0x55ec70427a28 <line:108:2, col:42> col:42 referenced key_const_reference 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference':'const EtherAddress &'
| | `-ElaboratedType 0x55ec70427090 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference' sugar
| |   `-TypedefType 0x55ec70427070 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_const_reference' sugar
| |     |-Typedef 0x55ec704233a8 'key_const_reference'
| |     `-LValueReferenceType 0x55ec70423370 'const EtherAddress &'
| |       `-QualType 0x55ec704231e1 'const const EtherAddress' const
| |         `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
| |           |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
| |           | `-TemplateTypeParm 0x55ec70302138 'T'
| |           `-QualType 0x55ec7037d9b1 'const EtherAddress' const
| |             `-RecordType 0x55ec7037d9b0 'EtherAddress'
| |               `-CXXRecord 0x55ec703963b8 'EtherAddress'
| |-CXXMethodDecl 0x55ec70427ae8 <line:109:2, line:111:2> line:109:22 hashkey 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt::key_const_reference () const'
| |-CXXConstructorDecl 0x55ec70427f68 <line:101:12> col:12 implicit elt 'void (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &)' inline default noexcept-unevaluated 0x55ec70427f68
| | `-ParmVarDecl 0x55ec70428078 <col:12> col:12 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &'
| |-CXXConstructorDecl 0x55ec70428338 <col:12> col:12 implicit elt 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&)' inline default noexcept-unevaluated 0x55ec70428338
| | `-ParmVarDecl 0x55ec70428448 <col:12> col:12 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&'
| `-CXXMethodDecl 0x55ec704284e8 <col:12> col:12 implicit operator= 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&)' inline default_delete trivial noexcept-unevaluated 0x55ec704284e8
|   `-ParmVarDecl 0x55ec704285f8 <col:12> col:12 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &&'
|-TypedefDecl 0x55ec70423030 <line:114:5, col:32> col:32 rep_type 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>':'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| `-TemplateSpecializationType 0x55ec70422fc0 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>' sugar HashContainer
|   |-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|   `-RecordType 0x55ec70422fa0 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|     `-ClassTemplateSpecialization 0x55ec70422ea0 'HashContainer'
|-AccessSpecDecl 0x55ec70423088 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ec70426ff0 <line:119:5, col:34> col:34 key_type 'typename Pair<const EtherAddress, AddrInfo>::key_type':'const EtherAddress'
| `-ElaboratedType 0x55ec70426fa0 'typename Pair<const EtherAddress, AddrInfo>::key_type' sugar
|   `-TypedefType 0x55ec70426f80 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_type' sugar
|     |-Typedef 0x55ec70423310 'key_type'
|     `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|       |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70302138 'T'
|       `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|         `-RecordType 0x55ec7037d9b0 'EtherAddress'
|           `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704270e0 <line:122:5, col:45> col:45 key_const_reference 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference':'const EtherAddress &'
| `-ElaboratedType 0x55ec70427090 'typename Pair<const EtherAddress, AddrInfo>::key_const_reference' sugar
|   `-TypedefType 0x55ec70427070 'Pair<const EtherAddress, EtherSwitch::AddrInfo>::key_const_reference' sugar
|     |-Typedef 0x55ec704233a8 'key_const_reference'
|     `-LValueReferenceType 0x55ec70423370 'const EtherAddress &'
|       `-QualType 0x55ec704231e1 'const const EtherAddress' const
|         `-SubstTemplateTypeParmType 0x55ec704231e0 'const EtherAddress' sugar
|           |-TemplateTypeParmType 0x55ec70302190 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec70302138 'T'
|           `-QualType 0x55ec7037d9b1 'const EtherAddress' const
|             `-RecordType 0x55ec7037d9b0 'EtherAddress'
|               `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec70427148 <line:125:5, col:15> col:15 value_type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
| `-SubstTemplateTypeParmType 0x55ec70422ae0 'Pair<const EtherAddress, EtherSwitch::AddrInfo>' sugar
|   |-TemplateTypeParmType 0x55ec703f13e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec703f1388 'T'
|   `-RecordType 0x55ec704224f0 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|     `-ClassTemplateSpecialization 0x55ec704223f8 'Pair'
|-TypedefDecl 0x55ec7042ef90 <line:128:5, col:42> col:42 referenced size_type 'typename rep_type::size_type':'unsigned long'
| `-ElaboratedType 0x55ec7042ef40 'typename rep_type::size_type' sugar
|   `-TypedefType 0x55ec7042a190 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::size_type' sugar
|     |-Typedef 0x55ec70429950 'size_type'
|     `-TypedefType 0x55ec6fec12f0 'size_t' sugar
|       |-Typedef 0x55ec6fe89ce0 'size_t'
|       `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-TypedefDecl 0x55ec7042f060 <line:131:5, col:50> col:50 referenced bucket_count_type 'typename rep_type::bucket_count_type':'unsigned int'
| `-ElaboratedType 0x55ec7042f010 'typename rep_type::bucket_count_type' sugar
|   `-TypedefType 0x55ec7042a330 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type' sugar
|     |-Typedef 0x55ec704299a8 'bucket_count_type'
|     `-TypedefType 0x55ec6ff715a0 'uint32_t' sugar
|       |-Typedef 0x55ec6fe825c8 'uint32_t'
|       `-TypedefType 0x55ec6fe5b610 '__uint32_t' sugar
|         |-Typedef 0x55ec6fe5b208 '__uint32_t'
|         `-BuiltinType 0x55ec6fe19660 'unsigned int'
|-CXXConstructorDecl 0x55ec7042f0f0 <line:135:5, line:137:5> line:135:5 HashTable 'void ()'
|-CXXConstructorDecl 0x55ec7042f2c8 <line:143:5, line:145:5> line:143:14 HashTable 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type)'
| `-ParmVarDecl 0x55ec7042f1e0 <col:24, col:42> col:42 n 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type':'unsigned int'
|-CXXConstructorDecl 0x55ec7042f5a8 <line:148:5, line:151:5> line:148:5 HashTable 'void (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)'
| `-ParmVarDecl 0x55ec7042f490 <col:15, col:35> col:35 x 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
|-CXXConstructorDecl 0x55ec7042f868 <line:155:5, line:158:5> line:155:5 HashTable 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&)'
| `-ParmVarDecl 0x55ec7042f750 <col:15, col:30> col:30 x 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
|-CXXDestructorDecl 0x55ec7042f950 <line:162:5, col:16> col:5 ~HashTable 'void () noexcept'
|-CXXMethodDecl 0x55ec7042faa8 <line:166:5, line:168:5> line:166:22 size 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::size_type () const' inline
|-CXXMethodDecl 0x55ec7042fb58 <line:171:5, line:173:5> line:171:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec7042fc58 <line:176:5, line:178:5> line:176:30 bucket_count 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type () const' inline
|-CXXMethodDecl 0x55ec7042fdd8 <line:182:5, line:184:5> line:182:22 bucket_size 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::size_type (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type) const' inline
| `-ParmVarDecl 0x55ec7042fd18 <col:34, col:52> col:52 n 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type':'unsigned int'
|-TypedefDecl 0x55ec70430010 <line:187:5, col:41> col:41 const_iterator 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
| `-TemplateSpecializationType 0x55ec7042ffa0 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' sugar HashTable_const_iterator
|   |-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec7042ff80 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|     `-ClassTemplateSpecialization 0x55ec7042fea0 'HashTable_const_iterator'
|-TypedefDecl 0x55ec704301f0 <line:188:5, col:35> col:35 iterator 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
| `-TemplateSpecializationType 0x55ec70430180 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' sugar HashTable_iterator
|   |-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec70430160 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|     `-ClassTemplateSpecialization 0x55ec70430078 'HashTable_iterator'
|-CXXMethodDecl 0x55ec704302e8 <line:193:5, col:27> col:21 begin 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator ()' inline
|-CXXMethodDecl 0x55ec70430438 <line:195:5, col:35> col:27 begin 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::const_iterator () const' inline
|-CXXMethodDecl 0x55ec70430508 <line:199:5, col:25> col:21 end 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator ()' inline
|-CXXMethodDecl 0x55ec704305d8 <line:201:5, col:33> col:27 end 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::const_iterator () const' inline
|-CXXMethodDecl 0x55ec70430788 <line:205:5, col:53> col:22 count 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::size_type (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference) const' inline
| `-ParmVarDecl 0x55ec704306c0 <col:28, col:48> col:48 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70430948 <line:210:5, col:49> col:21 find 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70430850 <col:26, col:46> col:46 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70430b08 <line:212:5, col:57> col:27 find 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::const_iterator (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference) const' inline
| `-ParmVarDecl 0x55ec70430a10 <col:32, col:52> col:52 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70430c60 <line:221:5, col:56> col:21 find_prefer 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70430bd0 <col:33, col:53> col:53 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70430db8 <line:234:5, col:56> col:21 find_insert 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70430d28 <col:33, col:53> col:53 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70430fb8 <line:246:5, col:58> col:24 operator[] 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::value_type &(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70430ec8 <col:35, col:55> col:55 key 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70431198 <line:257:5, col:56> col:21 find_insert 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::value_type &)' inline
| `-ParmVarDecl 0x55ec704310a8 <col:33, col:51> col:51 value 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::value_type &'
|-CXXMethodDecl 0x55ec70431358 <line:268:5, col:37> col:10 set 'bool (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::value_type &)'
| `-ParmVarDecl 0x55ec70431260 <col:14, col:32> col:32 value 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::value_type &'
|-CXXMethodDecl 0x55ec70431568 <line:273:5, col:38> col:14 erase 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator &)'
| `-ParmVarDecl 0x55ec70431478 <col:20, col:36> col:36 it 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::iterator &'
|-CXXMethodDecl 0x55ec70431768 <line:278:5, col:40> col:15 erase 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::size_type (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_type &)'
| `-ParmVarDecl 0x55ec70431678 <col:21, col:37> col:37 key 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::key_type &'
|-CXXMethodDecl 0x55ec70431820 <line:282:5, col:16> col:10 clear 'void ()'
|-CXXMethodDecl 0x55ec70431aa8 <line:286:5, col:30> col:10 swap 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)'
| `-ParmVarDecl 0x55ec704319b0 <col:15, col:29> col:29 x 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
|-CXXMethodDecl 0x55ec70431c00 <line:293:5, line:295:5> line:293:10 rehash 'void (HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type)'
| `-ParmVarDecl 0x55ec70431b70 <col:17, col:35> col:35 n 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec70431f10 <line:299:5, col:50> col:19 operator= 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &(const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)'
| `-ParmVarDecl 0x55ec70431df0 <col:29, col:49> col:49 x 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
|-CXXMethodDecl 0x55ec70432220 <line:303:5, line:306:5> line:303:26 operator= 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&)' inline
| `-ParmVarDecl 0x55ec70432100 <col:36, col:51> col:51 x 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
|-AccessSpecDecl 0x55ec704322d8 <line:309:3, col:10> col:3 private
|-FieldDecl 0x55ec70432310 <line:311:5, col:14> col:14 _rep 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::rep_type':'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-FieldDecl 0x55ec70432ee0 <line:312:5, col:37> col:37 _alloc 'SizedHashAllocator<sizeof(HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt)>':'SizedHashAllocator<32>'
|-CXXMethodDecl 0x55ec704330a8 <line:314:5, col:45> col:10 clone_elements 'void (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)'
| `-ParmVarDecl 0x55ec70432fe0 <col:25, col:44> col:45 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
|-CXXMethodDecl 0x55ec704332d8 <line:315:5, col:44> col:10 copy_elements 'void (const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)'
| `-ParmVarDecl 0x55ec70433210 <col:24, col:43> col:44 'const HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
|-FriendDecl 0x55ec70433450 <line:317:5, col:38> col:12 'class HashTable_iterator<Pair<const EtherAddress, AddrInfo> >':'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|-FriendDecl 0x55ec70433550 <line:318:5, col:44> col:12 'class HashTable_const_iterator<Pair<const EtherAddress, AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
`-FriendDecl 0x55ec704337b8 <line:319:5, col:52> col:52
  `-ClassTemplateDecl 0x55ec70433740 parent 0x55ec6fe194c8 prev 0x55ec70403bf0 <col:5, col:52> col:52 HashTable
    |-TemplateTypeParmDecl 0x55ec70433590 <col:15, col:24> col:24 typename depth 0 index 0 K
    |-TemplateTypeParmDecl 0x55ec70433608 <col:27, col:36> col:36 typename depth 0 index 1 V
    | `-TemplateArgument type 'void'
    |   `-inherited from TemplateTypeParm 0x55ec703f09e8 'V'
    |-CXXRecordDecl 0x55ec704336b0 parent 0x55ec6fe194c8 prev 0x55ec70403b60 <col:46, col:52> col:52 class HashTable
    |-ClassTemplateSpecialization 0x55ec70421fc0 'HashTable'
    `-ClassTemplateSpecialization 0x55ec704225b0 'HashTable'

Layout: <CGRecordLayout
  LLVMType:%class.HashTable.0 = type { %class.HashContainer, %class.SizedHashAllocator }
  NonVirtualBaseLLVMType:%class.HashTable.0 = type { %class.HashContainer, %class.SizedHashAllocator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70421fc0 <../dummy_inc/click/hashtable.hh:569:1, line:876:1> line:570:7 class HashTable definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-TemplateArgument type 'EtherAddress'
|-TemplateArgument type 'EtherSwitch::AddrInfo'
|-CXXRecordDecl 0x55ec704222e8 prev 0x55ec70421fc0 <col:1, col:7> col:7 implicit class HashTable
|-TypedefDecl 0x55ec70422740 <line:572:5, col:42> col:42 rep_type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>'
| `-TemplateSpecializationType 0x55ec704226d0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' sugar HashTable
|   |-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec704226b0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>'
|     `-ClassTemplateSpecialization 0x55ec704225b0 'HashTable'
|-AccessSpecDecl 0x55ec70422798 <line:574:3, col:9> col:3 public
|-TypedefDecl 0x55ec704227d0 <line:577:5, col:15> col:15 key_type 'EtherAddress':'EtherAddress'
| `-SubstTemplateTypeParmType 0x55ec70422380 'EtherAddress' sugar
|   |-TemplateTypeParmType 0x55ec70403a90 'K' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec70403a40 'K'
|   `-RecordType 0x55ec7037d9b0 'EtherAddress'
|     `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec70422868 <line:580:5, col:22> col:22 key_const_reference 'const EtherAddress &'
| `-LValueReferenceType 0x55ec70422830 'const EtherAddress &'
|   `-QualType 0x55ec70422381 'const EtherAddress' const
|     `-SubstTemplateTypeParmType 0x55ec70422380 'EtherAddress' sugar
|       |-TemplateTypeParmType 0x55ec70403a90 'K' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70403a40 'K'
|       `-RecordType 0x55ec7037d9b0 'EtherAddress'
|         `-CXXRecord 0x55ec703963b8 'EtherAddress'
|-TypedefDecl 0x55ec704228d0 <line:583:5, col:15> col:15 mapped_type 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'
| `-SubstTemplateTypeParmType 0x55ec704223c0 'EtherSwitch::AddrInfo' sugar
|   |-TemplateTypeParmType 0x55ec70403b10 'V' dependent depth 0 index 1
|   | `-TemplateTypeParm 0x55ec70403ab8 'V'
|   `-RecordType 0x55ec70421b20 'EtherSwitch::AddrInfo'
|     `-CXXRecord 0x55ec70421a88 'AddrInfo'
|-TypedefDecl 0x55ec704229f0 <line:586:5, col:30> col:30 value_type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
| `-TemplateSpecializationType 0x55ec70422950 'Pair<const EtherAddress, EtherSwitch::AddrInfo>' sugar Pair
|   |-TemplateArgument type 'const EtherAddress':'const EtherAddress'
|   |-TemplateArgument type 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'
|   `-RecordType 0x55ec704224f0 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|     `-ClassTemplateSpecialization 0x55ec704223f8 'Pair'
|-TypedefDecl 0x55ec70433850 <line:589:5, col:42> col:42 size_type 'typename rep_type::size_type':'unsigned long'
| `-ElaboratedType 0x55ec70433800 'typename rep_type::size_type' sugar
|   `-TypedefType 0x55ec7042fa40 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::size_type' sugar
|     |-Typedef 0x55ec7042ef90 'size_type'
|     `-ElaboratedType 0x55ec7042ef40 'typename rep_type::size_type' sugar
|       `-TypedefType 0x55ec7042a190 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::size_type' sugar
|         |-Typedef 0x55ec70429950 'size_type'
|         `-TypedefType 0x55ec6fec12f0 'size_t' sugar
|           |-Typedef 0x55ec6fe89ce0 'size_t'
|           `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-TypedefDecl 0x55ec70433920 <line:592:5, col:50> col:50 bucket_count_type 'typename rep_type::bucket_count_type':'unsigned int'
| `-ElaboratedType 0x55ec704338d0 'typename rep_type::bucket_count_type' sugar
|   `-TypedefType 0x55ec7042f1b0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::bucket_count_type' sugar
|     |-Typedef 0x55ec7042f060 'bucket_count_type'
|     `-ElaboratedType 0x55ec7042f010 'typename rep_type::bucket_count_type' sugar
|       `-TypedefType 0x55ec7042a330 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type' sugar
|         |-Typedef 0x55ec704299a8 'bucket_count_type'
|         `-TypedefType 0x55ec6ff715a0 'uint32_t' sugar
|           |-Typedef 0x55ec6fe825c8 'uint32_t'
|           `-TypedefType 0x55ec6fe5b610 '__uint32_t' sugar
|             |-Typedef 0x55ec6fe5b208 '__uint32_t'
|             `-BuiltinType 0x55ec6fe19660 'unsigned int'
|-CXXConstructorDecl 0x55ec704339b0 <line:596:5, line:598:5> line:596:5 HashTable 'void ()'
|-CXXConstructorDecl 0x55ec70433bd8 <line:601:5, line:603:5> line:601:14 used HashTable 'void (const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &)'
| `-ParmVarDecl 0x55ec70433ac8 <col:24, col:43> col:43 d 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &'
|-CXXConstructorDecl 0x55ec70433e78 <line:608:5, line:610:5> line:608:5 HashTable 'void (const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &, HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type)'
| |-ParmVarDecl 0x55ec70433ca8 <col:15, col:34> col:34 d 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &'
| `-ParmVarDecl 0x55ec70433d40 <col:37, col:55> col:55 n 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type':'unsigned int'
|-CXXConstructorDecl 0x55ec70434178 <line:613:5, line:615:5> line:613:5 HashTable 'void (const HashTable<EtherAddress, EtherSwitch::AddrInfo> &)'
| `-ParmVarDecl 0x55ec70434068 <col:15, col:38> col:38 x 'const HashTable<EtherAddress, EtherSwitch::AddrInfo> &'
|-CXXConstructorDecl 0x55ec70434478 <line:619:5, line:622:5> line:619:5 HashTable 'void (HashTable<EtherAddress, EtherSwitch::AddrInfo> &&)'
| `-ParmVarDecl 0x55ec70434368 <col:15, col:33> col:33 x 'HashTable<EtherAddress, EtherSwitch::AddrInfo> &&'
|-CXXDestructorDecl 0x55ec70434560 <line:626:5, line:627:5> line:626:5 used ~HashTable 'void () noexcept'
|-CXXMethodDecl 0x55ec704346b8 <line:631:5, line:633:5> line:631:22 size 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::size_type () const' inline
|-CXXMethodDecl 0x55ec70434768 <line:636:5, line:638:5> line:636:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec70434868 <line:641:5, line:643:5> line:641:30 bucket_count 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type () const' inline
|-CXXMethodDecl 0x55ec704349e8 <line:647:5, line:649:5> line:647:22 bucket_size 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::size_type (HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type) const' inline
| `-ParmVarDecl 0x55ec70434928 <col:34, col:52> col:52 n 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec70434b18 <line:655:5, line:657:5> line:655:31 default_value 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &() const' inline
|-TypedefDecl 0x55ec70434c70 <line:660:5, col:50> col:50 const_iterator 'HashTable_const_iterator<HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type>':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
| `-TemplateSpecializationType 0x55ec70434c00 'HashTable_const_iterator<HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type>' sugar HashTable_const_iterator
|   |-TemplateArgument type 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec7042ff80 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|     `-ClassTemplateSpecialization 0x55ec7042fea0 'HashTable_const_iterator'
|-TypedefDecl 0x55ec70434d50 <line:661:5, col:44> col:44 iterator 'HashTable_iterator<HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type>':'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
| `-TemplateSpecializationType 0x55ec70434ce0 'HashTable_iterator<HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type>' sugar HashTable_iterator
|   |-TemplateArgument type 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::value_type':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec70430160 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|     `-ClassTemplateSpecialization 0x55ec70430078 'HashTable_iterator'
|-CXXMethodDecl 0x55ec70434e18 <line:666:5, line:668:5> line:666:21 begin 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator ()' inline
|-CXXMethodDecl 0x55ec70434f38 <line:670:5, line:672:5> line:670:27 begin 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::const_iterator () const' inline
|-CXXMethodDecl 0x55ec70435008 <line:676:5, line:678:5> line:676:21 end 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator ()' inline
|-CXXMethodDecl 0x55ec704350d8 <line:680:5, line:682:5> line:680:27 end 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::const_iterator () const' inline
|-CXXMethodDecl 0x55ec70435288 <line:686:5, line:688:5> line:686:22 count 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::size_type (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference) const' inline
| `-ParmVarDecl 0x55ec704351c0 <col:28, col:48> col:48 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70435418 <line:693:5, line:695:5> line:693:27 find 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::const_iterator (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference) const' inline
| `-ParmVarDecl 0x55ec70435350 <col:32, col:52> col:52 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec704355a8 <line:697:5, line:699:5> line:697:21 find 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec704354e0 <col:26, col:46> col:46 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70435700 <line:705:5, line:707:5> line:705:21 find_prefer 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70435670 <col:33, col:53> col:53 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec704358b8 <line:714:5, line:719:5> line:714:24 get 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &(HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference) const'
| `-ParmVarDecl 0x55ec704357c8 <col:28, col:48> col:48 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70435a98 <line:725:5, line:730:5> line:725:18 get_pointer 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type *(HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)'
| `-ParmVarDecl 0x55ec704359a8 <col:30, col:50> col:50 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70435ca8 <line:732:5, line:737:5> line:732:24 get_pointer 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type *(HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference) const'
| `-ParmVarDecl 0x55ec70435bb8 <col:36, col:56> col:56 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70435e00 <line:747:5, line:752:5> line:747:24 operator[] 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &(HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference) const'
| `-ParmVarDecl 0x55ec70435d70 <col:35, col:55> col:55 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70436018 <line:765:5, col:59> col:25 operator[] 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &(HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec70435f28 <col:36, col:56> col:56 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70436170 <line:778:5, line:780:5> line:778:21 find_insert 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)' inline
| `-ParmVarDecl 0x55ec704360e0 <col:33, col:53> col:53 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec704363c8 <line:791:5, line:794:5> line:791:21 find_insert 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference, const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &)' inline
| |-ParmVarDecl 0x55ec70436238 <col:33, col:53> col:53 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
| `-ParmVarDecl 0x55ec704362b0 <line:792:33, col:52> col:52 value 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &'
|-CXXMethodDecl 0x55ec70436628 <line:810:5, col:63> col:10 set 'bool (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference, const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &)'
| |-ParmVarDecl 0x55ec70436498 <col:14, col:34> col:34 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
| `-ParmVarDecl 0x55ec70436510 <col:39, col:58> col:58 value 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &'
|-CXXMethodDecl 0x55ec70436808 <line:817:5, col:95> col:10 replace 'bool (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference, const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &)'
| |-ParmVarDecl 0x55ec704366f8 <col:18, col:38> col:38 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
| |-ParmVarDecl 0x55ec70436770 <col:43, col:62> col:62 value 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::mapped_type &'
| `-DeprecatedAttr 0x55ec704368f8 <col:84> Inherited "" ""
|-CXXMethodDecl 0x55ec70436a68 <line:822:5, line:824:5> line:822:14 erase 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator (const HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator &)'
| `-ParmVarDecl 0x55ec704369a8 <col:20, col:36> col:36 it 'const HashTable<EtherAddress, EtherSwitch::AddrInfo>::iterator &'
|-CXXMethodDecl 0x55ec70436bf8 <line:829:5, line:831:5> line:829:15 erase 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::size_type (HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference)'
| `-ParmVarDecl 0x55ec70436b30 <col:21, col:41> col:41 key 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::key_const_reference':'const EtherAddress &'
|-CXXMethodDecl 0x55ec70436cb0 <line:835:5, line:837:5> line:835:10 clear 'void ()'
|-CXXMethodDecl 0x55ec70436f78 <line:841:5, line:844:5> line:841:10 swap 'void (HashTable<EtherAddress, EtherSwitch::AddrInfo> &)'
| `-ParmVarDecl 0x55ec70436e88 <col:15, col:32> col:32 x 'HashTable<EtherAddress, EtherSwitch::AddrInfo> &'
|-CXXMethodDecl 0x55ec70437108 <line:851:5, line:853:5> line:851:10 rehash 'void (HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type)'
| `-ParmVarDecl 0x55ec70437040 <col:17, col:35> col:35 nb 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::bucket_count_type':'unsigned int'
|-CXXMethodDecl 0x55ec704378b8 <line:857:5, line:861:5> line:857:22 operator= 'HashTable<EtherAddress, EtherSwitch::AddrInfo> &(const HashTable<EtherAddress, EtherSwitch::AddrInfo> &)'
| `-ParmVarDecl 0x55ec70437368 <col:32, col:55> col:55 x 'const HashTable<EtherAddress, EtherSwitch::AddrInfo> &'
|-CXXMethodDecl 0x55ec70437c48 <line:865:5, line:868:5> line:865:22 operator= 'HashTable<EtherAddress, EtherSwitch::AddrInfo> &(HashTable<EtherAddress, EtherSwitch::AddrInfo> &&)'
| `-ParmVarDecl 0x55ec70437b18 <col:32, col:50> col:50 x 'HashTable<EtherAddress, EtherSwitch::AddrInfo> &&'
|-AccessSpecDecl 0x55ec70437d00 <line:871:3, col:10> col:3 private
|-FieldDecl 0x55ec70437d38 <line:873:5, col:14> col:14 _rep 'HashTable<EtherAddress, EtherSwitch::AddrInfo>::rep_type':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>'
`-FieldDecl 0x55ec70437d98 <line:874:5, col:7> col:7 _default_value 'EtherSwitch::AddrInfo':'EtherSwitch::AddrInfo'

Layout: <CGRecordLayout
  LLVMType:%class.HashTable = type { %class.HashTable.0, %"struct.EtherSwitch::AddrInfo" }
  NonVirtualBaseLLVMType:%class.HashTable = type { %class.HashTable.0, %"struct.EtherSwitch::AddrInfo" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70420d80 <../elements/etherswitch/etherswitch.hh:62:1, line:95:1> line:62:7 class EtherSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55ec70420ed8 <col:1, col:7> col:7 implicit referenced class EtherSwitch
|-AccessSpecDecl 0x55ec70420f68 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x55ec70420ff0 <line:64:3, col:15> col:3 EtherSwitch 'void ()'
|-CXXDestructorDecl 0x55ec704210e0 <line:65:3, col:16> col:3 ~EtherSwitch 'void ()' noexcept-unevaluated 0x55ec704210e0
| `-Overrides: [ 0x55ec7037dca8 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55ec70421210 <line:67:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55ec7037f108 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55ec70438a48 <col:34, col:58>
|   `-ReturnStmt 0x55ec70438a38 <col:36, col:43>
|     `-ImplicitCastExpr 0x55ec70438a20 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55ec704389f8 <col:43> 'const char [12]' lvalue "EtherSwitch"
|-CXXMethodDecl 0x55ec704212d8 <line:68:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55ec7037f1d0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55ec70438b20 <col:34, col:51>
|   `-ReturnStmt 0x55ec70438b10 <col:36, col:43>
|     `-ImplicitCastExpr 0x55ec70438af8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55ec70438ad8 <col:43> 'const char [5]' lvalue "2-/="
|-CXXMethodDecl 0x55ec704213a0 <line:69:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55ec7037f598 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55ec70438b80 <col:34, col:49>
|   `-ReturnStmt 0x55ec70438b70 <col:36, col:43>
|     `-ImplicitCastExpr 0x55ec70438b58 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55ec70438b38 <col:43> 'const char []' lvalue Var 0x55ec7037f6e0 'PUSH' 'const char []'
|-CXXMethodDecl 0x55ec70421468 <line:70:3, col:52> col:15 flow_code 'const char *() const'
| |-Overrides: [ 0x55ec7037f990 Element::flow_code 'const char *() const' ]
| `-CompoundStmt 0x55ec70438be0 <col:33, col:52>
|   `-ReturnStmt 0x55ec70438bd0 <col:35, col:42>
|     `-ImplicitCastExpr 0x55ec70438bb8 <col:42> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55ec70438b98 <col:42> 'const char [7]' lvalue "#/[^#]"
|-CXXMethodDecl 0x55ec70421740 <line:72:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55ec703809a0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55ec704215f0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55ec70421668 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70421810 <line:73:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55ec70380a70 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55ec704219d8 <line:75:3, col:32> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55ec7037df78 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55ec704218c8 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x55ec70421940 <col:23, col:31> col:31 p 'Packet *'
|-CXXRecordDecl 0x55ec70421a88 <line:77:5, line:81:5> line:77:12 referenced struct AddrInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec70421ba8 <col:5, col:12> col:12 implicit referenced struct AddrInfo
| |-FieldDecl 0x55ec70421c50 <line:78:2, col:6> col:6 port 'int'
| |-FieldDecl 0x55ec70421cb0 <line:79:2, col:12> col:12 stamp 'Timestamp'
| |-CXXConstructorDecl 0x55ec70421ea8 <line:80:2, col:43> col:9 used AddrInfo 'void (int, const Timestamp &)' inline
| | |-ParmVarDecl 0x55ec70421d18 <col:18, col:22> col:22 p 'int'
| | `-ParmVarDecl 0x55ec70421d90 <col:25, col:42> col:42 t 'const Timestamp &'
| |-CXXDestructorDecl 0x55ec704281d0 <line:77:12> col:12 implicit referenced ~AddrInfo 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55ec70438d80 <col:12> col:12 implicit constexpr AddrInfo 'void (const EtherSwitch::AddrInfo &)' inline default trivial noexcept-unevaluated 0x55ec70438d80
| | `-ParmVarDecl 0x55ec70438e68 <col:12> col:12 'const EtherSwitch::AddrInfo &'
| `-CXXConstructorDecl 0x55ec70438f08 <col:12> col:12 implicit constexpr AddrInfo 'void (EtherSwitch::AddrInfo &&)' inline default trivial noexcept-unevaluated 0x55ec70438f08
|   `-ParmVarDecl 0x55ec70439018 <col:12> col:12 'EtherSwitch::AddrInfo &&'
|-AccessSpecDecl 0x55ec70421f78 <line:83:3, col:10> col:3 private
|-TypedefDecl 0x55ec704221c8 <line:85:5, col:47> col:47 referenced Table 'HashTable<EtherAddress, EtherSwitch::AddrInfo>':'HashTable<EtherAddress, EtherSwitch::AddrInfo>'
| `-TemplateSpecializationType 0x55ec704220e0 'HashTable<EtherAddress, EtherSwitch::AddrInfo>' sugar HashTable
|   |-TemplateArgument type 'EtherAddress'
|   |-TemplateArgument type 'EtherSwitch::AddrInfo'
|   `-RecordType 0x55ec704220c0 'HashTable<EtherAddress, EtherSwitch::AddrInfo>'
|     `-ClassTemplateSpecialization 0x55ec70421fc0 'HashTable'
|-FieldDecl 0x55ec70437de8 <line:86:5, col:11> col:11 _table 'EtherSwitch::Table':'HashTable<EtherAddress, EtherSwitch::AddrInfo>'
|-FieldDecl 0x55ec70437e48 <line:87:5, col:14> col:14 _timeout 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70437fc0 <line:89:5, col:39> col:10 broadcast 'void (int, Packet *)'
| |-ParmVarDecl 0x55ec70437eb0 <col:20, col:24> col:24 source 'int'
| `-ParmVarDecl 0x55ec70437f28 <col:32, col:38> col:39 'Packet *'
|-CXXMethodDecl 0x55ec70438198 <line:91:5, col:43> col:19 reader 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ec70438080 <col:26, col:34> col:35 'Element *'
| `-ParmVarDecl 0x55ec70438100 <col:37, col:42> col:43 'void *'
|-CXXMethodDecl 0x55ec70438478 <line:92:5, col:72> col:16 writer 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ec70438258 <col:23, col:36> col:37 'const String &'
| |-ParmVarDecl 0x55ec704382d0 <col:39, col:47> col:48 'Element *'
| |-ParmVarDecl 0x55ec70438350 <col:50, col:55> col:56 'void *'
| `-ParmVarDecl 0x55ec704383c8 <col:58, col:71> col:72 'ErrorHandler *'
|-FriendDecl 0x55ec70438658 <line:93:5, col:18> col:12 'class ListenEtherSwitch':'ListenEtherSwitch'
|-CXXConstructorDecl 0x55ec704386c8 <line:62:7> col:7 implicit EtherSwitch 'void (const EtherSwitch &)' inline default_delete noexcept-unevaluated 0x55ec704386c8
| `-ParmVarDecl 0x55ec704387d8 <col:7> col:7 'const EtherSwitch &'
`-CXXMethodDecl 0x55ec70438878 <col:7> col:7 implicit operator= 'EtherSwitch &(const EtherSwitch &)' inline default_delete noexcept-unevaluated 0x55ec70438878
  `-ParmVarDecl 0x55ec70438988 <col:7> col:7 'const EtherSwitch &'

Layout: <CGRecordLayout
  LLVMType:%class.EtherSwitch = type <{ %class.Element.base, [4 x i8], %class.HashTable, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.EtherSwitch.base = type <{ %class.Element.base, [4 x i8], %class.HashTable, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70151870 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ec70151988 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55ec70151a28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55ec70151a88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55ec70151ae8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55ec70151b98 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70151ea0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec70151fb8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55ec70152060 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55ec701520c8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55ec70152158 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55ec701581f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec70158628 <col:12>
|-CXXConstructorDecl 0x55ec701582f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec70158408 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ec70152060 'data' 'const char *'
| | `-ImplicitCastExpr 0x55ec7015abb0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55ec7015ab80 <col:12> 'const char *const' lvalue .data 0x55ec70152060
| |     `-DeclRefExpr 0x55ec7015ab60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ec701520c8 'length' 'int'
| | `-ImplicitCastExpr 0x55ec7015ac40 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ec7015ac10 <col:12> 'const int' lvalue .length 0x55ec701520c8
| |     `-DeclRefExpr 0x55ec7015abf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ec70152158 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55ec7015acd0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55ec7015aca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ec70152158
| |     `-DeclRefExpr 0x55ec7015ac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| `-CompoundStmt 0x55ec7015ad28 <col:12>
|-CXXConstructorDecl 0x55ec701584a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec701584a8
| `-ParmVarDecl 0x55ec701585b8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55ec7015db10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ec70169528 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec70169638 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55ec70169b50 <col:12>
|   |-BinaryOperator 0x55ec70169968 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ec70169920 <col:12> 'const char *' lvalue ->data 0x55ec70152060
|   | | `-CXXThisExpr 0x55ec70169910 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ec70169950 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55ec701698e0 <col:12> 'const char *const' lvalue .data 0x55ec70152060
|   |     `-DeclRefExpr 0x55ec701698c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ec70169a30 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55ec701699e8 <col:12> 'int' lvalue ->length 0x55ec701520c8
|   | | `-CXXThisExpr 0x55ec701699d8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ec70169a18 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55ec701699a8 <col:12> 'const int' lvalue .length 0x55ec701520c8
|   |     `-DeclRefExpr 0x55ec70169988 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ec70169af8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55ec70169ab0 <col:12> 'String::memo_t *' lvalue ->memo 0x55ec70152158
|   | | `-CXXThisExpr 0x55ec70169aa0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ec70169ae0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55ec70169a70 <col:12> 'String::memo_t *const' lvalue .memo 0x55ec70152158
|   |     `-DeclRefExpr 0x55ec70169a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55ec70169b40 <col:12>
|     `-UnaryOperator 0x55ec70169b28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec70169b18 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55ec701696a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec701696a8
  `-ParmVarDecl 0x55ec701697b8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70148de0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec70148ef8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55ec70148f88 <col:16, col:22> col:16 public
|-TypedefDecl 0x55ec70148fc8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55ec6fe1a010 'const char *'
|   `-QualType 0x55ec6fe19561 'const char' const
|     `-BuiltinType 0x55ec6fe19560 'char'
|-TypedefDecl 0x55ec70149050 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55ec70149020 'String::const_iterator' sugar
|   |-Typedef 0x55ec70148fc8 'const_iterator'
|   `-PointerType 0x55ec6fe1a010 'const char *'
|     `-QualType 0x55ec6fe19561 'const char' const
|       `-BuiltinType 0x55ec6fe19560 'char'
|-TypedefDecl 0x55ec701491c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55ec70149130 'int (String::*)() const'
|   |-RecordType 0x55ec70148e70 'String'
|   | `-CXXRecord 0x55ec70148de0 'String'
|   `-ParenType 0x55ec701490d0 'int () const' sugar
|     `-FunctionProtoType 0x55ec7011cc60 'int () const' const cdecl
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec70149228 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55ec6ff71840 'int64_t' sugar
|   |-Typedef 0x55ec6fe82490 'int64_t'
|   `-TypedefType 0x55ec6fe5b6a0 '__int64_t' sugar
|     |-Typedef 0x55ec6fe5b278 '__int64_t'
|     `-BuiltinType 0x55ec6fe195e0 'long'
|-TypedefDecl 0x55ec70149290 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55ec6ff71760 'uint64_t' sugar
|   |-Typedef 0x55ec6fe82630 'uint64_t'
|   `-TypedefType 0x55ec6fe5b730 '__uint64_t' sugar
|     |-Typedef 0x55ec6fe5b2e8 '__uint64_t'
|     `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-TypedefDecl 0x55ec70149320 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55ec701492f0 'String::intmax_t' sugar
|   |-Typedef 0x55ec70149228 'intmax_t'
|   `-TypedefType 0x55ec6ff71840 'int64_t' sugar
|     |-Typedef 0x55ec6fe82490 'int64_t'
|     `-TypedefType 0x55ec6fe5b6a0 '__int64_t' sugar
|       |-Typedef 0x55ec6fe5b278 '__int64_t'
|       `-BuiltinType 0x55ec6fe195e0 'long'
|-TypedefDecl 0x55ec701493b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55ec70149380 'String::uintmax_t' sugar
|   |-Typedef 0x55ec70149290 'uintmax_t'
|   `-TypedefType 0x55ec6ff71760 'uint64_t' sugar
|     |-Typedef 0x55ec6fe82630 'uint64_t'
|     `-TypedefType 0x55ec6fe5b730 '__uint64_t' sugar
|       |-Typedef 0x55ec6fe5b2e8 '__uint64_t'
|       `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-CXXConstructorDecl 0x55ec70149470 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55ec70149618 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55ec70149558 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55ec701497c8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55ec70149708 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55ec70149920 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55ec70149890 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55ec70149b38 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ec701499e8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55ec70149a68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55ec70149d58 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55ec70149c08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55ec70149c88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55ec70149f78 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ec70149e28 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55ec70149ea8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55ec7014a198 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55ec7014a048 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55ec7014a0c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55ec7014a328 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55ec7014a260 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55ec7014a4a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55ec7014a3e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55ec7014a638 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55ec7014a570 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55ec7014a790 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55ec7014a700 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55ec7014a8e8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55ec7014a858 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55ec7014aa40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55ec7014a9b0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55ec7014abc8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55ec7014ab08 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55ec7014ad58 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55ec7014ac90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55ec7014aee8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55ec7014ae20 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55ec7014b078 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55ec7014afb0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55ec7014b170 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55ec7014b298 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55ec7014b418 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55ec7014b350 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55ec7014b568 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55ec7014b4d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55ec7014b620 <col:63> "" ""
|-CXXMethodDecl 0x55ec7014b768 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55ec7014b6a8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55ec7014b978 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55ec7014b828 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55ec7014b8a8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55ec7014bb98 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55ec7014ba40 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55ec7014bac0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55ec7014be78 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55ec7014bc58 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55ec7014bcd8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55ec70157cc0 <col:55> 'int' 10
| `-ParmVarDecl 0x55ec7014bd50 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec70157ce0 <col:76> 'bool' true
|-CXXMethodDecl 0x55ec7014c158 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55ec7014bf40 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55ec7014bfc0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55ec70157cf0 <col:56> 'int' 10
| `-ParmVarDecl 0x55ec7014c038 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec70157d10 <col:77> 'bool' true
|-CXXMethodDecl 0x55ec7014c260 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55ec7014c328 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55ec7014c3f0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55ec7014c490 <col:20>
| `-OptimizeNoneAttr 0x55ec7014c4e8 <col:30>
|-CXXConversionDecl 0x55ec7014c5d8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec7014c6a8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55ec7014c768 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55ec7014c858 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ec7014c918 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ec7014ca98 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55ec7014c9d0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55ec7014cbe8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55ec7014cb58 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55ec7014ccd8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55ec7014cd98 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55ec7014cfe8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55ec7014ce50 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55ec7014ced0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55ec7014d248 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55ec7014d0b0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55ec7014d130 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55ec7014d318 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7014d528 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55ec7014d3d0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55ec7014d450 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55ec7014d748 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55ec7014d5f0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55ec7014d670 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55ec7014d8d8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55ec7014d810 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55ec7014d9c8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55ec7014db38 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ec7014da78 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ec7014dd48 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55ec7014dbf8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ec7014dc78 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ec7014df60 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55ec7014de08 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55ec7014de80 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55ec7014e0f0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55ec7014e020 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ec7014e310 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55ec7014e1b0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55ec7014e230 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ec7014e460 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ec7014e3d0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55ec7014e638 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ec7014e520 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ec7014e5a0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55ec7014e788 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55ec7014e6f8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55ec7014e9a0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55ec7014e840 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55ec7014e8c0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55ec70157d20 <col:39> 'int' 0
|-CXXMethodDecl 0x55ec7014ebc0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55ec7014ea60 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55ec7014eae0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55ec70157d40 <col:48> 'int' 0
|-CXXMethodDecl 0x55ec7014eda0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55ec7014ec80 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55ec7014ed00 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55ec70157d60 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55ec7014ee70 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55ec7014ef30 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55ec7014eff0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55ec7014f0b0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55ec7014f170 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55ec7014f318 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ec7014f220 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55ec7014f498 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55ec7014f3d0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55ec7014f670 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ec7014f558 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55ec7014f7e8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55ec7014f728 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55ec7014f930 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55ec7014f8a0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ec7014fa80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55ec7014f9f0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55ec7014fc58 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ec7014fb40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ec7014fbc0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ec7014fe38 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ec7014fd20 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55ec7014fda0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55ec7014ff88 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55ec7014fef8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55ec70150198 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55ec70150048 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55ec701500c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55ec701502f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55ec70150260 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ec70150450 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55ec701503b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55ec701504f8 <col:57> "" ""
|-CXXMethodDecl 0x55ec70150608 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ec70150578 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55ec70150758 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ec701506c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55ec701508d8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55ec70150810 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55ec701509a0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55ec70150a60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55ec70150b20 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55ec70150bc0 <col:49> "" ""
|-CXXMethodDecl 0x55ec70150c50 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55ec70150d10 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55ec70150e00 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55ec70150ec8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55ec70150f88 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55ec70151048 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55ec70151140 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55ec70151208 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55ec701512d0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55ec701514a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55ec70151388 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55ec70151408 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55ec701516d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55ec70151570 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55ec701515f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55ec701517e0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55ec70151848 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55ec70151870 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ec70151988 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55ec70151a28 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55ec70151a88 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55ec70151ae8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55ec70151b98 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55ec70151c00 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55ec70151e38 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55ec70151e88 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70151e18 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55ec70151d28 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55ec70151cd0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55ec70151d10 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55ec70151cf0 <col:32> 'int' 8
|-CXXRecordDecl 0x55ec70151ea0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec70151fb8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55ec70152060 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55ec701520c8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55ec70152158 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55ec701581f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ec70158628 <col:12>
| |-CXXConstructorDecl 0x55ec701582f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec70158408 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec70152060 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55ec7015abb0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55ec7015ab80 <col:12> 'const char *const' lvalue .data 0x55ec70152060
| | |     `-DeclRefExpr 0x55ec7015ab60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec701520c8 'length' 'int'
| | | `-ImplicitCastExpr 0x55ec7015ac40 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55ec7015ac10 <col:12> 'const int' lvalue .length 0x55ec701520c8
| | |     `-DeclRefExpr 0x55ec7015abf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec70152158 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55ec7015acd0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55ec7015aca0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ec70152158
| | |     `-DeclRefExpr 0x55ec7015ac80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70158408 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55ec7015ad28 <col:12>
| |-CXXConstructorDecl 0x55ec701584a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec701584a8
| | `-ParmVarDecl 0x55ec701585b8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55ec7015db10 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55ec70169528 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec70169638 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55ec70169b50 <col:12>
| |   |-BinaryOperator 0x55ec70169968 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55ec70169920 <col:12> 'const char *' lvalue ->data 0x55ec70152060
| |   | | `-CXXThisExpr 0x55ec70169910 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ec70169950 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ec701698e0 <col:12> 'const char *const' lvalue .data 0x55ec70152060
| |   |     `-DeclRefExpr 0x55ec701698c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ec70169a30 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55ec701699e8 <col:12> 'int' lvalue ->length 0x55ec701520c8
| |   | | `-CXXThisExpr 0x55ec701699d8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ec70169a18 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55ec701699a8 <col:12> 'const int' lvalue .length 0x55ec701520c8
| |   |     `-DeclRefExpr 0x55ec70169988 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ec70169af8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55ec70169ab0 <col:12> 'String::memo_t *' lvalue ->memo 0x55ec70152158
| |   | | `-CXXThisExpr 0x55ec70169aa0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ec70169ae0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ec70169a70 <col:12> 'String::memo_t *const' lvalue .memo 0x55ec70152158
| |   |     `-DeclRefExpr 0x55ec70169a50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ec70169638 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55ec70169b40 <col:12>
| |     `-UnaryOperator 0x55ec70169b28 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ec70169b18 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55ec701696a8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec701696a8
|   `-ParmVarDecl 0x55ec701697b8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55ec701521d0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55ec70152418 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55ec70152238 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55ec701522b8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55ec70152330 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55ec701581b0 <col:79, line:261:5>
|   |-BinaryOperator 0x55ec70157e28 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ec70157dc0 <col:2, col:5> 'const char *' lvalue .data 0x55ec70152060
|   | | `-MemberExpr 0x55ec70157d90 <col:2> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|   | |   `-CXXThisExpr 0x55ec70157d80 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ec70157e10 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ec70157df0 <col:12> 'const char *' lvalue ParmVar 0x55ec70152238 'data' 'const char *'
|   |-BinaryOperator 0x55ec70157ef0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55ec70157e88 <col:2, col:5> 'int' lvalue .length 0x55ec701520c8
|   | | `-MemberExpr 0x55ec70157e58 <col:2> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|   | |   `-CXXThisExpr 0x55ec70157e48 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ec70157ed8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ec70157eb8 <col:14> 'int' lvalue ParmVar 0x55ec701522b8 'length' 'int'
|   `-IfStmt 0x55ec70158198 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55ec70158010 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ec70157ff8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55ec70157fd8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55ec70157fb8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55ec70157f50 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55ec70152158
|     |       | `-MemberExpr 0x55ec70157f20 <col:7> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|     |       |   `-CXXThisExpr 0x55ec70157f10 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55ec70157fa0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ec70157f80 <col:17> 'String::memo_t *' lvalue ParmVar 0x55ec70152330 'memo' 'String::memo_t *'
|     `-CallExpr 0x55ec70158170 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55ec70158158 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ec70158060 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55ec70140e48 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55ec701580c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ec70151a28
|         `-ImplicitCastExpr 0x55ec701580b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55ec70158090 <col:27> 'String::memo_t *' lvalue ParmVar 0x55ec70152330 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55ec701526c8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55ec701524e8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55ec70152568 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55ec701525e0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55ec701521d0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55ec70158638 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ec701587c8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55ec70158730 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55ec701586a0 <col:2> '<bound member function type>' ->assign_memo 0x55ec70152418
|     | `-ImplicitCastExpr 0x55ec70158768 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55ec70158690 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55ec70158780 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec701586d0 <col:14> 'const char *' lvalue ParmVar 0x55ec701524e8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55ec70158798 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ec701586f0 <col:20> 'int' lvalue ParmVar 0x55ec70152568 'length' 'int'
|     `-ImplicitCastExpr 0x55ec701587b0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70158710 <col:28> 'String::memo_t *' lvalue ParmVar 0x55ec701525e0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55ec70152858 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55ec70152798 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55ec70158a20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55ec701589a0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55ec701587f0 <col:2> '<bound member function type>' ->assign_memo 0x55ec70152418
|     | `-CXXThisExpr 0x55ec701587e0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55ec701589d8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55ec70158870 <col:14, col:19> 'const char *' lvalue .data 0x55ec70152060
|     |   `-MemberExpr 0x55ec70158840 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55ec701521d0
|     |     `-DeclRefExpr 0x55ec70158820 <col:14> 'const String' lvalue ParmVar 0x55ec70152798 'x' 'const String &'
|     |-ImplicitCastExpr 0x55ec701589f0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55ec701588f0 <col:25, col:30> 'int' lvalue .length 0x55ec701520c8
|     |   `-MemberExpr 0x55ec701588c0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55ec701521d0
|     |     `-DeclRefExpr 0x55ec701588a0 <col:25> 'const String' lvalue ParmVar 0x55ec70152798 'x' 'const String &'
|     `-ImplicitCastExpr 0x55ec70158a08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55ec70158970 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55ec70152158
|         `-MemberExpr 0x55ec70158940 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55ec701521d0
|           `-DeclRefExpr 0x55ec70158920 <col:38> 'const String' lvalue ParmVar 0x55ec70152798 'x' 'const String &'
|-CXXMethodDecl 0x55ec70152920 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55ec701593e0 <col:31, line:278:5>
|   `-IfStmt 0x55ec701593c8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55ec70158ac0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ec70158aa8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55ec70158a78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ec70152158
|     |     `-MemberExpr 0x55ec70158a48 <col:6> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|     |       `-CXXThisExpr 0x55ec70158a38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55ec701593a0 <col:15, line:277:2>
|       |-ParenExpr 0x55ec70158f70 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55ec70158f40 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55ec70158bd0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55ec70158bb8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55ec70158ba0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55ec70158b60 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ec70151a28
|       |   |       `-ImplicitCastExpr 0x55ec70158b48 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55ec70158b18 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55ec70152158
|       |   |           `-MemberExpr 0x55ec70158ae8 <col:27> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|       |   |             `-CXXThisExpr 0x55ec70158ad8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55ec70158c30 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55ec70158c10 <col:54> 'int' 0
|       |   `-CallExpr 0x55ec70158ea0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55ec70158e88 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55ec70158e08 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55ec70158ee0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ec70158d18 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55ec70158ef8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ec70158d48 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55ec70158f10 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55ec70158d80 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55ec70158f28 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55ec70158df0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55ec70158dd8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55ec70158da0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55ec701592c0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55ec70159180 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55ec70159168 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55ec701590e0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55ec70142290 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55ec701590b0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ec70151a28
|       | |   `-ImplicitCastExpr 0x55ec70159098 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55ec70159068 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55ec70152158
|       | |       `-MemberExpr 0x55ec70159038 <col:40> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|       | |         `-CXXThisExpr 0x55ec70159028 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55ec70159280 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55ec70159268 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55ec701591a8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55ec70157100 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55ec701592a8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55ec70159208 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55ec70152158
|       |       `-MemberExpr 0x55ec701591d8 <col:15> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|       |         `-CXXThisExpr 0x55ec701591c8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55ec70159380 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55ec70159318 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ec70152158
|         | `-MemberExpr 0x55ec701592e8 <col:6> 'String::rep_t' lvalue ->_r 0x55ec701521d0
|         |   `-CXXThisExpr 0x55ec701592d8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55ec70159368 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55ec70159348 <col:16> 'int' 0
|-CXXMethodDecl 0x55ec70152bb8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55ec701529d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ec70152a58 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ec70152ad0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55ec70152c90 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55ec70152ee0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55ec70152d48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ec70152dc8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ec70152e40 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ec701530c8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55ec70152fb0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55ec70153030 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55ec701531c8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55ec701594b8 <col:41, line:286:5>
|   `-ReturnStmt 0x55ec701594a8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55ec70159478 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55ec70159440 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55ec70159428 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55ec70159408 <col:46> 'int' 1
|-CXXMethodDecl 0x55ec70153468 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55ec70153280 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55ec70153300 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55ec70153380 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55ec70157100 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55ec70153530 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ec701571d0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55ec701573a0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ec70157288 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ec70157308 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55ec70157460 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55ec70157528 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55ec70157628 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55ec701576a0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55ec70157718 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55ec70157780 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55ec70157880 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55ec701578d0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70157860 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55ec70157840 <col:22> 'int' 14
|-CXXMethodDecl 0x55ec70157ae8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55ec70157900 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55ec70157980 <col:38> col:41 'int'
| `-ParmVarDecl 0x55ec70157a00 <col:43> col:46 'int'
|-FriendDecl 0x55ec70157bf0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55ec70157c80 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70466680 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55ec70466858 prev 0x55ec70466680 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ec704668e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ec70466910 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec70469b10 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55ec70469ac0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55ec70469aa0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55ec70466b28 'type'
|     `-SubstTemplateTypeParmType 0x55ec70466af0 'String' sugar
|       |-TemplateTypeParmType 0x55ec7010c680 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec7010c630 'T'
|       `-RecordType 0x55ec70148e70 'String'
|         `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec70469bc8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55ec70469b90 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55ec70469b70 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ec70469b10 'type'
|     `-ElaboratedType 0x55ec70469ac0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55ec70469aa0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55ec70466b28 'type'
|         `-SubstTemplateTypeParmType 0x55ec70466af0 'String' sugar
|           |-TemplateTypeParmType 0x55ec7010c680 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec7010c630 'T'
|           `-RecordType 0x55ec70148e70 'String'
|             `-CXXRecord 0x55ec70148de0 'String'
|-CXXMethodDecl 0x55ec70469d48 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55ec70469c58 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55ec70469e38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ec70469f18 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55ec70469f18
|-CXXMethodDecl 0x55ec7046a1e8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ec7046a0f0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55ec7046a428 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ec7046a2a0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec7046a318 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046a5f8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ec7046a4e8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec7046a560 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046a758 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ec7046a828 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ec7046aa78 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ec7046a8e8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ec7046a960 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046acd8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55ec7046ab48 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ec7046abc0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046ae98 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ec7046ada8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046b058 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ec7046af60 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046b110 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ec7046b1c0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ec7046b3f8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ec7046b270 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec7046b2e8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ec7046b698 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ec7046b5a0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55ec7046b760 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55ec7046b7b0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ec7046b800 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70380610 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55ec70465328 prev 0x55ec70380610 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ec704665f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55ec704665a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55ec70466580 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ec70466430 'type'
|     `-SubstTemplateTypeParmType 0x55ec704662c0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55ec700e2430 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55ec700e23d8 'F'
|       `-RecordType 0x55ec70465f20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55ec70465e40 'typed_array_memory'
|-FieldDecl 0x55ec7046b850 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55ec7046b8a0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ec7046b8d8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|   |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec70119948 'T'
|   `-RecordType 0x55ec70148e70 'String'
|     `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046b968 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55ec7046b930 'String &'
|   `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-RecordType 0x55ec70148e70 'String'
|       `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046b9f8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55ec7046b9c0 'const String &'
|   `-QualType 0x55ec704653c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-RecordType 0x55ec70148e70 'String'
|         `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046ba88 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55ec7046ba50 'String *'
|   `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-RecordType 0x55ec70148e70 'String'
|       `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046bb18 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55ec7046bae0 'const String *'
|   `-QualType 0x55ec704653c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-RecordType 0x55ec70148e70 'String'
|         `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046c770 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55ec7046c720 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55ec7046c700 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55ec7046c638 'type'
|     `-LValueReferenceType 0x55ec7046c600 'const String &'
|       `-QualType 0x55ec7046c3a1 'const String' const
|         `-SubstTemplateTypeParmType 0x55ec7046c3a0 'String' sugar
|           |-TemplateTypeParmType 0x55ec700ec380 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec700ec328 'T'
|           `-RecordType 0x55ec70148e70 'String'
|             `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046c7d8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55ec7046b9c0 'const String &'
|   `-QualType 0x55ec704653c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-RecordType 0x55ec70148e70 'String'
|         `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046c830 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec7046c898 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55ec7046ba50 'String *'
|   `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-RecordType 0x55ec70148e70 'String'
|       `-CXXRecord 0x55ec70148de0 'String'
|-TypedefDecl 0x55ec7046c900 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55ec7046bae0 'const String *'
|   `-QualType 0x55ec704653c1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ec704653c0 'String' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-RecordType 0x55ec70148e70 'String'
|         `-CXXRecord 0x55ec70148de0 'String'
|-EnumDecl 0x55ec7046c958 <line:134:5> col:5
| `-EnumConstantDecl 0x55ec7046ca50 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ec7046ca30 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ec7011b028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ec7011b000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ec7011afe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ec7046cad8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ec7046cd68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec7046cb90 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec7046cc30 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55ec7046cff8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55ec7046cee0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55ec7046d2b8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55ec7046d1a0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ec7046d5d0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55ec7046d4b0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55ec7046d8e0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55ec7046d7c0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ec7046dbd0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec7046da18 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec7046da90 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ec7046dcf8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ec7046dda8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046de00 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046de48 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ec7046def8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046df50 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046e018 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ec7046e0c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046e120 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046e168 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ec7046e218 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046e270 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046e2b8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ec7046e368 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046e3c0 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046e408 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ec7046e4b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec7046e510 <col:30> Inherited
|-CXXMethodDecl 0x55ec7046e538 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ec7046e5e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ec7046e698 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec7046e858 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec7046e748 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec7046e7c0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ec7046e9a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ec7046e918 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec7046eb58 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55ec7046ea60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ec7046ec10 <col:20>
| `-OptimizeNoneAttr 0x55ec7046ec68 <col:30>
|-CXXMethodDecl 0x55ec7046ed88 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55ec7046ec90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ec7046ee40 <col:20>
| `-OptimizeNoneAttr 0x55ec7046ee98 <col:30>
|-CXXMethodDecl 0x55ec7046ef50 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ec7046eec0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec7046f098 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ec7046f008 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec7046f1c8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55ec7046f2c8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55ec7046f398 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55ec7046f468 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55ec7046f5a8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ec7046f518 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec7046f6f0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ec7046f660 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec7046f838 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ec7046f7a8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ec7046f8f0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ec7046f9f0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ec7046f960 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ec7046faa8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ec7046fb68 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55ec7046fc68 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55ec7046fde8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ec7046fd28 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55ec704705a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ec7046fea0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55ec70470508 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55ec70470408 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55ec70470688 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ec704707d8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ec70470748 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ec70470890 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ec70470ad8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec70470950 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ec704709c8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ec70470c68 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55ec70470ba8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ec704716d0 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55ec70470d30 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ec70470da8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ec70471790 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ec704719e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55ec704718f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55ec70471ab8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55ec70471ab8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70507778 prev 0x55ec7047cf58 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec70507870 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55ec70507900 <col:22, col:28> col:22 public
|-EnumDecl 0x55ec70507928 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55ec70507a48 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507a28 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55ec70507a10 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ec705079f0 <col:14> 'int' 999
| |-EnumConstantDecl 0x55ec70507af0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507ad0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55ec70507ab8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ec70507a98 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ec70507b80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507b60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55ec70507b40 <col:17> 'int' 0
| |-EnumConstantDecl 0x55ec70507c10 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507bf0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55ec70507bd0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55ec70507ca0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507c80 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55ec70507c60 <col:16> 'int' 2
| |-EnumConstantDecl 0x55ec70507d30 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507d10 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55ec70507cf0 <col:13> 'int' 3
| |-EnumConstantDecl 0x55ec70507dc0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507da0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55ec70507d80 <col:15> 'int' 4
| |-EnumConstantDecl 0x55ec70507e50 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507e30 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55ec70507e10 <col:14> 'int' 5
| |-EnumConstantDecl 0x55ec70507ee0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ec70507ec0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55ec70507ea0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55ec70507f70 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55ec70507f50 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55ec70507f30 <col:13> 'int' 7
|-VarDecl 0x55ec70507fe0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55ec70508068 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55ec705080f0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55ec70508178 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55ec70508200 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55ec70508288 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55ec70508310 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55ec70508398 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55ec70508420 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55ec705084a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55ec70508530 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55ec70508630 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55ec7050d968 '_nerrors' 'int'
| | `-IntegerLiteral 0x55ec7050e0f8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55ec7050e168 <col:16, line:129:5>
|-CXXDestructorDecl 0x55ec70508720 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55ec7050e178 <col:29, line:132:5>
|-CXXMethodDecl 0x55ec705088d8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55ec70508810 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec705089a0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ec70508a88 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ec7050e1d0 <col:44, line:161:5>
|   `-ReturnStmt 0x55ec7050e1c0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55ec7050e1a8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7050e188 <col:9> 'ErrorHandler *' lvalue Var 0x55ec7050d9c8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70508bc8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55ec70508b38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ec70508c90 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ec7050e230 <col:43, line:173:5>
|   `-ReturnStmt 0x55ec7050e220 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55ec7050e208 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7050e1e8 <col:9> 'ErrorHandler *' lvalue Var 0x55ec7050da40 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55ec70508d48 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55ec70508dc8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55ec70508ed8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55ec70508e48 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509028 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55ec70508f98 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509180 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55ec705090e8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55ec705092d8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55ec70509240 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509430 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55ec70509398 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509640 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ec705094e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55ec70509568 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509818 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ec70509700 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55ec70509780 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509a38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ec705098d8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55ec70509958 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509c18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ec70509af8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ec70509b78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509df8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ec70509cd8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ec70509d58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ec70509f80 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55ec70509eb8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55ec7050a150 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55ec7050a038 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ec7050a0b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55ec7050e488 <col:57, line:234:5>
|   `-ReturnStmt 0x55ec7050e478 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55ec7050e460 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ec7050e408 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ec7050e3d8 <col:9> '<bound member function type>' ->xmessage 0x55ec70509f80
|         | `-CXXThisExpr 0x55ec7050e3c8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55ec7050e448 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ec7050e430 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ec7050e3a8 <col:18, col:40> 'String' (CXXTemporary 0x55ec7050e3a8)
|               `-CallExpr 0x55ec7050e370 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55ec7050e358 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55ec7050e2d0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ec7050c198 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55ec7050e2f0 <col:31> 'const String' lvalue ParmVar 0x55ec7050a0b0 'str' 'const String &'
|                 `-DeclRefExpr 0x55ec7050e310 <col:36> 'const String' lvalue ParmVar 0x55ec7050a038 'anno' 'const String &'
|-CXXMethodDecl 0x55ec7050a430 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ec7050a210 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ec7050a290 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55ec7050a308 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ec7050e718 <col:68, line:243:5>
|   `-ReturnStmt 0x55ec7050e708 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55ec7050e6f0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ec7050e690 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ec7050e660 <col:9> '<bound member function type>' ->xmessage 0x55ec7050a150
|         | `-CXXThisExpr 0x55ec7050e650 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ec7050e528 <col:18> 'const String' lvalue ParmVar 0x55ec7050a210 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ec7050e6d8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ec7050e6c0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ec7050e630 <col:24, col:40> 'String' (CXXTemporary 0x55ec7050e630)
|               `-CXXMemberCallExpr 0x55ec7050e5c8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55ec7050e558 <col:24> '<bound member function type>' ->vformat 0x55ec7050b660
|                 | `-CXXThisExpr 0x55ec7050e548 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ec7050e5f8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ec7050e588 <col:32> 'const char *' lvalue ParmVar 0x55ec7050a290 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ec7050e610 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ec7050e5a8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ec7050a308 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ec7050a6d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55ec7050a4f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ec7050a570 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ec7050a5e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55ec7050ea58 <col:23, line:254:5>
|   `-ReturnStmt 0x55ec7050ea48 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55ec7050ea30 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55ec7050e9d0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55ec7050e9a0 <col:9> '<bound member function type>' ->xmessage 0x55ec7050a150
|         | `-CXXThisExpr 0x55ec7050e990 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55ec7050ea18 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55ec7050ea00 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55ec7050e950 <col:18, col:65> 'String' (CXXTemporary 0x55ec7050e950)
|         |     `-CallExpr 0x55ec7050e8e8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55ec7050e8d0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55ec7050e7b8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ec7050c198 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55ec7050e7d8 <col:31> 'const String' lvalue ParmVar 0x55ec7050a570 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55ec7050e930 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55ec7050e918 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55ec7050e8b0 <col:37, col:64> 'String' (CXXTemporary 0x55ec7050e8b0)
|         |             `-CallExpr 0x55ec7050e880 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55ec7050e868 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55ec7050e7f8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55ec7050c7e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55ec7050e818 <col:56> 'const String' lvalue ParmVar 0x55ec7050a4f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55ec7050e970 <col:68> 'const String' lvalue ParmVar 0x55ec7050a5e8 'str' 'const String &'
|-CXXMethodDecl 0x55ec7050aa98 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ec7050a798 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ec7050a810 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ec7050a890 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55ec7050a908 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ec7050ed10 <col:34, line:267:5>
|   `-ReturnStmt 0x55ec7050ed00 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55ec7050ece8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55ec7050ec80 <col:9, col:51> 'int'
|         |-MemberExpr 0x55ec7050ec50 <col:9> '<bound member function type>' ->xmessage 0x55ec7050a6d0
|         | `-CXXThisExpr 0x55ec7050ec40 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ec7050eaf8 <col:18> 'const String' lvalue ParmVar 0x55ec7050a798 'landmark' 'const String &'
|         |-DeclRefExpr 0x55ec7050eb18 <col:28> 'const String' lvalue ParmVar 0x55ec7050a810 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ec7050ecd0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ec7050ecb8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ec7050ec20 <col:34, col:50> 'String' (CXXTemporary 0x55ec7050ec20)
|               `-CXXMemberCallExpr 0x55ec7050ebb8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55ec7050eb48 <col:34> '<bound member function type>' ->vformat 0x55ec7050b660
|                 | `-CXXThisExpr 0x55ec7050eb38 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ec7050ebe8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ec7050eb78 <col:42> 'const char *' lvalue ParmVar 0x55ec7050a890 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ec7050ec00 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ec7050eb98 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ec7050a908 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ec7050abb0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55ec7050ed90 <col:25, line:288:5>
|   `-ReturnStmt 0x55ec7050ed80 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55ec7050ed68 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55ec7050ed38 <col:9> 'const int' lvalue ->_nerrors 0x55ec7050d968
|         `-CXXThisExpr 0x55ec7050ed28 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ec7050adc0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55ec7050ac68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55ec7050ace8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55ec7050b0a8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ec7050ae88 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55ec7050af08 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55ec7050af80 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ec7050b240 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55ec7050b178 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55ec7050b488 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ec7050b300 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55ec7050b378 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ec7050eff0 <col:58, line:357:5>
|   `-ReturnStmt 0x55ec7050efe0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55ec7050efc8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55ec7050ef98 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55ec7050ef80 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55ec7050ef60 <col:9, col:29> 'String' (CXXTemporary 0x55ec7050ef60)
|             `-CallExpr 0x55ec7050eef0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55ec7050eed8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ec7050ee58 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55ec7050b0a8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55ec7050edf8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55ec7050ef28 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55ec7050ee18 <col:21> 'const char *' lvalue ParmVar 0x55ec7050b300 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55ec7050ef40 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55ec7050ee38 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ec7050b378 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ec7050b660 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55ec7050b550 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55ec7050b5c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ec7050b7b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55ec7050b728 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55ec7050b900 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55ec7050b870 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55ec7050bba0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55ec7050b9b8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55ec7050ba38 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55ec7050bab0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55ec7050bd00 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55ec7050bc70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55ec7050f108 <col:37, line:441:5>
|   `-IfStmt 0x55ec7050f0f0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55ec7050f078 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55ec7050f048 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ec7050f008 <col:6> 'int' lvalue ParmVar 0x55ec7050bc70 'level' 'int'
|     | `-ImplicitCastExpr 0x55ec7050f060 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55ec7050f028 <col:15> 'ErrorHandler::Level' EnumConstant 0x55ec70507d30 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55ec7050f0d8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55ec7050f0a8 <col:8> 'int' lvalue ->_nerrors 0x55ec7050d968
|         `-CXXThisExpr 0x55ec7050f098 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ec7050bdc8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55ec7050f1a0 <col:26, line:448:5>
|   `-BinaryOperator 0x55ec7050f180 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55ec7050f130 <col:2> 'int' lvalue ->_nerrors 0x55ec7050d968
|     | `-CXXThisExpr 0x55ec7050f120 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55ec7050f160 <col:13> 'int' 0
|-CXXMethodDecl 0x55ec7050bf90 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55ec7050be80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55ec7050bef8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55ec7050c198 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55ec7050c050 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55ec7050c0c8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55ec7050c448 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55ec7050c258 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55ec7050c2d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55ec7050c358 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55ec7050c500 <col:59> 0 0
|-CXXMethodDecl 0x55ec7050c698 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55ec7050c578 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55ec7050c5f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55ec7050f810 <col:70, line:534:5>
|   |-DeclStmt 0x55ec7050f310 <line:528:2, col:20>
|   | |-VarDecl 0x55ec7050f1c8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55ec7050f230 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55ec7050f268 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55ec7050f2d0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55ec7050f3e0 <line:529:2, col:23>
|   | `-VarDecl 0x55ec7050f340 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55ec7050f3c8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ec7050f3a8 <col:18> 'const char *' lvalue ParmVar 0x55ec7050c578 'begin' 'const char *'
|   |-DoStmt 0x55ec7050f7a8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55ec7050f6d8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55ec7050f6c0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55ec7050f6a0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55ec7050f3f8 <col:6> 'const char *' lvalue Var 0x55ec7050f340 'x' 'const char *'
|   | |     `-CallExpr 0x55ec7050f5f0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55ec7050f5d8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55ec7050f590 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55ec7050de40 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55ec7050f658 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55ec7050f640 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55ec7050f4b0 <col:20, col:27> 'String' (CXXTemporary 0x55ec7050f4b0)
|   | |       |     `-CXXTemporaryObjectExpr 0x55ec7050f478 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55ec7050f670 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ec7050f4d0 <col:30> 'const char *' lvalue Var 0x55ec7050f340 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55ec7050f688 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ec7050f4f0 <col:33> 'const char *' lvalue ParmVar 0x55ec7050c5f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55ec7050f530 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ec7050f510 <col:39> 'String' lvalue Var 0x55ec7050f1c8 'name' 'String'
|   | |       |-UnaryOperator 0x55ec7050f568 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ec7050f548 <col:46> 'String' lvalue Var 0x55ec7050f268 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55ec7050f580 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55ec7050f790 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55ec7050f778 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55ec7050f758 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55ec7050f728 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|   |         `-ImplicitCastExpr 0x55ec7050f710 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55ec7050f6f0 <col:11> 'String' lvalue Var 0x55ec7050f1c8 'name' 'String'
|   `-ReturnStmt 0x55ec7050f800 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55ec7050f7e8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55ec7050f7c8 <col:9> 'const char *' lvalue Var 0x55ec7050f340 'x' 'const char *'
|-CXXMethodDecl 0x55ec7050c7e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55ec7050c758 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55ec7050fe18 <col:55, line:550:5>
|   `-IfStmt 0x55ec7050fdf0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55ec7050fa50 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55ec7050fa38 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ec7050fa20 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ec7050fa00 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ec7050f9d0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|     | |       `-DeclRefExpr 0x55ec7050f870 <col:6> 'const String' lvalue ParmVar 0x55ec7050c758 'x' 'const String &'
|     | `-BinaryOperator 0x55ec7050f9b0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55ec7050f980 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55ec7050f930 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55ec7050f918 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ec7050f8d0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55ec70165e10 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55ec7050f890 <col:11> 'const String' lvalue ParmVar 0x55ec7050c758 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55ec7050f8b0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55ec7050f998 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55ec7050f968 <col:19> 'char' 123
|     |-ReturnStmt 0x55ec7050fac0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55ec7050fa90 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55ec7050fa70 <col:13> 'const String' lvalue ParmVar 0x55ec7050c758 'x' 'const String &'
|     `-IfStmt 0x55ec7050fdc8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55ec7050fb58 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ec7050fb40 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ec7050fb20 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ec7050faf0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |       `-DeclRefExpr 0x55ec7050fad0 <col:11> 'const String' lvalue ParmVar 0x55ec7050c758 'x' 'const String &'
|       |-ReturnStmt 0x55ec7050fce0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55ec7050fcc8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55ec7050fc98 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55ec7050fc80 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55ec7050fc60 <col:13, col:29> 'String' (CXXTemporary 0x55ec7050fc60)
|       |         `-CallExpr 0x55ec7050fc10 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55ec7050fbf8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55ec7050fb70 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55ec7050bf90 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55ec7050fc40 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55ec7050fb90 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55ec7050fbb0 <col:28> 'const String' lvalue ParmVar 0x55ec7050c758 'x' 'const String &'
|       `-ReturnStmt 0x55ec7050fdb8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55ec7050fda0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55ec7050fd70 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55ec7050fd58 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55ec7050fd38 <col:13, col:20> 'String' (CXXTemporary 0x55ec7050fd38)
|                 `-CXXTemporaryObjectExpr 0x55ec7050fd00 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55ec7050c9b0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55ec7050c8a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55ec7050c918 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec7050e0e8 <col:71> 'bool' false
|-CXXRecordDecl 0x55ec7050ca60 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55ec7050cd58 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55ec7050ccf0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55ec7050cc90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55ec7050cc50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55ec70148e70 'String'
|       | `-CXXRecord 0x55ec70148de0 'String'
|       |-BuiltinType 0x55ec6fe195c0 'int'
|       `-DecayedType 0x55ec7047dfa0 '__va_list_tag *' sugar
|         |-TypedefType 0x55ec7047df70 'va_list' sugar
|         | |-Typedef 0x55ec70039f20 'va_list'
|         | `-TypedefType 0x55ec70039ed0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55ec6ff71af8 '__gnuc_va_list'
|         |   `-TypedefType 0x55ec6ff71a60 '__builtin_va_list' sugar
|         |     |-Typedef 0x55ec6fe5ada8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55ec6fe5ad50 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55ec6fe1a310 '__va_list_tag'
|         |         `-CXXRecord 0x55ec6fe1a278 '__va_list_tag'
|         `-PointerType 0x55ec7003f7c0 '__va_list_tag *'
|           `-RecordType 0x55ec6fe1a310 '__va_list_tag'
|             `-CXXRecord 0x55ec6fe1a278 '__va_list_tag'
|-EnumDecl 0x55ec7050cdb0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55ec7050ceb0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d410 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050ce90 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55ec7050ce70 <col:16> 'int' 1
| |-EnumConstantDecl 0x55ec7050cf40 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d428 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050cf20 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55ec7050cf00 <col:21> 'int' 2
| |-EnumConstantDecl 0x55ec7050cfd0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d440 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050cfb0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55ec7050cf90 <col:22> 'int' 4
| |-EnumConstantDecl 0x55ec7050d060 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d458 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d040 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55ec7050d020 <col:17> 'int' 8
| |-EnumConstantDecl 0x55ec7050d0f0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d470 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d0d0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55ec7050d0b0 <col:22> 'int' 16
| |-EnumConstantDecl 0x55ec7050d180 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d488 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d160 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ec7050d140 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ec7050d210 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d4a0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d1f0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55ec7050d1d0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55ec7050d2a0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d4b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d280 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55ec7050d260 <col:14> 'int' 128
| |-EnumConstantDecl 0x55ec7050d330 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ec7050d4d0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7050d310 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55ec7050d2f0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55ec7050d3c0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55ec7050d4e8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7050d3a0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55ec7050d380 <col:12> 'int' 1024
|-CXXMethodDecl 0x55ec7050d6f8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55ec7050d510 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55ec7050d5b0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55ec7050d880 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55ec7050d7b8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55ec7050d928 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55ec7050d968 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55ec7050d9c8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55ec7050da40 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55ec7050de40 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55ec7050dab8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55ec7050db38 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55ec7050dbb8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55ec7050dc30 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55ec7050dca8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55ec7050dd20 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55ec7050df68 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55ec7050df68
| `-ParmVarDecl 0x55ec7050e078 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55ec70510178 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55ec70510178
  `-ParmVarDecl 0x55ec70510288 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec7047cfe8 prev 0x55ec7039b758 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec7047d0e0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55ec7047d170 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55ec7047d2a8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55ec7047d1a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ec7047e6d0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7047e6b0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ec7047e248 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ec7047e760 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ec7047e720 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55ec7047d1a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ec7047e2b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ec7047e7e0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7047e7a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ec7047e310 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ec7047e820 <col:54> 'bool' false
| `-CompoundStmt 0x55ec7047e928 <col:61, line:38:5>
|   `-BinaryOperator 0x55ec7047e908 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55ec7047e8a0 <col:9> 'const Element *' lvalue ->_context 0x55ec7047e1e8
|     | `-CXXThisExpr 0x55ec7047e890 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55ec7047e8f0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55ec7047e8d0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55ec7047d4b8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec7047d368 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55ec7047d3e0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ec7047e708 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7047e6e8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55ec7047e1e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55ec7047e980 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ec7047e940 <col:20> 'const Element *' lvalue ParmVar 0x55ec7047d368 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55ec7047e248 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ec7047ea00 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ec7047e9c0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55ec7047d3e0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ec7047e2b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ec7047ea80 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ec7047ea40 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55ec7047e310 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ec7047eac0 <col:73> 'bool' false
| `-CompoundStmt 0x55ec7047eb38 <col:80, line:46:5>
|-CXXMethodDecl 0x55ec7047d5e8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55ec7047ebb0 <col:36, line:51:5>
|   `-ReturnStmt 0x55ec7047eba0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55ec7047eb88 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55ec7047eb58 <col:16> 'const Element *const' lvalue ->_context 0x55ec7047e1e8
|         `-CXXThisExpr 0x55ec7047eb48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ec7047d6d8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55ec7047ec30 <col:32, line:57:5>
|   `-ReturnStmt 0x55ec7047ec20 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55ec7047ec08 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55ec7047ebd8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55ec7047e248
|         `-CXXThisExpr 0x55ec7047ebc8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ec7047d798 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55ec7047d920 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ec7047d850 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ec7047da70 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ec7047d9e0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ec7047dbc0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ec7047db30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ec7047ddc8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55ec7047dc78 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55ec7047dcf0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55ec7047e0f8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55ec7047de88 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55ec7047df08 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55ec7047dfd0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55ec7047e1b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55ec7047e1e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55ec7047e248 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55ec7047e2b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55ec7047e310 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55ec7047e360 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ec7047e360
| `-ParmVarDecl 0x55ec7047e478 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55ec7047e518 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ec7047e518
| `-ParmVarDecl 0x55ec7047e628 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55ec705236e8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec704a6810 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55ec704a69e8 prev 0x55ec704a6810 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ec704a6a78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ec704a6aa0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704a8670 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55ec704a8620 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55ec704a6f50 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55ec704a6e50 'type'
|     `-TemplateSpecializationType 0x55ec704a6de0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55ec704a6cc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55ec704a6ca0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55ec704a6c80 <col:24> 'unsigned long' 4
|       `-RecordType 0x55ec704a6dc0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55ec704a6ce0 'char_array'
|-TypedefDecl 0x55ec704a8728 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55ec704a86f0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55ec704a86d0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55ec704a8670 'type'
|     `-ElaboratedType 0x55ec704a8620 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55ec704a6f50 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55ec704a6e50 'type'
|         `-TemplateSpecializationType 0x55ec704a6de0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55ec704a6cc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55ec704a6ca0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55ec704a6c80 <col:24> 'unsigned long' 4
|           `-RecordType 0x55ec704a6dc0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55ec704a6ce0 'char_array'
|-CXXMethodDecl 0x55ec704b44b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55ec704b43c0 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55ec704b45a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ec704b4688 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55ec704b4958 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ec704b4860 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55ec704b4b98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ec704b4a10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec704b4a88 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b4d68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ec704b4c58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec704b4cd0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b4ec8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ec704b4f98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ec704b51e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ec704b5058 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ec704b50d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b5448 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55ec704b52b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ec704b5330 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b5608 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ec704b5518 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b57c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ec704b56d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b5880 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ec704b5930 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ec704b5b68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ec704b59e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ec704b5a58 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ec704b5e08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ec704b5d10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55ec704b5ed0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55ec704b5f20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ec704b5f70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.2 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.2 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec704a5428 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55ec704a5638 prev 0x55ec704a5428 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ec704a6780 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55ec704a6730 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55ec704a6710 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55ec704a65c0 'type'
|     `-SubstTemplateTypeParmType 0x55ec704a63e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55ec700e1cb0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec700e1c58 'T'
|       `-RecordType 0x55ec704a5f30 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55ec704a5e48 'sized_array_memory'
|-FieldDecl 0x55ec704b5fc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55ec704b6010 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ec704b6048 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|   |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ec70119948 'T'
|   `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b60d8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55ec704b60a0 'int &'
|   `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6168 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55ec704b6130 'const int &'
|   `-QualType 0x55ec704a56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b61f8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55ec704b61c0 'int *'
|   `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6288 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55ec704b6250 'const int *'
|   `-QualType 0x55ec704a56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6e70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55ec704b6e20 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55ec704b6e00 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55ec704b6d90 'type'
|     `-SubstTemplateTypeParmType 0x55ec704b6b50 'int' sugar
|       |-TemplateTypeParmType 0x55ec700ecab0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec700eca60 'T'
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6ed8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55ec704b6130 'const int &'
|   `-QualType 0x55ec704a56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6f30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b6f98 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55ec704b61c0 'int *'
|   `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|     |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ec70119948 'T'
|     `-BuiltinType 0x55ec6fe195c0 'int'
|-TypedefDecl 0x55ec704b7000 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55ec704b6250 'const int *'
|   `-QualType 0x55ec704a56d1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ec704a56d0 'int' sugar
|       |-TemplateTypeParmType 0x55ec701199a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ec70119948 'T'
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-EnumDecl 0x55ec704b7058 <line:134:5> col:5
| `-EnumConstantDecl 0x55ec704b7150 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ec704b7130 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ec7011b028 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ec7011b000 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ec7011afe0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ec704b71d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ec704b7428 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec704b7290 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec704b7330 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55ec704b76e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55ec704b75d0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55ec704b79a8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55ec704b7890 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ec704b7cf0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55ec704b7bd0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55ec704b8000 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55ec704b7ee0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ec704b82f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec704b8138 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec704b81b0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ec704b8418 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ec704b84f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b8550 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b8598 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ec704b8648 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b86a0 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b8768 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ec704b8818 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b8870 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b88b8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ec704b8968 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b89c0 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b8a08 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ec704b8ab8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b8b10 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b8b58 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ec704b8c08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ec704b8c60 <col:30> Inherited
|-CXXMethodDecl 0x55ec704b8c88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ec704b8d38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ec704b8de8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec704b8fa8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec704b8e98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ec704b8f10 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ec704b90f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ec704b9068 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec704b92a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55ec704b91b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ec704b9360 <col:20>
| `-OptimizeNoneAttr 0x55ec704b93b8 <col:30>
|-CXXMethodDecl 0x55ec704b94d8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55ec704b93e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ec704b9590 <col:20>
| `-OptimizeNoneAttr 0x55ec704b95e8 <col:30>
|-CXXMethodDecl 0x55ec704b96a0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ec704b9610 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec704b97e8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ec704b9758 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec704b9918 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55ec704b9a48 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55ec704b9b18 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55ec704b9be8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55ec704b9d28 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ec704b9c98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec704b9e70 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ec704b9de0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ec704b9fb8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ec704b9f28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ec704ba070 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ec704ba170 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ec704ba0e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ec704ba228 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ec704ba2e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55ec704ba3e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55ec704ba568 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ec704ba4a8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55ec704bad28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ec704ba620 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55ec704bac88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55ec704bab88 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55ec704bae08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ec704baf58 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ec704baec8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ec704bb010 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ec704bb258 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ec704bb0d0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ec704bb148 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ec704bb418 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55ec704bb328 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ec704bb668 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55ec704bb4e0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ec704bb558 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ec704bb728 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ec704bb988 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55ec704bb890 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55ec704bba58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  NonVirtualBaseLLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704a3598 prev 0x55ec70486a70 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec704a3690 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55ec704a3780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55ec704ce5c0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55ec704a3870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55ec704ce5d0 <col:25, line:830:9>
|-CXXMethodDecl 0x55ec704a3970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55ec704a3a20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55ec704a3ac8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ec704a3ac8
| `-ParmVarDecl 0x55ec704a3bd8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55ec704a4398 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ec704a4398
  `-ParmVarDecl 0x55ec704a44a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704868a8 prev 0x55ec7039b7e8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55ec704869e0 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55ec70486a70 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55ec70486b20 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55ec70486c28 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55ec70486b58 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ec704bf068 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ec704bf048 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ec70486f48 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70486dc0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55ec70486e38 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ec704bf0a0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ec704bf080 <col:59> 'int' 0
|-CXXConstructorDecl 0x55ec70487120 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec70487010 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55ec70487088 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ec704bf0d8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ec704bf0b8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55ec704874d8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ec704872c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55ec70487338 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55ec704873b0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ec704bf110 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ec704bf0f0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ec70487698 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55ec704875d8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55ec70487790 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55ec70487948 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55ec70487880 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55ec70487a38 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55ec704bf4c0 <col:24, line:291:5>
|   `-ReturnStmt 0x55ec704bf4b0 <line:290:9, col:79>
|     `-BinaryOperator 0x55ec704bf490 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55ec704bf368 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55ec704bf2c0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55ec704bf2a0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55ec704bf198 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55ec704bf180 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55ec704bf168 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55ec704bf138 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55ec704a53c0
|       | |   |       `-CXXThisExpr 0x55ec704bf128 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55ec704bf288 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55ec704bf270 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55ec704bf238 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55ec704bf208 <col:28, col:35> '<bound member function type>' ->size 0x55ec7046e538
|       | |           `-ImplicitCastExpr 0x55ec704bf258 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55ec704bf1f0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55ec704bf1c0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55ec704a53c0
|       | |                 `-CXXThisExpr 0x55ec704bf1b0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55ec704bf350 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55ec704bf338 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55ec704bf320 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55ec704bf2f0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55ec704bbba0
|       |         `-CXXThisExpr 0x55ec704bf2e0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55ec704bf470 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55ec704bf458 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ec704bf440 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ec704bf400 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ec704bf3e8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ec704bf398 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ec704bbc50
|         |     |   `-CXXThisExpr 0x55ec704bf388 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ec704bf3c8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55ec704bf420 <col:79> 'int' 0
|-CXXMethodDecl 0x55ec70487af8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55ec704bf698 <col:32, line:296:5>
|   `-ReturnStmt 0x55ec704bf688 <line:295:9, col:49>
|     `-BinaryOperator 0x55ec704bf668 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55ec704bf548 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55ec704bf530 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55ec704bf518 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55ec704bf4e8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55ec704bbba0
|       |       `-CXXThisExpr 0x55ec704bf4d8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55ec704bf648 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55ec704bf630 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ec704bf618 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ec704bf5d8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ec704bf5c0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ec704bf570 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ec704bbc50
|         |     |   `-CXXThisExpr 0x55ec704bf560 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ec704bf5a0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55ec704bf5f8 <col:49> 'int' 0
|-CXXMethodDecl 0x55ec70487be8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55ec704bf8a8 <col:19, line:306:5>
|   |-IfStmt 0x55ec704bf7c8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55ec704bf708 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55ec704bf6f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55ec704bf6c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ec704a53c0
|   | |     `-CXXThisExpr 0x55ec704bf6b0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55ec704bf7a8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55ec704bf778 <col:13, col:20> '<bound member function type>' ->clear 0x55ec70471790
|   |     `-ImplicitCastExpr 0x55ec704bf760 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55ec704bf730 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ec704a53c0
|   |         `-CXXThisExpr 0x55ec704bf720 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55ec704bf850 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55ec704bf820 <col:9, col:16> '<bound member function type>' .clear 0x55ec704bb728
|   |   `-MemberExpr 0x55ec704bf7f0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55ec704bbb40
|   |     `-CXXThisExpr 0x55ec704bf7e0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55ec704bf898 <line:305:9, col:17>
|     `-UnaryOperator 0x55ec704bf880 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704bf870 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ec70487e68 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55ec70487d70 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55ec70487fe8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55ec70487f20 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55ec70488368 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55ec70488090 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55ec704882c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55ec70488138 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55ec704881b0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55ec704bfbe8 <col:67, line:327:5>
|     |-WhileStmt 0x55ec704bfb98 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55ec704bf9b0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55ec704bf910 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55ec7041f5e8 0x55ec703ed498 0x55ec703b1dd8 0x55ec7039b180 0x55ec7033b588 0x55ec70184b68 0x55ec70184840 0x55ec70176020 0x55ec70175cd0 0x55ec701755c0 0x55ec70147f30 0x55ec700d43f0
|     | | |-DeclRefExpr 0x55ec704bf8d0 <col:16> 'Iter' lvalue ParmVar 0x55ec70488138 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55ec704bf8f0 <col:25> 'Iter' lvalue ParmVar 0x55ec704881b0 'end' 'Iter'
|     | `-CompoundStmt 0x55ec704bfb78 <col:30, line:325:9>
|     |   |-CallExpr 0x55ec704bfb18 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55ec704bf9f8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55ec704bfae8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55ec704bfa78 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|     |   |   `-DeclRefExpr 0x55ec704bfa58 <col:24> 'Iter' lvalue ParmVar 0x55ec70488138 'begin' 'Iter'
|     |   `-UnaryOperator 0x55ec704bfb60 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55ec704bfb40 <col:15> 'Iter' lvalue ParmVar 0x55ec70488138 'begin' 'Iter'
|     `-ReturnStmt 0x55ec704bfbd8 <line:326:9, col:17>
|       `-UnaryOperator 0x55ec704bfbc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704bfbb0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ec70488470 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55ec704883e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55ec704885b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55ec70488528 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55ec70488680 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55ec704bfcc8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55ec704bfc68 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55ec704bfc18 <col:9> '<bound member function type>' ->reset_from 0x55ec704bbfc8
|   | | `-CXXThisExpr 0x55ec704bfc08 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55ec704bfc48 <col:20> 'int' 0
|   `-ReturnStmt 0x55ec704bfcb8 <line:352:9, col:17>
|     `-UnaryOperator 0x55ec704bfca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704bfc90 <col:17> 'Args *' this
|-VarDecl 0x55ec70488738 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ec704887a0 <col:38> 'int' 1
|-VarDecl 0x55ec70488830 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ec70488898 <col:39> 'int' 2
|-VarDecl 0x55ec70488928 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ec70488990 <col:39> 'int' 4
|-VarDecl 0x55ec70488a20 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ec70488a88 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55ec70488e08 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55ec70488b00 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec70488d68 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ec70488bb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70488c58 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55ec704bfe20 <col:43, line:371:5>
|     `-ReturnStmt 0x55ec704bfe10 <line:370:9, col:34>
|       `-CallExpr 0x55ec704bfdd8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704bfcf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704bfd78 <col:21> 'const char *' lvalue ParmVar 0x55ec70488bb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704bfd98 <col:30> 'int' 0
|         `-DeclRefExpr 0x55ec704bfdb8 <col:33> 'T' lvalue ParmVar 0x55ec70488c58 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70489138 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55ec70488e70 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec70489098 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ec70488f20 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70488fc8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55ec704bff70 <col:45, line:375:5>
|     `-ReturnStmt 0x55ec704bff60 <line:374:9, col:42>
|       `-CallExpr 0x55ec704bff28 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704bfe48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704bfec8 <col:21> 'const char *' lvalue ParmVar 0x55ec70488f20 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704bfee8 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ec704bff08 <col:41> 'T' lvalue ParmVar 0x55ec70488fc8 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70489468 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55ec704891a0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec704893c8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ec70489250 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704892f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c00c0 <col:45, line:379:5>
|     `-ReturnStmt 0x55ec704c00b0 <line:378:9, col:43>
|       `-CallExpr 0x55ec704c0078 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704bff98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0018 <col:21> 'const char *' lvalue ParmVar 0x55ec70489250 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c0038 <col:30> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         `-DeclRefExpr 0x55ec704c0058 <col:42> 'T' lvalue ParmVar 0x55ec704892f8 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70489798 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55ec704894d0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec704896f8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ec70489580 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70489628 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c02c0 <col:46, line:383:5>
|     `-ReturnStmt 0x55ec704c02b0 <line:382:9, col:55>
|       `-CallExpr 0x55ec704c0278 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c00e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0168 <col:21> 'const char *' lvalue ParmVar 0x55ec70489580 'keyword' 'const char *'
|         |-BinaryOperator 0x55ec704c0238 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ec704c01e8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ec704c01c8 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ec704c0220 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ec704c0200 <col:42> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55ec704c0258 <col:54> 'T' lvalue ParmVar 0x55ec70489628 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70489b98 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55ec70489800 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec70489af8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55ec704898b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70489930 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704899d8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c0400 <col:54, line:388:5>
|     |-CallExpr 0x55ec704c0388 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c02d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ec704c0318 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c0328 <col:30> 'const char *' lvalue ParmVar 0x55ec704898b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c0348 <col:39> 'int' lvalue ParmVar 0x55ec70489930 'flags' 'int'
|     | `-DeclRefExpr 0x55ec704c0368 <col:46> 'T' lvalue ParmVar 0x55ec704899d8 'x' 'T &'
|     `-ReturnStmt 0x55ec704c03f0 <line:387:9, col:17>
|       `-UnaryOperator 0x55ec704c03d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c03c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec7048a048 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55ec70489c08 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec70489c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ec70489fa8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ec70489d48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70489de8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55ec70489e88 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c0570 <col:74, line:403:5>
|     `-ReturnStmt 0x55ec704c0560 <line:402:9, col:56>
|       `-CallExpr 0x55ec704c0520 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c0430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c04a0 <col:28> 'const char *' lvalue ParmVar 0x55ec70489d48 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c04c0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ec704c04e0 <col:40> 'T' lvalue ParmVar 0x55ec70489de8 'x' 'T &'
|         `-DeclRefExpr 0x55ec704c0500 <col:43> 'const V' lvalue ParmVar 0x55ec70489e88 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ec7048a4b8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ec7048a0b8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec7048a138 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ec7048a418 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ec7048a1f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048a298 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55ec7048a338 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c06d8 <col:76, line:407:5>
|     `-ReturnStmt 0x55ec704c06c8 <line:406:9, col:65>
|       `-CallExpr 0x55ec704c0688 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c0598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0608 <col:28> 'const char *' lvalue ParmVar 0x55ec7048a1f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c0628 <col:37> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         |-DeclRefExpr 0x55ec704c0648 <col:49> 'T' lvalue ParmVar 0x55ec7048a298 'x' 'T &'
|         `-DeclRefExpr 0x55ec704c0668 <col:52> 'const V' lvalue ParmVar 0x55ec7048a338 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ec7048aa08 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55ec7048a528 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec7048a5a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ec7048a968 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ec7048a668 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048a6e8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ec7048a788 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55ec7048a828 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c0840 <col:85, line:412:5>
|     |-CallExpr 0x55ec704c07c0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c06f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ec704c0730 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c0740 <col:37> 'const char *' lvalue ParmVar 0x55ec7048a668 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c0760 <col:46> 'int' lvalue ParmVar 0x55ec7048a6e8 'flags' 'int'
|     | |-DeclRefExpr 0x55ec704c0780 <col:53> 'T' lvalue ParmVar 0x55ec7048a788 'x' 'T &'
|     | `-DeclRefExpr 0x55ec704c07a0 <col:56> 'const V' lvalue ParmVar 0x55ec7048a828 'default_value' 'const V &'
|     `-ReturnStmt 0x55ec704c0830 <line:411:9, col:17>
|       `-UnaryOperator 0x55ec704c0818 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c0808 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec7048ae98 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55ec7048aa80 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048aaf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55ec7048adf8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55ec7048abb8 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55ec7048ac30 <col:37, col:39> col:39 referenced parser 'P'
| | |-ParmVarDecl 0x55ec7048acd8 <col:47, col:50> col:50 referenced x 'T &'
| | `-CompoundStmt 0x55ec704c09c0 <col:53, line:425:5>
| |   `-ReturnStmt 0x55ec704c09b0 <line:424:9, col:42>
| |     `-CallExpr 0x55ec704c0970 <col:16, col:42> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55ec704c0870 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55ec704c08f0 <col:21> 'const char *' lvalue ParmVar 0x55ec7048abb8 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55ec704c0910 <col:30> 'int' 0
| |       |-DeclRefExpr 0x55ec704c0930 <col:33> 'P' lvalue ParmVar 0x55ec7048ac30 'parser' 'P'
| |       `-DeclRefExpr 0x55ec704c0950 <col:41> 'T' lvalue ParmVar 0x55ec7048acd8 'x' 'T &'
| `-CXXMethodDecl 0x55ec70524128 <line:423:5, line:425:5> line:423:11 used read 'Args &(const char *, SecondsArg, unsigned int &)'
|   |-TemplateArgument type 'SecondsArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55ec70523e90 <col:16, col:28> col:28 keyword 'const char *'
|   |-ParmVarDecl 0x55ec70523f38 <col:37, col:39> col:39 parser 'SecondsArg':'SecondsArg'
|   `-ParmVarDecl 0x55ec70524008 <col:47, col:50> col:50 x 'unsigned int &'
|-FunctionTemplateDecl 0x55ec7048b2e8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55ec7048af08 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048af88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec7048b248 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec7048b048 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048b0c0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048b168 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c0b38 <col:55, line:429:5>
|     `-ReturnStmt 0x55ec704c0b28 <line:428:9, col:50>
|       `-CallExpr 0x55ec704c0ae8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c09e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0a68 <col:21> 'const char *' lvalue ParmVar 0x55ec7048b048 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c0a88 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ec704c0aa8 <col:41> 'P' lvalue ParmVar 0x55ec7048b0c0 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c0ac8 <col:49> 'T' lvalue ParmVar 0x55ec7048b168 'x' 'T &'
|-FunctionTemplateDecl 0x55ec7048b738 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55ec7048b358 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048b3d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec7048b698 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec7048b498 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048b510 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048b5b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c0cb0 <col:55, line:433:5>
|     `-ReturnStmt 0x55ec704c0ca0 <line:432:9, col:51>
|       `-CallExpr 0x55ec704c0c60 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c0b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0be0 <col:21> 'const char *' lvalue ParmVar 0x55ec7048b498 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c0c00 <col:30> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         |-DeclRefExpr 0x55ec704c0c20 <col:42> 'P' lvalue ParmVar 0x55ec7048b510 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c0c40 <col:50> 'T' lvalue ParmVar 0x55ec7048b5b8 'x' 'T &'
|-FunctionTemplateDecl 0x55ec7048bb88 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55ec7048b7a8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048b828 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec7048bae8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec7048b8e8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048b960 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048ba08 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c0ed8 <col:56, line:437:5>
|     `-ReturnStmt 0x55ec704c0ec8 <line:436:9, col:63>
|       `-CallExpr 0x55ec704c0e88 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c0cd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c0d58 <col:21> 'const char *' lvalue ParmVar 0x55ec7048b8e8 'keyword' 'const char *'
|         |-BinaryOperator 0x55ec704c0e28 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ec704c0dd8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ec704c0db8 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ec704c0e10 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ec704c0df0 <col:42> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ec704c0e48 <col:54> 'P' lvalue ParmVar 0x55ec7048b960 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c0e68 <col:62> 'T' lvalue ParmVar 0x55ec7048ba08 'x' 'T &'
|-FunctionTemplateDecl 0x55ec7048c0b8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55ec7048bbf8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048bc78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec7048c018 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ec7048bd38 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048bdb8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ec7048be30 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048bed8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c1040 <col:64, line:442:5>
|     |-CallExpr 0x55ec704c0fc0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c0ef0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ec704c0f30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c0f40 <col:30> 'const char *' lvalue ParmVar 0x55ec7048bd38 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c0f60 <col:39> 'int' lvalue ParmVar 0x55ec7048bdb8 'flags' 'int'
|     | |-DeclRefExpr 0x55ec704c0f80 <col:46> 'P' lvalue ParmVar 0x55ec7048be30 'parser' 'P'
|     | `-DeclRefExpr 0x55ec704c0fa0 <col:54> 'T' lvalue ParmVar 0x55ec7048bed8 'x' 'T &'
|     `-ReturnStmt 0x55ec704c1030 <line:441:9, col:17>
|       `-UnaryOperator 0x55ec704c1018 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c1008 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec7048c6b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55ec7048c130 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048c1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ec7048c228 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ec7048c618 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ec7048c2f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048c368 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048c408 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55ec7048c4d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c11d8 <col:84, line:458:5>
|     `-ReturnStmt 0x55ec704c11c8 <line:457:9, col:64>
|       `-CallExpr 0x55ec704c1180 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1070 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c10e0 <col:28> 'const char *' lvalue ParmVar 0x55ec7048c2f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c1100 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ec704c1120 <col:40> 'P' lvalue ParmVar 0x55ec7048c368 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c1140 <col:48> 'T' lvalue ParmVar 0x55ec7048c408 'x' 'T &'
|         `-DeclRefExpr 0x55ec704c1160 <col:51> 'const V' lvalue ParmVar 0x55ec7048c4d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ec7048cc38 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ec7048c730 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048c7a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ec7048c828 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ec7048cb98 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ec7048c8f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec7048c968 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ec7048ca08 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55ec7048caa8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c1368 <col:86, line:462:5>
|     `-ReturnStmt 0x55ec704c1358 <line:461:9, col:73>
|       `-CallExpr 0x55ec704c1310 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1200 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c1270 <col:28> 'const char *' lvalue ParmVar 0x55ec7048c8f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c1290 <col:37> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         |-DeclRefExpr 0x55ec704c12b0 <col:49> 'P' lvalue ParmVar 0x55ec7048c968 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c12d0 <col:57> 'T' lvalue ParmVar 0x55ec7048ca08 'x' 'T &'
|         `-DeclRefExpr 0x55ec704c12f0 <col:60> 'const V' lvalue ParmVar 0x55ec7048caa8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ec70492cf8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55ec7048ccb0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec7048cd28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ec7048cda8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ec70492c58 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ec7048ce70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70492950 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704929c8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70492a68 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55ec70492b08 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ec704c14f8 <col:95, line:467:5>
|     |-CallExpr 0x55ec704c1470 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c1380 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ec704c13c0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c13d0 <col:37> 'const char *' lvalue ParmVar 0x55ec7048ce70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c13f0 <col:46> 'int' lvalue ParmVar 0x55ec70492950 'flags' 'int'
|     | |-DeclRefExpr 0x55ec704c1410 <col:53> 'P' lvalue ParmVar 0x55ec704929c8 'parser' 'P'
|     | |-DeclRefExpr 0x55ec704c1430 <col:61> 'T' lvalue ParmVar 0x55ec70492a68 'x' 'T &'
|     | `-DeclRefExpr 0x55ec704c1450 <col:64> 'const V' lvalue ParmVar 0x55ec70492b08 'default_value' 'const V &'
|     `-ReturnStmt 0x55ec704c14e8 <line:466:9, col:17>
|       `-UnaryOperator 0x55ec704c14d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c14c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec704932d8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55ec70492d78 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70492df8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec70492e78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec70493238 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec70492f40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70492fb8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70493058 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ec704930f8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ec704c16a0 <col:63, line:481:5>
|     `-ReturnStmt 0x55ec704c1690 <line:480:9, col:47>
|       `-CallExpr 0x55ec704c1648 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c15a8 <col:21> 'const char *' lvalue ParmVar 0x55ec70492f40 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c15c8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55ec704c15e8 <col:33> 'P' lvalue ParmVar 0x55ec70492fb8 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c1608 <col:41> 'T1' lvalue ParmVar 0x55ec70493058 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ec704c1628 <col:45> 'T2' lvalue ParmVar 0x55ec704930f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ec70493858 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55ec70493350 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704933c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec70493448 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec704937b8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec70493510 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70493588 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70493628 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ec704936c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ec704c1840 <col:65, line:485:5>
|     `-ReturnStmt 0x55ec704c1830 <line:484:9, col:55>
|       `-CallExpr 0x55ec704c17e8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c16c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c1748 <col:21> 'const char *' lvalue ParmVar 0x55ec70493510 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c1768 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ec704c1788 <col:41> 'P' lvalue ParmVar 0x55ec70493588 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c17a8 <col:49> 'T1' lvalue ParmVar 0x55ec70493628 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ec704c17c8 <col:53> 'T2' lvalue ParmVar 0x55ec704936c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ec70493dd8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55ec704938d0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70493948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec704939c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec70493d38 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec70493a90 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70493b08 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70493ba8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ec70493c48 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ec704c19e0 <col:65, line:489:5>
|     `-ReturnStmt 0x55ec704c19d0 <line:488:9, col:56>
|       `-CallExpr 0x55ec704c1988 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c18e8 <col:21> 'const char *' lvalue ParmVar 0x55ec70493a90 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c1908 <col:30> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         |-DeclRefExpr 0x55ec704c1928 <col:42> 'P' lvalue ParmVar 0x55ec70493b08 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c1948 <col:50> 'T1' lvalue ParmVar 0x55ec70493ba8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ec704c1968 <col:54> 'T2' lvalue ParmVar 0x55ec70493c48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ec70494358 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55ec70493e50 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70493ec8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec70493f48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec704942b8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec70494010 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70494088 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70494128 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ec704941c8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ec704c1c30 <col:66, line:493:5>
|     `-ReturnStmt 0x55ec704c1c20 <line:492:9, col:68>
|       `-CallExpr 0x55ec704c1bd8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c1a88 <col:21> 'const char *' lvalue ParmVar 0x55ec70494010 'keyword' 'const char *'
|         |-BinaryOperator 0x55ec704c1b58 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ec704c1b08 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ec704c1ae8 <col:30> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ec704c1b40 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ec704c1b20 <col:42> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ec704c1b78 <col:54> 'P' lvalue ParmVar 0x55ec70494088 'parser' 'P'
|         |-DeclRefExpr 0x55ec704c1b98 <col:62> 'T1' lvalue ParmVar 0x55ec70494128 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ec704c1bb8 <col:66> 'T2' lvalue ParmVar 0x55ec704941c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ec704949b8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55ec704943d0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70494448 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec704944c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec70494918 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec70494590 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70494610 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70494688 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70494728 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ec704947c8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ec704c1dc0 <col:74, line:498:5>
|     |-CallExpr 0x55ec704c1d38 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c1c48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ec704c1c88 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c1c98 <col:30> 'const char *' lvalue ParmVar 0x55ec70494590 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c1cb8 <col:39> 'int' lvalue ParmVar 0x55ec70494610 'flags' 'int'
|     | |-DeclRefExpr 0x55ec704c1cd8 <col:46> 'P' lvalue ParmVar 0x55ec70494688 'parser' 'P'
|     | |-DeclRefExpr 0x55ec704c1cf8 <col:54> 'T1' lvalue ParmVar 0x55ec70494728 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55ec704c1d18 <col:58> 'T2' lvalue ParmVar 0x55ec704947c8 'x2' 'T2 &'
|     `-ReturnStmt 0x55ec704c1db0 <line:497:9, col:17>
|       `-UnaryOperator 0x55ec704c1d98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c1d88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec70494d18 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55ec70494a38 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70494c78 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ec70494af0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70494b68 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c1f08 <col:52, line:509:5>
|     `-ReturnStmt 0x55ec704c1ef8 <line:508:9, col:44>
|       `-CallExpr 0x55ec704c1ec0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1df0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c1e60 <col:26> 'const char *' lvalue ParmVar 0x55ec70494af0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c1e80 <col:35> 'int' 0
|         `-DeclRefExpr 0x55ec704c1ea0 <col:38> 'P' lvalue ParmVar 0x55ec70494b68 'parser' 'P'
|-FunctionTemplateDecl 0x55ec70495018 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55ec70494d80 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70494f78 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ec70494e30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70494ea8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c2048 <col:54, line:513:5>
|     `-ReturnStmt 0x55ec704c2038 <line:512:9, col:52>
|       `-CallExpr 0x55ec704c2000 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c1f30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c1fa0 <col:26> 'const char *' lvalue ParmVar 0x55ec70494e30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c1fc0 <col:35> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ec704c1fe0 <col:46> 'P' lvalue ParmVar 0x55ec70494ea8 'parser' 'P'
|-FunctionTemplateDecl 0x55ec70495318 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55ec70495080 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70495278 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ec70495130 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704951a8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c2188 <col:54, line:517:5>
|     `-ReturnStmt 0x55ec704c2178 <line:516:9, col:53>
|       `-CallExpr 0x55ec704c2140 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c2070 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c20e0 <col:26> 'const char *' lvalue ParmVar 0x55ec70495130 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c2100 <col:35> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int'
|         `-DeclRefExpr 0x55ec704c2120 <col:47> 'P' lvalue ParmVar 0x55ec704951a8 'parser' 'P'
|-FunctionTemplateDecl 0x55ec70495618 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ec70495380 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70495578 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ec70495430 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704954a8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c2378 <col:55, line:521:5>
|     `-ReturnStmt 0x55ec704c2368 <line:520:9, col:65>
|       `-CallExpr 0x55ec704c2330 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c21b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2220 <col:26> 'const char *' lvalue ParmVar 0x55ec70495430 'keyword' 'const char *'
|         |-BinaryOperator 0x55ec704c22f0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55ec704c22a0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ec704c2280 <col:35> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ec704c22d8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ec704c22b8 <col:47> 'const int' lvalue Var 0x55ec70488830 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55ec704c2310 <col:59> 'P' lvalue ParmVar 0x55ec704954a8 'parser' 'P'
|-FunctionTemplateDecl 0x55ec704959e8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55ec70495680 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70495948 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ec70495730 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704957b0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70495828 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c24b8 <col:63, line:526:5>
|     |-CallExpr 0x55ec704c2440 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c2390 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55ec704c23d0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c23e0 <col:35> 'const char *' lvalue ParmVar 0x55ec70495730 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ec704c2400 <col:44> 'int' lvalue ParmVar 0x55ec704957b0 'flags' 'int'
|     | `-DeclRefExpr 0x55ec704c2420 <col:51> 'P' lvalue ParmVar 0x55ec70495828 'parser' 'P'
|     `-ReturnStmt 0x55ec704c24a8 <line:525:9, col:17>
|       `-UnaryOperator 0x55ec704c2490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c2480 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec70495e38 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55ec70495a58 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70495ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70495d98 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec70495b98 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70495c10 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70495cb8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c2610 <col:58, line:541:5>
|     `-ReturnStmt 0x55ec704c2600 <line:540:9, col:39>
|       `-CallExpr 0x55ec704c25c8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c24e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2568 <col:21> 'const char *' lvalue ParmVar 0x55ec70495b98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c2588 <col:30> 'P' lvalue ParmVar 0x55ec70495c10 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c25a8 <col:38> 'T' lvalue ParmVar 0x55ec70495cb8 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70496288 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55ec70495ea8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70495f28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec704961e8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec70495fe8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70496060 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70496108 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c2748 <col:60, line:545:5>
|     `-ReturnStmt 0x55ec704c2738 <line:544:9, col:41>
|       `-CallExpr 0x55ec704c2700 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c2638 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c26a0 <col:23> 'const char *' lvalue ParmVar 0x55ec70495fe8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c26c0 <col:32> 'P' lvalue ParmVar 0x55ec70496060 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c26e0 <col:40> 'T' lvalue ParmVar 0x55ec70496108 'x' 'T &'
|-FunctionTemplateDecl 0x55ec704966d8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55ec704962f8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70496378 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70496638 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec70496438 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704964b0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70496558 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c2880 <col:60, line:549:5>
|     `-ReturnStmt 0x55ec704c2870 <line:548:9, col:41>
|       `-CallExpr 0x55ec704c2838 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c2770 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c27d8 <col:23> 'const char *' lvalue ParmVar 0x55ec70496438 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c27f8 <col:32> 'P' lvalue ParmVar 0x55ec704964b0 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c2818 <col:40> 'T' lvalue ParmVar 0x55ec70496558 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70496b28 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ec70496748 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704967c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70496a88 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec70496888 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70496900 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704969a8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c29b8 <col:61, line:553:5>
|     `-ReturnStmt 0x55ec704c29a8 <line:552:9, col:42>
|       `-CallExpr 0x55ec704c2970 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c28a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2910 <col:24> 'const char *' lvalue ParmVar 0x55ec70496888 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c2930 <col:33> 'P' lvalue ParmVar 0x55ec70496900 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c2950 <col:41> 'T' lvalue ParmVar 0x55ec704969a8 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70497008 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55ec70496b98 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70496c18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70496f68 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ec70496cd8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70496d58 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70496dd0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70496e78 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c2b30 <col:69, line:557:5>
|     `-ReturnStmt 0x55ec704c2b20 <line:556:9, col:46>
|       `-CallExpr 0x55ec704c2ae0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c29e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2a60 <col:21> 'const char *' lvalue ParmVar 0x55ec70496cd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c2a80 <col:30> 'int' lvalue ParmVar 0x55ec70496d58 'flags' 'int'
|         |-DeclRefExpr 0x55ec704c2aa0 <col:37> 'P' lvalue ParmVar 0x55ec70496dd0 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c2ac0 <col:45> 'T' lvalue ParmVar 0x55ec70496e78 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70497318 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55ec70497080 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70497278 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ec70497130 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704971a8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c2c70 <col:56, line:571:5>
|     `-ReturnStmt 0x55ec704c2c60 <line:570:9, col:48>
|       `-CallExpr 0x55ec704c2c28 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c2b58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2bc8 <col:30> 'const char *' lvalue ParmVar 0x55ec70497130 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c2be8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55ec704c2c08 <col:42> 'P' lvalue ParmVar 0x55ec704971a8 'parser' 'P'
|-FunctionTemplateDecl 0x55ec704976a8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55ec70497380 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec70497608 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ec70497430 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704974b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70497528 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ec704c2e40 <col:67, line:576:5>
|     |-CallExpr 0x55ec704c2dc8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c2c88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ec704c2cc8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c2cd8 <col:39> 'const char *' lvalue ParmVar 0x55ec70497430 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ec704c2d88 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ec704c2d38 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ec704c2cf8 <col:48> 'int' lvalue ParmVar 0x55ec704974b0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ec704c2d70 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ec704c2d50 <col:56> 'const int' lvalue Var 0x55ec70488a20 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55ec704c2da8 <col:68> 'P' lvalue ParmVar 0x55ec70497528 'parser' 'P'
|     `-ReturnStmt 0x55ec704c2e30 <line:575:9, col:17>
|       `-UnaryOperator 0x55ec704c2e18 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c2e08 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec70497af8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55ec70497718 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70497798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70497a58 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ec70497858 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704978d0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70497978 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c2fb0 <col:62, line:592:5>
|     `-ReturnStmt 0x55ec704c2fa0 <line:591:9, col:51>
|       `-CallExpr 0x55ec704c2f60 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c2e70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c2ee0 <col:30> 'const char *' lvalue ParmVar 0x55ec70497858 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c2f00 <col:39> 'int' 0
|         |-DeclRefExpr 0x55ec704c2f20 <col:42> 'P' lvalue ParmVar 0x55ec704978d0 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c2f40 <col:50> 'T' lvalue ParmVar 0x55ec70497978 'x' 'T &'
|-FunctionTemplateDecl 0x55ec70497fd8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55ec70497b68 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70497be8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70497f38 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ec70497ca8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70497d28 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70497da0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70497e48 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c31a8 <col:73, line:597:5>
|     |-CallExpr 0x55ec704c3128 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c2fc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ec704c3008 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c3018 <col:39> 'const char *' lvalue ParmVar 0x55ec70497ca8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ec704c30c8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ec704c3078 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ec704c3038 <col:48> 'int' lvalue ParmVar 0x55ec70497d28 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ec704c30b0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ec704c3090 <col:56> 'const int' lvalue Var 0x55ec70488a20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ec704c30e8 <col:68> 'P' lvalue ParmVar 0x55ec70497da0 'parser' 'P'
|     | `-DeclRefExpr 0x55ec704c3108 <col:76> 'T' lvalue ParmVar 0x55ec70497e48 'x' 'T &'
|     `-ReturnStmt 0x55ec704c3198 <line:596:9, col:17>
|       `-UnaryOperator 0x55ec704c3180 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c3170 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec70498588 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55ec70498050 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704980c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec704984e8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ec70498188 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70498200 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704983c0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ec704c3318 <col:65, line:614:5>
|     `-ReturnStmt 0x55ec704c3308 <line:613:9, col:46>
|       `-CallExpr 0x55ec704c32c8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c31d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c3248 <col:25> 'const char *' lvalue ParmVar 0x55ec70498188 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c3268 <col:34> 'int' 0
|         |-DeclRefExpr 0x55ec704c3288 <col:37> 'P' lvalue ParmVar 0x55ec70498200 'parser' 'P'
|         `-DeclRefExpr 0x55ec704c32a8 <col:45> 'Vector<T>' lvalue ParmVar 0x55ec704983c0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ec704989b8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55ec704985f8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec70498918 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55ec704986b0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70498800 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ec704c3530 <col:55, line:618:5>
|     `-ReturnStmt 0x55ec704c3520 <line:617:9, col:55>
|       `-CallExpr 0x55ec704c34e0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c3340 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c33b0 <col:25> 'const char *' lvalue ParmVar 0x55ec704986b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ec704c33d0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55ec704c34a0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ec704c34c0 <col:54> 'Vector<T>' lvalue ParmVar 0x55ec70498800 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ec70498f88 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55ec70498a20 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70498a98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70498ee8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ec70498b58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec70498bd8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70498c50 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ec70498da0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ec704c3728 <col:76, line:623:5>
|     |-CallExpr 0x55ec704c36a8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ec704c3548 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55ec704c3588 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55ec704c3598 <col:34> 'const char *' lvalue ParmVar 0x55ec70498b58 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ec704c3648 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ec704c35f8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ec704c35b8 <col:43> 'int' lvalue ParmVar 0x55ec70498bd8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ec704c3630 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ec704c3610 <col:51> 'const int' lvalue Var 0x55ec70488a20 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ec704c3668 <col:63> 'P' lvalue ParmVar 0x55ec70498c50 'parser' 'P'
|     | `-DeclRefExpr 0x55ec704c3688 <col:71> 'Vector<T>' lvalue ParmVar 0x55ec70498da0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55ec704c3718 <line:622:9, col:17>
|       `-UnaryOperator 0x55ec704c3700 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c36f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec704994c8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55ec70499000 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec70499078 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec70499428 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55ec70499138 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704991b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ec70499300 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ec704c3990 <col:66, line:627:5>
|     `-ReturnStmt 0x55ec704c3980 <line:626:9, col:59>
|       `-CallExpr 0x55ec704c3940 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ec704c3758 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ec704c37c8 <col:25> 'const char *' lvalue ParmVar 0x55ec70499138 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ec704c37e8 <col:34> 'int' lvalue ParmVar 0x55ec704991b8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55ec704c3900 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ec704c3920 <col:58> 'Vector<T>' lvalue ParmVar 0x55ec70499300 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55ec70499558 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55ec704c3a10 <col:25, line:633:5>
|   `-ReturnStmt 0x55ec704c3a00 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55ec704c39e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ec704c39b8 <col:16> 'const bool' lvalue ->_status 0x55ec704a5228
|         `-CXXThisExpr 0x55ec704c39a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ec704996d8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55ec70499610 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55ec704c3af8 <col:27, line:639:5>
|   |-BinaryOperator 0x55ec704c3aa0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ec704c3a28 <col:9> 'bool' lvalue ParmVar 0x55ec70499610 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ec704c3a88 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ec704c3a58 <col:13> 'bool' lvalue ->_status 0x55ec704a5228
|   |     `-CXXThisExpr 0x55ec704c3a48 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ec704c3ae8 <line:638:9, col:17>
|     `-UnaryOperator 0x55ec704c3ad0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704c3ac0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ec70499858 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ec70499798 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55ec704c3be8 <col:39, line:644:5>
|   |-BinaryOperator 0x55ec704c3b90 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ec704c3b18 <col:9> 'bool' lvalue ParmVar 0x55ec70499798 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ec704c3b78 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ec704c3b48 <col:13> 'const bool' lvalue ->_status 0x55ec704a5228
|   |     `-CXXThisExpr 0x55ec704c3b38 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ec704c3bd8 <line:643:9, col:17>
|     `-UnaryOperator 0x55ec704c3bc0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704c3bb0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ec70499920 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55ec704c3c90 <col:30, line:651:5>
|   `-ReturnStmt 0x55ec704c3c80 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55ec704c3c68 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ec704c3c38 <col:16> 'bool' lvalue ->_read_status 0x55ec7047e310
|         `-ImplicitCastExpr 0x55ec704c3c18 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55ec704c3c08 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ec70499a68 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55ec704999d8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55ec704c3d98 <col:32, line:658:5>
|   |-BinaryOperator 0x55ec704c3d40 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ec704c3ca8 <col:9> 'bool' lvalue ParmVar 0x55ec704999d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ec704c3d28 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ec704c3cf8 <col:13> 'bool' lvalue ->_read_status 0x55ec7047e310
|   |     `-ImplicitCastExpr 0x55ec704c3cd8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ec704c3cc8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ec704c3d88 <line:657:9, col:17>
|     `-UnaryOperator 0x55ec704c3d70 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704c3d60 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ec70499bb8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ec70499b28 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55ec704c3ea8 <col:44, line:663:5>
|   |-BinaryOperator 0x55ec704c3e50 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ec704c3db8 <col:9> 'bool' lvalue ParmVar 0x55ec70499b28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ec704c3e38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ec704c3e08 <col:13> 'bool' lvalue ->_read_status 0x55ec7047e310
|   |     `-ImplicitCastExpr 0x55ec704c3de8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ec704c3dd8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ec704c3e98 <line:662:9, col:17>
|     `-UnaryOperator 0x55ec704c3e80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec704c3e70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ec70499c80 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55ec70499d48 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55ec70499e10 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55ec70499ed8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55ec7049a1e8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55ec70499f78 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec7049a148 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55ec7049a058 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c4260 <col:19, line:706:5>
|     `-IfStmt 0x55ec704c4238 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55ec704c3fa8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55ec704c4168 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55ec704c4138 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55ec704c40f8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55ec704c4000 <col:42> '<bound member function type>' ->simple_slot 0x55ec704becd0
|       |     | `-CXXThisExpr 0x55ec704c3ff0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55ec704c4098 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55ec704c4050 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55ec70189608
|       |     | `-DeclRefExpr 0x55ec704c4030 <col:55> 'T' lvalue ParmVar 0x55ec7049a058 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55ec704c40d8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55ec704c4228 <line:705:13, col:34>
|         `-CallExpr 0x55ec704c4200 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55ec704c4188 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55ec704c41e0 <col:33> 'T' lvalue ParmVar 0x55ec7049a058 'x' 'T &'
|-FunctionTemplateDecl 0x55ec7049a4b8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55ec7049a248 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec7049a418 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55ec7049a328 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55ec704c4640 <col:31, line:717:5>
|     |-DeclStmt 0x55ec704c43a0 <line:713:9, col:23>
|     | `-VarDecl 0x55ec704c4288 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55ec704c4378 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ec704c4300 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ec704c4358 <col:21> 'T' lvalue ParmVar 0x55ec7049a328 'x' 'T &'
|     |-IfStmt 0x55ec704c45f0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55ec704c4498 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55ec704c45d0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ec704c4570 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ec704c4500 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|     |   | `-DeclRefExpr 0x55ec704c44e0 <col:14> 'T *' lvalue Var 0x55ec704c4288 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55ec704c45b0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55ec704c4628 <line:716:9, col:16>
|       `-DeclRefExpr 0x55ec704c4608 <col:16> 'T *' lvalue Var 0x55ec704c4288 's' 'T *'
|-FunctionTemplateDecl 0x55ec7049a8c8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55ec7049a518 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec7049a598 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ec7049a828 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55ec7049a678 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55ec7049a718 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55ec704c4950 <col:37, line:726:5>
|     |-IfStmt 0x55ec704c48e0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55ec704c4900 <line:723:13, col:26>
|     | | `-VarDecl 0x55ec704c46a8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55ec704c4798 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55ec704c4720 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55ec704c4778 <col:25> 'T' lvalue ParmVar 0x55ec7049a678 'x' 'T &'
|     | |-DeclRefExpr 0x55ec704c47c0 <col:16> 'T *' lvalue Var 0x55ec704c46a8 's' 'T *'
|     | `-BinaryOperator 0x55ec704c48c0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ec704c4870 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ec704c4800 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|     |   | `-DeclRefExpr 0x55ec704c47e0 <col:14> 'T *' lvalue Var 0x55ec704c46a8 's' 'T *'
|     |   `-DeclRefExpr 0x55ec704c48a0 <col:18> 'const V' lvalue ParmVar 0x55ec7049a718 'value' 'const V &'
|     `-ReturnStmt 0x55ec704c4940 <line:725:9, col:17>
|       `-UnaryOperator 0x55ec704c4928 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ec704c4918 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ec704a0b58 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55ec704a07c0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ec704a0ab8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55ec704a0870 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a08f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a0998 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55ec704c5770 <col:65, line:737:5>
|     |-DeclStmt 0x55ec704c49e8 <line:732:9, col:26>
|     | `-VarDecl 0x55ec704c4980 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ec704c5738 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55ec704c5758 <line:733:13, col:58>
|       | `-VarDecl 0x55ec704c4a10 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ec704c4bf0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ec704c4bc0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ec704c4ba8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ec704c4b88 <col:26, col:58> 'String' (CXXTemporary 0x55ec704c4b88)
|       |           `-CXXMemberCallExpr 0x55ec704c4b18 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ec704c4a88 <col:26> '<bound member function type>' ->find 0x55ec704bc298
|       |             | `-CXXThisExpr 0x55ec704c4a78 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ec704c4b50 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704c4ab8 <col:31> 'const char *' lvalue ParmVar 0x55ec704a0870 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ec704c4b68 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704c4ad8 <col:40> 'int' lvalue ParmVar 0x55ec704a08f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55ec704c4af8 <col:47> 'Args::Slot *' lvalue Var 0x55ec704c4980 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ec704c4ca8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ec704c4c90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ec704c4c70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ec704c4c40 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |       `-ImplicitCastExpr 0x55ec704c4c28 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ec704c4c08 <col:20> 'String' lvalue Var 0x55ec704c4a10 'str' 'String'
|       `-CompoundStmt 0x55ec704c5718 <col:61, line:736:9>
|         |-DeclStmt 0x55ec704c5160 <line:734:13, col:76>
|         | `-VarDecl 0x55ec704c4cf8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ec704c5130 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ec704c50a0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ec704c50e8 <col:60> 'T' lvalue ParmVar 0x55ec704a0998 'variable' 'T &'
|         |     `-UnaryOperator 0x55ec704c5118 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ec704c5108 <col:71> 'Args *' this
|         `-CallExpr 0x55ec704c56e8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55ec704c5188 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|           | `-CXXThisExpr 0x55ec704c5178 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ec704c56a8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ec704c51b8 <col:23> 'T *' lvalue Var 0x55ec704c4cf8 's' 'T *'
|           | `-CallExpr 0x55ec704c5668 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ec704c5440 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55ec704c5540 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55ec704c5560 <col:86> 'String' lvalue Var 0x55ec704c4a10 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ec704c5610 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ec704c55a0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|           |   | `-DeclRefExpr 0x55ec704c5580 <col:92> 'T *' lvalue Var 0x55ec704c4cf8 's' 'T *'
|           |   `-UnaryOperator 0x55ec704c5650 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ec704c5640 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55ec704c56c8 <col:103> 'Args::Slot *' lvalue Var 0x55ec704c4980 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a10a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ec704a0bc8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec704a0c48 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ec704a1008 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ec704a0d08 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a0d88 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a0e28 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55ec704a0ec8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55ec704c8ff8 <col:88, line:745:5>
|     |-DeclStmt 0x55ec704c5808 <line:741:9, col:26>
|     | `-VarDecl 0x55ec704c57a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ec704c5a28 <line:742:9, col:55>
|     | `-VarDecl 0x55ec704c5830 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ec704c5a10 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ec704c59e0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ec704c59c8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ec704c59a8 <col:22, col:54> 'String' (CXXTemporary 0x55ec704c59a8)
|     |           `-CXXMemberCallExpr 0x55ec704c5938 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ec704c58a8 <col:22> '<bound member function type>' ->find 0x55ec704bc298
|     |             | `-CXXThisExpr 0x55ec704c5898 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ec704c5970 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ec704c58d8 <col:27> 'const char *' lvalue ParmVar 0x55ec704a0d08 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ec704c5988 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ec704c58f8 <col:36> 'int' lvalue ParmVar 0x55ec704a0d88 'flags' 'int'
|     |             `-DeclRefExpr 0x55ec704c5918 <col:43> 'Args::Slot *' lvalue Var 0x55ec704c57a0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ec704c5e00 <line:743:9, col:72>
|     | `-VarDecl 0x55ec704c5a78 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ec704c5dd0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ec704c5d40 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ec704c5d88 <col:56> 'T' lvalue ParmVar 0x55ec704a0e28 'variable' 'T &'
|     |     `-UnaryOperator 0x55ec704c5db8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ec704c5da8 <col:67> 'Args *' this
|     `-CallExpr 0x55ec704c8fc8 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55ec704c5e28 <col:9> '<bound member function type>' ->postparse 0x55ec704be4f8
|       | `-CXXThisExpr 0x55ec704c5e18 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ec704c8f88 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ec704c5e58 <col:19> 'T *' lvalue Var 0x55ec704c5a78 's' 'T *'
|       | `-ParenExpr 0x55ec704c8f68 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55ec704c8f38 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ec704c8f20 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ec704c8f08 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ec704c8ee8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ec704c8eb8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |     |       `-ImplicitCastExpr 0x55ec704c8ea0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ec704c5e78 <col:25> 'String' lvalue Var 0x55ec704c5830 'str' 'String'
|       |     |-CallExpr 0x55ec704c6328 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ec704c6100 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55ec704c6200 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55ec704c6220 <col:89> 'String' lvalue Var 0x55ec704c5830 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ec704c62d0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ec704c6260 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|       |     | | `-DeclRefExpr 0x55ec704c6240 <col:95> 'T *' lvalue Var 0x55ec704c5a78 's' 'T *'
|       |     | `-UnaryOperator 0x55ec704c6310 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ec704c6300 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55ec704c8e80 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55ec704c8e60 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ec704c8e30 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ec704c8de0 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ec704c8d70 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|       |         | | `-DeclRefExpr 0x55ec704c6368 <col:109> 'T *' lvalue Var 0x55ec704c5a78 's' 'T *'
|       |         | `-DeclRefExpr 0x55ec704c8e10 <col:113> 'const V' lvalue ParmVar 0x55ec704a0ec8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ec704c8e50 <col:120> 'bool' true
|       `-DeclRefExpr 0x55ec704c8fa8 <col:128> 'Args::Slot *' lvalue Var 0x55ec704c57a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a15d8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55ec704a1120 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704a1198 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec704a1538 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ec704a1258 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a12d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a1350 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704a13f8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55ec704c9bf8 <col:75, line:754:5>
|     |-DeclStmt 0x55ec704c90a0 <line:749:9, col:26>
|     | `-VarDecl 0x55ec704c9038 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ec704c9bc0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55ec704c9be0 <line:750:13, col:58>
|       | `-VarDecl 0x55ec704c90c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ec704c92a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ec704c9278 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ec704c9260 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ec704c9240 <col:26, col:58> 'String' (CXXTemporary 0x55ec704c9240)
|       |           `-CXXMemberCallExpr 0x55ec704c91d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ec704c9140 <col:26> '<bound member function type>' ->find 0x55ec704bc298
|       |             | `-CXXThisExpr 0x55ec704c9130 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ec704c9208 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704c9170 <col:31> 'const char *' lvalue ParmVar 0x55ec704a1258 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ec704c9220 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704c9190 <col:40> 'int' lvalue ParmVar 0x55ec704a12d8 'flags' 'int'
|       |             `-DeclRefExpr 0x55ec704c91b0 <col:47> 'Args::Slot *' lvalue Var 0x55ec704c9038 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ec704c9360 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ec704c9348 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ec704c9328 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ec704c92f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |       `-ImplicitCastExpr 0x55ec704c92e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ec704c92c0 <col:20> 'String' lvalue Var 0x55ec704c90c8 'str' 'String'
|       `-CompoundStmt 0x55ec704c9ba0 <col:61, line:753:9>
|         |-DeclStmt 0x55ec704c9740 <line:751:13, col:63>
|         | `-VarDecl 0x55ec704c93b8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ec704c9710 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ec704c9680 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ec704c96c8 <col:47> 'T' lvalue ParmVar 0x55ec704a13f8 'variable' 'T &'
|         |     `-UnaryOperator 0x55ec704c96f8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ec704c96e8 <col:58> 'Args *' this
|         `-CallExpr 0x55ec704c9b70 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55ec704c9768 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|           | `-CXXThisExpr 0x55ec704c9758 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ec704c9b30 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ec704c9798 <col:23> 'T *' lvalue Var 0x55ec704c93b8 's' 'T *'
|           | `-CallExpr 0x55ec704c9af0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ec704c9980 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ec704c99c8 <col:56> 'P' lvalue ParmVar 0x55ec704a1350 'parser' 'P'
|           |   |-DeclRefExpr 0x55ec704c99e8 <col:64> 'String' lvalue Var 0x55ec704c90c8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ec704c9a98 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ec704c9a28 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|           |   | `-DeclRefExpr 0x55ec704c9a08 <col:70> 'T *' lvalue Var 0x55ec704c93b8 's' 'T *'
|           |   `-UnaryOperator 0x55ec704c9ad8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ec704c9ac8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55ec704c9b50 <col:81> 'Args::Slot *' lvalue Var 0x55ec704c9038 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a1c38 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ec704a1650 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ec704a16c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55ec704a1748 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ec704a1b98 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ec704a1810 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a1890 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a1908 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704a19a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55ec704a1a48 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55ec704ca988 <col:98, line:762:5>
|     |-DeclStmt 0x55ec704c9c90 <line:758:9, col:26>
|     | `-VarDecl 0x55ec704c9c28 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ec704c9eb0 <line:759:9, col:55>
|     | `-VarDecl 0x55ec704c9cb8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ec704c9e98 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ec704c9e68 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ec704c9e50 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ec704c9e30 <col:22, col:54> 'String' (CXXTemporary 0x55ec704c9e30)
|     |           `-CXXMemberCallExpr 0x55ec704c9dc0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ec704c9d30 <col:22> '<bound member function type>' ->find 0x55ec704bc298
|     |             | `-CXXThisExpr 0x55ec704c9d20 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ec704c9df8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ec704c9d60 <col:27> 'const char *' lvalue ParmVar 0x55ec704a1810 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ec704c9e10 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ec704c9d80 <col:36> 'int' lvalue ParmVar 0x55ec704a1890 'flags' 'int'
|     |             `-DeclRefExpr 0x55ec704c9da0 <col:43> 'Args::Slot *' lvalue Var 0x55ec704c9c28 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ec704ca2d0 <line:760:9, col:59>
|     | `-VarDecl 0x55ec704c9f08 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ec704ca2a0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ec704ca210 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ec704ca258 <col:43> 'T' lvalue ParmVar 0x55ec704a19a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55ec704ca288 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ec704ca278 <col:54> 'Args *' this
|     `-CallExpr 0x55ec704ca958 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55ec704ca2f8 <col:9> '<bound member function type>' ->postparse 0x55ec704be4f8
|       | `-CXXThisExpr 0x55ec704ca2e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ec704ca918 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ec704ca328 <col:19> 'T *' lvalue Var 0x55ec704c9f08 's' 'T *'
|       | `-ParenExpr 0x55ec704ca8f8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55ec704ca8c8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ec704ca8b0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ec704ca898 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ec704ca878 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ec704ca848 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |     |       `-ImplicitCastExpr 0x55ec704ca830 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ec704ca348 <col:25> 'String' lvalue Var 0x55ec704c9cb8 'str' 'String'
|       |     |-CallExpr 0x55ec704ca6a0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ec704ca530 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55ec704ca578 <col:59> 'P' lvalue ParmVar 0x55ec704a1908 'parser' 'P'
|       |     | |-DeclRefExpr 0x55ec704ca598 <col:67> 'String' lvalue Var 0x55ec704c9cb8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ec704ca648 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ec704ca5d8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|       |     | | `-DeclRefExpr 0x55ec704ca5b8 <col:73> 'T *' lvalue Var 0x55ec704c9f08 's' 'T *'
|       |     | `-UnaryOperator 0x55ec704ca688 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ec704ca678 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55ec704ca810 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55ec704ca7f0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ec704ca7c0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ec704ca770 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ec704ca700 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|       |         | | `-DeclRefExpr 0x55ec704ca6e0 <col:87> 'T *' lvalue Var 0x55ec704c9f08 's' 'T *'
|       |         | `-DeclRefExpr 0x55ec704ca7a0 <col:91> 'const V' lvalue ParmVar 0x55ec704a1a48 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ec704ca7e0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55ec704ca938 <col:106> 'Args::Slot *' lvalue Var 0x55ec704c9c28 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a22a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55ec704a1cb8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704a1d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ec704a1db8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ec704a2208 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ec704a1e80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a1f00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a1f78 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704a2018 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55ec704a20b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55ec704cb968 <col:60, line:773:5>
|     |-DeclStmt 0x55ec704caa30 <line:767:9, col:26>
|     | `-VarDecl 0x55ec704ca9c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ec704cb930 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55ec704cb950 <line:768:13, col:58>
|       | `-VarDecl 0x55ec704caa58 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ec704cac38 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ec704cac08 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ec704cabf0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ec704cabd0 <col:26, col:58> 'String' (CXXTemporary 0x55ec704cabd0)
|       |           `-CXXMemberCallExpr 0x55ec704cab60 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ec704caad0 <col:26> '<bound member function type>' ->find 0x55ec704bc298
|       |             | `-CXXThisExpr 0x55ec704caac0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ec704cab98 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704cab00 <col:31> 'const char *' lvalue ParmVar 0x55ec704a1e80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ec704cabb0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704cab20 <col:40> 'int' lvalue ParmVar 0x55ec704a1f00 'flags' 'int'
|       |             `-DeclRefExpr 0x55ec704cab40 <col:47> 'Args::Slot *' lvalue Var 0x55ec704ca9c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ec704cacf0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ec704cacd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ec704cacb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ec704cac88 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |       `-ImplicitCastExpr 0x55ec704cac70 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ec704cac50 <col:20> 'String' lvalue Var 0x55ec704caa58 'str' 'String'
|       `-CompoundStmt 0x55ec704cb908 <col:61, line:772:9>
|         |-DeclStmt 0x55ec704cb030 <line:769:13, col:66>
|         | `-VarDecl 0x55ec704cad48 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55ec704cb000 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ec704caf70 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ec704cafb8 <col:49> 'T1' lvalue ParmVar 0x55ec704a2018 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55ec704cafe8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ec704cafd8 <col:61> 'Args *' this
|         |-DeclStmt 0x55ec704cb3a0 <line:770:13, col:66>
|         | `-VarDecl 0x55ec704cb0b8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55ec704cb370 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ec704cb2e0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ec704cb328 <col:49> 'T2' lvalue ParmVar 0x55ec704a20b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55ec704cb358 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ec704cb348 <col:61> 'Args *' this
|         `-CallExpr 0x55ec704cb8d8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55ec704cb3c8 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|           | `-CXXThisExpr 0x55ec704cb3b8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ec704cb898 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55ec704cb438 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55ec704cb3f8 <col:23> 'T1 *' lvalue Var 0x55ec704cad48 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55ec704cb418 <col:29> 'T2 *' lvalue Var 0x55ec704cb0b8 's2' 'T2 *'
|           | `-CallExpr 0x55ec704cb850 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ec704cb620 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ec704cb668 <col:63> 'P' lvalue ParmVar 0x55ec704a1f78 'parser' 'P'
|           |   |-DeclRefExpr 0x55ec704cb688 <col:71> 'String' lvalue Var 0x55ec704caa58 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ec704cb738 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ec704cb6c8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|           |   | `-DeclRefExpr 0x55ec704cb6a8 <col:77> 'T1 *' lvalue Var 0x55ec704cad48 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55ec704cb7f8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ec704cb788 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|           |   | `-DeclRefExpr 0x55ec704cb768 <col:82> 'T2 *' lvalue Var 0x55ec704cb0b8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55ec704cb838 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ec704cb828 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55ec704cb8b8 <col:94> 'Args::Slot *' lvalue Var 0x55ec704ca9c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a2698 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55ec704a2328 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec704a25f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ec704a23e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a2460 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a24d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ec704cbe80 <col:67, line:780:5>
|     |-DeclStmt 0x55ec704cba00 <line:777:9, col:26>
|     | `-VarDecl 0x55ec704cb998 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ec704cbe48 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55ec704cbe68 <line:778:13, col:58>
|       | `-VarDecl 0x55ec704cba28 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ec704cbc08 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ec704cbbd8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ec704cbbc0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ec704cbba0 <col:26, col:58> 'String' (CXXTemporary 0x55ec704cbba0)
|       |           `-CXXMemberCallExpr 0x55ec704cbb30 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ec704cbaa0 <col:26> '<bound member function type>' ->find 0x55ec704bc298
|       |             | `-CXXThisExpr 0x55ec704cba90 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ec704cbb68 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704cbad0 <col:31> 'const char *' lvalue ParmVar 0x55ec704a23e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ec704cbb80 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ec704cbaf0 <col:40> 'int' lvalue ParmVar 0x55ec704a2460 'flags' 'int'
|       |             `-DeclRefExpr 0x55ec704cbb10 <col:47> 'Args::Slot *' lvalue Var 0x55ec704cb998 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ec704cbcc0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ec704cbca8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ec704cbc88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ec704cbc58 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|       |       `-ImplicitCastExpr 0x55ec704cbc40 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ec704cbc20 <col:20> 'String' lvalue Var 0x55ec704cba28 'str' 'String'
|       `-CallExpr 0x55ec704cbe18 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55ec704cbce8 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|         | `-CXXThisExpr 0x55ec704cbcd8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55ec704cbdc8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55ec704cbd38 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55ec704cbd18 <col:23> 'P' lvalue ParmVar 0x55ec704a24d8 'parser' 'P'
|         | |-DeclRefExpr 0x55ec704cbd80 <col:36> 'String' lvalue Var 0x55ec704cba28 'str' 'String'
|         | `-UnaryOperator 0x55ec704cbdb0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55ec704cbda0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55ec704cbdf8 <col:49> 'Args::Slot *' lvalue Var 0x55ec704cb998 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ec704a2a38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ec704a2708 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ec704a2998 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ec704a27c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a2840 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a28b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55ec704cc7f0 <col:71, line:792:5>
|     |-DeclStmt 0x55ec704cbf18 <line:784:9, col:26>
|     | `-VarDecl 0x55ec704cbeb0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ec704cbfe8 <line:785:9, col:29>
|     | `-VarDecl 0x55ec704cbf48 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ec704cbfd0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ec704cbfb0 <col:28> 'int' 1
|     |-WhileStmt 0x55ec704cc6a0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55ec704cc6c0 <line:786:16, col:61>
|     | | `-VarDecl 0x55ec704cc010 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ec704cc1f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ec704cc1c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ec704cc1a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ec704cc188 <col:29, col:61> 'String' (CXXTemporary 0x55ec704cc188)
|     | |           `-CXXMemberCallExpr 0x55ec704cc118 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ec704cc088 <col:29> '<bound member function type>' ->find 0x55ec704bc298
|     | |             | `-CXXThisExpr 0x55ec704cc078 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ec704cc150 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704cc0b8 <col:34> 'const char *' lvalue ParmVar 0x55ec704a27c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ec704cc168 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704cc0d8 <col:43> 'int' lvalue ParmVar 0x55ec704a2840 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ec704cc0f8 <col:50> 'Args::Slot *' lvalue Var 0x55ec704cbeb0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ec704cc2a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ec704cc290 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ec704cc270 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ec704cc240 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|     | |       `-ImplicitCastExpr 0x55ec704cc228 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ec704cc208 <col:23> 'String' lvalue Var 0x55ec704cc010 'str' 'String'
|     | `-CompoundStmt 0x55ec704cc678 <col:64, line:790:9>
|     |   |-CallExpr 0x55ec704cc400 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55ec704cc2d0 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|     |   | | `-CXXThisExpr 0x55ec704cc2c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ec704cc3b0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ec704cc320 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ec704cc300 <col:23> 'P' lvalue ParmVar 0x55ec704a28b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ec704cc368 <col:36> 'String' lvalue Var 0x55ec704cc010 'str' 'String'
|     |   | | `-UnaryOperator 0x55ec704cc398 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ec704cc388 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55ec704cc3e0 <col:49> 'Args::Slot *' lvalue Var 0x55ec704cbeb0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ec704cc598 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ec704cc430 <col:13> 'int' lvalue Var 0x55ec704cbf48 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ec704cc580 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ec704cc560 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ec704cc4c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ec704cc4a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ec704cc490 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ec704cc450 <col:28> 'int' lvalue Var 0x55ec704cbf48 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ec704cc470 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ec704cc548 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ec704cc518 <col:49> 'bool' lvalue ->_read_status 0x55ec7047e310
|     |   |         `-ImplicitCastExpr 0x55ec704cc4f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ec704cc4e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ec704cc648 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ec704cc5b8 <col:13> 'int' lvalue ParmVar 0x55ec704a2840 'flags' 'int'
|     |     `-UnaryOperator 0x55ec704cc630 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ec704cc618 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ec704cc5f8 <col:23> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ec704cc7d0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ec704cc708 <col:9> 'bool' lvalue ->_read_status 0x55ec7047e310
|       | `-ImplicitCastExpr 0x55ec704cc6e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ec704cc6d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ec704cc7b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ec704cc790 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ec704cc778 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ec704cc738 <col:25> 'int' lvalue Var 0x55ec704cbf48 'read_status' 'int'
|           `-IntegerLiteral 0x55ec704cc758 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ec704a2f18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ec704a2aa8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704a2b28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec704a2e78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ec704a2be8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a2c68 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a2ce0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704a2d88 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55ec704cd780 <col:84, line:805:5>
|     |-DeclStmt 0x55ec704cc898 <line:796:9, col:26>
|     | `-VarDecl 0x55ec704cc830 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ec704cc968 <line:797:9, col:29>
|     | `-VarDecl 0x55ec704cc8c8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ec704cc950 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ec704cc930 <col:28> 'int' 1
|     |-DeclStmt 0x55ec704ccca0 <line:798:9, col:71>
|     | `-VarDecl 0x55ec704cc9b8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ec704ccc70 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ec704ccbe0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55ec704ccc28 <col:55> 'T' lvalue ParmVar 0x55ec704a2d88 'variable' 'T &'
|     |     `-UnaryOperator 0x55ec704ccc58 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ec704ccc48 <col:66> 'Args *' this
|     |-WhileStmt 0x55ec704cd630 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55ec704cd650 <line:799:16, col:61>
|     | | `-VarDecl 0x55ec704cccc8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ec704ccea8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ec704cce78 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ec704cce60 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ec704cce40 <col:29, col:61> 'String' (CXXTemporary 0x55ec704cce40)
|     | |           `-CXXMemberCallExpr 0x55ec704ccdd0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ec704ccd40 <col:29> '<bound member function type>' ->find 0x55ec704bc298
|     | |             | `-CXXThisExpr 0x55ec704ccd30 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ec704cce08 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704ccd70 <col:34> 'const char *' lvalue ParmVar 0x55ec704a2be8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ec704cce20 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704ccd90 <col:43> 'int' lvalue ParmVar 0x55ec704a2c68 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ec704ccdb0 <col:50> 'Args::Slot *' lvalue Var 0x55ec704cc830 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ec704ccf60 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ec704ccf48 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ec704ccf28 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ec704ccef8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|     | |       `-ImplicitCastExpr 0x55ec704ccee0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ec704ccec0 <col:23> 'String' lvalue Var 0x55ec704cccc8 'str' 'String'
|     | `-CompoundStmt 0x55ec704cd608 <col:64, line:803:9>
|     |   |-CallExpr 0x55ec704cd390 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55ec704ccf88 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|     |   | | `-CXXThisExpr 0x55ec704ccf78 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55ec704cd350 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55ec704ccfb8 <col:23> 'T *' lvalue Var 0x55ec704cc9b8 's' 'T *'
|     |   | | `-CallExpr 0x55ec704cd310 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55ec704cd1a0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55ec704cd1e8 <col:56> 'P' lvalue ParmVar 0x55ec704a2ce0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55ec704cd208 <col:64> 'String' lvalue Var 0x55ec704cccc8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55ec704cd2b8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55ec704cd248 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|     |   | |   | `-DeclRefExpr 0x55ec704cd228 <col:70> 'T *' lvalue Var 0x55ec704cc9b8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55ec704cd2f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55ec704cd2e8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55ec704cd370 <col:81> 'Args::Slot *' lvalue Var 0x55ec704cc830 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ec704cd528 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ec704cd3c0 <col:13> 'int' lvalue Var 0x55ec704cc8c8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ec704cd510 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ec704cd4f0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ec704cd458 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ec704cd438 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ec704cd420 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ec704cd3e0 <col:28> 'int' lvalue Var 0x55ec704cc8c8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ec704cd400 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ec704cd4d8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ec704cd4a8 <col:49> 'bool' lvalue ->_read_status 0x55ec7047e310
|     |   |         `-ImplicitCastExpr 0x55ec704cd488 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ec704cd478 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ec704cd5d8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ec704cd548 <col:13> 'int' lvalue ParmVar 0x55ec704a2c68 'flags' 'int'
|     |     `-UnaryOperator 0x55ec704cd5c0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ec704cd5a8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ec704cd588 <col:23> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ec704cd760 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ec704cd698 <col:9> 'bool' lvalue ->_read_status 0x55ec7047e310
|       | `-ImplicitCastExpr 0x55ec704cd678 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ec704cd668 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ec704cd740 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ec704cd720 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ec704cd708 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ec704cd6c8 <col:25> 'int' lvalue Var 0x55ec704cc8c8 'read_status' 'int'
|           `-IntegerLiteral 0x55ec704cd6e8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ec704a34f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55ec704a2f90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ec704a3008 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ec704a3458 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ec704a30c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ec704a3148 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55ec704a31c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55ec704a3310 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55ec704ce588 <col:87, line:821:5>
|     |-DeclStmt 0x55ec704cd830 <line:809:9, col:26>
|     | `-VarDecl 0x55ec704cd7c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ec704cd900 <line:810:9, col:29>
|     | `-VarDecl 0x55ec704cd860 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ec704cd8e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ec704cd8c8 <col:28> 'int' 1
|     |-DeclStmt 0x55ec704cdb48 <line:811:9, col:38>
|     | `-VarDecl 0x55ec704cda30 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55ec704cdb20 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ec704cdaa8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ec704cdb00 <col:29> 'Vector<T>' lvalue ParmVar 0x55ec704a3310 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55ec704ce438 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55ec704ce458 <line:812:16, col:61>
|     | | `-VarDecl 0x55ec704cdb70 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ec704cdd50 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ec704cdd20 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ec704cdd08 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ec704cdce8 <col:29, col:61> 'String' (CXXTemporary 0x55ec704cdce8)
|     | |           `-CXXMemberCallExpr 0x55ec704cdc78 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ec704cdbe8 <col:29> '<bound member function type>' ->find 0x55ec704bc298
|     | |             | `-CXXThisExpr 0x55ec704cdbd8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ec704cdcb0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704cdc18 <col:34> 'const char *' lvalue ParmVar 0x55ec704a30c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ec704cdcc8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ec704cdc38 <col:43> 'int' lvalue ParmVar 0x55ec704a3148 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ec704cdc58 <col:50> 'Args::Slot *' lvalue Var 0x55ec704cd7c8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ec704cde08 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ec704cddf0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ec704cddd0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ec704cdda0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ec7014c5d8
|     | |       `-ImplicitCastExpr 0x55ec704cdd88 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ec704cdd68 <col:23> 'String' lvalue Var 0x55ec704cdb70 'str' 'String'
|     | `-CompoundStmt 0x55ec704ce400 <col:64, line:819:9>
|     |   |-DeclStmt 0x55ec704cdec8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55ec704cde30 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55ec704cdea8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55ec704ce048 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55ec704cdef0 <col:13> '<bound member function type>' ->postparse 0x55ec704be4f8
|     |   | | `-CXXThisExpr 0x55ec704cdee0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ec704cdff0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ec704cdf40 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ec704cdf20 <col:23> 'P' lvalue ParmVar 0x55ec704a31c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ec704cdf88 <col:36> 'String' lvalue Var 0x55ec704cdb70 'str' 'String'
|     |   | | |-DeclRefExpr 0x55ec704cdfa8 <col:41> 'T' lvalue Var 0x55ec704cde30 'sx' 'T'
|     |   | | `-UnaryOperator 0x55ec704cdfd8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ec704cdfc8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55ec704ce028 <col:53> 'Args::Slot *' lvalue Var 0x55ec704cd7c8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55ec704ce1a0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55ec704ce0d8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55ec704ce0a8 <col:17> 'bool' lvalue ->_read_status 0x55ec7047e310
|     |   | |   `-ImplicitCastExpr 0x55ec704ce088 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55ec704ce078 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55ec704ce178 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55ec704ce110 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55ec704ce0f0 <col:17> 'Vector<T> *' lvalue Var 0x55ec704cda30 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55ec704ce158 <col:30> 'T' lvalue Var 0x55ec704cde30 'sx' 'T'
|     |   |-BinaryOperator 0x55ec704ce320 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ec704ce1b8 <col:13> 'int' lvalue Var 0x55ec704cd860 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ec704ce308 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ec704ce2e8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ec704ce250 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ec704ce230 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ec704ce218 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ec704ce1d8 <col:28> 'int' lvalue Var 0x55ec704cd860 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ec704ce1f8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ec704ce2d0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ec704ce2a0 <col:49> 'bool' lvalue ->_read_status 0x55ec7047e310
|     |   |         `-ImplicitCastExpr 0x55ec704ce280 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ec704ce270 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ec704ce3d0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ec704ce340 <col:13> 'int' lvalue ParmVar 0x55ec704a3148 'flags' 'int'
|     |     `-UnaryOperator 0x55ec704ce3b8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ec704ce3a0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ec704ce380 <col:23> 'const int' lvalue Var 0x55ec70488738 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ec704ce568 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ec704ce4a0 <col:9> 'bool' lvalue ->_read_status 0x55ec7047e310
|       | `-ImplicitCastExpr 0x55ec704ce480 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ec704ce470 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ec704ce548 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ec704ce528 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ec704ce510 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ec704ce4d0 <col:25> 'int' lvalue Var 0x55ec704cd860 'read_status' 'int'
|           `-IntegerLiteral 0x55ec704ce4f0 <col:40> 'int' 1
|-AccessSpecDecl 0x55ec704a3570 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55ec704a3598 prev 0x55ec70486a70 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55ec704a3690 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55ec704a3780 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55ec704ce5c0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55ec704a3870 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55ec704ce5d0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55ec704a3970 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55ec704a3a20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55ec704a3ac8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ec704a3ac8
| | `-ParmVarDecl 0x55ec704a3bd8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55ec704a4398 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ec704a4398
|   `-ParmVarDecl 0x55ec704a44a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55ec704a3c48 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55ec704a3da8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55ec704a3fa0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55ec704a3e50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55ec704a3ec8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55ec704ce7b0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55ec704a4258 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55ec704ce620 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ec704ce5e0 <col:20> 'void *' lvalue ParmVar 0x55ec704a3e50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55ec704a42c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55ec704ce6a8 <col:32, col:45> 'char *' array Function 0x55ec6ff6f248 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55ec704ce690 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55ec704ce660 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55ec704a3ec8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55ec704a4320 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55ec704ce770 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ec704ce730 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55ec704a3ec8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55ec704ce830 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55ec704a40a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55ec704a3870 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55ec704ce8b8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55ec704ce898 <line:840:13, col:22> 'void' array Function 0x55ec6ff6f5a8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55ec704ce880 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55ec704ce850 <col:22> 'char *' lvalue ->_slot 0x55ec704a42c0
| |         `-CXXThisExpr 0x55ec704ce840 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55ec704a41a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55ec704a3970 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55ec704ceaa8 <col:22, line:844:9>
| |   `-CallExpr 0x55ec704cea10 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55ec704ce9f8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55ec704ce9d8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55ec7007b028 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55ec704cea48 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55ec704ce928 <col:20> 'void *' lvalue ->_ptr 0x55ec704a4258
| |     |   `-CXXThisExpr 0x55ec704ce918 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55ec704cea78 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55ec704cea60 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55ec704ce968 <col:26> 'char *' lvalue ->_slot 0x55ec704a42c0
| |     |     `-CXXThisExpr 0x55ec704ce958 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55ec704cea90 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55ec704ce9a8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55ec704a4320
| |         `-CXXThisExpr 0x55ec704ce998 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55ec704a4258 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55ec704a42c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55ec704a4320 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55ec704a4518 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ec704a4518
| | `-ParmVarDecl 0x55ec704a4628 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55ec704a46c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ec704a46c8
|   `-ParmVarDecl 0x55ec704a47d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55ec704a4978 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55ec704a4848 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55ec704a48e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55ec704a4c10 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55ec704a4e08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55ec704a4cd8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55ec704a4f88 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55ec704ceae0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55ec704ceac0 <col:20> 'T *' lvalue ParmVar 0x55ec704a4cd8 'ptr' 'T *'
|   | `-CompoundStmt 0x55ec704ceb30 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55ec704a4ed8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55ec704a3970 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55ec704cece8 <col:22, line:857:9>
|   |   `-CallExpr 0x55ec704cecb8 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55ec704ceb40 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55ec704204d8 0x55ec70133758 0x55ec700dda88
|   |     |-CXXOperatorCallExpr 0x55ec704cec48 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55ec704cebd8 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ec70340708 0x55ec70340328 0x55ec7033ff58 0x55ec7033fb78 0x55ec7033f798 0x55ec7033f3c8
|   |     | `-MemberExpr 0x55ec704ceba8 <col:29> 'T *' lvalue ->_ptr 0x55ec704a4f88
|   |     |   `-CXXThisExpr 0x55ec704ceb98 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55ec704cec88 <col:35> 'T' lvalue ->_slot 0x55ec704a4fe8
|   |       `-CXXThisExpr 0x55ec704cec78 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55ec704a4f88 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55ec704a4fe8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55ec704a5050 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55ec704a5150 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55ec704a51a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec704a5130 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55ec704a5110 <col:31> 'int' 48
|-FieldDecl 0x55ec704a51c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55ec704a5228 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55ec704a5288 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55ec704a53c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55ec704bbb40 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55ec704bbba0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55ec704bbc50 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55ec704bbe78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55ec704bbd80 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55ec704bbfc8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55ec704bbf38 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55ec704bc298 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55ec704bc088 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55ec704bc108 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55ec704bc1b0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55ec704be4f8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55ec704be3b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55ec704be428 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55ec704be5c8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55ec704be718 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55ec704be680 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55ec704beaa8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55ec704be7d8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55ec704be858 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55ec704be900 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55ec704be9b8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55ec704becd0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55ec704beb80 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55ec704bebf8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55ec704befe8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55ec704bed80 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55ec704bef48 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55ec704bee58 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.1, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.1, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class SecondsArg
         0 |   class NumArg (base) (empty)
         0 |   int fraction_digits
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704d90b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec704d91c8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55ec704d9258 <col:16, col:22> col:16 public
|-EnumDecl 0x55ec704d9280 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55ec704d9380 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ec704d95d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec704d9360 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec704d9340 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ec704d9410 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ec704d95e8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec704d93f0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55ec704d93d0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55ec704d94a0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ec704d9600 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec704d9480 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55ec704d9460 <col:24> 'int' 34
| |-EnumConstantDecl 0x55ec704d9530 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ec704d9618 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec704d9510 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55ec704d94f0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55ec704d9580 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55ec704dafc0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec704db3f8 <col:7>
|-CXXConstructorDecl 0x55ec704db0c8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55ec704db0c8
| `-ParmVarDecl 0x55ec704db1d8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55ec704db278 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec704db388 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55ec705243e0 <col:7>
`-CXXDestructorDecl 0x55ec704dd6c8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704e9208 <../dummy_inc/click/args.hh:1310:1, line:1321:1> line:1310:7 referenced class SecondsArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55ec704e9368 <col:1, col:7> col:7 implicit referenced class SecondsArg
|-AccessSpecDecl 0x55ec704e93f8 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x55ec704e9508 <line:1311:5, line:1313:5> line:1311:5 used SecondsArg 'void (int)'
| |-ParmVarDecl 0x55ec704e9438 <col:16, col:24> col:20 used d 'int' cinit
| | `-IntegerLiteral 0x55ec704e9db0 <col:24> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55ec704e9eb0 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55ec704e9ce0 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x55ec704e9e70 <line:1312:27> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55ec704e9e30 <col:27> 'int' lvalue ParmVar 0x55ec704e9438 'd' 'int'
| `-CompoundStmt 0x55ec704e9f20 <col:30, line:1313:5>
|-CXXMethodDecl 0x55ec704e9758 <line:1314:5, col:99> col:10 parse_saturating 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x55ec704e95c8 <col:27, col:41> col:41 str 'const String &'
| |-ParmVarDecl 0x55ec704e9640 <col:46, col:56> col:56 result 'uint32_t &'
| `-ParmVarDecl 0x55ec704e96b8 <col:64, col:89> col:82 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55ec704e9dd0 <col:89> 'const ArgContext' lvalue Var 0x55ec704ced10 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55ec704e99b0 <line:1315:5, col:88> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x55ec704e9820 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55ec704e9898 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x55ec704e9910 <col:53, col:78> col:71 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55ec704e9df0 <col:78> 'const ArgContext' lvalue Var 0x55ec704ced10 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55ec704e9c10 <line:1317:5, col:86> col:10 parse 'bool (const String &, double &, const ArgContext &)'
| |-ParmVarDecl 0x55ec704e9a78 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55ec704e9af8 <col:35, col:43> col:43 result 'double &'
| `-ParmVarDecl 0x55ec704e9b70 <col:51, col:76> col:69 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55ec704e9e10 <col:76> 'const ArgContext' lvalue Var 0x55ec704ced10 'blank_args' 'const ArgContext'
|-FieldDecl 0x55ec704e9ce0 <line:1319:5, col:9> col:9 referenced fraction_digits 'int'
|-FieldDecl 0x55ec704e9d48 <line:1320:5, col:9> col:9 referenced status 'int'
|-CXXConstructorDecl 0x55ec705238e8 <line:1310:7> col:7 implicit constexpr SecondsArg 'void (const SecondsArg &)' inline default trivial noexcept-unevaluated 0x55ec705238e8
| `-ParmVarDecl 0x55ec705239f8 <col:7> col:7 'const SecondsArg &'
|-CXXConstructorDecl 0x55ec70523a98 <col:7> col:7 implicit used constexpr SecondsArg 'void (SecondsArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec70523ba8 <col:7> col:7 used 'SecondsArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55ec705243f0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55ec705243c0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55ec70524390 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ec70524360 <col:7> 'SecondsArg' lvalue ParmVar 0x55ec70523ba8 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x55ec704e9ce0 'fraction_digits' 'int'
| | `-ImplicitCastExpr 0x55ec705244e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ec705244b8 <col:7> 'int' xvalue .fraction_digits 0x55ec704e9ce0
| |     `-CXXStaticCastExpr 0x55ec70524488 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ec70524458 <col:7> 'SecondsArg' lvalue ParmVar 0x55ec70523ba8 '' 'SecondsArg &&'
| |-CXXCtorInitializer Field 0x55ec704e9d48 'status' 'int'
| | `-ImplicitCastExpr 0x55ec705245b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ec70524588 <col:7> 'int' xvalue .status 0x55ec704e9d48
| |     `-CXXStaticCastExpr 0x55ec70524558 <col:7> 'SecondsArg' xvalue static_cast<class SecondsArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ec70524528 <col:7> 'SecondsArg' lvalue ParmVar 0x55ec70523ba8 '' 'SecondsArg &&'
| `-CompoundStmt 0x55ec70524610 <col:7>
`-CXXDestructorDecl 0x55ec70523c70 <col:7> col:7 implicit referenced ~SecondsArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.SecondsArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.SecondsArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec7013c480 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec7013c598 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55ec7013c628 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55ec7013c6f8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55ec7013c7e0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7013c9f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ec7013c8a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013cba8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ec7013cab0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ec7013ccf0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ec7013cc60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ec7013ce38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ec7013cda8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013cf80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ec7013cef0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013d048 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55ec7013d190 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55ec7013d100 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ec7013d258 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55ec7013d3a0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55ec7013d310 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ec7013d518 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ec7013d458 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013d660 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ec7013d5d0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013d728 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55ec7013d8e8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ec7013d7d8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ec7013d850 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013db38 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ec7013d9a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec7013da20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec7013dbe8 <col:86> "" ""
|-CXXMethodDecl 0x55ec7013de58 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55ec7013dcc8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55ec7013dd40 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013e008 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ec7013df18 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ec7013e1b8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ec7013e0c0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ec7013e488 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ec7013e270 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ec7013e2e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ec7013e360 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013e768 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ec7013e550 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ec7013e5c8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec7013e640 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec7013e820 <col:115> "" ""
|-AccessSpecDecl 0x55ec7013e890 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55ec7013e8c8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec7013fde0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ec7013fde0
| `-ParmVarDecl 0x55ec7013fee8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55ec7013ff88 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ec7013ff88
| `-ParmVarDecl 0x55ec70140098 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55ec701756c8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec703674c0 <col:7>
|-CXXConstructorDecl 0x55ec701757a0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ec701757a0
| `-ParmVarDecl 0x55ec701758b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55ec70175928 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ec70175928
| `-ParmVarDecl 0x55ec70175a38 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55ec70369ec0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70356068 prev 0x55ec7034b270 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec70356160 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55ec70356250 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55ec70356378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55ec703564f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55ec70356678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55ec703567f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55ec70367628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ec70367e98 <col:11>
|-CXXDestructorDecl 0x55ec70367700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec70367838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ec70367838
| `-ParmVarDecl 0x55ec70367948 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55ec703679e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ec703679e8
| `-ParmVarDecl 0x55ec70367af8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55ec7036a8b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec7036a9c8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55ec7036ac48 <col:11>
|   `-ReturnStmt 0x55ec7036ac38 <col:11>
|     `-UnaryOperator 0x55ec7036ac20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ec7036ac10 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55ec7036aa38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ec7036aa38
  `-ParmVarDecl 0x55ec7036ab48 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70356860 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec70356978 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55ec70356a18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55ec70356a80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55ec70356ae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55ec70356b50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55ec70356bb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55ec70356c70 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55ec70356cd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55ec70356d30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55ec70367538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55ec70356a18 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55ec70367ea8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55ec70367f00 <col:12>
|-CXXConstructorDecl 0x55ec70367b68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ec70367b68
| `-ParmVarDecl 0x55ec70367c78 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55ec70367d18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ec70367d18
| `-ParmVarDecl 0x55ec70367e28 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55ec70369fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec70344980 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec70344a98 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55ec70344b28 <col:16, col:22> col:16 public
|-EnumDecl 0x55ec70344b50 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55ec70344c50 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55ec70344d30 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70344c30 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55ec70344c10 <col:21> 'int' 28
| `-EnumConstantDecl 0x55ec70344ce0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55ec70344d48 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70344cc0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55ec70344ca0 <col:22> 'int' 64
|-CXXMethodDecl 0x55ec70345088 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55ec70344d70 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec70344df0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55ec70344e68 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec70344ee0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec70345148 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ec70345348 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55ec703451c0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55ec70345238 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec703453f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ec70345558 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55ec70345468 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec70345600 <col:72> warn_unused_result ""
|-TypedefDecl 0x55ec70345960 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55ec703458f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55ec70345890 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55ec70345850 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55ec6fe19520 'void'
|       |-PointerType 0x55ec700c4d20 'unsigned char *'
|       | `-BuiltinType 0x55ec6fe19620 'unsigned char'
|       |-TypedefType 0x55ec6fec12f0 'size_t' sugar
|       | |-Typedef 0x55ec6fe89ce0 'size_t'
|       | `-BuiltinType 0x55ec6fe19680 'unsigned long'
|       `-PointerType 0x55ec6fe19d20 'void *'
|         `-BuiltinType 0x55ec6fe19520 'void'
|-CXXMethodDecl 0x55ec70345dd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55ec703459d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55ec70345a48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec70345ae0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55ec70345b60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55ec703604d0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55ec703604b8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55ec70360480 <col:58> 'int' 0
| |-ParmVarDecl 0x55ec70345be0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55ec703604f8 <col:76> 'int' 0
| |-ParmVarDecl 0x55ec70345c60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55ec70360518 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55ec70345ea8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55ec70345f28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ec70345fe8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55ec70346088 <col:20>
| `-OptimizeNoneAttr 0x55ec703460e0 <col:30>
|-CXXMethodDecl 0x55ec70346158 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55ec703461f8 <col:20>
| `-OptimizeNoneAttr 0x55ec70346250 <col:30>
|-CXXMethodDecl 0x55ec703462c8 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55ec70346368 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55ec70346418 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55ec703464b8 <col:20>
| |-OptimizeNoneAttr 0x55ec70346510 <col:30>
| `-WarnUnusedResultAttr 0x55ec70346538 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55ec70346590 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ec70346630 <col:20>
| `-OptimizeNoneAttr 0x55ec70346688 <col:30>
|-CXXMethodDecl 0x55ec703466d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ec70346778 <col:20>
| `-OptimizeNoneAttr 0x55ec703467d0 <col:30>
|-CXXMethodDecl 0x55ec70346818 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55ec703468b8 <col:20>
| `-OptimizeNoneAttr 0x55ec70346910 <col:30>
|-CXXMethodDecl 0x55ec70346958 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec70346a18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec70346ae0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ec70346ba8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ec70346c68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec70346d88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55ec703605e0 <col:54, line:99:5>
|   `-ReturnStmt 0x55ec703605d0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55ec703605b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55ec70360588 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ec70357068
|         `-CXXThisExpr 0x55ec70360578 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ec70346f28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55ec70346e38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55ec70360690 <col:67, line:103:5>
|   `-BinaryOperator 0x55ec70360670 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ec70360608 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ec70357068
|     | `-CXXThisExpr 0x55ec703605f8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ec70360658 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70360638 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55ec70346e38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55ec70347020 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55ec70360710 <col:33, line:107:5>
|   `-ReturnStmt 0x55ec70360700 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55ec703606e8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55ec703606b8 <col:16> 'void *' lvalue ->_destructor_argument 0x55ec703570d0
|         `-CXXThisExpr 0x55ec703606a8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ec703470e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55ec70360d40 <col:25, line:113:5>
|   |-ParenExpr 0x55ec70360a88 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55ec70360a58 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55ec703607c8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ec703607a0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55ec70360768 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55ec70360738 <col:24> '<bound member function type>' ->shared 0x55ec70346158
|   |   |       `-ImplicitCastExpr 0x55ec70360788 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55ec70360728 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ec70360828 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70360808 <col:42> 'int' 0
|   |   `-CallExpr 0x55ec703609b8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55ec703609a0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70360980 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec703609f8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70360898 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55ec70360a10 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703608c0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70360a28 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec703608f8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55ec70360a40 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70360968 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70360950 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70360918 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55ec70360c88 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55ec70360ab8 <col:2> 'unsigned char *' lvalue ->_head 0x55ec70356e70
|   | | `-CXXThisExpr 0x55ec70360aa8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55ec70360c70 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55ec70360c50 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55ec70360af8 <col:10> 'unsigned char *' lvalue ->_data 0x55ec70356ed8
|   |     | `-CXXThisExpr 0x55ec70360ae8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55ec70360c38 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55ec70360c18 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55ec70360b38 <col:18> 'unsigned char *' lvalue ->_tail 0x55ec70356f40
|   |         | `-CXXThisExpr 0x55ec70360b28 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55ec70360c00 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55ec70360be0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55ec70360b78 <col:26> 'unsigned char *' lvalue ->_end 0x55ec70356fa8
|   |             | `-CXXThisExpr 0x55ec70360b68 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55ec70360bc8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55ec70360ba8 <col:33> 'int' 0
|   `-BinaryOperator 0x55ec70360d20 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ec70360cb8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ec70357068
|     | `-CXXThisExpr 0x55ec70360ca8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ec70360d08 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55ec70360ce8 <col:16> 'int' 0
|-CXXMethodDecl 0x55ec70347220 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ec70347190 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec703472c8 <col:20>
| |-OptimizeNoneAttr 0x55ec70347320 <col:30>
| `-WarnUnusedResultAttr 0x55ec70347348 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ec70347418 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ec70347388 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec703474c0 <col:20>
| |-OptimizeNoneAttr 0x55ec70347518 <col:30>
| `-WarnUnusedResultAttr 0x55ec70347540 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55ec70347678 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ec70347580 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec70347720 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55ec70347820 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55ec70347790 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec703478c8 <col:20>
| `-OptimizeNoneAttr 0x55ec70347920 <col:30>
|-CXXMethodDecl 0x55ec703479e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ec70347958 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec70347a90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55ec70347b90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ec70347b00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ec70347c38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ec70347d38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55ec70347ca8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec70347de0 <col:20>
| `-OptimizeNoneAttr 0x55ec70347e38 <col:30>
|-CXXMethodDecl 0x55ec70347fc8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55ec70347e78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55ec70347ef0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55ec70360538 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55ec70348078 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55ec70348278 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ec703480f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55ec70348168 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70348488 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ec70348338 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ec703483b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70348698 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55ec70348548 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55ec703485c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55ec70360548 <col:39> 'int' 0
|-CXXMethodDecl 0x55ec70348768 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55ec70348830 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ec703488f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ec703489b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec70348a80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55ec70348bc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55ec70348b38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55ec70348d98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ec70348c88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55ec70348d00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70348e68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55ec70348f28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55ec70348fc8 <col:20>
| `-OptimizeNoneAttr 0x55ec70349020 <col:30>
|-CXXMethodDecl 0x55ec70349070 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ec70349110 <col:20>
| `-OptimizeNoneAttr 0x55ec70349168 <col:30>
|-CXXMethodDecl 0x55ec703491b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ec70349278 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec70349340 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55ec703493e0 <col:20>
| `-OptimizeNoneAttr 0x55ec70349438 <col:30>
|-CXXMethodDecl 0x55ec70349588 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ec70349478 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55ec703494f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec703496d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55ec70349648 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec703497b0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55ec70349870 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55ec70349910 <col:20>
| `-OptimizeNoneAttr 0x55ec70349968 <col:30>
|-CXXMethodDecl 0x55ec703499b8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ec70349a58 <col:20>
| `-OptimizeNoneAttr 0x55ec70349ab0 <col:30>
|-CXXMethodDecl 0x55ec70349b00 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ec70349bc8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55ec70349c68 <col:20>
| `-OptimizeNoneAttr 0x55ec70349cc0 <col:30>
|-CXXMethodDecl 0x55ec70349d08 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55ec70349e28 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55ec70349f98 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55ec70349ed8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55ec7034a088 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55ec7034a128 <col:20>
| `-OptimizeNoneAttr 0x55ec7034a180 <col:30>
|-CXXMethodDecl 0x55ec7034a1d0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ec7034a290 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ec7034a4c8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55ec7034a340 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55ec7034a3b8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec7034a578 <col:20>
| `-OptimizeNoneAttr 0x55ec7034a5d0 <col:30>
|-CXXMethodDecl 0x55ec7034a678 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55ec7034a718 <col:20>
| `-OptimizeNoneAttr 0x55ec7034a770 <col:30>
|-CXXMethodDecl 0x55ec7034a7c0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55ec7034a860 <col:20>
| `-OptimizeNoneAttr 0x55ec7034a8b8 <col:30>
|-CXXMethodDecl 0x55ec7034a900 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55ec7034a9a0 <col:20>
| `-OptimizeNoneAttr 0x55ec7034a9f8 <col:30>
|-CXXMethodDecl 0x55ec7034aaf8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55ec7034aa30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55ec7034aba0 <col:20>
| `-OptimizeNoneAttr 0x55ec7034abf8 <col:30>
|-CXXMethodDecl 0x55ec7034adb8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55ec7034ac30 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55ec7034aca8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec7034ae68 <col:20>
| `-OptimizeNoneAttr 0x55ec7034aec0 <col:30>
|-CXXMethodDecl 0x55ec7034af68 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55ec7034b088 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55ec7034b1a8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55ec7034b248 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55ec7034b270 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55ec7034b398 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55ec7034b438 <col:20>
| `-OptimizeNoneAttr 0x55ec7034b490 <col:30>
|-CXXMethodDecl 0x55ec7034b538 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55ec7034b5d8 <col:20>
| `-OptimizeNoneAttr 0x55ec7034b630 <col:30>
|-AccessSpecDecl 0x55ec7034b658 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55ec7034b680 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55ec7034b780 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55ec7034b7d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7034b760 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55ec7034b740 <col:14> 'int' 48
|-CXXMethodDecl 0x55ec7034b838 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55ec7034b8d8 <col:20>
| `-OptimizeNoneAttr 0x55ec7034b930 <col:30>
|-CXXMethodDecl 0x55ec7034b9a8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55ec7034ba48 <col:20>
| `-OptimizeNoneAttr 0x55ec7034baa0 <col:30>
|-CXXMethodDecl 0x55ec7034bb68 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55ec7034bad8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55ec7034bd08 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55ec7034bea8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55ec7034bdb8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55ec7034bf50 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55ec7034c050 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c400 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c030 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec7034c010 <col:9> 'int' 0
| |-EnumConstantDecl 0x55ec7034c0e0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c418 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c0c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55ec7034c0a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ec7034c170 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c430 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c150 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55ec7034c130 <col:14> 'int' 2
| |-EnumConstantDecl 0x55ec7034c200 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c448 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c1e0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55ec7034c1c0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55ec7034c290 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c460 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c270 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55ec7034c250 <col:13> 'int' 4
| |-EnumConstantDecl 0x55ec7034c320 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ec7034c478 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034c300 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55ec7034c2e0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55ec7034c3b0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55ec7034c490 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7034c390 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55ec7034c370 <col:14> 'int' 6
|-CXXMethodDecl 0x55ec7034c4f8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55ec7034c598 <col:20>
| `-OptimizeNoneAttr 0x55ec7034c5f0 <col:30>
|-CXXMethodDecl 0x55ec7034c6e8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55ec7034c628 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55ec7034c790 <col:20>
| `-OptimizeNoneAttr 0x55ec7034c7e8 <col:30>
|-CXXMethodDecl 0x55ec7034c858 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55ec7034c980 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55ec7034caf8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55ec7034ca30 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55ec7034cbc0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55ec7034cc88 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55ec7034cdc8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55ec7034cd38 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55ec7034ce70 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55ec7034cf70 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ec7034d170 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034cf50 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec7034cf30 <col:23> 'int' 0
| |-EnumConstantDecl 0x55ec7034d000 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ec7034d188 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034cfe0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55ec7034cfc0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55ec7034d090 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ec7034d1a0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034d070 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec7034d050 <col:24> 'int' 0
| `-EnumConstantDecl 0x55ec7034d120 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55ec7034d1b8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec7034d100 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55ec7034d0e0 <col:47> 'int' 16
|-CXXMethodDecl 0x55ec7034d218 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55ec7034d388 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55ec7034d2c8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55ec7034d430 <col:20>
| `-OptimizeNoneAttr 0x55ec7034d488 <col:30>
|-CXXMethodDecl 0x55ec7034d4d8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55ec70360e60 <col:18, col:36>
|   `-ReturnStmt 0x55ec70360e50 <col:20, col:33>
|     `-ImplicitCastExpr 0x55ec70360e38 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ec70360e18 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55ec70360de8 <col:27> '<bound member function type>' ->xanno 0x55ec7034b538
|           `-CXXThisExpr 0x55ec70360dd8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55ec7034d5d0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55ec70360f70 <col:30, col:48>
|   `-ReturnStmt 0x55ec70360f60 <col:32, col:45>
|     `-ImplicitCastExpr 0x55ec70360f48 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ec70360f28 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55ec70360ef8 <col:39> '<bound member function type>' ->xanno 0x55ec7034b398
|           `-CXXThisExpr 0x55ec70360ee8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ec7034d6b8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55ec70361108 <col:24, col:50>
|   `-ReturnStmt 0x55ec703610f8 <col:26, col:47>
|     `-UnaryOperator 0x55ec703610e0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ec703610c0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ec703610a8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ec70361058 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55ec70356378
|         |   `-CXXMemberCallExpr 0x55ec70361038 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ec70361008 <col:34> '<bound member function type>' ->xanno 0x55ec7034b538
|         |       `-CXXThisExpr 0x55ec70360ff8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ec70361088 <col:46> 'int' 0
|-CXXMethodDecl 0x55ec7034d7c0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55ec703612d8 <col:36, col:62>
|   `-ReturnStmt 0x55ec703612c8 <col:38, col:59>
|     `-UnaryOperator 0x55ec703612b0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ec70361290 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ec70361278 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ec703611f0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55ec70356378
|         |   `-CXXMemberCallExpr 0x55ec703611d0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ec703611a0 <col:46> '<bound member function type>' ->xanno 0x55ec7034b398
|         |       `-CXXThisExpr 0x55ec70361190 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ec70361220 <col:58> 'int' 0
|-CXXMethodDecl 0x55ec7034d8d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55ec70361470 <col:26, col:53>
|   `-ReturnStmt 0x55ec70361460 <col:28, col:50>
|     `-UnaryOperator 0x55ec70361448 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ec70361428 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ec70361410 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ec703613c0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55ec70356678
|         |   `-CXXMemberCallExpr 0x55ec703613a0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ec70361370 <col:36> '<bound member function type>' ->xanno 0x55ec7034b538
|         |       `-CXXThisExpr 0x55ec70361360 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ec703613f0 <col:49> 'int' 0
|-CXXMethodDecl 0x55ec7034d9f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55ec70361648 <col:38, col:65>
|   `-ReturnStmt 0x55ec70361638 <col:40, col:62>
|     `-UnaryOperator 0x55ec70361620 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ec70361600 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ec703615e8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ec70361558 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55ec70356678
|         |   `-CXXMemberCallExpr 0x55ec70361538 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ec70361508 <col:48> '<bound member function type>' ->xanno 0x55ec7034b398
|         |       `-CXXThisExpr 0x55ec703614f8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ec70361588 <col:61> 'int' 0
|-CXXMethodDecl 0x55ec7034dba8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55ec7034dab0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55ec70361d18 <col:34, line:463:5>
|   |-ParenExpr 0x55ec70361b60 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ec70361b30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70361798 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70361768 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec703616b8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec703616a0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70361660 <col:23> 'int' lvalue ParmVar 0x55ec7034dab0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70361680 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70361748 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70361718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec703616d8 <col:33> 'int' lvalue ParmVar 0x55ec7034dab0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ec70361730 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ec703616f8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ec703617f8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec703617d8 <col:56> 'int' 0
|   |   `-CallExpr 0x55ec70361a90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ec70361a78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70361a58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70361ad0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703618e8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ec70361ae8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70361918 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70361b00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70361950 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55ec70361b18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70361a40 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70361a28 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec703619e8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55ec70361d08 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55ec70361cf0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55ec70361cd0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ec70361ca0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ec70361c50 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55ec70356378
|         |   `-CXXMemberCallExpr 0x55ec70361c30 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ec70361c00 <col:9> '<bound member function type>' ->xanno 0x55ec7034b398
|         |       `-CXXThisExpr 0x55ec70361bf0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55ec70361cb8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55ec70361c80 <col:21> 'int' lvalue ParmVar 0x55ec7034dab0 'i' 'int'
|-CXXMethodDecl 0x55ec7034ddf8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55ec7034dc68 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55ec7034dce0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ec703623a8 <col:40, line:472:5>
|   |-ParenExpr 0x55ec703621c0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ec70362190 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70361e70 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70361e40 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70361d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70361d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70361d38 <col:23> 'int' lvalue ParmVar 0x55ec7034dc68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70361d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70361e20 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70361df0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70361db0 <col:33> 'int' lvalue ParmVar 0x55ec7034dc68 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ec70361e08 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ec70361dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ec70361ed0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70361eb0 <col:56> 'int' 0
|   |   `-CallExpr 0x55ec703620f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ec703620d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec703620b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70362130 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70361f40 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ec70362148 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70361f70 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70362160 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70361fa8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55ec70362178 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec703620a0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70362088 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70362048 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55ec70362388 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55ec70362330 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55ec70362300 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55ec703622b0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55ec70356378
|     | |   `-CXXMemberCallExpr 0x55ec70362290 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55ec70362260 <col:2> '<bound member function type>' ->xanno 0x55ec7034b538
|     | |       `-CXXThisExpr 0x55ec70362250 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55ec70362318 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ec703622e0 <col:14> 'int' lvalue ParmVar 0x55ec7034dc68 'i' 'int'
|     `-ImplicitCastExpr 0x55ec70362370 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70362350 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ec7034dce0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55ec7034dfb8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55ec7034dec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ec70362b28 <col:36, line:485:5>
|   |-ParenExpr 0x55ec70362890 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec70362860 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70362540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70362510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70362420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70362408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec703623c8 <col:23> 'int' lvalue ParmVar 0x55ec7034dec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec703623e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec703624f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec703624d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70362440 <col:33> 'int' lvalue ParmVar 0x55ec7034dec0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec703624b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec703624a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70362460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70362480 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ec703625a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70362580 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec703627c0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec703627a8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70362788 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70362800 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70362610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ec70362818 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70362648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70362830 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70362680 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55ec70362848 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70362770 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70362758 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70362718 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55ec70362b18 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55ec70362b00 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55ec70362ae8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70362ab8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55ec70362a58 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec70362a28 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec703629a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70362980 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70362950 <col:61> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70362940 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec70362a40 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec703629d0 <col:74> 'int' lvalue ParmVar 0x55ec7034dec0 'i' 'int'
|-CXXMethodDecl 0x55ec7034e208 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55ec7034e078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ec7034e0f0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55ec70363278 <col:42, line:500:5>
|   |-ParenExpr 0x55ec70363010 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec70362fe0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70362cc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70362c90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70362ba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70362b88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70362b48 <col:23> 'int' lvalue ParmVar 0x55ec7034e078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70362b68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70362c70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70362c58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70362bc0 <col:33> 'int' lvalue ParmVar 0x55ec7034e078 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70362c38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70362c20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70362be0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70362c00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ec70362d20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70362d00 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70362f40 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70362f28 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70362f08 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70362f80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70362d90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ec70362f98 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70362dc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70362fb0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70362e00 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55ec70362fc8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70362ef0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70362ed8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70362e98 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55ec70363258 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55ec70363208 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ec703631d8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ec70363180 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ec70363150 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ec70363100 <col:48, col:57> 'char [48]' lvalue ->c 0x55ec70356250
|     |     |   `-CXXMemberCallExpr 0x55ec703630e0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ec703630b0 <col:48> '<bound member function type>' ->xanno 0x55ec7034b538
|     |     |       `-CXXThisExpr 0x55ec703630a0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ec70363168 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec70363130 <col:61> 'int' lvalue ParmVar 0x55ec7034e078 'i' 'int'
|     `-ImplicitCastExpr 0x55ec70363240 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70363220 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55ec7034e0f0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55ec7034e3c8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55ec7034e2d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ec703639d8 <col:35, line:513:5>
|   |-ParenExpr 0x55ec703636e8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec703636b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70363410 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec703633e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec703632f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec703632d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70363298 <col:23> 'int' lvalue ParmVar 0x55ec7034e2d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec703632b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec703633c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec703633a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70363310 <col:33> 'int' lvalue ParmVar 0x55ec7034e2d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70363388 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70363370 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70363330 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70363350 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ec70363470 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70363450 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70363618 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70363600 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec703635e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70363658 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703634e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ec70363670 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70363518 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70363688 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70363550 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55ec703636a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec703635c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec703635b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70363570 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55ec703639c8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55ec703639b0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55ec70363998 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70363968 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55ec703638e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec703638b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec70363860 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70363840 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70363810 <col:60> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70363800 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec703638c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec70363890 <col:73> 'int' lvalue ParmVar 0x55ec7034e2d0 'i' 'int'
|-CXXMethodDecl 0x55ec7034e618 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55ec7034e488 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ec7034e500 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55ec703640f8 <col:41, line:528:5>
|   |-ParenExpr 0x55ec70363e80 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec70363e50 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70363b70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70363b40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70363a50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70363a38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec703639f8 <col:23> 'int' lvalue ParmVar 0x55ec7034e488 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70363a18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70363b20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70363b08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70363a70 <col:33> 'int' lvalue ParmVar 0x55ec7034e488 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70363ae8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70363ad0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70363a90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70363ab0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ec70363bd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70363bb0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70363db0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70363d98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70363d78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70363df0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70363c40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ec70363e08 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70363c78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70363e20 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70363cb0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55ec70363e38 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70363d60 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70363d48 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70363d08 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55ec703640d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55ec70364088 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ec70364058 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ec70364000 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ec70363fc0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ec70363f70 <col:47, col:56> 'char [48]' lvalue ->c 0x55ec70356250
|     |     |   `-CXXMemberCallExpr 0x55ec70363f50 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ec70363f20 <col:47> '<bound member function type>' ->xanno 0x55ec7034b538
|     |     |       `-CXXThisExpr 0x55ec70363f10 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ec70363fd8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec70363fa0 <col:60> 'int' lvalue ParmVar 0x55ec7034e488 'i' 'int'
|     `-ImplicitCastExpr 0x55ec703640c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55ec703640a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55ec7034e500 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55ec7034e7d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55ec7034e6e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ec703647c8 <col:36, line:541:5>
|   |-ParenExpr 0x55ec70364568 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec70364538 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70364290 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70364260 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70364170 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70364158 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70364118 <col:23> 'int' lvalue ParmVar 0x55ec7034e6e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70364138 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70364240 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70364228 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70364190 <col:33> 'int' lvalue ParmVar 0x55ec7034e6e0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70364208 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec703641f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec703641b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec703641d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ec703642f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec703642d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70364498 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70364480 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70364460 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec703644d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70364360 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ec703644f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70364398 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70364508 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec703643d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55ec70364520 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70364448 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70364430 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec703643f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55ec703647b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55ec703647a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55ec70364788 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70364758 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55ec70364700 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec703646d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec70364680 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70364660 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70364630 <col:61> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70364620 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec703646e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec703646b0 <col:74> 'int' lvalue ParmVar 0x55ec7034e6e0 'i' 'int'
|-CXXMethodDecl 0x55ec7034e9a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55ec7034e898 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55ec7034e910 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ec7034ea58 <col:20>
| `-OptimizeNoneAttr 0x55ec7034eab0 <col:30>
|-CXXMethodDecl 0x55ec7034ebe8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55ec7034eaf0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ec70364e98 <col:35, line:562:5>
|   |-ParenExpr 0x55ec70364c38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec70364c08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70364960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70364930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70364840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70364828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec703647e8 <col:23> 'int' lvalue ParmVar 0x55ec7034eaf0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70364808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70364910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec703648f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70364860 <col:33> 'int' lvalue ParmVar 0x55ec7034eaf0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec703648d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec703648c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70364880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec703648a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ec703649c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec703649a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70364b68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70364b50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70364b30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70364ba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70364a30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ec70364bc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70364a68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70364bd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70364aa0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55ec70364bf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70364b18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70364b00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70364ac0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55ec70364e88 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55ec70364e70 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55ec70364e58 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70364e28 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55ec70364dd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec70364da0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec70364d50 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70364d30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70364d00 <col:60> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70364cf0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec70364db8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec70364d80 <col:73> 'int' lvalue ParmVar 0x55ec7034eaf0 'i' 'int'
|-CXXMethodDecl 0x55ec7034edf8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55ec7034eca8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ec7034ed20 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55ec70365578 <col:41, line:577:5>
|   |-ParenExpr 0x55ec70365308 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec703652d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70365030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70365000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70364f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70364ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70364eb8 <col:23> 'int' lvalue ParmVar 0x55ec7034eca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70364ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70364fe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70364fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70364f30 <col:33> 'int' lvalue ParmVar 0x55ec7034eca8 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70364fa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70364f90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70364f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70364f70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ec70365090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70365070 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70365238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70365220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70365200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70365278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70365100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ec70365290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70365138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec703652a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70365170 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55ec703652c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec703651e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec703651d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70365190 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55ec70365558 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55ec70365508 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ec703654d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55ec70365478 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ec70365448 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ec703653f8 <col:47, col:56> 'char [48]' lvalue ->c 0x55ec70356250
|     |     |   `-CXXMemberCallExpr 0x55ec703653d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ec703653a8 <col:47> '<bound member function type>' ->xanno 0x55ec7034b538
|     |     |       `-CXXThisExpr 0x55ec70365398 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ec70365460 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec70365428 <col:60> 'int' lvalue ParmVar 0x55ec7034eca8 'i' 'int'
|     `-ImplicitCastExpr 0x55ec70365540 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70365520 <col:65> 'int32_t':'int' lvalue ParmVar 0x55ec7034ed20 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55ec7034efb8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55ec7034eec0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ec70365ca8 <col:36, line:591:5>
|   |-ParenExpr 0x55ec703659e8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec703659b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70365710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec703656e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec703655f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec703655d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70365598 <col:23> 'int' lvalue ParmVar 0x55ec7034eec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec703655b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec703656c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec703656a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70365610 <col:33> 'int' lvalue ParmVar 0x55ec7034eec0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70365688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70365670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70365630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70365650 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ec70365770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70365750 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70365918 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70365900 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec703658e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70365958 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703657e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ec70365970 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70365818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70365988 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70365850 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55ec703659a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec703658c8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec703658b0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70365870 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55ec70365c98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55ec70365c80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55ec70365c68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70365c38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55ec70365bb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec70365b80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec70365b30 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70365b10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70365ae0 <col:61> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70365ad0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec70365b98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec70365b60 <col:74> 'int' lvalue ParmVar 0x55ec7034eec0 'i' 'int'
|-CXXMethodDecl 0x55ec7034f208 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55ec7034f078 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ec7034f0f0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55ec70366388 <col:42, line:606:5>
|   |-ParenExpr 0x55ec70366118 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ec703660e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70365e40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70365e10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70365d20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70365d08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70365cc8 <col:23> 'int' lvalue ParmVar 0x55ec7034f078 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70365ce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70365df0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ec70365dd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70365d40 <col:33> 'int' lvalue ParmVar 0x55ec7034f078 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70365db8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70365da0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70365d60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ec70365d80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ec70365ea0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70365e80 <col:60> 'int' 0
|   |   `-CallExpr 0x55ec70366048 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ec70366030 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70366010 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec70366088 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70365f10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ec703660a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70365f48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec703660b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70365f80 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55ec703660d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70365ff8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70365fe0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70365fa0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55ec70366368 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55ec70366318 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ec703662e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55ec70366288 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ec70366258 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ec70366208 <col:48, col:57> 'char [48]' lvalue ->c 0x55ec70356250
|     |     |   `-CXXMemberCallExpr 0x55ec703661e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ec703661b8 <col:48> '<bound member function type>' ->xanno 0x55ec7034b538
|     |     |       `-CXXThisExpr 0x55ec703661a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ec70366270 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec70366238 <col:61> 'int' lvalue ParmVar 0x55ec7034f078 'i' 'int'
|     `-ImplicitCastExpr 0x55ec70366350 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55ec70366330 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55ec7034f0f0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55ec7034f3a0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55ec7034f2d0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55ec70366bf8 <col:33, line:620:5>
|   |-ParenExpr 0x55ec70366970 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ec70366940 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70366590 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70366560 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70366400 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec703663e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec703663a8 <col:23> 'int' lvalue ParmVar 0x55ec7034f2d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec703663c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70366540 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ec70366528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70366420 <col:33> 'int' lvalue ParmVar 0x55ec7034f2d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70366508 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec703664f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70366440 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ec703664c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ec703664b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ec70366478 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ec703665f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec703665d0 <col:79> 'int' 0
|   |   `-CallExpr 0x55ec703668a0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ec70366888 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70366868 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec703668e0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec703666d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ec703668f8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70366720 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70366910 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70366758 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55ec70366928 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70366850 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70366838 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec703667f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55ec70366be8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55ec70366bd0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55ec70366bb8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ec70366b88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55ec70366b00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ec70366ad0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ec70366a80 <col:67, col:76> 'char const[48]' lvalue ->c 0x55ec70356250
|             |   `-CXXMemberCallExpr 0x55ec70366a60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ec70366a30 <col:67> '<bound member function type>' ->xanno 0x55ec7034b398
|             |       `-CXXThisExpr 0x55ec70366a20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ec70366ae8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ec70366ab0 <col:80> 'int' lvalue ParmVar 0x55ec7034f2d0 'i' 'int'
|-CXXMethodDecl 0x55ec7034f5b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55ec7034f460 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ec7034f4e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55ec70367420 <col:45, line:635:5>
|   |-ParenExpr 0x55ec70367168 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ec70367138 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ec70366e00 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ec70366dd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ec70366c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ec70366c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ec70366c18 <col:23> 'int' lvalue ParmVar 0x55ec7034f460 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ec70366c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ec70366db0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ec70366d98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ec70366c90 <col:33> 'int' lvalue ParmVar 0x55ec7034f460 'i' 'int'
|   |   |     `-BinaryOperator 0x55ec70366d78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ec70366d60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ec70366cb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ec7034b780 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ec70366d38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ec70366d20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ec70366ce8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ec70366e60 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ec70366e40 <col:79> 'int' 0
|   |   `-CallExpr 0x55ec70367098 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ec70367080 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ec70367060 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ec6feb8050 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ec703670d8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70366ed0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ec703670f0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ec70366f18 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ec70367108 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ec70366f50 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55ec70367120 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ec70367048 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ec70367030 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ec70366fe8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55ec70367400 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55ec70367368 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ec70367338 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55ec703672d8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ec703672a8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ec70367258 <col:54, col:63> 'char [48]' lvalue ->c 0x55ec70356250
|     |     |   `-CXXMemberCallExpr 0x55ec70367238 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ec70367208 <col:54> '<bound member function type>' ->xanno 0x55ec7034b538
|     |     |       `-CXXThisExpr 0x55ec703671f8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ec703672c0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ec70367288 <col:67> 'int' lvalue ParmVar 0x55ec7034f460 'i' 'int'
|     `-CXXConstCastExpr 0x55ec703673d0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55ec703673b8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55ec70367380 <col:91> 'const void *' lvalue ParmVar 0x55ec7034f4e0 'x' 'const void *'
|-CXXMethodDecl 0x55ec7034f688 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55ec703674a8 <col:34, line:640:5>
|   `-ReturnStmt 0x55ec70367498 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55ec70367480 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55ec70367450 <col:16> 'Packet *' lvalue ->_data_packet 0x55ec70356e08
|         `-CXXThisExpr 0x55ec70367440 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ec7034f7c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55ec7034f738 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec70360568 <col:46> 'bool' true
|-CXXMethodDecl 0x55ec7034f948 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55ec7034f880 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55ec7034f9f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55ec703501a0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55ec7034faf0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350210 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fad0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55ec7034fab0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ec70344c50 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ec7034fb80 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350228 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fb60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55ec7034fb40 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ec70344ce0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ec7034fc10 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350240 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fbf0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ec7034fbd0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ec7034fca0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350258 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fc80 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55ec7034fc60 <col:19> 'int' 16
| |-EnumConstantDecl 0x55ec7034fd30 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350270 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fd10 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55ec7034fcf0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55ec7034fdc0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec70350288 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fda0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ec7034fd80 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ec7034fe50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec703502a0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fe30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55ec7034fe10 <col:19> 'int' EnumConstant 0x55ec7034fca0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ec7034fee0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec703502b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034fec0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55ec7034fea0 <col:19> 'int' EnumConstant 0x55ec7034fdc0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ec7034ffb0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec703502d0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec7034ff90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55ec7034ff70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ec7034ff30 <col:23> 'int' EnumConstant 0x55ec7034fee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ec7034ff50 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ec70350080 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ec703502e8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ec70350060 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55ec70350040 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ec70350000 <col:23> 'int' EnumConstant 0x55ec7034fee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ec70350020 <col:40> 'int' 4
| `-EnumConstantDecl 0x55ec70350150 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55ec70350300 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec70350130 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55ec70350110 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55ec703500d0 <col:23> 'int' EnumConstant 0x55ec7034fee0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55ec703500f0 <col:40> 'int' 8
|-CXXMethodDecl 0x55ec70350340 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55ec703503e0 <col:68> "" ""
|-CXXMethodDecl 0x55ec70350478 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55ec70350518 <col:45> "" ""
|-CXXMethodDecl 0x55ec703505b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ec70350650 <col:57> "" ""
|-CXXMethodDecl 0x55ec703506e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55ec70350788 <col:45> "" ""
|-CXXMethodDecl 0x55ec70350820 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ec703508c0 <col:57> "" ""
|-CXXMethodDecl 0x55ec70350950 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ec703509f0 <col:51> "" ""
|-CXXMethodDecl 0x55ec70350a80 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ec70350b20 <col:63> "" ""
|-CXXMethodDecl 0x55ec70350bb0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ec70350c50 <col:53> "" ""
|-CXXMethodDecl 0x55ec70350ce0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ec70350d80 <col:65> "" ""
|-CXXMethodDecl 0x55ec70350e98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ec70350e08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55ec70350f40 <col:61> "" ""
|-CXXMethodDecl 0x55ec703510d8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ec70350fc8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55ec70351040 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ec70351188 <col:67> "" ""
|-CXXMethodDecl 0x55ec703512a0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ec70351210 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ec70351348 <col:63> "" ""
|-CXXMethodDecl 0x55ec703514e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ec703513d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ec70351448 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ec70351590 <col:69> "" ""
|-CXXMethodDecl 0x55ec703516a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ec70351618 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ec70351750 <col:63> "" ""
|-CXXMethodDecl 0x55ec70353e28 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ec70353d18 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ec70353d90 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec70353ed8 <col:69> "" ""
|-CXXMethodDecl 0x55ec70353ff0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ec70353f60 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55ec70354098 <col:62> "" ""
|-CXXMethodDecl 0x55ec70354230 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ec70354120 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ec70354198 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55ec703542e0 <col:68> "" ""
|-CXXMethodDecl 0x55ec703543f8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55ec70354368 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ec703544a0 <col:63> "" ""
|-CXXMethodDecl 0x55ec70354638 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55ec70354528 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ec703545a0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55ec703546e8 <col:69> "" ""
|-CXXMethodDecl 0x55ec70354778 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ec70354818 <col:64> "" ""
|-CXXMethodDecl 0x55ec703548a8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ec70354948 <col:52> "" ""
|-CXXMethodDecl 0x55ec703549d8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ec70354a78 <col:67> "" ""
|-CXXMethodDecl 0x55ec70354b08 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ec70354ba8 <col:55> "" ""
|-CXXMethodDecl 0x55ec70354cc0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ec70354c30 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ec70354d68 <col:58> "" ""
|-CXXMethodDecl 0x55ec70354f00 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ec70354df0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ec70354e68 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ec70354fb0 <col:62> "" ""
|-CXXMethodDecl 0x55ec703550c8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55ec70355038 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ec70355170 <col:58> "" ""
|-CXXMethodDecl 0x55ec70355308 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55ec703551f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ec70355270 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55ec703553b8 <col:62> "" ""
|-CXXMethodDecl 0x55ec703554d0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ec70355440 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55ec70355578 <col:60> "" ""
|-CXXMethodDecl 0x55ec70355710 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ec70355600 <col:34> col:37 'int'
| |-ParmVarDecl 0x55ec70355678 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ec703557c0 <col:64> "" ""
|-CXXMethodDecl 0x55ec703558d8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ec70355848 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ec70355980 <col:58> "" ""
|-CXXMethodDecl 0x55ec70355b18 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ec70355a08 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ec70355a80 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55ec70355bc8 <col:62> "" ""
|-CXXMethodDecl 0x55ec70355ce0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ec70355c50 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55ec70355d88 <col:59> "" ""
|-CXXMethodDecl 0x55ec70355f20 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ec70355e10 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ec70355e88 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ec70355fd0 <col:63> "" ""
|-AccessSpecDecl 0x55ec70356040 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55ec70356068 prev 0x55ec7034b270 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec70356160 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55ec70356250 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55ec70356378 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55ec703564f8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55ec70356678 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55ec703567f8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55ec70367628 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ec70367e98 <col:11>
| |-CXXDestructorDecl 0x55ec70367700 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55ec70367838 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ec70367838
| | `-ParmVarDecl 0x55ec70367948 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55ec703679e8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ec703679e8
| | `-ParmVarDecl 0x55ec70367af8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55ec7036a8b8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec7036a9c8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55ec7036ac48 <col:11>
| |   `-ReturnStmt 0x55ec7036ac38 <col:11>
| |     `-UnaryOperator 0x55ec7036ac20 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ec7036ac10 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55ec7036aa38 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ec7036aa38
|   `-ParmVarDecl 0x55ec7036ab48 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55ec70356860 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec70356978 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55ec70356a18 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55ec70356a80 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55ec70356ae8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55ec70356b50 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55ec70356bb0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55ec70356c70 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55ec70356cd0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55ec70356d30 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55ec70367538 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55ec70356a18 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55ec70367ea8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55ec70367f00 <col:12>
| |-CXXConstructorDecl 0x55ec70367b68 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ec70367b68
| | `-ParmVarDecl 0x55ec70367c78 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55ec70367d18 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ec70367d18
| | `-ParmVarDecl 0x55ec70367e28 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55ec70369fa0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55ec70356da8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55ec70356e08 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55ec70356e70 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55ec70356ed8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55ec70356f40 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55ec70356fa8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55ec70357008 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55ec70357068 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55ec703570d0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55ec70357158 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55ec70356da8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55ec703674d0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55ec70357008 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55ec70367f10 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55ec70367f70 <col:21, line:755:5>
|-CXXConstructorDecl 0x55ec703572f8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55ec70357238 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55ec703573f0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55ec703575d8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55ec703574e0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55ec703578a8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55ec70357690 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ec70357708 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ec70357780 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70357ac8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55ec70357978 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55ec703579f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55ec703600a8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55ec70357b88 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55ec70357c00 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55ec70357c78 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55ec70360200 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ec70360170 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ec70360348 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ec703602b8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55ec70360440 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct click_ether
         0 |   uint8_t [6] ether_dhost
         6 |   uint8_t [6] ether_shost
        12 |   uint16_t ether_type
           | [sizeof=14, dsize=14, align=1,
           |  nvsize=14, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704392b8 prev 0x55ec70344420 <../dummy_inc/clicknet/ether.h:17:1, line:21:1> line:17:8 referenced struct click_ether definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55ec70439678 <line:21:18>
|-CXXRecordDecl 0x55ec704393b0 <line:17:1, col:8> col:8 implicit struct click_ether
|-FieldDecl 0x55ec70439518 <line:18:5, col:26> col:13 referenced ether_dhost 'uint8_t [6]'
|-FieldDecl 0x55ec704395c8 <line:19:5, col:26> col:13 referenced ether_shost 'uint8_t [6]'
`-FieldDecl 0x55ec70439628 <line:20:5, col:14> col:14 ether_type 'uint16_t':'unsigned short'

Layout: <CGRecordLayout
  LLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  NonVirtualBaseLLVMType:%struct.click_ether = type { [6 x i8], [6 x i8], i16 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >
         0 |   struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt * _element
         8 |   struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** _pprev
        16 |   HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type _bucket
        24 |   const HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashTable_const_iterator<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> >
         0 |   class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |     struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt * _element
         8 |     struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** _pprev
        16 |     HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type _bucket
        24 |     const HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class HashTable_iterator<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> >
         0 |   class HashTable_const_iterator<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> > (base)
         0 |     class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > _rep
         0 |       struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt * _element
         8 |       struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** _pprev
        16 |       HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type _bucket
        24 |       const HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec7042a620 <../dummy_inc/click/hashcontainer.hh:14:1, col:69> line:302:7 class HashContainer_const_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|-CXXRecordDecl 0x55ec7053cbb8 prev 0x55ec7042a620 <col:1, col:7> col:7 implicit class HashContainer_const_iterator
|-AccessSpecDecl 0x55ec7053cc48 <col:38, col:44> col:38 public
|-TypedefDecl 0x55ec7053ce10 <line:304:5, col:53> col:53 size_type 'typename HashContainer<elt, HashContainer_adapter<elt> >::size_type':'unsigned long'
| `-ElaboratedType 0x55ec7053cdc0 'typename HashContainer<elt, HashContainer_adapter<elt> >::size_type' sugar
|   `-TypedefType 0x55ec7042a190 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::size_type' sugar
|     |-Typedef 0x55ec70429950 'size_type'
|     `-TypedefType 0x55ec6fec12f0 'size_t' sugar
|       |-Typedef 0x55ec6fe89ce0 'size_t'
|       `-BuiltinType 0x55ec6fe19680 'unsigned long'
|-TypedefDecl 0x55ec7053cfb0 <line:305:5, col:61> col:61 bucket_count_type 'typename HashContainer<elt, HashContainer_adapter<elt> >::bucket_count_type':'unsigned int'
| `-ElaboratedType 0x55ec7053cf60 'typename HashContainer<elt, HashContainer_adapter<elt> >::bucket_count_type' sugar
|   `-TypedefType 0x55ec7042a330 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type' sugar
|     |-Typedef 0x55ec704299a8 'bucket_count_type'
|     `-TypedefType 0x55ec6ff715a0 'uint32_t' sugar
|       |-Typedef 0x55ec6fe825c8 'uint32_t'
|       `-TypedefType 0x55ec6fe5b610 '__uint32_t' sugar
|         |-Typedef 0x55ec6fe5b208 '__uint32_t'
|         `-BuiltinType 0x55ec6fe19660 'unsigned int'
|-CXXConstructorDecl 0x55ec7053d040 <line:308:5, line:309:5> line:308:5 HashContainer_const_iterator 'void ()'
|-CXXMethodDecl 0x55ec7053d1a8 <line:312:5, line:314:5> line:312:8 get 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *() const'
|-CXXMethodDecl 0x55ec7053d278 <line:317:5, line:319:5> line:317:8 operator-> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *() const'
|-CXXMethodDecl 0x55ec7053d3d8 <line:323:5, line:325:5> line:323:8 operator* 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt &() const'
|-CXXMethodDecl 0x55ec7053d488 <line:328:5, line:330:5> line:328:17 live 'bool () const' inline
|-TypedefDecl 0x55ec7053d618 <line:332:5, col:73> col:48 unspecified_bool_type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::*)() const'
| `-MemberPointerType 0x55ec7053d5b0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::*)() const'
|   |-RecordType 0x55ec7042a720 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|   | `-ClassTemplateSpecialization 0x55ec7042a620 'HashContainer_const_iterator'
|   `-ParenType 0x55ec7053d540 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *() const' sugar
|     `-FunctionProtoType 0x55ec7053d160 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *() const' const cdecl
|       `-PointerType 0x55ec7053d100 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|         `-SubstTemplateTypeParmType 0x55ec7053cc70 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt' sugar
|           |-TemplateTypeParmType 0x55ec703ca490 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ec703ca440 'T'
|           `-RecordType 0x55ec70422cb0 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|             `-CXXRecord 0x55ec70422c20 'elt'
|-CXXConversionDecl 0x55ec7053d730 <line:334:5, line:336:5> line:334:12 operator HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *(HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::*)() const 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec7053d988 <line:339:5, line:341:5> line:339:32 hashcontainer 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *() const'
|-CXXMethodDecl 0x55ec7053daa8 <line:344:5, line:346:5> line:344:23 bucket 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type () const'
|-CXXMethodDecl 0x55ec7053db58 <line:349:5, line:361:5> line:349:10 operator++ 'void ()'
|-CXXMethodDecl 0x55ec7053dc98 <line:364:5, line:366:5> line:364:10 operator++ 'void (int)'
| `-ParmVarDecl 0x55ec7053dc08 <col:21> col:24 'int'
|-AccessSpecDecl 0x55ec7053dd50 <line:368:3, col:10> col:3 private
|-FieldDecl 0x55ec7053dd88 <line:370:5, col:8> col:8 referenced _element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-FieldDecl 0x55ec7053de20 <line:371:5, col:9> col:9 referenced _pprev 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
|-FieldDecl 0x55ec7053de80 <line:372:5, col:23> col:23 referenced _bucket 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type':'unsigned int'
|-FieldDecl 0x55ec7053dfc8 <line:373:5, col:32> col:32 referenced _hc 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
|-CXXConstructorDecl 0x55ec7053e228 <line:375:5, line:385:5> line:375:12 HashContainer_const_iterator 'void (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *)' inline
| `-ParmVarDecl 0x55ec7053e118 <col:41, col:68> col:68 hc 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
|-CXXConstructorDecl 0x55ec7053e6b8 <line:387:5, line:390:5> line:387:12 HashContainer_const_iterator 'void (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *, HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)' inline
| |-ParmVarDecl 0x55ec7053e3e8 <col:41, col:68> col:68 hc 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
| |-ParmVarDecl 0x55ec7053e460 <col:72, col:90> col:90 b 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x55ec7053e4e0 <col:93, col:97> col:97 pprev 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
| `-ParmVarDecl 0x55ec7053e558 <col:104, col:107> col:107 element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
|-FriendDecl 0x55ec7053e898 <line:392:5, col:36> col:12 'class HashContainer<elt, HashContainer_adapter<elt> >':'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-FriendDecl 0x55ec7053e9e8 <line:393:5, col:45> col:12 'class HashContainer_iterator<elt, HashContainer_adapter<elt> >':'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-CXXDestructorDecl 0x55ec70561e50 <line:302:7> col:7 implicit ~HashContainer_const_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec70561f58 <col:7> col:7 implicit constexpr HashContainer_const_iterator 'void (const HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)' inline default trivial noexcept-unevaluated 0x55ec70561f58
| `-ParmVarDecl 0x55ec70562038 <col:7> col:7 'const HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
`-CXXConstructorDecl 0x55ec705620d8 <col:7> col:7 implicit used constexpr HashContainer_const_iterator 'void (HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55ec705621e8 <col:7> col:7 used 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  |-CXXCtorInitializer Field 0x55ec7053dd88 '_element' 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
  | `-ImplicitCastExpr 0x55ec70562bf0 <col:7> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *' <LValueToRValue>
  |   `-MemberExpr 0x55ec70562ba8 <col:7> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *' xvalue ._element 0x55ec7053dd88
  |     `-CXXStaticCastExpr 0x55ec70562b78 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue static_cast<class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec70562b48 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' lvalue ParmVar 0x55ec705621e8 '' 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  |-CXXCtorInitializer Field 0x55ec7053de20 '_pprev' 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
  | `-ImplicitCastExpr 0x55ec70562cd8 <col:7> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **' <LValueToRValue>
  |   `-MemberExpr 0x55ec70562c90 <col:7> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **' xvalue ._pprev 0x55ec7053de20
  |     `-CXXStaticCastExpr 0x55ec70562c60 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue static_cast<class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec70562c30 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' lvalue ParmVar 0x55ec705621e8 '' 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  |-CXXCtorInitializer Field 0x55ec7053de80 '_bucket' 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type':'unsigned int'
  | `-ImplicitCastExpr 0x55ec70562dc0 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type':'unsigned int' <LValueToRValue>
  |   `-MemberExpr 0x55ec70562d78 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type':'unsigned int' xvalue ._bucket 0x55ec7053de80
  |     `-CXXStaticCastExpr 0x55ec70562d48 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue static_cast<class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec70562d18 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' lvalue ParmVar 0x55ec705621e8 '' 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  |-CXXCtorInitializer Field 0x55ec7053dfc8 '_hc' 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
  | `-ImplicitCastExpr 0x55ec70562ea8 <col:7> 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' <LValueToRValue>
  |   `-MemberExpr 0x55ec70562e60 <col:7> 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' xvalue ._hc 0x55ec7053dfc8
  |     `-CXXStaticCastExpr 0x55ec70562e30 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue static_cast<class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec70562e00 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' lvalue ParmVar 0x55ec705621e8 '' 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  `-CompoundStmt 0x55ec70562f08 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_const_iterator = type { %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"*, %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"**, i32, %class.HashContainer* }
  NonVirtualBaseLLVMType:%class.HashContainer_const_iterator = type { %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"*, %"struct.HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt"**, i32, %class.HashContainer* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec7042fea0 <../dummy_inc/click/hashtable.hh:449:1, line:522:1> line:450:7 class HashTable_const_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|-CXXRecordDecl 0x55ec7053b9c8 prev 0x55ec7042fea0 <col:1, col:7> col:7 implicit class HashTable_const_iterator
|-AccessSpecDecl 0x55ec7053ba58 <col:47, col:53> col:47 public
|-CXXConstructorDecl 0x55ec7053bab8 <line:453:5, line:454:5> line:453:5 HashTable_const_iterator 'void ()'
|-CXXMethodDecl 0x55ec7053bd08 <line:457:5, line:462:5> line:457:23 get 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> *() const'
|-CXXMethodDecl 0x55ec7053bef8 <line:466:5, line:468:5> line:466:23 operator-> 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> *() const'
|-CXXMethodDecl 0x55ec7053c118 <line:472:5, line:474:5> line:472:23 operator* 'const Pair<const EtherAddress, EtherSwitch::AddrInfo> &() const'
|-CXXMethodDecl 0x55ec7053c248 <line:479:5, line:481:5> line:479:14 key 'const EtherAddress &() const'
|-CXXMethodDecl 0x55ec7053c378 <line:486:5, line:488:5> line:486:14 value 'const EtherSwitch::AddrInfo &() const'
|-CXXMethodDecl 0x55ec7053c428 <line:491:5, line:493:5> line:491:10 live 'bool () const'
|-TypedefDecl 0x55ec7053c588 <line:495:5, col:71> col:46 unspecified_bool_type 'bool (HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >::*)() const'
| `-MemberPointerType 0x55ec7053c520 'bool (HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >::*)() const'
|   |-RecordType 0x55ec7042ff80 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|   | `-ClassTemplateSpecialization 0x55ec7042fea0 'HashTable_const_iterator'
|   `-ParenType 0x55ec70396ba0 'bool () const' sugar
|     `-FunctionProtoType 0x55ec6fec4030 'bool () const' const cdecl
|       `-BuiltinType 0x55ec6fe19540 'bool'
|-CXXConversionDecl 0x55ec7053c6a0 <line:497:5, line:499:5> line:497:12 used operator bool (HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >::*)() const 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec7053c7f0 <line:502:5, line:504:5> line:502:10 operator++ 'void (int)'
| `-ParmVarDecl 0x55ec7053c760 <col:21> col:24 'int'
|-CXXMethodDecl 0x55ec7053c8a8 <line:507:5, line:509:5> line:507:10 operator++ 'void ()'
|-AccessSpecDecl 0x55ec7053c958 <line:511:3, col:10> col:3 private
|-FieldDecl 0x55ec7053ea40 <line:513:5, col:63> col:63 referenced _rep 'typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-CXXConstructorDecl 0x55ec7053edd8 <line:515:5, line:517:5> line:515:12 HashTable_const_iterator 'void (const typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator &)' inline
| `-ParmVarDecl 0x55ec7053ecc0 <col:37, col:102> col:102 i 'const typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator &'
|-FriendDecl 0x55ec7053f010 <line:519:5, col:39> col:12 'class HashTable<Pair<const EtherAddress, AddrInfo> >':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>'
|-FriendDecl 0x55ec70560b60 <line:520:5, col:48> col:12 'class HashTable_iterator<Pair<const EtherAddress, AddrInfo> >':'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|-CXXDestructorDecl 0x55ec70561d70 <line:450:7> col:7 implicit ~HashTable_const_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec70562258 <col:7> col:7 implicit constexpr HashTable_const_iterator 'void (const HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)' inline default trivial noexcept-unevaluated 0x55ec70562258
| `-ParmVarDecl 0x55ec70562368 <col:7> col:7 'const HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
`-CXXConstructorDecl 0x55ec70562408 <col:7> col:7 implicit used constexpr HashTable_const_iterator 'void (HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55ec70562518 <col:7> col:7 used 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
  |-CXXCtorInitializer Field 0x55ec7053ea40 '_rep' 'typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
  | `-CXXConstructExpr 0x55ec70562f18 <col:7> 'typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' 'void (HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&) noexcept'
  |   `-MemberExpr 0x55ec70562aa0 <col:7> 'typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue ._rep 0x55ec7053ea40
  |     `-CXXStaticCastExpr 0x55ec70562a70 <col:7> 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' xvalue static_cast<class HashTable_const_iterator<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec70562a40 <col:7> 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' lvalue ParmVar 0x55ec70562518 '' 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
  `-CompoundStmt 0x55ec70562f78 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.HashTable_const_iterator = type { %class.HashContainer_const_iterator }
  NonVirtualBaseLLVMType:%class.HashTable_const_iterator = type { %class.HashContainer_const_iterator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec70430078 <../dummy_inc/click/hashtable.hh:526:1, line:566:1> line:527:7 class HashTable_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|-CXXRecordDecl 0x55ec70560be8 prev 0x55ec70430078 <col:1, col:7> col:7 implicit class HashTable_iterator
|-AccessSpecDecl 0x55ec70560c78 <col:88, col:94> col:88 public
|-TypedefDecl 0x55ec70560dd0 <line:529:5, col:51> col:51 inherited 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
| `-TemplateSpecializationType 0x55ec70560d60 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' sugar HashTable_const_iterator
|   |-TemplateArgument type 'Pair<const EtherAddress, EtherSwitch::AddrInfo>':'Pair<const EtherAddress, EtherSwitch::AddrInfo>'
|   `-RecordType 0x55ec7042ff80 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
|     `-ClassTemplateSpecialization 0x55ec7042fea0 'HashTable_const_iterator'
|-CXXConstructorDecl 0x55ec70560e60 <line:532:5, line:533:5> line:532:5 HashTable_iterator 'void ()'
|-CXXMethodDecl 0x55ec705610b8 <line:536:5, line:538:5> line:536:17 get 'Pair<const EtherAddress, EtherSwitch::AddrInfo> *() const'
|-CXXMethodDecl 0x55ec705612a8 <line:541:5, line:543:5> line:541:24 operator-> 'Pair<const EtherAddress, EtherSwitch::AddrInfo> *() const' inline
|-CXXMethodDecl 0x55ec705614c8 <line:547:5, line:549:5> line:547:24 operator* 'Pair<const EtherAddress, EtherSwitch::AddrInfo> &() const' inline
|-CXXMethodDecl 0x55ec70561628 <line:554:5, line:556:5> line:554:8 used value 'EtherSwitch::AddrInfo &() const'
|-AccessSpecDecl 0x55ec705616d8 <line:558:3, col:10> col:3 private
|-CXXConstructorDecl 0x55ec705619e8 <line:560:5, line:562:5> line:560:12 HashTable_iterator 'void (const typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator &)' inline
| `-ParmVarDecl 0x55ec70561900 <col:31, col:96> col:96 i 'const typename HashTable<Pair<const EtherAddress, AddrInfo> >::rep_type::const_iterator &'
|-FriendDecl 0x55ec70561c20 <line:564:5, col:39> col:12 'class HashTable<Pair<const EtherAddress, AddrInfo> >':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>'
|-CXXDestructorDecl 0x55ec70561c90 <line:527:7> col:7 implicit referenced ~HashTable_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec70562588 <col:7> col:7 implicit constexpr HashTable_iterator 'void (const HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &)' inline default trivial noexcept-unevaluated 0x55ec70562588
| `-ParmVarDecl 0x55ec70562698 <col:7> col:7 'const HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &'
`-CXXConstructorDecl 0x55ec70562738 <col:7> col:7 implicit used constexpr HashTable_iterator 'void (HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55ec70562848 <col:7> col:7 used 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
  |-CXXCtorInitializer 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >'
  | `-CXXConstructExpr 0x55ec70562f88 <col:7> 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' 'void (HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&) noexcept'
  |   `-ImplicitCastExpr 0x55ec70562a20 <col:7> 'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >':'HashTable_const_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' xvalue <UncheckedDerivedToBase (HashTable_const_iterator)>
  |     `-CXXStaticCastExpr 0x55ec705629f0 <col:7> 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' xvalue static_cast<class HashTable_iterator<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec705629c0 <col:7> 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> >' lvalue ParmVar 0x55ec70562848 '' 'HashTable_iterator<Pair<const EtherAddress, EtherSwitch::AddrInfo> > &&'
  `-CompoundStmt 0x55ec70563080 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.HashTable_iterator = type { %class.HashTable_const_iterator }
  NonVirtualBaseLLVMType:%class.HashTable_iterator = type { %class.HashTable_const_iterator }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704f3230 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ec704f3348 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55ec704f33f0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55ec704f3458 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55ec704f34c0 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55ec704f3570 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55ec704f33f0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55ec704f43f0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55ec704f43a8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55ec704f4370 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55ec704f4358 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55ec704f4300 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55ec7016f0c0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55ec704f3458 'len' 'int'
| | `-IntegerLiteral 0x55ec704f4468 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55ec704f34c0 'cap' 'int'
| | `-IntegerLiteral 0x55ec704f44d0 <col:20> 'int' 0
| `-CompoundStmt 0x55ec704f4550 <col:23, line:119:2>
|-CXXConstructorDecl 0x55ec704f36e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55ec704f3628 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55ec704f4560 <col:37, line:121:2>
|-CXXConstructorDecl 0x55ec704f6778 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ec704f6888 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55ec704f33f0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55ec704f81c0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55ec704f8190 <col:12> 'unsigned char *const' lvalue .s 0x55ec704f33f0
| |     `-DeclRefExpr 0x55ec704f8170 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55ec704f3458 'len' 'int'
| | `-ImplicitCastExpr 0x55ec704f8250 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ec704f8220 <col:12> 'const int' lvalue .len 0x55ec704f3458
| |     `-DeclRefExpr 0x55ec704f8200 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55ec704f34c0 'cap' 'int'
| | `-ImplicitCastExpr 0x55ec704f82e0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ec704f82b0 <col:12> 'const int' lvalue .cap 0x55ec704f34c0
| |     `-DeclRefExpr 0x55ec704f8290 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55ec704f8338 <col:12>
|-CXXConstructorDecl 0x55ec704f6928 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec704f6928
| `-ParmVarDecl 0x55ec704f6a38 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55ec704f85f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ec704ee968 prev 0x55ec7043ba80 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ec704eea60 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55ec704eeaf0 <col:21, col:27> col:21 public
|-TypedefDecl 0x55ec704eeb30 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55ec6fe1a010 'const char *'
|   `-QualType 0x55ec6fe19561 'const char' const
|     `-BuiltinType 0x55ec6fe19560 'char'
|-TypedefDecl 0x55ec704eeba0 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55ec6fe1a1e0 'char *'
|   `-BuiltinType 0x55ec6fe19560 'char'
|-TypedefDecl 0x55ec704eece0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55ec704eec50 'int (StringAccum::*)() const'
|   |-RecordType 0x55ec700d9980 'StringAccum'
|   | `-CXXRecord 0x55ec704ee968 'StringAccum'
|   `-ParenType 0x55ec701490d0 'int () const' sugar
|     `-FunctionProtoType 0x55ec7011cc60 'int () const' const cdecl
|       `-BuiltinType 0x55ec6fe195c0 'int'
|-CXXConstructorDecl 0x55ec704eeda0 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55ec704eeef0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55ec704eee60 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55ec704ef040 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55ec704eefb0 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55ec704ef1e8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55ec704ef128 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55ec704ef398 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55ec704ef2d8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55ec704ef490 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55ec704ef648 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55ec704ef580 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55ec704ef7c8 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55ec704ef700 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55ec704ef8c0 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55ec704ef988 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55ec704efa50 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55ec704efb18 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55ec704efbe0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x55ec704efd48 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ec704efe18 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ec704efed8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55ec704effe8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55ec704f00f8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55ec704f01b8 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55ec704f0278 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55ec704f03c0 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55ec704f0330 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55ec704f0550 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55ec704f0480 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55ec704f0618 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55ec704f0710 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55ec704f07d0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55ec704f0898 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55ec704f0958 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55ec704f0a18 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55ec704f0ad8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ec704f0c28 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55ec704f0b90 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55ec704f0d78 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55ec704f0ce8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55ec704f0ed0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55ec704f0e38 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55ec704f1020 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55ec704f0f90 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55ec704f1240 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55ec704f10e0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55ec704f1160 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55ec704f4228 <col:53> 'int' 0
|-CXXMethodDecl 0x55ec704f1398 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55ec704f1308 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55ec704f4248 <col:34> 'int' 1
|-CXXMethodDecl 0x55ec704f14e0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55ec704f1450 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55ec704f1630 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55ec704f15a0 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55ec704f1780 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55ec704f16f0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55ec704f18d0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55ec704f1840 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55ec704f1aa8 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ec704f1990 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ec704f1a10 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ec704f1c88 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55ec704f1b70 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55ec704f1bf0 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55ec704f1e68 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ec704f1d50 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55ec704f1dd0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55ec704f2048 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55ec704f1f30 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55ec704f1fb0 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55ec704f2228 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55ec704f2110 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55ec704f2190 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55ec704f2588 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55ec704f2370 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55ec704f23f0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55ec704f4268 <col:56> 'int' 10
| `-ParmVarDecl 0x55ec704f2468 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec704f4288 <col:77> 'bool' true
|-CXXMethodDecl 0x55ec704f28e8 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55ec704f26d0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55ec704f2750 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55ec704f4298 <col:57> 'int' 10
| `-ParmVarDecl 0x55ec704f27c8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ec704f42b8 <col:78> 'bool' true
|-CXXMethodDecl 0x55ec704f2b80 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55ec704f2a20 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55ec704f2aa0 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55ec704f2c78 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x55ec704f2de8 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55ec704f2d28 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55ec704f2f38 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55ec704f2ea8 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55ec704f2fe0 <col:51> "" ""
|-AccessSpecDecl 0x55ec704f3050 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55ec704f3078 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55ec704f31c8 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55ec704f3218 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ec704f31a8 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55ec704f3178 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55ec70151e38 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55ec704f3230 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ec704f3348 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55ec704f33f0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55ec704f3458 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55ec704f34c0 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55ec704f3570 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55ec704f33f0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55ec704f43f0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55ec704f43a8 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55ec704f4370 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55ec704f4358 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55ec704f4300 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55ec7016f0c0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55ec704f3458 'len' 'int'
| | | `-IntegerLiteral 0x55ec704f4468 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55ec704f34c0 'cap' 'int'
| | | `-IntegerLiteral 0x55ec704f44d0 <col:20> 'int' 0
| | `-CompoundStmt 0x55ec704f4550 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55ec704f36e8 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55ec704f3628 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55ec704f4560 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55ec704f6778 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ec704f6888 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec704f33f0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55ec704f81c0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55ec704f8190 <col:12> 'unsigned char *const' lvalue .s 0x55ec704f33f0
| | |     `-DeclRefExpr 0x55ec704f8170 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec704f3458 'len' 'int'
| | | `-ImplicitCastExpr 0x55ec704f8250 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55ec704f8220 <col:12> 'const int' lvalue .len 0x55ec704f3458
| | |     `-DeclRefExpr 0x55ec704f8200 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55ec704f34c0 'cap' 'int'
| | | `-ImplicitCastExpr 0x55ec704f82e0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55ec704f82b0 <col:12> 'const int' lvalue .cap 0x55ec704f34c0
| | |     `-DeclRefExpr 0x55ec704f8290 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55ec704f6888 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55ec704f8338 <col:12>
| |-CXXConstructorDecl 0x55ec704f6928 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ec704f6928
| | `-ParmVarDecl 0x55ec704f6a38 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55ec704f85f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55ec704f37c0 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55ec704f38c0 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55ec704f3828 <col:16> col:19 'int'
|-CXXMethodDecl 0x55ec704f3aa0 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55ec704f3980 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55ec704f3a00 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55ec704f3c80 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55ec704f3b68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ec704f3be8 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55ec704f3dd8 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55ec704f3d48 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55ec704f3f28 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55ec704f3e98 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55ec704f41e8 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55ec704f4128 parent 0x55ec6fe194c8 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55ec704f3fe0 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55ec704f4058 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class HashContainer_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >
         0 |   class HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > (base)
         0 |     struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt * _element
         8 |     struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt ** _pprev
        16 |     HashContainer_const_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type _bucket
        24 |     const HashContainer<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > * _hc
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ec7042a858 <../dummy_inc/click/hashcontainer.hh:15:1, col:69> line:400:7 class HashContainer_iterator definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|-CXXRecordDecl 0x55ec7058ee60 prev 0x55ec7042a858 <col:1, col:7> col:7 implicit class HashContainer_iterator
|-AccessSpecDecl 0x55ec7058eef0 <col:76, col:82> col:76 public
|-TypedefDecl 0x55ec7058efe0 <line:402:5, col:48> col:48 inherited 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| `-TemplateSpecializationType 0x55ec7058ef40 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' sugar HashContainer_const_iterator
|   |-TemplateArgument type 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt':'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt'
|   |-TemplateArgument type 'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>':'HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt>'
|   `-RecordType 0x55ec7042a720 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|     `-ClassTemplateSpecialization 0x55ec7042a620 'HashContainer_const_iterator'
|-CXXConstructorDecl 0x55ec7058f070 <line:405:5, line:406:5> line:405:5 HashContainer_iterator 'void ()'
|-CXXMethodDecl 0x55ec7058f128 <line:414:5, line:416:5> line:414:10 can_insert 'bool () const'
|-CXXMethodDecl 0x55ec7058f348 <line:419:5, line:421:5> line:419:26 hashcontainer 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *() const'
|-AccessSpecDecl 0x55ec7058f3f8 <line:423:3, col:10> col:3 private
|-CXXConstructorDecl 0x55ec7058f628 <line:425:5, line:427:5> line:425:12 used HashContainer_iterator 'void (HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *)' inline
| |-ParmVarDecl 0x55ec7058f518 <col:35, col:56> col:56 used hc 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
| |-CXXCtorInitializer 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::inherited':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| | `-CXXConstructExpr 0x55ec70590d68 <line:426:4, col:16> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' 'void (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *)'
| |   `-ImplicitCastExpr 0x55ec70590d50 <col:14> 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' <NoOp>
| |     `-ImplicitCastExpr 0x55ec70590d38 <col:14> 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' <LValueToRValue>
| |       `-DeclRefExpr 0x55ec70590cb8 <col:14> 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' lvalue ParmVar 0x55ec7058f518 'hc' 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
| `-CompoundStmt 0x55ec703d6920 <col:18, line:427:5>
|-CXXConstructorDecl 0x55ec7058fbf8 <line:429:5, line:431:5> line:429:12 used HashContainer_iterator 'void (HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *, typename inherited::bucket_count_type, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)' inline
| |-ParmVarDecl 0x55ec7058f7e8 <col:35, col:56> col:56 used hc 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
| |-ParmVarDecl 0x55ec7058f900 <col:60, col:98> col:98 used b 'typename inherited::bucket_count_type':'unsigned int'
| |-ParmVarDecl 0x55ec7058f9e0 <col:101, col:105> col:105 used pprev 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
| |-ParmVarDecl 0x55ec7058fa58 <col:112, col:115> col:115 used element 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
| |-CXXCtorInitializer 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::inherited':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
| | `-CXXConstructExpr 0x55ec705a7e80 <line:430:4, col:35> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' 'void (const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *, HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >::bucket_count_type, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **, HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *)'
| |   |-ImplicitCastExpr 0x55ec705a7e20 <col:14> 'const HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' <NoOp>
| |   | `-ImplicitCastExpr 0x55ec705a7e08 <col:14> 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' <LValueToRValue>
| |   |   `-DeclRefExpr 0x55ec705a7d40 <col:14> 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *' lvalue ParmVar 0x55ec7058f7e8 'hc' 'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > *'
| |   |-ImplicitCastExpr 0x55ec705a7e38 <col:18> 'typename inherited::bucket_count_type':'unsigned int' <LValueToRValue>
| |   | `-DeclRefExpr 0x55ec705a7d60 <col:18> 'typename inherited::bucket_count_type':'unsigned int' lvalue ParmVar 0x55ec7058f900 'b' 'typename inherited::bucket_count_type':'unsigned int'
| |   |-ImplicitCastExpr 0x55ec705a7e50 <col:21> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **' <LValueToRValue>
| |   | `-DeclRefExpr 0x55ec705a7d80 <col:21> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **' lvalue ParmVar 0x55ec7058f9e0 'pprev' 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt **'
| |   `-ImplicitCastExpr 0x55ec705a7e68 <col:28> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *' <LValueToRValue>
| |     `-DeclRefExpr 0x55ec705a7da0 <col:28> 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *' lvalue ParmVar 0x55ec7058fa58 'element' 'HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt *'
| `-CompoundStmt 0x55ec703d6a28 <col:37, line:431:5>
|-FriendDecl 0x55ec7058fdd8 <line:433:5, col:36> col:12 'class HashContainer<elt, HashContainer_adapter<elt> >':'HashContainer<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
|-CXXDestructorDecl 0x55ec7058fe30 <line:400:7> col:7 implicit referenced ~HashContainer_iterator 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ec7058ff38 <col:7> col:7 implicit constexpr HashContainer_iterator 'void (const HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &)' inline default trivial noexcept-unevaluated 0x55ec7058ff38
| `-ParmVarDecl 0x55ec70590048 <col:7> col:7 'const HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &'
`-CXXConstructorDecl 0x55ec705900e8 <col:7> col:7 implicit used constexpr HashContainer_iterator 'void (HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55ec705901f8 <col:7> col:7 used 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  |-CXXCtorInitializer 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >'
  | `-CXXConstructExpr 0x55ec70590340 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' 'void (HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&) noexcept'
  |   `-ImplicitCastExpr 0x55ec70590320 <col:7> 'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >':'HashContainer_const_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue <UncheckedDerivedToBase (HashContainer_const_iterator)>
  |     `-CXXStaticCastExpr 0x55ec705902f0 <col:7> 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' xvalue static_cast<class HashContainer_iterator<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt, class HashContainer_adapter<struct HashTable<struct Pair<const class EtherAddress, struct EtherSwitch::AddrInfo>, void>::elt> > &&> <NoOp>
  |       `-DeclRefExpr 0x55ec705902c0 <col:7> 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> >' lvalue ParmVar 0x55ec705901f8 '' 'HashContainer_iterator<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt, HashContainer_adapter<HashTable<Pair<const EtherAddress, EtherSwitch::AddrInfo>, void>::elt> > &&'
  `-CompoundStmt 0x55ec70590408 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  NonVirtualBaseLLVMType:%class.HashContainer_iterator = type { %class.HashContainer_const_iterator }
  IsZeroInitializable:1
  BitFields:[
]>
