
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c4537c8 prev 0x55646c44b058 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c4538c0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55646c453950 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55646c4539c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55646c453a88 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55646c453b50 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55646c453cc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55646c453c00 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55646c453d70 <col:24>
| `-OptimizeNoneAttr 0x55646c453dc8 <col:34>
|-CXXMethodDecl 0x55646c453e10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55646c4540c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55646c453ec0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55646c453f38 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55646c453fb8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55646c454180 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55646c4541b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55646c454220 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55646c4542a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55646c4545c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55646c454360 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55646c4543d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55646c454450 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55646c4544d0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55646c4546e0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55646c45afd8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55646c45afd8
| `-ParmVarDecl 0x55646c45b0e8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55646c45b188 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55646c45b188
| `-ParmVarDecl 0x55646c45b298 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55646c462f38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c446aa0 prev 0x55646c446840 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55646c446b98 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55646c446c28 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55646c446c88 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55646c446d78 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55646c446e78 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55646c447048 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55646c446ef8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55646c446f70 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55646c4471d8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55646c447110 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55646c447280 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55646c4473b8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55646c4472f0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55646c447558 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55646c447498 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55646c4476f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55646c447638 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55646c4477a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55646c4478a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55646c447980 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c447880 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55646c447860 <col:26> 'int' 1
| `-EnumConstantDecl 0x55646c447930 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55646c447998 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c447910 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55646c4478f0 <col:44> 'int' 2
|-CXXMethodDecl 0x55646c447ae0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55646c4479c8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55646c447a48 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55646c447c38 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55646c447ba8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55646c447e48 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55646c447cf8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55646c447d70 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55646c447ef8 <col:20>
| `-OptimizeNoneAttr 0x55646c447f50 <col:30>
|-CXXMethodDecl 0x55646c448058 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55646c447f90 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55646c448100 <col:20>
| `-OptimizeNoneAttr 0x55646c448158 <col:30>
|-CXXMethodDecl 0x55646c4481a8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55646c448270 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55646c448358 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55646c4483e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55646c448468 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55646c4484f0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55646c448578 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55646c448608 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55646c4486c8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55646c448750 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55646c4487d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55646c448860 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55646c4488e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55646c448970 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55646c448a00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55646c448ac0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55646c448b50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55646c448ca0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55646c448c08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55646c448e30 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55646c448d60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55646c4490d0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55646c448ee8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55646c448f68 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55646c448fe8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55646c449188 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55646c449290 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55646c449520 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c449270 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55646c449250 <col:33> 'int' 0
| |-EnumConstantDecl 0x55646c449320 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55646c449538 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c449300 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55646c4492e0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55646c4493b0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55646c449550 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c449390 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55646c449370 <col:38> 'int' 90
| |-EnumConstantDecl 0x55646c449440 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55646c449568 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c449420 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55646c449400 <col:35> 'int' 100
| `-EnumConstantDecl 0x55646c4494d0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55646c449580 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c4494b0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55646c449490 <col:32> 'int' 2000
|-CXXMethodDecl 0x55646c4495c0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55646c4498d0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55646c449740 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55646c4497b8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55646c4499a0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55646c449b20 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55646c449a50 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55646c449d28 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55646c449bd8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55646c449c50 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55646c449e28 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55646c449ec8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55646c449f90 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a020 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55646c44a250 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c44a000 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55646c449fe0 <col:36> 'int' EnumConstant 0x55646c449f90 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a070 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a0c0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a110 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a160 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55646c44a1b0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55646c44a200 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55646c44a338 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55646c44a278 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55646c44a400 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55646c44a4c0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55646c44a580 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55646c44a640 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55646c44a728 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55646c44a7f0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55646c44a970 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55646c44a8a0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55646c44aa98 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55646c44ac98 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55646c44ab48 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55646c44abc8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55646c4574a8 <col:54, line:127:5>
|   |-ParenExpr 0x55646c457358 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55646c457328 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55646c457010 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55646c456fe8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55646c456fd0 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55646c456fb8 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55646c456f88 <col:31> 'Router *' lvalue ->_router 0x55646c454e90
|   |   |         `-CXXThisExpr 0x55646c456f78 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55646c457070 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c457050 <col:48> 'int' 0
|   |   `-CallExpr 0x55646c457288 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55646c457270 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c457250 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c4572c8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4570e0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55646c4572e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c457100 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55646c4572f8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c457138 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55646c457310 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c457238 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c457220 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c4571d8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55646c4573f0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55646c457388 <col:9> 'Router *' lvalue ->_router 0x55646c454e90
|   | | `-CXXThisExpr 0x55646c457378 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55646c4573d8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55646c4573b8 <col:19> 'Router *' lvalue ParmVar 0x55646c44ab48 'r' 'Router *'
|   `-BinaryOperator 0x55646c457488 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55646c457420 <col:9> 'int' lvalue ->_eindex 0x55646c454ef8
|     | `-CXXThisExpr 0x55646c457410 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55646c457470 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55646c457450 <col:19> 'int' lvalue ParmVar 0x55646c44abc8 'eindex' 'int'
|-CXXMethodDecl 0x55646c44ae20 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55646c44ad58 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55646c44aef0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55646c44afb8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55646c44b058 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55646c44b2a8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55646c44b120 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55646c44b1a0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55646c44b358 <col:20>
| `-OptimizeNoneAttr 0x55646c44b3b0 <col:30>
|-CXXMethodDecl 0x55646c44b4b8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55646c44b3f0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55646c44b560 <col:20>
| `-OptimizeNoneAttr 0x55646c44b5b8 <col:30>
|-CXXMethodDecl 0x55646c44b688 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55646c44b5f8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55646c44b730 <col:20>
| `-OptimizeNoneAttr 0x55646c44b788 <col:30>
|-CXXMethodDecl 0x55646c44b918 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55646c44b7c0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55646c44b840 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55646c44baa8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55646c44b9e0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55646c44bbf8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55646c44bb68 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55646c44bd48 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55646c44bcb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55646c44be98 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55646c44be08 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55646c44c158 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55646c44bf50 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55646c44bfd0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55646c44c078 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55646c44c230 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55646c44c2f0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55646c44c5c0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55646c44c470 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55646c44c4e8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55646c44c6e8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55646c44c8c0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55646c44c7a0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55646c44c820 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55646c44caa8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55646c44c988 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55646c44ca08 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55646c44ce18 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55646c44cb68 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55646c44cbe0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55646c44cc60 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55646c456a88 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c456a68 <col:106> 'int' 0
| `-ParmVarDecl 0x55646c44ccd8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456ac0 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456aa0 <col:126> 'int' 0
|-CXXMethodDecl 0x55646c44d1a8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55646c44cee8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55646c44cf60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55646c44cff0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55646c44d068 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456af8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456ad8 <col:114> 'int' 0
|-CXXMethodDecl 0x55646c44d538 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55646c44d280 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55646c44d2f8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55646c44d378 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55646c456b10 <col:96> 'int' 0
| `-ParmVarDecl 0x55646c44d3f0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456b50 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456b30 <col:116> 'int' 0
|-CXXMethodDecl 0x55646c44d8b8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55646c44d608 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55646c44d680 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44d700 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55646c456b88 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c456b68 <col:109> 'int' 0
| `-ParmVarDecl 0x55646c44d778 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456bc0 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456ba0 <col:129> 'int' 0
|-CXXMethodDecl 0x55646c44dc38 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55646c44d988 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55646c44da00 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44da80 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55646c44daf8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456bf8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456bd8 <col:117> 'int' 0
|-CXXMethodDecl 0x55646c44dfc8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55646c44dd10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c44dd88 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44de08 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55646c456c10 <col:99> 'int' 0
| `-ParmVarDecl 0x55646c44de80 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55646c456c50 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55646c456c30 <col:119> 'int' 0
|-CXXMethodDecl 0x55646c44e3e8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55646c44e098 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55646c44e118 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55646c44e190 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44e210 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55646c456c88 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c456c68 <col:108> 'int' 0
| `-ParmVarDecl 0x55646c44e290 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55646c456cc0 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55646c456ca0 <col:141> 'int' 0
|-CXXMethodDecl 0x55646c44e808 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55646c44e4c0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55646c44e540 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55646c44e5b8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44e638 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55646c44e6b8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55646c456cd8 <col:121> 'int' 0
|-CXXMethodDecl 0x55646c44ec38 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55646c44e8e8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55646c44e968 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55646c44e9e0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c44ea60 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55646c456cf8 <col:98> 'int' 0
| `-ParmVarDecl 0x55646c44eae0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55646c456d18 <col:123> 'int' 0
|-CXXMethodDecl 0x55646c44ef00 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55646c44ed10 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55646c44ed90 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55646c44ee10 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55646c456d38 <col:80> 'int' 0
|-EnumDecl 0x55646c44efb8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55646c44f0c0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55646c44f350 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c44f0a0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55646c44f080 <col:42> 'int' 1
| |-EnumConstantDecl 0x55646c44f150 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55646c44f368 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c44f130 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55646c44f110 <col:40> 'int' 2
| |-EnumConstantDecl 0x55646c44f1e0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55646c44f380 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c44f1c0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55646c44f1a0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55646c44f270 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55646c44f398 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c44f250 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55646c44f230 <col:36> 'int' 7
| `-EnumConstantDecl 0x55646c44f300 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55646c44f3b0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c44f2e0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55646c44f2c0 <col:34> 'int' 6
|-CXXMethodDecl 0x55646c44f668 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55646c44f3d8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55646c44f478 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55646c44f4f8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55646c44f570 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55646c456df0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55646c456dd8 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55646c456dc0 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55646c456da0 <col:98, col:105> 'String' (CXXTemporary 0x55646c456da0)
|           `-CXXTemporaryObjectExpr 0x55646c456d68 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55646c44f908 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55646c44f738 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55646c44f7b0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55646c44f828 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55646c456ea0 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55646c456e88 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55646c456e70 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55646c456e50 <col:94, col:101> 'String' (CXXTemporary 0x55646c456e50)
| |         `-CXXTemporaryObjectExpr 0x55646c456e18 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55646c457690 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55646c457608 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55646c4575d8 <col:9> '<bound member function type>' ->add_task_handlers 0x55646c44f668
|     | `-CXXThisExpr 0x55646c4575c8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55646c457648 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55646c457548 <col:27> 'Task *' lvalue ParmVar 0x55646c44f738 'task' 'Task *'
|     |-ImplicitCastExpr 0x55646c457660 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55646c457568 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55646c44f7b0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55646c457678 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55646c457588 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55646c44f300 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55646c4575a8 <col:62> 'const String' lvalue ParmVar 0x55646c44f828 'prefix' 'const String &'
|-CXXMethodDecl 0x55646c44fb18 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55646c44f9d0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55646c44fa48 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55646c456f50 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55646c456f38 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55646c456f20 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55646c456f00 <col:70, col:77> 'String' (CXXTemporary 0x55646c456f00)
| |         `-CXXTemporaryObjectExpr 0x55646c456ec8 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55646c457868 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55646c4577e0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55646c4577b0 <col:9> '<bound member function type>' ->add_task_handlers 0x55646c44f668
|     | `-CXXThisExpr 0x55646c4577a0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55646c457820 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55646c457720 <col:27> 'Task *' lvalue ParmVar 0x55646c44f9d0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55646c457838 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55646c457740 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55646c457850 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55646c457760 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55646c44f300 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55646c457780 <col:57> 'const String' lvalue ParmVar 0x55646c44fa48 'prefix' 'const String &'
|-CXXMethodDecl 0x55646c44fdf8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55646c44fbe0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c44fc60 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c44fcd8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55646c4500a8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55646c44fec8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c44ff48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c44ffc8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55646c450398 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55646c450178 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c4501f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c450270 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55646c450648 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55646c450468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c4504e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c450568 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55646c4508f8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55646c450718 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c450798 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c450818 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55646c450ba8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55646c4509c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c450a48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c450ac0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55646c450e58 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55646c450c78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c450cf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c450d78 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55646c451108 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55646c450f28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c450fa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c451028 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55646c4513b8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55646c4511d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c451258 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c4512d8 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55646c451668 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55646c451488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c451508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c451588 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55646c4518d0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55646c451738 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55646c4517b8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55646c451830 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55646c451b78 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55646c4519a0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55646c451a20 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55646c451a98 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55646c451e28 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55646c451c48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c451cc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c451d48 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55646c4520d8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55646c451ef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c451f78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c451ff0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55646c452388 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55646c4521a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c452228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c4522a0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55646c452638 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55646c452458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c4524d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55646c452550 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55646c452968 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55646c452708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55646c452788 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55646c452800 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55646c452878 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55646c456f68 <col:93> 'bool' false
|-CXXMethodDecl 0x55646c452b50 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55646c452a38 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55646c452ab8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55646c452d28 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55646c452c10 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55646c452c90 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55646c453008 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55646c452de8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55646c452e60 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55646c452ee0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55646c452f58 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55646c4532f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55646c4530d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55646c453150 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55646c4531d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55646c453248 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55646c453530 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55646c4533d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55646c453450 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55646c453718 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55646c4535f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55646c453678 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55646c4537c8 prev 0x55646c44b058 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55646c4538c0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55646c453950 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55646c4539c8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55646c453a88 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55646c453b50 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55646c453cc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55646c453c00 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55646c453d70 <col:24>
| | `-OptimizeNoneAttr 0x55646c453dc8 <col:34>
| |-CXXMethodDecl 0x55646c453e10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55646c4540c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55646c453ec0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55646c453f38 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55646c453fb8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55646c454180 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55646c4541b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55646c454220 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55646c4542a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55646c4545c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55646c454360 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55646c4543d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55646c454450 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55646c4544d0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55646c4546e0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55646c45afd8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55646c45afd8
| | `-ParmVarDecl 0x55646c45b0e8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55646c45b188 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55646c45b188
| | `-ParmVarDecl 0x55646c45b298 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55646c462f38 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55646c454758 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55646c4547f8 <col:38> "" ""
|-CXXMethodDecl 0x55646c454888 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55646c454928 <col:44> "" ""
|-AccessSpecDecl 0x55646c454998 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55646c4549c0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55646c454ac0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55646c454b10 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c454aa0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55646c454a80 <col:27> 'int' 4
|-FieldDecl 0x55646c454bc8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55646c454d78 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55646c454e30 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55646c454e90 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55646c454ef8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55646c455058 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55646c454f88 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55646c455208 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55646c455118 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55646c4553e8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55646c4552c8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55646c455348 <col:25> col:28 'int'
|-CXXMethodDecl 0x55646c455690 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55646c4554b0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55646c455530 <col:28> col:31 'int'
| `-ParmVarDecl 0x55646c4555a8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55646c455748 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55646c455810 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55646c455860 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55646c4558b0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55646c455a90 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55646c455940 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55646c4559b8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55646c455d38 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55646c455b58 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55646c455bd8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55646c455c50 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55646c455f58 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55646c455e08 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55646c455e88 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55646c456290 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55646c456018 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55646c456098 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55646c456110 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55646c456190 <col:57> col:60 'int'
|-CXXMethodDecl 0x55646c456478 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55646c456360 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55646c4563e0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55646c4565c8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55646c456538 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55646c456948 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55646c456688 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55646c456708 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55646c456780 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55646c456800 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55646c456a28 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class DebugBridge
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _label
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c14bb50 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55646c14bc68 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55646c14bd08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55646c14bd68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55646c14bdc8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55646c14be78 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c14c180 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c14c298 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55646c14c340 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55646c14c3a8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55646c14c438 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55646c152100 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55646c152538 <col:12>
|-CXXConstructorDecl 0x55646c152208 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55646c152318 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55646c14c340 'data' 'const char *'
| | `-ImplicitCastExpr 0x55646c154ac0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55646c154a90 <col:12> 'const char *const' lvalue .data 0x55646c14c340
| |     `-DeclRefExpr 0x55646c154a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55646c14c3a8 'length' 'int'
| | `-ImplicitCastExpr 0x55646c154b50 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55646c154b20 <col:12> 'const int' lvalue .length 0x55646c14c3a8
| |     `-DeclRefExpr 0x55646c154b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55646c14c438 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55646c154be0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55646c154bb0 <col:12> 'String::memo_t *const' lvalue .memo 0x55646c14c438
| |     `-DeclRefExpr 0x55646c154b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| `-CompoundStmt 0x55646c154c38 <col:12>
|-CXXConstructorDecl 0x55646c1523b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55646c1523b8
| `-ParmVarDecl 0x55646c1524c8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55646c157a20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55646c163458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55646c163568 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55646c163a80 <col:12>
|   |-BinaryOperator 0x55646c163898 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55646c163850 <col:12> 'const char *' lvalue ->data 0x55646c14c340
|   | | `-CXXThisExpr 0x55646c163840 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55646c163880 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55646c163810 <col:12> 'const char *const' lvalue .data 0x55646c14c340
|   |     `-DeclRefExpr 0x55646c1637f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55646c163960 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55646c163918 <col:12> 'int' lvalue ->length 0x55646c14c3a8
|   | | `-CXXThisExpr 0x55646c163908 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55646c163948 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55646c1638d8 <col:12> 'const int' lvalue .length 0x55646c14c3a8
|   |     `-DeclRefExpr 0x55646c1638b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55646c163a28 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55646c1639e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55646c14c438
|   | | `-CXXThisExpr 0x55646c1639d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55646c163a10 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55646c1639a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55646c14c438
|   |     `-DeclRefExpr 0x55646c163980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55646c163a70 <col:12>
|     `-UnaryOperator 0x55646c163a58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c163a48 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55646c1635d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55646c1635d8
  `-ParmVarDecl 0x55646c1636e8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c1430e0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55646c1431f8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55646c143288 <col:16, col:22> col:16 public
|-TypedefDecl 0x55646c1432c8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55646be18010 'const char *'
|   `-QualType 0x55646be17561 'const char' const
|     `-BuiltinType 0x55646be17560 'char'
|-TypedefDecl 0x55646c143350 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55646c143320 'String::const_iterator' sugar
|   |-Typedef 0x55646c1432c8 'const_iterator'
|   `-PointerType 0x55646be18010 'const char *'
|     `-QualType 0x55646be17561 'const char' const
|       `-BuiltinType 0x55646be17560 'char'
|-TypedefDecl 0x55646c1434c0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55646c143430 'int (String::*)() const'
|   |-RecordType 0x55646c143170 'String'
|   | `-CXXRecord 0x55646c1430e0 'String'
|   `-ParenType 0x55646c1433d0 'int () const' sugar
|     `-FunctionProtoType 0x55646c117c00 'int () const' const cdecl
|       `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c143528 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55646bf6c3b0 'int64_t' sugar
|   |-Typedef 0x55646be80490 'int64_t'
|   `-TypedefType 0x55646be596a0 '__int64_t' sugar
|     |-Typedef 0x55646be59278 '__int64_t'
|     `-BuiltinType 0x55646be175e0 'long'
|-TypedefDecl 0x55646c143590 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55646bf6c2d0 'uint64_t' sugar
|   |-Typedef 0x55646be80630 'uint64_t'
|   `-TypedefType 0x55646be59730 '__uint64_t' sugar
|     |-Typedef 0x55646be592e8 '__uint64_t'
|     `-BuiltinType 0x55646be17680 'unsigned long'
|-TypedefDecl 0x55646c143620 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55646c1435f0 'String::intmax_t' sugar
|   |-Typedef 0x55646c143528 'intmax_t'
|   `-TypedefType 0x55646bf6c3b0 'int64_t' sugar
|     |-Typedef 0x55646be80490 'int64_t'
|     `-TypedefType 0x55646be596a0 '__int64_t' sugar
|       |-Typedef 0x55646be59278 '__int64_t'
|       `-BuiltinType 0x55646be175e0 'long'
|-TypedefDecl 0x55646c1436b0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55646c143680 'String::uintmax_t' sugar
|   |-Typedef 0x55646c143590 'uintmax_t'
|   `-TypedefType 0x55646bf6c2d0 'uint64_t' sugar
|     |-Typedef 0x55646be80630 'uint64_t'
|     `-TypedefType 0x55646be59730 '__uint64_t' sugar
|       |-Typedef 0x55646be592e8 '__uint64_t'
|       `-BuiltinType 0x55646be17680 'unsigned long'
|-CXXConstructorDecl 0x55646c143770 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55646c143918 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55646c143858 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55646c143ac8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55646c143a08 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55646c143c20 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55646c143b90 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55646c143e38 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55646c143ce8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55646c143d68 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55646c144058 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55646c143f08 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55646c143f88 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55646c144278 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55646c144128 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55646c1441a8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55646c144498 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55646c144348 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55646c1443c8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55646c144628 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55646c144560 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55646c1447a8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55646c1446e8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55646c144938 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55646c144870 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55646c144a90 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55646c144a00 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55646c144be8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55646c144b58 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55646c144d40 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55646c144cb0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55646c144ec8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55646c144e08 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55646c145058 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55646c144f90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55646c1451e8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55646c145120 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55646c145378 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55646c1452b0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55646c145470 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55646c145598 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55646c145718 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55646c145650 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55646c145868 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55646c1457d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55646c145910 <col:63> "" ""
|-CXXMethodDecl 0x55646c145a88 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55646c145998 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55646c145c98 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55646c145b48 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55646c145bc8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55646c145eb8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55646c145d60 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55646c145de0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55646c146198 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55646c145f78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55646c145ff8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55646c151bd0 <col:55> 'int' 10
| `-ParmVarDecl 0x55646c146070 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55646c151bf0 <col:76> 'bool' true
|-CXXMethodDecl 0x55646c146478 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55646c146260 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55646c1462e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55646c151c00 <col:56> 'int' 10
| `-ParmVarDecl 0x55646c146358 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55646c151c20 <col:77> 'bool' true
|-CXXMethodDecl 0x55646c146580 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55646c146648 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55646c146710 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55646c1467b0 <col:20>
| `-OptimizeNoneAttr 0x55646c146808 <col:30>
|-CXXConversionDecl 0x55646c1468f8 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55646c1469c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55646c146a88 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55646c146b78 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55646c146c38 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55646c146db8 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55646c146cf0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55646c146f08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55646c146e78 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55646c146ff8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55646c1470b8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55646c147308 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55646c147170 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55646c1471f0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55646c147568 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55646c1473d0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55646c147450 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55646c147638 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c147848 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55646c1476f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55646c147770 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55646c147a68 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55646c147910 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55646c147990 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55646c147bf8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55646c147b30 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55646c147ce8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55646c147e58 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55646c147d98 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55646c148068 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55646c147f18 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55646c147f98 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55646c148280 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55646c148128 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55646c1481a0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55646c148410 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55646c148340 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55646c148630 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55646c1484d0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55646c148550 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55646c148780 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55646c1486f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55646c148958 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55646c148840 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55646c1488c0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55646c148aa8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55646c148a18 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55646c148cc0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55646c148b60 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55646c148be0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55646c151c30 <col:39> 'int' 0
|-CXXMethodDecl 0x55646c148ee0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55646c148d80 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55646c148e00 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55646c151c50 <col:48> 'int' 0
|-CXXMethodDecl 0x55646c1490c0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55646c148fa0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55646c149020 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55646c151c70 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55646c149190 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55646c149250 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55646c149310 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55646c1493d0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55646c149490 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55646c149638 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55646c149540 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55646c1497b8 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55646c1496f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55646c149938 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55646c149878 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55646c149ac8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55646c1499f0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55646c149c10 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55646c149b80 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55646c149d60 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55646c149cd0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55646c149f38 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55646c149e20 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55646c149ea0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55646c14a118 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55646c14a000 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55646c14a080 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55646c14a268 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55646c14a1d8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55646c14a478 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55646c14a328 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55646c14a3a8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55646c14a5d8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55646c14a540 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55646c14a730 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55646c14a698 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55646c14a7d8 <col:57> "" ""
|-CXXMethodDecl 0x55646c14a8e8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55646c14a858 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55646c14aa38 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55646c14a9a8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55646c14abb8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55646c14aaf0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55646c14ac80 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55646c14ad40 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55646c14ae00 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55646c14aea0 <col:49> "" ""
|-CXXMethodDecl 0x55646c14af30 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55646c14aff0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55646c14b0e0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55646c14b1a8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55646c14b268 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55646c14b328 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55646c14b420 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55646c14b4e8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55646c14b5b0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55646c14b788 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55646c14b668 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55646c14b6e8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55646c14b9b0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55646c14b850 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55646c14b8d0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55646c14bac0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55646c14bb28 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55646c14bb50 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55646c14bc68 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55646c14bd08 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55646c14bd68 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55646c14bdc8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55646c14be78 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55646c14bee0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55646c14c118 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55646c14c168 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c14c0f8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55646c14c008 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55646c14bfb0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55646c14bff0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55646c14bfd0 <col:32> 'int' 8
|-CXXRecordDecl 0x55646c14c180 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55646c14c298 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55646c14c340 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55646c14c3a8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55646c14c438 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55646c152100 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55646c152538 <col:12>
| |-CXXConstructorDecl 0x55646c152208 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55646c152318 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55646c14c340 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55646c154ac0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55646c154a90 <col:12> 'const char *const' lvalue .data 0x55646c14c340
| | |     `-DeclRefExpr 0x55646c154a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55646c14c3a8 'length' 'int'
| | | `-ImplicitCastExpr 0x55646c154b50 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55646c154b20 <col:12> 'const int' lvalue .length 0x55646c14c3a8
| | |     `-DeclRefExpr 0x55646c154b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55646c14c438 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55646c154be0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55646c154bb0 <col:12> 'String::memo_t *const' lvalue .memo 0x55646c14c438
| | |     `-DeclRefExpr 0x55646c154b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c152318 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55646c154c38 <col:12>
| |-CXXConstructorDecl 0x55646c1523b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55646c1523b8
| | `-ParmVarDecl 0x55646c1524c8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55646c157a20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55646c163458 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55646c163568 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55646c163a80 <col:12>
| |   |-BinaryOperator 0x55646c163898 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55646c163850 <col:12> 'const char *' lvalue ->data 0x55646c14c340
| |   | | `-CXXThisExpr 0x55646c163840 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55646c163880 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55646c163810 <col:12> 'const char *const' lvalue .data 0x55646c14c340
| |   |     `-DeclRefExpr 0x55646c1637f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55646c163960 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55646c163918 <col:12> 'int' lvalue ->length 0x55646c14c3a8
| |   | | `-CXXThisExpr 0x55646c163908 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55646c163948 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55646c1638d8 <col:12> 'const int' lvalue .length 0x55646c14c3a8
| |   |     `-DeclRefExpr 0x55646c1638b8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55646c163a28 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55646c1639e0 <col:12> 'String::memo_t *' lvalue ->memo 0x55646c14c438
| |   | | `-CXXThisExpr 0x55646c1639d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55646c163a10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55646c1639a0 <col:12> 'String::memo_t *const' lvalue .memo 0x55646c14c438
| |   |     `-DeclRefExpr 0x55646c163980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55646c163568 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55646c163a70 <col:12>
| |     `-UnaryOperator 0x55646c163a58 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55646c163a48 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55646c1635d8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55646c1635d8
|   `-ParmVarDecl 0x55646c1636e8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55646c14c4b0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55646c14c6f8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55646c14c518 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55646c14c598 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55646c14c610 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55646c1520c0 <col:79, line:261:5>
|   |-BinaryOperator 0x55646c151d38 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55646c151cd0 <col:2, col:5> 'const char *' lvalue .data 0x55646c14c340
|   | | `-MemberExpr 0x55646c151ca0 <col:2> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|   | |   `-CXXThisExpr 0x55646c151c90 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55646c151d20 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55646c151d00 <col:12> 'const char *' lvalue ParmVar 0x55646c14c518 'data' 'const char *'
|   |-BinaryOperator 0x55646c151e00 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55646c151d98 <col:2, col:5> 'int' lvalue .length 0x55646c14c3a8
|   | | `-MemberExpr 0x55646c151d68 <col:2> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|   | |   `-CXXThisExpr 0x55646c151d58 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55646c151de8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55646c151dc8 <col:14> 'int' lvalue ParmVar 0x55646c14c598 'length' 'int'
|   `-IfStmt 0x55646c1520a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55646c151f20 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55646c151f08 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55646c151ee8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55646c151ec8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55646c151e60 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55646c14c438
|     |       | `-MemberExpr 0x55646c151e30 <col:7> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|     |       |   `-CXXThisExpr 0x55646c151e20 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55646c151eb0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55646c151e90 <col:17> 'String::memo_t *' lvalue ParmVar 0x55646c14c610 'memo' 'String::memo_t *'
|     `-CallExpr 0x55646c152080 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55646c152068 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55646c151f70 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55646c13d188 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55646c151fd8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55646c14bd08
|         `-ImplicitCastExpr 0x55646c151fc0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55646c151fa0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55646c14c610 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55646c14c9a8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55646c14c7c8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55646c14c848 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55646c14c8c0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55646c14c4b0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55646c152548 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55646c1526d8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55646c152640 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55646c1525b0 <col:2> '<bound member function type>' ->assign_memo 0x55646c14c6f8
|     | `-ImplicitCastExpr 0x55646c152678 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55646c1525a0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55646c152690 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55646c1525e0 <col:14> 'const char *' lvalue ParmVar 0x55646c14c7c8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55646c1526a8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55646c152600 <col:20> 'int' lvalue ParmVar 0x55646c14c848 'length' 'int'
|     `-ImplicitCastExpr 0x55646c1526c0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55646c152620 <col:28> 'String::memo_t *' lvalue ParmVar 0x55646c14c8c0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55646c14cb38 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55646c14ca78 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55646c152930 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55646c1528b0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55646c152700 <col:2> '<bound member function type>' ->assign_memo 0x55646c14c6f8
|     | `-CXXThisExpr 0x55646c1526f0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55646c1528e8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55646c152780 <col:14, col:19> 'const char *' lvalue .data 0x55646c14c340
|     |   `-MemberExpr 0x55646c152750 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55646c14c4b0
|     |     `-DeclRefExpr 0x55646c152730 <col:14> 'const String' lvalue ParmVar 0x55646c14ca78 'x' 'const String &'
|     |-ImplicitCastExpr 0x55646c152900 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55646c152800 <col:25, col:30> 'int' lvalue .length 0x55646c14c3a8
|     |   `-MemberExpr 0x55646c1527d0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55646c14c4b0
|     |     `-DeclRefExpr 0x55646c1527b0 <col:25> 'const String' lvalue ParmVar 0x55646c14ca78 'x' 'const String &'
|     `-ImplicitCastExpr 0x55646c152918 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55646c152880 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55646c14c438
|         `-MemberExpr 0x55646c152850 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55646c14c4b0
|           `-DeclRefExpr 0x55646c152830 <col:38> 'const String' lvalue ParmVar 0x55646c14ca78 'x' 'const String &'
|-CXXMethodDecl 0x55646c14cc00 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55646c1532f0 <col:31, line:278:5>
|   `-IfStmt 0x55646c1532d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55646c1529d0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55646c1529b8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55646c152988 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55646c14c438
|     |     `-MemberExpr 0x55646c152958 <col:6> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|     |       `-CXXThisExpr 0x55646c152948 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55646c1532b0 <col:15, line:277:2>
|       |-ParenExpr 0x55646c152e80 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55646c152e50 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55646c152ae0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55646c152ac8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55646c152ab0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55646c152a70 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55646c14bd08
|       |   |       `-ImplicitCastExpr 0x55646c152a58 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55646c152a28 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55646c14c438
|       |   |           `-MemberExpr 0x55646c1529f8 <col:27> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|       |   |             `-CXXThisExpr 0x55646c1529e8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55646c152b40 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55646c152b20 <col:54> 'int' 0
|       |   `-CallExpr 0x55646c152db0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55646c152d98 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55646c152d18 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55646c152df0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55646c152c28 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55646c152e08 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55646c152c58 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55646c152e20 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55646c152c90 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55646c152e38 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55646c152d00 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55646c152ce8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55646c152cb0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55646c1531d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55646c153090 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55646c153078 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55646c152ff0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55646c13e5d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55646c152fc0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55646c14bd08
|       | |   `-ImplicitCastExpr 0x55646c152fa8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55646c152f78 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55646c14c438
|       | |       `-MemberExpr 0x55646c152f48 <col:40> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|       | |         `-CXXThisExpr 0x55646c152f38 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55646c153190 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55646c153178 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55646c1530b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55646c14d8d8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55646c1531b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55646c153118 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55646c14c438
|       |       `-MemberExpr 0x55646c1530e8 <col:15> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|       |         `-CXXThisExpr 0x55646c1530d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55646c153290 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55646c153228 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55646c14c438
|         | `-MemberExpr 0x55646c1531f8 <col:6> 'String::rep_t' lvalue ->_r 0x55646c14c4b0
|         |   `-CXXThisExpr 0x55646c1531e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55646c153278 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55646c153258 <col:16> 'int' 0
|-CXXMethodDecl 0x55646c14ce98 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55646c14ccb8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55646c14cd38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55646c14cdb0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55646c14cf70 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55646c14d1c0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55646c14d028 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55646c14d0a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55646c14d120 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55646c14d3a8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55646c14d290 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55646c14d310 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55646c14d4a8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55646c1533c8 <col:41, line:286:5>
|   `-ReturnStmt 0x55646c1533b8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55646c153388 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55646c153350 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55646c153338 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55646c153318 <col:46> 'int' 1
|-CXXMethodDecl 0x55646c14d748 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55646c14d560 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55646c14d5e0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55646c14d660 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55646c14d8d8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55646c14d810 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55646c14d9a8 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55646c1512a8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55646c151190 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55646c151210 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55646c151368 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55646c151430 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55646c151538 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55646c1515b0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55646c151628 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55646c151690 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55646c151790 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55646c1517e0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c151770 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55646c151750 <col:22> 'int' 14
|-CXXMethodDecl 0x55646c1519f8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55646c151810 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55646c151890 <col:38> col:41 'int'
| `-ParmVarDecl 0x55646c151910 <col:43> col:46 'int'
|-FriendDecl 0x55646c151b00 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55646c151b90 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c45f158 <../elements/etherswitch/debugbridge.hh:7:1, line:22:1> line:7:7 class DebugBridge definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55646c45f2b8 <col:1, col:7> col:7 implicit referenced class DebugBridge
|-FieldDecl 0x55646c45f358 <line:9:3, col:10> col:10 _label 'String'
|-AccessSpecDecl 0x55646c45f3a8 <line:11:2, col:8> col:2 public
|-CXXConstructorDecl 0x55646c45f430 <line:13:3, col:15> col:3 DebugBridge 'void ()'
|-CXXDestructorDecl 0x55646c45f520 <line:14:3, col:16> col:3 ~DebugBridge 'void ()' noexcept-unevaluated 0x55646c45f520
| `-Overrides: [ 0x55646c446d78 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55646c45f650 <line:16:3, col:58> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55646c4481a8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55646c45ff98 <col:34, col:58>
|   `-ReturnStmt 0x55646c45ff88 <col:36, col:43>
|     `-ImplicitCastExpr 0x55646c45ff70 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55646c45ff48 <col:43> 'const char [12]' lvalue "DebugBridge"
|-CXXMethodDecl 0x55646c45f718 <line:17:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55646c448270 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55646c45fff8 <col:34, col:54>
|   `-ReturnStmt 0x55646c45ffe8 <col:36, col:43>
|     `-ImplicitCastExpr 0x55646c45ffd0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55646c45ffb0 <col:43> 'const char []' lvalue Var 0x55646c4484f0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55646c45f9f0 <line:19:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55646c4498d0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55646c45f8a0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55646c45f918 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55646c45fb40 <line:21:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x55646c4473b8 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x55646c45fab0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x55646c45fc18 <line:7:7> col:7 implicit DebugBridge 'void (const DebugBridge &)' inline default_delete noexcept-unevaluated 0x55646c45fc18
| `-ParmVarDecl 0x55646c45fd28 <col:7> col:7 'const DebugBridge &'
`-CXXMethodDecl 0x55646c45fdc8 <col:7> col:7 implicit operator= 'DebugBridge &(const DebugBridge &)' inline default_delete noexcept-unevaluated 0x55646c45fdc8
  `-ParmVarDecl 0x55646c45fed8 <col:7> col:7 'const DebugBridge &'

Layout: <CGRecordLayout
  LLVMType:%class.DebugBridge = type { %class.Element.base, %class.String }
  NonVirtualBaseLLVMType:%class.DebugBridge = type { %class.Element.base, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c195120 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55646c1952f8 prev 0x55646c195120 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55646c195388 <col:46, col:52> col:46 public
|-TypedefDecl 0x55646c1953b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c197570 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55646c197520 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55646c197500 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55646c1955c8 'type'
|     `-SubstTemplateTypeParmType 0x55646c195590 'String' sugar
|       |-TemplateTypeParmType 0x55646c107240 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c1071f0 'T'
|       `-RecordType 0x55646c143170 'String'
|         `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c197628 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55646c1975f0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55646c1975d0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55646c197570 'type'
|     `-ElaboratedType 0x55646c197520 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55646c197500 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55646c1955c8 'type'
|         `-SubstTemplateTypeParmType 0x55646c195590 'String' sugar
|           |-TemplateTypeParmType 0x55646c107240 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55646c1071f0 'T'
|           `-RecordType 0x55646c143170 'String'
|             `-CXXRecord 0x55646c1430e0 'String'
|-CXXMethodDecl 0x55646c1977a8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55646c1976b8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55646c197898 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55646c197978 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55646c197978
|-CXXMethodDecl 0x55646c197c48 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55646c197b50 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55646c197e88 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55646c197d00 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c197d78 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c198058 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55646c197f48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c197fc0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c1981b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55646c198288 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55646c1984d8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55646c198348 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55646c1983c0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c198738 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55646c1985a8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55646c198620 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c1988f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55646c198808 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c198ab8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55646c1989c0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c198b70 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55646c198c20 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55646c198e58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55646c198cd0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c198d48 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55646c1990f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55646c199000 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55646c1991c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55646c199210 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55646c199260 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c176fe0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55646c193b88 prev 0x55646c176fe0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55646c195090 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55646c195040 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55646c195020 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55646c194ed0 'type'
|     `-SubstTemplateTypeParmType 0x55646c194d60 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55646c0d6cb0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55646c0d6c58 'F'
|       `-RecordType 0x55646c1949c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55646c1948e0 'typed_array_memory'
|-FieldDecl 0x55646c1992b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55646c199300 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55646c199338 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|   |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55646c114218 'T'
|   `-RecordType 0x55646c143170 'String'
|     `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c1993c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55646c199390 'String &'
|   `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-RecordType 0x55646c143170 'String'
|       `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c199458 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55646c199420 'const String &'
|   `-QualType 0x55646c193c21 'const String' const
|     `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-RecordType 0x55646c143170 'String'
|         `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c1994e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55646c1994b0 'String *'
|   `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-RecordType 0x55646c143170 'String'
|       `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c199578 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55646c199540 'const String *'
|   `-QualType 0x55646c193c21 'const String' const
|     `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-RecordType 0x55646c143170 'String'
|         `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c19a1d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55646c19a180 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55646c19a160 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55646c19a098 'type'
|     `-LValueReferenceType 0x55646c19a060 'const String &'
|       `-QualType 0x55646c199e01 'const String' const
|         `-SubstTemplateTypeParmType 0x55646c199e00 'String' sugar
|           |-TemplateTypeParmType 0x55646c0dfd10 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55646c0dfcb8 'T'
|           `-RecordType 0x55646c143170 'String'
|             `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c19a238 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55646c199420 'const String &'
|   `-QualType 0x55646c193c21 'const String' const
|     `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-RecordType 0x55646c143170 'String'
|         `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c19a290 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c19a2f8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55646c1994b0 'String *'
|   `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-RecordType 0x55646c143170 'String'
|       `-CXXRecord 0x55646c1430e0 'String'
|-TypedefDecl 0x55646c19a360 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55646c199540 'const String *'
|   `-QualType 0x55646c193c21 'const String' const
|     `-SubstTemplateTypeParmType 0x55646c193c20 'String' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-RecordType 0x55646c143170 'String'
|         `-CXXRecord 0x55646c1430e0 'String'
|-EnumDecl 0x55646c19a3b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55646c19a4b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55646c19a490 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55646c115fc8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55646c115fa0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55646c115f80 <col:40> 'int' 1
|-CXXConstructorDecl 0x55646c19a538 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55646c19a7c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c19a5f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c19a690 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55646c19aa58 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55646c19a940 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55646c19b6f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55646c19b5e8 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55646c19ba10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55646c19b8f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55646c19bd20 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55646c19bc00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55646c19c010 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c19be58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c19bed0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55646c19c138 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55646c19c1e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c240 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c288 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55646c19c338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c390 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c458 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55646c19c508 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c560 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c5a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55646c19c658 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c6b0 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c6f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55646c19c7a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c800 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c848 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55646c19c8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c19c950 <col:30> Inherited
|-CXXMethodDecl 0x55646c19c978 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55646c19ca28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55646c19cad8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55646c19cc98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c19cb88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c19cc00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55646c19cde8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55646c19cd58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c19cf98 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55646c19cea0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55646c19d050 <col:20>
| `-OptimizeNoneAttr 0x55646c19d0a8 <col:30>
|-CXXMethodDecl 0x55646c19d1c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55646c19d0d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55646c19d280 <col:20>
| `-OptimizeNoneAttr 0x55646c19d2d8 <col:30>
|-CXXMethodDecl 0x55646c19d390 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55646c19d300 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c19d4d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55646c19d448 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c19d608 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55646c19d738 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55646c19d808 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55646c19d8d8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55646c19da18 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55646c19d988 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c19db60 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55646c19dad0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c19dca8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55646c19dc18 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55646c19dd60 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55646c19de60 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55646c19ddd0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55646c19df18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55646c19dfd8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55646c19e0d8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55646c19e258 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55646c19e198 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55646c19ea18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55646c19e310 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55646c19e978 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55646c19e878 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55646c19eaf8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55646c19ec48 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55646c19ebb8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55646c19ed00 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55646c19ef48 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c19edc0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55646c19ee38 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55646c19f0d8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55646c19f018 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55646c19f2e8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55646c19f1a0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55646c19f218 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55646c19f3a8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55646c19fb88 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55646c19f510 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55646c19fc58 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55646c19fc58

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c380cd0 prev 0x55646c37f838 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c380dc8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55646c380e58 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55646c380f98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55646c380e90 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55646c382440 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c382420 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55646c381fb8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55646c3824d0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55646c382490 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55646c380e90 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55646c382020 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55646c382550 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c382510 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55646c382080 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55646c382590 <col:54> 'bool' false
| `-CompoundStmt 0x55646c382698 <col:61, line:38:5>
|   `-BinaryOperator 0x55646c382678 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55646c382610 <col:9> 'const Element *' lvalue ->_context 0x55646c381f58
|     | `-CXXThisExpr 0x55646c382600 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55646c382660 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55646c382640 <col:20> 'int' 0
|-CXXConstructorDecl 0x55646c3811a8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c381058 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55646c3810d0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55646c382478 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c382458 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55646c381f58 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55646c3826f0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55646c3826b0 <col:20> 'const Element *' lvalue ParmVar 0x55646c381058 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55646c381fb8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55646c382770 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55646c382730 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55646c3810d0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55646c382020 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55646c3827f0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55646c3827b0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55646c382080 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55646c382830 <col:73> 'bool' false
| `-CompoundStmt 0x55646c3828a8 <col:80, line:46:5>
|-CXXMethodDecl 0x55646c3812d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55646c382920 <col:36, line:51:5>
|   `-ReturnStmt 0x55646c382910 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55646c3828f8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55646c3828c8 <col:16> 'const Element *const' lvalue ->_context 0x55646c381f58
|         `-CXXThisExpr 0x55646c3828b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55646c3813c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55646c3829a0 <col:32, line:57:5>
|   `-ReturnStmt 0x55646c382990 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55646c382978 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55646c382948 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55646c381fb8
|         `-CXXThisExpr 0x55646c382938 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55646c381488 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55646c381610 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55646c381540 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55646c381760 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55646c3816d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55646c3818b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55646c381820 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55646c381b30 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55646c381968 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55646c3819e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55646c381e68 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55646c381bf0 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55646c381c70 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55646c381d40 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55646c381f20 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55646c381f58 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55646c381fb8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55646c382020 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55646c382080 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55646c3820d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55646c3820d0
| `-ParmVarDecl 0x55646c3821e8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55646c382288 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55646c382288
| `-ParmVarDecl 0x55646c382398 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55646c4639a8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c3a1560 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55646c3a1738 prev 0x55646c3a1560 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55646c3a17c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55646c3a17f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a69b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55646c3a6960 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55646c3a1ca0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55646c3a1ba0 'type'
|     `-TemplateSpecializationType 0x55646c3a1b30 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55646c3a1a10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55646c3a19f0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55646c3a19d0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55646c3a1b10 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55646c3a1a30 'char_array'
|-TypedefDecl 0x55646c3a6a68 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55646c3a6a30 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55646c3a6a10 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55646c3a69b0 'type'
|     `-ElaboratedType 0x55646c3a6960 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55646c3a1ca0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55646c3a1ba0 'type'
|         `-TemplateSpecializationType 0x55646c3a1b30 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55646c3a1a10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55646c3a19f0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55646c3a19d0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55646c3a1b10 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55646c3a1a30 'char_array'
|-CXXMethodDecl 0x55646c3a6be8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55646c3a6af8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55646c3a6cd8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55646c3a6db8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55646c3a7088 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55646c3a6f90 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55646c3a72c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55646c3a7140 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c3a71b8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a7498 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55646c3a7388 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c3a7400 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a75f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55646c3a76c8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55646c3a7918 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55646c3a7788 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55646c3a7800 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a7b78 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55646c3a79e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55646c3a7a60 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a7d38 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55646c3a7c48 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a7ef8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55646c3a7e00 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a7fb0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55646c3a8060 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55646c3a8298 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55646c3a8110 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55646c3a8188 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55646c3a8538 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55646c3a8440 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55646c3a8600 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55646c3a8650 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55646c3a86a0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c39ff68 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55646c3a0178 prev 0x55646c39ff68 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55646c3a14d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55646c3a1480 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55646c3a1460 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55646c3a1310 'type'
|     `-SubstTemplateTypeParmType 0x55646c3a1130 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55646c0d6530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c0d64d8 'T'
|       `-RecordType 0x55646c3a0c80 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55646c3a0b98 'sized_array_memory'
|-FieldDecl 0x55646c3a86f0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55646c3a8740 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55646c3a8778 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|   |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55646c114218 'T'
|   `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a8808 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55646c3a87d0 'int &'
|   `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a88c8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55646c3a8890 'const int &'
|   `-QualType 0x55646c3a0211 'const int' const
|     `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a8958 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55646c3a8920 'int *'
|   `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a89e8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55646c3a89b0 'const int *'
|   `-QualType 0x55646c3a0211 'const int' const
|     `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a95d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55646c3a9580 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55646c3a9560 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55646c3a94f0 'type'
|     `-SubstTemplateTypeParmType 0x55646c3a92b0 'int' sugar
|       |-TemplateTypeParmType 0x55646c0e0440 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c0e03f0 'T'
|       `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a9638 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55646c3a8890 'const int &'
|   `-QualType 0x55646c3a0211 'const int' const
|     `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a9690 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a96f8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55646c3a8920 'int *'
|   `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|     |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55646c114218 'T'
|     `-BuiltinType 0x55646be175c0 'int'
|-TypedefDecl 0x55646c3a9760 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55646c3a89b0 'const int *'
|   `-QualType 0x55646c3a0211 'const int' const
|     `-SubstTemplateTypeParmType 0x55646c3a0210 'int' sugar
|       |-TemplateTypeParmType 0x55646c114270 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55646c114218 'T'
|       `-BuiltinType 0x55646be175c0 'int'
|-EnumDecl 0x55646c3a97b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55646c3a98b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55646c3a9890 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55646c115fc8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55646c115fa0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55646c115f80 <col:40> 'int' 1
|-CXXConstructorDecl 0x55646c3a9938 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55646c3a9b88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c3a99f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c3a9a90 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55646c3a9e48 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55646c3a9d30 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55646c3aa108 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55646c3a9ff0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55646c3aa450 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55646c3aa330 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55646c3ab1f0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55646c3ab0d8 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55646c3ab4e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c3ab328 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c3ab3a0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55646c3ab608 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55646c3ab6e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3ab740 <col:30> Inherited
|-CXXMethodDecl 0x55646c3ab788 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55646c3ab838 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3ab890 <col:30> Inherited
|-CXXMethodDecl 0x55646c3ab958 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55646c3aba08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3aba60 <col:30> Inherited
|-CXXMethodDecl 0x55646c3abaa8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55646c3abb58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3abbb0 <col:30> Inherited
|-CXXMethodDecl 0x55646c3abbf8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55646c3abca8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3abd00 <col:30> Inherited
|-CXXMethodDecl 0x55646c3abd48 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55646c3abdf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55646c3abe50 <col:30> Inherited
|-CXXMethodDecl 0x55646c3abe78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55646c3abf28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55646c3abfd8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55646c3ac198 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c3ac088 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55646c3ac100 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55646c3ac2e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55646c3ac258 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c3ac498 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55646c3ac3a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55646c3ac550 <col:20>
| `-OptimizeNoneAttr 0x55646c3ac5a8 <col:30>
|-CXXMethodDecl 0x55646c3ac6c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55646c3ac5d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55646c3ac780 <col:20>
| `-OptimizeNoneAttr 0x55646c3ac7d8 <col:30>
|-CXXMethodDecl 0x55646c3ac890 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55646c3ac800 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c3ac9d8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55646c3ac948 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c3acb08 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55646c3acc38 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55646c3acd08 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55646c3acdd8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55646c3acf18 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55646c3ace88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c3ad060 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55646c3acfd0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55646c3ad1a8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55646c3ad118 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55646c3ad260 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55646c3ad360 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55646c3ad2d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55646c3ad418 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55646c3ad4d8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55646c3ad5d8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55646c3ad758 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55646c3ad698 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55646c3adf18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55646c3ad810 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55646c3ade78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55646c3add78 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55646c3adff8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55646c3ae148 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55646c3ae0b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55646c3ae200 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55646c3ae448 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55646c3ae2c0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55646c3ae338 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55646c3ae608 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55646c3ae518 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55646c3ae858 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55646c3ae6d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55646c3ae748 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55646c3ae918 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55646c3aeb78 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55646c3aea80 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55646c3aec48 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c398b78 prev 0x55646c387838 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55646c398c70 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55646c398d60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55646c3c2b00 <col:16, line:828:9>
|-CXXDestructorDecl 0x55646c398e50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55646c3c2b10 <col:25, line:830:9>
|-CXXMethodDecl 0x55646c398f50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55646c399000 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55646c3990a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55646c3990a8
| `-ParmVarDecl 0x55646c3991b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55646c399978 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55646c399978
  `-ParmVarDecl 0x55646c399a88 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c387648 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55646c3877a8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55646c387838 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55646c3878f0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55646c3879f8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55646c387928 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55646c3b0888 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55646c3b0868 <col:31> 'int' 0
|-CXXConstructorDecl 0x55646c387d18 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55646c387b90 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55646c387c08 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55646c3b08c0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55646c3b08a0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55646c387ef0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c387de0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55646c387e58 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55646c3b08f8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55646c3b08d8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55646c3882a8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55646c388090 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55646c388108 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55646c388180 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55646c3b0930 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55646c3b0910 <col:31> 'int' 0
|-CXXConstructorDecl 0x55646c388468 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55646c3883a8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55646c388560 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55646c388748 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55646c388650 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55646c388838 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55646c3b0d20 <col:24, line:291:5>
|   `-ReturnStmt 0x55646c3b0d10 <line:290:9, col:79>
|     `-BinaryOperator 0x55646c3b0cf0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55646c3b0b88 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55646c3b0ae0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55646c3b0ac0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55646c3b09b8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55646c3b09a0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55646c3b0988 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55646c3b0958 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55646c39ff00
|       | |   |       `-CXXThisExpr 0x55646c3b0948 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55646c3b0aa8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55646c3b0a90 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55646c3b0a58 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55646c3b0a28 <col:28, col:35> '<bound member function type>' ->size 0x55646c19c978
|       | |           `-ImplicitCastExpr 0x55646c3b0a78 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55646c3b0a10 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55646c3b09e0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55646c39ff00
|       | |                 `-CXXThisExpr 0x55646c3b09d0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55646c3b0b70 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55646c3b0b58 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55646c3b0b40 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55646c3b0b10 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55646c3aed90
|       |         `-CXXThisExpr 0x55646c3b0b00 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55646c3b0cd0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55646c3b0cb8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55646c3b0ca0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55646c3b0c60 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55646c3b0c48 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55646c3b0bb8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55646c3aeeb8
|         |     |   `-CXXThisExpr 0x55646c3b0ba8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55646c3b0be8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55646c3b0c80 <col:79> 'int' 0
|-CXXMethodDecl 0x55646c3888f8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55646c3b0ef8 <col:32, line:296:5>
|   `-ReturnStmt 0x55646c3b0ee8 <line:295:9, col:49>
|     `-BinaryOperator 0x55646c3b0ec8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55646c3b0da8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55646c3b0d90 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55646c3b0d78 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55646c3b0d48 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55646c3aed90
|       |       `-CXXThisExpr 0x55646c3b0d38 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55646c3b0ea8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55646c3b0e90 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55646c3b0e78 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55646c3b0e38 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55646c3b0e20 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55646c3b0dd0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55646c3aeeb8
|         |     |   `-CXXThisExpr 0x55646c3b0dc0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55646c3b0e00 <col:43> 'int' 0
|         `-IntegerLiteral 0x55646c3b0e58 <col:49> 'int' 0
|-CXXMethodDecl 0x55646c3889e8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55646c3b1108 <col:19, line:306:5>
|   |-IfStmt 0x55646c3b1028 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55646c3b0f68 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55646c3b0f50 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55646c3b0f20 <col:13> 'Vector<String> *' lvalue ->_conf 0x55646c39ff00
|   | |     `-CXXThisExpr 0x55646c3b0f10 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55646c3b1008 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55646c3b0fd8 <col:13, col:20> '<bound member function type>' ->clear 0x55646c19f3a8
|   |     `-ImplicitCastExpr 0x55646c3b0fc0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55646c3b0f90 <col:13> 'Vector<String> *' lvalue ->_conf 0x55646c39ff00
|   |         `-CXXThisExpr 0x55646c3b0f80 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55646c3b10b0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55646c3b1080 <col:9, col:16> '<bound member function type>' .clear 0x55646c3ae918
|   |   `-MemberExpr 0x55646c3b1050 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55646c3aed30
|   |     `-CXXThisExpr 0x55646c3b1040 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55646c3b10f8 <line:305:9, col:17>
|     `-UnaryOperator 0x55646c3b10e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b10d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55646c388c68 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55646c388b70 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55646c388de8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55646c388d20 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55646c389168 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55646c388e90 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55646c3890c8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55646c388f38 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55646c388fb0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55646c3b1418 <col:67, line:327:5>
|     |-WhileStmt 0x55646c3b13c8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55646c3b11e0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55646c3b1170 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55646c1b3688 0x55646c16fcc0 0x55646c16f970 0x55646c16f260 0x55646c142230 0x55646c0cef40
|     | | |-DeclRefExpr 0x55646c3b1130 <col:16> 'Iter' lvalue ParmVar 0x55646c388f38 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55646c3b1150 <col:25> 'Iter' lvalue ParmVar 0x55646c388fb0 'end' 'Iter'
|     | `-CompoundStmt 0x55646c3b13a8 <col:30, line:325:9>
|     |   |-CallExpr 0x55646c3b1348 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55646c3b1228 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55646c3b1318 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55646c3b12a8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|     |   |   `-DeclRefExpr 0x55646c3b1288 <col:24> 'Iter' lvalue ParmVar 0x55646c388f38 'begin' 'Iter'
|     |   `-UnaryOperator 0x55646c3b1390 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55646c3b1370 <col:15> 'Iter' lvalue ParmVar 0x55646c388f38 'begin' 'Iter'
|     `-ReturnStmt 0x55646c3b1408 <line:326:9, col:17>
|       `-UnaryOperator 0x55646c3b13f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b13e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55646c389270 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55646c3891e0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55646c3893b8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55646c389328 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55646c389480 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55646c3b14f8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55646c3b1498 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55646c3b1448 <col:9> '<bound member function type>' ->reset_from 0x55646c3af838
|   | | `-CXXThisExpr 0x55646c3b1438 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55646c3b1478 <col:20> 'int' 0
|   `-ReturnStmt 0x55646c3b14e8 <line:352:9, col:17>
|     `-UnaryOperator 0x55646c3b14d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b14c0 <col:17> 'Args *' this
|-VarDecl 0x55646c389538 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55646c3895a0 <col:38> 'int' 1
|-VarDecl 0x55646c389630 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55646c389698 <col:39> 'int' 2
|-VarDecl 0x55646c389728 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55646c389790 <col:39> 'int' 4
|-VarDecl 0x55646c389820 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55646c389888 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55646c389c20 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55646c389900 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c389b80 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55646c3899b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c389a58 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b1650 <col:43, line:371:5>
|     `-ReturnStmt 0x55646c3b1640 <line:370:9, col:34>
|       `-CallExpr 0x55646c3b1608 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b1528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b15a8 <col:21> 'const char *' lvalue ParmVar 0x55646c3899b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b15c8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55646c3b15e8 <col:33> 'T' lvalue ParmVar 0x55646c389a58 'x' 'T &'
|-FunctionTemplateDecl 0x55646c389f58 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55646c389c88 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c389eb8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55646c389d40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c389de8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b17a0 <col:45, line:375:5>
|     `-ReturnStmt 0x55646c3b1790 <line:374:9, col:42>
|       `-CallExpr 0x55646c3b1758 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b1678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b16f8 <col:21> 'const char *' lvalue ParmVar 0x55646c389d40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b1718 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int'
|         `-DeclRefExpr 0x55646c3b1738 <col:41> 'T' lvalue ParmVar 0x55646c389de8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38a288 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55646c389fc0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c38a1e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55646c38a070 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38a118 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b18f0 <col:45, line:379:5>
|     `-ReturnStmt 0x55646c3b18e0 <line:378:9, col:43>
|       `-CallExpr 0x55646c3b18a8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b17c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b1848 <col:21> 'const char *' lvalue ParmVar 0x55646c38a070 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b1868 <col:30> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         `-DeclRefExpr 0x55646c3b1888 <col:42> 'T' lvalue ParmVar 0x55646c38a118 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38a5b8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55646c38a2f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55646c38a518 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55646c38a3a0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55646c38a448 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55646c3b1af0 <col:46, line:383:5>
| |   `-ReturnStmt 0x55646c3b1ae0 <line:382:9, col:55>
| |     `-CallExpr 0x55646c3b1aa8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55646c3b1918 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55646c3b1998 <col:21> 'const char *' lvalue ParmVar 0x55646c38a3a0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55646c3b1a68 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55646c3b1a18 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55646c3b19f8 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55646c3b1a50 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55646c3b1a30 <col:42> 'const int' lvalue Var 0x55646c389630 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55646c3b1a88 <col:54> 'T' lvalue ParmVar 0x55646c38a448 'x' 'T &'
| `-CXXMethodDecl 0x55646c463e38 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x55646c463c50 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55646c463d28 <col:40, col:43> col:43 x 'String &'
|-FunctionTemplateDecl 0x55646c38a9b8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55646c38a620 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c38a918 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55646c38a6d0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38a750 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55646c38a7f8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b1c30 <col:54, line:388:5>
|     |-CallExpr 0x55646c3b1bb8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b1b08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55646c3b1b48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b1b58 <col:30> 'const char *' lvalue ParmVar 0x55646c38a6d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b1b78 <col:39> 'int' lvalue ParmVar 0x55646c38a750 'flags' 'int'
|     | `-DeclRefExpr 0x55646c3b1b98 <col:46> 'T' lvalue ParmVar 0x55646c38a7f8 'x' 'T &'
|     `-ReturnStmt 0x55646c3b1c20 <line:387:9, col:17>
|       `-UnaryOperator 0x55646c3b1c08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b1bf8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c38ae68 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55646c38aa28 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c38aaa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55646c38adc8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55646c38ab68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38ac08 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38aca8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b1da0 <col:74, line:403:5>
|     `-ReturnStmt 0x55646c3b1d90 <line:402:9, col:56>
|       `-CallExpr 0x55646c3b1d50 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b1c60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b1cd0 <col:28> 'const char *' lvalue ParmVar 0x55646c38ab68 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b1cf0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55646c3b1d10 <col:40> 'T' lvalue ParmVar 0x55646c38ac08 'x' 'T &'
|         `-DeclRefExpr 0x55646c3b1d30 <col:43> 'const V' lvalue ParmVar 0x55646c38aca8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55646c38b2d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55646c38aed8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c38af58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55646c38b238 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55646c38b018 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38b0b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38b158 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b1f08 <col:76, line:407:5>
|     `-ReturnStmt 0x55646c3b1ef8 <line:406:9, col:65>
|       `-CallExpr 0x55646c3b1eb8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b1dc8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b1e38 <col:28> 'const char *' lvalue ParmVar 0x55646c38b018 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b1e58 <col:37> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         |-DeclRefExpr 0x55646c3b1e78 <col:49> 'T' lvalue ParmVar 0x55646c38b0b8 'x' 'T &'
|         `-DeclRefExpr 0x55646c3b1e98 <col:52> 'const V' lvalue ParmVar 0x55646c38b158 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55646c38b828 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55646c38b348 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c38b3c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55646c38b788 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55646c38b488 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38b508 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55646c38b5a8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38b648 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b2070 <col:85, line:412:5>
|     |-CallExpr 0x55646c3b1ff0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b1f20 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55646c3b1f60 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b1f70 <col:37> 'const char *' lvalue ParmVar 0x55646c38b488 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b1f90 <col:46> 'int' lvalue ParmVar 0x55646c38b508 'flags' 'int'
|     | |-DeclRefExpr 0x55646c3b1fb0 <col:53> 'T' lvalue ParmVar 0x55646c38b5a8 'x' 'T &'
|     | `-DeclRefExpr 0x55646c3b1fd0 <col:56> 'const V' lvalue ParmVar 0x55646c38b648 'default_value' 'const V &'
|     `-ReturnStmt 0x55646c3b2060 <line:411:9, col:17>
|       `-UnaryOperator 0x55646c3b2048 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b2038 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c38bcb8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55646c38b8a0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38b918 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c38bc18 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c38b9d8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38ba50 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38baf8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b21f0 <col:53, line:425:5>
|     `-ReturnStmt 0x55646c3b21e0 <line:424:9, col:42>
|       `-CallExpr 0x55646c3b21a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b20a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2120 <col:21> 'const char *' lvalue ParmVar 0x55646c38b9d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b2140 <col:30> 'int' 0
|         |-DeclRefExpr 0x55646c3b2160 <col:33> 'P' lvalue ParmVar 0x55646c38ba50 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b2180 <col:41> 'T' lvalue ParmVar 0x55646c38baf8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38c108 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55646c38bd28 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38bda8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c38c068 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c38be68 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38bee0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38bf88 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b2368 <col:55, line:429:5>
|     `-ReturnStmt 0x55646c3b2358 <line:428:9, col:50>
|       `-CallExpr 0x55646c3b2318 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2298 <col:21> 'const char *' lvalue ParmVar 0x55646c38be68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b22b8 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int'
|         |-DeclRefExpr 0x55646c3b22d8 <col:41> 'P' lvalue ParmVar 0x55646c38bee0 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b22f8 <col:49> 'T' lvalue ParmVar 0x55646c38bf88 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38c558 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55646c38c178 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38c1f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c38c4b8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c38c2b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38c330 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38c3d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b24e0 <col:55, line:433:5>
|     `-ReturnStmt 0x55646c3b24d0 <line:432:9, col:51>
|       `-CallExpr 0x55646c3b2490 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2390 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2410 <col:21> 'const char *' lvalue ParmVar 0x55646c38c2b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b2430 <col:30> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         |-DeclRefExpr 0x55646c3b2450 <col:42> 'P' lvalue ParmVar 0x55646c38c330 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b2470 <col:50> 'T' lvalue ParmVar 0x55646c38c3d8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38c9a8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55646c38c5c8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38c648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c38c908 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c38c708 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38c780 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38c828 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b2708 <col:56, line:437:5>
|     `-ReturnStmt 0x55646c3b26f8 <line:436:9, col:63>
|       `-CallExpr 0x55646c3b26b8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2588 <col:21> 'const char *' lvalue ParmVar 0x55646c38c708 'keyword' 'const char *'
|         |-BinaryOperator 0x55646c3b2658 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55646c3b2608 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55646c3b25e8 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55646c3b2640 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55646c3b2620 <col:42> 'const int' lvalue Var 0x55646c389630 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55646c3b2678 <col:54> 'P' lvalue ParmVar 0x55646c38c780 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b2698 <col:62> 'T' lvalue ParmVar 0x55646c38c828 'x' 'T &'
|-FunctionTemplateDecl 0x55646c38ced8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55646c38ca18 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38ca98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c38ce38 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55646c38cb58 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38cbd8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55646c38cc50 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38ccf8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b2870 <col:64, line:442:5>
|     |-CallExpr 0x55646c3b27f0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b2720 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55646c3b2760 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b2770 <col:30> 'const char *' lvalue ParmVar 0x55646c38cb58 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b2790 <col:39> 'int' lvalue ParmVar 0x55646c38cbd8 'flags' 'int'
|     | |-DeclRefExpr 0x55646c3b27b0 <col:46> 'P' lvalue ParmVar 0x55646c38cc50 'parser' 'P'
|     | `-DeclRefExpr 0x55646c3b27d0 <col:54> 'T' lvalue ParmVar 0x55646c38ccf8 'x' 'T &'
|     `-ReturnStmt 0x55646c3b2860 <line:441:9, col:17>
|       `-UnaryOperator 0x55646c3b2848 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b2838 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c38d4d8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55646c38cf50 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38cfc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55646c38d048 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55646c38d438 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55646c38d110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38d188 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38d228 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38d2f8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b2a08 <col:84, line:458:5>
|     `-ReturnStmt 0x55646c3b29f8 <line:457:9, col:64>
|       `-CallExpr 0x55646c3b29b0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b28a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2910 <col:28> 'const char *' lvalue ParmVar 0x55646c38d110 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b2930 <col:37> 'int' 0
|         |-DeclRefExpr 0x55646c3b2950 <col:40> 'P' lvalue ParmVar 0x55646c38d188 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b2970 <col:48> 'T' lvalue ParmVar 0x55646c38d228 'x' 'T &'
|         `-DeclRefExpr 0x55646c3b2990 <col:51> 'const V' lvalue ParmVar 0x55646c38d2f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55646c38da58 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55646c38d550 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38d5c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55646c38d648 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55646c38d9b8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55646c38d710 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38d788 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38d828 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38d8c8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b2b98 <col:86, line:462:5>
|     `-ReturnStmt 0x55646c3b2b88 <line:461:9, col:73>
|       `-CallExpr 0x55646c3b2b40 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2a30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2aa0 <col:28> 'const char *' lvalue ParmVar 0x55646c38d710 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b2ac0 <col:37> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         |-DeclRefExpr 0x55646c3b2ae0 <col:49> 'P' lvalue ParmVar 0x55646c38d788 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b2b00 <col:57> 'T' lvalue ParmVar 0x55646c38d828 'x' 'T &'
|         `-DeclRefExpr 0x55646c3b2b20 <col:60> 'const V' lvalue ParmVar 0x55646c38d8c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55646c38e0c8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55646c38dad0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38db60 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55646c38dbd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55646c38e028 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55646c38dca0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38dd20 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55646c38dd98 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38de38 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55646c38ded8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55646c3b2d28 <col:95, line:467:5>
|     |-CallExpr 0x55646c3b2ca0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b2bb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55646c3b2bf0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b2c00 <col:37> 'const char *' lvalue ParmVar 0x55646c38dca0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b2c20 <col:46> 'int' lvalue ParmVar 0x55646c38dd20 'flags' 'int'
|     | |-DeclRefExpr 0x55646c3b2c40 <col:53> 'P' lvalue ParmVar 0x55646c38dd98 'parser' 'P'
|     | |-DeclRefExpr 0x55646c3b2c60 <col:61> 'T' lvalue ParmVar 0x55646c38de38 'x' 'T &'
|     | `-DeclRefExpr 0x55646c3b2c80 <col:64> 'const V' lvalue ParmVar 0x55646c38ded8 'default_value' 'const V &'
|     `-ReturnStmt 0x55646c3b2d18 <line:466:9, col:17>
|       `-UnaryOperator 0x55646c3b2d00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b2cf0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c38e6a8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55646c38e148 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38e1c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c38e248 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c38e608 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c38e310 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38e388 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38e428 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55646c38e4c8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55646c3b2ed0 <col:63, line:481:5>
|     `-ReturnStmt 0x55646c3b2ec0 <line:480:9, col:47>
|       `-CallExpr 0x55646c3b2e78 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2dd8 <col:21> 'const char *' lvalue ParmVar 0x55646c38e310 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b2df8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55646c3b2e18 <col:33> 'P' lvalue ParmVar 0x55646c38e388 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b2e38 <col:41> 'T1' lvalue ParmVar 0x55646c38e428 'x1' 'T1 &'
|         `-DeclRefExpr 0x55646c3b2e58 <col:45> 'T2' lvalue ParmVar 0x55646c38e4c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55646c38ec28 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55646c38e720 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38e798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c38e818 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c38eb88 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c38e8e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38e958 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38e9f8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55646c38ea98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55646c3b3070 <col:65, line:485:5>
|     `-ReturnStmt 0x55646c3b3060 <line:484:9, col:55>
|       `-CallExpr 0x55646c3b3018 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b2ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b2f78 <col:21> 'const char *' lvalue ParmVar 0x55646c38e8e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b2f98 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int'
|         |-DeclRefExpr 0x55646c3b2fb8 <col:41> 'P' lvalue ParmVar 0x55646c38e958 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b2fd8 <col:49> 'T1' lvalue ParmVar 0x55646c38e9f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55646c3b2ff8 <col:53> 'T2' lvalue ParmVar 0x55646c38ea98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55646c38f1a8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55646c38eca0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38ed18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c38ed98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c38f108 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c38ee60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38eed8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38ef78 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55646c38f018 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55646c3b3210 <col:65, line:489:5>
|     `-ReturnStmt 0x55646c3b3200 <line:488:9, col:56>
|       `-CallExpr 0x55646c3b31b8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b3098 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b3118 <col:21> 'const char *' lvalue ParmVar 0x55646c38ee60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b3138 <col:30> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         |-DeclRefExpr 0x55646c3b3158 <col:42> 'P' lvalue ParmVar 0x55646c38eed8 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b3178 <col:50> 'T1' lvalue ParmVar 0x55646c38ef78 'x1' 'T1 &'
|         `-DeclRefExpr 0x55646c3b3198 <col:54> 'T2' lvalue ParmVar 0x55646c38f018 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55646c38f728 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55646c38f220 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38f298 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c38f318 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c38f688 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c38f3e0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38f458 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38f4f8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55646c38f598 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55646c3b3460 <col:66, line:493:5>
|     `-ReturnStmt 0x55646c3b3450 <line:492:9, col:68>
|       `-CallExpr 0x55646c3b3408 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b3238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b32b8 <col:21> 'const char *' lvalue ParmVar 0x55646c38f3e0 'keyword' 'const char *'
|         |-BinaryOperator 0x55646c3b3388 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55646c3b3338 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55646c3b3318 <col:30> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55646c3b3370 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55646c3b3350 <col:42> 'const int' lvalue Var 0x55646c389630 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55646c3b33a8 <col:54> 'P' lvalue ParmVar 0x55646c38f458 'parser' 'P'
|         |-DeclRefExpr 0x55646c3b33c8 <col:62> 'T1' lvalue ParmVar 0x55646c38f4f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55646c3b33e8 <col:66> 'T2' lvalue ParmVar 0x55646c38f598 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55646c38fd88 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55646c38f7a0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c38f818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c38f898 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c38fce8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c38f960 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38f9e0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55646c38fa58 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55646c38faf8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55646c38fb98 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55646c3b35f0 <col:74, line:498:5>
|     |-CallExpr 0x55646c3b3568 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b3478 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55646c3b34b8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b34c8 <col:30> 'const char *' lvalue ParmVar 0x55646c38f960 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b34e8 <col:39> 'int' lvalue ParmVar 0x55646c38f9e0 'flags' 'int'
|     | |-DeclRefExpr 0x55646c3b3508 <col:46> 'P' lvalue ParmVar 0x55646c38fa58 'parser' 'P'
|     | |-DeclRefExpr 0x55646c3b3528 <col:54> 'T1' lvalue ParmVar 0x55646c38faf8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55646c3b3548 <col:58> 'T2' lvalue ParmVar 0x55646c38fb98 'x2' 'T2 &'
|     `-ReturnStmt 0x55646c3b35e0 <line:497:9, col:17>
|       `-UnaryOperator 0x55646c3b35c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b35b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c3900e8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55646c38fe08 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c390048 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55646c38fec0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c38ff38 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b4da8 <col:52, line:509:5>
|     `-ReturnStmt 0x55646c3b4d98 <line:508:9, col:44>
|       `-CallExpr 0x55646c3b4d60 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b3620 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b4d00 <col:26> 'const char *' lvalue ParmVar 0x55646c38fec0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b4d20 <col:35> 'int' 0
|         `-DeclRefExpr 0x55646c3b4d40 <col:38> 'P' lvalue ParmVar 0x55646c38ff38 'parser' 'P'
|-FunctionTemplateDecl 0x55646c3903e8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55646c390150 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c390348 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55646c390200 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c390278 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b4ee8 <col:54, line:513:5>
|     `-ReturnStmt 0x55646c3b4ed8 <line:512:9, col:52>
|       `-CallExpr 0x55646c3b4ea0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b4dd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b4e40 <col:26> 'const char *' lvalue ParmVar 0x55646c390200 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b4e60 <col:35> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int'
|         `-DeclRefExpr 0x55646c3b4e80 <col:46> 'P' lvalue ParmVar 0x55646c390278 'parser' 'P'
|-FunctionTemplateDecl 0x55646c3906e8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55646c390450 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c390648 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55646c390500 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c390578 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b5028 <col:54, line:517:5>
|     `-ReturnStmt 0x55646c3b5018 <line:516:9, col:53>
|       `-CallExpr 0x55646c3b4fe0 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b4f10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b4f80 <col:26> 'const char *' lvalue ParmVar 0x55646c390500 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b4fa0 <col:35> 'const int' lvalue Var 0x55646c389630 'positional' 'const int'
|         `-DeclRefExpr 0x55646c3b4fc0 <col:47> 'P' lvalue ParmVar 0x55646c390578 'parser' 'P'
|-FunctionTemplateDecl 0x55646c3909e8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55646c390750 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c390948 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55646c390800 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c390878 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b5218 <col:55, line:521:5>
|     `-ReturnStmt 0x55646c3b5208 <line:520:9, col:65>
|       `-CallExpr 0x55646c3b51d0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b50c0 <col:26> 'const char *' lvalue ParmVar 0x55646c390800 'keyword' 'const char *'
|         |-BinaryOperator 0x55646c3b5190 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55646c3b5140 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55646c3b5120 <col:35> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55646c3b5178 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55646c3b5158 <col:47> 'const int' lvalue Var 0x55646c389630 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55646c3b51b0 <col:59> 'P' lvalue ParmVar 0x55646c390878 'parser' 'P'
|-FunctionTemplateDecl 0x55646c390db8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55646c390a50 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c390d18 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55646c390b00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c390b80 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55646c390bf8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b5358 <col:63, line:526:5>
|     |-CallExpr 0x55646c3b52e0 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b5230 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55646c3b5270 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b5280 <col:35> 'const char *' lvalue ParmVar 0x55646c390b00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55646c3b52a0 <col:44> 'int' lvalue ParmVar 0x55646c390b80 'flags' 'int'
|     | `-DeclRefExpr 0x55646c3b52c0 <col:51> 'P' lvalue ParmVar 0x55646c390bf8 'parser' 'P'
|     `-ReturnStmt 0x55646c3b5348 <line:525:9, col:17>
|       `-UnaryOperator 0x55646c3b5330 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b5320 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c391208 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55646c390e28 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c390ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c391168 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c390f68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c390fe0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55646c391088 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b54b0 <col:58, line:541:5>
|     `-ReturnStmt 0x55646c3b54a0 <line:540:9, col:39>
|       `-CallExpr 0x55646c3b5468 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5388 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5408 <col:21> 'const char *' lvalue ParmVar 0x55646c390f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b5428 <col:30> 'P' lvalue ParmVar 0x55646c390fe0 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b5448 <col:38> 'T' lvalue ParmVar 0x55646c391088 'x' 'T &'
|-FunctionTemplateDecl 0x55646c391658 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55646c391278 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c3912f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c3915b8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c3913b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c391430 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3914d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b55e8 <col:60, line:545:5>
|     `-ReturnStmt 0x55646c3b55d8 <line:544:9, col:41>
|       `-CallExpr 0x55646c3b55a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b54d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5540 <col:23> 'const char *' lvalue ParmVar 0x55646c3913b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b5560 <col:32> 'P' lvalue ParmVar 0x55646c391430 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b5580 <col:40> 'T' lvalue ParmVar 0x55646c3914d8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c391aa8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55646c3916c8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c391748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c391a08 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c391808 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c391880 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55646c391928 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b5720 <col:60, line:549:5>
|     `-ReturnStmt 0x55646c3b5710 <line:548:9, col:41>
|       `-CallExpr 0x55646c3b56d8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5678 <col:23> 'const char *' lvalue ParmVar 0x55646c391808 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b5698 <col:32> 'P' lvalue ParmVar 0x55646c391880 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b56b8 <col:40> 'T' lvalue ParmVar 0x55646c391928 'x' 'T &'
|-FunctionTemplateDecl 0x55646c391f48 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55646c391b70 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c391be8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c391ea8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c391ca8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c391d20 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55646c391dc8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b5858 <col:61, line:553:5>
|     `-ReturnStmt 0x55646c3b5848 <line:552:9, col:42>
|       `-CallExpr 0x55646c3b5810 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5748 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b57b0 <col:24> 'const char *' lvalue ParmVar 0x55646c391ca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b57d0 <col:33> 'P' lvalue ParmVar 0x55646c391d20 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b57f0 <col:41> 'T' lvalue ParmVar 0x55646c391dc8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c392428 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55646c391fb8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c392038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c392388 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55646c3920f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c392178 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55646c3921f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55646c392298 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b59d0 <col:69, line:557:5>
|     `-ReturnStmt 0x55646c3b59c0 <line:556:9, col:46>
|       `-CallExpr 0x55646c3b5980 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5900 <col:21> 'const char *' lvalue ParmVar 0x55646c3920f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b5920 <col:30> 'int' lvalue ParmVar 0x55646c392178 'flags' 'int'
|         |-DeclRefExpr 0x55646c3b5940 <col:37> 'P' lvalue ParmVar 0x55646c3921f0 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b5960 <col:45> 'T' lvalue ParmVar 0x55646c392298 'x' 'T &'
|-FunctionTemplateDecl 0x55646c392738 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55646c3924a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c392698 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55646c392550 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c3925c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b5b10 <col:56, line:571:5>
|     `-ReturnStmt 0x55646c3b5b00 <line:570:9, col:48>
|       `-CallExpr 0x55646c3b5ac8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b59f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5a68 <col:30> 'const char *' lvalue ParmVar 0x55646c392550 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b5a88 <col:39> 'int' 0
|         `-DeclRefExpr 0x55646c3b5aa8 <col:42> 'P' lvalue ParmVar 0x55646c3925c8 'parser' 'P'
|-FunctionTemplateDecl 0x55646c392ac8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55646c3927a0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c392a28 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55646c392850 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c3928d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55646c392948 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55646c3b5ce0 <col:67, line:576:5>
|     |-CallExpr 0x55646c3b5c68 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b5b28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55646c3b5b68 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b5b78 <col:39> 'const char *' lvalue ParmVar 0x55646c392850 'keyword' 'const char *'
|     | |-BinaryOperator 0x55646c3b5c28 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55646c3b5bd8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55646c3b5b98 <col:48> 'int' lvalue ParmVar 0x55646c3928d0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55646c3b5c10 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55646c3b5bf0 <col:56> 'const int' lvalue Var 0x55646c389820 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55646c3b5c48 <col:68> 'P' lvalue ParmVar 0x55646c392948 'parser' 'P'
|     `-ReturnStmt 0x55646c3b5cd0 <line:575:9, col:17>
|       `-UnaryOperator 0x55646c3b5cb8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b5ca8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c392f18 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55646c392b38 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c392bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c392e78 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55646c392c78 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c392cf0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55646c392d98 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b5e50 <col:62, line:592:5>
|     `-ReturnStmt 0x55646c3b5e40 <line:591:9, col:51>
|       `-CallExpr 0x55646c3b5e00 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b5d10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b5d80 <col:30> 'const char *' lvalue ParmVar 0x55646c392c78 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b5da0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55646c3b5dc0 <col:42> 'P' lvalue ParmVar 0x55646c392cf0 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b5de0 <col:50> 'T' lvalue ParmVar 0x55646c392d98 'x' 'T &'
|-FunctionTemplateDecl 0x55646c3933f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55646c392f88 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c393008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c393358 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55646c3930c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c393148 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55646c3931c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55646c393268 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b6048 <col:73, line:597:5>
|     |-CallExpr 0x55646c3b5fc8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b5e68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55646c3b5ea8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b5eb8 <col:39> 'const char *' lvalue ParmVar 0x55646c3930c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55646c3b5f68 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55646c3b5f18 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55646c3b5ed8 <col:48> 'int' lvalue ParmVar 0x55646c393148 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55646c3b5f50 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55646c3b5f30 <col:56> 'const int' lvalue Var 0x55646c389820 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55646c3b5f88 <col:68> 'P' lvalue ParmVar 0x55646c3931c0 'parser' 'P'
|     | `-DeclRefExpr 0x55646c3b5fa8 <col:76> 'T' lvalue ParmVar 0x55646c393268 'x' 'T &'
|     `-ReturnStmt 0x55646c3b6038 <line:596:9, col:17>
|       `-UnaryOperator 0x55646c3b6020 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b6010 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c3939a8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55646c393470 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c3934e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c393908 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55646c3935a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c393620 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3937e0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55646c3b61b8 <col:65, line:614:5>
|     `-ReturnStmt 0x55646c3b61a8 <line:613:9, col:46>
|       `-CallExpr 0x55646c3b6168 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b6078 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b60e8 <col:25> 'const char *' lvalue ParmVar 0x55646c3935a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b6108 <col:34> 'int' 0
|         |-DeclRefExpr 0x55646c3b6128 <col:37> 'P' lvalue ParmVar 0x55646c393620 'parser' 'P'
|         `-DeclRefExpr 0x55646c3b6148 <col:45> 'Vector<T>' lvalue ParmVar 0x55646c3937e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55646c393dd8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55646c393a18 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c393d38 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55646c393ad0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c393c20 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55646c3b63d0 <col:55, line:618:5>
|     `-ReturnStmt 0x55646c3b63c0 <line:617:9, col:55>
|       `-CallExpr 0x55646c3b6380 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b61e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b6250 <col:25> 'const char *' lvalue ParmVar 0x55646c393ad0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55646c3b6270 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55646c3b6340 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55646c3b6360 <col:54> 'Vector<T>' lvalue ParmVar 0x55646c393c20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55646c3943a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55646c393e40 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c393eb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c394308 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55646c393f78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c393ff8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55646c394070 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3941c0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55646c3b65c8 <col:76, line:623:5>
|     |-CallExpr 0x55646c3b6548 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55646c3b63e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55646c3b6428 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55646c3b6438 <col:34> 'const char *' lvalue ParmVar 0x55646c393f78 'keyword' 'const char *'
|     | |-BinaryOperator 0x55646c3b64e8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55646c3b6498 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55646c3b6458 <col:43> 'int' lvalue ParmVar 0x55646c393ff8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55646c3b64d0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55646c3b64b0 <col:51> 'const int' lvalue Var 0x55646c389820 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55646c3b6508 <col:63> 'P' lvalue ParmVar 0x55646c394070 'parser' 'P'
|     | `-DeclRefExpr 0x55646c3b6528 <col:71> 'Vector<T>' lvalue ParmVar 0x55646c3941c0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55646c3b65b8 <line:622:9, col:17>
|       `-UnaryOperator 0x55646c3b65a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b6590 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c3948e8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55646c394420 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c394498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c394848 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55646c394558 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c3945d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55646c394720 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55646c3b6830 <col:66, line:627:5>
|     `-ReturnStmt 0x55646c3b6820 <line:626:9, col:59>
|       `-CallExpr 0x55646c3b67e0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55646c3b65f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55646c3b6668 <col:25> 'const char *' lvalue ParmVar 0x55646c394558 'keyword' 'const char *'
|         |-DeclRefExpr 0x55646c3b6688 <col:34> 'int' lvalue ParmVar 0x55646c3945d8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55646c3b67a0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55646c3b67c0 <col:58> 'Vector<T>' lvalue ParmVar 0x55646c394720 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55646c394978 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55646c3b68b0 <col:25, line:633:5>
|   `-ReturnStmt 0x55646c3b68a0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55646c3b6888 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55646c3b6858 <col:16> 'const bool' lvalue ->_status 0x55646c39fd68
|         `-CXXThisExpr 0x55646c3b6848 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55646c394b28 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55646c394a60 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55646c3b6998 <col:27, line:639:5>
|   |-BinaryOperator 0x55646c3b6940 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55646c3b68c8 <col:9> 'bool' lvalue ParmVar 0x55646c394a60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55646c3b6928 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55646c3b68f8 <col:13> 'bool' lvalue ->_status 0x55646c39fd68
|   |     `-CXXThisExpr 0x55646c3b68e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55646c3b6988 <line:638:9, col:17>
|     `-UnaryOperator 0x55646c3b6970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b6960 <col:17> 'Args *' this
|-CXXMethodDecl 0x55646c394ca8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55646c394be8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55646c3b6a88 <col:39, line:644:5>
|   |-BinaryOperator 0x55646c3b6a30 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55646c3b69b8 <col:9> 'bool' lvalue ParmVar 0x55646c394be8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55646c3b6a18 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55646c3b69e8 <col:13> 'const bool' lvalue ->_status 0x55646c39fd68
|   |     `-CXXThisExpr 0x55646c3b69d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55646c3b6a78 <line:643:9, col:17>
|     `-UnaryOperator 0x55646c3b6a60 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b6a50 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55646c394d70 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55646c3b6b30 <col:30, line:651:5>
|   `-ReturnStmt 0x55646c3b6b20 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55646c3b6b08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55646c3b6ad8 <col:16> 'bool' lvalue ->_read_status 0x55646c382080
|         `-ImplicitCastExpr 0x55646c3b6ab8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55646c3b6aa8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55646c394eb8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55646c394e28 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55646c3b6c38 <col:32, line:658:5>
|   |-BinaryOperator 0x55646c3b6be0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55646c3b6b48 <col:9> 'bool' lvalue ParmVar 0x55646c394e28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55646c3b6bc8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55646c3b6b98 <col:13> 'bool' lvalue ->_read_status 0x55646c382080
|   |     `-ImplicitCastExpr 0x55646c3b6b78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55646c3b6b68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55646c3b6c28 <line:657:9, col:17>
|     `-UnaryOperator 0x55646c3b6c10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b6c00 <col:17> 'Args *' this
|-CXXMethodDecl 0x55646c395008 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55646c394f78 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55646c3b6d48 <col:44, line:663:5>
|   |-BinaryOperator 0x55646c3b6cf0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55646c3b6c58 <col:9> 'bool' lvalue ParmVar 0x55646c394f78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55646c3b6cd8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55646c3b6ca8 <col:13> 'bool' lvalue ->_read_status 0x55646c382080
|   |     `-ImplicitCastExpr 0x55646c3b6c88 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55646c3b6c78 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55646c3b6d38 <line:662:9, col:17>
|     `-UnaryOperator 0x55646c3b6d20 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c3b6d10 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55646c3950d0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55646c395198 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55646c395260 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55646c395328 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55646c395638 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55646c3953c8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c395598 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55646c3954a8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b70a0 <col:19, line:706:5>
|     `-IfStmt 0x55646c3b7078 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55646c3b6e48 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55646c3b6fa8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55646c3b6f78 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55646c3b6f38 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55646c3b6ea0 <col:42> '<bound member function type>' ->simple_slot 0x55646c3b04f0
|       |     | `-CXXThisExpr 0x55646c3b6e90 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x55646c3b6ef0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x55646c3b6ed0 <col:55> 'T' lvalue ParmVar 0x55646c3954a8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55646c3b6f18 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55646c3b7068 <line:705:13, col:34>
|         `-CallExpr 0x55646c3b7040 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55646c3b6fc8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55646c3b7020 <col:33> 'T' lvalue ParmVar 0x55646c3954a8 'x' 'T &'
|-FunctionTemplateDecl 0x55646c395908 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55646c395698 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c395868 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55646c395778 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55646c3b7480 <col:31, line:717:5>
|     |-DeclStmt 0x55646c3b71e0 <line:713:9, col:23>
|     | `-VarDecl 0x55646c3b70c8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55646c3b71b8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55646c3b7140 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55646c3b7198 <col:21> 'T' lvalue ParmVar 0x55646c395778 'x' 'T &'
|     |-IfStmt 0x55646c3b7430 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55646c3b72d8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55646c3b7410 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55646c3b73b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55646c3b7340 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|     |   | `-DeclRefExpr 0x55646c3b7320 <col:14> 'T *' lvalue Var 0x55646c3b70c8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55646c3b73f0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55646c3b7468 <line:716:9, col:16>
|       `-DeclRefExpr 0x55646c3b7448 <col:16> 'T *' lvalue Var 0x55646c3b70c8 's' 'T *'
|-FunctionTemplateDecl 0x55646c395d38 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55646c395968 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c3959e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55646c395c98 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55646c395ac8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55646c395b80 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55646c3b7790 <col:37, line:726:5>
|     |-IfStmt 0x55646c3b7720 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55646c3b7740 <line:723:13, col:26>
|     | | `-VarDecl 0x55646c3b74e8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55646c3b75d8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55646c3b7560 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55646c3b75b8 <col:25> 'T' lvalue ParmVar 0x55646c395ac8 'x' 'T &'
|     | |-DeclRefExpr 0x55646c3b7600 <col:16> 'T *' lvalue Var 0x55646c3b74e8 's' 'T *'
|     | `-BinaryOperator 0x55646c3b7700 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55646c3b76b0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55646c3b7640 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|     |   | `-DeclRefExpr 0x55646c3b7620 <col:14> 'T *' lvalue Var 0x55646c3b74e8 's' 'T *'
|     |   `-DeclRefExpr 0x55646c3b76e0 <col:18> 'const V' lvalue ParmVar 0x55646c395b80 'value' 'const V &'
|     `-ReturnStmt 0x55646c3b7780 <line:725:9, col:17>
|       `-UnaryOperator 0x55646c3b7768 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55646c3b7758 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55646c396138 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55646c395da0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55646c396098 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55646c395e50 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c395ed0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55646c395f78 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55646c3b85b0 <col:65, line:737:5>
|     |-DeclStmt 0x55646c3b7828 <line:732:9, col:26>
|     | `-VarDecl 0x55646c3b77c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55646c3b8578 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55646c3b8598 <line:733:13, col:58>
|       | `-VarDecl 0x55646c3b7850 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55646c3b7a30 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55646c3b7a00 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55646c3b79e8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55646c3b79c8 <col:26, col:58> 'String' (CXXTemporary 0x55646c3b79c8)
|       |           `-CXXMemberCallExpr 0x55646c3b7958 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55646c3b78c8 <col:26> '<bound member function type>' ->find 0x55646c3afb08
|       |             | `-CXXThisExpr 0x55646c3b78b8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55646c3b7990 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3b78f8 <col:31> 'const char *' lvalue ParmVar 0x55646c395e50 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55646c3b79a8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3b7918 <col:40> 'int' lvalue ParmVar 0x55646c395ed0 'flags' 'int'
|       |             `-DeclRefExpr 0x55646c3b7938 <col:47> 'Args::Slot *' lvalue Var 0x55646c3b77c0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55646c3b7ae8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55646c3b7ad0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55646c3b7ab0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55646c3b7a80 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |       `-ImplicitCastExpr 0x55646c3b7a68 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55646c3b7a48 <col:20> 'String' lvalue Var 0x55646c3b7850 'str' 'String'
|       `-CompoundStmt 0x55646c3b8558 <col:61, line:736:9>
|         |-DeclStmt 0x55646c3b7fa0 <line:734:13, col:76>
|         | `-VarDecl 0x55646c3b7b38 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55646c3b7f70 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55646c3b7ee0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55646c3b7f28 <col:60> 'T' lvalue ParmVar 0x55646c395f78 'variable' 'T &'
|         |     `-UnaryOperator 0x55646c3b7f58 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55646c3b7f48 <col:71> 'Args *' this
|         `-CallExpr 0x55646c3b8528 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55646c3b7fc8 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|           | `-CXXThisExpr 0x55646c3b7fb8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55646c3b84e8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55646c3b7ff8 <col:23> 'T *' lvalue Var 0x55646c3b7b38 's' 'T *'
|           | `-CallExpr 0x55646c3b84a8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55646c3b8280 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55646c3b8380 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55646c3b83a0 <col:86> 'String' lvalue Var 0x55646c3b7850 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55646c3b8450 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55646c3b83e0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|           |   | `-DeclRefExpr 0x55646c3b83c0 <col:92> 'T *' lvalue Var 0x55646c3b7b38 's' 'T *'
|           |   `-UnaryOperator 0x55646c3b8490 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55646c3b8480 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55646c3b8508 <col:103> 'Args::Slot *' lvalue Var 0x55646c3b77c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c396688 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55646c3961a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c396228 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55646c3965e8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55646c3962e8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c396368 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55646c396408 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55646c3964a8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55646c3bb7e0 <col:88, line:745:5>
|     |-DeclStmt 0x55646c3b8648 <line:741:9, col:26>
|     | `-VarDecl 0x55646c3b85e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55646c3b8868 <line:742:9, col:55>
|     | `-VarDecl 0x55646c3b8670 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55646c3b8850 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55646c3b8820 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55646c3b8808 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55646c3b87e8 <col:22, col:54> 'String' (CXXTemporary 0x55646c3b87e8)
|     |           `-CXXMemberCallExpr 0x55646c3b8778 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55646c3b86e8 <col:22> '<bound member function type>' ->find 0x55646c3afb08
|     |             | `-CXXThisExpr 0x55646c3b86d8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55646c3b87b0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55646c3b8718 <col:27> 'const char *' lvalue ParmVar 0x55646c3962e8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55646c3b87c8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55646c3b8738 <col:36> 'int' lvalue ParmVar 0x55646c396368 'flags' 'int'
|     |             `-DeclRefExpr 0x55646c3b8758 <col:43> 'Args::Slot *' lvalue Var 0x55646c3b85e0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55646c3b8c40 <line:743:9, col:72>
|     | `-VarDecl 0x55646c3b88b8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55646c3b8c10 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55646c3b8b80 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55646c3b8bc8 <col:56> 'T' lvalue ParmVar 0x55646c396408 'variable' 'T &'
|     |     `-UnaryOperator 0x55646c3b8bf8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55646c3b8be8 <col:67> 'Args *' this
|     `-CallExpr 0x55646c3bb7b0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55646c3b8c68 <col:9> '<bound member function type>' ->postparse 0x55646c3afd18
|       | `-CXXThisExpr 0x55646c3b8c58 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55646c3bb770 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55646c3b8c98 <col:19> 'T *' lvalue Var 0x55646c3b88b8 's' 'T *'
|       | `-ParenExpr 0x55646c3bb750 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55646c3bb720 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55646c3bb708 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55646c3bb6f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55646c3bb6d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55646c3bb6a0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |     |       `-ImplicitCastExpr 0x55646c3bb688 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55646c3b8cb8 <col:25> 'String' lvalue Var 0x55646c3b8670 'str' 'String'
|       |     |-CallExpr 0x55646c3bb4f8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55646c3bb2d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55646c3bb3d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55646c3bb3f0 <col:89> 'String' lvalue Var 0x55646c3b8670 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55646c3bb4a0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55646c3bb430 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|       |     | | `-DeclRefExpr 0x55646c3bb410 <col:95> 'T *' lvalue Var 0x55646c3b88b8 's' 'T *'
|       |     | `-UnaryOperator 0x55646c3bb4e0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55646c3bb4d0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55646c3bb668 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55646c3bb648 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55646c3bb618 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55646c3bb5c8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55646c3bb558 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|       |         | | `-DeclRefExpr 0x55646c3bb538 <col:109> 'T *' lvalue Var 0x55646c3b88b8 's' 'T *'
|       |         | `-DeclRefExpr 0x55646c3bb5f8 <col:113> 'const V' lvalue ParmVar 0x55646c3964a8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55646c3bb638 <col:120> 'bool' true
|       `-DeclRefExpr 0x55646c3bb790 <col:128> 'Args::Slot *' lvalue Var 0x55646c3b85e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c396bb8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55646c396700 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c396778 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c396b18 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55646c396838 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c3968b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55646c396930 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3969d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55646c3bc3d8 <col:75, line:754:5>
|     |-DeclStmt 0x55646c3bb888 <line:749:9, col:26>
|     | `-VarDecl 0x55646c3bb820 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55646c3bc3a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55646c3bc3c0 <line:750:13, col:58>
|       | `-VarDecl 0x55646c3bb8b0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55646c3bba90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55646c3bba60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55646c3bba48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55646c3bba28 <col:26, col:58> 'String' (CXXTemporary 0x55646c3bba28)
|       |           `-CXXMemberCallExpr 0x55646c3bb9b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55646c3bb928 <col:26> '<bound member function type>' ->find 0x55646c3afb08
|       |             | `-CXXThisExpr 0x55646c3bb918 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55646c3bb9f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3bb958 <col:31> 'const char *' lvalue ParmVar 0x55646c396838 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55646c3bba08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3bb978 <col:40> 'int' lvalue ParmVar 0x55646c3968b8 'flags' 'int'
|       |             `-DeclRefExpr 0x55646c3bb998 <col:47> 'Args::Slot *' lvalue Var 0x55646c3bb820 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55646c3bbb48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55646c3bbb30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55646c3bbb10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55646c3bbae0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |       `-ImplicitCastExpr 0x55646c3bbac8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55646c3bbaa8 <col:20> 'String' lvalue Var 0x55646c3bb8b0 'str' 'String'
|       `-CompoundStmt 0x55646c3bc380 <col:61, line:753:9>
|         |-DeclStmt 0x55646c3bbf20 <line:751:13, col:63>
|         | `-VarDecl 0x55646c3bbb98 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55646c3bbef0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55646c3bbe60 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55646c3bbea8 <col:47> 'T' lvalue ParmVar 0x55646c3969d8 'variable' 'T &'
|         |     `-UnaryOperator 0x55646c3bbed8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55646c3bbec8 <col:58> 'Args *' this
|         `-CallExpr 0x55646c3bc350 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55646c3bbf48 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|           | `-CXXThisExpr 0x55646c3bbf38 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55646c3bc310 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55646c3bbf78 <col:23> 'T *' lvalue Var 0x55646c3bbb98 's' 'T *'
|           | `-CallExpr 0x55646c3bc2d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55646c3bc160 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55646c3bc1a8 <col:56> 'P' lvalue ParmVar 0x55646c396930 'parser' 'P'
|           |   |-DeclRefExpr 0x55646c3bc1c8 <col:64> 'String' lvalue Var 0x55646c3bb8b0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55646c3bc278 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55646c3bc208 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|           |   | `-DeclRefExpr 0x55646c3bc1e8 <col:70> 'T *' lvalue Var 0x55646c3bbb98 's' 'T *'
|           |   `-UnaryOperator 0x55646c3bc2b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55646c3bc2a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55646c3bc330 <col:81> 'Args::Slot *' lvalue Var 0x55646c3bb820 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c397218 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55646c396c30 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55646c396ca8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55646c396d28 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55646c397178 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55646c396df0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c396e70 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55646c396ee8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55646c396f88 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55646c397028 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55646c3bd168 <col:98, line:762:5>
|     |-DeclStmt 0x55646c3bc470 <line:758:9, col:26>
|     | `-VarDecl 0x55646c3bc408 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55646c3bc690 <line:759:9, col:55>
|     | `-VarDecl 0x55646c3bc498 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55646c3bc678 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55646c3bc648 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55646c3bc630 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55646c3bc610 <col:22, col:54> 'String' (CXXTemporary 0x55646c3bc610)
|     |           `-CXXMemberCallExpr 0x55646c3bc5a0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55646c3bc510 <col:22> '<bound member function type>' ->find 0x55646c3afb08
|     |             | `-CXXThisExpr 0x55646c3bc500 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55646c3bc5d8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55646c3bc540 <col:27> 'const char *' lvalue ParmVar 0x55646c396df0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55646c3bc5f0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55646c3bc560 <col:36> 'int' lvalue ParmVar 0x55646c396e70 'flags' 'int'
|     |             `-DeclRefExpr 0x55646c3bc580 <col:43> 'Args::Slot *' lvalue Var 0x55646c3bc408 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55646c3bcab0 <line:760:9, col:59>
|     | `-VarDecl 0x55646c3bc6e8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55646c3bca80 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55646c3bc9f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55646c3bca38 <col:43> 'T' lvalue ParmVar 0x55646c396f88 'variable' 'T &'
|     |     `-UnaryOperator 0x55646c3bca68 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55646c3bca58 <col:54> 'Args *' this
|     `-CallExpr 0x55646c3bd138 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55646c3bcad8 <col:9> '<bound member function type>' ->postparse 0x55646c3afd18
|       | `-CXXThisExpr 0x55646c3bcac8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55646c3bd0f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55646c3bcb08 <col:19> 'T *' lvalue Var 0x55646c3bc6e8 's' 'T *'
|       | `-ParenExpr 0x55646c3bd0d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55646c3bd0a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55646c3bd090 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55646c3bd078 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55646c3bd058 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55646c3bd028 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |     |       `-ImplicitCastExpr 0x55646c3bd010 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55646c3bcb28 <col:25> 'String' lvalue Var 0x55646c3bc498 'str' 'String'
|       |     |-CallExpr 0x55646c3bce80 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55646c3bcd10 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55646c3bcd58 <col:59> 'P' lvalue ParmVar 0x55646c396ee8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55646c3bcd78 <col:67> 'String' lvalue Var 0x55646c3bc498 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55646c3bce28 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55646c3bcdb8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|       |     | | `-DeclRefExpr 0x55646c3bcd98 <col:73> 'T *' lvalue Var 0x55646c3bc6e8 's' 'T *'
|       |     | `-UnaryOperator 0x55646c3bce68 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55646c3bce58 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55646c3bcff0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55646c3bcfd0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55646c3bcfa0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55646c3bcf50 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55646c3bcee0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|       |         | | `-DeclRefExpr 0x55646c3bcec0 <col:87> 'T *' lvalue Var 0x55646c3bc6e8 's' 'T *'
|       |         | `-DeclRefExpr 0x55646c3bcf80 <col:91> 'const V' lvalue ParmVar 0x55646c397028 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55646c3bcfc0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55646c3bd118 <col:106> 'Args::Slot *' lvalue Var 0x55646c3bc408 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c397888 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55646c397298 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c397318 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55646c397398 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55646c3977e8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55646c397460 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c3974e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55646c397558 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3975f8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55646c397698 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55646c3be148 <col:60, line:773:5>
|     |-DeclStmt 0x55646c3bd210 <line:767:9, col:26>
|     | `-VarDecl 0x55646c3bd1a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55646c3be110 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55646c3be130 <line:768:13, col:58>
|       | `-VarDecl 0x55646c3bd238 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55646c3bd418 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55646c3bd3e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55646c3bd3d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55646c3bd3b0 <col:26, col:58> 'String' (CXXTemporary 0x55646c3bd3b0)
|       |           `-CXXMemberCallExpr 0x55646c3bd340 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55646c3bd2b0 <col:26> '<bound member function type>' ->find 0x55646c3afb08
|       |             | `-CXXThisExpr 0x55646c3bd2a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55646c3bd378 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3bd2e0 <col:31> 'const char *' lvalue ParmVar 0x55646c397460 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55646c3bd390 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3bd300 <col:40> 'int' lvalue ParmVar 0x55646c3974e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55646c3bd320 <col:47> 'Args::Slot *' lvalue Var 0x55646c3bd1a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55646c3bd4d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55646c3bd4b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55646c3bd498 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55646c3bd468 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |       `-ImplicitCastExpr 0x55646c3bd450 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55646c3bd430 <col:20> 'String' lvalue Var 0x55646c3bd238 'str' 'String'
|       `-CompoundStmt 0x55646c3be0e8 <col:61, line:772:9>
|         |-DeclStmt 0x55646c3bd810 <line:769:13, col:66>
|         | `-VarDecl 0x55646c3bd528 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55646c3bd7e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55646c3bd750 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55646c3bd798 <col:49> 'T1' lvalue ParmVar 0x55646c3975f8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55646c3bd7c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55646c3bd7b8 <col:61> 'Args *' this
|         |-DeclStmt 0x55646c3bdb80 <line:770:13, col:66>
|         | `-VarDecl 0x55646c3bd898 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55646c3bdb50 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55646c3bdac0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55646c3bdb08 <col:49> 'T2' lvalue ParmVar 0x55646c397698 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55646c3bdb38 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55646c3bdb28 <col:61> 'Args *' this
|         `-CallExpr 0x55646c3be0b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55646c3bdba8 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|           | `-CXXThisExpr 0x55646c3bdb98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55646c3be078 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55646c3bdc18 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55646c3bdbd8 <col:23> 'T1 *' lvalue Var 0x55646c3bd528 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55646c3bdbf8 <col:29> 'T2 *' lvalue Var 0x55646c3bd898 's2' 'T2 *'
|           | `-CallExpr 0x55646c3be030 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55646c3bde00 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55646c3bde48 <col:63> 'P' lvalue ParmVar 0x55646c397558 'parser' 'P'
|           |   |-DeclRefExpr 0x55646c3bde68 <col:71> 'String' lvalue Var 0x55646c3bd238 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55646c3bdf18 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55646c3bdea8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|           |   | `-DeclRefExpr 0x55646c3bde88 <col:77> 'T1 *' lvalue Var 0x55646c3bd528 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55646c3bdfd8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55646c3bdf68 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|           |   | `-DeclRefExpr 0x55646c3bdf48 <col:82> 'T2 *' lvalue Var 0x55646c3bd898 's2' 'T2 *'
|           |   `-UnaryOperator 0x55646c3be018 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55646c3be008 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55646c3be098 <col:94> 'Args::Slot *' lvalue Var 0x55646c3bd1a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c397c78 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55646c397908 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c397bd8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55646c3979c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c397a40 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55646c397ab8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55646c3be660 <col:67, line:780:5>
|     |-DeclStmt 0x55646c3be1e0 <line:777:9, col:26>
|     | `-VarDecl 0x55646c3be178 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55646c3be628 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55646c3be648 <line:778:13, col:58>
|       | `-VarDecl 0x55646c3be208 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55646c3be3e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55646c3be3b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55646c3be3a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55646c3be380 <col:26, col:58> 'String' (CXXTemporary 0x55646c3be380)
|       |           `-CXXMemberCallExpr 0x55646c3be310 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55646c3be280 <col:26> '<bound member function type>' ->find 0x55646c3afb08
|       |             | `-CXXThisExpr 0x55646c3be270 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55646c3be348 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3be2b0 <col:31> 'const char *' lvalue ParmVar 0x55646c3979c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55646c3be360 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55646c3be2d0 <col:40> 'int' lvalue ParmVar 0x55646c397a40 'flags' 'int'
|       |             `-DeclRefExpr 0x55646c3be2f0 <col:47> 'Args::Slot *' lvalue Var 0x55646c3be178 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55646c3be4a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55646c3be488 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55646c3be468 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55646c3be438 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|       |       `-ImplicitCastExpr 0x55646c3be420 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55646c3be400 <col:20> 'String' lvalue Var 0x55646c3be208 'str' 'String'
|       `-CallExpr 0x55646c3be5f8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55646c3be4c8 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|         | `-CXXThisExpr 0x55646c3be4b8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55646c3be5a8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55646c3be518 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55646c3be4f8 <col:23> 'P' lvalue ParmVar 0x55646c397ab8 'parser' 'P'
|         | |-DeclRefExpr 0x55646c3be560 <col:36> 'String' lvalue Var 0x55646c3be208 'str' 'String'
|         | `-UnaryOperator 0x55646c3be590 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55646c3be580 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55646c3be5d8 <col:49> 'Args::Slot *' lvalue Var 0x55646c3be178 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55646c398018 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55646c397ce8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55646c397f78 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55646c397da0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c397e20 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55646c397e98 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55646c3befd0 <col:71, line:792:5>
|     |-DeclStmt 0x55646c3be6f8 <line:784:9, col:26>
|     | `-VarDecl 0x55646c3be690 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55646c3be7c8 <line:785:9, col:29>
|     | `-VarDecl 0x55646c3be728 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55646c3be7b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55646c3be790 <col:28> 'int' 1
|     |-WhileStmt 0x55646c3bee80 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55646c3beea0 <line:786:16, col:61>
|     | | `-VarDecl 0x55646c3be7f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55646c3be9d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55646c3be9a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55646c3be988 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55646c3be968 <col:29, col:61> 'String' (CXXTemporary 0x55646c3be968)
|     | |           `-CXXMemberCallExpr 0x55646c3be8f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55646c3be868 <col:29> '<bound member function type>' ->find 0x55646c3afb08
|     | |             | `-CXXThisExpr 0x55646c3be858 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55646c3be930 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3be898 <col:34> 'const char *' lvalue ParmVar 0x55646c397da0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55646c3be948 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3be8b8 <col:43> 'int' lvalue ParmVar 0x55646c397e20 'flags' 'int'
|     | |             `-DeclRefExpr 0x55646c3be8d8 <col:50> 'Args::Slot *' lvalue Var 0x55646c3be690 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55646c3bea88 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55646c3bea70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55646c3bea50 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55646c3bea20 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|     | |       `-ImplicitCastExpr 0x55646c3bea08 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55646c3be9e8 <col:23> 'String' lvalue Var 0x55646c3be7f0 'str' 'String'
|     | `-CompoundStmt 0x55646c3bee58 <col:64, line:790:9>
|     |   |-CallExpr 0x55646c3bebe0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55646c3beab0 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|     |   | | `-CXXThisExpr 0x55646c3beaa0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55646c3beb90 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55646c3beb00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55646c3beae0 <col:23> 'P' lvalue ParmVar 0x55646c397e98 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55646c3beb48 <col:36> 'String' lvalue Var 0x55646c3be7f0 'str' 'String'
|     |   | | `-UnaryOperator 0x55646c3beb78 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55646c3beb68 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55646c3bebc0 <col:49> 'Args::Slot *' lvalue Var 0x55646c3be690 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55646c3bed78 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55646c3bec10 <col:13> 'int' lvalue Var 0x55646c3be728 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55646c3bed60 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55646c3bed40 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55646c3beca8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55646c3bec88 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55646c3bec70 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55646c3bec30 <col:28> 'int' lvalue Var 0x55646c3be728 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55646c3bec50 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55646c3bed28 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55646c3becf8 <col:49> 'bool' lvalue ->_read_status 0x55646c382080
|     |   |         `-ImplicitCastExpr 0x55646c3becd8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55646c3becc8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55646c3bee28 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55646c3bed98 <col:13> 'int' lvalue ParmVar 0x55646c397e20 'flags' 'int'
|     |     `-UnaryOperator 0x55646c3bee10 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55646c3bedf8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55646c3bedd8 <col:23> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55646c3befb0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55646c3beee8 <col:9> 'bool' lvalue ->_read_status 0x55646c382080
|       | `-ImplicitCastExpr 0x55646c3beec8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55646c3beeb8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55646c3bef90 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55646c3bef70 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55646c3bef58 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55646c3bef18 <col:25> 'int' lvalue Var 0x55646c3be728 'read_status' 'int'
|           `-IntegerLiteral 0x55646c3bef38 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55646c3984f8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55646c398088 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c398108 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c398458 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55646c3981c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c398248 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55646c3982c0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55646c398368 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55646c3c1cc0 <col:84, line:805:5>
|     |-DeclStmt 0x55646c3c0dd0 <line:796:9, col:26>
|     | `-VarDecl 0x55646c3bf010 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55646c3c0ea0 <line:797:9, col:29>
|     | `-VarDecl 0x55646c3c0e00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55646c3c0e88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55646c3c0e68 <col:28> 'int' 1
|     |-DeclStmt 0x55646c3c11e0 <line:798:9, col:71>
|     | `-VarDecl 0x55646c3c0ef8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55646c3c11b0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55646c3c1120 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55646c3c1168 <col:55> 'T' lvalue ParmVar 0x55646c398368 'variable' 'T &'
|     |     `-UnaryOperator 0x55646c3c1198 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55646c3c1188 <col:66> 'Args *' this
|     |-WhileStmt 0x55646c3c1b70 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55646c3c1b90 <line:799:16, col:61>
|     | | `-VarDecl 0x55646c3c1208 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55646c3c13e8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55646c3c13b8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55646c3c13a0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55646c3c1380 <col:29, col:61> 'String' (CXXTemporary 0x55646c3c1380)
|     | |           `-CXXMemberCallExpr 0x55646c3c1310 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55646c3c1280 <col:29> '<bound member function type>' ->find 0x55646c3afb08
|     | |             | `-CXXThisExpr 0x55646c3c1270 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55646c3c1348 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3c12b0 <col:34> 'const char *' lvalue ParmVar 0x55646c3981c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55646c3c1360 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3c12d0 <col:43> 'int' lvalue ParmVar 0x55646c398248 'flags' 'int'
|     | |             `-DeclRefExpr 0x55646c3c12f0 <col:50> 'Args::Slot *' lvalue Var 0x55646c3bf010 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55646c3c14a0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55646c3c1488 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55646c3c1468 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55646c3c1438 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|     | |       `-ImplicitCastExpr 0x55646c3c1420 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55646c3c1400 <col:23> 'String' lvalue Var 0x55646c3c1208 'str' 'String'
|     | `-CompoundStmt 0x55646c3c1b48 <col:64, line:803:9>
|     |   |-CallExpr 0x55646c3c18d0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55646c3c14c8 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|     |   | | `-CXXThisExpr 0x55646c3c14b8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55646c3c1890 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55646c3c14f8 <col:23> 'T *' lvalue Var 0x55646c3c0ef8 's' 'T *'
|     |   | | `-CallExpr 0x55646c3c1850 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55646c3c16e0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55646c3c1728 <col:56> 'P' lvalue ParmVar 0x55646c3982c0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55646c3c1748 <col:64> 'String' lvalue Var 0x55646c3c1208 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55646c3c17f8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55646c3c1788 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|     |   | |   | `-DeclRefExpr 0x55646c3c1768 <col:70> 'T *' lvalue Var 0x55646c3c0ef8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55646c3c1838 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55646c3c1828 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55646c3c18b0 <col:81> 'Args::Slot *' lvalue Var 0x55646c3bf010 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55646c3c1a68 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55646c3c1900 <col:13> 'int' lvalue Var 0x55646c3c0e00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55646c3c1a50 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55646c3c1a30 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55646c3c1998 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55646c3c1978 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55646c3c1960 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55646c3c1920 <col:28> 'int' lvalue Var 0x55646c3c0e00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55646c3c1940 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55646c3c1a18 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55646c3c19e8 <col:49> 'bool' lvalue ->_read_status 0x55646c382080
|     |   |         `-ImplicitCastExpr 0x55646c3c19c8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55646c3c19b8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55646c3c1b18 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55646c3c1a88 <col:13> 'int' lvalue ParmVar 0x55646c398248 'flags' 'int'
|     |     `-UnaryOperator 0x55646c3c1b00 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55646c3c1ae8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55646c3c1ac8 <col:23> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55646c3c1ca0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55646c3c1bd8 <col:9> 'bool' lvalue ->_read_status 0x55646c382080
|       | `-ImplicitCastExpr 0x55646c3c1bb8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55646c3c1ba8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55646c3c1c80 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55646c3c1c60 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55646c3c1c48 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55646c3c1c08 <col:25> 'int' lvalue Var 0x55646c3c0e00 'read_status' 'int'
|           `-IntegerLiteral 0x55646c3c1c28 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55646c398ad8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55646c398570 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55646c3985e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55646c398a38 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55646c3986a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55646c398728 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55646c3987a0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55646c3988f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55646c3c2ac8 <col:87, line:821:5>
|     |-DeclStmt 0x55646c3c1d70 <line:809:9, col:26>
|     | `-VarDecl 0x55646c3c1d08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55646c3c1e40 <line:810:9, col:29>
|     | `-VarDecl 0x55646c3c1da0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55646c3c1e28 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55646c3c1e08 <col:28> 'int' 1
|     |-DeclStmt 0x55646c3c2088 <line:811:9, col:38>
|     | `-VarDecl 0x55646c3c1f70 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55646c3c2060 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55646c3c1fe8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55646c3c2040 <col:29> 'Vector<T>' lvalue ParmVar 0x55646c3988f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55646c3c2978 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55646c3c2998 <line:812:16, col:61>
|     | | `-VarDecl 0x55646c3c20b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55646c3c2290 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55646c3c2260 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55646c3c2248 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55646c3c2228 <col:29, col:61> 'String' (CXXTemporary 0x55646c3c2228)
|     | |           `-CXXMemberCallExpr 0x55646c3c21b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55646c3c2128 <col:29> '<bound member function type>' ->find 0x55646c3afb08
|     | |             | `-CXXThisExpr 0x55646c3c2118 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55646c3c21f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3c2158 <col:34> 'const char *' lvalue ParmVar 0x55646c3986a8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55646c3c2208 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55646c3c2178 <col:43> 'int' lvalue ParmVar 0x55646c398728 'flags' 'int'
|     | |             `-DeclRefExpr 0x55646c3c2198 <col:50> 'Args::Slot *' lvalue Var 0x55646c3c1d08 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55646c3c2348 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55646c3c2330 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55646c3c2310 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55646c3c22e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55646c1468f8
|     | |       `-ImplicitCastExpr 0x55646c3c22c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55646c3c22a8 <col:23> 'String' lvalue Var 0x55646c3c20b0 'str' 'String'
|     | `-CompoundStmt 0x55646c3c2940 <col:64, line:819:9>
|     |   |-DeclStmt 0x55646c3c2408 <line:813:13, col:23>
|     |   | `-VarDecl 0x55646c3c2370 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55646c3c23e8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55646c3c2588 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55646c3c2430 <col:13> '<bound member function type>' ->postparse 0x55646c3afd18
|     |   | | `-CXXThisExpr 0x55646c3c2420 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55646c3c2530 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55646c3c2480 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55646c3c2460 <col:23> 'P' lvalue ParmVar 0x55646c3987a0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55646c3c24c8 <col:36> 'String' lvalue Var 0x55646c3c20b0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55646c3c24e8 <col:41> 'T' lvalue Var 0x55646c3c2370 'sx' 'T'
|     |   | | `-UnaryOperator 0x55646c3c2518 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55646c3c2508 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55646c3c2568 <col:53> 'Args::Slot *' lvalue Var 0x55646c3c1d08 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55646c3c26e0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55646c3c2618 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55646c3c25e8 <col:17> 'bool' lvalue ->_read_status 0x55646c382080
|     |   | |   `-ImplicitCastExpr 0x55646c3c25c8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55646c3c25b8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55646c3c26b8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55646c3c2650 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55646c3c2630 <col:17> 'Vector<T> *' lvalue Var 0x55646c3c1f70 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55646c3c2698 <col:30> 'T' lvalue Var 0x55646c3c2370 'sx' 'T'
|     |   |-BinaryOperator 0x55646c3c2860 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55646c3c26f8 <col:13> 'int' lvalue Var 0x55646c3c1da0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55646c3c2848 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55646c3c2828 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55646c3c2790 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55646c3c2770 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55646c3c2758 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55646c3c2718 <col:28> 'int' lvalue Var 0x55646c3c1da0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55646c3c2738 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55646c3c2810 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55646c3c27e0 <col:49> 'bool' lvalue ->_read_status 0x55646c382080
|     |   |         `-ImplicitCastExpr 0x55646c3c27c0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55646c3c27b0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55646c3c2910 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55646c3c2880 <col:13> 'int' lvalue ParmVar 0x55646c398728 'flags' 'int'
|     |     `-UnaryOperator 0x55646c3c28f8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55646c3c28e0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55646c3c28c0 <col:23> 'const int' lvalue Var 0x55646c389538 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55646c3c2aa8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55646c3c29e0 <col:9> 'bool' lvalue ->_read_status 0x55646c382080
|       | `-ImplicitCastExpr 0x55646c3c29c0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55646c3c29b0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55646c3c2a88 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55646c3c2a68 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55646c3c2a50 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55646c3c2a10 <col:25> 'int' lvalue Var 0x55646c3c1da0 'read_status' 'int'
|           `-IntegerLiteral 0x55646c3c2a30 <col:40> 'int' 1
|-AccessSpecDecl 0x55646c398b50 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55646c398b78 prev 0x55646c387838 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55646c398c70 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55646c398d60 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55646c3c2b00 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55646c398e50 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55646c3c2b10 <col:25, line:830:9>
| |-CXXMethodDecl 0x55646c398f50 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55646c399000 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55646c3990a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55646c3990a8
| | `-ParmVarDecl 0x55646c3991b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55646c399978 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55646c399978
|   `-ParmVarDecl 0x55646c399a88 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55646c399228 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55646c399388 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55646c399580 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55646c399430 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55646c3994a8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55646c3c2d20 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55646c399838 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55646c3c2b60 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55646c3c2b20 <col:20> 'void *' lvalue ParmVar 0x55646c399430 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55646c3998a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55646c3c2c18 <col:32, col:45> 'char *' array Function 0x55646bf69db8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55646c3c2bd0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55646c3c2ba0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55646c3994a8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55646c399900 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55646c3c2ce0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55646c3c2ca0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55646c3994a8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55646c3c2da0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55646c399680 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55646c398e50 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55646c3c2e28 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55646c3c2e08 <line:840:13, col:22> 'void' array Function 0x55646bf6a118 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55646c3c2df0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55646c3c2dc0 <col:22> 'char *' lvalue ->_slot 0x55646c3998a0
| |         `-CXXThisExpr 0x55646c3c2db0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55646c399780 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55646c398f50 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55646c3c3018 <col:22, line:844:9>
| |   `-CallExpr 0x55646c3c2f80 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55646c3c2f68 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55646c3c2f48 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55646c075b78 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55646c3c2fb8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55646c3c2e98 <col:20> 'void *' lvalue ->_ptr 0x55646c399838
| |     |   `-CXXThisExpr 0x55646c3c2e88 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55646c3c2fe8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55646c3c2fd0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55646c3c2ed8 <col:26> 'char *' lvalue ->_slot 0x55646c3998a0
| |     |     `-CXXThisExpr 0x55646c3c2ec8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55646c3c3000 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55646c3c2f18 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55646c399900
| |         `-CXXThisExpr 0x55646c3c2f08 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55646c399838 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55646c3998a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55646c399900 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55646c39f050 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55646c39f050
| | `-ParmVarDecl 0x55646c39f168 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55646c39f208 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55646c39f208
|   `-ParmVarDecl 0x55646c39f318 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55646c39f4b8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55646c39f388 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55646c39f428 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55646c39f750 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55646c39f948 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55646c39f818 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55646c39fac8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55646c3c3050 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55646c3c3030 <col:20> 'T *' lvalue ParmVar 0x55646c39f818 'ptr' 'T *'
|   | `-CompoundStmt 0x55646c3c30a0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55646c39fa18 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55646c398f50 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55646c3c3250 <col:22, line:857:9>
|   |   `-CallExpr 0x55646c3c3220 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55646c3c30b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55646c12eb08 0x55646c100218
|   |     |-CXXOperatorCallExpr 0x55646c3c31b0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55646c3c3140 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55646c21aa38 0x55646c21a658 0x55646c21a288 0x55646c219ea8 0x55646c219ac8 0x55646c2196f8
|   |     | `-MemberExpr 0x55646c3c3110 <col:29> 'T *' lvalue ->_ptr 0x55646c39fac8
|   |     |   `-CXXThisExpr 0x55646c3c3100 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55646c3c31f0 <col:35> 'T' lvalue ->_slot 0x55646c39fb28
|   |       `-CXXThisExpr 0x55646c3c31e0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55646c39fac8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55646c39fb28 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55646c39fb90 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55646c39fc90 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55646c39fce0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c39fc70 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55646c39fc50 <col:31> 'int' 48
|-FieldDecl 0x55646c39fd08 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55646c39fd68 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55646c39fdc8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55646c39ff00 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55646c3aed30 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55646c3aed90 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55646c3aeeb8 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55646c3af6e8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55646c3aeff0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55646c3af838 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55646c3af7a8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55646c3afb08 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55646c3af8f8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55646c3af978 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55646c3afa20 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55646c3afd18 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55646c3afbd0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55646c3afc48 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55646c3afde8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55646c3aff38 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55646c3afea0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55646c3b02c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55646c3afff8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55646c3b0078 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55646c3b0120 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55646c3b01d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55646c3b04f0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55646c3b03a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55646c3b0418 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55646c3b0808 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55646c3b05a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55646c3b0768 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55646c3b0678 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c1377f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c137908 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55646c137998 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55646c137a68 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55646c137b50 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c137d68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55646c137c10 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c137f18 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55646c137e20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55646c138060 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55646c137fd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55646c1381a8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55646c138118 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c1382f0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55646c138260 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c1383b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55646c138500 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55646c138470 <col:28> col:31 'int'
|-CXXMethodDecl 0x55646c1385c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55646c138710 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55646c138680 <col:28> col:31 'int'
|-CXXMethodDecl 0x55646c138888 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55646c1387c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c1389d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55646c138940 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c138a98 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55646c138c58 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55646c138b48 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55646c138bc0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c138ea8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55646c138d18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c138d90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55646c138f58 <col:86> "" ""
|-CXXMethodDecl 0x55646c1391c8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55646c139038 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55646c1390b0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c139378 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55646c139288 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55646c139528 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55646c139430 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55646c1397f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55646c1395e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55646c139658 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55646c1396d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c139ad8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55646c1398c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55646c139938 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c1399b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55646c139b90 <col:115> "" ""
|-AccessSpecDecl 0x55646c139c00 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55646c139c38 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c13a0e8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55646c13a0e8
| `-ParmVarDecl 0x55646c13c230 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55646c13c2c8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55646c13c2c8
| `-ParmVarDecl 0x55646c13c3d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55646c16f368 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55646c41a830 <col:7>
|-CXXConstructorDecl 0x55646c16f440 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55646c16f440
| `-ParmVarDecl 0x55646c16f558 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55646c16f5c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55646c16f5c8
| `-ParmVarDecl 0x55646c16f6d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55646c41d250 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c4036a8 prev 0x55646c3fadd0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c4037a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55646c403890 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55646c403940 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55646c403ac8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55646c403c48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55646c403dc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55646c41a998 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55646c41b2b8 <col:11>
|-CXXDestructorDecl 0x55646c41aa70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55646c41aba8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55646c41aba8
| `-ParmVarDecl 0x55646c41acb8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55646c41ad58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55646c41ad58
| `-ParmVarDecl 0x55646c41ae68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55646c41dc48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55646c41dd58 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55646c41dfd8 <col:11>
|   `-ReturnStmt 0x55646c41dfc8 <col:11>
|     `-UnaryOperator 0x55646c41dfb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55646c41dfa0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55646c41ddc8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55646c41ddc8
  `-ParmVarDecl 0x55646c41ded8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c403e30 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c403f48 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55646c403fe8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55646c404050 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55646c4040b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55646c404120 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55646c404180 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55646c404240 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55646c4042a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55646c404300 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55646c41a8a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55646c403fe8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55646c41b2c8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55646c41b320 <col:12>
|-CXXConstructorDecl 0x55646c41af80 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55646c41af80
| `-ParmVarDecl 0x55646c41b098 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55646c41b138 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55646c41b138
| `-ParmVarDecl 0x55646c41b248 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55646c41d330 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c3f44e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55646c3f45f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55646c3f4688 <col:16, col:22> col:16 public
|-EnumDecl 0x55646c3f46b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55646c3f47b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55646c3f4890 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3f4790 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55646c3f4770 <col:21> 'int' 28
| `-EnumConstantDecl 0x55646c3f4840 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55646c3f48a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c3f4820 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55646c3f4800 <col:22> 'int' 64
|-CXXMethodDecl 0x55646c3f4be8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55646c3f48d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c3f4950 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55646c3f49c8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c3f4a40 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f4ca8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f4ee8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55646c3f4d20 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55646c3f4d98 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f4f98 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f50f8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55646c3f5008 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f51a0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55646c3f54d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55646c3f5460 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55646c3f5400 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55646c3f53c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55646be17520 'void'
|       |-PointerType 0x55646c0bf470 'unsigned char *'
|       | `-BuiltinType 0x55646be17620 'unsigned char'
|       |-TypedefType 0x55646bebbe60 'size_t' sugar
|       | |-Typedef 0x55646be87ce0 'size_t'
|       | `-BuiltinType 0x55646be17680 'unsigned long'
|       `-PointerType 0x55646be17d20 'void *'
|         `-BuiltinType 0x55646be17520 'void'
|-CXXMethodDecl 0x55646c3f5948 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55646c3f5540 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55646c3f55b8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c3f5650 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55646c3f56d0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55646c4138c0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55646c4138a8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55646c413870 <col:58> 'int' 0
| |-ParmVarDecl 0x55646c3f5750 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55646c4138e8 <col:76> 'int' 0
| |-ParmVarDecl 0x55646c3f57d0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55646c413908 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55646c3f5a18 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f5a98 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55646c3f5b58 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55646c3f5bf8 <col:20>
| `-OptimizeNoneAttr 0x55646c3f5c50 <col:30>
|-CXXMethodDecl 0x55646c3f5cc8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55646c3f5d68 <col:20>
| `-OptimizeNoneAttr 0x55646c3f5dc0 <col:30>
|-CXXMethodDecl 0x55646c3f5e38 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55646c3f5ed8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f5f88 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55646c3f6028 <col:20>
| |-OptimizeNoneAttr 0x55646c3f6080 <col:30>
| `-WarnUnusedResultAttr 0x55646c3f60a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f6100 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55646c3f61a0 <col:20>
| `-OptimizeNoneAttr 0x55646c3f61f8 <col:30>
|-CXXMethodDecl 0x55646c3f6248 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55646c3f62e8 <col:20>
| `-OptimizeNoneAttr 0x55646c3f6340 <col:30>
|-CXXMethodDecl 0x55646c3f6388 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55646c3f6428 <col:20>
| `-OptimizeNoneAttr 0x55646c3f6480 <col:30>
|-CXXMethodDecl 0x55646c3f64c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3f6588 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3f6650 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55646c3f6718 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55646c3f67d8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3f68f8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55646c4139d0 <col:54, line:99:5>
|   `-ReturnStmt 0x55646c4139c0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55646c4139a8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55646c413978 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55646c404638
|         `-CXXThisExpr 0x55646c413968 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55646c3f6a98 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55646c3f69a8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55646c413a80 <col:67, line:103:5>
|   `-BinaryOperator 0x55646c413a60 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55646c4139f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55646c404638
|     | `-CXXThisExpr 0x55646c4139e8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55646c413a48 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55646c413a28 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55646c3f69a8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55646c3f6b90 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55646c413b00 <col:33, line:107:5>
|   `-ReturnStmt 0x55646c413af0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55646c413ad8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55646c413aa8 <col:16> 'void *' lvalue ->_destructor_argument 0x55646c4046a0
|         `-CXXThisExpr 0x55646c413a98 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55646c3f6c50 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55646c414130 <col:25, line:113:5>
|   |-ParenExpr 0x55646c413e78 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55646c413e48 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55646c413bb8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55646c413b90 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55646c413b58 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55646c413b28 <col:24> '<bound member function type>' ->shared 0x55646c3f5cc8
|   |   |       `-ImplicitCastExpr 0x55646c413b78 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55646c413b18 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55646c413c18 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c413bf8 <col:42> 'int' 0
|   |   `-CallExpr 0x55646c413da8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55646c413d90 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c413d70 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c413de8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c413c88 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55646c413e00 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c413cb0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c413e18 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c413ce8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55646c413e30 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c413d58 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c413d40 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c413d08 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55646c414078 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55646c413ea8 <col:2> 'unsigned char *' lvalue ->_head 0x55646c404440
|   | | `-CXXThisExpr 0x55646c413e98 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55646c414060 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55646c414040 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55646c413ee8 <col:10> 'unsigned char *' lvalue ->_data 0x55646c4044a8
|   |     | `-CXXThisExpr 0x55646c413ed8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55646c414028 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55646c414008 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55646c413f28 <col:18> 'unsigned char *' lvalue ->_tail 0x55646c404510
|   |         | `-CXXThisExpr 0x55646c413f18 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55646c413ff0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55646c413fd0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55646c413f68 <col:26> 'unsigned char *' lvalue ->_end 0x55646c404578
|   |             | `-CXXThisExpr 0x55646c413f58 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55646c413fb8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55646c413f98 <col:33> 'int' 0
|   `-BinaryOperator 0x55646c414110 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55646c4140a8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55646c404638
|     | `-CXXThisExpr 0x55646c414098 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55646c4140f8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55646c4140d8 <col:16> 'int' 0
|-CXXMethodDecl 0x55646c3f6d90 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55646c3f6d00 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3f6e38 <col:20>
| |-OptimizeNoneAttr 0x55646c3f6e90 <col:30>
| `-WarnUnusedResultAttr 0x55646c3f6eb8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f6f88 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55646c3f6ef8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3f7030 <col:20>
| |-OptimizeNoneAttr 0x55646c3f7088 <col:30>
| `-WarnUnusedResultAttr 0x55646c3f70b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f71e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55646c3f70f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f7290 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f7390 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55646c3f7300 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3f7438 <col:20>
| `-OptimizeNoneAttr 0x55646c3f7490 <col:30>
|-CXXMethodDecl 0x55646c3f7558 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55646c3f74c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f7600 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f7700 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55646c3f7670 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55646c3f77a8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f78a8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55646c3f7818 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3f7950 <col:20>
| `-OptimizeNoneAttr 0x55646c3f79a8 <col:30>
|-CXXMethodDecl 0x55646c3f7b38 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55646c3f79e8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55646c3f7a60 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55646c413928 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55646c3f7be8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55646c3f7de8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55646c3f7c60 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55646c3f7cd8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c3f7ff8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55646c3f7ea8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55646c3f7f20 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c3f8208 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55646c3f80b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55646c3f8138 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55646c413938 <col:39> 'int' 0
|-CXXMethodDecl 0x55646c3f82d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55646c3f83a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55646c3f8468 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55646c3f8528 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3f85f0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55646c3f8738 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55646c3f86a8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55646c3f8908 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55646c3f87f8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55646c3f8870 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c3f89d8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55646c3f8a98 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55646c3f8b38 <col:20>
| `-OptimizeNoneAttr 0x55646c3f8b90 <col:30>
|-CXXMethodDecl 0x55646c3f8be0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55646c3f8c80 <col:20>
| `-OptimizeNoneAttr 0x55646c3f8cd8 <col:30>
|-CXXMethodDecl 0x55646c3f8d28 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55646c3f8de8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3f8eb0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55646c3f8f50 <col:20>
| `-OptimizeNoneAttr 0x55646c3f8fa8 <col:30>
|-CXXMethodDecl 0x55646c3f90f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55646c3f8fe8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55646c3f9060 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c3f9248 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55646c3f91b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c3f9310 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55646c3f93d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55646c3f9470 <col:20>
| `-OptimizeNoneAttr 0x55646c3f94c8 <col:30>
|-CXXMethodDecl 0x55646c3f9518 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55646c3f95b8 <col:20>
| `-OptimizeNoneAttr 0x55646c3f9610 <col:30>
|-CXXMethodDecl 0x55646c3f9660 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55646c3f9728 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55646c3f97c8 <col:20>
| `-OptimizeNoneAttr 0x55646c3f9820 <col:30>
|-CXXMethodDecl 0x55646c3f9868 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55646c3f9988 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55646c3f9af8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55646c3f9a38 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55646c3f9be8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55646c3f9c88 <col:20>
| `-OptimizeNoneAttr 0x55646c3f9ce0 <col:30>
|-CXXMethodDecl 0x55646c3f9d30 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55646c3f9df0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55646c3fa028 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55646c3f9ea0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55646c3f9f18 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3fa0d8 <col:20>
| `-OptimizeNoneAttr 0x55646c3fa130 <col:30>
|-CXXMethodDecl 0x55646c3fa1d8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55646c3fa278 <col:20>
| `-OptimizeNoneAttr 0x55646c3fa2d0 <col:30>
|-CXXMethodDecl 0x55646c3fa320 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55646c3fa3c0 <col:20>
| `-OptimizeNoneAttr 0x55646c3fa418 <col:30>
|-CXXMethodDecl 0x55646c3fa460 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55646c3fa500 <col:20>
| `-OptimizeNoneAttr 0x55646c3fa558 <col:30>
|-CXXMethodDecl 0x55646c3fa658 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55646c3fa590 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55646c3fa700 <col:20>
| `-OptimizeNoneAttr 0x55646c3fa758 <col:30>
|-CXXMethodDecl 0x55646c3fa918 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55646c3fa790 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55646c3fa808 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3fa9c8 <col:20>
| `-OptimizeNoneAttr 0x55646c3faa20 <col:30>
|-CXXMethodDecl 0x55646c3faac8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55646c3fabe8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55646c3fad08 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55646c3fada8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55646c3fadd0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55646c3faef8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55646c3faf98 <col:20>
| `-OptimizeNoneAttr 0x55646c3faff0 <col:30>
|-CXXMethodDecl 0x55646c3fb098 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55646c3fb138 <col:20>
| `-OptimizeNoneAttr 0x55646c3fb190 <col:30>
|-AccessSpecDecl 0x55646c3fb1b8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55646c3fb1e0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55646c3fb2e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55646c3fb330 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c3fb2c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55646c3fb2a0 <col:14> 'int' 48
|-CXXMethodDecl 0x55646c3fb398 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55646c3fb438 <col:20>
| `-OptimizeNoneAttr 0x55646c3fb490 <col:30>
|-CXXMethodDecl 0x55646c3fb508 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55646c3fb5a8 <col:20>
| `-OptimizeNoneAttr 0x55646c3fb600 <col:30>
|-CXXMethodDecl 0x55646c3fb6c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55646c3fb638 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55646c3fb868 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55646c3fba08 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55646c3fb918 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55646c3fbab0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55646c3fbbb0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbf60 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbb90 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55646c3fbb70 <col:9> 'int' 0
| |-EnumConstantDecl 0x55646c3fbc40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbf78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbc20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55646c3fbc00 <col:14> 'int' 1
| |-EnumConstantDecl 0x55646c3fbcd0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbf90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbcb0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55646c3fbc90 <col:14> 'int' 2
| |-EnumConstantDecl 0x55646c3fbd60 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbfa8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbd40 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55646c3fbd20 <col:14> 'int' 3
| |-EnumConstantDecl 0x55646c3fbdf0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbfc0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbdd0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55646c3fbdb0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55646c3fbe80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55646c3fbfd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fbe60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55646c3fbe40 <col:13> 'int' 5
| `-EnumConstantDecl 0x55646c3fbf10 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55646c3fbff0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c3fbef0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55646c3fbed0 <col:14> 'int' 6
|-CXXMethodDecl 0x55646c3fc058 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55646c3fc0f8 <col:20>
| `-OptimizeNoneAttr 0x55646c3fc150 <col:30>
|-CXXMethodDecl 0x55646c3fc248 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55646c3fc188 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55646c3fc2f0 <col:20>
| `-OptimizeNoneAttr 0x55646c3fc348 <col:30>
|-CXXMethodDecl 0x55646c3fc3b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55646c3fc4e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55646c3fc658 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55646c3fc590 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55646c3fc720 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55646c3fc7e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55646c3fc928 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55646c3fc898 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55646c3fc9d0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55646c3fcad0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55646c3fccd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fcab0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55646c3fca90 <col:23> 'int' 0
| |-EnumConstantDecl 0x55646c3fcb60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55646c3fcce8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fcb40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55646c3fcb20 <col:45> 'int' 4
| |-EnumConstantDecl 0x55646c3fcbf0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55646c3fcd00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3fcbd0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55646c3fcbb0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55646c3fcc80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55646c3fcd18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c3fcc60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55646c3fcc40 <col:47> 'int' 16
|-CXXMethodDecl 0x55646c3fcd78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55646c3fcf18 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55646c3fce50 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55646c3fcfc0 <col:20>
| `-OptimizeNoneAttr 0x55646c3fd018 <col:30>
|-CXXMethodDecl 0x55646c3fd068 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55646c414250 <col:18, col:36>
|   `-ReturnStmt 0x55646c414240 <col:20, col:33>
|     `-ImplicitCastExpr 0x55646c414228 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55646c414208 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55646c4141d8 <col:27> '<bound member function type>' ->xanno 0x55646c3fb098
|           `-CXXThisExpr 0x55646c4141c8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55646c3fd160 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55646c414360 <col:30, col:48>
|   `-ReturnStmt 0x55646c414350 <col:32, col:45>
|     `-ImplicitCastExpr 0x55646c414338 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55646c414318 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55646c4142e8 <col:39> '<bound member function type>' ->xanno 0x55646c3faef8
|           `-CXXThisExpr 0x55646c4142d8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55646c3fd248 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55646c4144f8 <col:24, col:50>
|   `-ReturnStmt 0x55646c4144e8 <col:26, col:47>
|     `-UnaryOperator 0x55646c4144d0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55646c4144b0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55646c414498 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55646c414448 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55646c403940
|         |   `-CXXMemberCallExpr 0x55646c414428 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55646c4143f8 <col:34> '<bound member function type>' ->xanno 0x55646c3fb098
|         |       `-CXXThisExpr 0x55646c4143e8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55646c414478 <col:46> 'int' 0
|-CXXMethodDecl 0x55646c3fd338 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55646c414690 <col:36, col:62>
|   `-ReturnStmt 0x55646c414680 <col:38, col:59>
|     `-UnaryOperator 0x55646c414668 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55646c414648 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55646c414630 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55646c4145e0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55646c403940
|         |   `-CXXMemberCallExpr 0x55646c4145c0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55646c414590 <col:46> '<bound member function type>' ->xanno 0x55646c3faef8
|         |       `-CXXThisExpr 0x55646c414580 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55646c414610 <col:58> 'int' 0
|-CXXMethodDecl 0x55646c3fd458 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55646c414828 <col:26, col:53>
|   `-ReturnStmt 0x55646c414818 <col:28, col:50>
|     `-UnaryOperator 0x55646c414800 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55646c4147e0 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55646c4147c8 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55646c414778 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55646c403c48
|         |   `-CXXMemberCallExpr 0x55646c414758 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55646c414728 <col:36> '<bound member function type>' ->xanno 0x55646c3fb098
|         |       `-CXXThisExpr 0x55646c414718 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55646c4147a8 <col:49> 'int' 0
|-CXXMethodDecl 0x55646c3fd578 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55646c4149f8 <col:38, col:65>
|   `-ReturnStmt 0x55646c4149e8 <col:40, col:62>
|     `-UnaryOperator 0x55646c4149d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55646c4149b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55646c414998 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55646c414910 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55646c403c48
|         |   `-CXXMemberCallExpr 0x55646c4148f0 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55646c4148c0 <col:48> '<bound member function type>' ->xanno 0x55646c3faef8
|         |       `-CXXThisExpr 0x55646c4148b0 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55646c414940 <col:61> 'int' 0
|-CXXMethodDecl 0x55646c3fd728 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55646c3fd630 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55646c4150c8 <col:34, line:463:5>
|   |-ParenExpr 0x55646c414f10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55646c414ee0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55646c414b48 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c414b18 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c414a68 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c414a50 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c414a10 <col:23> 'int' lvalue ParmVar 0x55646c3fd630 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c414a30 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c414af8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c414ac8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c414a88 <col:33> 'int' lvalue ParmVar 0x55646c3fd630 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55646c414ae0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55646c414aa8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55646c414ba8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c414b88 <col:56> 'int' 0
|   |   `-CallExpr 0x55646c414e40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55646c414e28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c414e08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c414e80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c414c98 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55646c414e98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c414cc8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c414eb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c414d00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55646c414ec8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c414df0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c414dd8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c414d98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55646c4150b8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55646c4150a0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55646c415080 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55646c415050 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55646c415000 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55646c403940
|         |   `-CXXMemberCallExpr 0x55646c414fe0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55646c414fb0 <col:9> '<bound member function type>' ->xanno 0x55646c3faef8
|         |       `-CXXThisExpr 0x55646c414fa0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55646c415068 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55646c415030 <col:21> 'int' lvalue ParmVar 0x55646c3fd630 'i' 'int'
|-CXXMethodDecl 0x55646c3fd978 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55646c3fd7e8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55646c3fd860 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55646c415758 <col:40, line:472:5>
|   |-ParenExpr 0x55646c415570 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55646c415540 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55646c415220 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c4151f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c415140 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c415128 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c4150e8 <col:23> 'int' lvalue ParmVar 0x55646c3fd7e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c415108 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c4151d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c4151a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c415160 <col:33> 'int' lvalue ParmVar 0x55646c3fd7e8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55646c4151b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55646c415180 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55646c415280 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c415260 <col:56> 'int' 0
|   |   `-CallExpr 0x55646c4154a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55646c415488 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c415468 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c4154e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4152f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55646c4154f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c415320 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c415510 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c415358 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55646c415528 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c415450 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c415438 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c4153f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55646c415738 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55646c4156e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55646c4156b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55646c415660 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55646c403940
|     | |   `-CXXMemberCallExpr 0x55646c415640 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55646c415610 <col:2> '<bound member function type>' ->xanno 0x55646c3fb098
|     | |       `-CXXThisExpr 0x55646c415600 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55646c4156c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55646c415690 <col:14> 'int' lvalue ParmVar 0x55646c3fd7e8 'i' 'int'
|     `-ImplicitCastExpr 0x55646c415720 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55646c415700 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55646c3fd860 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55646c3fdb38 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55646c3fda40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55646c415ed8 <col:36, line:485:5>
|   |-ParenExpr 0x55646c415c40 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c415c10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c4158f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c4158c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c4157d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c4157b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c415778 <col:23> 'int' lvalue ParmVar 0x55646c3fda40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c415798 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c4158a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c415888 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c4157f0 <col:33> 'int' lvalue ParmVar 0x55646c3fda40 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c415868 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c415850 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c415810 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c415830 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55646c415950 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c415930 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c415b70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c415b58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c415b38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c415bb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4159c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55646c415bc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4159f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c415be0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c415a30 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55646c415bf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c415b20 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c415b08 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c415ac8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55646c415ec8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55646c415eb0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55646c415e98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c415e68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55646c415e08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c415dd8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c415d50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c415d30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c415d00 <col:61> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c415cf0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c415df0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c415d80 <col:74> 'int' lvalue ParmVar 0x55646c3fda40 'i' 'int'
|-CXXMethodDecl 0x55646c3fdd88 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55646c3fdbf8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55646c3fdc70 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55646c416628 <col:42, line:500:5>
|   |-ParenExpr 0x55646c4163c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c416390 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c416070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c416040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c415f50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c415f38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c415ef8 <col:23> 'int' lvalue ParmVar 0x55646c3fdbf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c415f18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c416020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c416008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c415f70 <col:33> 'int' lvalue ParmVar 0x55646c3fdbf8 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c415fe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c415fd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c415f90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c415fb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55646c4160d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c4160b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c4162f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c4162d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c4162b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c416330 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c416140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55646c416348 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c416178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c416360 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c4161b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55646c416378 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c4162a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c416288 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c416248 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55646c416608 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55646c4165b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55646c416588 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55646c416530 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55646c416500 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55646c4164b0 <col:48, col:57> 'char [48]' lvalue ->c 0x55646c403890
|     |     |   `-CXXMemberCallExpr 0x55646c416490 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55646c416460 <col:48> '<bound member function type>' ->xanno 0x55646c3fb098
|     |     |       `-CXXThisExpr 0x55646c416450 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55646c416518 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55646c4164e0 <col:61> 'int' lvalue ParmVar 0x55646c3fdbf8 'i' 'int'
|     `-ImplicitCastExpr 0x55646c4165f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55646c4165d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55646c3fdc70 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55646c3fdf48 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55646c3fde50 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55646c416d88 <col:35, line:513:5>
|   |-ParenExpr 0x55646c416a98 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c416a68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c4167c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c416790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c4166a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c416688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c416648 <col:23> 'int' lvalue ParmVar 0x55646c3fde50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c416668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c416770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c416758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c4166c0 <col:33> 'int' lvalue ParmVar 0x55646c3fde50 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c416738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c416720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c4166e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c416700 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55646c416820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c416800 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c4169c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c4169b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c416990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c416a08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c416890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55646c416a20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4168c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c416a38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c416900 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55646c416a50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c416978 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c416960 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c416920 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55646c416d78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55646c416d60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55646c416d48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c416d18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55646c416c90 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c416c60 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c416c10 <col:60, col:69> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c416bf0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c416bc0 <col:60> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c416bb0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c416c78 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c416c40 <col:73> 'int' lvalue ParmVar 0x55646c3fde50 'i' 'int'
|-CXXMethodDecl 0x55646c3fe198 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55646c3fe008 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55646c3fe080 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55646c417468 <col:41, line:528:5>
|   |-ParenExpr 0x55646c4171f8 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c4171c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c416f20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c416ef0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c416e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c416de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c416da8 <col:23> 'int' lvalue ParmVar 0x55646c3fe008 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c416dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c416ed0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c416eb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c416e20 <col:33> 'int' lvalue ParmVar 0x55646c3fe008 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c416e98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c416e80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c416e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c416e60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55646c416f80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c416f60 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c417128 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c417110 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c4170f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c417168 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c416ff0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55646c417180 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c417028 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c417198 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c417060 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55646c4171b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c4170d8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c4170c0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c417080 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55646c417448 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55646c4173f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55646c4173c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55646c417368 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55646c417338 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55646c4172e8 <col:47, col:56> 'char [48]' lvalue ->c 0x55646c403890
|     |     |   `-CXXMemberCallExpr 0x55646c4172c8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55646c417298 <col:47> '<bound member function type>' ->xanno 0x55646c3fb098
|     |     |       `-CXXThisExpr 0x55646c417288 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55646c417350 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55646c417318 <col:60> 'int' lvalue ParmVar 0x55646c3fe008 'i' 'int'
|     `-ImplicitCastExpr 0x55646c417430 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55646c417410 <col:65> 'int16_t':'short' lvalue ParmVar 0x55646c3fe080 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55646c3fe358 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55646c3fe260 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55646c417b38 <col:36, line:541:5>
|   |-ParenExpr 0x55646c4178d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c4178a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c417600 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c4175d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c4174e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c4174c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c417488 <col:23> 'int' lvalue ParmVar 0x55646c3fe260 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c4174a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c4175b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c417598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c417500 <col:33> 'int' lvalue ParmVar 0x55646c3fe260 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c417578 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c417560 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c417520 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c417540 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55646c417660 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c417640 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c417808 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c4177f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c4177d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c417848 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4176d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55646c417860 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c417708 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c417878 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c417740 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55646c417890 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c4177b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c4177a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c417760 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55646c417b28 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55646c417b10 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55646c417af8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c417ac8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55646c417a70 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c417a40 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c4179f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c4179d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c4179a0 <col:61> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c417990 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c417a58 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c417a20 <col:74> 'int' lvalue ParmVar 0x55646c3fe260 'i' 'int'
|-CXXMethodDecl 0x55646c3fe528 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55646c3fe418 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55646c3fe490 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55646c3fe5d8 <col:20>
| `-OptimizeNoneAttr 0x55646c3fe630 <col:30>
|-CXXMethodDecl 0x55646c3fe768 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55646c3fe670 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55646c418208 <col:35, line:562:5>
|   |-ParenExpr 0x55646c417fa8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c417f78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c417cd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c417ca0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c417bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c417b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c417b58 <col:23> 'int' lvalue ParmVar 0x55646c3fe670 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c417b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c417c80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c417c68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c417bd0 <col:33> 'int' lvalue ParmVar 0x55646c3fe670 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c417c48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c417c30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c417bf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c417c10 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55646c417d30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c417d10 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c417ed8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c417ec0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c417ea0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c417f18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c417da0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55646c417f30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c417dd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c417f48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c417e10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55646c417f60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c417e88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c417e70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c417e30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55646c4181f8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55646c4181e0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55646c4181c8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c418198 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55646c418140 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c418110 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c4180c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c4180a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c418070 <col:60> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c418060 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c418128 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c4180f0 <col:73> 'int' lvalue ParmVar 0x55646c3fe670 'i' 'int'
|-CXXMethodDecl 0x55646c3fe978 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55646c3fe828 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55646c3fe8a0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55646c4188e8 <col:41, line:577:5>
|   |-ParenExpr 0x55646c418678 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c418648 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c4183a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c418370 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c418280 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c418268 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c418228 <col:23> 'int' lvalue ParmVar 0x55646c3fe828 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c418248 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c418350 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c418338 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c4182a0 <col:33> 'int' lvalue ParmVar 0x55646c3fe828 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c418318 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c418300 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c4182c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c4182e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55646c418400 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c4183e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c4185a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c418590 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c418570 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c4185e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c418470 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55646c418600 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4184a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c418618 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c4184e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55646c418630 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c418558 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c418540 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c418500 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55646c4188c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55646c418878 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55646c418848 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55646c4187e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55646c4187b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55646c418768 <col:47, col:56> 'char [48]' lvalue ->c 0x55646c403890
|     |     |   `-CXXMemberCallExpr 0x55646c418748 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55646c418718 <col:47> '<bound member function type>' ->xanno 0x55646c3fb098
|     |     |       `-CXXThisExpr 0x55646c418708 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55646c4187d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55646c418798 <col:60> 'int' lvalue ParmVar 0x55646c3fe828 'i' 'int'
|     `-ImplicitCastExpr 0x55646c4188b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55646c418890 <col:65> 'int32_t':'int' lvalue ParmVar 0x55646c3fe8a0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55646c3feb38 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55646c3fea40 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55646c419018 <col:36, line:591:5>
|   |-ParenExpr 0x55646c418d58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c418d28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c418a80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c418a50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c418960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c418948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c418908 <col:23> 'int' lvalue ParmVar 0x55646c3fea40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c418928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c418a30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c418a18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c418980 <col:33> 'int' lvalue ParmVar 0x55646c3fea40 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c4189f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c4189e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c4189a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c4189c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55646c418ae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c418ac0 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c418c88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c418c70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c418c50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c418cc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c418b50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55646c418ce0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c418b88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c418cf8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c418bc0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55646c418d10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c418c38 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c418c20 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c418be0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55646c419008 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55646c418ff0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55646c418fd8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c418fa8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55646c418f20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c418ef0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c418ea0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c418e80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c418e50 <col:61> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c418e40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c418f08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c418ed0 <col:74> 'int' lvalue ParmVar 0x55646c3fea40 'i' 'int'
|-CXXMethodDecl 0x55646c3fed88 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55646c3febf8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55646c3fec70 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55646c4196f8 <col:42, line:606:5>
|   |-ParenExpr 0x55646c419488 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55646c419458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55646c4191b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c419180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c419090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c419078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c419038 <col:23> 'int' lvalue ParmVar 0x55646c3febf8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c419058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c419160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55646c419148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c4190b0 <col:33> 'int' lvalue ParmVar 0x55646c3febf8 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c419128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c419110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c4190d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55646c4190f0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55646c419210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c4191f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55646c4193b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55646c4193a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c419380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c4193f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c419280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55646c419410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c4192b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c419428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c4192f0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55646c419440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c419368 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c419350 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c419310 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55646c4196d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55646c419688 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55646c419658 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55646c4195f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55646c4195c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55646c419578 <col:48, col:57> 'char [48]' lvalue ->c 0x55646c403890
|     |     |   `-CXXMemberCallExpr 0x55646c419558 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55646c419528 <col:48> '<bound member function type>' ->xanno 0x55646c3fb098
|     |     |       `-CXXThisExpr 0x55646c419518 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55646c4195e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55646c4195a8 <col:61> 'int' lvalue ParmVar 0x55646c3febf8 'i' 'int'
|     `-ImplicitCastExpr 0x55646c4196c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55646c4196a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55646c3fec70 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55646c3fef20 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55646c3fee50 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55646c419f68 <col:33, line:620:5>
|   |-ParenExpr 0x55646c419ce0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55646c419cb0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55646c419900 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c4198d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c419770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c419758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c419718 <col:23> 'int' lvalue ParmVar 0x55646c3fee50 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c419738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c4198b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55646c419898 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c419790 <col:33> 'int' lvalue ParmVar 0x55646c3fee50 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c419878 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c419860 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c4197b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55646c419838 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55646c419820 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55646c4197e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55646c419960 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c419940 <col:79> 'int' 0
|   |   `-CallExpr 0x55646c419c10 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55646c419bf8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c419bd8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c419c50 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c419a48 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55646c419c68 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c419a90 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c419c80 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c419ac8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55646c419c98 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c419bc0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c419ba8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c419b68 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55646c419f58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55646c419f40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55646c419f28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55646c419ef8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55646c419e70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55646c419e40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55646c419df0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55646c403890
|             |   `-CXXMemberCallExpr 0x55646c419dd0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55646c419da0 <col:67> '<bound member function type>' ->xanno 0x55646c3faef8
|             |       `-CXXThisExpr 0x55646c419d90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55646c419e58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55646c419e20 <col:80> 'int' lvalue ParmVar 0x55646c3fee50 'i' 'int'
|-CXXMethodDecl 0x55646c3ff138 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55646c3fefe0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55646c3ff060 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55646c41a790 <col:45, line:635:5>
|   |-ParenExpr 0x55646c41a4d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55646c41a4a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55646c41a170 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55646c41a140 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55646c419fe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55646c419fc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55646c419f88 <col:23> 'int' lvalue ParmVar 0x55646c3fefe0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55646c419fa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55646c41a120 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55646c41a108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55646c41a000 <col:33> 'int' lvalue ParmVar 0x55646c3fefe0 'i' 'int'
|   |   |     `-BinaryOperator 0x55646c41a0e8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55646c41a0d0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55646c41a020 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55646c3fb2e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55646c41a0a8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55646c41a090 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55646c41a058 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55646c41a1d0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55646c41a1b0 <col:79> 'int' 0
|   |   `-CallExpr 0x55646c41a408 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55646c41a3f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55646c41a3d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55646beb2bc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55646c41a448 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c41a240 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55646c41a460 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55646c41a288 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55646c41a478 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55646c41a2c0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55646c41a490 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55646c41a3b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55646c41a3a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55646c41a358 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55646c41a770 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55646c41a6d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55646c41a6a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55646c41a648 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55646c41a618 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55646c41a5c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55646c403890
|     |     |   `-CXXMemberCallExpr 0x55646c41a5a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55646c41a578 <col:54> '<bound member function type>' ->xanno 0x55646c3fb098
|     |     |       `-CXXThisExpr 0x55646c41a568 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55646c41a630 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55646c41a5f8 <col:67> 'int' lvalue ParmVar 0x55646c3fefe0 'i' 'int'
|     `-CXXConstCastExpr 0x55646c41a740 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55646c41a728 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55646c41a6f0 <col:91> 'const void *' lvalue ParmVar 0x55646c3ff060 'x' 'const void *'
|-CXXMethodDecl 0x55646c3ff208 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55646c41a818 <col:34, line:640:5>
|   `-ReturnStmt 0x55646c41a808 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55646c41a7f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55646c41a7c0 <col:16> 'Packet *' lvalue ->_data_packet 0x55646c4043d8
|         `-CXXThisExpr 0x55646c41a7b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55646c3ff348 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55646c3ff2b8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55646c413958 <col:46> 'bool' true
|-CXXMethodDecl 0x55646c3ff4c8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55646c3ff400 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55646c3ff570 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55646c3ffd20 <line:660:22> "" ""
| |-EnumConstantDecl 0x55646c3ff670 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffd90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff650 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55646c3ff630 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55646c3f47b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55646c3ff700 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffda8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff6e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55646c3ff6c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55646c3f4840 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55646c3ff790 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffdc0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff770 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55646c3ff750 <col:21> 'int' 0
| |-EnumConstantDecl 0x55646c3ff820 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffdd8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff800 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55646c3ff7e0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55646c3ff8b0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffdf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff890 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55646c3ff870 <col:21> 'int' 16
| |-EnumConstantDecl 0x55646c3ff940 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffe08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff920 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55646c3ff900 <col:19> 'int' 32
| |-EnumConstantDecl 0x55646c3ff9d0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffe20 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ff9b0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55646c3ff990 <col:19> 'int' EnumConstant 0x55646c3ff820 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55646c3ffa60 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffe38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ffa40 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55646c3ffa20 <col:19> 'int' EnumConstant 0x55646c3ff940 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55646c3ffb30 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffe50 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ffb10 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55646c3ffaf0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55646c3ffab0 <col:23> 'int' EnumConstant 0x55646c3ffa60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55646c3ffad0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55646c3ffc00 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55646c3ffe68 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55646c3ffbe0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55646c3ffbc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55646c3ffb80 <col:23> 'int' EnumConstant 0x55646c3ffa60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55646c3ffba0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55646c3ffcd0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55646c3ffe80 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55646c3ffcb0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55646c3ffc90 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55646c3ffc50 <col:23> 'int' EnumConstant 0x55646c3ffa60 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55646c3ffc70 <col:40> 'int' 8
|-CXXMethodDecl 0x55646c3ffec0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55646c3fff60 <col:68> "" ""
|-CXXMethodDecl 0x55646c3ffff8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55646c400098 <col:45> "" ""
|-CXXMethodDecl 0x55646c400130 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55646c4001d0 <col:57> "" ""
|-CXXMethodDecl 0x55646c400268 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55646c400308 <col:45> "" ""
|-CXXMethodDecl 0x55646c4003a0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55646c400440 <col:57> "" ""
|-CXXMethodDecl 0x55646c4004d0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55646c400570 <col:51> "" ""
|-CXXMethodDecl 0x55646c400600 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55646c4006a0 <col:63> "" ""
|-CXXMethodDecl 0x55646c400730 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55646c4007d0 <col:53> "" ""
|-CXXMethodDecl 0x55646c400860 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55646c400900 <col:65> "" ""
|-CXXMethodDecl 0x55646c400a18 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55646c400988 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55646c400ac0 <col:61> "" ""
|-CXXMethodDecl 0x55646c400c58 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55646c400b48 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55646c400bc0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55646c400d08 <col:67> "" ""
|-CXXMethodDecl 0x55646c400e20 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55646c400d90 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55646c400ec8 <col:63> "" ""
|-CXXMethodDecl 0x55646c401060 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55646c400f50 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55646c400fc8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55646c401110 <col:69> "" ""
|-CXXMethodDecl 0x55646c401228 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55646c401198 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55646c4012d0 <col:63> "" ""
|-CXXMethodDecl 0x55646c401468 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55646c401358 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55646c4013d0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55646c401518 <col:69> "" ""
|-CXXMethodDecl 0x55646c401630 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55646c4015a0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55646c4016d8 <col:62> "" ""
|-CXXMethodDecl 0x55646c401870 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55646c401760 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55646c4017d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55646c401920 <col:68> "" ""
|-CXXMethodDecl 0x55646c401a38 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55646c4019a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55646c401ae0 <col:63> "" ""
|-CXXMethodDecl 0x55646c401c78 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55646c401b68 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55646c401be0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55646c401d28 <col:69> "" ""
|-CXXMethodDecl 0x55646c401db8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55646c401e58 <col:64> "" ""
|-CXXMethodDecl 0x55646c401ee8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55646c401f88 <col:52> "" ""
|-CXXMethodDecl 0x55646c402018 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55646c4020b8 <col:67> "" ""
|-CXXMethodDecl 0x55646c402148 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55646c4021e8 <col:55> "" ""
|-CXXMethodDecl 0x55646c402300 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55646c402270 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55646c4023a8 <col:58> "" ""
|-CXXMethodDecl 0x55646c402540 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55646c402430 <col:33> col:36 'int'
| |-ParmVarDecl 0x55646c4024a8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55646c4025f0 <col:62> "" ""
|-CXXMethodDecl 0x55646c402708 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55646c402678 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55646c4027b0 <col:58> "" ""
|-CXXMethodDecl 0x55646c402948 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55646c402838 <col:33> col:36 'int'
| |-ParmVarDecl 0x55646c4028b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55646c4029f8 <col:62> "" ""
|-CXXMethodDecl 0x55646c402b10 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55646c402a80 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55646c402bb8 <col:60> "" ""
|-CXXMethodDecl 0x55646c402d50 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55646c402c40 <col:34> col:37 'int'
| |-ParmVarDecl 0x55646c402cb8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55646c402e00 <col:64> "" ""
|-CXXMethodDecl 0x55646c402f18 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55646c402e88 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55646c402fc0 <col:58> "" ""
|-CXXMethodDecl 0x55646c403158 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55646c403048 <col:33> col:36 'int'
| |-ParmVarDecl 0x55646c4030c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55646c403208 <col:62> "" ""
|-CXXMethodDecl 0x55646c403320 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55646c403290 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55646c4033c8 <col:59> "" ""
|-CXXMethodDecl 0x55646c403560 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55646c403450 <col:33> col:36 'int'
| |-ParmVarDecl 0x55646c4034c8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55646c403610 <col:63> "" ""
|-AccessSpecDecl 0x55646c403680 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55646c4036a8 prev 0x55646c3fadd0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55646c4037a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55646c403890 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55646c403940 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55646c403ac8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55646c403c48 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55646c403dc8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55646c41a998 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55646c41b2b8 <col:11>
| |-CXXDestructorDecl 0x55646c41aa70 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55646c41aba8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55646c41aba8
| | `-ParmVarDecl 0x55646c41acb8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55646c41ad58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55646c41ad58
| | `-ParmVarDecl 0x55646c41ae68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55646c41dc48 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55646c41dd58 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55646c41dfd8 <col:11>
| |   `-ReturnStmt 0x55646c41dfc8 <col:11>
| |     `-UnaryOperator 0x55646c41dfb0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55646c41dfa0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55646c41ddc8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55646c41ddc8
|   `-ParmVarDecl 0x55646c41ded8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55646c403e30 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55646c403f48 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55646c403fe8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55646c404050 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55646c4040b8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55646c404120 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55646c404180 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55646c404240 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55646c4042a0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55646c404300 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55646c41a8a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55646c403fe8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55646c41b2c8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55646c41b320 <col:12>
| |-CXXConstructorDecl 0x55646c41af80 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55646c41af80
| | `-ParmVarDecl 0x55646c41b098 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55646c41b138 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55646c41b138
| | `-ParmVarDecl 0x55646c41b248 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55646c41d330 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55646c404378 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55646c4043d8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55646c404440 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55646c4044a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55646c404510 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55646c404578 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55646c4045d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55646c404638 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55646c4046a0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55646c404728 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55646c404378 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55646c41a840 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55646c4045d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55646c41b330 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55646c41b390 <col:21, line:755:5>
|-CXXConstructorDecl 0x55646c4048c8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55646c404808 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55646c4049c0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55646c404ba8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55646c404ab0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55646c412fa8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55646c404c60 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55646c404cd8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55646c404d50 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c4131c8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55646c413078 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55646c4130f0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55646c413498 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55646c413288 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55646c413300 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55646c413378 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55646c4135f0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55646c413560 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55646c413738 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55646c4136a8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55646c413830 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct BridgeMessage::wire
         0 |   uint8_t [6] dst
         6 |   uint8_t [6] src
        12 |   uint16_t length
        14 |   uint16_t sap
        16 |   uint8_t ctl
        17 |   uint16_t protocol
        19 |   uint8_t version
        20 |   uint8_t type
    21:0-0 |   unsigned int tc
    21:1-6 |   unsigned int reserved
    21:7-7 |   unsigned int tca
        22 |   uint64_t root
        30 |   uint32_t cost
        34 |   uint64_t bridge_id
        42 |   uint16_t port_id
        44 |   uint16_t message_age
        46 |   uint16_t max_age
        48 |   uint16_t hello_time
        50 |   uint16_t forward_delay
        52 |   uint8_t [8] padding
           | [sizeof=60, dsize=60, align=1,
           |  nvsize=60, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c461500 prev 0x55646c4601e0 <../elements/etherswitch/bridgemessage.hh:40:3, col:409> col:10 referenced struct wire definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-PackedAttr 0x55646c4621f0 <col:426>
|-CXXRecordDecl 0x55646c4615f8 <col:3, col:10> col:10 implicit struct wire
|-AccessSpecDecl 0x55646c461688 <col:17, col:23> col:17 public
|-FieldDecl 0x55646c461788 <col:25, col:38> col:33 dst 'uint8_t [6]'
|-FieldDecl 0x55646c461838 <col:41, col:54> col:49 src 'uint8_t [6]'
|-FieldDecl 0x55646c461898 <col:57, col:66> col:66 length 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c4618f8 <col:74, col:83> col:83 sap 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461958 <col:88, col:96> col:96 ctl 'uint8_t':'unsigned char'
|-FieldDecl 0x55646c4619b8 <col:101, col:110> col:110 protocol 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461a18 <col:120, col:128> col:128 version 'uint8_t':'unsigned char'
|-FieldDecl 0x55646c461a78 <col:137, col:145> col:145 type 'uint8_t':'unsigned char'
|-FieldDecl 0x55646c461b20 <col:151, col:163> col:160 tc 'unsigned int'
| `-ConstantExpr 0x55646c461b00 <col:163> 'int' Int: 1
|   `-IntegerLiteral 0x55646c461ac8 <col:163> 'int' 1
|-FieldDecl 0x55646c461bc8 <col:166, col:184> col:175 reserved 'unsigned int'
| `-ConstantExpr 0x55646c461ba8 <col:184> 'int' Int: 6
|   `-IntegerLiteral 0x55646c461b70 <col:184> 'int' 6
|-FieldDecl 0x55646c461c70 <col:187, col:200> col:196 tca 'unsigned int'
| `-ConstantExpr 0x55646c461c50 <col:200> 'int' Int: 1
|   `-IntegerLiteral 0x55646c461c18 <col:200> 'int' 1
|-FieldDecl 0x55646c461cd0 <col:203, col:212> col:212 root 'uint64_t':'unsigned long'
|-FieldDecl 0x55646c461d30 <col:218, col:227> col:227 cost 'uint32_t':'unsigned int'
|-FieldDecl 0x55646c461d90 <col:233, col:242> col:242 bridge_id 'uint64_t':'unsigned long'
|-FieldDecl 0x55646c461df0 <col:253, col:262> col:262 port_id 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461e50 <col:271, col:280> col:280 message_age 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461eb0 <col:293, col:302> col:302 max_age 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461f10 <col:311, col:320> col:320 hello_time 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c461f70 <col:332, col:341> col:341 forward_delay 'uint16_t':'unsigned short'
|-FieldDecl 0x55646c462058 <col:356, col:373> col:364 padding 'uint8_t [8]'
`-CXXMethodDecl 0x55646c462148 <col:376, col:402> col:383 used s 'String (String) const'
  `-ParmVarDecl 0x55646c4620b8 <col:385, col:398> col:392 tag 'String' cinit destroyed
    `-ExprWithCleanups 0x55646c462ad0 <col:398> 'String'
      `-CXXBindTemporaryExpr 0x55646c462ab0 <col:398> 'String' (CXXTemporary 0x55646c462ab0)
        `-CXXConstructExpr 0x55646c462a78 <col:398> 'String' 'void (String &&)' elidable
          `-MaterializeTemporaryExpr 0x55646c462a60 <col:398> 'String' xvalue
            `-CXXBindTemporaryExpr 0x55646c462a40 <col:398> 'String' (CXXTemporary 0x55646c462a40)
              `-ImplicitCastExpr 0x55646c462a20 <col:398> 'String' <ConstructorConversion>
                `-CXXConstructExpr 0x55646c4629f0 <col:398> 'String' 'void (const char *)'
                  `-ImplicitCastExpr 0x55646c4629d8 <col:398> 'const char *' <ArrayToPointerDecay>
                    `-StringLiteral 0x55646c4629c0 <col:398> 'const char [1]' lvalue ""

Layout: <CGRecordLayout
  LLVMType:%"struct.BridgeMessage::wire" = type <{ [6 x i8], [6 x i8], i16, i16, i8, i16, i8, i8, i8, i64, i32, i64, i16, i16, i16, i16, i16, [8 x i8] }>
  NonVirtualBaseLLVMType:%"struct.BridgeMessage::wire" = type <{ [6 x i8], [6 x i8], i16, i16, i8, i16, i8, i8, i8, i64, i32, i64, i16, i16, i16, i16, i16, [8 x i8] }>
  IsZeroInitializable:1
  BitFields:[
    <CGBitFieldInfo Offset:0 Size:1 IsSigned:0 StorageSize:8 StorageOffset:21>
    <CGBitFieldInfo Offset:1 Size:6 IsSigned:0 StorageSize:8 StorageOffset:21>
    <CGBitFieldInfo Offset:7 Size:1 IsSigned:0 StorageSize:8 StorageOffset:21>
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55646c3e18b8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55646c3e19d8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x55646c3e1a68 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x55646c3e1c60 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x55646c3e1aa0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x55646c3e1b18 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x55646c3e1b90 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x55646c3e1d30 <col:79> 'const ArgContext' lvalue Var 0x55646c3c3278 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x55646c3e1ed0 <col:91, line:1348:5>
|   `-ReturnStmt 0x55646c3e1ec0 <line:1347:9, col:41>
|     `-CallExpr 0x55646c3e1e70 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x55646c3e1e58 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55646c3e1e10 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x55646c3e1800 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x55646c3e1d98 <col:26> 'const String' lvalue ParmVar 0x55646c3e1aa0 'str' 'const String &'
|       |-UnaryOperator 0x55646c3e1dd8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x55646c3e1db8 <col:32> 'String' lvalue ParmVar 0x55646c3e1b18 'result' 'String &'
|       `-ImplicitCastExpr 0x55646c3e1ea8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x55646c3e1df0 <col:40> 'int' 0
|-CXXConstructorDecl 0x55646c49e598 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55646c49e670 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55646c49e7a8 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x55646c49e7a8
| `-ParmVarDecl 0x55646c49e8b8 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x55646c49e958 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55646c49ea68 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x55646c49f6c0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c3e1f10 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55646c3e2168 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55646c49e4a8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55646c49ead8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x55646c49ead8
| `-ParmVarDecl 0x55646c49ebe8 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x55646c49ec88 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55646c49ed98 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x55646c49f6d0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55646c49f6a0 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x55646c49f670 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x55646c49f640 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x55646c49ed98 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x55646c49f740 <col:19>
`-CXXDestructorDecl 0x55646c49ee38 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55646c4a03b8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55646c4a0770 prev 0x55646c4a03b8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x55646c4a0960 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x55646c4a0868 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x55646c4a5a70 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x55646c4a0ae0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x55646c4a5a30 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x55646c4a59f0 <col:20> 'String *' lvalue ParmVar 0x55646c4a0868 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x55646c4a0b40 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x55646c4a5ad0 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x55646c3c30a0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x55646c4a0a20 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x55646c398f50 Slot::store 'void ()' ]
| `-CompoundStmt 0x55646c4a6218 <col:22, line:857:9>
|   `-CallExpr 0x55646c4a61d0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x55646c4a61b8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55646c4a6138 <col:13> 'void (String &, const String &)' lvalue Function 0x55646c4a6018 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x55646c100218 'assign_consume')
|     |-UnaryOperator 0x55646c4a5c60 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x55646c4a5c48 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x55646c4a5c18 <col:29> 'String *' lvalue ->_ptr 0x55646c4a0ae0
|     |     `-CXXThisExpr 0x55646c4a5c08 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x55646c4a6200 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x55646c4a5c88 <col:35> 'String':'String' lvalue ->_slot 0x55646c4a0b40
|         `-CXXThisExpr 0x55646c4a5c78 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x55646c4a0ae0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x55646c4a0b40 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x55646c4a0bb8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55646c4a0bb8
| `-ParmVarDecl 0x55646c4a0cc8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x55646c4a0d68 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55646c4a0d68
| `-ParmVarDecl 0x55646c4a0e78 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x55646c4a0f18 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x55646c4a0f18
| `-ParmVarDecl 0x55646c4a1028 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x55646c4a1098 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x55646c4a1098
| `-ParmVarDecl 0x55646c4a11a8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x55646c4a1230 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x55646c398e50 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x55646c4a5b38 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
