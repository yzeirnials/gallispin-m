
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a5e418 prev 0x5582d9a55bb8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9a5e510 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5582d9a5e5a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5582d9a5e618 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5582d9a5e6d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5582d9a5e7a0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5582d9a5e918 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5582d9a5e850 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5582d9a5e9c0 <col:24>
| `-OptimizeNoneAttr 0x5582d9a5ea18 <col:34>
|-CXXMethodDecl 0x5582d9a5ea60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5582d9a5ed18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5582d9a5eb10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a5eb88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5582d9a5ec08 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5582d9a5edd0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5582d9a5ee08 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5582d9a5ee70 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5582d9a5eef8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5582d9a5f218 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5582d9a5efb0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a5f028 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5582d9a5f0a0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5582d9a5f120 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5582d9a5f330 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5582d9a66ca8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5582d9a66ca8
| `-ParmVarDecl 0x5582d9a66db8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5582d9a66e58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5582d9a66e58
| `-ParmVarDecl 0x5582d9a66f68 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5582d9902d80 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a51430 prev 0x5582d9a511b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9a51528 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5582d9a515b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5582d9a51618 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5582d9a51708 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5582d9a51808 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5582d9a519d8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5582d9a51888 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5582d9a51900 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5582d9a51b68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5582d9a51aa0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5582d9a51c10 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a51d48 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5582d9a51c80 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5582d9a51ee8 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5582d9a51e28 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5582d9a52088 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5582d9a51fc8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5582d9a52130 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5582d9a52230 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5582d9a52310 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a52210 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5582d9a521f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5582d9a522c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5582d9a52328 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a522a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5582d9a52280 <col:44> 'int' 2
|-CXXMethodDecl 0x5582d9a52470 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5582d9a52358 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5582d9a523d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5582d9a525c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5582d9a52538 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5582d9a52808 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5582d9a52688 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5582d9a52700 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5582d9a528b8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a52910 <col:30>
|-CXXMethodDecl 0x5582d9a52a18 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5582d9a52950 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5582d9a52ac0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a52b18 <col:30>
|-CXXMethodDecl 0x5582d9a52b68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5582d9a52c30 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5582d9a52d48 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5582d9a52dd0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5582d9a52e58 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5582d9a52ee0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5582d9a52f68 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5582d9a52ff8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5582d9a530b8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5582d9a53140 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5582d9a531c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5582d9a53250 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5582d9a532d8 <line:66:5, col:36> col:23 used PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5582d9a53360 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5582d9a533f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5582d9a534b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5582d9a53540 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5582d9a53690 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5582d9a535f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5582d9a53820 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5582d9a53750 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5582d9a53ad0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5582d9a538d8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a53958 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5582d9a539d8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5582d9a53b88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5582d9a53c90 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5582d9a53f20 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a53c70 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9a53c50 <col:33> 'int' 0
| |-EnumConstantDecl 0x5582d9a53d20 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5582d9a53f38 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a53d00 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5582d9a53ce0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5582d9a53db0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5582d9a53f50 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a53d90 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5582d9a53d70 <col:38> 'int' 90
| |-EnumConstantDecl 0x5582d9a53e40 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5582d9a53f68 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a53e20 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5582d9a53e00 <col:35> 'int' 100
| `-EnumConstantDecl 0x5582d9a53ed0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5582d9a53f80 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a53eb0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5582d9a53e90 <col:32> 'int' 2000
|-CXXMethodDecl 0x5582d9a53fc0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5582d9a54400 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5582d9a54270 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5582d9a542e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a544d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5582d9a54650 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5582d9a54580 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a54858 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5582d9a54708 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5582d9a54780 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a54958 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5582d9a549f8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5582d9a54ac0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54b50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5582d9a54d80 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a54b30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5582d9a54b10 <col:36> 'int' EnumConstant 0x5582d9a54ac0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54ba0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54bf0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54c40 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54c90 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5582d9a54ce0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5582d9a54d30 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5582d9a54e68 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5582d9a54da8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5582d9a54f30 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5582d9a54ff0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5582d9a550b0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5582d9a55170 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5582d9a55288 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5582d9a55350 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5582d9a554d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5582d9a55400 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5582d9a555f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5582d9a557f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5582d9a556a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5582d9a55728 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5582d9a63148 <col:54, line:127:5>
|   |-ParenExpr 0x5582d9a62ff8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5582d9a62fc8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a62cb8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5582d9a62c90 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5582d9a62c78 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5582d9a62c60 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5582d9a62c30 <col:31> 'Router *' lvalue ->_router 0x5582d9a60b10
|   |   |         `-CXXThisExpr 0x5582d9a62c20 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5582d9a62d18 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a62cf8 <col:48> 'int' 0
|   |   `-CallExpr 0x5582d9a62f28 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a62f10 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a62ef0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a62f68 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a62d88 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5582d9a62f80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a62da8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5582d9a62f98 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a62de0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5582d9a62fb0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a62ed8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a62ec0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a62e78 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5582d9a63090 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5582d9a63028 <col:9> 'Router *' lvalue ->_router 0x5582d9a60b10
|   | | `-CXXThisExpr 0x5582d9a63018 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a63078 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5582d9a63058 <col:19> 'Router *' lvalue ParmVar 0x5582d9a556a8 'r' 'Router *'
|   `-BinaryOperator 0x5582d9a63128 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5582d9a630c0 <col:9> 'int' lvalue ->_eindex 0x5582d9a60b78
|     | `-CXXThisExpr 0x5582d9a630b0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5582d9a63110 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a630f0 <col:19> 'int' lvalue ParmVar 0x5582d9a55728 'eindex' 'int'
|-CXXMethodDecl 0x5582d9a55980 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5582d9a558b8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5582d9a55a50 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5582d9a55b18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5582d9a55bb8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5582d9a55e08 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5582d9a55c80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a55d00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5582d9a55eb8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a55f10 <col:30>
|-CXXMethodDecl 0x5582d9a56018 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5582d9a55f50 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5582d9a560c0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a56118 <col:30>
|-CXXMethodDecl 0x5582d9a561e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5582d9a56158 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5582d9a56290 <col:20>
| `-OptimizeNoneAttr 0x5582d9a562e8 <col:30>
|-CXXMethodDecl 0x5582d9a56478 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5582d9a56320 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5582d9a563a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5582d9a56608 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5582d9a56540 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5582d9a56758 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5582d9a566c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5582d9a568a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5582d9a56818 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5582d9a569f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5582d9a56968 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5582d9a56cb8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5582d9a56ab0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a56b30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5582d9a56bd8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5582d9a56d90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5582d9a56e50 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5582d9a57120 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5582d9a56fd0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5582d9a57048 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a57248 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5582d9a57420 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5582d9a57300 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5582d9a57380 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5582d9a57608 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5582d9a574e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5582d9a57568 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5582d9a57978 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5582d9a576c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5582d9a57740 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5582d9a577c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5582d9a62730 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9a62710 <col:106> 'int' 0
| `-ParmVarDecl 0x5582d9a57838 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a62768 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a62748 <col:126> 'int' 0
|-CXXMethodDecl 0x5582d9a57d18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5582d9a57a48 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5582d9a57ae0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5582d9a57b60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5582d9a57bd8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a627a0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a62780 <col:114> 'int' 0
|-CXXMethodDecl 0x5582d9a580a8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5582d9a57df0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5582d9a57e68 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5582d9a57ee8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5582d9a627b8 <col:96> 'int' 0
| `-ParmVarDecl 0x5582d9a57f60 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a627f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a627d8 <col:116> 'int' 0
|-CXXMethodDecl 0x5582d9a58428 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5582d9a58178 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5582d9a581f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a58270 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5582d9a62830 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9a62810 <col:109> 'int' 0
| `-ParmVarDecl 0x5582d9a582e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a62868 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a62848 <col:129> 'int' 0
|-CXXMethodDecl 0x5582d9a587a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5582d9a584f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5582d9a58570 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a585f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5582d9a58668 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a628a0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a62880 <col:117> 'int' 0
|-CXXMethodDecl 0x5582d9a58b38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5582d9a58880 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a588f8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a58978 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5582d9a628b8 <col:99> 'int' 0
| `-ParmVarDecl 0x5582d9a589f0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5582d9a628f8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5582d9a628d8 <col:119> 'int' 0
|-CXXMethodDecl 0x5582d9a58f58 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5582d9a58c08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5582d9a58c88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5582d9a58d00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a58d80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5582d9a62930 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9a62910 <col:108> 'int' 0
| `-ParmVarDecl 0x5582d9a58e00 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5582d9a62968 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5582d9a62948 <col:141> 'int' 0
|-CXXMethodDecl 0x5582d9a59378 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5582d9a59030 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5582d9a590b0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5582d9a59128 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a591a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5582d9a59228 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5582d9a62980 <col:121> 'int' 0
|-CXXMethodDecl 0x5582d9a597a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5582d9a59458 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5582d9a594d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5582d9a59550 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a595d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5582d9a629a0 <col:98> 'int' 0
| `-ParmVarDecl 0x5582d9a59650 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5582d9a629c0 <col:123> 'int' 0
|-CXXMethodDecl 0x5582d9a59a70 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5582d9a59880 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5582d9a59900 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5582d9a59980 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5582d9a629e0 <col:80> 'int' 0
|-EnumDecl 0x5582d9a59b28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5582d9a59c30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5582d9a59ec0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a59c10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5582d9a59bf0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5582d9a59cc0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5582d9a59ed8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a59ca0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5582d9a59c80 <col:40> 'int' 2
| |-EnumConstantDecl 0x5582d9a59d50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5582d9a59ef0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a59d30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5582d9a59d10 <col:44> 'int' 4
| |-EnumConstantDecl 0x5582d9a59de0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5582d9a59f08 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a59dc0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5582d9a59da0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5582d9a59e70 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5582d9a59f20 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a59e50 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5582d9a59e30 <col:34> 'int' 6
|-CXXMethodDecl 0x5582d9a5a1d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5582d9a59f48 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5582d9a59fe8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5582d9a5a068 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5582d9a5a0e0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5582d9a62a98 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5582d9a62a80 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5582d9a62a68 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5582d9a62a48 <col:98, col:105> 'String' (CXXTemporary 0x5582d9a62a48)
|           `-CXXTemporaryObjectExpr 0x5582d9a62a10 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5582d9a5a478 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5582d9a5a2a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5582d9a5a320 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5582d9a5a398 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5582d9a62b48 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5582d9a62b30 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5582d9a62b18 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5582d9a62af8 <col:94, col:101> 'String' (CXXTemporary 0x5582d9a62af8)
| |         `-CXXTemporaryObjectExpr 0x5582d9a62ac0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5582d9a63330 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5582d9a632a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5582d9a63278 <col:9> '<bound member function type>' ->add_task_handlers 0x5582d9a5a1d8
|     | `-CXXThisExpr 0x5582d9a63268 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5582d9a632e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d9a631e8 <col:27> 'Task *' lvalue ParmVar 0x5582d9a5a2a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5582d9a63300 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d9a63208 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5582d9a5a320 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5582d9a63318 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5582d9a63228 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5582d9a59e70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5582d9a63248 <col:62> 'const String' lvalue ParmVar 0x5582d9a5a398 'prefix' 'const String &'
|-CXXMethodDecl 0x5582d9a5a688 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5582d9a5a540 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5582d9a5a5b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5582d9a62bf8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5582d9a62be0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5582d9a62bc8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5582d9a62ba8 <col:70, col:77> 'String' (CXXTemporary 0x5582d9a62ba8)
| |         `-CXXTemporaryObjectExpr 0x5582d9a62b70 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5582d9a63508 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5582d9a63480 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5582d9a63450 <col:9> '<bound member function type>' ->add_task_handlers 0x5582d9a5a1d8
|     | `-CXXThisExpr 0x5582d9a63440 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5582d9a634c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d9a633c0 <col:27> 'Task *' lvalue ParmVar 0x5582d9a5a540 'task' 'Task *'
|     |-ImplicitCastExpr 0x5582d9a634d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5582d9a633e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5582d9a634f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5582d9a63400 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5582d9a59e70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5582d9a63420 <col:57> 'const String' lvalue ParmVar 0x5582d9a5a5b8 'prefix' 'const String &'
|-CXXMethodDecl 0x5582d9a5a968 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5582d9a5a750 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5a7d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5a848 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5582d9a5ac18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5582d9a5aa38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5aab8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5ab38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5582d9a5af08 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5582d9a5ace8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5ad68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5ade0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5582d9a5b1b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5582d9a5afd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5b058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5b0d8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5582d9a5b468 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5582d9a5b288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5b308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5b388 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5582d9a5b718 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5582d9a5b538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5b5b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5b630 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5582d9a5b9c8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5582d9a5b7e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5b868 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5b8e8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5582d9a5bcd8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5582d9a5baf0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5bb70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5bbf0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5582d9a5bfb8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5582d9a5bda8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5be28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5bed0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5582d9a5c298 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5582d9a5c088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5c108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5c1b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5582d9a5c500 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5582d9a5c368 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5582d9a5c3e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5582d9a5c460 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5582d9a5c7a8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5582d9a5c5d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5582d9a5c650 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5582d9a5c6c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5582d9a5ca58 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5582d9a5c878 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5c8f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5c978 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5582d9a5cd08 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5582d9a5cb28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5cba8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5cc20 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5582d9a5cfb8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5582d9a5cdd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5ce58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5ced0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5582d9a5d288 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5582d9a5d088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5d108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5582d9a5d1a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5582d9a5d5b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5582d9a5d358 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5582d9a5d3d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5582d9a5d450 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5582d9a5d4c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d9a62c10 <col:93> 'bool' false
|-CXXMethodDecl 0x5582d9a5d7a0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5582d9a5d688 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5582d9a5d708 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5582d9a5d978 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5582d9a5d860 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5582d9a5d8e0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5582d9a5dc58 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5582d9a5da38 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5582d9a5dab0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5582d9a5db30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5582d9a5dba8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a5df48 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5582d9a5dd28 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5582d9a5dda0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5582d9a5de20 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5582d9a5de98 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a5e180 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5582d9a5e020 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5582d9a5e0a0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5582d9a5e368 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5582d9a5e248 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5582d9a5e2c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5582d9a5e418 prev 0x5582d9a55bb8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d9a5e510 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5582d9a5e5a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5582d9a5e618 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5582d9a5e6d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5582d9a5e7a0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5582d9a5e918 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5582d9a5e850 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5582d9a5e9c0 <col:24>
| | `-OptimizeNoneAttr 0x5582d9a5ea18 <col:34>
| |-CXXMethodDecl 0x5582d9a5ea60 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5582d9a5ed18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5582d9a5eb10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5582d9a5eb88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5582d9a5ec08 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5582d9a5edd0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5582d9a5ee08 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5582d9a5ee70 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5582d9a5eef8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5582d9a5f218 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5582d9a5efb0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5582d9a5f028 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5582d9a5f0a0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5582d9a5f120 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5582d9a5f330 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5582d9a66ca8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5582d9a66ca8
| | `-ParmVarDecl 0x5582d9a66db8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5582d9a66e58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5582d9a66e58
| | `-ParmVarDecl 0x5582d9a66f68 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5582d9902d80 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d9a5f3a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5582d9a5f448 <col:38> "" ""
|-CXXMethodDecl 0x5582d9a5f4d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5582d9a5f578 <col:44> "" ""
|-AccessSpecDecl 0x5582d9a5f5e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5582d9a5f610 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5582d9a5f710 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5582d9a5f760 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a5f6f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5582d9a5f6d0 <col:27> 'int' 4
|-FieldDecl 0x5582d9a5f818 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5582d9a5f9c8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5582d9a5fa80 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5582d9a60b10 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5582d9a60b78 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5582d9a60cc8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5582d9a60c08 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5582d9a60e78 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5582d9a60d88 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5582d9a61058 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5582d9a60f38 <col:20> col:23 'int'
| `-ParmVarDecl 0x5582d9a60fb8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5582d9a61300 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9a61120 <col:23> col:26 'int'
| |-ParmVarDecl 0x5582d9a611a0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5582d9a61218 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5582d9a613b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5582d9a61480 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5582d9a614d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5582d9a61520 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5582d9a61700 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5582d9a615b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5582d9a61628 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a619a8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5582d9a617c8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5582d9a61848 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5582d9a618c0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9a61bc8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5582d9a61a78 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5582d9a61af8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5582d9a61f00 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5582d9a61c88 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5582d9a61d08 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5582d9a61d80 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5582d9a61e00 <col:57> col:60 'int'
|-CXXMethodDecl 0x5582d9a620e8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5582d9a61fd0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5582d9a62050 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5582d9a62238 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5582d9a621a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5582d9a625b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5582d9a622f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5582d9a62378 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5582d9a623f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5582d9a62470 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5582d9a626d0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | class BIM
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class String _dev
       112 |     struct String::rep_t _r
       112 |       const char * data
       120 |       int length
       128 |       struct String::memo_t * memo
       136 |   int _speed
       140 |   int _fd
       144 |   class Task _task
       144 |     struct TaskLink (base)
       144 |       struct TaskLink * _prev
       152 |       struct TaskLink * _next
       160 |       unsigned int _pass
       164 |     unsigned int _stride
       168 |     int _tickets
       172 |     union Task::Status _status
       172 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       172 |         int16_t home_thread_id
       174 |         uint8_t is_scheduled
       175 |         uint8_t is_strong_unscheduled
       172 |       uint32_t status
       176 |     TaskCallback _hook
       184 |     void * _thunk
       192 |     class RouterThread * _thread
       200 |     class Element * _owner
       208 |     union Task::Pending _pending_nextptr
       208 |       class Task * t
       208 |       uintptr_t x
       216 |   char [2048] _buf
      2264 |   int _len
      2268 |   int _started
      2272 |   int _escaped
           | [sizeof=2280, dsize=2276, align=8,
           |  nvsize=2276, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d98242c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5582d98243d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5582d9824478 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5582d98244d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5582d9824538 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5582d98245e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d98248f0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9824a08 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5582d9824ab0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5582d9824b18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5582d9824ba8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5582d982ac40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d982b078 <col:12>
|-CXXConstructorDecl 0x5582d982ad48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d982ae58 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5582d9824ab0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5582d982d600 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5582d982d5d0 <col:12> 'const char *const' lvalue .data 0x5582d9824ab0
| |     `-DeclRefExpr 0x5582d982d5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5582d9824b18 'length' 'int'
| | `-ImplicitCastExpr 0x5582d982d690 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5582d982d660 <col:12> 'const int' lvalue .length 0x5582d9824b18
| |     `-DeclRefExpr 0x5582d982d640 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5582d9824ba8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5582d982d720 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5582d982d6f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5582d9824ba8
| |     `-DeclRefExpr 0x5582d982d6d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| `-CompoundStmt 0x5582d982d778 <col:12>
|-CXXConstructorDecl 0x5582d982aef8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5582d982aef8
| `-ParmVarDecl 0x5582d982b008 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5582d9830560 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d983bf78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d983c088 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5582d983c5a0 <col:12>
|   |-BinaryOperator 0x5582d983c3b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5582d983c370 <col:12> 'const char *' lvalue ->data 0x5582d9824ab0
|   | | `-CXXThisExpr 0x5582d983c360 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5582d983c3a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5582d983c330 <col:12> 'const char *const' lvalue .data 0x5582d9824ab0
|   |     `-DeclRefExpr 0x5582d983c310 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5582d983c480 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5582d983c438 <col:12> 'int' lvalue ->length 0x5582d9824b18
|   | | `-CXXThisExpr 0x5582d983c428 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5582d983c468 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5582d983c3f8 <col:12> 'const int' lvalue .length 0x5582d9824b18
|   |     `-DeclRefExpr 0x5582d983c3d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5582d983c548 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5582d983c500 <col:12> 'String::memo_t *' lvalue ->memo 0x5582d9824ba8
|   | | `-CXXThisExpr 0x5582d983c4f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5582d983c530 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5582d983c4c0 <col:12> 'String::memo_t *const' lvalue .memo 0x5582d9824ba8
|   |     `-DeclRefExpr 0x5582d983c4a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5582d983c590 <col:12>
|     `-UnaryOperator 0x5582d983c578 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d983c568 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5582d983c0f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5582d983c0f8
  `-ParmVarDecl 0x5582d983c208 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d981b830 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d981b948 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5582d981b9d8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5582d981ba18 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5582d94ecfc0 'const char *'
|   `-QualType 0x5582d94ec511 'const char' const
|     `-BuiltinType 0x5582d94ec510 'char'
|-TypedefDecl 0x5582d981baa0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5582d981ba70 'String::const_iterator' sugar
|   |-Typedef 0x5582d981ba18 'const_iterator'
|   `-PointerType 0x5582d94ecfc0 'const char *'
|     `-QualType 0x5582d94ec511 'const char' const
|       `-BuiltinType 0x5582d94ec510 'char'
|-TypedefDecl 0x5582d981bc10 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5582d981bb80 'int (String::*)() const'
|   |-RecordType 0x5582d981b8c0 'String'
|   | `-CXXRecord 0x5582d981b830 'String'
|   `-ParenType 0x5582d981bb20 'int () const' sugar
|     `-FunctionProtoType 0x5582d97f06c0 'int () const' const cdecl
|       `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d981bc78 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5582d96452a0 'int64_t' sugar
|   |-Typedef 0x5582d9555360 'int64_t'
|   `-TypedefType 0x5582d952e600 '__int64_t' sugar
|     |-Typedef 0x5582d952e1d8 '__int64_t'
|     `-BuiltinType 0x5582d94ec590 'long'
|-TypedefDecl 0x5582d981bce0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5582d96451c0 'uint64_t' sugar
|   |-Typedef 0x5582d9555500 'uint64_t'
|   `-TypedefType 0x5582d952e690 '__uint64_t' sugar
|     |-Typedef 0x5582d952e248 '__uint64_t'
|     `-BuiltinType 0x5582d94ec630 'unsigned long'
|-TypedefDecl 0x5582d981bd70 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5582d981bd40 'String::intmax_t' sugar
|   |-Typedef 0x5582d981bc78 'intmax_t'
|   `-TypedefType 0x5582d96452a0 'int64_t' sugar
|     |-Typedef 0x5582d9555360 'int64_t'
|     `-TypedefType 0x5582d952e600 '__int64_t' sugar
|       |-Typedef 0x5582d952e1d8 '__int64_t'
|       `-BuiltinType 0x5582d94ec590 'long'
|-TypedefDecl 0x5582d981be00 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5582d981bdd0 'String::uintmax_t' sugar
|   |-Typedef 0x5582d981bce0 'uintmax_t'
|   `-TypedefType 0x5582d96451c0 'uint64_t' sugar
|     |-Typedef 0x5582d9555500 'uint64_t'
|     `-TypedefType 0x5582d952e690 '__uint64_t' sugar
|       |-Typedef 0x5582d952e248 '__uint64_t'
|       `-BuiltinType 0x5582d94ec630 'unsigned long'
|-CXXConstructorDecl 0x5582d981bec0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5582d981c068 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5582d981bfa8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5582d981c218 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5582d981c158 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5582d981c370 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5582d981c2e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5582d981c588 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5582d981c438 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5582d981c4b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5582d981c7a8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5582d981c658 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5582d981c6d8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5582d981c9c8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5582d981c878 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5582d981c8f8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5582d981cbe8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5582d981ca98 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5582d981cb18 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5582d981cd78 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5582d981ccb0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5582d981cef8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5582d981ce38 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5582d981d088 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5582d981cfc0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5582d981d1e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5582d981d150 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5582d981d338 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5582d981d2a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5582d981d490 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5582d981d400 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5582d981d618 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5582d981d558 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5582d981d7a8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5582d981d6e0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5582d981d938 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5582d981d870 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5582d981dac8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5582d981da00 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5582d981dbc0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5582d981dce8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5582d981de68 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5582d981dda0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5582d981dfb8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5582d981df28 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5582d981e070 <col:63> "" ""
|-CXXMethodDecl 0x5582d981e1b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5582d981e0f8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5582d981e3c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5582d981e278 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5582d981e2f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5582d981e5e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5582d981e490 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5582d981e510 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5582d981e8c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5582d981e6a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5582d981e728 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5582d982a710 <col:55> 'int' 10
| `-ParmVarDecl 0x5582d981e7a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d982a730 <col:76> 'bool' true
|-CXXMethodDecl 0x5582d981eba8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5582d981e990 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5582d981ea10 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5582d982a740 <col:56> 'int' 10
| `-ParmVarDecl 0x5582d981ea88 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d982a760 <col:77> 'bool' true
|-CXXMethodDecl 0x5582d981ecb0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5582d981ed78 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5582d981ee40 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5582d981eee0 <col:20>
| `-OptimizeNoneAttr 0x5582d981ef38 <col:30>
|-CXXConversionDecl 0x5582d981f028 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5582d981f0f8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5582d981f1b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5582d981f2a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5582d981f368 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5582d981f4e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5582d981f420 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5582d981f638 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5582d981f5a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5582d981f728 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5582d981f7e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5582d981fa38 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5582d981f8a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5582d981f920 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5582d981fc98 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5582d981fb00 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5582d981fb80 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5582d981fd68 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d981ff78 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5582d981fe20 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5582d981fea0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5582d9820198 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5582d9820040 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5582d98200c0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5582d9820328 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5582d9820260 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5582d9820418 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5582d9820588 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5582d98204c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5582d9820798 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5582d9820648 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5582d98206c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5582d98209b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5582d9820858 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5582d98208d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5582d9820b40 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5582d9820a70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5582d9820d60 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5582d9820c00 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5582d9820c80 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5582d9820eb0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5582d9820e20 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5582d9821088 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5582d9820f70 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5582d9820ff0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5582d98211d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5582d9821148 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5582d98213f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5582d9821290 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5582d9821310 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5582d982a770 <col:39> 'int' 0
|-CXXMethodDecl 0x5582d9821610 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5582d98214b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5582d9821530 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5582d982a790 <col:48> 'int' 0
|-CXXMethodDecl 0x5582d98217f0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5582d98216d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5582d9821750 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5582d982a7b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5582d98218c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5582d9821980 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5582d9821a40 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5582d9821b00 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5582d9821bc0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5582d9821d68 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5582d9821c70 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5582d9821ee8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5582d9821e20 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5582d98220c0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5582d9821fa8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5582d9822238 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5582d9822178 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5582d9822380 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5582d98222f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5582d98224d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5582d9822440 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5582d98226a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5582d9822590 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5582d9822610 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5582d9822888 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5582d9822770 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5582d98227f0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5582d98229d8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5582d9822948 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5582d9822be8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5582d9822a98 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5582d9822b18 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5582d9822d48 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5582d9822cb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5582d9822ea0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5582d9822e08 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5582d9822f48 <col:57> "" ""
|-CXXMethodDecl 0x5582d9823058 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5582d9822fc8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5582d98231a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5582d9823118 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5582d9823328 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5582d9823260 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5582d98233f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5582d98234b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5582d9823570 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5582d9823610 <col:49> "" ""
|-CXXMethodDecl 0x5582d98236a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5582d9823760 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5582d9823850 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5582d9823918 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5582d98239d8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5582d9823a98 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5582d9823b90 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5582d9823c58 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5582d9823d20 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5582d9823ef8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5582d9823dd8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5582d9823e58 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5582d9824120 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5582d9823fc0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5582d9824040 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5582d9824230 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5582d9824298 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d98242c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5582d98243d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5582d9824478 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5582d98244d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5582d9824538 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5582d98245e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5582d9824650 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5582d9824888 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5582d98248d8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9824868 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5582d9824778 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5582d9824720 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5582d9824760 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5582d9824740 <col:32> 'int' 8
|-CXXRecordDecl 0x5582d98248f0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d9824a08 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5582d9824ab0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5582d9824b18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5582d9824ba8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5582d982ac40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5582d982b078 <col:12>
| |-CXXConstructorDecl 0x5582d982ad48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d982ae58 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5582d9824ab0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5582d982d600 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5582d982d5d0 <col:12> 'const char *const' lvalue .data 0x5582d9824ab0
| | |     `-DeclRefExpr 0x5582d982d5b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5582d9824b18 'length' 'int'
| | | `-ImplicitCastExpr 0x5582d982d690 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5582d982d660 <col:12> 'const int' lvalue .length 0x5582d9824b18
| | |     `-DeclRefExpr 0x5582d982d640 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5582d9824ba8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5582d982d720 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5582d982d6f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5582d9824ba8
| | |     `-DeclRefExpr 0x5582d982d6d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d982ae58 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5582d982d778 <col:12>
| |-CXXConstructorDecl 0x5582d982aef8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5582d982aef8
| | `-ParmVarDecl 0x5582d982b008 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5582d9830560 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5582d983bf78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d983c088 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5582d983c5a0 <col:12>
| |   |-BinaryOperator 0x5582d983c3b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5582d983c370 <col:12> 'const char *' lvalue ->data 0x5582d9824ab0
| |   | | `-CXXThisExpr 0x5582d983c360 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5582d983c3a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5582d983c330 <col:12> 'const char *const' lvalue .data 0x5582d9824ab0
| |   |     `-DeclRefExpr 0x5582d983c310 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5582d983c480 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5582d983c438 <col:12> 'int' lvalue ->length 0x5582d9824b18
| |   | | `-CXXThisExpr 0x5582d983c428 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5582d983c468 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5582d983c3f8 <col:12> 'const int' lvalue .length 0x5582d9824b18
| |   |     `-DeclRefExpr 0x5582d983c3d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5582d983c548 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5582d983c500 <col:12> 'String::memo_t *' lvalue ->memo 0x5582d9824ba8
| |   | | `-CXXThisExpr 0x5582d983c4f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5582d983c530 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5582d983c4c0 <col:12> 'String::memo_t *const' lvalue .memo 0x5582d9824ba8
| |   |     `-DeclRefExpr 0x5582d983c4a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5582d983c088 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5582d983c590 <col:12>
| |     `-UnaryOperator 0x5582d983c578 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5582d983c568 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5582d983c0f8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5582d983c0f8
|   `-ParmVarDecl 0x5582d983c208 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5582d9824c20 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5582d9824e68 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5582d9824c88 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5582d9824d08 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5582d9824d80 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5582d982ac00 <col:79, line:261:5>
|   |-BinaryOperator 0x5582d982a878 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5582d982a810 <col:2, col:5> 'const char *' lvalue .data 0x5582d9824ab0
|   | | `-MemberExpr 0x5582d982a7e0 <col:2> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|   | |   `-CXXThisExpr 0x5582d982a7d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5582d982a860 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5582d982a840 <col:12> 'const char *' lvalue ParmVar 0x5582d9824c88 'data' 'const char *'
|   |-BinaryOperator 0x5582d982a940 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5582d982a8d8 <col:2, col:5> 'int' lvalue .length 0x5582d9824b18
|   | | `-MemberExpr 0x5582d982a8a8 <col:2> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|   | |   `-CXXThisExpr 0x5582d982a898 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5582d982a928 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5582d982a908 <col:14> 'int' lvalue ParmVar 0x5582d9824d08 'length' 'int'
|   `-IfStmt 0x5582d982abe8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5582d982aa60 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5582d982aa48 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5582d982aa28 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5582d982aa08 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5582d982a9a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|     |       | `-MemberExpr 0x5582d982a970 <col:7> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|     |       |   `-CXXThisExpr 0x5582d982a960 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5582d982a9f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5582d982a9d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5582d9824d80 'memo' 'String::memo_t *'
|     `-CallExpr 0x5582d982abc0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5582d982aba8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d982aab0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5582d9813898 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5582d982ab18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5582d9824478
|         `-ImplicitCastExpr 0x5582d982ab00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5582d982aae0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5582d9824d80 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5582d9825118 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5582d9824f38 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5582d9824fb8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5582d9825030 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5582d9824c20 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5582d982b088 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d982b218 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5582d982b180 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5582d982b0f0 <col:2> '<bound member function type>' ->assign_memo 0x5582d9824e68
|     | `-ImplicitCastExpr 0x5582d982b1b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5582d982b0e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5582d982b1d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d982b120 <col:14> 'const char *' lvalue ParmVar 0x5582d9824f38 'data' 'const char *'
|     |-ImplicitCastExpr 0x5582d982b1e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d982b140 <col:20> 'int' lvalue ParmVar 0x5582d9824fb8 'length' 'int'
|     `-ImplicitCastExpr 0x5582d982b200 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5582d982b160 <col:28> 'String::memo_t *' lvalue ParmVar 0x5582d9825030 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5582d98252a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5582d98251e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5582d982b470 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5582d982b3f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5582d982b240 <col:2> '<bound member function type>' ->assign_memo 0x5582d9824e68
|     | `-CXXThisExpr 0x5582d982b230 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5582d982b428 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5582d982b2c0 <col:14, col:19> 'const char *' lvalue .data 0x5582d9824ab0
|     |   `-MemberExpr 0x5582d982b290 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5582d9824c20
|     |     `-DeclRefExpr 0x5582d982b270 <col:14> 'const String' lvalue ParmVar 0x5582d98251e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5582d982b440 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5582d982b340 <col:25, col:30> 'int' lvalue .length 0x5582d9824b18
|     |   `-MemberExpr 0x5582d982b310 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5582d9824c20
|     |     `-DeclRefExpr 0x5582d982b2f0 <col:25> 'const String' lvalue ParmVar 0x5582d98251e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5582d982b458 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5582d982b3c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|         `-MemberExpr 0x5582d982b390 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5582d9824c20
|           `-DeclRefExpr 0x5582d982b370 <col:38> 'const String' lvalue ParmVar 0x5582d98251e8 'x' 'const String &'
|-CXXMethodDecl 0x5582d9825370 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5582d982be30 <col:31, line:278:5>
|   `-IfStmt 0x5582d982be18 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5582d982b510 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5582d982b4f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5582d982b4c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|     |     `-MemberExpr 0x5582d982b498 <col:6> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|     |       `-CXXThisExpr 0x5582d982b488 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5582d982bdf0 <col:15, line:277:2>
|       |-ParenExpr 0x5582d982b9c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5582d982b990 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5582d982b620 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5582d982b608 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5582d982b5f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5582d982b5b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5582d9824478
|       |   |       `-ImplicitCastExpr 0x5582d982b598 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5582d982b568 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|       |   |           `-MemberExpr 0x5582d982b538 <col:27> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|       |   |             `-CXXThisExpr 0x5582d982b528 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5582d982b680 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5582d982b660 <col:54> 'int' 0
|       |   `-CallExpr 0x5582d982b8f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5582d982b8d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5582d982b858 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5582d982b930 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5582d982b768 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5582d982b948 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5582d982b798 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5582d982b960 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5582d982b7d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5582d982b978 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5582d982b840 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5582d982b828 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5582d982b7f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5582d982bd10 <line:274:6, line:275:22>
|       | |-CallExpr 0x5582d982bbd0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5582d982bbb8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5582d982bb30 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5582d9814ce0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5582d982bb00 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5582d9824478
|       | |   `-ImplicitCastExpr 0x5582d982bae8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5582d982bab8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|       | |       `-MemberExpr 0x5582d982ba88 <col:40> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|       | |         `-CXXThisExpr 0x5582d982ba78 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5582d982bcd0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5582d982bcb8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5582d982bbf8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5582d9829b50 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5582d982bcf8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5582d982bc58 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|       |       `-MemberExpr 0x5582d982bc28 <col:15> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|       |         `-CXXThisExpr 0x5582d982bc18 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5582d982bdd0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5582d982bd68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5582d9824ba8
|         | `-MemberExpr 0x5582d982bd38 <col:6> 'String::rep_t' lvalue ->_r 0x5582d9824c20
|         |   `-CXXThisExpr 0x5582d982bd28 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5582d982bdb8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5582d982bd98 <col:16> 'int' 0
|-CXXMethodDecl 0x5582d9825608 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5582d9825428 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5582d98254a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5582d9825520 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5582d98256e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5582d9825930 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5582d9825798 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5582d9825818 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5582d9825890 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5582d9825b18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5582d9825a00 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5582d9825a80 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5582d9825c18 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5582d982bf08 <col:41, line:286:5>
|   `-ReturnStmt 0x5582d982bef8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5582d982bec8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5582d982be90 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5582d982be78 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5582d982be58 <col:46> 'int' 1
|-CXXMethodDecl 0x5582d9825eb8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5582d9825cd0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5582d9825d50 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5582d9825dd0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5582d9829b50 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5582d9825f80 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5582d9829c20 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5582d9829df0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5582d9829cd8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5582d9829d58 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5582d9829eb0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5582d9829f78 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5582d982a078 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5582d982a0f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5582d982a168 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5582d982a1d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5582d982a2d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5582d982a320 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d982a2b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5582d982a290 <col:22> 'int' 14
|-CXXMethodDecl 0x5582d982a538 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5582d982a350 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5582d982a3d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5582d982a450 <col:43> col:46 'int'
|-FriendDecl 0x5582d982a640 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5582d982a6d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a6ed50 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9a6ee68 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x5582d9a6ef38 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x5582d9a6ef98 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x5582d9a6f000 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x5582d9a6f088 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x5582d9a6f2f0 <col:16, line:46:5>
|   |-BinaryOperator 0x5582d9a6f238 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x5582d9a6f158 <col:9> 'TaskLink *' lvalue ->_prev 0x5582d9a6ef38
|   | | `-CXXThisExpr 0x5582d9a6f148 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a6f220 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x5582d9a6f200 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x5582d9a6f198 <col:17> 'TaskLink *' lvalue ->_next 0x5582d9a6ef98
|   |     | `-CXXThisExpr 0x5582d9a6f188 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x5582d9a6f1e8 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x5582d9a6f1c8 <col:25> 'int' 0
|   `-BinaryOperator 0x5582d9a6f2d0 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x5582d9a6f268 <col:9> 'unsigned int' lvalue ->_pass 0x5582d9a6f000
|     | `-CXXThisExpr 0x5582d9a6f258 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x5582d9a6f2b8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5582d9a6f298 <col:17> 'int' 0
|-CXXConstructorDecl 0x5582d9afb828 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x5582d9afb828
| `-ParmVarDecl 0x5582d9afb938 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5582d9afb9d8 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5582d9afb9d8
| `-ParmVarDecl 0x5582d9afbae8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5582d9afbcd8 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d9afc4d8 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5582d9afc4d8
| `-ParmVarDecl 0x5582d9afc5e8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x5582d9afc658 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x5582d9afc658
  `-ParmVarDecl 0x5582d9afc768 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99d2418 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5582d99d2548 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5582d99d25a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x5582d99d2608 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5582d9b029e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5582d9b02ac0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5582d9b02d78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5582d9b02d78
| `-ParmVarDecl 0x5582d9b02e88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x5582d9b02f28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5582d9b02f28
  `-ParmVarDecl 0x5582d9b03038 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99d2268 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d99d2388 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x5582d99d2418 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5582d99d2548 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5582d99d25a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x5582d99d2608 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5582d9b029e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5582d9b02ac0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5582d9b02d78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5582d9b02d78
| | `-ParmVarDecl 0x5582d9b02e88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x5582d9b02f28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5582d9b02f28
|   `-ParmVarDecl 0x5582d9b03038 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5582d99d26c8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x5582d99d2728 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5582d99d2548 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x5582d99d2780 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5582d99d25a8 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5582d99d27d8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5582d99d2608 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x5582d99d2830 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5582d9b028f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d9b03258 <col:11>
|-CXXConstructorDecl 0x5582d9b02bc8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5582d9b02bc8
| `-ParmVarDecl 0x5582d9b02cd8 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x5582d9b030d8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5582d9b030d8
| `-ParmVarDecl 0x5582d9b031e8 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x5582d9902ca0 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99e9d60 prev 0x5582d99e0ba0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d99e9e58 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5582d99e9ef8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5582d99f0cc0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d99f10a8 <col:11>
|-CXXConstructorDecl 0x5582d99f0da0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d99f0e88 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5582d99f17f0 <col:11>
|-CXXConstructorDecl 0x5582d99f0f28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d99f1038 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5582d99f3048 <col:11>
|-CXXDestructorDecl 0x5582d99f2358 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d96f8f08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d96f9018 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5582d96f98e0 <col:11>
|   `-ReturnStmt 0x5582d96f98d0 <col:11>
|     `-UnaryOperator 0x5582d96f98b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d96f98a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5582d96f9088 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5582d96f9198 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5582d9a8b780 <col:11>
    `-ReturnStmt 0x5582d9a8b770 <col:11>
      `-UnaryOperator 0x5582d9a8b758 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5582d9a8b748 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99dfd58 prev 0x5582d99dfa68 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d99dfe50 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5582d99dfee0 <col:19, col:25> col:19 public
|-TypedefDecl 0x5582d99dff18 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5582d96450e0 'int32_t' sugar
|   |-Typedef 0x5582d95552f8 'int32_t'
|   `-TypedefType 0x5582d952e4e0 '__int32_t' sugar
|     |-Typedef 0x5582d952e0f8 '__int32_t'
|     `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d99dff80 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5582d96452a0 'int64_t' sugar
|   |-Typedef 0x5582d9555360 'int64_t'
|   `-TypedefType 0x5582d952e600 '__int64_t' sugar
|     |-Typedef 0x5582d952e1d8 '__int64_t'
|     `-BuiltinType 0x5582d94ec590 'long'
|-EnumDecl 0x5582d99dffd8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5582d99e0150 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5582d99e0130 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5582d99e0108 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5582d99e00f0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5582d99e00c0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5582d99e0248 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5582d99e0228 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5582d99e0200 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5582d99e01e8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5582d99e01c0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5582d99e01a0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5582d99e0298 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5582d99e03a0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e08f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e0380 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5582d99e0360 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5582d99e0430 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0908 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e0410 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5582d99e03f0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5582d99e04c0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0920 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e04a0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5582d99e0480 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5582d99e0550 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0938 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e0530 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5582d99e0510 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5582d99e05e0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0950 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e05c0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5582d99e05a0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5582d99e0670 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0968 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e0650 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5582d99e0630 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5582d99e0700 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0980 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e06e0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5582d99e06c0 <col:26> 'int' EnumConstant 0x5582d99e03a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5582d99e07d0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5582d99e0998 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99e07b0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5582d99e0790 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5582d99e0750 <col:27> 'int' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5582d99e0770 <col:44> 'int' EnumConstant 0x5582d99e0670 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5582d99e08a0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5582d99e09b0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d99e0880 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5582d99e0860 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5582d99e0820 <col:27> 'int' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5582d99e0840 <col:44> 'int' EnumConstant 0x5582d99e0550 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5582d99e09c8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5582d99e0ad0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5582d99e0b20 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d99e0ab0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5582d99e0a90 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5582d99e0b48 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5582d9644d10 'uninitialized_type'
|   `-CXXRecord 0x5582d9644c78 'uninitialized_type'
|-CXXRecordDecl 0x5582d99e0ba0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5582d99e0cb0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f10b8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f11d8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5582d99f1190 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5582d99f1120 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d99f1110 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5582d99f1150 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5582d99f11c0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5582d99f1170 <col:19> 'int' 0
|-CXXConstructorDecl 0x5582d99e0ef8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e0d70 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5582d99e0de8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99ec9f0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99ec9d0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f11f0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f1340 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5582d99f12c8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5582d99f1258 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d99f1248 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d99f1310 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5582d99f12f8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5582d99f1288 <col:16> 'long' lvalue ParmVar 0x5582d99e0d70 'sec' 'long'
|     `-ImplicitCastExpr 0x5582d99f1328 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d99f12a8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e0de8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5582d99e1158 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e0fc8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5582d99e1040 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99eca28 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99eca08 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f1358 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f1490 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5582d99f1430 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5582d99f13c0 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d99f13b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d99f1460 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d99f13f0 <col:16> 'int' lvalue ParmVar 0x5582d99e0fc8 'sec' 'int'
|     `-ImplicitCastExpr 0x5582d99f1478 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d99f1410 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e1040 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5582d99e13b8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e1228 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5582d99e12a0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99eca60 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99eca40 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f14a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f15f8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5582d99f1580 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5582d99f1510 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d99f1500 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d99f15c8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5582d99f15b0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5582d99f1540 <col:16> 'unsigned long' lvalue ParmVar 0x5582d99e1228 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5582d99f15e0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d99f1560 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e12a0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5582d99e2550 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e1488 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5582d99e1500 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99eca98 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99eca78 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f1610 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f1760 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5582d99f16e8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5582d99f1678 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d99f1668 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d99f1730 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5582d99f1718 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5582d99f16a8 <col:16> 'unsigned int' lvalue ParmVar 0x5582d99e1488 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5582d99f1748 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d99f16c8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e1500 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5582d99e26b0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5582d99e2620 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5582d99e2848 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5582d99e2788 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5582d99e2a78 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5582d99e2980 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5582d99e2c28 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5582d99e2b68 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f1800 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5582d99f1778 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5582d99e2b68 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5582d99f1860 <col:19, line:214:5>
|-CXXConstructorDecl 0x5582d99e2df8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5582d99e2d38 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f1870 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5582d99f1920 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5582d99f18f8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5582d99f18c8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5582d99e2d38 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5582d99e2fe8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5582d99e2f60 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5582d99dfb00 'Timestamp'
|   | `-CXXRecord 0x5582d99dfd58 'Timestamp'
|   `-ParenType 0x5582d99e2f00 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5582d99e2ed0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5582d99e00a0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5582d99dff18 'seconds_type'
|         `-TypedefType 0x5582d96450e0 'int32_t' sugar
|           |-Typedef 0x5582d95552f8 'int32_t'
|           `-TypedefType 0x5582d952e4e0 '__int32_t' sugar
|             |-Typedef 0x5582d952e0f8 '__int32_t'
|             `-BuiltinType 0x5582d94ec570 'int'
|-CXXConversionDecl 0x5582d99e3128 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5582d99e31f8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5582d99f1a28 <col:37, line:231:5>
|   `-ReturnStmt 0x5582d99f1a18 <line:227:9, col:23>
|     `-BinaryOperator 0x5582d99f19f8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5582d99f19c8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5582d99f1978 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5582d99e9ef8
|       |   `-MemberExpr 0x5582d99f1948 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|       |     `-CXXThisExpr 0x5582d99f1938 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5582d99f19e0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5582d99f19a8 <col:23> 'int' 0
|-CXXMethodDecl 0x5582d99e32b8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5582d99e3378 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d99e3438 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d99e34f8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d99e35b8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d99e3728 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5582d99e3668 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5582d99e3870 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5582d99e37e0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e3938 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5582d99e39d8 <col:54> "" ""
|-CXXMethodDecl 0x5582d99e3a68 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5582d99e3b08 <col:54> "" ""
|-CXXMethodDecl 0x5582d99e3b98 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5582d99e3c38 <col:54> "" ""
|-CXXMethodDecl 0x5582d99e3d38 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5582d99e3e08 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5582d99e3f38 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5582d99e4030 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5582d99e4168 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5582d99f1c40 <col:39, line:271:5>
|   `-ReturnStmt 0x5582d99f1c30 <line:267:9, col:61>
|     `-CallExpr 0x5582d99f1bd0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5582d99f1bb8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d99f1a40 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5582d99eb1d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5582d99f1c00 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5582d99f1aa0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5582d99e9ef8
|       |   `-MemberExpr 0x5582d99f1a70 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|       |     `-CXXThisExpr 0x5582d99f1a60 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5582d99f1c18 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5582d99f1b40 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5582d99f1b10 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5582d99f1ad0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5582d99f1b28 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5582d99f1af0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0670 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e4228 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5582d99f1e00 <col:39, line:279:5>
|   `-ReturnStmt 0x5582d99f1df0 <line:275:9, col:61>
|     `-CallExpr 0x5582d99f1d90 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5582d99f1d78 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d99f1c58 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5582d99eb1d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5582d99f1dc0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5582d99f1cb8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5582d99e9ef8
|       |   `-MemberExpr 0x5582d99f1c88 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|       |     `-CXXThisExpr 0x5582d99f1c78 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5582d99f1dd8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5582d99f1d58 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5582d99f1d28 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5582d99f1ce8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5582d99f1d40 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5582d99f1d08 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0550 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e42e8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5582d99f1f98 <col:39, line:287:5>
|   `-ReturnStmt 0x5582d99f1f88 <line:283:9, col:53>
|     `-BinaryOperator 0x5582d99f1f68 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5582d99f1f38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5582d99f1e58 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5582d99e9ef8
|       |   `-MemberExpr 0x5582d99f1e28 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|       |     `-CXXThisExpr 0x5582d99f1e18 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5582d99f1f50 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5582d99f1f18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5582d99f1ef8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5582d99f1ec8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d99f1e88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e03a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d99f1ee0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d99f1ea8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e43d8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5582d99f3230 <col:40, line:293:5>
|   |-DeclStmt 0x5582d99f20e0 <line:291:9, col:48>
|   | `-VarDecl 0x5582d99f1fc0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5582d99f20c0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5582d99f2068 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5582d99f2038 <col:22> '<bound member function type>' ->subsec 0x5582d99e3378
|   |     |   `-CXXThisExpr 0x5582d99f2028 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5582d99f20a8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5582d99f2088 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e07d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5582d99f3220 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5582d99f3208 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f31d8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f31c0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5582d99f31a0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5582d99f3170 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5582d99f2f08 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5582d99f2ef0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5582d99f20f8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5582d99f1fc0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5582d99f3110 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5582d99f30f8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5582d99f30c8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5582d99f2f20 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5582d99f2e90 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5582d99f2e78 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5582d99f2e28 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d99dfca8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5582d99f2dc8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5582d99f2128 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5582d99f2118 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5582d99f2e10 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5582d99f2df8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5582d99f25e8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5582d99f2150 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5582d99f21e0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5582d99f21b0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5582d99f2170 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e07d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5582d99f21c8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5582d99f2190 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5582d99f1fc0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5582d99f3140 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5582d99f2ed8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5582d99f2ec8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5582d99e4498 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5582d99f3788 <col:40, line:302:5>
|   |-DeclStmt 0x5582d99f3380 <line:297:9, col:48>
|   | `-VarDecl 0x5582d99f3260 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5582d99f3360 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5582d99f3308 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5582d99f32d8 <col:22> '<bound member function type>' ->subsec 0x5582d99e3378
|   |     |   `-CXXThisExpr 0x5582d99f32c8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5582d99f3348 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5582d99f3328 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e08a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5582d99f3778 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5582d99f3760 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f3730 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f3718 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5582d99f36f8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5582d99f36c8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5582d99f35f0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5582d99f35d8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5582d99f3398 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5582d99f3260 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5582d99f3668 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5582d99f3650 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5582d99f3620 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5582d99f3608 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5582d99f3578 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5582d99f3560 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5582d99f3540 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d99dfca8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5582d99f34e0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5582d99f33c8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5582d99f33b8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5582d99f3528 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5582d99f3510 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5582d99f34a0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5582d99f33f0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5582d99f3480 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5582d99f3450 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5582d99f3410 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e08a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5582d99f3468 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5582d99f3430 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5582d99f3260 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5582d99f3698 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5582d99f35c0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5582d99f35b0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5582d99e4558 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5582d99f3810 <col:40, line:306:5>
|   `-ReturnStmt 0x5582d99f3800 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5582d99f37d0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5582d99f37b8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d99f37a8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5582d99e46f8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5582d99e4608 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e48c8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5582d99e47d0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5582d99e49b8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5582d99e4b28 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5582d99e4a68 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5582d99f3958 <col:56, line:320:5>
|   `-ReturnStmt 0x5582d99f3948 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5582d99f3930 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f3900 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f38e8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d99f38a8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5582d99f3878 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5582d99f3838 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e4a68 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5582d99f3890 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5582d99f3858 <col:31> 'int' 0
|-CXXMethodDecl 0x5582d99e4d68 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e4be0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e4c58 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d99f3b28 <col:72, line:326:5>
|   `-ReturnStmt 0x5582d99f3b18 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5582d99f3b00 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f3ad0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f3ab8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d99f3a78 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5582d99f3a60 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5582d99f3980 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e4be0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5582d99f3a20 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5582d99f3a08 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5582d99f39a0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5582d99e9650 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5582d99f3a48 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5582d99f39c0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e4c58 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e4f18 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5582d99e4e28 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5582d99f41f0 <col:56, line:337:5>
|   |-DeclStmt 0x5582d99f3e28 <line:329:9, col:51>
|   | `-VarDecl 0x5582d99f3b50 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5582d99f3e10 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5582d99f3de0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5582d99f3dc8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5582d99f3db0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5582d99f3d80 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5582d99f3d68 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5582d99f3d50 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5582d99f3c40 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5582d99f3fe0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5582d99f3e90 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5582d99e9ef8
|   | | `-MemberExpr 0x5582d99f3e60 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5582d99eaea8
|   | |   `-DeclRefExpr 0x5582d99f3e40 <col:9> 'Timestamp' lvalue Var 0x5582d99f3b50 't' 'Timestamp'
|   | `-BinaryOperator 0x5582d99f3fc0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5582d99f3f90 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5582d99f3ec0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5582d99e4e28 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5582d99f3fa8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5582d99f3f70 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5582d99f3f50 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5582d99f3f20 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5582d99f3ee0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5582d99f3f38 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5582d99f3f00 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0670 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5582d99f41d8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5582d99f41a8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5582d99f4190 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5582d99f4170 <col:16> 'Timestamp' lvalue Var 0x5582d99f3b50 't' 'Timestamp'
|-CXXMethodDecl 0x5582d99e50e0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e4fd0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5048 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d99f43a8 <col:72, line:343:5>
|   `-ReturnStmt 0x5582d99f4398 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5582d99f4380 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f4350 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f4338 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d99f42f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5582d99f42e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5582d99f4228 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e4fd0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5582d99f42a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5582d99f4288 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5582d99f4248 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5582d99e9798 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5582d99f42c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5582d99f4268 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e5048 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e5230 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5582d99e51a0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5582d99f47f0 <col:56, line:354:5>
|   |-DeclStmt 0x5582d99f4598 <line:346:9, col:51>
|   | `-VarDecl 0x5582d99f43d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5582d99f4580 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5582d99f4550 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5582d99f4538 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5582d99f4520 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5582d99f44f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5582d99f44d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5582d99f44c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5582d99f4490 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5582d99f4750 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5582d99f4600 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5582d99e9ef8
|   | | `-MemberExpr 0x5582d99f45d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5582d99eaea8
|   | |   `-DeclRefExpr 0x5582d99f45b0 <col:9> 'Timestamp' lvalue Var 0x5582d99f43d0 't' 'Timestamp'
|   | `-BinaryOperator 0x5582d99f4730 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5582d99f4700 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5582d99f4630 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5582d99e51a0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5582d99f4718 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5582d99f46e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5582d99f46c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5582d99f4690 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5582d99f4650 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5582d99f46a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5582d99f4670 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0550 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5582d99f47d8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5582d99f47a8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5582d99f4790 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5582d99f4770 <col:16> 'Timestamp' lvalue Var 0x5582d99f43d0 't' 'Timestamp'
|-CXXMethodDecl 0x5582d99e53f8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e52e8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5360 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d99f49a8 <col:72, line:360:5>
|   `-ReturnStmt 0x5582d99f4998 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5582d99f4980 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5582d99f4950 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d99f4938 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d99f48f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5582d99f48e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5582d99f4828 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e52e8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5582d99f48a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5582d99f4888 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5582d99f4848 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5582d99e98e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5582d99f48c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5582d99f4868 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e5360 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e5548 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5582d99e54b8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5582d9a01318 <col:56, line:371:5>
|   |-DeclStmt 0x5582d99f4b98 <line:363:9, col:51>
|   | `-VarDecl 0x5582d99f49d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5582d99f4b80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5582d99f4b50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5582d99f4b38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5582d99f4b20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5582d99f4af0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5582d99f4ad8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5582d99f4ac0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5582d99f4a90 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5582d9a01278 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5582d99f4c00 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5582d99e9ef8
|   | | `-MemberExpr 0x5582d99f4bd0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5582d99eaea8
|   | |   `-DeclRefExpr 0x5582d99f4bb0 <col:9> 'Timestamp' lvalue Var 0x5582d99f49d0 't' 'Timestamp'
|   | `-CallExpr 0x5582d9a01218 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5582d9a01200 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5582d99f4c30 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5582d99eb1d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5582d9a01248 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5582d99f4c50 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5582d99e54b8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5582d9a01260 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5582d9a011e0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5582d9a011b0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5582d99f4c70 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e03a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5582d9a011c8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5582d99f4c90 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5582d9a01300 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5582d9a012d0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5582d9a012b8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5582d9a01298 <col:16> 'Timestamp' lvalue Var 0x5582d99f49d0 't' 'Timestamp'
|-CXXMethodDecl 0x5582d99e5638 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5582d9a01458 <col:39, line:377:5>
|   `-ReturnStmt 0x5582d9a01448 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5582d9a01430 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5582d9a01400 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d9a013e8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d9a013a8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5582d9a01350 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5582d9a01390 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5582d9a01370 <col:29> 'int' 1
|-CXXMethodDecl 0x5582d99e56f8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5582d9a01538 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5582d9a014f0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5582d9a01480 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d9a01470 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5582d9a014b0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5582d9a01520 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5582d9a014d0 <col:19> 'int' 0
|-CXXMethodDecl 0x5582d99e58f8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e57a8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5820 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99ecad0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99ecab0 <col:60> 'int' 0
| `-CompoundStmt 0x5582d9a01730 <col:63, line:395:5>
|   `-BinaryOperator 0x5582d9a01710 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5582d9a01590 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5582d99e9ef8
|     | `-MemberExpr 0x5582d9a01560 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|     |   `-CXXThisExpr 0x5582d9a01550 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5582d9a016f0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5582d9a01680 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5582d9a01620 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5582d9a01608 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5582d9a015f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5582d9a015c0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e57a8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5582d9a01668 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5582d9a01648 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5582d9a016d8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5582d9a016c0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5582d9a016a0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e5820 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e5ac8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e59b8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5a30 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a01888 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5582d9a01840 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5582d9a01758 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d9a01748 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d9a01870 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d9a01788 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e59b8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5582d9a01800 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5582d9a017e8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9a017a8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5582d99e9798 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5582d9a01828 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a017c8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e5a30 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e5c98 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e5b88 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5c00 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a019e0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5582d9a01998 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5582d9a018b0 <col:9> '<bound member function type>' ->assign 0x5582d99e58f8
|     | `-CXXThisExpr 0x5582d9a018a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5582d9a019c8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5582d9a018e0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5582d99e5b88 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5582d9a01958 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5582d9a01940 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9a01900 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5582d99e98e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5582d9a01980 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a01920 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e5c00 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99e5e68 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e5d58 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e5dd0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5582d99ecb08 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5582d99ecae8 <col:57> 'int' 0
| `-DeprecatedAttr 0x5582d99e5f18 <col:75> "" ""
|-CXXMethodDecl 0x5582d99e60a8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e5f98 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e6010 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99e6158 <col:74> "" ""
|-CXXMethodDecl 0x5582d99e62e8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5582d99e61d8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5582d99e6250 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99e6398 <col:74> "" ""
|-CXXMethodDecl 0x5582d99e6428 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5582d99e64c8 <col:42> "" ""
|-CXXMethodDecl 0x5582d99e8d00 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5582d99e8be0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5582d99e8c60 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5582d99e8dd0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99e8e90 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5582d99e8f30 <col:20>
| `-OptimizeNoneAttr 0x5582d99e8f88 <col:30>
|-CXXMethodDecl 0x5582d99e8fd0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99e9090 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5582d99e9150 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99e9210 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5582d99e92d0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99e9390 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5582d99e9450 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5582d99e9510 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5582d99e9650 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e95c0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a01b28 <col:58, line:512:5>
|   `-ReturnStmt 0x5582d9a01b18 <line:511:9, col:53>
|     `-BinaryOperator 0x5582d9a01af8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5582d9a01ac8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a019f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e95c0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a01ae0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a01aa8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5582d9a01a88 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a01a58 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a01a18 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a01a70 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a01a38 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0670 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e9798 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e9708 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a01c70 <col:58, line:516:5>
|   `-ReturnStmt 0x5582d9a01c60 <line:515:9, col:53>
|     `-BinaryOperator 0x5582d9a01c40 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5582d9a01c10 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a01b40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e9708 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a01c28 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a01bf0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5582d9a01bd0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a01ba0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a01b60 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a01bb8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a01b80 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0550 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e98e0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e9850 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a01db8 <col:58, line:520:5>
|   `-ReturnStmt 0x5582d9a01da8 <line:519:9, col:53>
|     `-BinaryOperator 0x5582d9a01d88 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5582d9a01d58 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a01c88 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e9850 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a01d70 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a01d38 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5582d9a01d18 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a01ce8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a01ca8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e03a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a01d00 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a01cc8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e9a28 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e9998 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a01f00 <col:60, line:524:5>
|   `-ReturnStmt 0x5582d9a01ef0 <line:523:9, col:55>
|     `-BinaryOperator 0x5582d9a01ed0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5582d9a01ea0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a01dd0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e9998 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a01eb8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a01e80 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5582d9a01e60 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a01e30 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a01df0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a01e48 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a01e10 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0670 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e9b70 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e9ae0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a02048 <col:60, line:528:5>
|   `-ReturnStmt 0x5582d9a02038 <line:527:9, col:55>
|     `-BinaryOperator 0x5582d9a02018 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5582d9a01fe8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a01f18 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e9ae0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a02000 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a01fc8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5582d9a01fa8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a01f78 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a01f38 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a01f90 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a01f58 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0550 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5582d99e9cb8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5582d99e9c28 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a02190 <col:60, line:532:5>
|   `-ReturnStmt 0x5582d9a02180 <line:531:9, col:55>
|     `-BinaryOperator 0x5582d9a02160 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5582d9a02130 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a02060 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99e9c28 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5582d9a02148 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5582d9a02110 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5582d9a020f0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5582d9a020c0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5582d9a02080 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e03a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5582d9a020d8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5582d9a020a0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5582d99e0700 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5582d99e9d60 prev 0x5582d99e0ba0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d99e9e58 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5582d99e9ef8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5582d99f0cc0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5582d99f10a8 <col:11>
| |-CXXConstructorDecl 0x5582d99f0da0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d99f0e88 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5582d99f17f0 <col:11>
| |-CXXConstructorDecl 0x5582d99f0f28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d99f1038 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5582d99f3048 <col:11>
| |-CXXDestructorDecl 0x5582d99f2358 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5582d96f8f08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d96f9018 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5582d96f98e0 <col:11>
| |   `-ReturnStmt 0x5582d96f98d0 <col:11>
| |     `-UnaryOperator 0x5582d96f98b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5582d96f98a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5582d96f9088 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5582d96f9198 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5582d9a8b780 <col:11>
|     `-ReturnStmt 0x5582d9a8b770 <col:11>
|       `-UnaryOperator 0x5582d9a8b758 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9a8b748 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5582d99e9f60 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5582d99ea060 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5582d99ea260 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99ea040 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d99ea020 <col:21> 'int' 0
| |-EnumConstantDecl 0x5582d99ea0f0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5582d99ea278 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99ea0d0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5582d99ea0b0 <col:23> 'int' 1
| |-EnumConstantDecl 0x5582d99ea180 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5582d99ea290 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d99ea160 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5582d99ea140 <col:23> 'int' 2
| `-EnumConstantDecl 0x5582d99ea210 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5582d99ea2a8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d99ea1f0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5582d99ea1d0 <col:27> 'int' 3
|-CXXMethodDecl 0x5582d99ea2e8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5582d99ea3b0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5582d99ea5b8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5582d99ea460 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5582d99ea4e0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5582d99ecb20 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5582d99ea7c8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5582d99ea678 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5582d99ea6f0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5582d99ea898 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5582d99ea958 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5582d99eaac8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5582d99eaa08 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5582d99eab90 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99eac50 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5582d99ead10 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5582d99eadd0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5582d99eae70 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5582d99eaea8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5582d99eaf18 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5582d9a021a8 <col:27, line:684:5>
|-CXXMethodDecl 0x5582d99eafd8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5582d9a021b8 <col:27, line:696:5>
|-CXXMethodDecl 0x5582d99eb1d8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5582d99eb088 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5582d99eb100 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a02340 <col:66, line:700:5>
|   `-ReturnStmt 0x5582d9a02330 <line:699:9, col:31>
|     `-CallExpr 0x5582d9a022d0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5582d9a022b8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9a02268 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5582d986d588 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5582d9a02300 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5582d9a02228 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5582d99eb088 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5582d9a02318 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a02248 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99eb100 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99eb548 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5582d99eb298 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5582d99eb310 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5582d99eb388 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5582d99eb400 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a02690 <col:64, line:707:5>
|   |-DeclStmt 0x5582d9a023d0 <line:704:9, col:24>
|   | `-VarDecl 0x5582d9a02368 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5582d9a025e0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5582d9a023e8 <col:9> 'int32_t':'int' lvalue ParmVar 0x5582d99eb310 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5582d9a025c8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5582d9a02560 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5582d9a02548 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a024c8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5582d9872858 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5582d9a02598 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5582d9a02468 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5582d99eb388 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5582d9a025b0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5582d9a02488 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99eb400 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5582d9a024a8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5582d9a02368 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5582d9a02670 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5582d9a02600 <col:9> 'int32_t':'int' lvalue ParmVar 0x5582d99eb298 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5582d9a02658 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5582d9a02640 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a02620 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5582d9a02368 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5582d99eb7e8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5582d99eb618 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5582d99eb690 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5582d99eb708 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5582d99eba88 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5582d99eb8b0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5582d99eb928 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5582d99eb9a0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5582d99ebc18 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5582d99ebb50 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5582d99ebe18 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5582d99ebcd0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5582d99ebd48 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5582d99ec0e8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5582d99ec028 parent 0x5582d94ec478 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5582d99ebed8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5582d99ebf50 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5582d99ec308 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5582d99ec248 parent 0x5582d94ec478 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5582d99ec138 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5582d99ec1b0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5582d99ec4d0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5582d99ec418 parent 0x5582d94ec478 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5582d99ec358 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5582d99ec758 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5582d99ec698 parent 0x5582d94ec478 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5582d99ec548 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5582d99ec5c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5582d99ec978 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5582d99ec8b8 parent 0x5582d94ec478 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5582d99ec7a8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5582d99ec820 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5582d99f2200 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d99f22e8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f2d58 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5582d99f2d10 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5582d99eaea8
| |     `-DeclRefExpr 0x5582d99f2cf0 <col:7> 'const Timestamp' lvalue ParmVar 0x5582d99f22e8 '' 'const Timestamp &'
| `-CompoundStmt 0x5582d99f2db8 <col:7>
|-CXXConstructorDecl 0x5582d99f2468 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d99f2578 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5582d99eaea8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5582d99f3058 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5582d99f3000 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5582d99eaea8
| |     `-CXXStaticCastExpr 0x5582d99f2fd0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5582d99f2fa0 <col:7> 'Timestamp' lvalue ParmVar 0x5582d99f2578 '' 'Timestamp &&'
| `-CompoundStmt 0x5582d99f30b8 <col:7>
|-CXXDestructorDecl 0x5582d99f2628 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d96f8d58 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d96f8e68 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5582d96f9958 <col:7>
|   |-CXXMemberCallExpr 0x5582d96f98f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5582d96f9838 <col:7> '<bound member function type>' .operator= 0x5582d96f8f08
|   | | `-MemberExpr 0x5582d96f9748 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
|   | |   `-CXXThisExpr 0x5582d96f9738 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5582d96f9808 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5582d99eaea8
|   |   `-DeclRefExpr 0x5582d96f97e8 <col:7> 'const Timestamp' lvalue ParmVar 0x5582d96f8e68 '' 'const Timestamp &'
|   `-ReturnStmt 0x5582d96f9948 <col:7>
|     `-UnaryOperator 0x5582d96f9930 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d96f9920 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5582d96f9208 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5582d96f9318 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5582d9a8b7f8 <col:7>
    |-CXXMemberCallExpr 0x5582d9a8b798 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5582d9a8b700 <col:7> '<bound member function type>' .operator= 0x5582d96f9088
    | | `-MemberExpr 0x5582d9a8b5d0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5582d99eaea8
    | |   `-CXXThisExpr 0x5582d9a8b5c0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5582d9a8b6d0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5582d99eaea8
    |   `-CXXStaticCastExpr 0x5582d9a8b6a0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5582d9a8b670 <col:7> 'Timestamp' lvalue ParmVar 0x5582d96f9318 '' 'Timestamp &&'
    `-ReturnStmt 0x5582d9a8b7e8 <col:7>
      `-UnaryOperator 0x5582d9a8b7d0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5582d9a8b7c0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a904f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5582d9a906c8 prev 0x5582d9a904f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5582d9a90758 <col:46, col:52> col:46 public
|-TypedefDecl 0x5582d9a90780 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9a96180 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5582d9a96130 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5582d9a90c30 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5582d9a90b30 'type'
|     `-TemplateSpecializationType 0x5582d9a90ac0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5582d9a909a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5582d9a90980 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5582d9a90960 <col:24> 'unsigned long' 16
|       `-RecordType 0x5582d9a90aa0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5582d9a909c0 'char_array'
|-TypedefDecl 0x5582d9a96238 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5582d9a96200 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5582d9a961e0 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5582d9a96180 'type'
|     `-ElaboratedType 0x5582d9a96130 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5582d9a90c30 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5582d9a90b30 'type'
|         `-TemplateSpecializationType 0x5582d9a90ac0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5582d9a909a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5582d9a90980 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5582d9a90960 <col:24> 'unsigned long' 16
|           `-RecordType 0x5582d9a90aa0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5582d9a909c0 'char_array'
|-CXXMethodDecl 0x5582d9a963b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5582d9a962c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5582d9a964a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5582d9a96588 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5582d9a96588
|-CXXMethodDecl 0x5582d9a96858 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5582d9a96760 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5582d9a96a98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5582d9a96910 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9a96988 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a96c68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5582d9a96b58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9a96bd0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a96dc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5582d9a96e98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5582d9a970e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5582d9a96f58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5582d9a96fd0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a97348 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5582d9a971b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5582d9a97230 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a97508 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5582d9a97418 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a976c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5582d9a975d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a97780 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9a97830 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9a97a68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5582d9a978e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9a97958 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5582d9a97d08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5582d9a97c10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5582d9a97dd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5582d9a97e20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5582d9a97e70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a8ee08 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x5582d9a8f018 prev 0x5582d9a8ee08 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9a90460 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5582d9a90410 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x5582d9a903f0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x5582d9a902a0 'type'
|     `-SubstTemplateTypeParmType 0x5582d9a900c0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5582d97b5710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97b56b8 'T'
|       `-RecordType 0x5582d9a8fc10 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5582d9a8fb28 'sized_array_memory'
|-FieldDecl 0x5582d9a97ec0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5582d9a97f10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9a97f48 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|     `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a98008 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x5582d9a97fd0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|       `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a98098 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5582d9a98060 'const TimerSet::heap_element &'
|   `-QualType 0x5582d9a8f0b1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|         `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a98128 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x5582d9a980f0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|       `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a981e8 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x5582d9a981b0 'const TimerSet::heap_element *'
|   `-QualType 0x5582d9a8f0b1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|         `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a99050 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x5582d9a99000 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x5582d9a98fe0 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x5582d9a98f18 'type'
|     `-LValueReferenceType 0x5582d9a98ee0 'const TimerSet::heap_element &'
|       `-QualType 0x5582d9a98c81 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x5582d9a98c80 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x5582d97bfde0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5582d97bfd88 'T'
|           `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|             `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a990b8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5582d9a98060 'const TimerSet::heap_element &'
|   `-QualType 0x5582d9a8f0b1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|         `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a99110 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9a99178 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x5582d9a980f0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|       `-CXXRecord 0x5582d9a8df80 'heap_element'
|-TypedefDecl 0x5582d9a991e0 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x5582d9a981b0 'const TimerSet::heap_element *'
|   `-QualType 0x5582d9a8f0b1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5582d9a8f0b0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9a8e010 'TimerSet::heap_element'
|         `-CXXRecord 0x5582d9a8df80 'heap_element'
|-EnumDecl 0x5582d9a99238 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9a99330 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9a99310 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9a993b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9a99648 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9a99470 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9a99510 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x5582d9a99908 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5582d9a997f0 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x5582d9a99bc8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5582d9a99ab0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5582d9a99f10 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5582d9a99df0 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5582d9a9a220 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5582d9a9a100 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5582d9a9a510 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9a9a358 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9a9a3d0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5582d9a9a668 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5582d9a9a748 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9a7a0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9a7e8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5582d9a9a898 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9a8f0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9a9b8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5582d9a9aa68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9aac0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9ab08 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5582d9a9abb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9ac10 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9ac58 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5582d9a9ad08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9ad60 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9ada8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5582d9a9ae58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9a9aeb0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9a9aed8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9a9af88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9a9b038 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9a9b1f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9a9b0e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9a9b160 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5582d9a9b348 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9a9b2b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9a9b4f8 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x5582d9a9b400 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9a9b5b0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a9b608 <col:30>
|-CXXMethodDecl 0x5582d9a9b728 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9a9b630 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9a9b7e0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a9b838 <col:30>
|-CXXMethodDecl 0x5582d9a9b8f0 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9a9b860 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9a9ba38 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9a9b9a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9a9bb68 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5582d9a9bc98 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5582d9a9bd68 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5582d9a9be38 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5582d9a9bf78 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9a9bee8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9a9c0c0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9a9c030 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9a9c208 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9a9c178 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9a9c2c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9a9c3c0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9a9c330 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9a9c478 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9a9c538 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x5582d9a9c638 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x5582d9a9c7e8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9a9c6f8 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x5582d9a9cfd8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9a9c8a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x5582d9a9cf38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x5582d9a9ce38 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x5582d9a9d0b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9a9d208 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9a9d178 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5582d9a9d2c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9a9d508 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9a9d380 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5582d9a9d3f8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5582d9a9d760 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x5582d9a9d5d8 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5582d9a9d9b8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x5582d9a9d828 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5582d9a9d8a0 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5582d9a9da78 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9a9dcd8 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5582d9a9dbe0 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x5582d9a9dda8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5582d9a9dda8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a9f2d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5582d9a9f4a8 prev 0x5582d9a9f2d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5582d9a9f538 <col:46, col:52> col:46 public
|-TypedefDecl 0x5582d9a9f560 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9aa1130 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5582d9aa10e0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5582d9a9fa10 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5582d9a9f910 'type'
|     `-TemplateSpecializationType 0x5582d9a9f8a0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5582d9a9f780 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5582d9a9f760 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5582d9a9f740 <col:24> 'unsigned long' 8
|       `-RecordType 0x5582d9a9f880 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5582d9a9f7a0 'char_array'
|-TypedefDecl 0x5582d9aa11e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5582d9aa11b0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5582d9aa1190 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5582d9aa1130 'type'
|     `-ElaboratedType 0x5582d9aa10e0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5582d9a9fa10 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5582d9a9f910 'type'
|         `-TemplateSpecializationType 0x5582d9a9f8a0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5582d9a9f780 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5582d9a9f760 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5582d9a9f740 <col:24> 'unsigned long' 8
|           `-RecordType 0x5582d9a9f880 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5582d9a9f7a0 'char_array'
|-CXXMethodDecl 0x5582d9aa1368 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5582d9aa1278 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5582d9aa1458 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5582d9aa1538 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5582d9aa1538
|-CXXMethodDecl 0x5582d9aa1808 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5582d9aa1710 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5582d9aa1a48 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5582d9aa18c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9aa1938 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa1c18 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5582d9aa1b08 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9aa1b80 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa1d78 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5582d9aa1e48 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5582d9aa2098 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5582d9aa1f08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5582d9aa1f80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa22f8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5582d9aa2168 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5582d9aa21e0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa24b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5582d9aa23c8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa2678 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5582d9aa2580 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa2730 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9aa27e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9aa2a18 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5582d9aa2890 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9aa2908 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5582d9aa2cb8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5582d9aa2bc0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5582d9aa2d80 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5582d9aa2dd0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5582d9aa2e20 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a9def0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5582d9a9e0f8 prev 0x5582d9a9def0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9a9f240 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5582d9a9f1f0 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x5582d9a9f1d0 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x5582d9a9f080 'type'
|     `-SubstTemplateTypeParmType 0x5582d9a9eea0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5582d97b5710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97b56b8 'T'
|       `-RecordType 0x5582d9a9e9f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5582d9a9e908 'sized_array_memory'
|-FieldDecl 0x5582d9aa2e70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5582d9aa2ec0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9aa2ef8 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-PointerType 0x5582d9a51f90 'Timer *'
|     `-RecordType 0x5582d9a510e0 'Timer'
|       `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa2fb8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x5582d9aa2f80 'Timer *&'
|   `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-PointerType 0x5582d9a51f90 'Timer *'
|       `-RecordType 0x5582d9a510e0 'Timer'
|         `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3078 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x5582d9aa3040 'Timer *const &'
|   `-QualType 0x5582d9a9e191 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-PointerType 0x5582d9a51f90 'Timer *'
|         `-RecordType 0x5582d9a510e0 'Timer'
|           `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3138 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x5582d9aa3100 'Timer **'
|   `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-PointerType 0x5582d9a51f90 'Timer *'
|       `-RecordType 0x5582d9a510e0 'Timer'
|         `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa31f8 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x5582d9aa31c0 'Timer *const *'
|   `-QualType 0x5582d9a9e191 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-PointerType 0x5582d9a51f90 'Timer *'
|         `-RecordType 0x5582d9a510e0 'Timer'
|           `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3dd0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x5582d9aa3d80 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x5582d9aa3d60 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x5582d9aa3cf0 'type'
|     `-SubstTemplateTypeParmType 0x5582d9aa3ab0 'Timer *' sugar
|       |-TemplateTypeParmType 0x5582d97c0510 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97c04c0 'T'
|       `-PointerType 0x5582d9a51f90 'Timer *'
|         `-RecordType 0x5582d9a510e0 'Timer'
|           `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3e38 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x5582d9aa3040 'Timer *const &'
|   `-QualType 0x5582d9a9e191 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-PointerType 0x5582d9a51f90 'Timer *'
|         `-RecordType 0x5582d9a510e0 'Timer'
|           `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3e90 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9aa3ef8 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x5582d9aa3100 'Timer **'
|   `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-PointerType 0x5582d9a51f90 'Timer *'
|       `-RecordType 0x5582d9a510e0 'Timer'
|         `-CXXRecord 0x5582d99d4d78 'Timer'
|-TypedefDecl 0x5582d9aa3f60 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x5582d9aa31c0 'Timer *const *'
|   `-QualType 0x5582d9a9e191 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5582d9a9e190 'Timer *' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-PointerType 0x5582d9a51f90 'Timer *'
|         `-RecordType 0x5582d9a510e0 'Timer'
|           `-CXXRecord 0x5582d99d4d78 'Timer'
|-EnumDecl 0x5582d9aa3fb8 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9aa40b0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9aa4090 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9aa4138 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9aa43c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9aa41f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9aa4290 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x5582d9aa4688 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5582d9aa4570 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x5582d9aa4948 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5582d9aa4830 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5582d9aa4c90 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5582d9aa4b70 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x5582d9aa4fa0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5582d9aa4e80 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5582d9aa5290 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9aa50d8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9aa5150 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5582d9aa53e8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5582d9aa54c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa5520 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa5568 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5582d9aa5618 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa5670 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa9780 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5582d9aa9830 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa9888 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa98d0 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5582d9aa9980 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa99d8 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa9a20 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5582d9aa9ad0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa9b28 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa9b70 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5582d9aa9c20 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9aa9c78 <col:30> Inherited
|-CXXMethodDecl 0x5582d9aa9ca0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9aa9d50 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9aa9e00 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9aa9fc0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9aa9eb0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9aa9f28 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5582d9aaa110 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9aaa080 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9aaa2b8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x5582d9aaa1c8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9aaa370 <col:20>
| `-OptimizeNoneAttr 0x5582d9aaa3c8 <col:30>
|-CXXMethodDecl 0x5582d9aaa4e8 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9aaa3f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9aaa5a0 <col:20>
| `-OptimizeNoneAttr 0x5582d9aaa5f8 <col:30>
|-CXXMethodDecl 0x5582d9aaa6b0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9aaa620 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9aaa7f8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9aaa768 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9aaa928 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x5582d9aaaa58 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x5582d9aaab28 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x5582d9aaabf8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x5582d9aaad38 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9aaaca8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9aaae80 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9aaadf0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9aaafc8 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9aaaf38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9aab080 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9aab180 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9aab0f0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9aab238 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9aab2f8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x5582d9aab3f8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x5582d9aab578 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9aab4b8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x5582d9aabd38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9aab630 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x5582d9aabc98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x5582d9aabb98 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x5582d9aabe18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9aabf68 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9aabed8 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5582d9aac020 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9aac268 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9aac0e0 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5582d9aac158 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5582d9aac428 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x5582d9aac338 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5582d9aac678 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x5582d9aac4f0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x5582d9aac568 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x5582d9aac738 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9aac998 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5582d9aac8a0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x5582d9aaca68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5582d9aaca68

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a6b640 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9a6b758 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x5582d9a6b7e8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5582d9a6b870 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x5582d9a6b960 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5582d9a6ba60 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x5582d9a6bb20 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x5582d9a6bbe0 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x5582d9a6bd08 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5582d9a6bd08
| `-ParmVarDecl 0x5582d9a6be18 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x5582d9aad818 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5582d9aad818
  `-ParmVarDecl 0x5582d9aad928 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a8d100 prev 0x5582d99d8f28 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5582d9a8d1f8 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x5582d9a8d288 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5582d9a8d310 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x5582d9a8d408 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x5582d9aadc90 <col:43, col:67>
|   `-ReturnStmt 0x5582d9aadc80 <col:45, col:52>
|     `-CXXConstructExpr 0x5582d9aadc50 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x5582d9aadc20 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x5582d9a8ebf0
|         `-CXXThisExpr 0x5582d9aadc10 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5582d9a8d4c8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x5582d9a8d6d0 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5582d9a8d578 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x5582d9a8d5f0 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x5582d9a8d7c8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5582d9a8d890 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5582d9aadd10 <col:39, col:67>
|   `-ReturnStmt 0x5582d9aadd00 <col:41, col:48>
|     `-ImplicitCastExpr 0x5582d9aadce8 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5582d9aadcb8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x5582d9a8ecd8
|         `-CXXThisExpr 0x5582d9aadca8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5582d9a8d958 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5582d9aadd90 <col:35, col:59>
|   `-ReturnStmt 0x5582d9aadd80 <col:37, col:44>
|     `-ImplicitCastExpr 0x5582d9aadd68 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5582d9aadd38 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x5582d9a8ed40
|         `-CXXThisExpr 0x5582d9aadd28 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5582d9a8daa0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x5582d9a8da10 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x5582d9a8dbe8 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5582d9a8db58 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5582d9a8dde8 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x5582d9a8dca0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x5582d9a8dd18 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x5582d9a8deb8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5582d9a8df58 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d9a8df80 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5582d9a8e098 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x5582d9a8e138 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x5582d9a8e198 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x5582d9a8e2c8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x5582d9a8e1f8 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x5582d9a8e138 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x5582d9aade68 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x5582d9aade10 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x5582d9aadde0 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x5582d99d63b8
|   |       `-ImplicitCastExpr 0x5582d9aade30 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x5582d9aaddc8 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x5582d9aadda8 <col:17> 'Timer *' lvalue ParmVar 0x5582d9a8e1f8 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x5582d9a8e198 't' 'Timer *'
|   | `-ImplicitCastExpr 0x5582d9aadf00 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5582d9aadec0 <col:41> 'Timer *' lvalue ParmVar 0x5582d9a8e1f8 't_' 'Timer *'
|   `-CompoundStmt 0x5582d9aadf50 <col:45, line:44:2>
|-CXXRecordDecl 0x5582d9a8e390 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5582d9a8e4a8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5582d9a8e6f8 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x5582d9a8e578 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x5582d9a8e5f0 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x5582d9aae080 <col:71, line:49:2>
|     `-ReturnStmt 0x5582d9aae070 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x5582d9aae038 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x5582d9aae020 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5582d9aae000 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5582d9a0f2f8 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x5582d9aadf80 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x5582d9a8e138
|         | `-DeclRefExpr 0x5582d9aadf60 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x5582d9a8e578 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x5582d9aadfd0 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x5582d9a8e138
|           `-DeclRefExpr 0x5582d9aadfb0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x5582d9a8e5f0 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x5582d9a8e7c0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5582d9a8e8d8 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5582d9a8eaf8 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x5582d9a8e978 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x5582d9a8e9f0 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x5582d9aae288 <col:63, line:54:2>
|     `-BinaryOperator 0x5582d9aae268 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x5582d9aae118 <col:6, col:12> 'int' lvalue ->_schedpos1 0x5582d99d83c8
|       | `-ImplicitCastExpr 0x5582d9aae100 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x5582d9aae0d0 <col:6, col:9> 'Timer *' lvalue ->t 0x5582d9a8e198
|       |     `-ImplicitCastExpr 0x5582d9aae0b8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x5582d9aae098 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x5582d9a8e9f0 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x5582d9aae250 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x5582d9aae230 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x5582d9aae1d8 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x5582d9aae1b8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x5582d9aae188 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x5582d9aae148 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x5582d9a8e9f0 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x5582d9aae1a0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x5582d9aae168 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x5582d9a8e978 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x5582d9aae218 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x5582d9aae1f8 <col:39> 'int' 1
|-FieldDecl 0x5582d9a8ebf0 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x5582d9a8ec60 <col:44, col:53> aligned
|   `-ConstantExpr 0x5582d9a8ec40 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x5582d9a8ebc0 <col:52> 'int' 8
|-FieldDecl 0x5582d9a8ecd8 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x5582d9a8ed40 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x5582d9a8eda8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x5582d9a9de90 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x5582d9aacb50 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x5582d9aacbb0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x5582d9aacc10 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x5582d9aacc70 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9aacd60 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x5582d9aaccd0 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x5582d9aace28 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x5582d9aae6e0 <col:29, line:81:5>
|   `-IfStmt 0x5582d9aae6b8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x5582d9aae370 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x5582d9aae310 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x5582d9aae2e0 <col:6, col:18> '<bound member function type>' .size 0x5582d9a9aed8
|     |     `-ImplicitCastExpr 0x5582d9aae358 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x5582d9aae2b0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5582d9a9de90
|     |         `-CXXThisExpr 0x5582d9aae2a0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x5582d9aae560 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x5582d9aae548 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5582d9aae528 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x5582d96f8d58 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x5582d9aae398 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5582d9a8ebf0
|     | | `-CXXThisExpr 0x5582d9aae388 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x5582d9aae510 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x5582d9aae4e0 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x5582d9a8e138
|     |     `-CXXMemberCallExpr 0x5582d9aae4b8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x5582d9aae488 <col:22, col:34> '<bound member function type>' .unchecked_at 0x5582d9a9bf78
|     |       | `-MemberExpr 0x5582d9aae3d8 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5582d9a9de90
|     |       |   `-CXXThisExpr 0x5582d9aae3c8 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x5582d9aae468 <col:47> 'int' 0
|     `-ExprWithCleanups 0x5582d9aae6a0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x5582d9aae668 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x5582d9aae650 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5582d9aae630 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5582d96f9208 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x5582d9aae5a8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5582d9a8ebf0
|         | `-CXXThisExpr 0x5582d9aae598 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x5582d9aae618 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5582d9aae5e8 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5582d9aacf68 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x5582d9aaced8 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x5582d9aad030 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x5582d9aad0f0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x5582d9aad1b0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x5582d9aad2a0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x5582d9aad308 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x5582d9aad308
| `-ParmVarDecl 0x5582d9aad418 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x5582d9aad4b8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x5582d9aad4b8
| `-ParmVarDecl 0x5582d9aad5c8 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x5582d9aad668 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x5582d9aad668
| `-ParmVarDecl 0x5582d9aad778 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x5582d9aad998 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x5582d9aad998
| `-ParmVarDecl 0x5582d9aadaa8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x5582d9aadb30 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x5582d9aadb30

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9ae4578 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x5582d9ae4788 prev 0x5582d9ae4578 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9ae5860 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5582d9ae5810 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x5582d9ae57f0 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x5582d9ae56a0 'type'
|     `-SubstTemplateTypeParmType 0x5582d9a9eea0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5582d97b5710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97b56b8 'T'
|       `-RecordType 0x5582d9a9e9f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5582d9a9e908 'sized_array_memory'
|-FieldDecl 0x5582d9ae5960 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5582d9ae59b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9ae59e8 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-RecordType 0x5582d9ad85f0 'pollfd'
|     `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae5aa8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5582d9ae5a70 'pollfd &'
|   `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ad85f0 'pollfd'
|       `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae5b68 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x5582d9ae5b30 'const pollfd &'
|   `-QualType 0x5582d9ae4821 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ad85f0 'pollfd'
|         `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae5bf8 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x5582d9ae5bc0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ad85f0 'pollfd'
|       `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae5cb8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5582d9ae5c80 'const pollfd *'
|   `-QualType 0x5582d9ae4821 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ad85f0 'pollfd'
|         `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae6890 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5582d9ae6840 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x5582d9ae6820 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x5582d9ae67b0 'type'
|     `-SubstTemplateTypeParmType 0x5582d9ae6570 'pollfd' sugar
|       |-TemplateTypeParmType 0x5582d97c0510 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97c04c0 'T'
|       `-RecordType 0x5582d9ad85f0 'pollfd'
|         `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae68f8 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x5582d9ae5b30 'const pollfd &'
|   `-QualType 0x5582d9ae4821 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ad85f0 'pollfd'
|         `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae6950 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9ae69b8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x5582d9ae5bc0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ad85f0 'pollfd'
|       `-CXXRecord 0x5582d9ad8560 'pollfd'
|-TypedefDecl 0x5582d9ae6a20 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5582d9ae5c80 'const pollfd *'
|   `-QualType 0x5582d9ae4821 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5582d9ae4820 'pollfd' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ad85f0 'pollfd'
|         `-CXXRecord 0x5582d9ad8560 'pollfd'
|-EnumDecl 0x5582d9ae6a78 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9ae6b70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9ae6b50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9ae6bf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9ae6e88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9ae6cb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9ae6d50 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x5582d9ae7148 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5582d9ae7030 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x5582d9ae7408 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5582d9ae72f0 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5582d9ae7750 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5582d9ae7630 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5582d9ae7a60 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5582d9ae7940 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5582d9ae7d50 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9ae7b98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9ae7c10 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5582d9ae7ea8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5582d9ae7f88 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae7fe0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae8028 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5582d9ae80d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae8130 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae81f8 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5582d9ae82a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae8300 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae8348 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5582d9ae83f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae8450 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae8498 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5582d9ae8548 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae85a0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae85e8 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5582d9ae8698 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9ae86f0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9ae8718 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9ae87c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9ae8878 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9ae8a38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9ae8928 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9ae89a0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5582d9ae8b88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9ae8af8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9ae8d38 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5582d9ae8c40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9ae8df0 <col:20>
| `-OptimizeNoneAttr 0x5582d9ae8e48 <col:30>
|-CXXMethodDecl 0x5582d9ae8f68 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9ae8e70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9ae9020 <col:20>
| `-OptimizeNoneAttr 0x5582d9ae9078 <col:30>
|-CXXMethodDecl 0x5582d9ae9130 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9ae90a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9ae9278 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9ae91e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9ae93a8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x5582d9ae94d8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x5582d9ae95a8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x5582d9ae9678 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x5582d9ae97b8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9ae9728 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9ae9900 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9ae9870 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9ae9a48 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9ae99b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9ae9b00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9ae9c00 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9ae9b70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9ae9cb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9ae9d78 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5582d9ae9e78 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5582d9aea028 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9ae9f38 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x5582d9aea7e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9aea0e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5582d9aea748 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x5582d9aea648 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x5582d9aea8c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9aeaa18 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9aea988 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5582d9aeaad0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9aead18 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9aeab90 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5582d9aeac08 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5582d9aeaed8 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x5582d9aeade8 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5582d9aeb128 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x5582d9aeafa0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5582d9aeb018 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5582d9aeb1e8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9aeb468 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5582d9aeb350 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x5582d9aeb538 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5582d9aeb538

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9aecb20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x5582d9aeccf8 prev 0x5582d9aecb20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5582d9aecd88 <col:46, col:52> col:46 public
|-TypedefDecl 0x5582d9aecdb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9aee980 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x5582d9aee930 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x5582d9aed260 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5582d9aed160 'type'
|     `-TemplateSpecializationType 0x5582d9aed0f0 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5582d9aecfd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x5582d9aecfb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5582d9aecf90 <col:24> 'unsigned long' 24
|       `-RecordType 0x5582d9aed0d0 'char_array<24>'
|         `-ClassTemplateSpecialization 0x5582d9aecff0 'char_array'
|-TypedefDecl 0x5582d9aeea38 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x5582d9aeea00 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5582d9aee9e0 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5582d9aee980 'type'
|     `-ElaboratedType 0x5582d9aee930 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x5582d9aed260 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5582d9aed160 'type'
|         `-TemplateSpecializationType 0x5582d9aed0f0 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5582d9aecfd0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x5582d9aecfb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5582d9aecf90 <col:24> 'unsigned long' 24
|           `-RecordType 0x5582d9aed0d0 'char_array<24>'
|             `-ClassTemplateSpecialization 0x5582d9aecff0 'char_array'
|-CXXMethodDecl 0x5582d9aeebb8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5582d9aeeac8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x5582d9aeeca8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5582d9aeed88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5582d9aeed88
|-CXXMethodDecl 0x5582d9aef058 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5582d9aeef60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x5582d9aef298 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5582d9aef110 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9aef188 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aef468 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5582d9aef358 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9aef3d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aef5c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5582d9aef698 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5582d9aef8e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5582d9aef758 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5582d9aef7d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aefb48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5582d9aef9b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5582d9aefa30 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aefd08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5582d9aefc18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aefec8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5582d9aefdd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9aeff80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9af0030 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9af0268 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5582d9af00e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9af0158 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5582d9af0508 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5582d9af0410 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5582d9af05d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x5582d9af0620 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5582d9af0670 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9aeb680 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5582d9aeb888 prev 0x5582d9aeb680 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9aeca90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5582d9aeca40 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x5582d9aeca20 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5582d9aec8d0 'type'
|     `-SubstTemplateTypeParmType 0x5582d9aec6f0 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x5582d97b5710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97b56b8 'T'
|       `-RecordType 0x5582d9aec240 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x5582d9aec160 'sized_array_memory'
|-FieldDecl 0x5582d9af06c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x5582d9af0710 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9af0748 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af0808 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5582d9af07d0 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af08c8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5582d9af0890 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5582d9aeb921 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af0958 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x5582d9af0920 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af0a18 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5582d9af09e0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5582d9aeb921 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af1670 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x5582d9af1620 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x5582d9af1600 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x5582d9af1538 'type'
|     `-LValueReferenceType 0x5582d9af1500 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5582d9af12a1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5582d9af12a0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x5582d97bfde0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5582d97bfd88 'T'
|           `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af16d8 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5582d9af0890 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5582d9aeb921 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af1730 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9af1798 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x5582d9af0920 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-TypedefDecl 0x5582d9af1800 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5582d9af09e0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5582d9aeb921 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5582d9aeb920 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d9ae40e0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5582d9ae4050 'SelectorInfo'
|-EnumDecl 0x5582d9af1858 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9af1950 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9af1930 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9af19d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9af1c68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9af1a90 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9af1b30 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x5582d9af1f28 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5582d9af1e10 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5582d9af21e8 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5582d9af20d0 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5582d9af2530 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5582d9af2410 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x5582d9af2840 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5582d9af2720 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5582d9af2b30 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9af2978 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9af29f0 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5582d9af2c88 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5582d9af2d68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af2dc0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af2e08 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5582d9af2eb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af2f10 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af2fd8 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5582d9af3088 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af30e0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af3128 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5582d9af31d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af3230 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af3278 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5582d9af3328 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af3380 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af3420 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5582d9af34d0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9af3528 <col:30> Inherited
|-CXXMethodDecl 0x5582d9af3550 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9af3600 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9af36b0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9af3870 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9af3760 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9af37d8 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5582d9af39c0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9af3930 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9af3b68 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x5582d9af3a78 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9af3c20 <col:20>
| `-OptimizeNoneAttr 0x5582d9af3c78 <col:30>
|-CXXMethodDecl 0x5582d9af3d98 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9af3ca0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9af3e50 <col:20>
| `-OptimizeNoneAttr 0x5582d9af3ea8 <col:30>
|-CXXMethodDecl 0x5582d9af3f60 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9af3ed0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9af40a8 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9af4018 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9af41d8 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5582d9af4308 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5582d9af43d8 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5582d9af44a8 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5582d9af45e8 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9af4558 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9af4730 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9af46a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9af4878 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9af47e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9af4930 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9af4a30 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9af49a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9af4ae8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9af4ba8 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x5582d9af4ca8 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x5582d9af4e58 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9af4d68 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x5582d9af5618 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9af4f10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x5582d9af5578 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x5582d9af5478 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x5582d9af56f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9af5848 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9af57b8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5582d9af5900 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9af5b48 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9af59c0 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5582d9af5a38 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5582d9af5d08 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x5582d9af5c18 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5582d9af5f58 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x5582d9af5dd0 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5582d9af5e48 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5582d9af6018 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9af6278 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5582d9af6180 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x5582d9af6348 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5582d9af6348

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9ad91f0 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9ad9308 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x5582d9ad9398 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5582d9ae3460 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x5582d9ae3550 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x5582d9ae3550
|-CXXMethodDecl 0x5582d9ae3650 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5582d9ae38f0 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5582d9ae3708 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x5582d9ae3780 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x5582d9ae3800 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x5582d9ae3b60 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5582d9ae39c0 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x5582d9ae3a38 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5582d9ae3ab8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x5582d9ae3cb8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x5582d9ae3c28 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x5582d9ae3d80 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x5582d9af79f8 <col:34, line:50:5>
|   |-BinaryOperator 0x5582d9af73c8 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x5582d9af7388 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x5582d9ae4508
|   | | `-CXXThisExpr 0x5582d9af7378 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x5582d9af73b8 <col:23> 'bool' true
|   `-CallExpr 0x5582d9af79d0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5582d9af79b8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5582d9af7938 <col:2> 'void (long)' lvalue Function 0x5582d9af7838 'ignore_result' 'void (long)' (FunctionTemplate 0x5582d97b06b8 'ignore_result')
|     `-CallExpr 0x5582d9af75e0 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x5582d9af75c8 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9af7548 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x5582d9ab1790 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x5582d9af7618 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x5582d9af74f0 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x5582d9af74d8 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x5582d9af7488 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5582d9ae44a8
|       |   |   `-CXXThisExpr 0x5582d9af7478 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x5582d9af74b8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x5582d9af7648 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x5582d9af7630 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x5582d9af7510 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x5582d9af7660 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5582d9af7528 <col:41> 'int' 1
|-CXXMethodDecl 0x5582d9ae3ec0 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5582d9ae3e30 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5582d9ae3f88 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5582d9ae4028 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d9ae4050 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5582d9ae4168 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x5582d9ae4208 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x5582d9ae4268 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5582d9ae42d0 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x5582d9ae4380 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x5582d9ae4208 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5582d9af7a58 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5582d9af7a18 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x5582d9ae4268 'write' 'Element *'
|   | `-ImplicitCastExpr 0x5582d9af7ad8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5582d9af7a98 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5582d9ae42d0 'pollfd' 'int'
|   | `-UnaryOperator 0x5582d9af7b38 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5582d9af7b18 <col:35> 'int' 1
|   `-CompoundStmt 0x5582d9af7bb0 <line:64:2, line:65:2>
|-FieldDecl 0x5582d9ae44a8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x5582d9ae4508 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x5582d9aeb620 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x5582d9af6430 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x5582d9af6668 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x5582d9af6498 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x5582d9af6510 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x5582d9af6588 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x5582d9af6850 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x5582d9af6738 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x5582d9af67b8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5582d9af6a98 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x5582d9af6918 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5582d9af6998 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5582d9af6ca8 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x5582d9af6b58 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x5582d9af6bd0 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x5582d9af6df8 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5582d9af6d68 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x5582d9af6ec0 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5582d9af6f80 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x5582d9af7048 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x5582d9af7048
| `-ParmVarDecl 0x5582d9af7158 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x5582d9af71f8 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x5582d9af71f8
  `-ParmVarDecl 0x5582d9af7308 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a6a5a8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9a6a6c8 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x5582d9a6a758 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5582d9a6a7e0 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x5582d9a6a8d0 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5582d9a6a9d0 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x5582d9a6aa90 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x5582d9a6ab50 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x5582d9a6ac38 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x5582d9a6ad58 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x5582d9a6ad58
| `-ParmVarDecl 0x5582d9a6ae68 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x5582d9afc808 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x5582d9afc808
  `-ParmVarDecl 0x5582d9afc918 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d980fee0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d980fff8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5582d9810088 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5582d9810158 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5582d9810240 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9810458 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5582d9810300 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9810608 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5582d9810510 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5582d9810750 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5582d98106c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5582d9810898 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5582d9810808 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d98109e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5582d9810950 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9810aa8 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x5582d9810bf0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5582d9810b60 <col:28> col:31 'int'
|-CXXMethodDecl 0x5582d9810cb8 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x5582d9810e00 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5582d9810d70 <col:28> col:31 'int'
|-CXXMethodDecl 0x5582d9810f78 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5582d9810eb8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d98110c0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5582d9811030 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9811188 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5582d9811348 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5582d9811238 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5582d98112b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9811598 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5582d9811408 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9811480 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d9811648 <col:86> "" ""
|-CXXMethodDecl 0x5582d98118b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5582d9811728 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5582d98117a0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9811a68 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5582d9811978 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5582d9811c18 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5582d9811b20 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5582d9811ee8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5582d9811cd0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5582d9811d48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5582d9811dc0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d98121c8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5582d9811fb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5582d9812028 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d98120a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d9812280 <col:115> "" ""
|-AccessSpecDecl 0x5582d98122f0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5582d9812328 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9812830 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5582d9812830
| `-ParmVarDecl 0x5582d9812938 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5582d98129d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5582d98129d8
| `-ParmVarDecl 0x5582d9812ae8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5582d9848118 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d9a3af20 <col:7>
|-CXXConstructorDecl 0x5582d98481f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5582d98481f0
| `-ParmVarDecl 0x5582d9848308 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5582d9848378 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5582d9848378
| `-ParmVarDecl 0x5582d9848488 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5582d9a3d920 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99d2ae8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d99d2c08 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x5582d99d2ca8 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5582d99d2d08 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5582d9afbe08 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5582d9afbe08
| `-ParmVarDecl 0x5582d9afbf18 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5582d9afbfb8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5582d9afbfb8
| `-ParmVarDecl 0x5582d9afc0c8 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x5582d9afc138 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5582d9afc9b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5582d9afc9b8
| `-ParmVarDecl 0x5582d9afcac8 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x5582d9afcb38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5582d9afcb38
| `-ParmVarDecl 0x5582d9afcc48 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5582d9b032b8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x5582d9b03390 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a6c4a0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9a6c5b8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x5582d9a6c648 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5582d9a6c6d0 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x5582d9a6c790 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-CXXMethodDecl 0x5582d9a6c858 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x5582d9a6c8f8 <col:45> always_inline
|-CXXMethodDecl 0x5582d9a6ca28 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x5582d9a6c960 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x5582d9a6cad0 <col:49> always_inline
|-CXXConstructorDecl 0x5582d9a6cbc8 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5582d9a6cbc8
| `-ParmVarDecl 0x5582d9a6ccd8 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x5582d9a6cd78 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5582d9a6cd78
| `-ParmVarDecl 0x5582d9a6ce88 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x5582d9afc220 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x5582d9afc220
|-CXXMethodDecl 0x5582d9afcce8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5582d9afcce8
| `-ParmVarDecl 0x5582d9afcdf8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x5582d9afce68 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5582d9afce68
  `-ParmVarDecl 0x5582d9afcf78 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9af8020 prev 0x5582d9ad9160 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5582d9af8118 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5582d9af81a8 <col:22, col:28> col:22 public
|-EnumDecl 0x5582d9af81d0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x5582d9af82e8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x5582d9af82c8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5582d9af82b0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5582d9af8290 <col:32> 'int' 1
| `-EnumConstantDecl 0x5582d9af8390 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x5582d9af8370 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5582d9af8358 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5582d9af8338 <col:53> 'int' 1000
|-CXXMethodDecl 0x5582d9af8430 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x5582d9af84f0 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5582d9af85d8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x5582d9afd038 <col:34, col:52>
|   `-ReturnStmt 0x5582d9afd028 <col:36, col:43>
|     `-MemberExpr 0x5582d9afcff8 <col:43> 'TimerSet' lvalue ->_timers 0x5582d9afa2a8
|       `-CXXThisExpr 0x5582d9afcfe8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5582d9af86c8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x5582d9afd0a0 <col:46, col:64>
|   `-ReturnStmt 0x5582d9afd090 <col:48, col:55>
|     `-MemberExpr 0x5582d9afd060 <col:55> 'const TimerSet' lvalue ->_timers 0x5582d9afa2a8
|       `-CXXThisExpr 0x5582d9afd050 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5582d9af87b8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5582d9afd108 <col:36, col:55>
|   `-ReturnStmt 0x5582d9afd0f8 <col:38, col:45>
|     `-MemberExpr 0x5582d9afd0c8 <col:45> 'SelectSet' lvalue ->_selects 0x5582d9afa308
|       `-CXXThisExpr 0x5582d9afd0b8 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5582d9af88a8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x5582d9afd170 <col:48, col:67>
|   `-ReturnStmt 0x5582d9afd160 <col:50, col:57>
|     `-MemberExpr 0x5582d9afd130 <col:57> 'const SelectSet' lvalue ->_selects 0x5582d9afa308
|       `-CXXThisExpr 0x5582d9afd120 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5582d9af8968 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5582d9af8a58 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x5582d9af8bc8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x5582d9af8b08 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5582d9af8c90 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x5582d9af90d8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x5582d9af8d40 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x5582d9af8fc0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5582d9af91a8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x5582d9af9268 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x5582d9af9328 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x5582d9af9468 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x5582d9af93d8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x5582d9af9530 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x5582d9af95f0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x5582d9af96b0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x5582d9af9770 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x5582d9af98b0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5582d9af9820 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5582d9af9978 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x5582d9af9a38 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x5582d9af9ad8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5582d9af9ba0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9bf0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9c40 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9c90 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9ce0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9d30 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9d80 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9dd0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9e20 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5582d9af9e70 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x5582d9af9ec0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x5582d9af9fb8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x5582d9af9f28 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x5582d9afa108 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5582d9afa078 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x5582d9afa1b0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x5582d9afa1e8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x5582d9afa248 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x5582d9afa2a8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x5582d9afa308 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x5582d9afa388 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x5582d9afa3f8 <col:40, col:50> aligned
|   `-ConstantExpr 0x5582d9afa3d8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x5582d9afa358 <col:48> 'int' 64
|-FieldDecl 0x5582d9afa468 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x5582d9afa4c8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x5582d9afa5c0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x5582d9afa6d0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x5582d9afa730 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x5582d9afa7b0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x5582d9afa820 <col:36, col:46> aligned
|   `-ConstantExpr 0x5582d9afa800 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x5582d9afa780 <col:44> 'int' 64
|-FieldDecl 0x5582d9afa898 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x5582d9afa8f8 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x5582d9afa948 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5582d9afa988 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x5582d9afa9f0 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x5582d9afaa40 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x5582d9afabe8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5582d9afaa78 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x5582d9afaaf8 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x5582d9aface8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x5582d9aface8
|-CXXMethodDecl 0x5582d9afadf0 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x5582d9afaeb8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x5582d9afd268 <col:34, line:217:5>
|   `-ReturnStmt 0x5582d9afd258 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x5582d9afd240 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5582d9afd210 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x5582d9a6f000
|         `-ImplicitCastExpr 0x5582d9afd1f8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5582d9afd1c8 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x5582d9a6ef98
|             `-MemberExpr 0x5582d9afd198 <col:16> 'const TaskLink' lvalue ->_task_link 0x5582d9afa1e8
|               `-CXXThisExpr 0x5582d9afd188 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5582d9afaf78 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x5582d9afb038 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x5582d9afd990 <col:39, line:226:5>
|   |-DeclStmt 0x5582d9afd4b8 <line:223:9, col:68>
|   | `-VarDecl 0x5582d9afd290 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x5582d9afd470 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x5582d9afd440 <col:24, col:38> '<bound member function type>' .compare_swap 0x5582d9815cf0
|   |     | `-MemberExpr 0x5582d9afd308 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x5582d9afa468
|   |     |   `-CXXThisExpr 0x5582d9afd2f8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5582d9afd3f8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5582d9afd3e0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5582d9afd3b8 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x5582d9afd398 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5582d9afd4a0 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x5582d9afd420 <col:66> 'int' 0
|   |-CStyleCastExpr 0x5582d9afd500 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5582d9afd4d0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5582d9afd290 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x5582d9afd970 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x5582d9afd940 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x5582d9afd618 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5582d9afd5e8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5582d9afd5d0 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5582d9afd528 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x5582d9afd290 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5582d9afd5a8 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x5582d9afd590 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x5582d9afd568 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x5582d9afd548 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x5582d9afd678 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5582d9afd658 <col:60> 'int' 0
|       `-CallExpr 0x5582d9afd8a0 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x5582d9afd888 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5582d9afd868 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5582d9afd8e0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5582d9afd768 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5582d9afd8f8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5582d9afd798 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x5582d9afd910 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5582d9afd7d8 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x5582d9afd928 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5582d9afd850 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5582d9afd838 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5582d9afd7f8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5582d9afb180 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x5582d9afb0f0 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x5582d9afb248 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x5582d9afb308 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x5582d9afb430 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5582d9afb4f0 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5582d9afb5b0 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5582d9afb6a0 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x5582d9afb700 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5582d9afb790 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x5582d9afbb58 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x5582d9afbb58
| `-ParmVarDecl 0x5582d9afbc68 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x5582d9afc328 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x5582d9afc328
  `-ParmVarDecl 0x5582d9afc438 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a6f310 prev 0x5582d9a50fa0 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x5582d9a6f448 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x5582d9a6f4d8 <col:33, col:39> col:33 public
|-EnumDecl 0x5582d9a6f500 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x5582d9a6f640 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x5582d9a6f620 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x5582d9a6f600 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5582d9a6f5c0 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x5582d9a6f5e0 <col:26> 'int' 16
| `-EnumConstantDecl 0x5582d9a6f710 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x5582d9a6f6f0 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x5582d9a6f6d0 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5582d9a6f690 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x5582d9a6f6b0 <col:47> 'int' 31
|-EnumDecl 0x5582d9a6f760 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x5582d9a6f8a0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x5582d9a6f9c0 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a6f880 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x5582d9a6f860 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x5582d9a6f820 <col:26> 'int' 1
| |       `-IntegerLiteral 0x5582d9a6f840 <col:29> 'int' 15
| `-EnumConstantDecl 0x5582d9a6f970 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x5582d9a6f9d8 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a6f950 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x5582d9a6f930 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x5582d9a6f8f0 <col:51> 'int' 1
|         `-IntegerLiteral 0x5582d9a6f910 <col:54> 'int' 10
|-CXXConstructorDecl 0x5582d9a6fba8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x5582d9a6fa00 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x5582d9a6fa80 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x5582d9a6fd38 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x5582d9a6fc70 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x5582d9a6fe30 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x5582d9a6ffb8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x5582d99d3c48 <col:42, line:100:5>
|   `-ReturnStmt 0x5582d99d3c38 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5582d99d3c20 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5582d99d3bf0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x5582d99d2970
|         `-CXXThisExpr 0x5582d99d3be0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5582d9a70080 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x5582d99d3cc8 <col:36, line:105:5>
|   `-ReturnStmt 0x5582d99d3cb8 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x5582d99d3ca0 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5582d99d3c70 <col:16> 'void *const' lvalue ->_thunk 0x5582d99d29d8
|         `-CXXThisExpr 0x5582d99d3c60 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5582d9a70140 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x5582d99d3d48 <col:37, line:110:5>
|   `-ReturnStmt 0x5582d99d3d38 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5582d99d3d20 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5582d99d3cf0 <col:16> 'Element *const' lvalue ->_owner 0x5582d99d2a98
|         `-CXXThisExpr 0x5582d99d3ce0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5582d9a70200 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5582d9a702c8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x5582d9a70388 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x5582d9a70448 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5582d99d3e30 <col:35, line:137:5>
|   `-ReturnStmt 0x5582d99d3e20 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5582d99d3de8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x5582d99d3db8 <col:16, col:24> '<bound member function type>' ->router 0x5582d9a637b0
|         `-ImplicitCastExpr 0x5582d99d3e08 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5582d99d3da0 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5582d99d3d70 <col:16> 'Element *const' lvalue ->_owner 0x5582d99d2a98
|               `-CXXThisExpr 0x5582d99d3d60 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5582d9a70508 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x5582d9a70708 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5582d9a705b8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5582d9a70630 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5582d9a70918 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5582d9a707c8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x5582d9a70840 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5582d9a709e8 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x5582d99d3f40 <col:35, line:181:5>
|   `-ReturnStmt 0x5582d99d3f30 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5582d99d3f18 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5582d99d3f00 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x5582d99d3ed0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5582d99d25a8
|           `-MemberExpr 0x5582d99d3e88 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|             `-MemberExpr 0x5582d99d3e58 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5582d99d28f8
|               `-CXXThisExpr 0x5582d99d3e48 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5582d99d15f0 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x5582d99d4058 <col:30, line:192:5>
|   `-BinaryOperator 0x5582d99d4038 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5582d99d3fe0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5582d99d25a8
|     | `-MemberExpr 0x5582d99d3f98 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|     |   `-MemberExpr 0x5582d99d3f68 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|     |     `-CXXThisExpr 0x5582d99d3f58 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5582d99d4020 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5582d99d4010 <col:32> 'bool' false
|-CXXMethodDecl 0x5582d99d16b0 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5582d99d43a8 <col:30, line:206:5>
|   |-BinaryOperator 0x5582d99d4150 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5582d99d40f8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5582d99d25a8
|   | | `-MemberExpr 0x5582d99d40b0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|   | |   `-MemberExpr 0x5582d99d4080 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|   | |     `-CXXThisExpr 0x5582d99d4070 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5582d99d4138 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5582d99d4128 <col:32> 'bool' true
|   |-CallExpr 0x5582d99d41f0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5582d99d41d8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5582d99d41b8 <col:9> 'void ()' lvalue Function 0x5582d9a6a160 'click_fence' 'void ()'
|   `-IfStmt 0x5582d99d4390 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5582d99d42d0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5582d99d42a0 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x5582d99d4250 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5582d99d2d08
|     | |   `-MemberExpr 0x5582d99d4220 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x5582d99d2d80
|     | |     `-CXXThisExpr 0x5582d99d4210 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5582d99d42b8 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x5582d99d4280 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x5582d99d4350 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5582d99d4300 <col:13> '<bound member function type>' ->complete_schedule 0x5582d99d3780
|       | `-CXXThisExpr 0x5582d99d42f0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x5582d99d4378 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5582d99d4330 <col:31> 'int' 0
|-CXXMethodDecl 0x5582d99d1770 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5582d99d44d0 <col:35, line:240:5>
|   `-BinaryOperator 0x5582d99d44b0 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5582d99d4458 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5582d99d25a8
|     | `-MemberExpr 0x5582d99d4410 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|     |   `-MemberExpr 0x5582d99d43e0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|     |     `-CXXThisExpr 0x5582d99d43d0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5582d99d4498 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5582d99d4488 <col:32> 'bool' true
|-CXXMethodDecl 0x5582d99d1830 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5582d99d46e8 <col:37, line:253:5>
|   |-BinaryOperator 0x5582d99d45c8 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5582d99d4570 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5582d99d25a8
|   | | `-MemberExpr 0x5582d99d4528 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|   | |   `-MemberExpr 0x5582d99d44f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|   | |     `-CXXThisExpr 0x5582d99d44e8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5582d99d45b0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5582d99d45a0 <col:32> 'bool' false
|   `-BinaryOperator 0x5582d99d46c8 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5582d99d4670 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5582d99d2608
|     | `-MemberExpr 0x5582d99d4628 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|     |   `-MemberExpr 0x5582d99d45f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|     |     `-CXXThisExpr 0x5582d99d45e8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5582d99d46b0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5582d99d46a0 <col:41> 'bool' true
|-CXXMethodDecl 0x5582d99d18f0 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x5582d99d4868 <col:37, line:264:5>
|   |-BinaryOperator 0x5582d99d47e8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5582d99d4790 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x5582d99d2608
|   | | `-MemberExpr 0x5582d99d4748 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5582d99d26c8
|   | |   `-MemberExpr 0x5582d99d4718 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5582d99d28f8
|   | |     `-CXXThisExpr 0x5582d99d4708 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5582d99d47d0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5582d99d47c0 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x5582d99d4848 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x5582d99d4818 <col:9> '<bound member function type>' ->reschedule 0x5582d99d16b0
|       `-CXXThisExpr 0x5582d99d4808 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x5582d99d1a38 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5582d99d19a8 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5582d99d1b08 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x5582d99d1c50 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x5582d99d1bc0 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x5582d99d1da0 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5582d99d1d10 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x5582d99d1e68 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5582d99d1f28 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x5582d99d1fc8 <col:53> "" ""
|-CXXMethodDecl 0x5582d99d2060 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5582d99d2100 <col:47> "" ""
|-AccessSpecDecl 0x5582d99d2170 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5582d99d21b0 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5582d99d2218 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x5582d99d2268 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d99d2388 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x5582d99d2418 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x5582d99d2548 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5582d99d25a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x5582d99d2608 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5582d9b029e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5582d9b02ac0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x5582d9b02d78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5582d9b02d78
| | | `-ParmVarDecl 0x5582d9b02e88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x5582d9b02f28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5582d9b02f28
| |   `-ParmVarDecl 0x5582d9b03038 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5582d99d26c8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x5582d99d2728 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5582d99d2548 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x5582d99d2780 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5582d99d25a8 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5582d99d27d8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5582d99d26c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5582d99d2608 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x5582d99d2830 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5582d9b028f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5582d9b03258 <col:11>
| |-CXXConstructorDecl 0x5582d9b02bc8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5582d9b02bc8
| | `-ParmVarDecl 0x5582d9b02cd8 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x5582d9b030d8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5582d9b030d8
| | `-ParmVarDecl 0x5582d9b031e8 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x5582d9902ca0 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x5582d99d28f8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x5582d99d2970 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5582d99d29d8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5582d99d2a38 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x5582d99d2a98 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5582d99d2ae8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d99d2c08 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x5582d99d2ca8 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5582d99d2d08 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5582d9afbe08 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5582d9afbe08
| | `-ParmVarDecl 0x5582d9afbf18 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5582d9afbfb8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5582d9afbfb8
| | `-ParmVarDecl 0x5582d9afc0c8 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x5582d9afc138 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5582d9afc9b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5582d9afc9b8
| | `-ParmVarDecl 0x5582d9afcac8 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x5582d9afcb38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5582d9afcb38
| | `-ParmVarDecl 0x5582d9afcc48 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5582d9b032b8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5582d9b03390 <col:11>
|-FieldDecl 0x5582d99d2d80 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x5582d99d2ec8 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5582d99d2e08 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x5582d99d3078 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x5582d99d2f88 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x5582d99d3140 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5582d99d3200 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5582d99d32c0 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x5582d99d4978 <col:41, line:355:5>
|   `-ReturnStmt 0x5582d99d4968 <line:354:9, col:38>
|     `-BinaryOperator 0x5582d99d4948 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x5582d99d4918 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5582d99d48c8 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5582d99d2d08
|       |   `-MemberExpr 0x5582d99d4898 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x5582d99d2d80
|       |     `-CXXThisExpr 0x5582d99d4888 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x5582d99d4930 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5582d99d48f8 <col:38> 'int' 0
|-CXXMethodDecl 0x5582d99d3380 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5582d99d34c0 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x5582d99d3430 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x5582d99d3638 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x5582d99d3578 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x5582d99d3780 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5582d99d36f0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x5582d99d3848 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5582d99d3a10 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5582d99d38f8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x5582d99d3978 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5582d99d3b10 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x5582d99d3ba0 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9b08a60 <../elements/radio/bim.hh:16:1, line:47:1> line:16:7 class BIM definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5582d9b08bb8 <col:1, col:7> col:7 implicit referenced class BIM
|-AccessSpecDecl 0x5582d9b08c48 <line:17:2, col:8> col:2 public
|-CXXConstructorDecl 0x5582d9b08cd0 <line:18:3, col:7> col:3 BIM 'void ()'
|-CXXDestructorDecl 0x5582d9b08dc0 <line:19:3, col:8> col:3 ~BIM 'void ()' noexcept-unevaluated 0x5582d9b08dc0
| `-Overrides: [ 0x5582d9a51708 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x5582d9b08ef0 <line:21:3, col:50> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5582d9a52b68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5582d9b0a5b0 <col:34, col:50>
|   `-ReturnStmt 0x5582d9b0a5a0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5582d9b0a588 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5582d9b0a568 <col:43> 'const char [4]' lvalue "BIM"
|-CXXMethodDecl 0x5582d9b08fb8 <line:22:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5582d9a52c30 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5582d9b0a610 <col:34, col:54>
|   `-ReturnStmt 0x5582d9b0a600 <col:36, col:43>
|     `-ImplicitCastExpr 0x5582d9b0a5e8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5582d9b0a5c8 <col:43> 'const char []' lvalue Var 0x5582d9a52ee0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5582d9b09080 <line:23:3, col:57> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5582d9a52ff8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5582d9b0a670 <col:34, col:57>
|   `-ReturnStmt 0x5582d9b0a660 <col:36, col:43>
|     `-ImplicitCastExpr 0x5582d9b0a648 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5582d9b0a628 <col:43> 'const char []' lvalue Var 0x5582d9a532d8 'PULL_TO_PUSH' 'const char []'
|-CXXMethodDecl 0x5582d9b09350 <line:25:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5582d9a54400 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5582d9b09200 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5582d9b09278 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9b094a8 <line:26:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5582d9a54650 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5582d9b09410 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9b09680 <line:28:3, col:33> col:8 selected 'void (int, int)'
| |-Overrides: [ 0x5582d9a52470 Element::selected 'void (int, int)' ]
| |-ParmVarDecl 0x5582d9b09568 <col:17, col:21> col:21 fd 'int'
| `-ParmVarDecl 0x5582d9b095e8 <col:25, col:29> col:29 mask 'int'
|-CXXMethodDecl 0x5582d9b09858 <line:30:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x5582d9a519d8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x5582d9b09748 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x5582d9b097c0 <col:23, col:30> col:31 'Packet *'
|-CXXMethodDecl 0x5582d9b099a8 <line:31:3, col:23> col:8 run_task 'bool (Task *)'
| |-Overrides: [ 0x5582d9a51ee8 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x5582d9b09918 <col:17, col:22> col:23 'Task *'
|-AccessSpecDecl 0x5582d9b09a50 <line:33:2, col:9> col:2 private
|-FieldDecl 0x5582d9b09a88 <line:34:3, col:10> col:10 _dev 'String'
|-FieldDecl 0x5582d9b09af0 <line:35:3, col:7> col:7 referenced _speed 'int'
|-FieldDecl 0x5582d9b09b58 <line:36:3, col:7> col:7 referenced _fd 'int'
|-FieldDecl 0x5582d9b09bb8 <line:37:3, col:8> col:8 _task 'Task'
|-CXXMethodDecl 0x5582d9b09cb0 <line:40:3, col:22> col:8 got_char 'void (int)'
| `-ParmVarDecl 0x5582d9b09c20 <col:17, col:21> col:21 c 'int'
|-FieldDecl 0x5582d9b09df8 <line:41:3, col:17> col:8 _buf 'char [2048]'
|-FieldDecl 0x5582d9b09e60 <line:42:3, col:7> col:7 referenced _len 'int'
|-FieldDecl 0x5582d9b09ec8 <line:43:3, col:7> col:7 referenced _started 'int'
|-FieldDecl 0x5582d9b09f30 <line:44:3, col:7> col:7 referenced _escaped 'int'
|-CXXMethodDecl 0x5582d9b0a158 <line:46:3, col:63> col:8 send_packet 'void (const unsigned char *, unsigned int)'
| |-ParmVarDecl 0x5582d9b0a000 <col:20, col:44> col:40 buf 'const unsigned char *':'const unsigned char *'
| `-ParmVarDecl 0x5582d9b0a080 <col:47, col:60> col:60 len 'unsigned int'
|-CXXConstructorDecl 0x5582d9b0a238 <line:16:7> col:7 implicit BIM 'void (const BIM &)' inline default_delete noexcept-unevaluated 0x5582d9b0a238
| `-ParmVarDecl 0x5582d9b0a348 <col:7> col:7 'const BIM &'
`-CXXMethodDecl 0x5582d9b0a3e8 <col:7> col:7 implicit operator= 'BIM &(const BIM &)' inline default_delete noexcept-unevaluated 0x5582d9b0a3e8
  `-ParmVarDecl 0x5582d9b0a4f8 <col:7> col:7 'const BIM &'

Layout: <CGRecordLayout
  LLVMType:%class.BIM = type <{ %class.Element.base, [4 x i8], %class.String, i32, i32, %class.Task, [2048 x i8], i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.BIM.base = type <{ %class.Element.base, [4 x i8], %class.String, i32, i32, %class.Task, [2048 x i8], i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9b41060 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5582d9b41238 prev 0x5582d9b41060 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5582d9b412c8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5582d9b412f0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b42c50 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5582d9b42c00 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5582d9b42be0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5582d9b41508 'type'
|     `-SubstTemplateTypeParmType 0x5582d9b414d0 'String' sugar
|       |-TemplateTypeParmType 0x5582d97e00e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97e0090 'T'
|       `-RecordType 0x5582d981b8c0 'String'
|         `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b42d08 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5582d9b42cd0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5582d9b42cb0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5582d9b42c50 'type'
|     `-ElaboratedType 0x5582d9b42c00 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5582d9b42be0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5582d9b41508 'type'
|         `-SubstTemplateTypeParmType 0x5582d9b414d0 'String' sugar
|           |-TemplateTypeParmType 0x5582d97e00e0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5582d97e0090 'T'
|           `-RecordType 0x5582d981b8c0 'String'
|             `-CXXRecord 0x5582d981b830 'String'
|-CXXMethodDecl 0x5582d9b42e88 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5582d9b42d98 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5582d9b42f78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5582d9b43058 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5582d9b43058
|-CXXMethodDecl 0x5582d9b43328 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5582d9b43230 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5582d9b43568 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5582d9b433e0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b43458 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b43738 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5582d9b43628 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b436a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b43898 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5582d9b43968 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5582d9b43bb8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5582d9b43a28 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5582d9b43aa0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b43e18 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5582d9b43c88 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5582d9b43d00 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b43fd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5582d9b43ee8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b44198 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5582d9b440a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b44250 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9b44300 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9b44538 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5582d9b443b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b44428 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5582d9b447d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5582d9b446e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5582d9b448a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5582d9b448f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5582d9b44940 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a54070 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5582d9b3fe10 prev 0x5582d9a54070 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9b40fd0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5582d9b40f80 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5582d9b40f60 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5582d9b40e10 'type'
|     `-SubstTemplateTypeParmType 0x5582d9b40ca0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5582d97b5e90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5582d97b5e38 'F'
|       `-RecordType 0x5582d9b40900 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5582d9b40820 'typed_array_memory'
|-FieldDecl 0x5582d9b44990 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5582d9b449e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9b44a18 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-RecordType 0x5582d981b8c0 'String'
|     `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b44aa8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5582d9b44a70 'String &'
|   `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d981b8c0 'String'
|       `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b44b38 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5582d9b44b00 'const String &'
|   `-QualType 0x5582d9b3fea1 'const String' const
|     `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d981b8c0 'String'
|         `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b44bc8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5582d9b44b90 'String *'
|   `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d981b8c0 'String'
|       `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b44c58 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5582d9b44c20 'const String *'
|   `-QualType 0x5582d9b3fea1 'const String' const
|     `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d981b8c0 'String'
|         `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b458b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5582d9b45860 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5582d9b45840 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5582d9b45778 'type'
|     `-LValueReferenceType 0x5582d9b45740 'const String &'
|       `-QualType 0x5582d9b454e1 'const String' const
|         `-SubstTemplateTypeParmType 0x5582d9b454e0 'String' sugar
|           |-TemplateTypeParmType 0x5582d97bfde0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5582d97bfd88 'T'
|           `-RecordType 0x5582d981b8c0 'String'
|             `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b45918 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5582d9b44b00 'const String &'
|   `-QualType 0x5582d9b3fea1 'const String' const
|     `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d981b8c0 'String'
|         `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b45970 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b459d8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5582d9b44b90 'String *'
|   `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-RecordType 0x5582d981b8c0 'String'
|       `-CXXRecord 0x5582d981b830 'String'
|-TypedefDecl 0x5582d9b45a40 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5582d9b44c20 'const String *'
|   `-QualType 0x5582d9b3fea1 'const String' const
|     `-SubstTemplateTypeParmType 0x5582d9b3fea0 'String' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-RecordType 0x5582d981b8c0 'String'
|         `-CXXRecord 0x5582d981b830 'String'
|-EnumDecl 0x5582d9b45a98 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9b45b90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9b45b70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9b45c18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9b45ea8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b45cd0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b45d70 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5582d9b46138 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5582d9b46020 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5582d9b463f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5582d9b462e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5582d9b46710 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5582d9b465f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5582d9b46a20 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5582d9b46900 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5582d9b46d10 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b46b58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b46bd0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5582d9b46e38 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5582d9b46ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b46f40 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b46f88 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5582d9b47038 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b47090 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b47158 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b47208 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b47260 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b472a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b47358 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b473b0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b473f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b474a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b47500 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b47548 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b475f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b47650 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b47678 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9b47728 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9b477d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9b47998 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b47888 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b47900 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5582d9b47ae8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b47a58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b491e8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5582d9b47ba0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9b492a0 <col:20>
| `-OptimizeNoneAttr 0x5582d9b492f8 <col:30>
|-CXXMethodDecl 0x5582d9b49418 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9b49320 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9b494d0 <col:20>
| `-OptimizeNoneAttr 0x5582d9b49528 <col:30>
|-CXXMethodDecl 0x5582d9b495e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b49550 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b49728 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9b49698 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b49858 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5582d9b49958 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5582d9b49a28 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5582d9b49af8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5582d9b49c38 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b49ba8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b49d80 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9b49cf0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b49ec8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9b49e38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9b49f80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9b4a080 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9b49ff0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9b4a138 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9b4a1f8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5582d9b4a2f8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5582d9b4a478 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9b4a3b8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5582d9b4ac08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9b4a530 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5582d9b4ab68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5582d9b4aa68 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5582d9b4ace8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9b4ae38 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9b4ada8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5582d9b4aef0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9b4b138 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b4afb0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5582d9b4b028 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5582d9b4b2c8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5582d9b4b208 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5582d9b4b4d8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5582d9b4b390 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5582d9b4b408 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5582d9b4b598 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5582d9b4b7f8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5582d9b4b700 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5582d9b4b8c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5582d9b4b8c8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9b0a688 prev 0x5582d9a51240 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9b0a780 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5582d9b0a810 <col:22, col:28> col:22 public
|-EnumDecl 0x5582d9b0a838 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5582d9b0a958 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0a938 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5582d9b0a920 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5582d9b0a900 <col:14> 'int' 999
| |-EnumConstantDecl 0x5582d9b0aa00 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0a9e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5582d9b0a9c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5582d9b0a9a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x5582d9b0aa90 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0aa70 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5582d9b0aa50 <col:17> 'int' 0
| |-EnumConstantDecl 0x5582d9b0ab20 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0ab00 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5582d9b0aae0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5582d9b0abb0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0ab90 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5582d9b0ab70 <col:16> 'int' 2
| |-EnumConstantDecl 0x5582d9b0ac40 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0ac20 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5582d9b0ac00 <col:13> 'int' 3
| |-EnumConstantDecl 0x5582d9b0acd0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0acb0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5582d9b0ac90 <col:15> 'int' 4
| |-EnumConstantDecl 0x5582d9b0ad60 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0ad40 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5582d9b0ad20 <col:14> 'int' 5
| |-EnumConstantDecl 0x5582d9b0adf0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5582d9b0add0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5582d9b0adb0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5582d9b0ae80 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5582d9b0ae60 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5582d9b0ae40 <col:13> 'int' 7
|-VarDecl 0x5582d9b0aef0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5582d9b0af78 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5582d9b0b000 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5582d9b0b088 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5582d9b0b110 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5582d9b0b198 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5582d9b0b220 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5582d9b0b2a8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5582d9b0b330 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5582d9b0b3b8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5582d9b0b440 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5582d9b0b540 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5582d9b16788 '_nerrors' 'int'
| | `-IntegerLiteral 0x5582d9b16f18 <line:128:13> 'int' 0
| `-CompoundStmt 0x5582d9b16f88 <col:16, line:129:5>
|-CXXDestructorDecl 0x5582d9b0b630 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5582d9b16f98 <col:29, line:132:5>
|-CXXMethodDecl 0x5582d9b0b7e8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5582d9b0b720 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9b0b8b0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5582d9b0b998 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5582d9b16ff0 <col:44, line:161:5>
|   `-ReturnStmt 0x5582d9b16fe0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5582d9b16fc8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9b16fa8 <col:9> 'ErrorHandler *' lvalue Var 0x5582d9b167e8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9b0bb08 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5582d9b0ba48 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5582d9b0bbd0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5582d9b17050 <col:43, line:173:5>
|   `-ReturnStmt 0x5582d9b17040 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5582d9b17028 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9b17008 <col:9> 'ErrorHandler *' lvalue Var 0x5582d9b16860 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5582d9b0bc88 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5582d9b0bd08 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5582d9b0be18 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5582d9b0bd88 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0bf68 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5582d9b0bed8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c0c0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5582d9b0c028 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c218 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x5582d9b0c180 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c370 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5582d9b0c2d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c580 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5582d9b0c428 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b0c4a8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c758 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5582d9b0c640 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b0c6c0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0c978 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5582d9b0c818 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b0c898 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b0cb58 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5582d9b0ca38 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b0cab8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b12b90 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5582d9b0cc18 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b0cc98 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b12d20 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5582d9b12c50 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5582d9b12ef0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5582d9b12dd8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5582d9b12e50 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5582d9b172a8 <col:57, line:234:5>
|   `-ReturnStmt 0x5582d9b17298 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5582d9b17280 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5582d9b17228 <col:9, col:41> 'int'
|         |-MemberExpr 0x5582d9b171f8 <col:9> '<bound member function type>' ->xmessage 0x5582d9b12d20
|         | `-CXXThisExpr 0x5582d9b171e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5582d9b17268 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5582d9b17250 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5582d9b171c8 <col:18, col:40> 'String' (CXXTemporary 0x5582d9b171c8)
|               `-CallExpr 0x5582d9b17190 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5582d9b17178 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5582d9b170f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5582d9b14f78 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5582d9b17110 <col:31> 'const String' lvalue ParmVar 0x5582d9b12e50 'str' 'const String &'
|                 `-DeclRefExpr 0x5582d9b17130 <col:36> 'const String' lvalue ParmVar 0x5582d9b12dd8 'anno' 'const String &'
|-CXXMethodDecl 0x5582d9b13230 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5582d9b12fb0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5582d9b13030 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5582d9b13100 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5582d9b17538 <col:68, line:243:5>
|   `-ReturnStmt 0x5582d9b17528 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5582d9b17510 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5582d9b174b0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5582d9b17480 <col:9> '<bound member function type>' ->xmessage 0x5582d9b12ef0
|         | `-CXXThisExpr 0x5582d9b17470 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5582d9b17348 <col:18> 'const String' lvalue ParmVar 0x5582d9b12fb0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5582d9b174f8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5582d9b174e0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5582d9b17450 <col:24, col:40> 'String' (CXXTemporary 0x5582d9b17450)
|               `-CXXMemberCallExpr 0x5582d9b173e8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5582d9b17378 <col:24> '<bound member function type>' ->vformat 0x5582d9b14410
|                 | `-CXXThisExpr 0x5582d9b17368 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5582d9b17418 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5582d9b173a8 <col:32> 'const char *' lvalue ParmVar 0x5582d9b13030 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5582d9b17430 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5582d9b173c8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5582d9b13100 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5582d9b134d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5582d9b132f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5582d9b13370 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5582d9b133e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5582d9b17878 <col:23, line:254:5>
|   `-ReturnStmt 0x5582d9b17868 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5582d9b17850 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5582d9b177f0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5582d9b177c0 <col:9> '<bound member function type>' ->xmessage 0x5582d9b12ef0
|         | `-CXXThisExpr 0x5582d9b177b0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5582d9b17838 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5582d9b17820 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5582d9b17770 <col:18, col:65> 'String' (CXXTemporary 0x5582d9b17770)
|         |     `-CallExpr 0x5582d9b17708 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5582d9b176f0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5582d9b175d8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5582d9b14f78 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5582d9b175f8 <col:31> 'const String' lvalue ParmVar 0x5582d9b13370 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5582d9b17750 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5582d9b17738 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5582d9b176d0 <col:37, col:64> 'String' (CXXTemporary 0x5582d9b176d0)
|         |             `-CallExpr 0x5582d9b176a0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5582d9b17688 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5582d9b17618 <col:37> 'String (const String &)' lvalue CXXMethod 0x5582d9b155c8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5582d9b17638 <col:56> 'const String' lvalue ParmVar 0x5582d9b132f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5582d9b17790 <col:68> 'const String' lvalue ParmVar 0x5582d9b133e8 'str' 'const String &'
|-CXXMethodDecl 0x5582d9b13850 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5582d9b13598 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5582d9b13610 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5582d9b13690 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5582d9b13708 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5582d9b17b30 <col:34, line:267:5>
|   `-ReturnStmt 0x5582d9b17b20 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5582d9b17b08 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5582d9b17aa0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5582d9b17a70 <col:9> '<bound member function type>' ->xmessage 0x5582d9b134d0
|         | `-CXXThisExpr 0x5582d9b17a60 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5582d9b17918 <col:18> 'const String' lvalue ParmVar 0x5582d9b13598 'landmark' 'const String &'
|         |-DeclRefExpr 0x5582d9b17938 <col:28> 'const String' lvalue ParmVar 0x5582d9b13610 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5582d9b17af0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5582d9b17ad8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5582d9b17a40 <col:34, col:50> 'String' (CXXTemporary 0x5582d9b17a40)
|               `-CXXMemberCallExpr 0x5582d9b179d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5582d9b17968 <col:34> '<bound member function type>' ->vformat 0x5582d9b14410
|                 | `-CXXThisExpr 0x5582d9b17958 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5582d9b17a08 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5582d9b17998 <col:42> 'const char *' lvalue ParmVar 0x5582d9b13690 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5582d9b17a20 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5582d9b179b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5582d9b13708 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5582d9b13960 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5582d9b17bb0 <col:25, line:288:5>
|   `-ReturnStmt 0x5582d9b17ba0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5582d9b17b88 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5582d9b17b58 <col:9> 'const int' lvalue ->_nerrors 0x5582d9b16788
|         `-CXXThisExpr 0x5582d9b17b48 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5582d9b13b70 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5582d9b13a18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5582d9b13a98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b13e58 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5582d9b13c38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5582d9b13cb8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5582d9b13d30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5582d9b13ff0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5582d9b13f28 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b14238 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5582d9b140b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5582d9b14128 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5582d9b17e10 <col:58, line:357:5>
|   `-ReturnStmt 0x5582d9b17e00 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5582d9b17de8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5582d9b17db8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5582d9b17da0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5582d9b17d80 <col:9, col:29> 'String' (CXXTemporary 0x5582d9b17d80)
|             `-CallExpr 0x5582d9b17d10 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5582d9b17cf8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5582d9b17c78 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5582d9b13e58 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5582d9b17c18 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5582d9b17d48 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5582d9b17c38 <col:21> 'const char *' lvalue ParmVar 0x5582d9b140b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5582d9b17d60 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5582d9b17c58 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5582d9b14128 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5582d9b14410 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5582d9b14300 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5582d9b14378 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5582d9b14568 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5582d9b144d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b146e8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5582d9b14620 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5582d9b14980 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5582d9b147a0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5582d9b14820 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5582d9b14898 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5582d9b14ae0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5582d9b14a50 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5582d9b17f28 <col:37, line:441:5>
|   `-IfStmt 0x5582d9b17f10 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5582d9b17e98 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5582d9b17e68 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5582d9b17e28 <col:6> 'int' lvalue ParmVar 0x5582d9b14a50 'level' 'int'
|     | `-ImplicitCastExpr 0x5582d9b17e80 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5582d9b17e48 <col:15> 'ErrorHandler::Level' EnumConstant 0x5582d9b0ac40 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5582d9b17ef8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5582d9b17ec8 <col:8> 'int' lvalue ->_nerrors 0x5582d9b16788
|         `-CXXThisExpr 0x5582d9b17eb8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5582d9b14ba8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5582d9b17fc0 <col:26, line:448:5>
|   `-BinaryOperator 0x5582d9b17fa0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5582d9b17f50 <col:2> 'int' lvalue ->_nerrors 0x5582d9b16788
|     | `-CXXThisExpr 0x5582d9b17f40 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5582d9b17f80 <col:13> 'int' 0
|-CXXMethodDecl 0x5582d9b14d70 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5582d9b14c60 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5582d9b14cd8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5582d9b14f78 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5582d9b14e30 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5582d9b14ea8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5582d9b15228 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5582d9b15038 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5582d9b150b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5582d9b15138 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5582d9b152e0 <col:59> 0 0
|-CXXMethodDecl 0x5582d9b15478 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5582d9b15358 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5582d9b153d8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5582d9b18630 <col:70, line:534:5>
|   |-DeclStmt 0x5582d9b18130 <line:528:2, col:20>
|   | |-VarDecl 0x5582d9b17fe8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5582d9b18050 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5582d9b18088 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5582d9b180f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5582d9b18200 <line:529:2, col:23>
|   | `-VarDecl 0x5582d9b18160 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5582d9b181e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5582d9b181c8 <col:18> 'const char *' lvalue ParmVar 0x5582d9b15358 'begin' 'const char *'
|   |-DoStmt 0x5582d9b185c8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5582d9b184f8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5582d9b184e0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5582d9b184c0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5582d9b18218 <col:6> 'const char *' lvalue Var 0x5582d9b18160 'x' 'const char *'
|   | |     `-CallExpr 0x5582d9b18410 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5582d9b183f8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5582d9b183b0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5582d9b16c60 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5582d9b18478 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5582d9b18460 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5582d9b182d0 <col:20, col:27> 'String' (CXXTemporary 0x5582d9b182d0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5582d9b18298 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5582d9b18490 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5582d9b182f0 <col:30> 'const char *' lvalue Var 0x5582d9b18160 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5582d9b184a8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5582d9b18310 <col:33> 'const char *' lvalue ParmVar 0x5582d9b153d8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5582d9b18350 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5582d9b18330 <col:39> 'String' lvalue Var 0x5582d9b17fe8 'name' 'String'
|   | |       |-UnaryOperator 0x5582d9b18388 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5582d9b18368 <col:46> 'String' lvalue Var 0x5582d9b18088 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5582d9b183a0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5582d9b185b0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5582d9b18598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5582d9b18578 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5582d9b18548 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|   |         `-ImplicitCastExpr 0x5582d9b18530 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5582d9b18510 <col:11> 'String' lvalue Var 0x5582d9b17fe8 'name' 'String'
|   `-ReturnStmt 0x5582d9b18620 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5582d9b18608 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9b185e8 <col:9> 'const char *' lvalue Var 0x5582d9b18160 'x' 'const char *'
|-CXXMethodDecl 0x5582d9b155c8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5582d9b15538 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5582d9b18c38 <col:55, line:550:5>
|   `-IfStmt 0x5582d9b18c10 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5582d9b18870 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5582d9b18858 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5582d9b18840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5582d9b18820 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5582d9b187f0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|     | |       `-DeclRefExpr 0x5582d9b18690 <col:6> 'const String' lvalue ParmVar 0x5582d9b15538 'x' 'const String &'
|     | `-BinaryOperator 0x5582d9b187d0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5582d9b187a0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5582d9b18750 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5582d9b18738 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5582d9b186f0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5582d9838860 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5582d9b186b0 <col:11> 'const String' lvalue ParmVar 0x5582d9b15538 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5582d9b186d0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5582d9b187b8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5582d9b18788 <col:19> 'char' 123
|     |-ReturnStmt 0x5582d9b188e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5582d9b188b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5582d9b18890 <col:13> 'const String' lvalue ParmVar 0x5582d9b15538 'x' 'const String &'
|     `-IfStmt 0x5582d9b18be8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5582d9b18978 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5582d9b18960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5582d9b18940 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5582d9b18910 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |       `-DeclRefExpr 0x5582d9b188f0 <col:11> 'const String' lvalue ParmVar 0x5582d9b15538 'x' 'const String &'
|       |-ReturnStmt 0x5582d9b18b00 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5582d9b18ae8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5582d9b18ab8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5582d9b18aa0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5582d9b18a80 <col:13, col:29> 'String' (CXXTemporary 0x5582d9b18a80)
|       |         `-CallExpr 0x5582d9b18a30 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5582d9b18a18 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5582d9b18990 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5582d9b14d70 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5582d9b18a60 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5582d9b189b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5582d9b189d0 <col:28> 'const String' lvalue ParmVar 0x5582d9b15538 'x' 'const String &'
|       `-ReturnStmt 0x5582d9b18bd8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5582d9b18bc0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5582d9b18b90 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5582d9b18b78 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5582d9b18b58 <col:13, col:20> 'String' (CXXTemporary 0x5582d9b18b58)
|                 `-CXXTemporaryObjectExpr 0x5582d9b18b20 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5582d9b157c8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5582d9b15680 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5582d9b156f8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d9b16f08 <col:71> 'bool' false
|-CXXRecordDecl 0x5582d9b15878 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5582d9b15b78 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5582d9b15b10 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5582d9b15ab0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5582d9b15a70 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5582d981b8c0 'String'
|       | `-CXXRecord 0x5582d981b830 'String'
|       |-BuiltinType 0x5582d94ec570 'int'
|       `-DecayedType 0x5582d9b130d0 '__va_list_tag *' sugar
|         |-TypedefType 0x5582d9b130a0 'va_list' sugar
|         | |-Typedef 0x5582d970d980 'va_list'
|         | `-TypedefType 0x5582d970d930 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5582d9645558 '__gnuc_va_list'
|         |   `-TypedefType 0x5582d96454c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x5582d952dd08 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5582d952dcb0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5582d94ed2c0 '__va_list_tag'
|         |         `-CXXRecord 0x5582d94ed228 '__va_list_tag'
|         `-PointerType 0x5582d9713220 '__va_list_tag *'
|           `-RecordType 0x5582d94ed2c0 '__va_list_tag'
|             `-CXXRecord 0x5582d94ed228 '__va_list_tag'
|-EnumDecl 0x5582d9b15bd0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5582d9b15cd0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b16230 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15cb0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5582d9b15c90 <col:16> 'int' 1
| |-EnumConstantDecl 0x5582d9b15d60 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b16248 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15d40 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5582d9b15d20 <col:21> 'int' 2
| |-EnumConstantDecl 0x5582d9b15df0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b16260 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15dd0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5582d9b15db0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5582d9b15e80 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b16278 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15e60 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5582d9b15e40 <col:17> 'int' 8
| |-EnumConstantDecl 0x5582d9b15f10 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b16290 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15ef0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5582d9b15ed0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5582d9b15fa0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b162a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b15f80 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5582d9b15f60 <col:19> 'int' 32
| |-EnumConstantDecl 0x5582d9b16030 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b162c0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b16010 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5582d9b15ff0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5582d9b160c0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b162d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b160a0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5582d9b16080 <col:14> 'int' 128
| |-EnumConstantDecl 0x5582d9b16150 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5582d9b162f0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9b16130 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5582d9b16110 <col:16> 'int' 256
| `-EnumConstantDecl 0x5582d9b161e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5582d9b16308 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9b161c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5582d9b161a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5582d9b16518 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5582d9b16330 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5582d9b163d0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5582d9b166a0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5582d9b165d8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5582d9b16748 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5582d9b16788 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5582d9b167e8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5582d9b16860 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5582d9b16c60 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5582d9b168d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5582d9b16958 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5582d9b169d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5582d9b16a50 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5582d9b16ac8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5582d9b16b40 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5582d9b16d88 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5582d9b16d88
| `-ParmVarDecl 0x5582d9b16e98 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5582d9b18f98 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5582d9b18f98
  `-ParmVarDecl 0x5582d9b190a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9b59438 prev 0x5582d9a16b18 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9b59530 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5582d9b595c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5582d9b596c8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5582d9b595f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5582d9b5aaa0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9b5aa80 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5582d9b5a618 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5582d9b5ab30 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5582d9b5aaf0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5582d9b595f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5582d9b5a680 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5582d9b5abb0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9b5ab70 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5582d9b5a6e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5582d9b5abf0 <col:54> 'bool' false
| `-CompoundStmt 0x5582d9b5acf8 <col:61, line:38:5>
|   `-BinaryOperator 0x5582d9b5acd8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5582d9b5ac70 <col:9> 'const Element *' lvalue ->_context 0x5582d9b5a5b8
|     | `-CXXThisExpr 0x5582d9b5ac60 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5582d9b5acc0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5582d9b5aca0 <col:20> 'int' 0
|-CXXConstructorDecl 0x5582d9b598d8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9b59788 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5582d9b59800 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5582d9b5aad8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9b5aab8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5582d9b5a5b8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5582d9b5ad50 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5582d9b5ad10 <col:20> 'const Element *' lvalue ParmVar 0x5582d9b59788 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5582d9b5a618 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5582d9b5add0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5582d9b5ad90 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5582d9b59800 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5582d9b5a680 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5582d9b5ae50 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5582d9b5ae10 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5582d9b5a6e0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5582d9b5ae90 <col:73> 'bool' false
| `-CompoundStmt 0x5582d9b5af08 <col:80, line:46:5>
|-CXXMethodDecl 0x5582d9b59a08 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5582d9b5af80 <col:36, line:51:5>
|   `-ReturnStmt 0x5582d9b5af70 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5582d9b5af58 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5582d9b5af28 <col:16> 'const Element *const' lvalue ->_context 0x5582d9b5a5b8
|         `-CXXThisExpr 0x5582d9b5af18 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5582d9b59af8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5582d9b5b000 <col:32, line:57:5>
|   `-ReturnStmt 0x5582d9b5aff0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5582d9b5afd8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5582d9b5afa8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5582d9b5a618
|         `-CXXThisExpr 0x5582d9b5af98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5582d9b59bb8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5582d9b59d40 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5582d9b59c70 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b59e90 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5582d9b59e00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b59fe0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5582d9b59f50 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5582d9b5a1e8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5582d9b5a098 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5582d9b5a110 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5582d9b5a4c8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5582d9b5a2a8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5582d9b5a328 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5582d9b5a3a0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5582d9b5a580 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5582d9b5a5b8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5582d9b5a618 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5582d9b5a680 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5582d9b5a6e0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5582d9b5a730 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5582d9b5a730
| `-ParmVarDecl 0x5582d9b5a848 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5582d9b5a8e8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5582d9b5a8e8
| `-ParmVarDecl 0x5582d9b5a9f8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5582d9904b68 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9b8a6e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5582d9b8a8b8 prev 0x5582d9b8a6e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5582d9b8a948 <col:46, col:52> col:46 public
|-TypedefDecl 0x5582d9b8a970 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8c540 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5582d9b8c4f0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5582d9b8ae20 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5582d9b8ad20 'type'
|     `-TemplateSpecializationType 0x5582d9b8acb0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5582d9b8ab90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5582d9b8ab70 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5582d9b8ab50 <col:24> 'unsigned long' 4
|       `-RecordType 0x5582d9b8ac90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5582d9b8abb0 'char_array'
|-TypedefDecl 0x5582d9b8c5f8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5582d9b8c5c0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5582d9b8c5a0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5582d9b8c540 'type'
|     `-ElaboratedType 0x5582d9b8c4f0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5582d9b8ae20 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5582d9b8ad20 'type'
|         `-TemplateSpecializationType 0x5582d9b8acb0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5582d9b8ab90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5582d9b8ab70 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5582d9b8ab50 <col:24> 'unsigned long' 4
|           `-RecordType 0x5582d9b8ac90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5582d9b8abb0 'char_array'
|-CXXMethodDecl 0x5582d9b8c778 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5582d9b8c688 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5582d9b8c868 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5582d9b8c948 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5582d9b8cc18 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5582d9b8cb20 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5582d9b8ce58 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5582d9b8ccd0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b8cd48 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8d028 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5582d9b8cf18 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b8cf90 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8d188 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5582d9b8d258 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5582d9b8d4a8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5582d9b8d318 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5582d9b8d390 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8d708 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5582d9b8d578 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5582d9b8d5f0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8d8c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5582d9b8d7d8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8da88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5582d9b8d990 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8db40 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9b8dbf0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5582d9b8de28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5582d9b8dca0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5582d9b8dd18 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5582d9b8e0c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5582d9b8dfd0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5582d9b8e190 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5582d9b8e1e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5582d9b8e230 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9b7dc28 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5582d9b7de38 prev 0x5582d9b7dc28 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5582d9b8a650 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5582d9b8a600 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5582d9b8a5e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5582d9b8a498 'type'
|     `-SubstTemplateTypeParmType 0x5582d9b7ebe0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5582d97b5710 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97b56b8 'T'
|       `-RecordType 0x5582d9b7e730 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5582d9b7e648 'sized_array_memory'
|-FieldDecl 0x5582d9b8e280 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5582d9b8e2d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5582d9b8e308 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|   |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|   `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8e398 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5582d9b8e360 'int &'
|   `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8e458 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5582d9b8e420 'const int &'
|   `-QualType 0x5582d9b7ded1 'const int' const
|     `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8e4e8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5582d9b8e4b0 'int *'
|   `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8e578 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5582d9b8e540 'const int *'
|   `-QualType 0x5582d9b7ded1 'const int' const
|     `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8f160 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5582d9b8f110 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5582d9b8f0f0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5582d9b8f080 'type'
|     `-SubstTemplateTypeParmType 0x5582d9b8ee40 'int' sugar
|       |-TemplateTypeParmType 0x5582d97c0510 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97c04c0 'T'
|       `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8f1c8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5582d9b8e420 'const int &'
|   `-QualType 0x5582d9b7ded1 'const int' const
|     `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8f220 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8f288 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5582d9b8e4b0 'int *'
|   `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|     |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|     `-BuiltinType 0x5582d94ec570 'int'
|-TypedefDecl 0x5582d9b8f2f0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5582d9b8e540 'const int *'
|   `-QualType 0x5582d9b7ded1 'const int' const
|     `-SubstTemplateTypeParmType 0x5582d9b7ded0 'int' sugar
|       |-TemplateTypeParmType 0x5582d97ed400 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5582d97ed3a8 'T'
|       `-BuiltinType 0x5582d94ec570 'int'
|-EnumDecl 0x5582d9b8f348 <line:134:5> col:5
| `-EnumConstantDecl 0x5582d9b8f440 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5582d9b8f420 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5582d97eea88 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5582d97eea60 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5582d97eea40 <col:40> 'int' 1
|-CXXConstructorDecl 0x5582d9b8f4c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5582d9b8f718 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b8f580 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b8f620 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5582d9b8f9d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5582d9b8f8c0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5582d9b8fc98 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5582d9b8fb80 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5582d9b8ffe0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5582d9b8fec0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5582d9b902f0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5582d9b901d0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5582d9b905e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b90428 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b904a0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5582d9b90708 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5582d9b907e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90840 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90888 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5582d9b90938 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90990 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90a58 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b90b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90b60 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90ba8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b90c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90cb0 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90cf8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b90da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90e00 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90e48 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5582d9b90ef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5582d9b90f50 <col:30> Inherited
|-CXXMethodDecl 0x5582d9b90f78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9b91028 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5582d9b910d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5582d9b91298 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b91188 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5582d9b91200 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5582d9b913e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b91358 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b91598 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5582d9b914a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9b91650 <col:20>
| `-OptimizeNoneAttr 0x5582d9b916a8 <col:30>
|-CXXMethodDecl 0x5582d9b917c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5582d9b916d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5582d9b91880 <col:20>
| `-OptimizeNoneAttr 0x5582d9b918d8 <col:30>
|-CXXMethodDecl 0x5582d9b91990 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b91900 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b91ad8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9b91a48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b91c08 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5582d9b91d38 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5582d9b91e08 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5582d9b91ed8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5582d9b92018 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5582d9b91f88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b92160 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5582d9b920d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5582d9b922a8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5582d9b92218 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9b939b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5582d9b93ab0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5582d9b93a20 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5582d9b93b68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5582d9b93c28 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5582d9b93d28 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5582d9b93ea8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9b93de8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5582d9b94668 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5582d9b93f60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5582d9b945c8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5582d9b944c8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5582d9b94748 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5582d9b94898 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5582d9b94808 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5582d9b94950 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5582d9b94b98 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5582d9b94a10 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5582d9b94a88 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5582d9b94d58 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5582d9b94c68 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5582d9b94fa8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5582d9b94e20 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5582d9b94e98 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5582d9b95068 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5582d9b952c8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5582d9b951d0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5582d9b95398 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9b7bd98 prev 0x5582d9b61a18 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9b7be90 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5582d9b7bf80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5582d9ba7170 <col:16, line:828:9>
|-CXXDestructorDecl 0x5582d9b7c070 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5582d9ba7180 <col:25, line:830:9>
|-CXXMethodDecl 0x5582d9b7c170 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5582d9b7c220 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5582d9b7c2c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5582d9b7c2c8
| `-ParmVarDecl 0x5582d9b7c3d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5582d9b7cb98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5582d9b7cb98
  `-ParmVarDecl 0x5582d9b7cca8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9b61828 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5582d9b61988 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5582d9b61a18 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5582d9b61ad0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5582d9b61bd8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5582d9b61b08 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5582d9b96958 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5582d9b96938 <col:31> 'int' 0
|-CXXConstructorDecl 0x5582d9b61ef8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9b61d70 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5582d9b61de8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5582d9b96990 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5582d9b96970 <col:59> 'int' 0
|-CXXConstructorDecl 0x5582d9b620d0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9b61fc0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5582d9b62038 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5582d9b969c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5582d9b969a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x5582d9b62488 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5582d9b62270 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5582d9b622e8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5582d9b62360 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5582d9b96a00 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5582d9b969e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5582d9b62648 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5582d9b62588 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5582d9b62740 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5582d9b62928 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5582d9b62830 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5582d9b62a18 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5582d9b96db0 <col:24, line:291:5>
|   `-ReturnStmt 0x5582d9b96da0 <line:290:9, col:79>
|     `-BinaryOperator 0x5582d9b96d80 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5582d9b96c58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5582d9b96bb0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5582d9b96b90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5582d9b96a88 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5582d9b96a70 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5582d9b96a58 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5582d9b96a28 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5582d9b7dbc0
|       | |   |       `-CXXThisExpr 0x5582d9b96a18 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5582d9b96b78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5582d9b96b60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5582d9b96b28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5582d9b96af8 <col:28, col:35> '<bound member function type>' ->size 0x5582d9b47678
|       | |           `-ImplicitCastExpr 0x5582d9b96b48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5582d9b96ae0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5582d9b96ab0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5582d9b7dbc0
|       | |                 `-CXXThisExpr 0x5582d9b96aa0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5582d9b96c40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5582d9b96c28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5582d9b96c10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5582d9b96be0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5582d9b954e0
|       |         `-CXXThisExpr 0x5582d9b96bd0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5582d9b96d60 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5582d9b96d48 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5582d9b96d30 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5582d9b96cf0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5582d9b96cd8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5582d9b96c88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5582d9b95590
|         |     |   `-CXXThisExpr 0x5582d9b96c78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5582d9b96cb8 <col:73> 'int' 0
|         `-IntegerLiteral 0x5582d9b96d10 <col:79> 'int' 0
|-CXXMethodDecl 0x5582d9b62ad8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5582d9b96f88 <col:32, line:296:5>
|   `-ReturnStmt 0x5582d9b96f78 <line:295:9, col:49>
|     `-BinaryOperator 0x5582d9b96f58 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5582d9b96e38 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5582d9b96e20 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5582d9b96e08 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5582d9b96dd8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5582d9b954e0
|       |       `-CXXThisExpr 0x5582d9b96dc8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5582d9b96f38 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5582d9b96f20 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5582d9b96f08 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5582d9b96ec8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5582d9b96eb0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5582d9b96e60 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5582d9b95590
|         |     |   `-CXXThisExpr 0x5582d9b96e50 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5582d9b96e90 <col:43> 'int' 0
|         `-IntegerLiteral 0x5582d9b96ee8 <col:49> 'int' 0
|-CXXMethodDecl 0x5582d9b62bc8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5582d9b97198 <col:19, line:306:5>
|   |-IfStmt 0x5582d9b970b8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5582d9b96ff8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5582d9b96fe0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5582d9b96fb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5582d9b7dbc0
|   | |     `-CXXThisExpr 0x5582d9b96fa0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5582d9b97098 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5582d9b97068 <col:13, col:20> '<bound member function type>' ->clear 0x5582d9b4b598
|   |     `-ImplicitCastExpr 0x5582d9b97050 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5582d9b97020 <col:13> 'Vector<String> *' lvalue ->_conf 0x5582d9b7dbc0
|   |         `-CXXThisExpr 0x5582d9b97010 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5582d9b97140 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5582d9b97110 <col:9, col:16> '<bound member function type>' .clear 0x5582d9b95068
|   |   `-MemberExpr 0x5582d9b970e0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5582d9b95480
|   |     `-CXXThisExpr 0x5582d9b970d0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5582d9b97188 <line:305:9, col:17>
|     `-UnaryOperator 0x5582d9b97170 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b97160 <col:17> 'Args *' this
|-CXXMethodDecl 0x5582d9b62e48 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5582d9b62d50 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5582d9b62fc8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5582d9b62f00 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5582d9b63348 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5582d9b63070 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5582d9b632a8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5582d9b63118 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5582d9b63190 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5582d9b974b8 <col:67, line:327:5>
|     |-WhileStmt 0x5582d9b97468 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5582d9b97280 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5582d9b97200 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5582d9a0efe8 0x5582d98585c8 0x5582d98582a0 0x5582d9848a70 0x5582d9848720 0x5582d9848010 0x5582d981a980 0x5582d97a7e50
|     | | |-DeclRefExpr 0x5582d9b971c0 <col:16> 'Iter' lvalue ParmVar 0x5582d9b63118 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5582d9b971e0 <col:25> 'Iter' lvalue ParmVar 0x5582d9b63190 'end' 'Iter'
|     | `-CompoundStmt 0x5582d9b97448 <col:30, line:325:9>
|     |   |-CallExpr 0x5582d9b973e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5582d9b972c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5582d9b973b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5582d9b97348 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|     |   |   `-DeclRefExpr 0x5582d9b97328 <col:24> 'Iter' lvalue ParmVar 0x5582d9b63118 'begin' 'Iter'
|     |   `-UnaryOperator 0x5582d9b97430 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5582d9b97410 <col:15> 'Iter' lvalue ParmVar 0x5582d9b63118 'begin' 'Iter'
|     `-ReturnStmt 0x5582d9b974a8 <line:326:9, col:17>
|       `-UnaryOperator 0x5582d9b97490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b97480 <col:17> 'Args *' this
|-CXXMethodDecl 0x5582d9b63450 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5582d9b633c0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5582d9b63598 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5582d9b63508 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5582d9b63660 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5582d9b97598 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5582d9b97538 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5582d9b974e8 <col:9> '<bound member function type>' ->reset_from 0x5582d9b95908
|   | | `-CXXThisExpr 0x5582d9b974d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5582d9b97518 <col:20> 'int' 0
|   `-ReturnStmt 0x5582d9b97588 <line:352:9, col:17>
|     `-UnaryOperator 0x5582d9b97570 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b97560 <col:17> 'Args *' this
|-VarDecl 0x5582d9b63718 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5582d9b63780 <col:38> 'int' 1
|-VarDecl 0x5582d9b63810 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5582d9b63878 <col:39> 'int' 2
|-VarDecl 0x5582d9b63908 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5582d9b63970 <col:39> 'int' 4
|-VarDecl 0x5582d9b63a00 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5582d9b63a68 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5582d9b63de8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5582d9b63ae0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b63d48 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5582d9b63b90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b63c38 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b976f0 <col:43, line:371:5>
|     `-ReturnStmt 0x5582d9b976e0 <line:370:9, col:34>
|       `-CallExpr 0x5582d9b976a8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b975c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b97648 <col:21> 'const char *' lvalue ParmVar 0x5582d9b63b90 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b97668 <col:30> 'int' 0
|         `-DeclRefExpr 0x5582d9b97688 <col:33> 'T' lvalue ParmVar 0x5582d9b63c38 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b64118 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5582d9b63e50 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b64078 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5582d9b63f00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b63fa8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b97840 <col:45, line:375:5>
|     `-ReturnStmt 0x5582d9b97830 <line:374:9, col:42>
|       `-CallExpr 0x5582d9b977f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b97718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b97798 <col:21> 'const char *' lvalue ParmVar 0x5582d9b63f00 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b977b8 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int'
|         `-DeclRefExpr 0x5582d9b977d8 <col:41> 'T' lvalue ParmVar 0x5582d9b63fa8 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b64448 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5582d9b64180 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5582d9b643a8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5582d9b64230 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5582d9b642d8 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5582d9b97990 <col:45, line:379:5>
| |   `-ReturnStmt 0x5582d9b97980 <line:378:9, col:43>
| |     `-CallExpr 0x5582d9b97948 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5582d9b97868 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5582d9b978e8 <col:21> 'const char *' lvalue ParmVar 0x5582d9b64230 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5582d9b97908 <col:30> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
| |       `-DeclRefExpr 0x5582d9b97928 <col:42> 'T' lvalue ParmVar 0x5582d9b642d8 'x' 'T &'
| `-CXXMethodDecl 0x5582d9905578 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5582d9905398 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5582d9905468 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x5582d9b64778 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5582d9b644b0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5582d9b646d8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5582d9b64560 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5582d9b64608 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5582d9b97b90 <col:46, line:383:5>
| |   `-ReturnStmt 0x5582d9b97b80 <line:382:9, col:55>
| |     `-CallExpr 0x5582d9b97b48 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5582d9b979b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5582d9b97a38 <col:21> 'const char *' lvalue ParmVar 0x5582d9b64560 'keyword' 'const char *'
| |       |-BinaryOperator 0x5582d9b97b08 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x5582d9b97ab8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5582d9b97a98 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x5582d9b97af0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x5582d9b97ad0 <col:42> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x5582d9b97b28 <col:54> 'T' lvalue ParmVar 0x5582d9b64608 'x' 'T &'
| `-CXXMethodDecl 0x5582d9904ff8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x5582d9904e10 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5582d9904ee8 <col:40, col:43> col:43 x 'String &'
|-FunctionTemplateDecl 0x5582d9b64b78 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5582d9b647e0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b64ad8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5582d9b64890 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b64910 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b649b8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b97cd0 <col:54, line:388:5>
|     |-CallExpr 0x5582d9b97c58 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b97ba8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5582d9b97be8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b97bf8 <col:30> 'const char *' lvalue ParmVar 0x5582d9b64890 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b97c18 <col:39> 'int' lvalue ParmVar 0x5582d9b64910 'flags' 'int'
|     | `-DeclRefExpr 0x5582d9b97c38 <col:46> 'T' lvalue ParmVar 0x5582d9b649b8 'x' 'T &'
|     `-ReturnStmt 0x5582d9b97cc0 <line:387:9, col:17>
|       `-UnaryOperator 0x5582d9b97ca8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b97c98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b65028 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5582d9b64be8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b64c68 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5582d9b64f88 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b64d28 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b64dc8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b64e68 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b97e40 <col:74, line:403:5>
|     `-ReturnStmt 0x5582d9b97e30 <line:402:9, col:56>
|       `-CallExpr 0x5582d9b97df0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b97d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b97d70 <col:28> 'const char *' lvalue ParmVar 0x5582d9b64d28 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b97d90 <col:37> 'int' 0
|         |-DeclRefExpr 0x5582d9b97db0 <col:40> 'T' lvalue ParmVar 0x5582d9b64dc8 'x' 'T &'
|         `-DeclRefExpr 0x5582d9b97dd0 <col:43> 'const V' lvalue ParmVar 0x5582d9b64e68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5582d9b65498 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5582d9b65098 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b65118 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5582d9b653f8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b651d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b65278 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b65318 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b97fa8 <col:76, line:407:5>
|     `-ReturnStmt 0x5582d9b97f98 <line:406:9, col:65>
|       `-CallExpr 0x5582d9b97f58 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b97e68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b97ed8 <col:28> 'const char *' lvalue ParmVar 0x5582d9b651d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b97ef8 <col:37> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
|         |-DeclRefExpr 0x5582d9b97f18 <col:49> 'T' lvalue ParmVar 0x5582d9b65278 'x' 'T &'
|         `-DeclRefExpr 0x5582d9b97f38 <col:52> 'const V' lvalue ParmVar 0x5582d9b65318 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5582d9b659e8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5582d9b65508 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b65588 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5582d9b65948 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b65648 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b656c8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b65768 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b65808 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b98110 <col:85, line:412:5>
|     |-CallExpr 0x5582d9b98090 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b97fc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5582d9b98000 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b98010 <col:37> 'const char *' lvalue ParmVar 0x5582d9b65648 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b98030 <col:46> 'int' lvalue ParmVar 0x5582d9b656c8 'flags' 'int'
|     | |-DeclRefExpr 0x5582d9b98050 <col:53> 'T' lvalue ParmVar 0x5582d9b65768 'x' 'T &'
|     | `-DeclRefExpr 0x5582d9b98070 <col:56> 'const V' lvalue ParmVar 0x5582d9b65808 'default_value' 'const V &'
|     `-ReturnStmt 0x5582d9b98100 <line:411:9, col:17>
|       `-UnaryOperator 0x5582d9b980e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b980d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b6a118 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5582d9b65a60 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b65ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6a078 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b65b98 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b69eb0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b69f58 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b98290 <col:53, line:425:5>
|     `-ReturnStmt 0x5582d9b98280 <line:424:9, col:42>
|       `-CallExpr 0x5582d9b98240 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98140 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b981c0 <col:21> 'const char *' lvalue ParmVar 0x5582d9b65b98 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b981e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5582d9b98200 <col:33> 'P' lvalue ParmVar 0x5582d9b69eb0 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b98220 <col:41> 'T' lvalue ParmVar 0x5582d9b69f58 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6a568 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5582d9b6a188 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6a208 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6a4c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6a2c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6a340 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6a3e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b98408 <col:55, line:429:5>
|     `-ReturnStmt 0x5582d9b983f8 <line:428:9, col:50>
|       `-CallExpr 0x5582d9b983b8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b982b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b98338 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6a2c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b98358 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int'
|         |-DeclRefExpr 0x5582d9b98378 <col:41> 'P' lvalue ParmVar 0x5582d9b6a340 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b98398 <col:49> 'T' lvalue ParmVar 0x5582d9b6a3e8 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6a9b8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5582d9b6a5d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6a658 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6a918 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6a718 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6a790 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6a838 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b98580 <col:55, line:433:5>
|     `-ReturnStmt 0x5582d9b98570 <line:432:9, col:51>
|       `-CallExpr 0x5582d9b98530 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98430 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b984b0 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6a718 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b984d0 <col:30> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
|         |-DeclRefExpr 0x5582d9b984f0 <col:42> 'P' lvalue ParmVar 0x5582d9b6a790 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b98510 <col:50> 'T' lvalue ParmVar 0x5582d9b6a838 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6ae08 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5582d9b6aa28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6aaa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6ad68 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6ab68 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6abe0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6ac88 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b987a8 <col:56, line:437:5>
|     `-ReturnStmt 0x5582d9b98798 <line:436:9, col:63>
|       `-CallExpr 0x5582d9b98758 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b985a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b98628 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6ab68 'keyword' 'const char *'
|         |-BinaryOperator 0x5582d9b986f8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5582d9b986a8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5582d9b98688 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5582d9b986e0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5582d9b986c0 <col:42> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5582d9b98718 <col:54> 'P' lvalue ParmVar 0x5582d9b6abe0 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b98738 <col:62> 'T' lvalue ParmVar 0x5582d9b6ac88 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6b338 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5582d9b6ae78 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6aef8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6b298 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5582d9b6afb8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6b038 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b6b0b0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6b158 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b98910 <col:64, line:442:5>
|     |-CallExpr 0x5582d9b98890 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b987c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5582d9b98800 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b98810 <col:30> 'const char *' lvalue ParmVar 0x5582d9b6afb8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b98830 <col:39> 'int' lvalue ParmVar 0x5582d9b6b038 'flags' 'int'
|     | |-DeclRefExpr 0x5582d9b98850 <col:46> 'P' lvalue ParmVar 0x5582d9b6b0b0 'parser' 'P'
|     | `-DeclRefExpr 0x5582d9b98870 <col:54> 'T' lvalue ParmVar 0x5582d9b6b158 'x' 'T &'
|     `-ReturnStmt 0x5582d9b98900 <line:441:9, col:17>
|       `-UnaryOperator 0x5582d9b988e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b988d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b6b938 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5582d9b6b3b0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6b428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5582d9b6b4a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5582d9b6b898 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b6b570 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6b5e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6b688 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b6b758 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b98aa8 <col:84, line:458:5>
|     `-ReturnStmt 0x5582d9b98a98 <line:457:9, col:64>
|       `-CallExpr 0x5582d9b98a50 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b989b0 <col:28> 'const char *' lvalue ParmVar 0x5582d9b6b570 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b989d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x5582d9b989f0 <col:40> 'P' lvalue ParmVar 0x5582d9b6b5e8 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b98a10 <col:48> 'T' lvalue ParmVar 0x5582d9b6b688 'x' 'T &'
|         `-DeclRefExpr 0x5582d9b98a30 <col:51> 'const V' lvalue ParmVar 0x5582d9b6b758 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5582d9b6beb8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5582d9b6b9b0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6ba28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5582d9b6baa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5582d9b6be18 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b6bb70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6bbe8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6bc88 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b6bd28 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b98c38 <col:86, line:462:5>
|     `-ReturnStmt 0x5582d9b98c28 <line:461:9, col:73>
|       `-CallExpr 0x5582d9b98be0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98ad0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b98b40 <col:28> 'const char *' lvalue ParmVar 0x5582d9b6bb70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b98b60 <col:37> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
|         |-DeclRefExpr 0x5582d9b98b80 <col:49> 'P' lvalue ParmVar 0x5582d9b6bbe8 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b98ba0 <col:57> 'T' lvalue ParmVar 0x5582d9b6bc88 'x' 'T &'
|         `-DeclRefExpr 0x5582d9b98bc0 <col:60> 'const V' lvalue ParmVar 0x5582d9b6bd28 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5582d9b6c518 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5582d9b6bf30 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6bfa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5582d9b6c028 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5582d9b6c478 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b6c0f0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6c170 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b6c1e8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6c288 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b6c328 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5582d9b98dc8 <col:95, line:467:5>
|     |-CallExpr 0x5582d9b98d40 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b98c50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5582d9b98c90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b98ca0 <col:37> 'const char *' lvalue ParmVar 0x5582d9b6c0f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b98cc0 <col:46> 'int' lvalue ParmVar 0x5582d9b6c170 'flags' 'int'
|     | |-DeclRefExpr 0x5582d9b98ce0 <col:53> 'P' lvalue ParmVar 0x5582d9b6c1e8 'parser' 'P'
|     | |-DeclRefExpr 0x5582d9b98d00 <col:61> 'T' lvalue ParmVar 0x5582d9b6c288 'x' 'T &'
|     | `-DeclRefExpr 0x5582d9b98d20 <col:64> 'const V' lvalue ParmVar 0x5582d9b6c328 'default_value' 'const V &'
|     `-ReturnStmt 0x5582d9b98db8 <line:466:9, col:17>
|       `-UnaryOperator 0x5582d9b98da0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b98d90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b6caf8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5582d9b6c598 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6c618 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b6c698 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b6ca58 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b6c760 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6c7d8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6c878 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5582d9b6c918 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5582d9b98f70 <col:63, line:481:5>
|     `-ReturnStmt 0x5582d9b98f60 <line:480:9, col:47>
|       `-CallExpr 0x5582d9b98f18 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b98e78 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6c760 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b98e98 <col:30> 'int' 0
|         |-DeclRefExpr 0x5582d9b98eb8 <col:33> 'P' lvalue ParmVar 0x5582d9b6c7d8 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b98ed8 <col:41> 'T1' lvalue ParmVar 0x5582d9b6c878 'x1' 'T1 &'
|         `-DeclRefExpr 0x5582d9b98ef8 <col:45> 'T2' lvalue ParmVar 0x5582d9b6c918 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5582d9b6d078 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5582d9b6cb70 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6cbe8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b6cc68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b6cfd8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b6cd30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6cda8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6ce48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5582d9b6cee8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5582d9b99110 <col:65, line:485:5>
|     `-ReturnStmt 0x5582d9b99100 <line:484:9, col:55>
|       `-CallExpr 0x5582d9b990b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b98f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99018 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6cd30 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b99038 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int'
|         |-DeclRefExpr 0x5582d9b99058 <col:41> 'P' lvalue ParmVar 0x5582d9b6cda8 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b99078 <col:49> 'T1' lvalue ParmVar 0x5582d9b6ce48 'x1' 'T1 &'
|         `-DeclRefExpr 0x5582d9b99098 <col:53> 'T2' lvalue ParmVar 0x5582d9b6cee8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5582d9b6d5f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5582d9b6d0f0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6d168 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b6d1e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b6d558 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b6d2b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6d328 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6d3c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5582d9b6d468 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5582d9b992b0 <col:65, line:489:5>
|     `-ReturnStmt 0x5582d9b992a0 <line:488:9, col:56>
|       `-CallExpr 0x5582d9b99258 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99138 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b991b8 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6d2b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b991d8 <col:30> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
|         |-DeclRefExpr 0x5582d9b991f8 <col:42> 'P' lvalue ParmVar 0x5582d9b6d328 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b99218 <col:50> 'T1' lvalue ParmVar 0x5582d9b6d3c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5582d9b99238 <col:54> 'T2' lvalue ParmVar 0x5582d9b6d468 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5582d9b6db78 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5582d9b6d670 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6d6e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b6d768 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b6dad8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b6d830 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6d8a8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6d948 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5582d9b6d9e8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5582d9b99500 <col:66, line:493:5>
|     `-ReturnStmt 0x5582d9b994f0 <line:492:9, col:68>
|       `-CallExpr 0x5582d9b994a8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b992d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99358 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6d830 'keyword' 'const char *'
|         |-BinaryOperator 0x5582d9b99428 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5582d9b993d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5582d9b993b8 <col:30> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5582d9b99410 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5582d9b993f0 <col:42> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5582d9b99448 <col:54> 'P' lvalue ParmVar 0x5582d9b6d8a8 'parser' 'P'
|         |-DeclRefExpr 0x5582d9b99468 <col:62> 'T1' lvalue ParmVar 0x5582d9b6d948 'x1' 'T1 &'
|         `-DeclRefExpr 0x5582d9b99488 <col:66> 'T2' lvalue ParmVar 0x5582d9b6d9e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5582d9b6e1d8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5582d9b6dbf0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6dc68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b6dce8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b6e138 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b6ddb0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6de30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b6dea8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6df48 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5582d9b6dfe8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5582d9b99690 <col:74, line:498:5>
|     |-CallExpr 0x5582d9b99608 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b99518 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5582d9b99558 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b99568 <col:30> 'const char *' lvalue ParmVar 0x5582d9b6ddb0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b99588 <col:39> 'int' lvalue ParmVar 0x5582d9b6de30 'flags' 'int'
|     | |-DeclRefExpr 0x5582d9b995a8 <col:46> 'P' lvalue ParmVar 0x5582d9b6dea8 'parser' 'P'
|     | |-DeclRefExpr 0x5582d9b995c8 <col:54> 'T1' lvalue ParmVar 0x5582d9b6df48 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5582d9b995e8 <col:58> 'T2' lvalue ParmVar 0x5582d9b6dfe8 'x2' 'T2 &'
|     `-ReturnStmt 0x5582d9b99680 <line:497:9, col:17>
|       `-UnaryOperator 0x5582d9b99668 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b99658 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b6e538 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5582d9b6e258 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b6e498 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5582d9b6e310 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6e388 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b997d8 <col:52, line:509:5>
|     `-ReturnStmt 0x5582d9b997c8 <line:508:9, col:44>
|       `-CallExpr 0x5582d9b99790 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b996c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99730 <col:26> 'const char *' lvalue ParmVar 0x5582d9b6e310 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b99750 <col:35> 'int' 0
|         `-DeclRefExpr 0x5582d9b99770 <col:38> 'P' lvalue ParmVar 0x5582d9b6e388 'parser' 'P'
|-FunctionTemplateDecl 0x5582d9b6e838 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5582d9b6e5a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b6e798 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5582d9b6e650 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6e6c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b99918 <col:54, line:513:5>
|     `-ReturnStmt 0x5582d9b99908 <line:512:9, col:52>
|       `-CallExpr 0x5582d9b998d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99870 <col:26> 'const char *' lvalue ParmVar 0x5582d9b6e650 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b99890 <col:35> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int'
|         `-DeclRefExpr 0x5582d9b998b0 <col:46> 'P' lvalue ParmVar 0x5582d9b6e6c8 'parser' 'P'
|-FunctionTemplateDecl 0x5582d9b6eb38 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5582d9b6e8a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b6ea98 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5582d9b6e950 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6e9c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b99a58 <col:54, line:517:5>
|     `-ReturnStmt 0x5582d9b99a48 <line:516:9, col:53>
|       `-CallExpr 0x5582d9b99a10 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99940 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b999b0 <col:26> 'const char *' lvalue ParmVar 0x5582d9b6e950 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b999d0 <col:35> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int'
|         `-DeclRefExpr 0x5582d9b999f0 <col:47> 'P' lvalue ParmVar 0x5582d9b6e9c8 'parser' 'P'
|-FunctionTemplateDecl 0x5582d9b6ee38 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5582d9b6eba0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b6ed98 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5582d9b6ec50 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6ecc8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b99c48 <col:55, line:521:5>
|     `-ReturnStmt 0x5582d9b99c38 <line:520:9, col:65>
|       `-CallExpr 0x5582d9b99c00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99a80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99af0 <col:26> 'const char *' lvalue ParmVar 0x5582d9b6ec50 'keyword' 'const char *'
|         |-BinaryOperator 0x5582d9b99bc0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5582d9b99b70 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5582d9b99b50 <col:35> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5582d9b99ba8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5582d9b99b88 <col:47> 'const int' lvalue Var 0x5582d9b63810 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5582d9b99be0 <col:59> 'P' lvalue ParmVar 0x5582d9b6ecc8 'parser' 'P'
|-FunctionTemplateDecl 0x5582d9b6f208 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5582d9b6eea0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b6f168 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5582d9b6ef50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6efd0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b6f048 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b99d88 <col:63, line:526:5>
|     |-CallExpr 0x5582d9b99d10 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b99c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5582d9b99ca0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b99cb0 <col:35> 'const char *' lvalue ParmVar 0x5582d9b6ef50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5582d9b99cd0 <col:44> 'int' lvalue ParmVar 0x5582d9b6efd0 'flags' 'int'
|     | `-DeclRefExpr 0x5582d9b99cf0 <col:51> 'P' lvalue ParmVar 0x5582d9b6f048 'parser' 'P'
|     `-ReturnStmt 0x5582d9b99d78 <line:525:9, col:17>
|       `-UnaryOperator 0x5582d9b99d60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b99d50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b6f658 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5582d9b6f278 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6f2f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6f5b8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6f3b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6f430 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6f4d8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b99ee0 <col:58, line:541:5>
|     `-ReturnStmt 0x5582d9b99ed0 <line:540:9, col:39>
|       `-CallExpr 0x5582d9b99e98 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99db8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99e38 <col:21> 'const char *' lvalue ParmVar 0x5582d9b6f3b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b99e58 <col:30> 'P' lvalue ParmVar 0x5582d9b6f430 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b99e78 <col:38> 'T' lvalue ParmVar 0x5582d9b6f4d8 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6faa8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5582d9b6f6c8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6f748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6fa08 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6f808 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6f880 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6f928 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9a018 <col:60, line:545:5>
|     `-ReturnStmt 0x5582d9b9a008 <line:544:9, col:41>
|       `-CallExpr 0x5582d9b99fd0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b99f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b99f70 <col:23> 'const char *' lvalue ParmVar 0x5582d9b6f808 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b99f90 <col:32> 'P' lvalue ParmVar 0x5582d9b6f880 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b99fb0 <col:40> 'T' lvalue ParmVar 0x5582d9b6f928 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b6fef8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5582d9b6fb18 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6fb98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b6fe58 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b6fc58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b6fcd0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b6fd78 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9a150 <col:60, line:549:5>
|     `-ReturnStmt 0x5582d9b9a140 <line:548:9, col:41>
|       `-CallExpr 0x5582d9b9a108 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9a040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9a0a8 <col:23> 'const char *' lvalue ParmVar 0x5582d9b6fc58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b9a0c8 <col:32> 'P' lvalue ParmVar 0x5582d9b6fcd0 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b9a0e8 <col:40> 'T' lvalue ParmVar 0x5582d9b6fd78 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b70348 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5582d9b6ff68 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b6ffe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b702a8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b700a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b70120 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b701c8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9a288 <col:61, line:553:5>
|     `-ReturnStmt 0x5582d9b9a278 <line:552:9, col:42>
|       `-CallExpr 0x5582d9b9a240 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9a178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9a1e0 <col:24> 'const char *' lvalue ParmVar 0x5582d9b700a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b9a200 <col:33> 'P' lvalue ParmVar 0x5582d9b70120 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b9a220 <col:41> 'T' lvalue ParmVar 0x5582d9b701c8 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b70828 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5582d9b703b8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b70438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b70788 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5582d9b704f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b70578 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b705f0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b70698 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9a400 <col:69, line:557:5>
|     `-ReturnStmt 0x5582d9b9a3f0 <line:556:9, col:46>
|       `-CallExpr 0x5582d9b9a3b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9a2b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9a330 <col:21> 'const char *' lvalue ParmVar 0x5582d9b704f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b9a350 <col:30> 'int' lvalue ParmVar 0x5582d9b70578 'flags' 'int'
|         |-DeclRefExpr 0x5582d9b9a370 <col:37> 'P' lvalue ParmVar 0x5582d9b705f0 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b9a390 <col:45> 'T' lvalue ParmVar 0x5582d9b70698 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b70b38 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5582d9b708a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b70a98 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5582d9b70950 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b709c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b9a540 <col:56, line:571:5>
|     `-ReturnStmt 0x5582d9b9a530 <line:570:9, col:48>
|       `-CallExpr 0x5582d9b9a4f8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9a428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9a498 <col:30> 'const char *' lvalue ParmVar 0x5582d9b70950 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b9a4b8 <col:39> 'int' 0
|         `-DeclRefExpr 0x5582d9b9a4d8 <col:42> 'P' lvalue ParmVar 0x5582d9b709c8 'parser' 'P'
|-FunctionTemplateDecl 0x5582d9b70ec8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5582d9b70ba0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b70e28 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5582d9b70c50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b70cd0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b70d48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5582d9b9a710 <col:67, line:576:5>
|     |-CallExpr 0x5582d9b9a698 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b9a558 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5582d9b9a598 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b9a5a8 <col:39> 'const char *' lvalue ParmVar 0x5582d9b70c50 'keyword' 'const char *'
|     | |-BinaryOperator 0x5582d9b9a658 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5582d9b9a608 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5582d9b9a5c8 <col:48> 'int' lvalue ParmVar 0x5582d9b70cd0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5582d9b9a640 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5582d9b9a620 <col:56> 'const int' lvalue Var 0x5582d9b63a00 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5582d9b9a678 <col:68> 'P' lvalue ParmVar 0x5582d9b70d48 'parser' 'P'
|     `-ReturnStmt 0x5582d9b9a700 <line:575:9, col:17>
|       `-UnaryOperator 0x5582d9b9a6e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b9a6d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b71318 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5582d9b70f38 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b70fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b71278 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5582d9b71078 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b710f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b71198 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9a880 <col:62, line:592:5>
|     `-ReturnStmt 0x5582d9b9a870 <line:591:9, col:51>
|       `-CallExpr 0x5582d9b9a830 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9a740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9a7b0 <col:30> 'const char *' lvalue ParmVar 0x5582d9b71078 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b9a7d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x5582d9b9a7f0 <col:42> 'P' lvalue ParmVar 0x5582d9b710f0 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b9a810 <col:50> 'T' lvalue ParmVar 0x5582d9b71198 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b717f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5582d9b71388 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b71408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b71758 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5582d9b714c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b71548 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b715c0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b71668 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9aa78 <col:73, line:597:5>
|     |-CallExpr 0x5582d9b9a9f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b9a898 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5582d9b9a8d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b9a8e8 <col:39> 'const char *' lvalue ParmVar 0x5582d9b714c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5582d9b9a998 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5582d9b9a948 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5582d9b9a908 <col:48> 'int' lvalue ParmVar 0x5582d9b71548 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5582d9b9a980 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5582d9b9a960 <col:56> 'const int' lvalue Var 0x5582d9b63a00 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5582d9b9a9b8 <col:68> 'P' lvalue ParmVar 0x5582d9b715c0 'parser' 'P'
|     | `-DeclRefExpr 0x5582d9b9a9d8 <col:76> 'T' lvalue ParmVar 0x5582d9b71668 'x' 'T &'
|     `-ReturnStmt 0x5582d9b9aa68 <line:596:9, col:17>
|       `-UnaryOperator 0x5582d9b9aa50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b9aa40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b71da8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5582d9b71870 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b718e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b71d08 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5582d9b719a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b71a20 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b71be0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5582d9b9abe8 <col:65, line:614:5>
|     `-ReturnStmt 0x5582d9b9abd8 <line:613:9, col:46>
|       `-CallExpr 0x5582d9b9ab98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9aaa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9ab18 <col:25> 'const char *' lvalue ParmVar 0x5582d9b719a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b9ab38 <col:34> 'int' 0
|         |-DeclRefExpr 0x5582d9b9ab58 <col:37> 'P' lvalue ParmVar 0x5582d9b71a20 'parser' 'P'
|         `-DeclRefExpr 0x5582d9b9ab78 <col:45> 'Vector<T>' lvalue ParmVar 0x5582d9b71be0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5582d9b77048 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5582d9b71e18 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b76fa8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5582d9b76d48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b76e90 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5582d9b9ae00 <col:55, line:618:5>
|     `-ReturnStmt 0x5582d9b9adf0 <line:617:9, col:55>
|       `-CallExpr 0x5582d9b9adb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9ac10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9ac80 <col:25> 'const char *' lvalue ParmVar 0x5582d9b76d48 'keyword' 'const char *'
|         |-IntegerLiteral 0x5582d9b9aca0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5582d9b9ad70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5582d9b9ad90 <col:54> 'Vector<T>' lvalue ParmVar 0x5582d9b76e90 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5582d9b77618 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5582d9b770b0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b77128 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b77578 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5582d9b771e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b77268 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b772e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b77430 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5582d9b9aff8 <col:76, line:623:5>
|     |-CallExpr 0x5582d9b9af78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5582d9b9ae18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5582d9b9ae58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5582d9b9ae68 <col:34> 'const char *' lvalue ParmVar 0x5582d9b771e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5582d9b9af18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5582d9b9aec8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5582d9b9ae88 <col:43> 'int' lvalue ParmVar 0x5582d9b77268 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5582d9b9af00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5582d9b9aee0 <col:51> 'const int' lvalue Var 0x5582d9b63a00 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5582d9b9af38 <col:63> 'P' lvalue ParmVar 0x5582d9b772e0 'parser' 'P'
|     | `-DeclRefExpr 0x5582d9b9af58 <col:71> 'Vector<T>' lvalue ParmVar 0x5582d9b77430 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5582d9b9afe8 <line:622:9, col:17>
|       `-UnaryOperator 0x5582d9b9afd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b9afc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b77b58 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5582d9b77690 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b77708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b77ab8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5582d9b777c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b77848 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b77990 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5582d9b9b260 <col:66, line:627:5>
|     `-ReturnStmt 0x5582d9b9b250 <line:626:9, col:59>
|       `-CallExpr 0x5582d9b9b210 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5582d9b9b028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5582d9b9b098 <col:25> 'const char *' lvalue ParmVar 0x5582d9b777c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5582d9b9b0b8 <col:34> 'int' lvalue ParmVar 0x5582d9b77848 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5582d9b9b1d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5582d9b9b1f0 <col:58> 'Vector<T>' lvalue ParmVar 0x5582d9b77990 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5582d9b77be8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5582d9b9b2e0 <col:25, line:633:5>
|   `-ReturnStmt 0x5582d9b9b2d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5582d9b9b2b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5582d9b9b288 <col:16> 'const bool' lvalue ->_status 0x5582d9b7da28
|         `-CXXThisExpr 0x5582d9b9b278 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5582d9b77d68 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5582d9b77ca0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5582d9b9b3c8 <col:27, line:639:5>
|   |-BinaryOperator 0x5582d9b9b370 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5582d9b9b2f8 <col:9> 'bool' lvalue ParmVar 0x5582d9b77ca0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5582d9b9b358 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5582d9b9b328 <col:13> 'bool' lvalue ->_status 0x5582d9b7da28
|   |     `-CXXThisExpr 0x5582d9b9b318 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5582d9b9b3b8 <line:638:9, col:17>
|     `-UnaryOperator 0x5582d9b9b3a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b9b390 <col:17> 'Args *' this
|-CXXMethodDecl 0x5582d9b77ee8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5582d9b77e28 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5582d9b9b4b8 <col:39, line:644:5>
|   |-BinaryOperator 0x5582d9b9b460 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5582d9b9b3e8 <col:9> 'bool' lvalue ParmVar 0x5582d9b77e28 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5582d9b9b448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5582d9b9b418 <col:13> 'const bool' lvalue ->_status 0x5582d9b7da28
|   |     `-CXXThisExpr 0x5582d9b9b408 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5582d9b9b4a8 <line:643:9, col:17>
|     `-UnaryOperator 0x5582d9b9b490 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b9b480 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5582d9b77fb0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5582d9b9b560 <col:30, line:651:5>
|   `-ReturnStmt 0x5582d9b9b550 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5582d9b9b538 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5582d9b9b508 <col:16> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|         `-ImplicitCastExpr 0x5582d9b9b4e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5582d9b9b4d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5582d9b780f8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5582d9b78068 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5582d9b9b668 <col:32, line:658:5>
|   |-BinaryOperator 0x5582d9b9b610 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5582d9b9b578 <col:9> 'bool' lvalue ParmVar 0x5582d9b78068 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5582d9b9b5f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5582d9b9b5c8 <col:13> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|   |     `-ImplicitCastExpr 0x5582d9b9b5a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5582d9b9b598 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5582d9b9b658 <line:657:9, col:17>
|     `-UnaryOperator 0x5582d9b9b640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b9b630 <col:17> 'Args *' this
|-CXXMethodDecl 0x5582d9b78248 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5582d9b781b8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5582d9b9b778 <col:44, line:663:5>
|   |-BinaryOperator 0x5582d9b9b720 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5582d9b9b688 <col:9> 'bool' lvalue ParmVar 0x5582d9b781b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5582d9b9b708 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5582d9b9b6d8 <col:13> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|   |     `-ImplicitCastExpr 0x5582d9b9b6b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5582d9b9b6a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5582d9b9b768 <line:662:9, col:17>
|     `-UnaryOperator 0x5582d9b9b750 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9b9b740 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5582d9b78310 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5582d9b783d8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5582d9b784a0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5582d9b78568 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5582d9b78878 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5582d9b78608 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b787d8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5582d9b786e8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9f808 <col:19, line:706:5>
|     `-IfStmt 0x5582d9b9f7e0 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5582d9b9b878 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5582d9b9f710 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5582d9b9f6e0 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5582d9b9f6a0 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5582d9b9b8d0 <col:42> '<bound member function type>' ->simple_slot 0x5582d9b965c0
|       |     | `-CXXThisExpr 0x5582d9b9b8c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5582d9b9b968 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5582d9b9b920 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5582d985d068
|       |     | `-DeclRefExpr 0x5582d9b9b900 <col:55> 'T' lvalue ParmVar 0x5582d9b786e8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5582d9b9f680 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5582d9b9f7d0 <line:705:13, col:34>
|         `-CallExpr 0x5582d9b9f7a8 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5582d9b9f730 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5582d9b9f788 <col:33> 'T' lvalue ParmVar 0x5582d9b786e8 'x' 'T &'
|-FunctionTemplateDecl 0x5582d9b78b48 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5582d9b788d8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b78aa8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5582d9b789b8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5582d9b9fbe0 <col:31, line:717:5>
|     |-DeclStmt 0x5582d9b9f948 <line:713:9, col:23>
|     | `-VarDecl 0x5582d9b9f830 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5582d9b9f920 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5582d9b9f8a8 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5582d9b9f900 <col:21> 'T' lvalue ParmVar 0x5582d9b789b8 'x' 'T &'
|     |-IfStmt 0x5582d9b9fb90 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5582d9b9fa38 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5582d9b9fb70 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5582d9b9fb10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5582d9b9faa0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|     |   | `-DeclRefExpr 0x5582d9b9fa80 <col:14> 'T *' lvalue Var 0x5582d9b9f830 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5582d9b9fb50 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5582d9b9fbc8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5582d9b9fba8 <col:16> 'T *' lvalue Var 0x5582d9b9f830 's' 'T *'
|-FunctionTemplateDecl 0x5582d9b78f58 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5582d9b78ba8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b78c28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5582d9b78eb8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5582d9b78d08 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5582d9b78da8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5582d9b9fef0 <col:37, line:726:5>
|     |-IfStmt 0x5582d9b9fe80 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5582d9b9fea0 <line:723:13, col:26>
|     | | `-VarDecl 0x5582d9b9fc48 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5582d9b9fd38 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5582d9b9fcc0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5582d9b9fd18 <col:25> 'T' lvalue ParmVar 0x5582d9b78d08 'x' 'T &'
|     | |-DeclRefExpr 0x5582d9b9fd60 <col:16> 'T *' lvalue Var 0x5582d9b9fc48 's' 'T *'
|     | `-BinaryOperator 0x5582d9b9fe60 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5582d9b9fe10 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5582d9b9fda0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|     |   | `-DeclRefExpr 0x5582d9b9fd80 <col:14> 'T *' lvalue Var 0x5582d9b9fc48 's' 'T *'
|     |   `-DeclRefExpr 0x5582d9b9fe40 <col:18> 'const V' lvalue ParmVar 0x5582d9b78da8 'value' 'const V &'
|     `-ReturnStmt 0x5582d9b9fee0 <line:725:9, col:17>
|       `-UnaryOperator 0x5582d9b9fec8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5582d9b9feb8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5582d9b79358 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5582d9b78fc0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5582d9b792b8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5582d9b79070 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b790f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b79198 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5582d9ba0d10 <col:65, line:737:5>
|     |-DeclStmt 0x5582d9b9ff88 <line:732:9, col:26>
|     | `-VarDecl 0x5582d9b9ff20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5582d9ba0cd8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5582d9ba0cf8 <line:733:13, col:58>
|       | `-VarDecl 0x5582d9b9ffb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5582d9ba0190 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5582d9ba0160 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5582d9ba0148 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5582d9ba0128 <col:26, col:58> 'String' (CXXTemporary 0x5582d9ba0128)
|       |           `-CXXMemberCallExpr 0x5582d9ba00b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5582d9ba0028 <col:26> '<bound member function type>' ->find 0x5582d9b95bd8
|       |             | `-CXXThisExpr 0x5582d9ba0018 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5582d9ba00f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba0058 <col:31> 'const char *' lvalue ParmVar 0x5582d9b79070 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5582d9ba0108 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba0078 <col:40> 'int' lvalue ParmVar 0x5582d9b790f0 'flags' 'int'
|       |             `-DeclRefExpr 0x5582d9ba0098 <col:47> 'Args::Slot *' lvalue Var 0x5582d9b9ff20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5582d9ba0248 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5582d9ba0230 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5582d9ba0210 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5582d9ba01e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |       `-ImplicitCastExpr 0x5582d9ba01c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5582d9ba01a8 <col:20> 'String' lvalue Var 0x5582d9b9ffb0 'str' 'String'
|       `-CompoundStmt 0x5582d9ba0cb8 <col:61, line:736:9>
|         |-DeclStmt 0x5582d9ba0700 <line:734:13, col:76>
|         | `-VarDecl 0x5582d9ba0298 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5582d9ba06d0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5582d9ba0640 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5582d9ba0688 <col:60> 'T' lvalue ParmVar 0x5582d9b79198 'variable' 'T &'
|         |     `-UnaryOperator 0x5582d9ba06b8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5582d9ba06a8 <col:71> 'Args *' this
|         `-CallExpr 0x5582d9ba0c88 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5582d9ba0728 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|           | `-CXXThisExpr 0x5582d9ba0718 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5582d9ba0c48 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5582d9ba0758 <col:23> 'T *' lvalue Var 0x5582d9ba0298 's' 'T *'
|           | `-CallExpr 0x5582d9ba0c08 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5582d9ba09e0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5582d9ba0ae0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5582d9ba0b00 <col:86> 'String' lvalue Var 0x5582d9b9ffb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5582d9ba0bb0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5582d9ba0b40 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|           |   | `-DeclRefExpr 0x5582d9ba0b20 <col:92> 'T *' lvalue Var 0x5582d9ba0298 's' 'T *'
|           |   `-UnaryOperator 0x5582d9ba0bf0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5582d9ba0be0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5582d9ba0c68 <col:103> 'Args::Slot *' lvalue Var 0x5582d9b9ff20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b798a8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5582d9b793c8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b79448 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5582d9b79808 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b79508 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b79588 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b79628 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5582d9b796c8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5582d9ba1bb0 <col:88, line:745:5>
|     |-DeclStmt 0x5582d9ba0da8 <line:741:9, col:26>
|     | `-VarDecl 0x5582d9ba0d40 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba0fc8 <line:742:9, col:55>
|     | `-VarDecl 0x5582d9ba0dd0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5582d9ba0fb0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5582d9ba0f80 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5582d9ba0f68 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5582d9ba0f48 <col:22, col:54> 'String' (CXXTemporary 0x5582d9ba0f48)
|     |           `-CXXMemberCallExpr 0x5582d9ba0ed8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5582d9ba0e48 <col:22> '<bound member function type>' ->find 0x5582d9b95bd8
|     |             | `-CXXThisExpr 0x5582d9ba0e38 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5582d9ba0f10 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5582d9ba0e78 <col:27> 'const char *' lvalue ParmVar 0x5582d9b79508 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5582d9ba0f28 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5582d9ba0e98 <col:36> 'int' lvalue ParmVar 0x5582d9b79588 'flags' 'int'
|     |             `-DeclRefExpr 0x5582d9ba0eb8 <col:43> 'Args::Slot *' lvalue Var 0x5582d9ba0d40 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba13a0 <line:743:9, col:72>
|     | `-VarDecl 0x5582d9ba1018 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5582d9ba1370 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5582d9ba12e0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5582d9ba1328 <col:56> 'T' lvalue ParmVar 0x5582d9b79628 'variable' 'T &'
|     |     `-UnaryOperator 0x5582d9ba1358 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5582d9ba1348 <col:67> 'Args *' this
|     `-CallExpr 0x5582d9ba1b80 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5582d9ba13c8 <col:9> '<bound member function type>' ->postparse 0x5582d9b95de8
|       | `-CXXThisExpr 0x5582d9ba13b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5582d9ba1b40 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5582d9ba13f8 <col:19> 'T *' lvalue Var 0x5582d9ba1018 's' 'T *'
|       | `-ParenExpr 0x5582d9ba1b20 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5582d9ba1af0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5582d9ba1ad8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5582d9ba1ac0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5582d9ba1aa0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5582d9ba1a70 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |     |       `-ImplicitCastExpr 0x5582d9ba1a58 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5582d9ba1418 <col:25> 'String' lvalue Var 0x5582d9ba0dd0 'str' 'String'
|       |     |-CallExpr 0x5582d9ba18c8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5582d9ba16a0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5582d9ba17a0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5582d9ba17c0 <col:89> 'String' lvalue Var 0x5582d9ba0dd0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5582d9ba1870 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5582d9ba1800 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|       |     | | `-DeclRefExpr 0x5582d9ba17e0 <col:95> 'T *' lvalue Var 0x5582d9ba1018 's' 'T *'
|       |     | `-UnaryOperator 0x5582d9ba18b0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5582d9ba18a0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5582d9ba1a38 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5582d9ba1a18 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5582d9ba19e8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5582d9ba1998 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5582d9ba1928 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|       |         | | `-DeclRefExpr 0x5582d9ba1908 <col:109> 'T *' lvalue Var 0x5582d9ba1018 's' 'T *'
|       |         | `-DeclRefExpr 0x5582d9ba19c8 <col:113> 'const V' lvalue ParmVar 0x5582d9b796c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5582d9ba1a08 <col:120> 'bool' true
|       `-DeclRefExpr 0x5582d9ba1b60 <col:128> 'Args::Slot *' lvalue Var 0x5582d9ba0d40 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b79dd8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5582d9b79920 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b79998 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b79d38 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5582d9b79a58 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b79ad8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b79b50 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b79bf8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5582d9ba27a8 <col:75, line:754:5>
|     |-DeclStmt 0x5582d9ba1c58 <line:749:9, col:26>
|     | `-VarDecl 0x5582d9ba1bf0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5582d9ba2770 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5582d9ba2790 <line:750:13, col:58>
|       | `-VarDecl 0x5582d9ba1c80 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5582d9ba1e60 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5582d9ba1e30 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5582d9ba1e18 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5582d9ba1df8 <col:26, col:58> 'String' (CXXTemporary 0x5582d9ba1df8)
|       |           `-CXXMemberCallExpr 0x5582d9ba1d88 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5582d9ba1cf8 <col:26> '<bound member function type>' ->find 0x5582d9b95bd8
|       |             | `-CXXThisExpr 0x5582d9ba1ce8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5582d9ba1dc0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba1d28 <col:31> 'const char *' lvalue ParmVar 0x5582d9b79a58 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5582d9ba1dd8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba1d48 <col:40> 'int' lvalue ParmVar 0x5582d9b79ad8 'flags' 'int'
|       |             `-DeclRefExpr 0x5582d9ba1d68 <col:47> 'Args::Slot *' lvalue Var 0x5582d9ba1bf0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5582d9ba1f18 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5582d9ba1f00 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5582d9ba1ee0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5582d9ba1eb0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |       `-ImplicitCastExpr 0x5582d9ba1e98 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5582d9ba1e78 <col:20> 'String' lvalue Var 0x5582d9ba1c80 'str' 'String'
|       `-CompoundStmt 0x5582d9ba2750 <col:61, line:753:9>
|         |-DeclStmt 0x5582d9ba22f0 <line:751:13, col:63>
|         | `-VarDecl 0x5582d9ba1f68 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5582d9ba22c0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5582d9ba2230 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5582d9ba2278 <col:47> 'T' lvalue ParmVar 0x5582d9b79bf8 'variable' 'T &'
|         |     `-UnaryOperator 0x5582d9ba22a8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5582d9ba2298 <col:58> 'Args *' this
|         `-CallExpr 0x5582d9ba2720 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5582d9ba2318 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|           | `-CXXThisExpr 0x5582d9ba2308 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5582d9ba26e0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5582d9ba2348 <col:23> 'T *' lvalue Var 0x5582d9ba1f68 's' 'T *'
|           | `-CallExpr 0x5582d9ba26a0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5582d9ba2530 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5582d9ba2578 <col:56> 'P' lvalue ParmVar 0x5582d9b79b50 'parser' 'P'
|           |   |-DeclRefExpr 0x5582d9ba2598 <col:64> 'String' lvalue Var 0x5582d9ba1c80 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5582d9ba2648 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5582d9ba25d8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|           |   | `-DeclRefExpr 0x5582d9ba25b8 <col:70> 'T *' lvalue Var 0x5582d9ba1f68 's' 'T *'
|           |   `-UnaryOperator 0x5582d9ba2688 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5582d9ba2678 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5582d9ba2700 <col:81> 'Args::Slot *' lvalue Var 0x5582d9ba1bf0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b7a438 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5582d9b79e50 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5582d9b79ec8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5582d9b79f48 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5582d9b7a398 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5582d9b7a010 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7a090 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7a108 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b7a1a8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5582d9b7a248 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5582d9ba3538 <col:98, line:762:5>
|     |-DeclStmt 0x5582d9ba2840 <line:758:9, col:26>
|     | `-VarDecl 0x5582d9ba27d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba2a60 <line:759:9, col:55>
|     | `-VarDecl 0x5582d9ba2868 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5582d9ba2a48 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5582d9ba2a18 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5582d9ba2a00 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5582d9ba29e0 <col:22, col:54> 'String' (CXXTemporary 0x5582d9ba29e0)
|     |           `-CXXMemberCallExpr 0x5582d9ba2970 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5582d9ba28e0 <col:22> '<bound member function type>' ->find 0x5582d9b95bd8
|     |             | `-CXXThisExpr 0x5582d9ba28d0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5582d9ba29a8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5582d9ba2910 <col:27> 'const char *' lvalue ParmVar 0x5582d9b7a010 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5582d9ba29c0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5582d9ba2930 <col:36> 'int' lvalue ParmVar 0x5582d9b7a090 'flags' 'int'
|     |             `-DeclRefExpr 0x5582d9ba2950 <col:43> 'Args::Slot *' lvalue Var 0x5582d9ba27d8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba2e80 <line:760:9, col:59>
|     | `-VarDecl 0x5582d9ba2ab8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5582d9ba2e50 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5582d9ba2dc0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5582d9ba2e08 <col:43> 'T' lvalue ParmVar 0x5582d9b7a1a8 'variable' 'T &'
|     |     `-UnaryOperator 0x5582d9ba2e38 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5582d9ba2e28 <col:54> 'Args *' this
|     `-CallExpr 0x5582d9ba3508 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5582d9ba2ea8 <col:9> '<bound member function type>' ->postparse 0x5582d9b95de8
|       | `-CXXThisExpr 0x5582d9ba2e98 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5582d9ba34c8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5582d9ba2ed8 <col:19> 'T *' lvalue Var 0x5582d9ba2ab8 's' 'T *'
|       | `-ParenExpr 0x5582d9ba34a8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5582d9ba3478 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5582d9ba3460 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5582d9ba3448 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5582d9ba3428 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5582d9ba33f8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |     |       `-ImplicitCastExpr 0x5582d9ba33e0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5582d9ba2ef8 <col:25> 'String' lvalue Var 0x5582d9ba2868 'str' 'String'
|       |     |-CallExpr 0x5582d9ba3250 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5582d9ba30e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5582d9ba3128 <col:59> 'P' lvalue ParmVar 0x5582d9b7a108 'parser' 'P'
|       |     | |-DeclRefExpr 0x5582d9ba3148 <col:67> 'String' lvalue Var 0x5582d9ba2868 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5582d9ba31f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5582d9ba3188 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|       |     | | `-DeclRefExpr 0x5582d9ba3168 <col:73> 'T *' lvalue Var 0x5582d9ba2ab8 's' 'T *'
|       |     | `-UnaryOperator 0x5582d9ba3238 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5582d9ba3228 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5582d9ba33c0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5582d9ba33a0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5582d9ba3370 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5582d9ba3320 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5582d9ba32b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|       |         | | `-DeclRefExpr 0x5582d9ba3290 <col:87> 'T *' lvalue Var 0x5582d9ba2ab8 's' 'T *'
|       |         | `-DeclRefExpr 0x5582d9ba3350 <col:91> 'const V' lvalue ParmVar 0x5582d9b7a248 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5582d9ba3390 <col:98> 'bool' true
|       `-DeclRefExpr 0x5582d9ba34e8 <col:106> 'Args::Slot *' lvalue Var 0x5582d9ba27d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b7aaa8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5582d9b7a4b8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b7a538 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5582d9b7a5b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5582d9b7aa08 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5582d9b7a680 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7a700 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7a778 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b7a818 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5582d9b7a8b8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5582d9ba4518 <col:60, line:773:5>
|     |-DeclStmt 0x5582d9ba35e0 <line:767:9, col:26>
|     | `-VarDecl 0x5582d9ba3578 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5582d9ba44e0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5582d9ba4500 <line:768:13, col:58>
|       | `-VarDecl 0x5582d9ba3608 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5582d9ba37e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5582d9ba37b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5582d9ba37a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5582d9ba3780 <col:26, col:58> 'String' (CXXTemporary 0x5582d9ba3780)
|       |           `-CXXMemberCallExpr 0x5582d9ba3710 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5582d9ba3680 <col:26> '<bound member function type>' ->find 0x5582d9b95bd8
|       |             | `-CXXThisExpr 0x5582d9ba3670 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5582d9ba3748 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba36b0 <col:31> 'const char *' lvalue ParmVar 0x5582d9b7a680 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5582d9ba3760 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba36d0 <col:40> 'int' lvalue ParmVar 0x5582d9b7a700 'flags' 'int'
|       |             `-DeclRefExpr 0x5582d9ba36f0 <col:47> 'Args::Slot *' lvalue Var 0x5582d9ba3578 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5582d9ba38a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5582d9ba3888 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5582d9ba3868 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5582d9ba3838 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |       `-ImplicitCastExpr 0x5582d9ba3820 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5582d9ba3800 <col:20> 'String' lvalue Var 0x5582d9ba3608 'str' 'String'
|       `-CompoundStmt 0x5582d9ba44b8 <col:61, line:772:9>
|         |-DeclStmt 0x5582d9ba3be0 <line:769:13, col:66>
|         | `-VarDecl 0x5582d9ba38f8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5582d9ba3bb0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5582d9ba3b20 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5582d9ba3b68 <col:49> 'T1' lvalue ParmVar 0x5582d9b7a818 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5582d9ba3b98 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5582d9ba3b88 <col:61> 'Args *' this
|         |-DeclStmt 0x5582d9ba3f50 <line:770:13, col:66>
|         | `-VarDecl 0x5582d9ba3c68 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5582d9ba3f20 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5582d9ba3e90 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5582d9ba3ed8 <col:49> 'T2' lvalue ParmVar 0x5582d9b7a8b8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5582d9ba3f08 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5582d9ba3ef8 <col:61> 'Args *' this
|         `-CallExpr 0x5582d9ba4488 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5582d9ba3f78 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|           | `-CXXThisExpr 0x5582d9ba3f68 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5582d9ba4448 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5582d9ba3fe8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5582d9ba3fa8 <col:23> 'T1 *' lvalue Var 0x5582d9ba38f8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5582d9ba3fc8 <col:29> 'T2 *' lvalue Var 0x5582d9ba3c68 's2' 'T2 *'
|           | `-CallExpr 0x5582d9ba4400 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5582d9ba41d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5582d9ba4218 <col:63> 'P' lvalue ParmVar 0x5582d9b7a778 'parser' 'P'
|           |   |-DeclRefExpr 0x5582d9ba4238 <col:71> 'String' lvalue Var 0x5582d9ba3608 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5582d9ba42e8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5582d9ba4278 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|           |   | `-DeclRefExpr 0x5582d9ba4258 <col:77> 'T1 *' lvalue Var 0x5582d9ba38f8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5582d9ba43a8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5582d9ba4338 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|           |   | `-DeclRefExpr 0x5582d9ba4318 <col:82> 'T2 *' lvalue Var 0x5582d9ba3c68 's2' 'T2 *'
|           |   `-UnaryOperator 0x5582d9ba43e8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5582d9ba43d8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5582d9ba4468 <col:94> 'Args::Slot *' lvalue Var 0x5582d9ba3578 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b7ae98 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5582d9b7ab28 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b7adf8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5582d9b7abe0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7ac60 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7acd8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5582d9ba4a30 <col:67, line:780:5>
|     |-DeclStmt 0x5582d9ba45b0 <line:777:9, col:26>
|     | `-VarDecl 0x5582d9ba4548 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5582d9ba49f8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5582d9ba4a18 <line:778:13, col:58>
|       | `-VarDecl 0x5582d9ba45d8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5582d9ba47b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5582d9ba4788 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5582d9ba4770 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5582d9ba4750 <col:26, col:58> 'String' (CXXTemporary 0x5582d9ba4750)
|       |           `-CXXMemberCallExpr 0x5582d9ba46e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5582d9ba4650 <col:26> '<bound member function type>' ->find 0x5582d9b95bd8
|       |             | `-CXXThisExpr 0x5582d9ba4640 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5582d9ba4718 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba4680 <col:31> 'const char *' lvalue ParmVar 0x5582d9b7abe0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5582d9ba4730 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5582d9ba46a0 <col:40> 'int' lvalue ParmVar 0x5582d9b7ac60 'flags' 'int'
|       |             `-DeclRefExpr 0x5582d9ba46c0 <col:47> 'Args::Slot *' lvalue Var 0x5582d9ba4548 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5582d9ba4870 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5582d9ba4858 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5582d9ba4838 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5582d9ba4808 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|       |       `-ImplicitCastExpr 0x5582d9ba47f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5582d9ba47d0 <col:20> 'String' lvalue Var 0x5582d9ba45d8 'str' 'String'
|       `-CallExpr 0x5582d9ba49c8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5582d9ba4898 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|         | `-CXXThisExpr 0x5582d9ba4888 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5582d9ba4978 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5582d9ba48e8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5582d9ba48c8 <col:23> 'P' lvalue ParmVar 0x5582d9b7acd8 'parser' 'P'
|         | |-DeclRefExpr 0x5582d9ba4930 <col:36> 'String' lvalue Var 0x5582d9ba45d8 'str' 'String'
|         | `-UnaryOperator 0x5582d9ba4960 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5582d9ba4950 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5582d9ba49a8 <col:49> 'Args::Slot *' lvalue Var 0x5582d9ba4548 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5582d9b7b238 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5582d9b7af08 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5582d9b7b198 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5582d9b7afc0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7b040 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7b0b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5582d9ba53a0 <col:71, line:792:5>
|     |-DeclStmt 0x5582d9ba4ac8 <line:784:9, col:26>
|     | `-VarDecl 0x5582d9ba4a60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba4b98 <line:785:9, col:29>
|     | `-VarDecl 0x5582d9ba4af8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5582d9ba4b80 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5582d9ba4b60 <col:28> 'int' 1
|     |-WhileStmt 0x5582d9ba5250 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5582d9ba5270 <line:786:16, col:61>
|     | | `-VarDecl 0x5582d9ba4bc0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5582d9ba4da0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5582d9ba4d70 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5582d9ba4d58 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5582d9ba4d38 <col:29, col:61> 'String' (CXXTemporary 0x5582d9ba4d38)
|     | |           `-CXXMemberCallExpr 0x5582d9ba4cc8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5582d9ba4c38 <col:29> '<bound member function type>' ->find 0x5582d9b95bd8
|     | |             | `-CXXThisExpr 0x5582d9ba4c28 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5582d9ba4d00 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba4c68 <col:34> 'const char *' lvalue ParmVar 0x5582d9b7afc0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5582d9ba4d18 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba4c88 <col:43> 'int' lvalue ParmVar 0x5582d9b7b040 'flags' 'int'
|     | |             `-DeclRefExpr 0x5582d9ba4ca8 <col:50> 'Args::Slot *' lvalue Var 0x5582d9ba4a60 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5582d9ba4e58 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5582d9ba4e40 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5582d9ba4e20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5582d9ba4df0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|     | |       `-ImplicitCastExpr 0x5582d9ba4dd8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5582d9ba4db8 <col:23> 'String' lvalue Var 0x5582d9ba4bc0 'str' 'String'
|     | `-CompoundStmt 0x5582d9ba5228 <col:64, line:790:9>
|     |   |-CallExpr 0x5582d9ba4fb0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5582d9ba4e80 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|     |   | | `-CXXThisExpr 0x5582d9ba4e70 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5582d9ba4f60 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5582d9ba4ed0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5582d9ba4eb0 <col:23> 'P' lvalue ParmVar 0x5582d9b7b0b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5582d9ba4f18 <col:36> 'String' lvalue Var 0x5582d9ba4bc0 'str' 'String'
|     |   | | `-UnaryOperator 0x5582d9ba4f48 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5582d9ba4f38 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5582d9ba4f90 <col:49> 'Args::Slot *' lvalue Var 0x5582d9ba4a60 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5582d9ba5148 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5582d9ba4fe0 <col:13> 'int' lvalue Var 0x5582d9ba4af8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5582d9ba5130 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5582d9ba5110 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5582d9ba5078 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5582d9ba5058 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5582d9ba5040 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5582d9ba5000 <col:28> 'int' lvalue Var 0x5582d9ba4af8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5582d9ba5020 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5582d9ba50f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5582d9ba50c8 <col:49> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|     |   |         `-ImplicitCastExpr 0x5582d9ba50a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5582d9ba5098 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5582d9ba51f8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5582d9ba5168 <col:13> 'int' lvalue ParmVar 0x5582d9b7b040 'flags' 'int'
|     |     `-UnaryOperator 0x5582d9ba51e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5582d9ba51c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5582d9ba51a8 <col:23> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5582d9ba5380 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5582d9ba52b8 <col:9> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|       | `-ImplicitCastExpr 0x5582d9ba5298 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5582d9ba5288 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5582d9ba5360 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5582d9ba5340 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5582d9ba5328 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5582d9ba52e8 <col:25> 'int' lvalue Var 0x5582d9ba4af8 'read_status' 'int'
|           `-IntegerLiteral 0x5582d9ba5308 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5582d9b7b718 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5582d9b7b2a8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b7b328 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b7b678 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5582d9b7b3e8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7b468 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7b4e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b7b588 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5582d9ba6330 <col:84, line:805:5>
|     |-DeclStmt 0x5582d9ba5448 <line:796:9, col:26>
|     | `-VarDecl 0x5582d9ba53e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba5518 <line:797:9, col:29>
|     | `-VarDecl 0x5582d9ba5478 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5582d9ba5500 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5582d9ba54e0 <col:28> 'int' 1
|     |-DeclStmt 0x5582d9ba5850 <line:798:9, col:71>
|     | `-VarDecl 0x5582d9ba5568 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5582d9ba5820 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5582d9ba5790 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5582d9ba57d8 <col:55> 'T' lvalue ParmVar 0x5582d9b7b588 'variable' 'T &'
|     |     `-UnaryOperator 0x5582d9ba5808 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5582d9ba57f8 <col:66> 'Args *' this
|     |-WhileStmt 0x5582d9ba61e0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5582d9ba6200 <line:799:16, col:61>
|     | | `-VarDecl 0x5582d9ba5878 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5582d9ba5a58 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5582d9ba5a28 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5582d9ba5a10 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5582d9ba59f0 <col:29, col:61> 'String' (CXXTemporary 0x5582d9ba59f0)
|     | |           `-CXXMemberCallExpr 0x5582d9ba5980 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5582d9ba58f0 <col:29> '<bound member function type>' ->find 0x5582d9b95bd8
|     | |             | `-CXXThisExpr 0x5582d9ba58e0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5582d9ba59b8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba5920 <col:34> 'const char *' lvalue ParmVar 0x5582d9b7b3e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5582d9ba59d0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba5940 <col:43> 'int' lvalue ParmVar 0x5582d9b7b468 'flags' 'int'
|     | |             `-DeclRefExpr 0x5582d9ba5960 <col:50> 'Args::Slot *' lvalue Var 0x5582d9ba53e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5582d9ba5b10 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5582d9ba5af8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5582d9ba5ad8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5582d9ba5aa8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|     | |       `-ImplicitCastExpr 0x5582d9ba5a90 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5582d9ba5a70 <col:23> 'String' lvalue Var 0x5582d9ba5878 'str' 'String'
|     | `-CompoundStmt 0x5582d9ba61b8 <col:64, line:803:9>
|     |   |-CallExpr 0x5582d9ba5f40 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5582d9ba5b38 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|     |   | | `-CXXThisExpr 0x5582d9ba5b28 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5582d9ba5f00 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5582d9ba5b68 <col:23> 'T *' lvalue Var 0x5582d9ba5568 's' 'T *'
|     |   | | `-CallExpr 0x5582d9ba5ec0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5582d9ba5d50 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5582d9ba5d98 <col:56> 'P' lvalue ParmVar 0x5582d9b7b4e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5582d9ba5db8 <col:64> 'String' lvalue Var 0x5582d9ba5878 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5582d9ba5e68 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5582d9ba5df8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|     |   | |   | `-DeclRefExpr 0x5582d9ba5dd8 <col:70> 'T *' lvalue Var 0x5582d9ba5568 's' 'T *'
|     |   | |   `-UnaryOperator 0x5582d9ba5ea8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5582d9ba5e98 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5582d9ba5f20 <col:81> 'Args::Slot *' lvalue Var 0x5582d9ba53e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5582d9ba60d8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5582d9ba5f70 <col:13> 'int' lvalue Var 0x5582d9ba5478 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5582d9ba60c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5582d9ba60a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5582d9ba6008 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5582d9ba5fe8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5582d9ba5fd0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5582d9ba5f90 <col:28> 'int' lvalue Var 0x5582d9ba5478 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5582d9ba5fb0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5582d9ba6088 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5582d9ba6058 <col:49> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|     |   |         `-ImplicitCastExpr 0x5582d9ba6038 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5582d9ba6028 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5582d9ba6188 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5582d9ba60f8 <col:13> 'int' lvalue ParmVar 0x5582d9b7b468 'flags' 'int'
|     |     `-UnaryOperator 0x5582d9ba6170 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5582d9ba6158 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5582d9ba6138 <col:23> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5582d9ba6310 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5582d9ba6248 <col:9> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|       | `-ImplicitCastExpr 0x5582d9ba6228 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5582d9ba6218 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5582d9ba62f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5582d9ba62d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5582d9ba62b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5582d9ba6278 <col:25> 'int' lvalue Var 0x5582d9ba5478 'read_status' 'int'
|           `-IntegerLiteral 0x5582d9ba6298 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5582d9b7bcf8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5582d9b7b790 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5582d9b7b808 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5582d9b7bc58 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5582d9b7b8c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5582d9b7b948 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5582d9b7b9c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5582d9b7bb10 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5582d9ba7138 <col:87, line:821:5>
|     |-DeclStmt 0x5582d9ba63e0 <line:809:9, col:26>
|     | `-VarDecl 0x5582d9ba6378 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5582d9ba64b0 <line:810:9, col:29>
|     | `-VarDecl 0x5582d9ba6410 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5582d9ba6498 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5582d9ba6478 <col:28> 'int' 1
|     |-DeclStmt 0x5582d9ba66f8 <line:811:9, col:38>
|     | `-VarDecl 0x5582d9ba65e0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5582d9ba66d0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5582d9ba6658 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5582d9ba66b0 <col:29> 'Vector<T>' lvalue ParmVar 0x5582d9b7bb10 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5582d9ba6fe8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5582d9ba7008 <line:812:16, col:61>
|     | | `-VarDecl 0x5582d9ba6720 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5582d9ba6900 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5582d9ba68d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5582d9ba68b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5582d9ba6898 <col:29, col:61> 'String' (CXXTemporary 0x5582d9ba6898)
|     | |           `-CXXMemberCallExpr 0x5582d9ba6828 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5582d9ba6798 <col:29> '<bound member function type>' ->find 0x5582d9b95bd8
|     | |             | `-CXXThisExpr 0x5582d9ba6788 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5582d9ba6860 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba67c8 <col:34> 'const char *' lvalue ParmVar 0x5582d9b7b8c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5582d9ba6878 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5582d9ba67e8 <col:43> 'int' lvalue ParmVar 0x5582d9b7b948 'flags' 'int'
|     | |             `-DeclRefExpr 0x5582d9ba6808 <col:50> 'Args::Slot *' lvalue Var 0x5582d9ba6378 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5582d9ba69b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5582d9ba69a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5582d9ba6980 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5582d9ba6950 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5582d981f028
|     | |       `-ImplicitCastExpr 0x5582d9ba6938 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5582d9ba6918 <col:23> 'String' lvalue Var 0x5582d9ba6720 'str' 'String'
|     | `-CompoundStmt 0x5582d9ba6fb0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5582d9ba6a78 <line:813:13, col:23>
|     |   | `-VarDecl 0x5582d9ba69e0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5582d9ba6a58 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5582d9ba6bf8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5582d9ba6aa0 <col:13> '<bound member function type>' ->postparse 0x5582d9b95de8
|     |   | | `-CXXThisExpr 0x5582d9ba6a90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5582d9ba6ba0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5582d9ba6af0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5582d9ba6ad0 <col:23> 'P' lvalue ParmVar 0x5582d9b7b9c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5582d9ba6b38 <col:36> 'String' lvalue Var 0x5582d9ba6720 'str' 'String'
|     |   | | |-DeclRefExpr 0x5582d9ba6b58 <col:41> 'T' lvalue Var 0x5582d9ba69e0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5582d9ba6b88 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5582d9ba6b78 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5582d9ba6bd8 <col:53> 'Args::Slot *' lvalue Var 0x5582d9ba6378 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5582d9ba6d50 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5582d9ba6c88 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5582d9ba6c58 <col:17> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|     |   | |   `-ImplicitCastExpr 0x5582d9ba6c38 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5582d9ba6c28 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5582d9ba6d28 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5582d9ba6cc0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5582d9ba6ca0 <col:17> 'Vector<T> *' lvalue Var 0x5582d9ba65e0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5582d9ba6d08 <col:30> 'T' lvalue Var 0x5582d9ba69e0 'sx' 'T'
|     |   |-BinaryOperator 0x5582d9ba6ed0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5582d9ba6d68 <col:13> 'int' lvalue Var 0x5582d9ba6410 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5582d9ba6eb8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5582d9ba6e98 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5582d9ba6e00 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5582d9ba6de0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5582d9ba6dc8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5582d9ba6d88 <col:28> 'int' lvalue Var 0x5582d9ba6410 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5582d9ba6da8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5582d9ba6e80 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5582d9ba6e50 <col:49> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|     |   |         `-ImplicitCastExpr 0x5582d9ba6e30 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5582d9ba6e20 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5582d9ba6f80 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5582d9ba6ef0 <col:13> 'int' lvalue ParmVar 0x5582d9b7b948 'flags' 'int'
|     |     `-UnaryOperator 0x5582d9ba6f68 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5582d9ba6f50 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5582d9ba6f30 <col:23> 'const int' lvalue Var 0x5582d9b63718 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5582d9ba7118 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5582d9ba7050 <col:9> 'bool' lvalue ->_read_status 0x5582d9b5a6e0
|       | `-ImplicitCastExpr 0x5582d9ba7030 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5582d9ba7020 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5582d9ba70f8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5582d9ba70d8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5582d9ba70c0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5582d9ba7080 <col:25> 'int' lvalue Var 0x5582d9ba6410 'read_status' 'int'
|           `-IntegerLiteral 0x5582d9ba70a0 <col:40> 'int' 1
|-AccessSpecDecl 0x5582d9b7bd70 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d9b7bd98 prev 0x5582d9b61a18 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5582d9b7be90 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5582d9b7bf80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5582d9ba7170 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5582d9b7c070 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5582d9ba7180 <col:25, line:830:9>
| |-CXXMethodDecl 0x5582d9b7c170 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5582d9b7c220 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5582d9b7c2c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5582d9b7c2c8
| | `-ParmVarDecl 0x5582d9b7c3d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5582d9b7cb98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5582d9b7cb98
|   `-ParmVarDecl 0x5582d9b7cca8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5582d9b7c448 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5582d9b7c5a8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5582d9b7c7a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5582d9b7c650 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5582d9b7c6c8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5582d9ba7360 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5582d9b7ca58 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5582d9ba71d0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5582d9ba7190 <col:20> 'void *' lvalue ParmVar 0x5582d9b7c650 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5582d9b7cac0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5582d9ba7258 <col:32, col:45> 'char *' array Function 0x5582d9642ca8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5582d9ba7240 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5582d9ba7210 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5582d9b7c6c8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5582d9b7cb20 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5582d9ba7320 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5582d9ba72e0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5582d9b7c6c8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5582d9ba73e0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5582d9b7c8a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5582d9b7c070 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5582d9ba7468 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5582d9ba7448 <line:840:13, col:22> 'void' array Function 0x5582d9643008 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5582d9ba7430 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5582d9ba7400 <col:22> 'char *' lvalue ->_slot 0x5582d9b7cac0
| |         `-CXXThisExpr 0x5582d9ba73f0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5582d9b7c9a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5582d9b7c170 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5582d9ba7658 <col:22, line:844:9>
| |   `-CallExpr 0x5582d9ba75c0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5582d9ba75a8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5582d9ba7588 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5582d974ea88 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5582d9ba75f8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5582d9ba74d8 <col:20> 'void *' lvalue ->_ptr 0x5582d9b7ca58
| |     |   `-CXXThisExpr 0x5582d9ba74c8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5582d9ba7628 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5582d9ba7610 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5582d9ba7518 <col:26> 'char *' lvalue ->_slot 0x5582d9b7cac0
| |     |     `-CXXThisExpr 0x5582d9ba7508 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5582d9ba7640 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5582d9ba7558 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5582d9b7cb20
| |         `-CXXThisExpr 0x5582d9ba7548 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5582d9b7ca58 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5582d9b7cac0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5582d9b7cb20 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5582d9b7cd18 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5582d9b7cd18
| | `-ParmVarDecl 0x5582d9b7ce28 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5582d9b7cec8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5582d9b7cec8
|   `-ParmVarDecl 0x5582d9b7cfd8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5582d9b7d178 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5582d9b7d048 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5582d9b7d0e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5582d9b7d410 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5582d9b7d608 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5582d9b7d4d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5582d9b7d788 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5582d9ba9920 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5582d9ba9900 <col:20> 'T *' lvalue ParmVar 0x5582d9b7d4d8 'ptr' 'T *'
|   | `-CompoundStmt 0x5582d9ba9970 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5582d9b7d6d8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5582d9b7c170 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5582d9ba9b20 <col:22, line:857:9>
|   |   `-CallExpr 0x5582d9ba9af0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5582d9ba9980 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5582d98071b8 0x5582d97b14e8
|   |     |-CXXOperatorCallExpr 0x5582d9ba9a80 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5582d9ba9a10 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5582d9a14168 0x5582d9a13d88 0x5582d9a139b8 0x5582d9a135d8 0x5582d9a131f8 0x5582d9a12e28
|   |     | `-MemberExpr 0x5582d9ba99e0 <col:29> 'T *' lvalue ->_ptr 0x5582d9b7d788
|   |     |   `-CXXThisExpr 0x5582d9ba99d0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5582d9ba9ac0 <col:35> 'T' lvalue ->_slot 0x5582d9b7d7e8
|   |       `-CXXThisExpr 0x5582d9ba9ab0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5582d9b7d788 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5582d9b7d7e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5582d9b7d850 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5582d9b7d950 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5582d9b7d9a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9b7d930 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5582d9b7d910 <col:31> 'int' 48
|-FieldDecl 0x5582d9b7d9c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5582d9b7da28 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5582d9b7da88 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5582d9b7dbc0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5582d9b95480 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5582d9b954e0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5582d9b95590 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5582d9b957b8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5582d9b956c0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5582d9b95908 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5582d9b95878 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5582d9b95bd8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5582d9b959c8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5582d9b95a48 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5582d9b95af0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5582d9b95de8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5582d9b95ca0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5582d9b95d18 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5582d9b95eb8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5582d9b96008 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5582d9b95f70 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5582d9b96398 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5582d9b960c8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5582d9b96148 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5582d9b961f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5582d9b962a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5582d9b965c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5582d9b96470 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5582d9b964e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5582d9b968d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5582d9b96670 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5582d9b96838 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5582d9b96748 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct termios
         0 |   tcflag_t c_iflag
         4 |   tcflag_t c_oflag
         8 |   tcflag_t c_cflag
        12 |   tcflag_t c_lflag
        16 |   cc_t c_line
        17 |   cc_t [32] c_cc
        52 |   speed_t c_ispeed
        56 |   speed_t c_ospeed
           | [sizeof=60, dsize=60, align=4,
           |  nvsize=60, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9bca218 </usr/include/bits/termios-struct.h:24:1, line:36:3> line:24:8 struct termios definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5582d9bca338 <col:1, col:8> col:8 implicit struct termios
|-FieldDecl 0x5582d9bca400 <line:26:5, col:14> col:14 referenced c_iflag 'tcflag_t':'unsigned int'
|-FieldDecl 0x5582d9bca460 <line:27:5, col:14> col:14 referenced c_oflag 'tcflag_t':'unsigned int'
|-FieldDecl 0x5582d9bca4c0 <line:28:5, col:14> col:14 referenced c_cflag 'tcflag_t':'unsigned int'
|-FieldDecl 0x5582d9bca520 <line:29:5, col:14> col:14 referenced c_lflag 'tcflag_t':'unsigned int'
|-FieldDecl 0x5582d9bca5a0 <line:30:5, col:10> col:10 c_line 'cc_t':'unsigned char'
|-FieldDecl 0x5582d9bca6c8 <line:31:5, col:17> col:10 c_cc 'cc_t [32]'
|-FieldDecl 0x5582d9bca750 <line:32:5, col:13> col:13 c_ispeed 'speed_t':'unsigned int'
|-FieldDecl 0x5582d9bca7b0 <line:33:5, col:13> col:13 c_ospeed 'speed_t':'unsigned int'
|-CXXConstructorDecl 0x5582d9bfb170 <line:24:8> col:8 implicit used termios 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d9bfb5a8 <col:8>
|-CXXConstructorDecl 0x5582d9bfb278 <col:8> col:8 implicit constexpr termios 'void (const termios &)' inline default trivial noexcept-unevaluated 0x5582d9bfb278
| `-ParmVarDecl 0x5582d9bfb388 <col:8> col:8 'const termios &'
`-CXXConstructorDecl 0x5582d9bfb428 <col:8> col:8 implicit constexpr termios 'void (termios &&)' inline default trivial noexcept-unevaluated 0x5582d9bfb428
  `-ParmVarDecl 0x5582d9bfb538 <col:8> col:8 'termios &&'

Layout: <CGRecordLayout
  LLVMType:%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
  NonVirtualBaseLLVMType:%struct.termios = type { i32, i32, i32, i32, i8, [32 x i8], i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a29ac8 prev 0x5582d9a1ecd0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9a29bc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5582d9a29cb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5582d9a29dd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5582d9a29f58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5582d9a2a0d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5582d9a2a258 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5582d9a3b088 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d9a3b8f8 <col:11>
|-CXXDestructorDecl 0x5582d9a3b160 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5582d9a3b298 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5582d9a3b298
| `-ParmVarDecl 0x5582d9a3b3a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5582d9a3b448 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3b448
| `-ParmVarDecl 0x5582d9a3b558 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5582d9a3e318 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d9a3e428 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5582d9a3e6a8 <col:11>
|   `-ReturnStmt 0x5582d9a3e698 <col:11>
|     `-UnaryOperator 0x5582d9a3e680 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5582d9a3e670 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5582d9a3e498 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3e498
  `-ParmVarDecl 0x5582d9a3e5a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a2a2c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9a2a3d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5582d9a2a478 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5582d9a2a4e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5582d9a2a548 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5582d9a2a5b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5582d9a2a610 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5582d9a2a6d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5582d9a2a730 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5582d9a2a790 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5582d9a3af98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5582d9a2a478 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5582d9a3b908 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5582d9a3b960 <col:12>
|-CXXConstructorDecl 0x5582d9a3b5c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5582d9a3b5c8
| `-ParmVarDecl 0x5582d9a3b6d8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5582d9a3b778 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3b778
| `-ParmVarDecl 0x5582d9a3b888 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5582d9a3da00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a183e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d9a184f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5582d9a18588 <col:16, col:22> col:16 public
|-EnumDecl 0x5582d9a185b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5582d9a186b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5582d9a18790 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a18690 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5582d9a18670 <col:21> 'int' 28
| `-EnumConstantDecl 0x5582d9a18740 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5582d9a187a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a18720 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5582d9a18700 <col:22> 'int' 64
|-CXXMethodDecl 0x5582d9a18ae8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5582d9a187d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9a18850 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5582d9a188c8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9a18940 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a18ba8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a18da8 <line:54:5, col:109> col:35 used make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5582d9a18c20 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5582d9a18c98 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a18e58 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a18fb8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5582d9a18ec8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a19060 <col:72> warn_unused_result ""
|-TypedefDecl 0x5582d9a193c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5582d9a19350 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5582d9a192f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5582d9a192b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5582d94ec4d0 'void'
|       |-PointerType 0x5582d9798780 'unsigned char *'
|       | `-BuiltinType 0x5582d94ec5d0 'unsigned char'
|       |-TypedefType 0x5582d9594d50 'size_t' sugar
|       | |-Typedef 0x5582d955cbb0 'size_t'
|       | `-BuiltinType 0x5582d94ec630 'unsigned long'
|       `-PointerType 0x5582d94eccd0 'void *'
|         `-BuiltinType 0x5582d94ec4d0 'void'
|-CXXMethodDecl 0x5582d9a19838 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5582d9a19430 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5582d9a194a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9a19540 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5582d9a195c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5582d9a33f30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5582d9a33f18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5582d9a33ee0 <col:58> 'int' 0
| |-ParmVarDecl 0x5582d9a19640 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5582d9a33f58 <col:76> 'int' 0
| |-ParmVarDecl 0x5582d9a196c0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5582d9a33f78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5582d9a19908 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a19988 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5582d9a19a48 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5582d9a19ae8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a19b40 <col:30>
|-CXXMethodDecl 0x5582d9a19bb8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5582d9a19c58 <col:20>
| `-OptimizeNoneAttr 0x5582d9a19cb0 <col:30>
|-CXXMethodDecl 0x5582d9a19d28 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5582d9a19dc8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a19e78 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5582d9a19f18 <col:20>
| |-OptimizeNoneAttr 0x5582d9a19f70 <col:30>
| `-WarnUnusedResultAttr 0x5582d9a19f98 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a19ff0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5582d9a1a090 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1a0e8 <col:30>
|-CXXMethodDecl 0x5582d9a1a138 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5582d9a1a1d8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1a230 <col:30>
|-CXXMethodDecl 0x5582d9a1a278 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5582d9a1a318 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1a370 <col:30>
|-CXXMethodDecl 0x5582d9a1a3b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1a478 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1a540 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a1a608 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a1a6c8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1a7e8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5582d9a34040 <col:54, line:99:5>
|   `-ReturnStmt 0x5582d9a34030 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5582d9a34018 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5582d9a33fe8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5582d9a2aac8
|         `-CXXThisExpr 0x5582d9a33fd8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5582d9a1a988 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5582d9a1a898 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5582d9a340f0 <col:67, line:103:5>
|   `-BinaryOperator 0x5582d9a340d0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5582d9a34068 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5582d9a2aac8
|     | `-CXXThisExpr 0x5582d9a34058 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5582d9a340b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a34098 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5582d9a1a898 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5582d9a1aa80 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5582d9a34170 <col:33, line:107:5>
|   `-ReturnStmt 0x5582d9a34160 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5582d9a34148 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5582d9a34118 <col:16> 'void *' lvalue ->_destructor_argument 0x5582d9a2ab30
|         `-CXXThisExpr 0x5582d9a34108 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5582d9a1ab40 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5582d9a347a0 <col:25, line:113:5>
|   |-ParenExpr 0x5582d9a344e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5582d9a344b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a34228 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5582d9a34200 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5582d9a341c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5582d9a34198 <col:24> '<bound member function type>' ->shared 0x5582d9a19bb8
|   |   |       `-ImplicitCastExpr 0x5582d9a341e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5582d9a34188 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5582d9a34288 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a34268 <col:42> 'int' 0
|   |   `-CallExpr 0x5582d9a34418 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a34400 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a343e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a34458 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a342f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5582d9a34470 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a34320 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a34488 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a34358 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5582d9a344a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a343c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a343b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a34378 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5582d9a346e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5582d9a34518 <col:2> 'unsigned char *' lvalue ->_head 0x5582d9a2a8d0
|   | | `-CXXThisExpr 0x5582d9a34508 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a346d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5582d9a346b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5582d9a34558 <col:10> 'unsigned char *' lvalue ->_data 0x5582d9a2a938
|   |     | `-CXXThisExpr 0x5582d9a34548 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5582d9a34698 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5582d9a34678 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5582d9a34598 <col:18> 'unsigned char *' lvalue ->_tail 0x5582d9a2a9a0
|   |         | `-CXXThisExpr 0x5582d9a34588 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5582d9a34660 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5582d9a34640 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5582d9a345d8 <col:26> 'unsigned char *' lvalue ->_end 0x5582d9a2aa08
|   |             | `-CXXThisExpr 0x5582d9a345c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5582d9a34628 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5582d9a34608 <col:33> 'int' 0
|   `-BinaryOperator 0x5582d9a34780 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5582d9a34718 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5582d9a2aac8
|     | `-CXXThisExpr 0x5582d9a34708 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5582d9a34768 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5582d9a34748 <col:16> 'int' 0
|-CXXMethodDecl 0x5582d9a1ac80 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5582d9a1abf0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1ad28 <col:20>
| |-OptimizeNoneAttr 0x5582d9a1ad80 <col:30>
| `-WarnUnusedResultAttr 0x5582d9a1ada8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1ae78 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5582d9a1ade8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1af20 <col:20>
| |-OptimizeNoneAttr 0x5582d9a1af78 <col:30>
| `-WarnUnusedResultAttr 0x5582d9a1afa0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1b0d8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5582d9a1afe0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a1b180 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1b280 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5582d9a1b1f0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1b328 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1b380 <col:30>
|-CXXMethodDecl 0x5582d9a1b448 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5582d9a1b3b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a1b4f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1b5f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5582d9a1b560 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5582d9a1b698 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1b798 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5582d9a1b708 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1b840 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1b898 <col:30>
|-CXXMethodDecl 0x5582d9a1ba28 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5582d9a1b8d8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5582d9a1b950 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5582d9a33f98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5582d9a1bad8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5582d9a1bcd8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a1bb50 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5582d9a1bbc8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a1bee8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a1bd98 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5582d9a1be10 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a1c0f8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5582d9a1bfa8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5582d9a1c028 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5582d9a33fa8 <col:39> 'int' 0
|-CXXMethodDecl 0x5582d9a1c1c8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5582d9a1c290 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a1c358 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5582d9a1c418 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1c4e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5582d9a1c628 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5582d9a1c598 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5582d9a1c7f8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a1c6e8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5582d9a1c760 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a1c8c8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5582d9a1c988 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5582d9a1ca28 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1ca80 <col:30>
|-CXXMethodDecl 0x5582d9a1cad0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5582d9a1cb70 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1cbc8 <col:30>
|-CXXMethodDecl 0x5582d9a1cc18 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5582d9a1ccd8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1cda0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5582d9a1ce40 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1ce98 <col:30>
|-CXXMethodDecl 0x5582d9a1cfe8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a1ced8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5582d9a1cf50 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a1d138 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5582d9a1d0a8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a1d210 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5582d9a1d2d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5582d9a1d370 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1d3c8 <col:30>
|-CXXMethodDecl 0x5582d9a1d418 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5582d9a1d4b8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1d510 <col:30>
|-CXXMethodDecl 0x5582d9a1d560 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5582d9a1d628 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5582d9a1d6c8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1d720 <col:30>
|-CXXMethodDecl 0x5582d9a1d768 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5582d9a1d888 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5582d9a1d9f8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5582d9a1d938 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5582d9a1dae8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5582d9a1db88 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1dbe0 <col:30>
|-CXXMethodDecl 0x5582d9a1dc30 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5582d9a1dcf0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5582d9a1df28 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5582d9a1dda0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5582d9a1de18 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1dfd8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e030 <col:30>
|-CXXMethodDecl 0x5582d9a1e0d8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5582d9a1e178 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e1d0 <col:30>
|-CXXMethodDecl 0x5582d9a1e220 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5582d9a1e2c0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e318 <col:30>
|-CXXMethodDecl 0x5582d9a1e360 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5582d9a1e400 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e458 <col:30>
|-CXXMethodDecl 0x5582d9a1e558 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5582d9a1e490 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5582d9a1e600 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e658 <col:30>
|-CXXMethodDecl 0x5582d9a1e818 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5582d9a1e690 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5582d9a1e708 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a1e8c8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1e920 <col:30>
|-CXXMethodDecl 0x5582d9a1e9c8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5582d9a1eae8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5582d9a1ec08 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5582d9a1eca8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d9a1ecd0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5582d9a1edf8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5582d9a1ee98 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1eef0 <col:30>
|-CXXMethodDecl 0x5582d9a1ef98 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5582d9a1f038 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1f090 <col:30>
|-AccessSpecDecl 0x5582d9a1f0b8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5582d9a1f0e0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5582d9a1f1e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5582d9a1f230 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a1f1c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5582d9a1f1a0 <col:14> 'int' 48
|-CXXMethodDecl 0x5582d9a1f298 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5582d9a1f338 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1f390 <col:30>
|-CXXMethodDecl 0x5582d9a1f408 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5582d9a1f4a8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a1f500 <col:30>
|-CXXMethodDecl 0x5582d9a1f5c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5582d9a1f538 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5582d9a1f768 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5582d9a1f908 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5582d9a1f818 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5582d9a1f9b0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5582d9a1fab0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fe60 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fa90 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9a1fa70 <col:9> 'int' 0
| |-EnumConstantDecl 0x5582d9a1fb40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fe78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fb20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5582d9a1fb00 <col:14> 'int' 1
| |-EnumConstantDecl 0x5582d9a1fbd0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fe90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fbb0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5582d9a1fb90 <col:14> 'int' 2
| |-EnumConstantDecl 0x5582d9a1fc60 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fea8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fc40 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5582d9a1fc20 <col:14> 'int' 3
| |-EnumConstantDecl 0x5582d9a1fcf0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fec0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fcd0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5582d9a1fcb0 <col:13> 'int' 4
| |-EnumConstantDecl 0x5582d9a1fd80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5582d9a1fed8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a1fd60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5582d9a1fd40 <col:13> 'int' 5
| `-EnumConstantDecl 0x5582d9a1fe10 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5582d9a1fef0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a1fdf0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5582d9a1fdd0 <col:14> 'int' 6
|-CXXMethodDecl 0x5582d9a1ff58 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5582d9a1fff8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a20050 <col:30>
|-CXXMethodDecl 0x5582d9a20148 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5582d9a20088 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5582d9a201f0 <col:20>
| `-OptimizeNoneAttr 0x5582d9a20248 <col:30>
|-CXXMethodDecl 0x5582d9a202b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5582d9a203e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5582d9a20558 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5582d9a20490 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5582d9a20620 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5582d9a206e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5582d9a20828 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5582d9a20798 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5582d9a208d0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5582d9a209d0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5582d9a20bd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a209b0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9a20990 <col:23> 'int' 0
| |-EnumConstantDecl 0x5582d9a20a60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5582d9a20be8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a20a40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5582d9a20a20 <col:45> 'int' 4
| |-EnumConstantDecl 0x5582d9a20af0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5582d9a20c00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a20ad0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9a20ab0 <col:24> 'int' 0
| `-EnumConstantDecl 0x5582d9a20b80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5582d9a20c18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a20b60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5582d9a20b40 <col:47> 'int' 16
|-CXXMethodDecl 0x5582d9a20c78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5582d9a20de8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5582d9a20d28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5582d9a20e90 <col:20>
| `-OptimizeNoneAttr 0x5582d9a20ee8 <col:30>
|-CXXMethodDecl 0x5582d9a20f38 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5582d9a348c0 <col:18, col:36>
|   `-ReturnStmt 0x5582d9a348b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5582d9a34898 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5582d9a34878 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5582d9a34848 <col:27> '<bound member function type>' ->xanno 0x5582d9a1ef98
|           `-CXXThisExpr 0x5582d9a34838 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5582d9a21030 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5582d9a349d0 <col:30, col:48>
|   `-ReturnStmt 0x5582d9a349c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5582d9a349a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5582d9a34988 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5582d9a34958 <col:39> '<bound member function type>' ->xanno 0x5582d9a1edf8
|           `-CXXThisExpr 0x5582d9a34948 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5582d9a21118 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5582d9a34b68 <col:24, col:50>
|   `-ReturnStmt 0x5582d9a34b58 <col:26, col:47>
|     `-UnaryOperator 0x5582d9a34b40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5582d9a34b20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5582d9a34b08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5582d9a34ab8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5582d9a29dd8
|         |   `-CXXMemberCallExpr 0x5582d9a34a98 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5582d9a34a68 <col:34> '<bound member function type>' ->xanno 0x5582d9a1ef98
|         |       `-CXXThisExpr 0x5582d9a34a58 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5582d9a34ae8 <col:46> 'int' 0
|-CXXMethodDecl 0x5582d9a21220 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5582d9a34d38 <col:36, col:62>
|   `-ReturnStmt 0x5582d9a34d28 <col:38, col:59>
|     `-UnaryOperator 0x5582d9a34d10 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5582d9a34cf0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5582d9a34cd8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5582d9a34c50 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5582d9a29dd8
|         |   `-CXXMemberCallExpr 0x5582d9a34c30 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5582d9a34c00 <col:46> '<bound member function type>' ->xanno 0x5582d9a1edf8
|         |       `-CXXThisExpr 0x5582d9a34bf0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5582d9a34c80 <col:58> 'int' 0
|-CXXMethodDecl 0x5582d9a21338 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5582d9a34ed0 <col:26, col:53>
|   `-ReturnStmt 0x5582d9a34ec0 <col:28, col:50>
|     `-UnaryOperator 0x5582d9a34ea8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5582d9a34e88 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5582d9a34e70 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5582d9a34e20 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5582d9a2a0d8
|         |   `-CXXMemberCallExpr 0x5582d9a34e00 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5582d9a34dd0 <col:36> '<bound member function type>' ->xanno 0x5582d9a1ef98
|         |       `-CXXThisExpr 0x5582d9a34dc0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5582d9a34e50 <col:49> 'int' 0
|-CXXMethodDecl 0x5582d9a21458 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5582d9a350a8 <col:38, col:65>
|   `-ReturnStmt 0x5582d9a35098 <col:40, col:62>
|     `-UnaryOperator 0x5582d9a35080 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5582d9a35060 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5582d9a35048 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5582d9a34fb8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5582d9a2a0d8
|         |   `-CXXMemberCallExpr 0x5582d9a34f98 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5582d9a34f68 <col:48> '<bound member function type>' ->xanno 0x5582d9a1edf8
|         |       `-CXXThisExpr 0x5582d9a34f58 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5582d9a34fe8 <col:61> 'int' 0
|-CXXMethodDecl 0x5582d9a21608 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5582d9a21510 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5582d9a35778 <col:34, line:463:5>
|   |-ParenExpr 0x5582d9a355c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5582d9a35590 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a351f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a351c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a35118 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a35100 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a350c0 <col:23> 'int' lvalue ParmVar 0x5582d9a21510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a350e0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a351a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a35178 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a35138 <col:33> 'int' lvalue ParmVar 0x5582d9a21510 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5582d9a35190 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5582d9a35158 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5582d9a35258 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a35238 <col:56> 'int' 0
|   |   `-CallExpr 0x5582d9a354f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a354d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a354b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a35530 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a35348 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5582d9a35548 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a35378 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a35560 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a353b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5582d9a35578 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a354a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a35488 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a35448 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5582d9a35768 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5582d9a35750 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5582d9a35730 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5582d9a35700 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5582d9a356b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5582d9a29dd8
|         |   `-CXXMemberCallExpr 0x5582d9a35690 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5582d9a35660 <col:9> '<bound member function type>' ->xanno 0x5582d9a1edf8
|         |       `-CXXThisExpr 0x5582d9a35650 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5582d9a35718 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5582d9a356e0 <col:21> 'int' lvalue ParmVar 0x5582d9a21510 'i' 'int'
|-CXXMethodDecl 0x5582d9a21858 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5582d9a216c8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5582d9a21740 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5582d9a35e08 <col:40, line:472:5>
|   |-ParenExpr 0x5582d9a35c20 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5582d9a35bf0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a358d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a358a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a357f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a357d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a35798 <col:23> 'int' lvalue ParmVar 0x5582d9a216c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a357b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a35880 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a35850 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a35810 <col:33> 'int' lvalue ParmVar 0x5582d9a216c8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5582d9a35868 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5582d9a35830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5582d9a35930 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a35910 <col:56> 'int' 0
|   |   `-CallExpr 0x5582d9a35b50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a35b38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a35b18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a35b90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a359a0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5582d9a35ba8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a359d0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a35bc0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a35a08 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5582d9a35bd8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a35b00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a35ae8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a35aa8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5582d9a35de8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5582d9a35d90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5582d9a35d60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5582d9a35d10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5582d9a29dd8
|     | |   `-CXXMemberCallExpr 0x5582d9a35cf0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5582d9a35cc0 <col:2> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     | |       `-CXXThisExpr 0x5582d9a35cb0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5582d9a35d78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5582d9a35d40 <col:14> 'int' lvalue ParmVar 0x5582d9a216c8 'i' 'int'
|     `-ImplicitCastExpr 0x5582d9a35dd0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a35db0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5582d9a21740 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5582d9a21a18 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5582d9a21920 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5582d9a36588 <col:36, line:485:5>
|   |-ParenExpr 0x5582d9a362f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a362c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a35fa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a35f70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a35e80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a35e68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a35e28 <col:23> 'int' lvalue ParmVar 0x5582d9a21920 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a35e48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a35f50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a35f38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a35ea0 <col:33> 'int' lvalue ParmVar 0x5582d9a21920 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a35f18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a35f00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a35ec0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a35ee0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5582d9a36000 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a35fe0 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a36220 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a36208 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a361e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a36260 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a36070 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5582d9a36278 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a360a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a36290 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a360e0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5582d9a362a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a361d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a361b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a36178 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5582d9a36578 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5582d9a36560 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a36548 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a36518 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a364b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a36488 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a36400 <col:61, col:70> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a363e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a363b0 <col:61> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a363a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a364a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a36430 <col:74> 'int' lvalue ParmVar 0x5582d9a21920 'i' 'int'
|-CXXMethodDecl 0x5582d9a21c68 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5582d9a21ad8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5582d9a21b50 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5582d9a36cd8 <col:42, line:500:5>
|   |-ParenExpr 0x5582d9a36a70 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a36a40 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a36720 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a366f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a36600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a365e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a365a8 <col:23> 'int' lvalue ParmVar 0x5582d9a21ad8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a365c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a366d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a366b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a36620 <col:33> 'int' lvalue ParmVar 0x5582d9a21ad8 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a36698 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a36680 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a36640 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a36660 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5582d9a36780 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a36760 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a369a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a36988 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a36968 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a369e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a367f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5582d9a369f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a36828 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a36a10 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a36860 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5582d9a36a28 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a36950 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a36938 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a368f8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5582d9a36cb8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5582d9a36c68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5582d9a36c38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5582d9a36be0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5582d9a36bb0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5582d9a36b60 <col:48, col:57> 'char [48]' lvalue ->c 0x5582d9a29cb0
|     |     |   `-CXXMemberCallExpr 0x5582d9a36b40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5582d9a36b10 <col:48> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     |     |       `-CXXThisExpr 0x5582d9a36b00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5582d9a36bc8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5582d9a36b90 <col:61> 'int' lvalue ParmVar 0x5582d9a21ad8 'i' 'int'
|     `-ImplicitCastExpr 0x5582d9a36ca0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a36c80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5582d9a21b50 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5582d9a21e28 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5582d9a21d30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5582d9a37438 <col:35, line:513:5>
|   |-ParenExpr 0x5582d9a37148 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a37118 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a36e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a36e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a36d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a36d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a36cf8 <col:23> 'int' lvalue ParmVar 0x5582d9a21d30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a36d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a36e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a36e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a36d70 <col:33> 'int' lvalue ParmVar 0x5582d9a21d30 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a36de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a36dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a36d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a36db0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5582d9a36ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a36eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a37078 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a37060 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a37040 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a370b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a36f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5582d9a370d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a36f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a370e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a36fb0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5582d9a37100 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a37028 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a37010 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a36fd0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5582d9a37428 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5582d9a37410 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a373f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a373c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a37340 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a37310 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a372c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a372a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a37270 <col:60> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a37260 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a37328 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a372f0 <col:73> 'int' lvalue ParmVar 0x5582d9a21d30 'i' 'int'
|-CXXMethodDecl 0x5582d9a22078 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5582d9a21ee8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5582d9a21f60 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5582d9a37b58 <col:41, line:528:5>
|   |-ParenExpr 0x5582d9a378e0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a378b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a375d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a375a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a374b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a37498 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a37458 <col:23> 'int' lvalue ParmVar 0x5582d9a21ee8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a37478 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a37580 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a37568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a374d0 <col:33> 'int' lvalue ParmVar 0x5582d9a21ee8 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a37548 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a37530 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a374f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a37510 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5582d9a37630 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a37610 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a37810 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a377f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a377d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a37850 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a376a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5582d9a37868 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a376d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a37880 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a37710 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5582d9a37898 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a377c0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a377a8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a37768 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5582d9a37b38 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5582d9a37ae8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5582d9a37ab8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5582d9a37a60 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5582d9a37a20 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5582d9a379d0 <col:47, col:56> 'char [48]' lvalue ->c 0x5582d9a29cb0
|     |     |   `-CXXMemberCallExpr 0x5582d9a379b0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5582d9a37980 <col:47> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     |     |       `-CXXThisExpr 0x5582d9a37970 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5582d9a37a38 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5582d9a37a00 <col:60> 'int' lvalue ParmVar 0x5582d9a21ee8 'i' 'int'
|     `-ImplicitCastExpr 0x5582d9a37b20 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a37b00 <col:65> 'int16_t':'short' lvalue ParmVar 0x5582d9a21f60 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5582d9a22238 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5582d9a22140 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5582d9a38228 <col:36, line:541:5>
|   |-ParenExpr 0x5582d9a37fc8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a37f98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a37cf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a37cc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a37bd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a37bb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a37b78 <col:23> 'int' lvalue ParmVar 0x5582d9a22140 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a37b98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a37ca0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a37c88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a37bf0 <col:33> 'int' lvalue ParmVar 0x5582d9a22140 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a37c68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a37c50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a37c10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a37c30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5582d9a37d50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a37d30 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a37ef8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a37ee0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a37ec0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a37f38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a37dc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5582d9a37f50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a37df8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a37f68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a37e30 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5582d9a37f80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a37ea8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a37e90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a37e50 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5582d9a38218 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5582d9a38200 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a381e8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a381b8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a38160 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a38130 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a380e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a380c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a38090 <col:61> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a38080 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a38148 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a38110 <col:74> 'int' lvalue ParmVar 0x5582d9a22140 'i' 'int'
|-CXXMethodDecl 0x5582d9a22408 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5582d9a222f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5582d9a22370 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5582d9a224b8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a22510 <col:30>
|-CXXMethodDecl 0x5582d9a22648 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5582d9a22550 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5582d9a388f8 <col:35, line:562:5>
|   |-ParenExpr 0x5582d9a38698 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a38668 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a383c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a38390 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a382a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a38288 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a38248 <col:23> 'int' lvalue ParmVar 0x5582d9a22550 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a38268 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a38370 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a38358 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a382c0 <col:33> 'int' lvalue ParmVar 0x5582d9a22550 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a38338 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a38320 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a382e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a38300 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5582d9a38420 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a38400 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a385c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a385b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a38590 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a38608 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a38490 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5582d9a38620 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a384c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a38638 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a38500 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5582d9a38650 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a38578 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a38560 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a38520 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5582d9a388e8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5582d9a388d0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a388b8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a38888 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a38830 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a38800 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a387b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a38790 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a38760 <col:60> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a38750 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a38818 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a387e0 <col:73> 'int' lvalue ParmVar 0x5582d9a22550 'i' 'int'
|-CXXMethodDecl 0x5582d9a22858 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5582d9a22708 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5582d9a22780 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5582d9a38fd8 <col:41, line:577:5>
|   |-ParenExpr 0x5582d9a38d68 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a38d38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a38a90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a38a60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a38970 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a38958 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a38918 <col:23> 'int' lvalue ParmVar 0x5582d9a22708 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a38938 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a38a40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a38a28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a38990 <col:33> 'int' lvalue ParmVar 0x5582d9a22708 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a38a08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a389f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a389b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a389d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5582d9a38af0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a38ad0 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a38c98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a38c80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a38c60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a38cd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a38b60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5582d9a38cf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a38b98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a38d08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a38bd0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5582d9a38d20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a38c48 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a38c30 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a38bf0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5582d9a38fb8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5582d9a38f68 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5582d9a38f38 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5582d9a38ed8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5582d9a38ea8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5582d9a38e58 <col:47, col:56> 'char [48]' lvalue ->c 0x5582d9a29cb0
|     |     |   `-CXXMemberCallExpr 0x5582d9a38e38 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5582d9a38e08 <col:47> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     |     |       `-CXXThisExpr 0x5582d9a38df8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5582d9a38ec0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5582d9a38e88 <col:60> 'int' lvalue ParmVar 0x5582d9a22708 'i' 'int'
|     `-ImplicitCastExpr 0x5582d9a38fa0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a38f80 <col:65> 'int32_t':'int' lvalue ParmVar 0x5582d9a22780 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5582d9a22a18 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5582d9a22920 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5582d9a39708 <col:36, line:591:5>
|   |-ParenExpr 0x5582d9a39448 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a39418 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a39170 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a39140 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a39050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a39038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a38ff8 <col:23> 'int' lvalue ParmVar 0x5582d9a22920 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a39018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a39120 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a39108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a39070 <col:33> 'int' lvalue ParmVar 0x5582d9a22920 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a390e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a390d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a39090 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a390b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5582d9a391d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a391b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a39378 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a39360 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a39340 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a393b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a39240 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5582d9a393d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a39278 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a393e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a392b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5582d9a39400 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a39328 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a39310 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a392d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5582d9a396f8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5582d9a396e0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a396c8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a39698 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a39610 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a395e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a39590 <col:61, col:70> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a39570 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a39540 <col:61> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a39530 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a395f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a395c0 <col:74> 'int' lvalue ParmVar 0x5582d9a22920 'i' 'int'
|-CXXMethodDecl 0x5582d9a22c68 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5582d9a22ad8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5582d9a22b50 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5582d9a39de8 <col:42, line:606:5>
|   |-ParenExpr 0x5582d9a39b78 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5582d9a39b48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a398a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a39870 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a39780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a39768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a39728 <col:23> 'int' lvalue ParmVar 0x5582d9a22ad8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a39748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a39850 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5582d9a39838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a397a0 <col:33> 'int' lvalue ParmVar 0x5582d9a22ad8 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a39818 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a39800 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a397c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5582d9a397e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5582d9a39900 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a398e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5582d9a39aa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a39a90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a39a70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a39ae8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a39970 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5582d9a39b00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a399a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a39b18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a399e0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5582d9a39b30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a39a58 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a39a40 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a39a00 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5582d9a39dc8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5582d9a39d78 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5582d9a39d48 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5582d9a39ce8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5582d9a39cb8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5582d9a39c68 <col:48, col:57> 'char [48]' lvalue ->c 0x5582d9a29cb0
|     |     |   `-CXXMemberCallExpr 0x5582d9a39c48 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5582d9a39c18 <col:48> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     |     |       `-CXXThisExpr 0x5582d9a39c08 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5582d9a39cd0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5582d9a39c98 <col:61> 'int' lvalue ParmVar 0x5582d9a22ad8 'i' 'int'
|     `-ImplicitCastExpr 0x5582d9a39db0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a39d90 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5582d9a22b50 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5582d9a22e00 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5582d9a22d30 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5582d9a3a658 <col:33, line:620:5>
|   |-ParenExpr 0x5582d9a3a3d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5582d9a3a3a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a39ff0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a39fc0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a39e60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a39e48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a39e08 <col:23> 'int' lvalue ParmVar 0x5582d9a22d30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a39e28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a39fa0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5582d9a39f88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a39e80 <col:33> 'int' lvalue ParmVar 0x5582d9a22d30 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a39f68 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a39f50 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a39ea0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5582d9a39f28 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5582d9a39f10 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5582d9a39ed8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5582d9a3a050 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a3a030 <col:79> 'int' 0
|   |   `-CallExpr 0x5582d9a3a300 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a3a2e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a3a2c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a3a340 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a3a138 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5582d9a3a358 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a3a180 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a3a370 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a3a1b8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5582d9a3a388 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a3a2b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a3a298 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a3a258 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5582d9a3a648 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5582d9a3a630 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5582d9a3a618 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5582d9a3a5e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5582d9a3a560 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5582d9a3a530 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5582d9a3a4e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5582d9a29cb0
|             |   `-CXXMemberCallExpr 0x5582d9a3a4c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5582d9a3a490 <col:67> '<bound member function type>' ->xanno 0x5582d9a1edf8
|             |       `-CXXThisExpr 0x5582d9a3a480 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5582d9a3a548 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5582d9a3a510 <col:80> 'int' lvalue ParmVar 0x5582d9a22d30 'i' 'int'
|-CXXMethodDecl 0x5582d9a23018 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5582d9a22ec0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5582d9a22f40 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5582d9a3ae80 <col:45, line:635:5>
|   |-ParenExpr 0x5582d9a3abc8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5582d9a3ab98 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5582d9a3a860 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5582d9a3a830 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5582d9a3a6d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5582d9a3a6b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5582d9a3a678 <col:23> 'int' lvalue ParmVar 0x5582d9a22ec0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5582d9a3a698 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5582d9a3a810 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5582d9a3a7f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5582d9a3a6f0 <col:33> 'int' lvalue ParmVar 0x5582d9a22ec0 'i' 'int'
|   |   |     `-BinaryOperator 0x5582d9a3a7d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5582d9a3a7c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5582d9a3a710 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5582d9a1f1e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5582d9a3a798 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5582d9a3a780 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5582d9a3a748 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5582d9a3a8c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5582d9a3a8a0 <col:79> 'int' 0
|   |   `-CallExpr 0x5582d9a3aaf8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5582d9a3aae0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5582d9a3aac0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5582d958bab0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5582d9a3ab38 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a3a930 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5582d9a3ab50 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5582d9a3a978 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5582d9a3ab68 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5582d9a3a9b0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5582d9a3ab80 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5582d9a3aaa8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5582d9a3aa90 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5582d9a3aa48 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5582d9a3ae60 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5582d9a3adc8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5582d9a3ad98 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5582d9a3ad38 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5582d9a3ad08 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5582d9a3acb8 <col:54, col:63> 'char [48]' lvalue ->c 0x5582d9a29cb0
|     |     |   `-CXXMemberCallExpr 0x5582d9a3ac98 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5582d9a3ac68 <col:54> '<bound member function type>' ->xanno 0x5582d9a1ef98
|     |     |       `-CXXThisExpr 0x5582d9a3ac58 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5582d9a3ad20 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5582d9a3ace8 <col:67> 'int' lvalue ParmVar 0x5582d9a22ec0 'i' 'int'
|     `-CXXConstCastExpr 0x5582d9a3ae30 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5582d9a3ae18 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5582d9a3ade0 <col:91> 'const void *' lvalue ParmVar 0x5582d9a22f40 'x' 'const void *'
|-CXXMethodDecl 0x5582d9a230e8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5582d9a3af08 <col:34, line:640:5>
|   `-ReturnStmt 0x5582d9a3aef8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5582d9a3aee0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5582d9a3aeb0 <col:16> 'Packet *' lvalue ->_data_packet 0x5582d9a2a868
|         `-CXXThisExpr 0x5582d9a3aea0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5582d9a23228 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5582d9a23198 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d9a33fc8 <col:46> 'bool' true
|-CXXMethodDecl 0x5582d9a233a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5582d9a232e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5582d9a23450 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5582d9a23c00 <line:660:22> "" ""
| |-EnumConstantDecl 0x5582d9a23550 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23c70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23530 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5582d9a23510 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5582d9a186b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5582d9a235e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23c88 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a235c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5582d9a235a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5582d9a18740 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5582d9a23670 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23ca0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23650 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9a23630 <col:21> 'int' 0
| |-EnumConstantDecl 0x5582d9a23700 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23cb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a236e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5582d9a236c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5582d9a23790 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23cd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23770 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5582d9a23750 <col:21> 'int' 16
| |-EnumConstantDecl 0x5582d9a23820 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23ce8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23800 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5582d9a237e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5582d9a238b0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23d00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23890 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5582d9a23870 <col:19> 'int' EnumConstant 0x5582d9a23700 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5582d9a23940 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23d18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23920 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5582d9a23900 <col:19> 'int' EnumConstant 0x5582d9a23820 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5582d9a23a10 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23d30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a239f0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5582d9a239d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5582d9a23990 <col:23> 'int' EnumConstant 0x5582d9a23940 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5582d9a239b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5582d9a23ae0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5582d9a23d48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9a23ac0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5582d9a23aa0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5582d9a23a60 <col:23> 'int' EnumConstant 0x5582d9a23940 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5582d9a23a80 <col:40> 'int' 4
| `-EnumConstantDecl 0x5582d9a23bb0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5582d9a23d60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d9a23b90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5582d9a23b70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5582d9a23b30 <col:23> 'int' EnumConstant 0x5582d9a23940 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5582d9a23b50 <col:40> 'int' 8
|-CXXMethodDecl 0x5582d9a23da0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5582d9a23e40 <col:68> "" ""
|-CXXMethodDecl 0x5582d9a23ed8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5582d9a23f78 <col:45> "" ""
|-CXXMethodDecl 0x5582d9a24010 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5582d9a240b0 <col:57> "" ""
|-CXXMethodDecl 0x5582d9a24148 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5582d9a241e8 <col:45> "" ""
|-CXXMethodDecl 0x5582d9a24280 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5582d9a24320 <col:57> "" ""
|-CXXMethodDecl 0x5582d9a243b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5582d9a24450 <col:51> "" ""
|-CXXMethodDecl 0x5582d9a244e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5582d9a24580 <col:63> "" ""
|-CXXMethodDecl 0x5582d9a24610 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5582d9a246b0 <col:53> "" ""
|-CXXMethodDecl 0x5582d9a24740 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5582d9a247e0 <col:65> "" ""
|-CXXMethodDecl 0x5582d9a248f8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5582d9a24868 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5582d9a249a0 <col:61> "" ""
|-CXXMethodDecl 0x5582d9a24b38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5582d9a24a28 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5582d9a24aa0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5582d9a24be8 <col:67> "" ""
|-CXXMethodDecl 0x5582d9a24d00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5582d9a24c70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5582d9a24da8 <col:63> "" ""
|-CXXMethodDecl 0x5582d9a24f40 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5582d9a24e30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5582d9a24ea8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5582d9a24ff0 <col:69> "" ""
|-CXXMethodDecl 0x5582d9a25108 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5582d9a25078 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5582d9a251b0 <col:63> "" ""
|-CXXMethodDecl 0x5582d9a27888 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a27778 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5582d9a277f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d9a27938 <col:69> "" ""
|-CXXMethodDecl 0x5582d9a27a50 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5582d9a279c0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5582d9a27af8 <col:62> "" ""
|-CXXMethodDecl 0x5582d9a27c90 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5582d9a27b80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5582d9a27bf8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5582d9a27d40 <col:68> "" ""
|-CXXMethodDecl 0x5582d9a27e58 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5582d9a27dc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5582d9a27f00 <col:63> "" ""
|-CXXMethodDecl 0x5582d9a28098 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5582d9a27f88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5582d9a28000 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5582d9a28148 <col:69> "" ""
|-CXXMethodDecl 0x5582d9a281d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5582d9a28278 <col:64> "" ""
|-CXXMethodDecl 0x5582d9a28308 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5582d9a283a8 <col:52> "" ""
|-CXXMethodDecl 0x5582d9a28438 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5582d9a284d8 <col:67> "" ""
|-CXXMethodDecl 0x5582d9a28568 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5582d9a28608 <col:55> "" ""
|-CXXMethodDecl 0x5582d9a28720 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5582d9a28690 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5582d9a287c8 <col:58> "" ""
|-CXXMethodDecl 0x5582d9a28960 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5582d9a28850 <col:33> col:36 'int'
| |-ParmVarDecl 0x5582d9a288c8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5582d9a28a10 <col:62> "" ""
|-CXXMethodDecl 0x5582d9a28b28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5582d9a28a98 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5582d9a28bd0 <col:58> "" ""
|-CXXMethodDecl 0x5582d9a28d68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5582d9a28c58 <col:33> col:36 'int'
| |-ParmVarDecl 0x5582d9a28cd0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5582d9a28e18 <col:62> "" ""
|-CXXMethodDecl 0x5582d9a28f30 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5582d9a28ea0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5582d9a28fd8 <col:60> "" ""
|-CXXMethodDecl 0x5582d9a29170 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5582d9a29060 <col:34> col:37 'int'
| |-ParmVarDecl 0x5582d9a290d8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5582d9a29220 <col:64> "" ""
|-CXXMethodDecl 0x5582d9a29338 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5582d9a292a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5582d9a293e0 <col:58> "" ""
|-CXXMethodDecl 0x5582d9a29578 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5582d9a29468 <col:33> col:36 'int'
| |-ParmVarDecl 0x5582d9a294e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5582d9a29628 <col:62> "" ""
|-CXXMethodDecl 0x5582d9a29740 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5582d9a296b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5582d9a297e8 <col:59> "" ""
|-CXXMethodDecl 0x5582d9a29980 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5582d9a29870 <col:33> col:36 'int'
| |-ParmVarDecl 0x5582d9a298e8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d9a29a30 <col:63> "" ""
|-AccessSpecDecl 0x5582d9a29aa0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5582d9a29ac8 prev 0x5582d9a1ecd0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d9a29bc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5582d9a29cb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5582d9a29dd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5582d9a29f58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5582d9a2a0d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5582d9a2a258 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5582d9a3b088 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5582d9a3b8f8 <col:11>
| |-CXXDestructorDecl 0x5582d9a3b160 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5582d9a3b298 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5582d9a3b298
| | `-ParmVarDecl 0x5582d9a3b3a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5582d9a3b448 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3b448
| | `-ParmVarDecl 0x5582d9a3b558 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5582d9a3e318 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5582d9a3e428 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5582d9a3e6a8 <col:11>
| |   `-ReturnStmt 0x5582d9a3e698 <col:11>
| |     `-UnaryOperator 0x5582d9a3e680 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5582d9a3e670 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5582d9a3e498 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3e498
|   `-ParmVarDecl 0x5582d9a3e5a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5582d9a2a2c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5582d9a2a3d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5582d9a2a478 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5582d9a2a4e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5582d9a2a548 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5582d9a2a5b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5582d9a2a610 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5582d9a2a6d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5582d9a2a730 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5582d9a2a790 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5582d9a3af98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5582d9a2a478 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5582d9a3b908 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5582d9a3b960 <col:12>
| |-CXXConstructorDecl 0x5582d9a3b5c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5582d9a3b5c8
| | `-ParmVarDecl 0x5582d9a3b6d8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5582d9a3b778 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5582d9a3b778
| | `-ParmVarDecl 0x5582d9a3b888 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5582d9a3da00 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5582d9a2a808 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5582d9a2a868 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5582d9a2a8d0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5582d9a2a938 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5582d9a2a9a0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5582d9a2aa08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5582d9a2aa68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5582d9a2aac8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5582d9a2ab30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5582d9a2abb8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5582d9a2a808 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5582d9a3af30 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5582d9a2aa68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5582d9a3b970 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5582d9a3b9d0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5582d9a2ad58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5582d9a2ac98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5582d9a2ae50 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5582d9a2b038 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5582d9a2af40 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5582d9a2b308 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5582d9a2b0f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9a2b168 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5582d9a2b1e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a2b528 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5582d9a2b3d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5582d9a2b450 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5582d9a33b08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5582d9a2b5e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5582d9a2b660 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5582d9a2b6d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5582d9a33c60 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5582d9a33bd0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a33da8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5582d9a33d18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5582d9a33ea0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9a3ba70 prev 0x5582d9a18330 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5582d9a3bba8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5582d9a3bc38 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5582d9a3bce0 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5582d9a3bd80 <col:20>
| `-OptimizeNoneAttr 0x5582d9a3bdd8 <col:30>
|-CXXMethodDecl 0x5582d9a3be28 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5582d9a3bec8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a3bf20 <col:30>
|-CXXMethodDecl 0x5582d9a3bf70 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a3c038 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a3c100 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a3c218 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5582d9a3c2e0 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5582d9a3c380 <col:20>
| `-OptimizeNoneAttr 0x5582d9a3c3d8 <col:30>
|-CXXMethodDecl 0x5582d9a3c448 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5582d9a3c4e8 <col:20>
| `-OptimizeNoneAttr 0x5582d9a3c540 <col:30>
|-CXXMethodDecl 0x5582d9a3c5e8 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5582d9a3c688 <col:20>
| `-OptimizeNoneAttr 0x5582d9a3c6e0 <col:30>
|-CXXMethodDecl 0x5582d9a3c730 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5582d9a3c848 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5582d9a3c968 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5582d9a3ca88 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5582d9a3cb50 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5582d9a3cbf0 <col:62> "" ""
|-AccessSpecDecl 0x5582d9a3cc60 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5582d9a3ccc0 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5582d9a3d8b8 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5582d9a3dae0 <col:29, col:31>
|-CXXMethodDecl 0x5582d9a3cd88 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5582d9a3cec8 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5582d9a3ce38 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5582d9a3cfc0 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5582d9a3daf0 <col:23, col:25>
|-CXXMethodDecl 0x5582d9a3d178 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5582d9a3d0b0 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5582d9a3d448 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5582d9a3d230 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5582d9a3d2a8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5582d9a3d320 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d9a3d5d8 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5582d9a3d510 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5582d9a3d6d0 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5582d9a3d738 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5582d9a3d738
  `-ParmVarDecl 0x5582d9a3d848 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct _IO_FILE
         0 |   int _flags
         8 |   char * _IO_read_ptr
        16 |   char * _IO_read_end
        24 |   char * _IO_read_base
        32 |   char * _IO_write_base
        40 |   char * _IO_write_ptr
        48 |   char * _IO_write_end
        56 |   char * _IO_buf_base
        64 |   char * _IO_buf_end
        72 |   char * _IO_save_base
        80 |   char * _IO_backup_base
        88 |   char * _IO_save_end
        96 |   struct _IO_marker * _markers
       104 |   struct _IO_FILE * _chain
       112 |   int _fileno
       116 |   int _flags2
       120 |   __off_t _old_offset
       128 |   unsigned short _cur_column
       130 |   signed char _vtable_offset
       131 |   char [1] _shortbuf
       136 |   _IO_lock_t * _lock
       144 |   __off64_t _offset
       152 |   struct _IO_codecvt * _codecvt
       160 |   struct _IO_wide_data * _wide_data
       168 |   struct _IO_FILE * _freeres_list
       176 |   void * _freeres_buf
       184 |   size_t __pad5
       192 |   int _mode
       196 |   char [20] _unused2
           | [sizeof=216, dsize=216, align=8,
           |  nvsize=216, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d970b768 prev 0x5582d970b460 </usr/include/bits/types/struct_FILE.h:49:1, line:99:1> line:49:8 struct _IO_FILE definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5582d970b860 <col:1, col:8> col:8 implicit struct _IO_FILE
|-FieldDecl 0x5582d970b908 <line:51:3, col:7> col:7 _flags 'int'
|-FieldDecl 0x5582d970b970 <line:54:3, col:9> col:9 _IO_read_ptr 'char *'
|-FieldDecl 0x5582d970b9d8 <line:55:3, col:9> col:9 _IO_read_end 'char *'
|-FieldDecl 0x5582d970ba40 <line:56:3, col:9> col:9 _IO_read_base 'char *'
|-FieldDecl 0x5582d970baa8 <line:57:3, col:9> col:9 _IO_write_base 'char *'
|-FieldDecl 0x5582d970bb10 <line:58:3, col:9> col:9 _IO_write_ptr 'char *'
|-FieldDecl 0x5582d970bb78 <line:59:3, col:9> col:9 _IO_write_end 'char *'
|-FieldDecl 0x5582d970bbe0 <line:60:3, col:9> col:9 _IO_buf_base 'char *'
|-FieldDecl 0x5582d970bc48 <line:61:3, col:9> col:9 _IO_buf_end 'char *'
|-FieldDecl 0x5582d970bcb0 <line:64:3, col:9> col:9 _IO_save_base 'char *'
|-FieldDecl 0x5582d970bd18 <line:65:3, col:9> col:9 _IO_backup_base 'char *'
|-FieldDecl 0x5582d970bd80 <line:66:3, col:9> col:9 _IO_save_end 'char *'
|-FieldDecl 0x5582d970be80 <line:68:3, col:22> col:22 _markers 'struct _IO_marker *'
|-FieldDecl 0x5582d970bf50 <line:70:3, col:20> col:20 _chain 'struct _IO_FILE *'
|-FieldDecl 0x5582d970bfb8 <line:72:3, col:7> col:7 _fileno 'int'
|-FieldDecl 0x5582d970c020 <line:73:3, col:7> col:7 _flags2 'int'
|-FieldDecl 0x5582d970c080 <line:74:3, col:11> col:11 _old_offset '__off_t':'long'
|-FieldDecl 0x5582d970c0e8 <line:77:3, col:18> col:18 _cur_column 'unsigned short'
|-FieldDecl 0x5582d970c150 <line:78:3, col:15> col:15 _vtable_offset 'signed char'
|-FieldDecl 0x5582d970c238 <line:79:3, col:19> col:8 _shortbuf 'char [1]'
|-FieldDecl 0x5582d970c2e8 <line:81:3, col:15> col:15 _lock '_IO_lock_t *'
|-FieldDecl 0x5582d970c348 <line:89:3, col:13> col:13 _offset '__off64_t':'long'
|-FieldDecl 0x5582d970c450 <line:91:3, col:23> col:23 _codecvt 'struct _IO_codecvt *'
|-FieldDecl 0x5582d970c550 <line:92:3, col:25> col:25 _wide_data 'struct _IO_wide_data *'
|-FieldDecl 0x5582d970c5c8 <line:93:3, col:20> col:20 _freeres_list 'struct _IO_FILE *'
|-FieldDecl 0x5582d970c630 <line:94:3, col:9> col:9 _freeres_buf 'void *'
|-FieldDecl 0x5582d970c690 <line:95:3, col:10> col:10 __pad5 'size_t':'unsigned long'
|-FieldDecl 0x5582d970c6f8 <line:96:3, col:7> col:7 _mode 'int'
`-FieldDecl 0x5582d970c958 <line:98:3, col:74> col:8 _unused2 'char [20]'

Layout: <CGRecordLayout
  LLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  NonVirtualBaseLLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99d8478 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5582d99d85a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5582d99d9098 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d99d4d78 prev 0x5582d9a51050 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5582d99d4e70 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5582d99d4f00 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5582d99d4f60 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5582d99d5008 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5582d99d5128 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x5582d99d52c8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5582d99d5208 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5582d99d5518 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5582d99d5388 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5582d99d5408 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5582d99d5670 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x5582d99d55e0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5582d99d57f8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5582d99d5730 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5582d99d59a8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5582d99d58e8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5582d99d5aa0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5582d99d9270 <col:21, line:58:5>
|   `-IfStmt 0x5582d99d9258 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5582d99d91c0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5582d99d9190 <col:6> '<bound member function type>' ->scheduled 0x5582d99d62f8
|     |   `-ImplicitCastExpr 0x5582d99d91e0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5582d99d9180 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5582d99d9238 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5582d99d9208 <col:6> '<bound member function type>' ->unschedule 0x5582d99d7920
|         `-CXXThisExpr 0x5582d99d91f8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5582d99d5ba0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5582d99d9410 <col:26, line:65:5>
|   |-BinaryOperator 0x5582d99d9330 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5582d99d92c8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5582d99d85a8
|   | | `-MemberExpr 0x5582d99d9298 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5582d99d8668
|   | |   `-CXXThisExpr 0x5582d99d9288 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5582d99d9318 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5582d99d92f8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5582d99d8ac8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5582d99d93f0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5582d99d9360 <col:2> 'void *' lvalue ->_thunk 0x5582d99d86e8
|     | `-CXXThisExpr 0x5582d99d9350 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5582d99d93c8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5582d99d9390 <col:20> 'int' 1
|-CXXMethodDecl 0x5582d99d5ce0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5582d99d5c50 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5582d99d9570 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5582d99d9460 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5582d99d9430 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5582d99d5c50 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5582d99d9550 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5582d99d9520 <col:2> '<bound member function type>' ->assign 0x5582d99d5ba0
|       `-CXXThisExpr 0x5582d99d9510 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5582d99d5eb0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5582d99d5d98 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5582d99d5e18 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5582d9a89a50 <col:58, line:79:5>
|   |-BinaryOperator 0x5582d9a89998 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5582d9a89930 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5582d99d85a8
|   | | `-MemberExpr 0x5582d99d95a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5582d99d8668
|   | |   `-CXXThisExpr 0x5582d99d9590 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a89980 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5582d9a89960 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5582d99d5d98 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5582d9a89a30 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5582d9a899c8 <col:2> 'void *' lvalue ->_thunk 0x5582d99d86e8
|     | `-CXXThisExpr 0x5582d9a899b8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5582d9a89a18 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5582d9a899f8 <col:11> 'void *' lvalue ParmVar 0x5582d99d5e18 'user_data' 'void *'
|-CXXMethodDecl 0x5582d99d6000 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5582d99d5f70 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5582d9a89be8 <col:35, line:87:5>
|   |-BinaryOperator 0x5582d9a89b18 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5582d9a89ab0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5582d99d85a8
|   | | `-MemberExpr 0x5582d9a89a80 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5582d99d8668
|   | |   `-CXXThisExpr 0x5582d9a89a70 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a89b00 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5582d9a89ae0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5582d99d8ca0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5582d9a89bc8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5582d9a89b48 <col:2> 'void *' lvalue ->_thunk 0x5582d99d86e8
|     | `-CXXThisExpr 0x5582d9a89b38 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5582d9a89bb0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5582d9a89b98 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a89b78 <col:11> 'Element *' lvalue ParmVar 0x5582d99d5f70 'element' 'Element *'
|-CXXMethodDecl 0x5582d99d6148 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5582d99d60b8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5582d9a89d80 <col:29, line:94:5>
|   |-BinaryOperator 0x5582d9a89cb0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5582d9a89c48 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5582d99d85a8
|   | | `-MemberExpr 0x5582d9a89c18 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5582d99d8668
|   | |   `-CXXThisExpr 0x5582d9a89c08 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5582d9a89c98 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5582d9a89c78 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5582d99d8e78 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5582d9a89d60 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5582d9a89ce0 <col:2> 'void *' lvalue ->_thunk 0x5582d99d86e8
|     | `-CXXThisExpr 0x5582d9a89cd0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5582d9a89d48 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5582d9a89d30 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5582d9a89d10 <col:11> 'Task *' lvalue ParmVar 0x5582d99d60b8 'task' 'Task *'
|-CXXMethodDecl 0x5582d99d6238 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5582d9a89e60 <col:37, line:100:5>
|   `-ReturnStmt 0x5582d9a89e50 <line:99:2, col:19>
|     `-BinaryOperator 0x5582d9a89e30 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5582d9a89e00 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5582d9a89db0 <col:9> 'Element *const' lvalue ->_owner 0x5582d99d8748
|       |   `-CXXThisExpr 0x5582d9a89da0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5582d9a89e18 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5582d9a89de0 <col:19> 'int' 0
|-CXXMethodDecl 0x5582d99d62f8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5582d9a89f20 <col:35, line:105:5>
|   `-ReturnStmt 0x5582d9a89f10 <line:104:2, col:23>
|     `-BinaryOperator 0x5582d9a89ef0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5582d9a89ed8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5582d9a89e88 <col:9> 'const int' lvalue ->_schedpos1 0x5582d99d83c8
|       |   `-CXXThisExpr 0x5582d9a89e78 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5582d9a89eb8 <col:23> 'int' 0
|-CXXMethodDecl 0x5582d99d63b8 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5582d9a89f88 <col:51, line:118:5>
|   `-ReturnStmt 0x5582d9a89f78 <line:117:2, col:9>
|     `-MemberExpr 0x5582d9a89f48 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|       `-CXXThisExpr 0x5582d9a89f38 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5582d99d6478 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5582d9a8a4e0 <col:37, line:136:5>
|   `-IfStmt 0x5582d9a8a4b8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5582d9a8a048 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5582d9a8a030 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5582d9a8a010 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5582d9a89fe0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5582d99e3128
|     |       `-MemberExpr 0x5582d9a89fb0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|     |         `-CXXThisExpr 0x5582d9a89fa0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5582d9a8a428 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5582d9a8a410 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5582d9a8a3e0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5582d9a8a3c8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5582d9a8a390 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5582d9a8a378 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5582d9a8a358 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d9a11900 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5582d9a8a2f8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5582d9a8a2e0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5582d9a8a208 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5582d9a8a1f0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5582d9a8a1d0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d9a115c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5582d9a8a170 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5582d9a8a070 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|     |         |     |   `-CXXThisExpr 0x5582d9a8a060 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5582d9a8a1b8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5582d9a8a1a0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5582d9a8a150 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5582d9a8a138 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5582d9a8a0d8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5582d9a04c20 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5582d9a8a340 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5582d9a8a328 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5582d9a8a2c0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5582d9a8a2a8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5582d9a8a278 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5582d9860170 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5582d9a8a4a8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5582d9a8a478 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5582d9a8a448 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|           `-CXXThisExpr 0x5582d9a8a438 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5582d99d6538 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5582d9a8a5c8 <col:35, line:141:5>
|   `-ReturnStmt 0x5582d9a8a5b8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5582d9a8a580 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5582d9a8a550 <col:9, col:17> '<bound member function type>' ->router 0x5582d9a637b0
|         `-ImplicitCastExpr 0x5582d9a8a5a0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5582d9a8a538 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5582d9a8a508 <col:9> 'Element *const' lvalue ->_owner 0x5582d99d8748
|               `-CXXThisExpr 0x5582d9a8a4f8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5582d99d65f8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5582d9a8a648 <col:37, line:146:5>
|   `-ReturnStmt 0x5582d9a8a638 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5582d9a8a620 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5582d9a8a5f0 <col:9> 'Element *const' lvalue ->_owner 0x5582d99d8748
|         `-CXXThisExpr 0x5582d9a8a5e0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5582d99d66b8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5582d9a8a6c8 <col:41, line:151:5>
|   `-ReturnStmt 0x5582d9a8a6b8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5582d9a8a6a0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5582d9a8a670 <col:9> 'RouterThread *const' lvalue ->_thread 0x5582d99d87a8
|         `-CXXThisExpr 0x5582d9a8a660 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5582d99d6780 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5582d99d6940 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5582d99d6830 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5582d99d68a8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5582d99d9088 <col:50> 'bool' false
|-CXXMethodDecl 0x5582d99d6ac8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5582d99d6a00 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5582d99d6c10 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5582d99d6b80 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d6d58 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5582d99d6cc8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d6ea0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5582d99d6e10 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d6fe8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5582d99d6f58 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d70b0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5582d9a8a830 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5582d9a8a818 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8a7c0 <col:2, col:47> 'void'
|       |-MemberExpr 0x5582d9a8a6f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5582d99d6c10
|       | `-CXXThisExpr 0x5582d9a8a6e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8a800 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8a7e8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5582d9a8a7a0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5582d9a8a788 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5582d9a8a758 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5582d9860170 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5582d99d71f0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5582d99d7160 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d7338 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d72a8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a8a9b8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5582d9a8a9a0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8a948 <col:2, col:40> 'void'
|       |-MemberExpr 0x5582d9a8a858 <col:2> '<bound member function type>' ->schedule_after 0x5582d99d71f0
|       | `-CXXThisExpr 0x5582d9a8a848 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8a988 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8a970 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5582d9a8a908 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5582d9a8a8d8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5582d9a8a898 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99d72a8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5582d9a8a8f0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5582d9a8a8b8 <col:38> 'int' 0
|-CXXMethodDecl 0x5582d99d7480 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d73f0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a8ac28 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5582d9a8ac10 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8abb8 <col:2, col:49> 'void'
|       |-MemberExpr 0x5582d9a8a9e0 <col:2> '<bound member function type>' ->schedule_after 0x5582d99d71f0
|       | `-CXXThisExpr 0x5582d9a8a9d0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8abf8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8abe0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5582d9a8ab60 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5582d9a8ab48 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5582d9a8aab8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5582d99e4f18 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5582d9a8aba0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5582d9a8ab88 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5582d9a8aa98 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99d73f0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99d75c8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5582d99d7538 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5582d9a8ae08 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5582d9a8adf0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8ad98 <col:2, col:38> 'void'
|       |-MemberExpr 0x5582d9a8ac50 <col:2> '<bound member function type>' ->schedule_at_steady 0x5582d99d6c10
|       | `-CXXThisExpr 0x5582d9a8ac40 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8add8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8adc0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5582d9a8ad60 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5582d9a8ad48 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5582d9a8ad28 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d9a115c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5582d9a8acf8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5582d9a8ace0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5582d9a8ac90 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|             |     `-CXXThisExpr 0x5582d9a8ac80 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5582d9a8acc0 <col:33> 'const Timestamp' lvalue ParmVar 0x5582d99d7538 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5582d99d7710 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d7680 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a8b0e0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5582d9a8b0c8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8b070 <col:2, col:79> 'void'
|       |-MemberExpr 0x5582d9a8ae30 <col:2> '<bound member function type>' ->schedule_at_steady 0x5582d99d6c10
|       | `-CXXThisExpr 0x5582d9a8ae20 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8b0b0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8b098 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5582d9a8b030 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5582d9a8af68 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5582d9a8af50 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5582d9a8aee0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5582d9a8aeb0 <col:31, col:41> '<bound member function type>' .sec 0x5582d9861c68
|             | |     `-ImplicitCastExpr 0x5582d9a8af00 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5582d9a8ae80 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|             | |         `-CXXThisExpr 0x5582d9a8ae70 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5582d9a8af38 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5582d9a8af18 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99d7680 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5582d9a8aff8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5582d9a8afc8 <col:60, col:70> '<bound member function type>' .subsec 0x5582d9862360
|                 `-ImplicitCastExpr 0x5582d9a8b018 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5582d9a8af98 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|                     `-CXXThisExpr 0x5582d9a8af88 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5582d99d7858 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d77c8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5582d9a8b418 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5582d9a8b400 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5582d9a8b3a8 <col:2, col:65> 'void'
|       |-MemberExpr 0x5582d9a8b108 <col:2> '<bound member function type>' ->schedule_at_steady 0x5582d99d6c10
|       | `-CXXThisExpr 0x5582d9a8b0f8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8b3e8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5582d9a8b3d0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5582d9a8b370 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5582d9a8b358 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5582d9a8b338 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5582d9a115c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5582d9a8b2d8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5582d9a8b2c0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5582d9a8b148 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|             |     `-CXXThisExpr 0x5582d9a8b138 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5582d9a8b320 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5582d9a8b308 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5582d9a8b268 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5582d9a8b250 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5582d9a8b220 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5582d99e4f18 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5582d9a8b2a8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5582d9a8b290 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5582d9a8b200 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5582d99d77c8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5582d99d7920 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5582d99d79e0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5582d9a8b8e0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5582d9a8b470 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5582d9a8b440 <col:2> '<bound member function type>' ->unschedule 0x5582d99d7920
|   |   `-CXXThisExpr 0x5582d9a8b430 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5582d9a8b8c8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5582d9a8b890 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5582d9a8b878 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9a8b528 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5582d96f9208 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5582d9a8b4a0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5582d99d8428
|       | `-CXXThisExpr 0x5582d9a8b490 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5582d9a8b510 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5582d9a8b4e0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5582d99d7aa0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5582d9a8bc38 <col:42, line:310:5>
|   |-IfStmt 0x5582d9a8ba80 <line:306:2, line:307:23>
|   | |-CallExpr 0x5582d9a8b9b0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5582d9a8b998 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5582d9a8b938 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5582d9a03090 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5582d9a8ba70 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5582d9a8ba58 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5582d9a8ba28 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5582d9a8ba10 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5582d9a8b9e0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5582d9a8bc28 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5582d9a8bc10 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5582d9a8bbe0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5582d9a8bbc8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5582d9a8bb88 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5582d9a8bb70 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5582d9a8bb40 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5582d99e5230 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5582d9a8bbb0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5582d9a8bb20 <col:30> 'int' 500
|-CXXMethodDecl 0x5582d99d7be0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d7b50 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99d7c88 <col:69> "" ""
|-CXXMethodDecl 0x5582d99d7d98 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d7d08 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99d7e40 <col:70> "" ""
|-CXXMethodDecl 0x5582d99d7f50 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d7ec0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99d7ff8 <col:71> "" ""
|-CXXMethodDecl 0x5582d99d8108 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5582d99d8078 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5582d99d81b0 <col:72> "" ""
|-EnumDecl 0x5582d99d8220 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5582d99d8320 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5582d99d8370 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5582d99d8300 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5582d99d82e0 <col:25> 'int' 1
|-AccessSpecDecl 0x5582d99d8388 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5582d99d83c8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5582d99d8428 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5582d99d8478 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5582d99d85a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5582d99d9098 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5582d99d8668 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5582d99d86e8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5582d99d8748 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5582d99d87a8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5582d99d88f8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5582d99d8808 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5582d99d8ac8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5582d99d89b0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5582d99d8a30 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5582d99d8ca0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5582d99d8b88 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5582d99d8c08 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5582d99d8e78 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5582d99d8d60 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5582d99d8de0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5582d99d9048 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9a909c0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x5582d9c02b08 <line:167:18>
|-CXXRecordDecl 0x5582d9c02bc8 prev 0x5582d9a909c0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x5582d9c02cd8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9bc3ee0 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9bc3ff8 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x5582d9bc4088 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x5582d9bc4280 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x5582d9bc40c0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x5582d9bc4138 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x5582d9bc41b0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5582d9bc4350 <col:79> 'const ArgContext' lvalue Var 0x5582d9ba9b48 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5582d9bc44f0 <col:91, line:1348:5>
|   `-ReturnStmt 0x5582d9bc44e0 <line:1347:9, col:41>
|     `-CallExpr 0x5582d9bc4490 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x5582d9bc4478 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5582d9bc4430 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x5582d9bc3e28 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x5582d9bc43b8 <col:26> 'const String' lvalue ParmVar 0x5582d9bc40c0 'str' 'const String &'
|       |-UnaryOperator 0x5582d9bc43f8 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5582d9bc43d8 <col:32> 'String' lvalue ParmVar 0x5582d9bc4138 'result' 'String &'
|       `-ImplicitCastExpr 0x5582d9bc44c8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x5582d9bc4410 <col:40> 'int' 0
|-CXXConstructorDecl 0x5582d9c41f38 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5582d9c42010 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5582d9c42148 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x5582d9c42148
| `-ParmVarDecl 0x5582d9c42258 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x5582d9c422f8 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5582d9c42408 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x5582d9c43060 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9bc4530 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5582d9bc4788 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5582d9c41e48 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5582d9c42478 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x5582d9c42478
| `-ParmVarDecl 0x5582d9c42588 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x5582d9c42628 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d9c42738 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x5582d9c43070 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5582d9c43040 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x5582d9c43010 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x5582d9c42fe0 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x5582d9c42738 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x5582d9c430e0 <col:19>
`-CXXDestructorDecl 0x5582d9c427d8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9c43da8 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5582d9c441a8 prev 0x5582d9c43da8 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x5582d9c443a0 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x5582d9c442a8 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x5582d9c452e8 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x5582d9c44520 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x5582d9c452a8 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x5582d9c45268 <col:20> 'String *' lvalue ParmVar 0x5582d9c442a8 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x5582d9c44580 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x5582d9c45348 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x5582d9ba9970 <line:853:25, line:854:9>
|-CXXMethodDecl 0x5582d9c44460 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x5582d9b7c170 Slot::store 'void ()' ]
| `-CompoundStmt 0x5582d9c45a88 <col:22, line:857:9>
|   `-CallExpr 0x5582d9c45a40 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x5582d9c45a28 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5582d9c459a8 <col:13> 'void (String &, const String &)' lvalue Function 0x5582d9c45888 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x5582d97b14e8 'assign_consume')
|     |-UnaryOperator 0x5582d9c454d8 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x5582d9c454c0 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x5582d9c45490 <col:29> 'String *' lvalue ->_ptr 0x5582d9c44520
|     |     `-CXXThisExpr 0x5582d9c45480 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x5582d9c45a70 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x5582d9c45500 <col:35> 'String':'String' lvalue ->_slot 0x5582d9c44580
|         `-CXXThisExpr 0x5582d9c454f0 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x5582d9c44520 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x5582d9c44580 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x5582d9c445f8 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5582d9c445f8
| `-ParmVarDecl 0x5582d9c44708 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x5582d9c447a8 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5582d9c447a8
| `-ParmVarDecl 0x5582d9c448b8 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x5582d9c44958 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x5582d9c44958
| `-ParmVarDecl 0x5582d9c44a68 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x5582d9c44ad8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x5582d9c44ad8
| `-ParmVarDecl 0x5582d9c44be8 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x5582d9c44c70 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x5582d9b7c070 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x5582d9c453b0 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9bb22b0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5582d9bb23c8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5582d9bb2458 <col:16, col:22> col:16 public
|-EnumDecl 0x5582d9bb2480 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5582d9bb2580 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5582d9bb27d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9bb2560 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5582d9bb2540 <col:21> 'int' 0
| |-EnumConstantDecl 0x5582d9bb2610 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5582d9bb27e8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9bb25f0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5582d9bb25d0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5582d9bb26a0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5582d9bb2800 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9bb2680 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5582d9bb2660 <col:24> 'int' 34
| |-EnumConstantDecl 0x5582d9bb2730 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5582d9bb2818 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5582d9bb2710 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5582d9bb26f0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5582d9bb2780 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5582d9bb4190 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5582d9bb45c8 <col:7>
|-CXXConstructorDecl 0x5582d9bb4298 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5582d9bb4298
| `-ParmVarDecl 0x5582d9bb43a8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5582d9bb4448 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d9bb4558 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5582d9c4e7e0 <col:7>
`-CXXDestructorDecl 0x5582d9bb66c8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5582d9bb2848 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5582d9bb29a8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5582d9bb2a38 <col:32, col:38> col:32 public
|-TypedefDecl 0x5582d9bb2a70 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5582d9645000 'uint32_t' sugar
|   |-Typedef 0x5582d9555498 'uint32_t'
|   `-TypedefType 0x5582d952e570 '__uint32_t' sugar
|     |-Typedef 0x5582d952e168 '__uint32_t'
|     `-BuiltinType 0x5582d94ec610 'unsigned int'
|-CXXConstructorDecl 0x5582d9bb2bb8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5582d9bb2ae0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5582d9bb4098 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5582d9bb45d8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5582d9bb3950 'base' 'int'
| | `-ImplicitCastExpr 0x5582d9bb4138 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5582d9bb40f8 <col:16> 'int' lvalue ParmVar 0x5582d9bb2ae0 'b' 'int'
| `-CompoundStmt 0x5582d9bb4648 <col:19, line:1046:5>
|-CXXMethodDecl 0x5582d9bb30b0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5582d9bb2c80 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5582d9bb2d00 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5582d9bb2d78 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5582d9bb2df8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5582d9bb2eb8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5582d9bb2f38 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5582d9bb3508 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5582d9bb3180 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5582d9bb3468 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5582d9bb3228 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5582d9bb32c8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5582d9bb3340 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5582d9bb40b8 <col:82> 'const ArgContext' lvalue Var 0x5582d9ba9b48 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5582d9bb5578 <col:94, line:1067:5>
| |   |-DeclStmt 0x5582d9bb47d8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5582d9bb4668 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5582d9bb4790 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5582d9bb49f8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5582d9bb4808 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5582d9bb49d0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5582d9bb49b0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5582d9bb4960 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5582d9bb4940 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5582d9bb48e8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5582d9bb4898 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5582d9bb48c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5582d9bb4928 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5582d9bb4908 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5582d9bb4990 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5582d9bb4b58 <line:1056:9, col:27>
| |   | `-VarDecl 0x5582d9bb4af0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5582d9bb4fa0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5582d9bb4ed0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5582d9bb4e50 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5582d9a0efe8 0x5582d98585c8 0x5582d98582a0 0x5582d9848a70 0x5582d9848720 0x5582d9848010 0x5582d981a980 0x5582d97a7e50
| |   | | |-CallExpr 0x5582d9bb4d90 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5582d9bb4b80 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5582d9bb4c30 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5582d9bb4c00 <col:19, col:23> '<bound member function type>' .begin 0x5582d9837c78
| |   | | | |   `-DeclRefExpr 0x5582d9bb4be0 <col:19> 'const String' lvalue ParmVar 0x5582d9bb3228 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5582d9bb4ca0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5582d9bb4c70 <col:32, col:36> '<bound member function type>' .end 0x5582d9837e90
| |   | | | |   `-DeclRefExpr 0x5582d9bb4c50 <col:32> 'const String' lvalue ParmVar 0x5582d9bb3228 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5582d9bb4cc0 <col:43> 'const bool' lvalue Var 0x5582d9bb4668 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5582d9bb4d28 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5582d9bb4d08 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5582d9bb4d50 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5582d9bb4af0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5582d9bb4d70 <col:73> 'const int' lvalue Var 0x5582d9bb4808 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5582d9bb4e30 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5582d9bb4e00 <col:16, col:20> '<bound member function type>' .end 0x5582d9837e90
| |   | |     `-DeclRefExpr 0x5582d9bb4de0 <col:16> 'const String' lvalue ParmVar 0x5582d9bb3228 'str' 'const String &'
| |   | `-BinaryOperator 0x5582d9bb4f80 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5582d9bb4f18 <col:13> 'int' lvalue ->status 0x5582d9bb39b8
| |   |   | `-CXXThisExpr 0x5582d9bb4f08 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5582d9bb4f68 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5582d9bb4f48 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb2610 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5582d9bb51f0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5582d9bb50d8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5582d9bb50c0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5582d9bb50a8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5582d9bb4fc8 <col:13> 'int' lvalue ->status 0x5582d9bb39b8
| |   | | |     `-CXXThisExpr 0x5582d9bb4fb8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5582d9bb5088 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5582d9bb5058 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5582d9bb5008 <col:23> 'int' lvalue ->status 0x5582d9bb39b8
| |   | |   |   `-CXXThisExpr 0x5582d9bb4ff8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5582d9bb5070 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5582d9bb5038 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5582d9bb51d0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5582d9bb5170 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5582d9bb5118 <col:13, col:18> '<bound member function type>' .error 0x5582d9b59d40
| |   |   | | `-DeclRefExpr 0x5582d9bb50f8 <col:13> 'const ArgContext' lvalue ParmVar 0x5582d9bb3340 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5582d9bb5198 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5582d9bb5148 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5582d9bb51c0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5582d9bb51b0 <col:20> 'bool' false
| |   |-DeclStmt 0x5582d9bb53c8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5582d9bb5370 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5582d9bb5300 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5582d9bb5528 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5582d9bb53e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5582d97dbe18
| |   | |-DeclRefExpr 0x5582d9bb5428 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5582d9bb4af0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5582d9bb54f8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5582d9bb5470 <col:64> 'V' lvalue ParmVar 0x5582d9bb32c8 'result' 'V &'
| |   `-ReturnStmt 0x5582d9bb5568 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5582d9bb5558 <col:16> 'bool' true
| `-CXXMethodDecl 0x5582d9c51de8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5582d9c51bc0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5582d9c51c98 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x5582d9c51d00 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5582d9c58c30 <col:94, line:1067:5>
|     |-DeclStmt 0x5582d9c525f8 <line:1054:9, col:64>
|     | `-VarDecl 0x5582d9c52418 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5582d9c52588 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5582d9c52558 <col:36, col:55> 'const bool' lvalue Var 0x5582d97cbd88 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5582d9c527d8 <line:1055:9, col:91>
|     | `-VarDecl 0x5582d9c52610 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5582d9c52758 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5582d9c52740 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5582d9c52720 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5582d9c52700 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5582d9c526e0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5582d9c526a8 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5582d9c52688 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5582d9bb48c8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5582d9c526c8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5582d9bb4908 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5582d9bb4990 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5582d9c57a28 <line:1056:9, col:27>
|     | `-VarDecl 0x5582d9c579c0 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5582d9c57eb0 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5582d9c57e58 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5582d9c57d10 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5582d9c57ce0 <col:13> '<bound member function type>' ->parse 0x5582d9bb30b0
|     | | | | `-CXXThisExpr 0x5582d9c57cd0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5582d9c57b70 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5582d9c57b40 <col:19, col:23> '<bound member function type>' .begin 0x5582d9837c78
|     | | | |   `-DeclRefExpr 0x5582d9c57b20 <col:19> 'const String' lvalue ParmVar 0x5582d9c51bc0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5582d9c57be0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5582d9c57bb0 <col:32, col:36> '<bound member function type>' .end 0x5582d9837e90
|     | | | |   `-DeclRefExpr 0x5582d9c57b90 <col:32> 'const String' lvalue ParmVar 0x5582d9c51bc0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5582d9c57d80 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5582d9c57d60 <col:43> 'const bool' lvalue Var 0x5582d9c52418 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5582d9c57c68 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5582d9c57c50 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5582d9c57c30 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x5582d9c57d98 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5582d9c57c90 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5582d9c579c0 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5582d9c57dd0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5582d9c57db0 <col:73> 'const int' lvalue Var 0x5582d9c52610 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5582d9c57e38 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5582d9c57e08 <col:16, col:20> '<bound member function type>' .end 0x5582d9837e90
|     | |     `-DeclRefExpr 0x5582d9c57de8 <col:16> 'const String' lvalue ParmVar 0x5582d9c51bc0 'str' 'const String &'
|     | `-BinaryOperator 0x5582d9c57e90 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5582d9bb4f18 <col:13> 'int' lvalue ->status 0x5582d9bb39b8
|     |   | `-CXXThisExpr 0x5582d9bb4f08 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5582d9c57e78 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5582d9bb4f48 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb2610 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5582d9c58028 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5582d9c57f48 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5582d9c57f30 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5582d9c57f18 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5582d9bb4fc8 <col:13> 'int' lvalue ->status 0x5582d9bb39b8
|     | | |     `-CXXThisExpr 0x5582d9bb4fb8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5582d9c57ef8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5582d9c57ec8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5582d9bb5008 <col:23> 'int' lvalue ->status 0x5582d9bb39b8
|     | |   |   `-CXXThisExpr 0x5582d9bb4ff8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5582d9c57ee0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5582d9bb5038 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5582d9c58008 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5582d9c57fb8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5582d9c57f88 <col:13, col:18> '<bound member function type>' .error 0x5582d9b59d40
|     |   | | `-DeclRefExpr 0x5582d9c57f68 <col:13> 'const ArgContext' lvalue ParmVar 0x5582d9c51d00 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5582d9c57fe0 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5582d9bb5148 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5582d9c57ff8 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5582d9bb51b0 <col:20> 'bool' false
|     |-DeclStmt 0x5582d9c58568 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5582d9c58510 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5582d9c584c0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x5582d9c584a0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x5582d9c58430 'type'
|     |       `-ElaboratedType 0x5582d9c583e0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x5582d9c583c0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x5582d97cbee0 'unsigned_type'
|     |           `-BuiltinType 0x5582d94ec610 'unsigned int'
|     |-CallExpr 0x5582d9c58bc0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5582d9c58ba8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5582d9c58b28 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5582d9c58a08 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5582d97dbe18 'extract_integer')
|     | |-ImplicitCastExpr 0x5582d9c58c08 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5582d9c58bf0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5582d9c585c8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5582d9c579c0 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5582d9c58698 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x5582d9c58648 <col:64> 'int':'int' lvalue ParmVar 0x5582d9c51c98 'result' 'int &'
|     `-ReturnStmt 0x5582d9c58c20 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5582d9bb5558 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5582d9bb38c8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5582d9bb3578 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5582d9bb3828 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5582d9bb3628 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5582d9bb36c8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5582d9bb3740 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5582d9bb40d8 <col:71> 'const ArgContext' lvalue Var 0x5582d9ba9b48 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5582d9bb5ce8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5582d9bb5640 <line:1071:9, col:12>
| |   | `-VarDecl 0x5582d9bb55d8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5582d9bb5cc0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5582d9bb58d0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5582d9bb5758 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5582d9bb5720 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5582d9bb5668 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5582d9bb56c0 <col:31> 'const String' lvalue ParmVar 0x5582d9bb3628 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5582d9bb56e0 <col:36> 'V' lvalue Var 0x5582d9bb55d8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5582d9bb5700 <col:39> 'const ArgContext' lvalue ParmVar 0x5582d9bb3740 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5582d9bb58b0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5582d9bb5890 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5582d9bb5878 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5582d9bb5860 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5582d9bb5780 <col:17> 'int' lvalue ->status 0x5582d9bb39b8
| |     |     |     `-CXXThisExpr 0x5582d9bb5770 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5582d9bb5840 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5582d9bb5810 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5582d9bb57c0 <col:27> 'int' lvalue ->status 0x5582d9bb39b8
| |     |       |   `-CXXThisExpr 0x5582d9bb57b0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5582d9bb5828 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5582d9bb57f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5582d9bb5900 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5582d9bb58f0 <col:20> 'bool' false
| |     `-IfStmt 0x5582d9bb5c98 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5582d9bb59a0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5582d9bb5970 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5582d9bb5920 <col:18> 'int' lvalue ->status 0x5582d9bb39b8
| |       | |   `-CXXThisExpr 0x5582d9bb5910 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5582d9bb5988 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5582d9bb5950 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5582d9bb5bd8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5582d9bb5b80 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5582d9bb59d0 <line:1076:13> '<bound member function type>' ->range_error 0x5582d9bb3fc8
| |       | | | `-CXXThisExpr 0x5582d9bb59c0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5582d9bb5a00 <col:25> 'const ArgContext' lvalue ParmVar 0x5582d9bb3740 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5582d9bb5ae0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5582d9bb5b58 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5582d9bb5b38 <col:43> 'V' lvalue Var 0x5582d9bb55d8 'x' 'V'
| |       | `-ReturnStmt 0x5582d9bb5bc8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5582d9bb5bb8 <col:20> 'bool' false
| |       `-CompoundStmt 0x5582d9bb5c78 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5582d9bb5c38 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5582d9bb5bf8 <col:13> 'V' lvalue ParmVar 0x5582d9bb36c8 'result' 'V &'
| |         | `-DeclRefExpr 0x5582d9bb5c18 <col:22> 'V' lvalue Var 0x5582d9bb55d8 'x' 'V'
| |         `-ReturnStmt 0x5582d9bb5c68 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5582d9bb5c58 <col:20> 'bool' true
| `-CXXMethodDecl 0x5582d9c517a8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5582d9c51580 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5582d9c51658 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x5582d9c516c0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5582d9c523f8 <col:83, line:1083:5>
|     |-DeclStmt 0x5582d9c51a30 <line:1071:9, col:12>
|     | `-VarDecl 0x5582d9c519c8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x5582d9c523d0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5582d9c52060 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5582d9c51f88 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5582d9c51f50 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5582d9c51f08 <col:14> '<bound member function type>' ->parse_saturating 0x5582d9c51de8
|       | |   | `-CXXThisExpr 0x5582d9c51ef8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5582d9c51aa0 <col:31> 'const String' lvalue ParmVar 0x5582d9c51580 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5582d9c51ac0 <col:36> 'int':'int' lvalue Var 0x5582d9c519c8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x5582d9c51ae0 <col:39> 'const ArgContext' lvalue ParmVar 0x5582d9c516c0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5582d9c52040 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5582d9c52020 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5582d9c52008 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5582d9c51ff0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5582d9bb5780 <col:17> 'int' lvalue ->status 0x5582d9bb39b8
|       |     |     `-CXXThisExpr 0x5582d9bb5770 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5582d9c51fd0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5582d9c51fa0 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5582d9bb57c0 <col:27> 'int' lvalue ->status 0x5582d9bb39b8
|       |       |   `-CXXThisExpr 0x5582d9bb57b0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5582d9c51fb8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5582d9bb57f0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5582d9c52080 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5582d9bb58f0 <col:20> 'bool' false
|       `-IfStmt 0x5582d9c523a8 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5582d9c520c0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5582d9c52090 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5582d9bb5920 <col:18> 'int' lvalue ->status 0x5582d9bb39b8
|         | |   `-CXXThisExpr 0x5582d9bb5910 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5582d9c520a8 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5582d9bb5950 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5582d9bb26a0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5582d9c522e0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5582d9c52250 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5582d9bb59d0 <line:1076:13> '<bound member function type>' ->range_error 0x5582d9bb3fc8
|         | | | `-CXXThisExpr 0x5582d9bb59c0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5582d9c520e0 <col:25> 'const ArgContext' lvalue ParmVar 0x5582d9c516c0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5582d9c522b8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5582d9c52288 <col:31, col:50> 'const bool' lvalue Var 0x5582d97cbd88 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5582d9c52228 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5582d9c52210 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5582d9c521f8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5582d9c521d8 <col:43> 'int':'int' lvalue Var 0x5582d9c519c8 'x' 'int':'int'
|         | `-ReturnStmt 0x5582d9c522d0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5582d9bb5bb8 <col:20> 'bool' false
|         `-CompoundStmt 0x5582d9c52388 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5582d9c52358 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x5582d9c52300 <col:13> 'int':'int' lvalue ParmVar 0x5582d9c51658 'result' 'int &'
|           | `-ImplicitCastExpr 0x5582d9c52340 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5582d9c52320 <col:22> 'int':'int' lvalue Var 0x5582d9c519c8 'x' 'int':'int'
|           `-ReturnStmt 0x5582d9c52378 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5582d9bb5c58 <col:20> 'bool' true
|-FieldDecl 0x5582d9bb3950 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5582d9bb39b8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5582d9bb3a08 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5582d9bb3cc0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5582d9bb3a48 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5582d9bb3ac8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5582d9bb3b40 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5582d9bb3bc0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5582d9bb3fc8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5582d9bb3d90 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5582d9bb3e08 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5582d9bb3ea0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5582d9bb6548 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5582d9bb6548
| `-ParmVarDecl 0x5582d9bb6658 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5582d9bb67d8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d9bb68e8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5582d9c4e7f0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5582d9c4e7c0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5582d9c4e790 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5582d9c4e760 <col:7> 'IntArg' lvalue ParmVar 0x5582d9bb68e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5582d9bb3950 'base' 'int'
| | `-ImplicitCastExpr 0x5582d9c4e8e8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5582d9c4e8b8 <col:7> 'int' xvalue .base 0x5582d9bb3950
| |     `-CXXStaticCastExpr 0x5582d9c4e888 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5582d9c4e858 <col:7> 'IntArg' lvalue ParmVar 0x5582d9bb68e8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5582d9bb39b8 'status' 'int'
| | `-ImplicitCastExpr 0x5582d9c4e9b8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5582d9c4e988 <col:7> 'int' xvalue .status 0x5582d9bb39b8
| |     `-CXXStaticCastExpr 0x5582d9c4e958 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5582d9c4e928 <col:7> 'IntArg' lvalue ParmVar 0x5582d9bb68e8 '' 'IntArg &&'
| `-CompoundStmt 0x5582d9c4ea10 <col:7>
`-CXXDestructorDecl 0x5582d9c4d950 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5582d9bbae30 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5582d9bbb088 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5582d9c4d878 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5582d9c4ddf0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5582d9c4ddd0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5582d9c4de60 <col:19>
|-CXXConstructorDecl 0x5582d9c4da58 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5582d9c4da58
| `-ParmVarDecl 0x5582d9c4db68 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5582d9c4dc08 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5582d9c4dd18 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5582d9c4ea20 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5582d9c4e740 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5582d9c4e710 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5582d9c4e6e0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5582d9c4dd18 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5582d9c4ea90 <col:19>
`-CXXDestructorDecl 0x5582d9c4dea0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.12 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.12 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
