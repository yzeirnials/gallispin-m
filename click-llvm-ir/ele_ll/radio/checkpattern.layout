
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555744504268 prev 0x5557444fba08 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555744504360 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5557445043f0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x555744504468 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x555744504528 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5557445045f0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x555744504768 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5557445046a0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x555744504810 <col:24>
| `-OptimizeNoneAttr 0x555744504868 <col:34>
|-CXXMethodDecl 0x5557445048b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x555744504b68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x555744504960 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5557445049d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x555744504a58 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x555744504c20 <line:229:7, col:14> col:7 private
|-FieldDecl 0x555744504c58 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x555744504cc0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x555744504d48 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x555744505068 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x555744504e00 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x555744504e78 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x555744504ef0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x555744504f70 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x555744505180 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55574450caf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55574450caf8
| `-ParmVarDecl 0x55574450cc08 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55574450cca8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55574450cca8
| `-ParmVarDecl 0x55574450cdb8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5557445c6970 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557444f7280 prev 0x5557444f7000 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557444f7378 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5557444f7408 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5557444f7468 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5557444f7558 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5557444f7658 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5557444f7828 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5557444f76d8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5557444f7750 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5557444f79b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5557444f78f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5557444f7a60 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5557444f7b98 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5557444f7ad0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5557444f7d38 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5557444f7c78 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5557444f7ed8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5557444f7e18 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5557444f7f80 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5557444f8080 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5557444f8160 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444f8060 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5557444f8040 <col:26> 'int' 1
| `-EnumConstantDecl 0x5557444f8110 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5557444f8178 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444f80f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5557444f80d0 <col:44> 'int' 2
|-CXXMethodDecl 0x5557444f82c0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5557444f81a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5557444f8228 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5557444f8418 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5557444f8388 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5557444f8658 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5557444f84d8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5557444f8550 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5557444f8708 <col:20>
| `-OptimizeNoneAttr 0x5557444f8760 <col:30>
|-CXXMethodDecl 0x5557444f8868 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5557444f87a0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5557444f8910 <col:20>
| `-OptimizeNoneAttr 0x5557444f8968 <col:30>
|-CXXMethodDecl 0x5557444f89b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5557444f8a80 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5557444f8b98 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5557444f8c20 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5557444f8ca8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5557444f8d30 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5557444f8db8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5557444f8e48 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5557444f8f08 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5557444f8f90 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5557444f9018 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5557444f90a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5557444f9128 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5557444f91b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5557444f9240 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5557444f9300 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5557444f9390 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5557444f94e0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5557444f9448 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5557444f9670 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5557444f95a0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5557444f9920 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5557444f9728 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5557444f97a8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5557444f9828 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5557444f99d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5557444f9ae0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557444f9d70 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444f9ac0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5557444f9aa0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5557444f9b70 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557444f9d88 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444f9b50 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5557444f9b30 <col:32> 'int' 20
| |-EnumConstantDecl 0x5557444f9c00 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557444f9da0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444f9be0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5557444f9bc0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5557444f9c90 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5557444f9db8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444f9c70 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5557444f9c50 <col:35> 'int' 100
| `-EnumConstantDecl 0x5557444f9d20 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5557444f9dd0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444f9d00 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5557444f9ce0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5557444f9e10 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5557444fa250 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557444fa0c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5557444fa138 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557444fa320 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5557444fa4a0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5557444fa3d0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557444fa6a8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557444fa558 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5557444fa5d0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557444fa7a8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5557444fa848 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5557444fa910 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444fa9a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5557444fabd0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444fa980 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5557444fa960 <col:36> 'int' EnumConstant 0x5557444fa910 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444fa9f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444faa40 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444faa90 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444faae0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5557444fab30 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5557444fab80 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5557444facb8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5557444fabf8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5557444fad80 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5557444fae40 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5557444faf00 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5557444fafc0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5557444fb0d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5557444fb1a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5557444fb320 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5557444fb250 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5557444fb448 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5557444fb648 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5557444fb4f8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5557444fb578 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x555744508f98 <col:54, line:127:5>
|   |-ParenExpr 0x555744508e48 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x555744508e18 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x555744508b08 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x555744508ae0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x555744508ac8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x555744508ab0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x555744508a80 <col:31> 'Router *' lvalue ->_router 0x555744506960
|   |   |         `-CXXThisExpr 0x555744508a70 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x555744508b68 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x555744508b48 <col:48> 'int' 0
|   |   `-CallExpr 0x555744508d78 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x555744508d60 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x555744508d40 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x555744508db8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555744508bd8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x555744508dd0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x555744508bf8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x555744508de8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x555744508c30 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x555744508e00 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x555744508d28 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x555744508d10 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x555744508cc8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x555744508ee0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x555744508e78 <col:9> 'Router *' lvalue ->_router 0x555744506960
|   | | `-CXXThisExpr 0x555744508e68 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x555744508ec8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x555744508ea8 <col:19> 'Router *' lvalue ParmVar 0x5557444fb4f8 'r' 'Router *'
|   `-BinaryOperator 0x555744508f78 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x555744508f10 <col:9> 'int' lvalue ->_eindex 0x5557445069c8
|     | `-CXXThisExpr 0x555744508f00 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x555744508f60 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x555744508f40 <col:19> 'int' lvalue ParmVar 0x5557444fb578 'eindex' 'int'
|-CXXMethodDecl 0x5557444fb7d0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5557444fb708 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5557444fb8a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5557444fb968 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5557444fba08 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5557444fbc58 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5557444fbad0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5557444fbb50 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5557444fbd08 <col:20>
| `-OptimizeNoneAttr 0x5557444fbd60 <col:30>
|-CXXMethodDecl 0x5557444fbe68 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5557444fbda0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5557444fbf10 <col:20>
| `-OptimizeNoneAttr 0x5557444fbf68 <col:30>
|-CXXMethodDecl 0x5557444fc038 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5557444fbfa8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5557444fc0e0 <col:20>
| `-OptimizeNoneAttr 0x5557444fc138 <col:30>
|-CXXMethodDecl 0x5557444fc2c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5557444fc170 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5557444fc1f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5557444fc458 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5557444fc390 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5557444fc5a8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5557444fc518 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5557444fc6f8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5557444fc668 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5557444fc848 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5557444fc7b8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5557444fcb08 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5557444fc900 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5557444fc980 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5557444fca28 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5557444fcbe0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5557444fcca0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5557444fcf70 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5557444fce20 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5557444fce98 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5557444fd098 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5557444fd270 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5557444fd150 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5557444fd1d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5557444fd458 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5557444fd338 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5557444fd3b8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5557444fd7c8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5557444fd518 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557444fd590 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557444fd610 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555744508580 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555744508560 <col:106> 'int' 0
| `-ParmVarDecl 0x5557444fd688 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557445085b8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555744508598 <col:126> 'int' 0
|-CXXMethodDecl 0x5557444fdb68 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557444fd898 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557444fd930 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557444fd9b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5557444fda28 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557445085f0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557445085d0 <col:114> 'int' 0
|-CXXMethodDecl 0x5557444fdef8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557444fdc40 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5557444fdcb8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5557444fdd38 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x555744508608 <col:96> 'int' 0
| `-ParmVarDecl 0x5557444fddb0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555744508648 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555744508628 <col:116> 'int' 0
|-CXXMethodDecl 0x5557444fe278 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5557444fdfc8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5557444fe040 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444fe0c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555744508680 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555744508660 <col:109> 'int' 0
| `-ParmVarDecl 0x5557444fe138 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557445086b8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555744508698 <col:129> 'int' 0
|-CXXMethodDecl 0x5557444fe5f8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557444fe348 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5557444fe3c0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444fe440 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5557444fe4b8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5557445086f0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5557445086d0 <col:117> 'int' 0
|-CXXMethodDecl 0x5557444fe988 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5557444fe6d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557444fe748 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444fe7c8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x555744508708 <col:99> 'int' 0
| `-ParmVarDecl 0x5557444fe840 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x555744508748 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x555744508728 <col:119> 'int' 0
|-CXXMethodDecl 0x5557444feda8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5557444fea58 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5557444fead8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5557444feb50 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444febd0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x555744508780 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x555744508760 <col:108> 'int' 0
| `-ParmVarDecl 0x5557444fec50 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5557445087b8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x555744508798 <col:141> 'int' 0
|-CXXMethodDecl 0x5557444ff1c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5557444fee80 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5557444fef00 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5557444fef78 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444feff8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5557444ff078 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5557445087d0 <col:121> 'int' 0
|-CXXMethodDecl 0x5557444ff5f8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5557444ff2a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5557444ff328 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5557444ff3a0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444ff420 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5557445087f0 <col:98> 'int' 0
| `-ParmVarDecl 0x5557444ff4a0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x555744508810 <col:123> 'int' 0
|-CXXMethodDecl 0x5557444ff8c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5557444ff6d0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5557444ff750 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5557444ff7d0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x555744508830 <col:80> 'int' 0
|-EnumDecl 0x5557444ff978 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5557444ffa80 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557444ffd10 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444ffa60 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5557444ffa40 <col:42> 'int' 1
| |-EnumConstantDecl 0x5557444ffb10 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557444ffd28 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444ffaf0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5557444ffad0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5557444ffba0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557444ffd40 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444ffb80 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5557444ffb60 <col:44> 'int' 4
| |-EnumConstantDecl 0x5557444ffc30 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5557444ffd58 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444ffc10 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5557444ffbf0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5557444ffcc0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5557444ffd70 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444ffca0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5557444ffc80 <col:34> 'int' 6
|-CXXMethodDecl 0x555744500028 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5557444ffd98 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5557444ffe38 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5557444ffeb8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5557444fff30 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5557445088e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5557445088d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5557445088b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x555744508898 <col:98, col:105> 'String' (CXXTemporary 0x555744508898)
|           `-CXXTemporaryObjectExpr 0x555744508860 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5557445002c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5557445000f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555744500170 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5557445001e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555744508998 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555744508980 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555744508968 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x555744508948 <col:94, col:101> 'String' (CXXTemporary 0x555744508948)
| |         `-CXXTemporaryObjectExpr 0x555744508910 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x555744509180 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5557445090f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5557445090c8 <col:9> '<bound member function type>' ->add_task_handlers 0x555744500028
|     | `-CXXThisExpr 0x5557445090b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555744509138 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555744509038 <col:27> 'Task *' lvalue ParmVar 0x5557445000f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x555744509150 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x555744509058 <col:33> 'NotifierSignal *' lvalue ParmVar 0x555744500170 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x555744509168 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555744509078 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5557444ffcc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555744509098 <col:62> 'const String' lvalue ParmVar 0x5557445001e8 'prefix' 'const String &'
|-CXXMethodDecl 0x5557445004d8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x555744500390 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x555744500408 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x555744508a48 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x555744508a30 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x555744508a18 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5557445089f8 <col:70, col:77> 'String' (CXXTemporary 0x5557445089f8)
| |         `-CXXTemporaryObjectExpr 0x5557445089c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x555744509358 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5557445092d0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5557445092a0 <col:9> '<bound member function type>' ->add_task_handlers 0x555744500028
|     | `-CXXThisExpr 0x555744509290 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x555744509310 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x555744509210 <col:27> 'Task *' lvalue ParmVar 0x555744500390 'task' 'Task *'
|     |-ImplicitCastExpr 0x555744509328 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x555744509230 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x555744509340 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x555744509250 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5557444ffcc0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x555744509270 <col:57> 'const String' lvalue ParmVar 0x555744500408 'prefix' 'const String &'
|-CXXMethodDecl 0x5557445007b8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5557445005a0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744500620 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744500698 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x555744500a68 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x555744500888 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744500908 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744500988 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x555744500d58 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x555744500b38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744500bb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744500c30 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x555744501008 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x555744500e28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744500ea8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744500f28 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5557445012b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5557445010d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744501158 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557445011d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x555744501568 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x555744501388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744501408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744501480 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x555744501818 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x555744501638 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557445016b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744501738 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x555744501b28 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x555744501940 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557445019c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744501a40 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x555744501e08 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x555744501bf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744501c78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744501d20 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5557445020e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x555744501ed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744501f58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744502000 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x555744502350 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5557445021b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x555744502238 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5557445022b0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5557445025f8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x555744502420 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5557445024a0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x555744502518 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5557445028a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5557445026c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744502748 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5557445027c8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x555744502b58 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x555744502978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5557445029f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744502a70 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x555744502e08 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x555744502c28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744502ca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744502d20 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5557445030d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x555744502ed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744502f58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x555744502ff8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x555744503408 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5557445031a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x555744503228 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5557445032a0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x555744503318 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x555744508a60 <col:93> 'bool' false
|-CXXMethodDecl 0x5557445035f0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557445034d8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x555744503558 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5557445037c8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5557445036b0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x555744503730 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x555744503aa8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555744503888 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x555744503900 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x555744503980 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5557445039f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x555744503d98 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x555744503b78 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x555744503bf0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x555744503c70 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x555744503ce8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x555744503fd0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x555744503e70 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x555744503ef0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5557445041b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x555744504098 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x555744504118 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x555744504268 prev 0x5557444fba08 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x555744504360 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5557445043f0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x555744504468 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x555744504528 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5557445045f0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x555744504768 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5557445046a0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x555744504810 <col:24>
| | `-OptimizeNoneAttr 0x555744504868 <col:34>
| |-CXXMethodDecl 0x5557445048b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x555744504b68 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x555744504960 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5557445049d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x555744504a58 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x555744504c20 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x555744504c58 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x555744504cc0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x555744504d48 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x555744505068 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x555744504e00 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x555744504e78 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x555744504ef0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x555744504f70 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x555744505180 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55574450caf8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55574450caf8
| | `-ParmVarDecl 0x55574450cc08 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55574450cca8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55574450cca8
| | `-ParmVarDecl 0x55574450cdb8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5557445c6970 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557445051f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x555744505298 <col:38> "" ""
|-CXXMethodDecl 0x555744505328 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5557445053c8 <col:44> "" ""
|-AccessSpecDecl 0x555744505438 <line:260:3, col:10> col:3 private
|-EnumDecl 0x555744505460 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x555744505560 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5557445055b0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x555744505540 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x555744505520 <col:27> 'int' 4
|-FieldDecl 0x555744505668 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x555744505818 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5557445058d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x555744506960 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5557445069c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x555744506b18 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x555744506a58 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x555744506cc8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x555744506bd8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x555744506ea8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x555744506d88 <col:20> col:23 'int'
| `-ParmVarDecl 0x555744506e08 <col:25> col:28 'int'
|-CXXMethodDecl 0x555744507150 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x555744506f70 <col:23> col:26 'int'
| |-ParmVarDecl 0x555744506ff0 <col:28> col:31 'int'
| `-ParmVarDecl 0x555744507068 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x555744507208 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5557445072d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x555744507320 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x555744507370 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x555744507550 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x555744507400 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x555744507478 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5557445077f8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x555744507618 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x555744507698 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x555744507710 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x555744507a18 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5557445078c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x555744507948 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x555744507d50 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x555744507ad8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x555744507b58 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x555744507bd0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x555744507c50 <col:57> col:60 'int'
|-CXXMethodDecl 0x555744507f38 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x555744507e20 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x555744507ea0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x555744508088 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x555744507ff8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x555744508408 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x555744508148 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5557445081c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x555744508240 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5557445082c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x555744508520 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CheckPattern
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _len
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55574450fc68 <../elements/radio/checkpattern.hh:12:1, line:28:1> line:12:7 class CheckPattern definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55574450fdc8 <col:1, col:7> col:7 implicit referenced class CheckPattern
|-FieldDecl 0x55574450fe70 <line:14:3, col:12> col:12 referenced _len 'unsigned int'
|-AccessSpecDecl 0x55574450fec0 <line:16:2, col:8> col:2 public
|-CXXConstructorDecl 0x55574450ff50 <line:18:3, col:16> col:3 CheckPattern 'void ()'
|-CXXDestructorDecl 0x555744510040 <line:19:3, col:17> col:3 ~CheckPattern 'void ()' noexcept-unevaluated 0x555744510040
| `-Overrides: [ 0x5557444f7558 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x555744510170 <line:21:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5557444f89b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x555744510ab8 <col:34, col:59>
|   `-ReturnStmt 0x555744510aa8 <col:36, col:43>
|     `-ImplicitCastExpr 0x555744510a90 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x555744510a68 <col:43> 'const char [13]' lvalue "CheckPattern"
|-CXXMethodDecl 0x555744510238 <line:22:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5557444f8a80 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x555744510b18 <col:34, col:54>
|   `-ReturnStmt 0x555744510b08 <col:36, col:43>
|     `-ImplicitCastExpr 0x555744510af0 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x555744510ad0 <col:43> 'const char []' lvalue Var 0x5557444f8d30 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x555744510510 <line:24:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5557444fa250 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5557445103c0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x555744510438 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x555744510660 <line:26:3, col:33> col:11 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5557444f7b98 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5557445105d0 <col:25, col:32> col:33 'Packet *'
|-CXXConstructorDecl 0x555744510738 <line:12:7> col:7 implicit CheckPattern 'void (const CheckPattern &)' inline default_delete noexcept-unevaluated 0x555744510738
| `-ParmVarDecl 0x555744510848 <col:7> col:7 'const CheckPattern &'
`-CXXMethodDecl 0x5557445108e8 <col:7> col:7 implicit operator= 'CheckPattern &(const CheckPattern &)' inline default_delete noexcept-unevaluated 0x5557445108e8
  `-ParmVarDecl 0x5557445109f8 <col:7> col:7 'const CheckPattern &'

Layout: <CGRecordLayout
  LLVMType:%class.CheckPattern = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.CheckPattern = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557442cb120 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5557442cb238 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5557442cb2d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5557442cb338 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5557442cb398 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5557442cb448 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557442cb750 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557442cb868 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5557442cb910 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5557442cb978 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5557442cba08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5557442d1aa0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557442d1ed8 <col:12>
|-CXXConstructorDecl 0x5557442d1ba8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557442d1cb8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557442cb910 'data' 'const char *'
| | `-ImplicitCastExpr 0x5557442d4460 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5557442d4430 <col:12> 'const char *const' lvalue .data 0x5557442cb910
| |     `-DeclRefExpr 0x5557442d4410 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557442cb978 'length' 'int'
| | `-ImplicitCastExpr 0x5557442d44f0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557442d44c0 <col:12> 'const int' lvalue .length 0x5557442cb978
| |     `-DeclRefExpr 0x5557442d44a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5557442cba08 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5557442d4580 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5557442d4550 <col:12> 'String::memo_t *const' lvalue .memo 0x5557442cba08
| |     `-DeclRefExpr 0x5557442d4530 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5557442d45d8 <col:12>
|-CXXConstructorDecl 0x5557442d1d58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557442d1d58
| `-ParmVarDecl 0x5557442d1e68 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5557442d73c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5557442e2dd8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557442e2ee8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5557442e3400 <col:12>
|   |-BinaryOperator 0x5557442e3218 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5557442e31d0 <col:12> 'const char *' lvalue ->data 0x5557442cb910
|   | | `-CXXThisExpr 0x5557442e31c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557442e3200 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5557442e3190 <col:12> 'const char *const' lvalue .data 0x5557442cb910
|   |     `-DeclRefExpr 0x5557442e3170 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5557442e32e0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5557442e3298 <col:12> 'int' lvalue ->length 0x5557442cb978
|   | | `-CXXThisExpr 0x5557442e3288 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557442e32c8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5557442e3258 <col:12> 'const int' lvalue .length 0x5557442cb978
|   |     `-DeclRefExpr 0x5557442e3238 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5557442e33a8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5557442e3360 <col:12> 'String::memo_t *' lvalue ->memo 0x5557442cba08
|   | | `-CXXThisExpr 0x5557442e3350 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5557442e3390 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5557442e3320 <col:12> 'String::memo_t *const' lvalue .memo 0x5557442cba08
|   |     `-DeclRefExpr 0x5557442e3300 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5557442e33f0 <col:12>
|     `-UnaryOperator 0x5557442e33d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557442e33c8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5557442e2f58 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557442e2f58
  `-ParmVarDecl 0x5557442e3068 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557442c2690 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557442c27a8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5557442c2838 <col:16, col:22> col:16 public
|-TypedefDecl 0x5557442c2878 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x555743f96dc0 'const char *'
|   `-QualType 0x555743f96311 'const char' const
|     `-BuiltinType 0x555743f96310 'char'
|-TypedefDecl 0x5557442c2900 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5557442c28d0 'String::const_iterator' sugar
|   |-Typedef 0x5557442c2878 'const_iterator'
|   `-PointerType 0x555743f96dc0 'const char *'
|     `-QualType 0x555743f96311 'const char' const
|       `-BuiltinType 0x555743f96310 'char'
|-TypedefDecl 0x5557442c2a70 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5557442c29e0 'int (String::*)() const'
|   |-RecordType 0x5557442c2720 'String'
|   | `-CXXRecord 0x5557442c2690 'String'
|   `-ParenType 0x5557442c2980 'int () const' sugar
|     `-FunctionProtoType 0x555744296510 'int () const' const cdecl
|       `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x5557442c2ad8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5557440eb0f0 'int64_t' sugar
|   |-Typedef 0x555743fff2d0 'int64_t'
|   `-TypedefType 0x555743fd84d0 '__int64_t' sugar
|     |-Typedef 0x555743fd80a8 '__int64_t'
|     `-BuiltinType 0x555743f96390 'long'
|-TypedefDecl 0x5557442c2b40 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5557440eb010 'uint64_t' sugar
|   |-Typedef 0x555743fff470 'uint64_t'
|   `-TypedefType 0x555743fd8560 '__uint64_t' sugar
|     |-Typedef 0x555743fd8118 '__uint64_t'
|     `-BuiltinType 0x555743f96430 'unsigned long'
|-TypedefDecl 0x5557442c2bd0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5557442c2ba0 'String::intmax_t' sugar
|   |-Typedef 0x5557442c2ad8 'intmax_t'
|   `-TypedefType 0x5557440eb0f0 'int64_t' sugar
|     |-Typedef 0x555743fff2d0 'int64_t'
|     `-TypedefType 0x555743fd84d0 '__int64_t' sugar
|       |-Typedef 0x555743fd80a8 '__int64_t'
|       `-BuiltinType 0x555743f96390 'long'
|-TypedefDecl 0x5557442c2c60 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5557442c2c30 'String::uintmax_t' sugar
|   |-Typedef 0x5557442c2b40 'uintmax_t'
|   `-TypedefType 0x5557440eb010 'uint64_t' sugar
|     |-Typedef 0x555743fff470 'uint64_t'
|     `-TypedefType 0x555743fd8560 '__uint64_t' sugar
|       |-Typedef 0x555743fd8118 '__uint64_t'
|       `-BuiltinType 0x555743f96430 'unsigned long'
|-CXXConstructorDecl 0x5557442c2d20 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5557442c2ec8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5557442c2e08 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5557442c3078 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5557442c2fb8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5557442c31d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5557442c3140 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5557442c33e8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5557442c3298 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5557442c3318 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5557442c3608 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5557442c34b8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5557442c3538 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5557442c3828 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5557442c36d8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5557442c3758 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5557442c3a48 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5557442c38f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5557442c3978 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5557442c3bd8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5557442c3b10 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5557442c3d58 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5557442c3c98 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5557442c3ee8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5557442c3e20 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5557442c4040 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5557442c3fb0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5557442c4198 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5557442c4108 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5557442c42f0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5557442c4260 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5557442c4478 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5557442c43b8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5557442c4608 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5557442c4540 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5557442c4798 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5557442c46d0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5557442c4928 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5557442c4860 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5557442c4a20 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5557442c4b48 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5557442c4cc8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5557442c4c00 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5557442c4e18 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5557442c4d88 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5557442c4ed0 <col:63> "" ""
|-CXXMethodDecl 0x5557442c5018 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5557442c4f58 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5557442c5228 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5557442c50d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5557442c5158 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5557442c5448 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5557442c52f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5557442c5370 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5557442c5728 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5557442c5508 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5557442c5588 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5557442d1570 <col:55> 'int' 10
| `-ParmVarDecl 0x5557442c5600 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557442d1590 <col:76> 'bool' true
|-CXXMethodDecl 0x5557442c5a08 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5557442c57f0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5557442c5870 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5557442d15a0 <col:56> 'int' 10
| `-ParmVarDecl 0x5557442c58e8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557442d15c0 <col:77> 'bool' true
|-CXXMethodDecl 0x5557442c5b10 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5557442c5bd8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5557442c5ca0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5557442c5d40 <col:20>
| `-OptimizeNoneAttr 0x5557442c5d98 <col:30>
|-CXXConversionDecl 0x5557442c5e88 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5557442c5f58 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5557442c6018 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5557442c6108 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5557442c61c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5557442c6348 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5557442c6280 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5557442c6498 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5557442c6408 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5557442c6588 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5557442c6648 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5557442c6898 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5557442c6700 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5557442c6780 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5557442c6af8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5557442c6960 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5557442c69e0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5557442c6bc8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5557442c6dd8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5557442c6c80 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5557442c6d00 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5557442c6ff8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5557442c6ea0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5557442c6f20 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5557442c7188 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5557442c70c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5557442c7278 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5557442c73e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5557442c7328 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557442c75f8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5557442c74a8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5557442c7528 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5557442c7810 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5557442c76b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5557442c7730 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5557442c79a0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5557442c78d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557442c7bc0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5557442c7a60 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5557442c7ae0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5557442c7d10 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5557442c7c80 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5557442c7ee8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5557442c7dd0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5557442c7e50 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5557442c8038 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5557442c7fa8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5557442c8250 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5557442c80f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5557442c8170 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5557442d15d0 <col:39> 'int' 0
|-CXXMethodDecl 0x5557442c8470 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5557442c8310 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5557442c8390 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5557442d15f0 <col:48> 'int' 0
|-CXXMethodDecl 0x5557442c8650 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5557442c8530 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5557442c85b0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5557442d1610 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5557442c8720 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5557442c87e0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5557442c88a0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5557442c8960 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5557442c8a20 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5557442c8bc8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5557442c8ad0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5557442c8d48 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5557442c8c80 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5557442c8f20 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5557442c8e08 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5557442c9098 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5557442c8fd8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5557442c91e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5557442c9150 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5557442c9330 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5557442c92a0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5557442c9508 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5557442c93f0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5557442c9470 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5557442c96e8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5557442c95d0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5557442c9650 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5557442c9838 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5557442c97a8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5557442c9a48 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5557442c98f8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5557442c9978 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5557442c9ba8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5557442c9b10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5557442c9d00 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5557442c9c68 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5557442c9da8 <col:57> "" ""
|-CXXMethodDecl 0x5557442c9eb8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5557442c9e28 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5557442ca008 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5557442c9f78 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5557442ca188 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5557442ca0c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5557442ca250 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5557442ca310 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5557442ca3d0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5557442ca470 <col:49> "" ""
|-CXXMethodDecl 0x5557442ca500 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5557442ca5c0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5557442ca6b0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5557442ca778 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5557442ca838 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5557442ca8f8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5557442ca9f0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5557442caab8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5557442cab80 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5557442cad58 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5557442cac38 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5557442cacb8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5557442caf80 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5557442cae20 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5557442caea0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5557442cb090 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5557442cb0f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5557442cb120 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5557442cb238 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5557442cb2d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5557442cb338 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5557442cb398 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5557442cb448 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5557442cb4b0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5557442cb6e8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5557442cb738 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557442cb6c8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5557442cb5d8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5557442cb580 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5557442cb5c0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5557442cb5a0 <col:32> 'int' 8
|-CXXRecordDecl 0x5557442cb750 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557442cb868 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5557442cb910 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5557442cb978 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5557442cba08 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5557442d1aa0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557442d1ed8 <col:12>
| |-CXXConstructorDecl 0x5557442d1ba8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557442d1cb8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557442cb910 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5557442d4460 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5557442d4430 <col:12> 'const char *const' lvalue .data 0x5557442cb910
| | |     `-DeclRefExpr 0x5557442d4410 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557442cb978 'length' 'int'
| | | `-ImplicitCastExpr 0x5557442d44f0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5557442d44c0 <col:12> 'const int' lvalue .length 0x5557442cb978
| | |     `-DeclRefExpr 0x5557442d44a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5557442cba08 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5557442d4580 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5557442d4550 <col:12> 'String::memo_t *const' lvalue .memo 0x5557442cba08
| | |     `-DeclRefExpr 0x5557442d4530 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442d1cb8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5557442d45d8 <col:12>
| |-CXXConstructorDecl 0x5557442d1d58 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557442d1d58
| | `-ParmVarDecl 0x5557442d1e68 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5557442d73c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5557442e2dd8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557442e2ee8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5557442e3400 <col:12>
| |   |-BinaryOperator 0x5557442e3218 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5557442e31d0 <col:12> 'const char *' lvalue ->data 0x5557442cb910
| |   | | `-CXXThisExpr 0x5557442e31c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557442e3200 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5557442e3190 <col:12> 'const char *const' lvalue .data 0x5557442cb910
| |   |     `-DeclRefExpr 0x5557442e3170 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5557442e32e0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5557442e3298 <col:12> 'int' lvalue ->length 0x5557442cb978
| |   | | `-CXXThisExpr 0x5557442e3288 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557442e32c8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5557442e3258 <col:12> 'const int' lvalue .length 0x5557442cb978
| |   |     `-DeclRefExpr 0x5557442e3238 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5557442e33a8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5557442e3360 <col:12> 'String::memo_t *' lvalue ->memo 0x5557442cba08
| |   | | `-CXXThisExpr 0x5557442e3350 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5557442e3390 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5557442e3320 <col:12> 'String::memo_t *const' lvalue .memo 0x5557442cba08
| |   |     `-DeclRefExpr 0x5557442e3300 <col:12> 'const String::rep_t' lvalue ParmVar 0x5557442e2ee8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5557442e33f0 <col:12>
| |     `-UnaryOperator 0x5557442e33d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557442e33c8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5557442e2f58 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5557442e2f58
|   `-ParmVarDecl 0x5557442e3068 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5557442cba80 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5557442cbcc8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5557442cbae8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5557442cbb68 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5557442cbbe0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5557442d1a60 <col:79, line:261:5>
|   |-BinaryOperator 0x5557442d16d8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5557442d1670 <col:2, col:5> 'const char *' lvalue .data 0x5557442cb910
|   | | `-MemberExpr 0x5557442d1640 <col:2> 'String::rep_t' lvalue ->_r 0x5557442cba80
|   | |   `-CXXThisExpr 0x5557442d1630 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5557442d16c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557442d16a0 <col:12> 'const char *' lvalue ParmVar 0x5557442cbae8 'data' 'const char *'
|   |-BinaryOperator 0x5557442d17a0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5557442d1738 <col:2, col:5> 'int' lvalue .length 0x5557442cb978
|   | | `-MemberExpr 0x5557442d1708 <col:2> 'String::rep_t' lvalue ->_r 0x5557442cba80
|   | |   `-CXXThisExpr 0x5557442d16f8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5557442d1788 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5557442d1768 <col:14> 'int' lvalue ParmVar 0x5557442cbb68 'length' 'int'
|   `-IfStmt 0x5557442d1a48 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5557442d18c0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5557442d18a8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5557442d1888 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5557442d1868 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5557442d1800 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5557442cba08
|     |       | `-MemberExpr 0x5557442d17d0 <col:7> 'String::rep_t' lvalue ->_r 0x5557442cba80
|     |       |   `-CXXThisExpr 0x5557442d17c0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5557442d1850 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557442d1830 <col:17> 'String::memo_t *' lvalue ParmVar 0x5557442cbbe0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5557442d1a20 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5557442d1a08 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5557442d1910 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5557442ba6f8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5557442d1978 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557442cb2d8
|         `-ImplicitCastExpr 0x5557442d1960 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5557442d1940 <col:27> 'String::memo_t *' lvalue ParmVar 0x5557442cbbe0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5557442cbf78 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5557442cbd98 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5557442cbe18 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5557442cbe90 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5557442cba80 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5557442d1ee8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5557442d2078 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5557442d1fe0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5557442d1f50 <col:2> '<bound member function type>' ->assign_memo 0x5557442cbcc8
|     | `-ImplicitCastExpr 0x5557442d2018 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5557442d1f40 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5557442d2030 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5557442d1f80 <col:14> 'const char *' lvalue ParmVar 0x5557442cbd98 'data' 'const char *'
|     |-ImplicitCastExpr 0x5557442d2048 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5557442d1fa0 <col:20> 'int' lvalue ParmVar 0x5557442cbe18 'length' 'int'
|     `-ImplicitCastExpr 0x5557442d2060 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5557442d1fc0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5557442cbe90 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5557442cc108 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5557442cc048 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5557442d22d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5557442d2250 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5557442d20a0 <col:2> '<bound member function type>' ->assign_memo 0x5557442cbcc8
|     | `-CXXThisExpr 0x5557442d2090 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5557442d2288 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5557442d2120 <col:14, col:19> 'const char *' lvalue .data 0x5557442cb910
|     |   `-MemberExpr 0x5557442d20f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5557442cba80
|     |     `-DeclRefExpr 0x5557442d20d0 <col:14> 'const String' lvalue ParmVar 0x5557442cc048 'x' 'const String &'
|     |-ImplicitCastExpr 0x5557442d22a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5557442d21a0 <col:25, col:30> 'int' lvalue .length 0x5557442cb978
|     |   `-MemberExpr 0x5557442d2170 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5557442cba80
|     |     `-DeclRefExpr 0x5557442d2150 <col:25> 'const String' lvalue ParmVar 0x5557442cc048 'x' 'const String &'
|     `-ImplicitCastExpr 0x5557442d22b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5557442d2220 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5557442cba08
|         `-MemberExpr 0x5557442d21f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5557442cba80
|           `-DeclRefExpr 0x5557442d21d0 <col:38> 'const String' lvalue ParmVar 0x5557442cc048 'x' 'const String &'
|-CXXMethodDecl 0x5557442cc1d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5557442d2c90 <col:31, line:278:5>
|   `-IfStmt 0x5557442d2c78 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5557442d2370 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5557442d2358 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5557442d2328 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5557442cba08
|     |     `-MemberExpr 0x5557442d22f8 <col:6> 'String::rep_t' lvalue ->_r 0x5557442cba80
|     |       `-CXXThisExpr 0x5557442d22e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5557442d2c50 <col:15, line:277:2>
|       |-ParenExpr 0x5557442d2820 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5557442d27f0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5557442d2480 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5557442d2468 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5557442d2450 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5557442d2410 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557442cb2d8
|       |   |       `-ImplicitCastExpr 0x5557442d23f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5557442d23c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5557442cba08
|       |   |           `-MemberExpr 0x5557442d2398 <col:27> 'String::rep_t' lvalue ->_r 0x5557442cba80
|       |   |             `-CXXThisExpr 0x5557442d2388 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5557442d24e0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5557442d24c0 <col:54> 'int' 0
|       |   `-CallExpr 0x5557442d2750 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5557442d2738 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5557442d26b8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5557442d2790 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5557442d25c8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5557442d27a8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5557442d25f8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5557442d27c0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5557442d2630 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5557442d27d8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5557442d26a0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5557442d2688 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5557442d2650 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5557442d2b70 <line:274:6, line:275:22>
|       | |-CallExpr 0x5557442d2a30 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5557442d2a18 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5557442d2990 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5557442bbb40 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5557442d2960 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5557442cb2d8
|       | |   `-ImplicitCastExpr 0x5557442d2948 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5557442d2918 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5557442cba08
|       | |       `-MemberExpr 0x5557442d28e8 <col:40> 'String::rep_t' lvalue ->_r 0x5557442cba80
|       | |         `-CXXThisExpr 0x5557442d28d8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5557442d2b30 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5557442d2b18 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5557442d2a58 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5557442d09b0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5557442d2b58 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5557442d2ab8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5557442cba08
|       |       `-MemberExpr 0x5557442d2a88 <col:15> 'String::rep_t' lvalue ->_r 0x5557442cba80
|       |         `-CXXThisExpr 0x5557442d2a78 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5557442d2c30 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5557442d2bc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5557442cba08
|         | `-MemberExpr 0x5557442d2b98 <col:6> 'String::rep_t' lvalue ->_r 0x5557442cba80
|         |   `-CXXThisExpr 0x5557442d2b88 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5557442d2c18 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5557442d2bf8 <col:16> 'int' 0
|-CXXMethodDecl 0x5557442cc468 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5557442cc288 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5557442cc308 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5557442cc380 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5557442cc540 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5557442cc790 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5557442cc5f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5557442cc678 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5557442cc6f0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5557442cc978 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5557442cc860 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5557442cc8e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5557442cca78 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5557442d2d68 <col:41, line:286:5>
|   `-ReturnStmt 0x5557442d2d58 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5557442d2d28 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5557442d2cf0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5557442d2cd8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5557442d2cb8 <col:46> 'int' 1
|-CXXMethodDecl 0x5557442ccd18 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5557442ccb30 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5557442ccbb0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5557442ccc30 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5557442d09b0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5557442ccde0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5557442d0a80 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5557442d0c50 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5557442d0b38 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5557442d0bb8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5557442d0d10 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5557442d0dd8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5557442d0ed8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5557442d0f50 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5557442d0fc8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5557442d1030 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5557442d1130 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5557442d1180 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557442d1110 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5557442d10f0 <col:22> 'int' 14
|-CXXMethodDecl 0x5557442d1398 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5557442d11b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5557442d1230 <col:38> col:41 'int'
| `-ParmVarDecl 0x5557442d12b0 <col:43> col:46 'int'
|-FriendDecl 0x5557442d14a0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5557442d1530 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55574453e910 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55574453eae8 prev 0x55574453e910 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55574453eb78 <col:46, col:52> col:46 public
|-TypedefDecl 0x55574453eba0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x555744540500 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5557445404b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x555744540490 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55574453edb8 'type'
|     `-SubstTemplateTypeParmType 0x55574453ed80 'String' sugar
|       |-TemplateTypeParmType 0x555744285f30 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555744285ee0 'T'
|       `-RecordType 0x5557442c2720 'String'
|         `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x5557445405b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x555744540580 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x555744540560 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x555744540500 'type'
|     `-ElaboratedType 0x5557445404b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x555744540490 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55574453edb8 'type'
|         `-SubstTemplateTypeParmType 0x55574453ed80 'String' sugar
|           |-TemplateTypeParmType 0x555744285f30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555744285ee0 'T'
|           `-RecordType 0x5557442c2720 'String'
|             `-CXXRecord 0x5557442c2690 'String'
|-CXXMethodDecl 0x555744540738 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x555744540648 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x555744540828 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555744540908 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x555744540908
|-CXXMethodDecl 0x555744540bd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555744540ae0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x555744540e18 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555744540c90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744540d08 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555744540fe8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555744540ed8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744540f50 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555744541148 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555744541218 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x555744541468 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5557445412d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x555744541350 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555744545708 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x555744541538 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5557445415b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557445458c8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5557445457d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555744545a88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x555744545990 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x555744545b40 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555744545bf0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555744545e28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x555744545ca0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744545d18 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5557445460c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x555744545fd0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x555744546190 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5557445461e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x555744546230 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557444f9ec0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55574453d378 prev 0x5557444f9ec0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55574453e880 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55574453e830 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55574453e810 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55574453e6c0 'type'
|     `-SubstTemplateTypeParmType 0x55574453e550 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55574425bce0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55574425bc88 'F'
|       `-RecordType 0x55574453e1b0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55574453e0d0 'typed_array_memory'
|-FieldDecl 0x555744546280 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5557445462d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x555744546308 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|   |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557442931f8 'T'
|   `-RecordType 0x5557442c2720 'String'
|     `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744546398 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x555744546360 'String &'
|   `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-RecordType 0x5557442c2720 'String'
|       `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744546428 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5557445463f0 'const String &'
|   `-QualType 0x55574453d411 'const String' const
|     `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-RecordType 0x5557442c2720 'String'
|         `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x5557445464b8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x555744546480 'String *'
|   `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-RecordType 0x5557442c2720 'String'
|       `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744546548 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x555744546510 'const String *'
|   `-QualType 0x55574453d411 'const String' const
|     `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-RecordType 0x5557442c2720 'String'
|         `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x5557445471a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x555744547150 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x555744547130 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x555744547068 'type'
|     `-LValueReferenceType 0x555744547030 'const String &'
|       `-QualType 0x555744546dd1 'const String' const
|         `-SubstTemplateTypeParmType 0x555744546dd0 'String' sugar
|           |-TemplateTypeParmType 0x555744265c30 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x555744265bd8 'T'
|           `-RecordType 0x5557442c2720 'String'
|             `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744547208 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5557445463f0 'const String &'
|   `-QualType 0x55574453d411 'const String' const
|     `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-RecordType 0x5557442c2720 'String'
|         `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744547260 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x5557445472c8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x555744546480 'String *'
|   `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-RecordType 0x5557442c2720 'String'
|       `-CXXRecord 0x5557442c2690 'String'
|-TypedefDecl 0x555744547330 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x555744546510 'const String *'
|   `-QualType 0x55574453d411 'const String' const
|     `-SubstTemplateTypeParmType 0x55574453d410 'String' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-RecordType 0x5557442c2720 'String'
|         `-CXXRecord 0x5557442c2690 'String'
|-EnumDecl 0x555744547388 <line:134:5> col:5
| `-EnumConstantDecl 0x555744547480 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555744547460 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557442948d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557442948b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555744294890 <col:40> 'int' 1
|-CXXConstructorDecl 0x555744547508 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555744547798 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5557445475c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555744547660 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x555744547a28 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x555744547910 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x555744547ce8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x555744547bd0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x555744548000 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x555744547ee0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x555744548310 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5557445481f0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x555744548600 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555744548448 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557445484c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x555744548728 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5557445487d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548830 <col:30> Inherited
|-CXXMethodDecl 0x555744548878 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x555744548928 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548980 <col:30> Inherited
|-CXXMethodDecl 0x555744548a48 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555744548af8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548b50 <col:30> Inherited
|-CXXMethodDecl 0x555744548b98 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555744548c48 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548ca0 <col:30> Inherited
|-CXXMethodDecl 0x555744548ce8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555744548d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548df0 <col:30> Inherited
|-CXXMethodDecl 0x555744548e38 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x555744548ee8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744548f40 <col:30> Inherited
|-CXXMethodDecl 0x555744548f68 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555744549018 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5557445490c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555744549288 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x555744549178 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557445491f0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5557445493d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555744549348 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744549588 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x555744549490 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555744549640 <col:20>
| `-OptimizeNoneAttr 0x555744549698 <col:30>
|-CXXMethodDecl 0x5557445497b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5557445496c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555744549870 <col:20>
| `-OptimizeNoneAttr 0x5557445498c8 <col:30>
|-CXXMethodDecl 0x555744549980 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5557445498f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744549ac8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555744549a38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744549bf8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x555744549cf8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x555744549dc8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x555744549e98 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x555744549fd8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x555744549f48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55574454a120 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55574454a090 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55574454a268 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55574454a1d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55574454a320 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55574454a420 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55574454a390 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55574454a4d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55574454a598 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55574454a698 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55574454a818 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55574454a758 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55574454afd8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55574454a8d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55574454af38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55574454ae38 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55574454b0b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55574454b208 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55574454b178 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55574454b2c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55574454b508 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55574454b380 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55574454b3f8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55574454b698 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55574454b5d8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55574454b8a8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55574454b760 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55574454b7d8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55574454b968 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55574454bbc8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55574454bad0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55574454bc98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55574454bc98

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555744477668 prev 0x5557444bc968 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x555744477760 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5557444777f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x555744477928 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x555744477828 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555744478d50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555744478d30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5557444788c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555744478de0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555744478da0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x555744477828 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555744478930 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555744478e60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x555744478e20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x555744478990 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555744478ea0 <col:54> 'bool' false
| `-CompoundStmt 0x555744478fa8 <col:61, line:38:5>
|   `-BinaryOperator 0x555744478f88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x555744478f20 <col:9> 'const Element *' lvalue ->_context 0x555744478868
|     | `-CXXThisExpr 0x555744478f10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x555744478f70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x555744478f50 <col:20> 'int' 0
|-CXXConstructorDecl 0x555744477b38 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5557444779e8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x555744477a60 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x555744478d88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x555744478d68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x555744478868 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x555744479000 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x555744478fc0 <col:20> 'const Element *' lvalue ParmVar 0x5557444779e8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5557444788c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x555744479080 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x555744479040 <col:36> 'ErrorHandler *' lvalue ParmVar 0x555744477a60 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x555744478930 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x555744479100 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5557444790c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x555744478990 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x555744479140 <col:73> 'bool' false
| `-CompoundStmt 0x5557444791b8 <col:80, line:46:5>
|-CXXMethodDecl 0x555744477c68 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x555744479230 <col:36, line:51:5>
|   `-ReturnStmt 0x555744479220 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x555744479208 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5557444791d8 <col:16> 'const Element *const' lvalue ->_context 0x555744478868
|         `-CXXThisExpr 0x5557444791c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555744477d58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5557444792b0 <col:32, line:57:5>
|   `-ReturnStmt 0x5557444792a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x555744479288 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x555744479258 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5557444788c8
|         `-CXXThisExpr 0x555744479248 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x555744477e18 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x555744477fa0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x555744477ed0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5557444780f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x555744478060 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555744478240 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5557444781b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x555744478448 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5557444782f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x555744478370 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x555744478778 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x555744478508 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x555744478588 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x555744478650 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x555744478830 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x555744478868 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5557444788c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x555744478930 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x555744478990 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5557444789e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5557444789e0
| `-ParmVarDecl 0x555744478af8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x555744478b98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x555744478b98
| `-ParmVarDecl 0x555744478ca8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5557445c7478 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x555744584fd0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5557445851a8 prev 0x555744584fd0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x555744585238 <col:46, col:52> col:46 public
|-TypedefDecl 0x555744585260 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x555744586e30 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x555744586de0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x555744585710 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x555744585610 'type'
|     `-TemplateSpecializationType 0x5557445855a0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x555744585480 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x555744585460 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x555744585440 <col:24> 'unsigned long' 4
|       `-RecordType 0x555744585580 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5557445854a0 'char_array'
|-TypedefDecl 0x555744586ee8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x555744586eb0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x555744586e90 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x555744586e30 'type'
|     `-ElaboratedType 0x555744586de0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x555744585710 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x555744585610 'type'
|         `-TemplateSpecializationType 0x5557445855a0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x555744585480 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x555744585460 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x555744585440 <col:24> 'unsigned long' 4
|           `-RecordType 0x555744585580 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5557445854a0 'char_array'
|-CXXMethodDecl 0x555744587068 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x555744586f78 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x555744587158 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x555744587238 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x555744587508 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x555744587410 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x555744587748 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5557445875c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744587638 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555744587918 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555744587808 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744587880 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555744587a78 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555744587b48 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x555744587d98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555744587c08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555744587c80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555744587ff8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x555744587e68 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x555744587ee0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557445881b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5557445880c8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555744588378 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x555744588280 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x555744588430 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5557445884e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x555744588718 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x555744588590 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x555744588608 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5557445889b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5557445888c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x555744588a80 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x555744588ad0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55574458ef40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557445839d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x555744583be8 prev 0x5557445839d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x555744584f40 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x555744584ef0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x555744584ed0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x555744584d80 'type'
|     `-SubstTemplateTypeParmType 0x555744584ba0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55574425b560 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55574425b508 'T'
|       `-RecordType 0x5557445846f0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x555744584608 'sized_array_memory'
|-FieldDecl 0x55574458ef90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55574458efe0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55574458f018 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|   |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5557442931f8 'T'
|   `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458f0a8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55574458f070 'int &'
|   `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458f168 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55574458f130 'const int &'
|   `-QualType 0x555744583c81 'const int' const
|     `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458f1f8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55574458f1c0 'int *'
|   `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458f288 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55574458f250 'const int *'
|   `-QualType 0x555744583c81 'const int' const
|     `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458fe70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55574458fe20 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55574458fe00 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55574458fd90 'type'
|     `-SubstTemplateTypeParmType 0x55574458fb50 'int' sugar
|       |-TemplateTypeParmType 0x555744266360 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x555744266310 'T'
|       `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458fed8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55574458f130 'const int &'
|   `-QualType 0x555744583c81 'const int' const
|     `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458ff30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x55574458ff98 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55574458f1c0 'int *'
|   `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|     |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5557442931f8 'T'
|     `-BuiltinType 0x555743f96370 'int'
|-TypedefDecl 0x555744590000 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55574458f250 'const int *'
|   `-QualType 0x555744583c81 'const int' const
|     `-SubstTemplateTypeParmType 0x555744583c80 'int' sugar
|       |-TemplateTypeParmType 0x555744293250 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5557442931f8 'T'
|       `-BuiltinType 0x555743f96370 'int'
|-EnumDecl 0x555744590058 <line:134:5> col:5
| `-EnumConstantDecl 0x555744590150 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x555744590130 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5557442948d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5557442948b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x555744294890 <col:40> 'int' 1
|-CXXConstructorDecl 0x5557445901d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x555744590428 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555744590290 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555744590330 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5557445906e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5557445905d0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5557445909a8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x555744590890 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x555744590cf0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x555744590bd0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x555744591000 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x555744590ee0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5557445912f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555744591138 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5557445911b0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555744591418 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5557445914f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744591550 <col:30> Inherited
|-CXXMethodDecl 0x555744591598 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x555744591648 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557445916a0 <col:30> Inherited
|-CXXMethodDecl 0x555744591768 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555744591818 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744591870 <col:30> Inherited
|-CXXMethodDecl 0x5557445918b8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555744591968 <col:20> Inherited
| `-OptimizeNoneAttr 0x5557445919c0 <col:30> Inherited
|-CXXMethodDecl 0x555744591a08 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555744591ab8 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744591b10 <col:30> Inherited
|-CXXMethodDecl 0x555744591b58 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x555744591c08 <col:20> Inherited
| `-OptimizeNoneAttr 0x555744591c60 <col:30> Inherited
|-CXXMethodDecl 0x555744591c88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555744591d38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x555744591de8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x555744591fa8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x555744591e98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x555744591f10 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5557445920f8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x555744592068 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557445922a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5557445921b0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555744592360 <col:20>
| `-OptimizeNoneAttr 0x5557445923b8 <col:30>
|-CXXMethodDecl 0x5557445924d8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5557445923e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x555744592590 <col:20>
| `-OptimizeNoneAttr 0x5557445925e8 <col:30>
|-CXXMethodDecl 0x5557445926a0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555744592610 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5557445927e8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555744592758 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744592918 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x555744592a48 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x555744592b18 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x555744592be8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x555744592d28 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x555744592c98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744592e70 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x555744592de0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x555744592fb8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x555744592f28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555744593070 <col:48> Inherited "" ""
|-CXXMethodDecl 0x555744593170 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5557445930e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x555744593228 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5557445932e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5557445933e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x555744593568 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5557445934a8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x555744593d28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x555744593620 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x555744593c88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x555744593b88 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x555744593e08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x555744593f58 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x555744593ec8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555744594010 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x555744594258 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5557445940d0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555744594148 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x555744594418 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x555744594328 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555744594668 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5557445944e0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x555744594558 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x555744594728 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x555744594988 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x555744594890 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x555744594a58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x555744581b48 prev 0x55574447e1c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x555744581c40 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x555744581d30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5557445a6810 <col:16, line:828:9>
|-CXXDestructorDecl 0x555744581e20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5557445a6820 <col:25, line:830:9>
|-CXXMethodDecl 0x555744581f20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x555744581fd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x555744582078 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555744582078
| `-ParmVarDecl 0x555744582188 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x555744582948 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555744582948
  `-ParmVarDecl 0x555744582a58 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55574447dfd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55574447e138 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55574447e1c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55574447e280 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55574447e388 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55574447e2b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555744596018 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555744595ff8 <col:31> 'int' 0
|-CXXConstructorDecl 0x555744567928 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5557445677a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x555744567818 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555744596050 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555744596030 <col:59> 'int' 0
|-CXXConstructorDecl 0x555744567b00 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5557445679f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x555744567a68 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x555744596088 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x555744596068 <col:55> 'int' 0
|-CXXConstructorDecl 0x555744567eb8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x555744567ca0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x555744567d18 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x555744567d90 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5557445960c0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5557445960a0 <col:31> 'int' 0
|-CXXConstructorDecl 0x555744568078 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x555744567fb8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x555744568170 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x555744568358 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x555744568260 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x555744568448 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x555744596470 <col:24, line:291:5>
|   `-ReturnStmt 0x555744596460 <line:290:9, col:79>
|     `-BinaryOperator 0x555744596440 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x555744596318 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x555744596270 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x555744596250 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x555744596148 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x555744596130 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x555744596118 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5557445960e8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x555744583970
|       | |   |       `-CXXThisExpr 0x5557445960d8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x555744596238 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x555744596220 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5557445961e8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5557445961b8 <col:28, col:35> '<bound member function type>' ->size 0x555744548f68
|       | |           `-ImplicitCastExpr 0x555744596208 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5557445961a0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x555744596170 <col:28> 'Vector<String> *const' lvalue ->_conf 0x555744583970
|       | |                 `-CXXThisExpr 0x555744596160 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x555744596300 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5557445962e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5557445962d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5557445962a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x555744594ba0
|       |         `-CXXThisExpr 0x555744596290 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x555744596420 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x555744596408 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5557445963f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5557445963b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555744596398 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555744596348 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555744594c50
|         |     |   `-CXXThisExpr 0x555744596338 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555744596378 <col:73> 'int' 0
|         `-IntegerLiteral 0x5557445963d0 <col:79> 'int' 0
|-CXXMethodDecl 0x555744568508 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x555744596648 <col:32, line:296:5>
|   `-ReturnStmt 0x555744596638 <line:295:9, col:49>
|     `-BinaryOperator 0x555744596618 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5557445964f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5557445964e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5557445964c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x555744596498 <col:17> 'Args::Slot *const' lvalue ->_slots 0x555744594ba0
|       |       `-CXXThisExpr 0x555744596488 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5557445965f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5557445965e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5557445965c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x555744596588 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x555744596570 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x555744596520 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x555744594c50
|         |     |   `-CXXThisExpr 0x555744596510 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x555744596550 <col:43> 'int' 0
|         `-IntegerLiteral 0x5557445965a8 <col:49> 'int' 0
|-CXXMethodDecl 0x5557445685f8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x555744596858 <col:19, line:306:5>
|   |-IfStmt 0x555744596778 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5557445966b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5557445966a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x555744596670 <col:13> 'Vector<String> *' lvalue ->_conf 0x555744583970
|   | |     `-CXXThisExpr 0x555744596660 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x555744596758 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x555744596728 <col:13, col:20> '<bound member function type>' ->clear 0x55574454b968
|   |     `-ImplicitCastExpr 0x555744596710 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5557445966e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x555744583970
|   |         `-CXXThisExpr 0x5557445966d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x555744596800 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5557445967d0 <col:9, col:16> '<bound member function type>' .clear 0x555744594728
|   |   `-MemberExpr 0x5557445967a0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x555744594b40
|   |     `-CXXThisExpr 0x555744596790 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x555744596848 <line:305:9, col:17>
|     `-UnaryOperator 0x555744596830 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555744596820 <col:17> 'Args *' this
|-CXXMethodDecl 0x555744568878 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x555744568780 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5557445689f8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x555744568930 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x555744568d78 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x555744568aa0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x555744568cd8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x555744568b48 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x555744568bc0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x555744596b78 <col:67, line:327:5>
|     |-WhileStmt 0x555744596b28 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x555744596940 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5557445968c0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5557444b4e38 0x5557442fe418 0x5557442fe0f0 0x5557442ef8d0 0x5557442ef580 0x5557442eee70 0x5557442c17e0 0x55574424dca0
|     | | |-DeclRefExpr 0x555744596880 <col:16> 'Iter' lvalue ParmVar 0x555744568b48 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5557445968a0 <col:25> 'Iter' lvalue ParmVar 0x555744568bc0 'end' 'Iter'
|     | `-CompoundStmt 0x555744596b08 <col:30, line:325:9>
|     |   |-CallExpr 0x555744596aa8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x555744596988 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x555744596a78 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x555744596a08 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|     |   |   `-DeclRefExpr 0x5557445969e8 <col:24> 'Iter' lvalue ParmVar 0x555744568b48 'begin' 'Iter'
|     |   `-UnaryOperator 0x555744596af0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x555744596ad0 <col:15> 'Iter' lvalue ParmVar 0x555744568b48 'begin' 'Iter'
|     `-ReturnStmt 0x555744596b68 <line:326:9, col:17>
|       `-UnaryOperator 0x555744596b50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555744596b40 <col:17> 'Args *' this
|-CXXMethodDecl 0x555744568e80 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x555744568df0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x555744568fc8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x555744568f38 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x555744569090 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x555744596c58 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x555744596bf8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x555744596ba8 <col:9> '<bound member function type>' ->reset_from 0x555744594fc8
|   | | `-CXXThisExpr 0x555744596b98 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x555744596bd8 <col:20> 'int' 0
|   `-ReturnStmt 0x555744596c48 <line:352:9, col:17>
|     `-UnaryOperator 0x555744596c30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x555744596c20 <col:17> 'Args *' this
|-VarDecl 0x555744569148 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557445691b0 <col:38> 'int' 1
|-VarDecl 0x555744569240 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557445692a8 <col:39> 'int' 2
|-VarDecl 0x555744569338 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5557445693a0 <col:39> 'int' 4
|-VarDecl 0x555744569430 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x555744569498 <col:39> 'int' 8
|-FunctionTemplateDecl 0x555744569818 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x555744569510 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555744569778 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5557445695c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744569668 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x555744596db0 <col:43, line:371:5>
|     `-ReturnStmt 0x555744596da0 <line:370:9, col:34>
|       `-CallExpr 0x555744596d68 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744596c88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744596d08 <col:21> 'const char *' lvalue ParmVar 0x5557445695c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555744596d28 <col:30> 'int' 0
|         `-DeclRefExpr 0x555744596d48 <col:33> 'T' lvalue ParmVar 0x555744569668 'x' 'T &'
|-FunctionTemplateDecl 0x555744569b48 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x555744569880 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555744569aa8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555744569930 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445699d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555744596f00 <col:45, line:375:5>
|     `-ReturnStmt 0x555744596ef0 <line:374:9, col:42>
|       `-CallExpr 0x555744596eb8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744596dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744596e58 <col:21> 'const char *' lvalue ParmVar 0x555744569930 'keyword' 'const char *'
|         |-DeclRefExpr 0x555744596e78 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int'
|         `-DeclRefExpr 0x555744596e98 <col:41> 'T' lvalue ParmVar 0x5557445699d8 'x' 'T &'
|-FunctionTemplateDecl 0x555744569e78 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x555744569bb0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555744569dd8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x555744569c60 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744569d08 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x555744598988 <col:45, line:379:5>
|     `-ReturnStmt 0x555744598978 <line:378:9, col:43>
|       `-CallExpr 0x555744598940 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744598860 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557445988e0 <col:21> 'const char *' lvalue ParmVar 0x555744569c60 'keyword' 'const char *'
|         |-DeclRefExpr 0x555744598900 <col:30> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         `-DeclRefExpr 0x555744598920 <col:42> 'T' lvalue ParmVar 0x555744569d08 'x' 'T &'
|-FunctionTemplateDecl 0x55574456a1a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x555744569ee0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55574456a108 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x555744569f90 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55574456a038 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x555744598b88 <col:46, line:383:5>
| |   `-ReturnStmt 0x555744598b78 <line:382:9, col:55>
| |     `-CallExpr 0x555744598b40 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5557445989b0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x555744598a30 <col:21> 'const char *' lvalue ParmVar 0x555744569f90 'keyword' 'const char *'
| |       |-BinaryOperator 0x555744598b00 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x555744598ab0 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x555744598a90 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x555744598ae8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x555744598ac8 <col:42> 'const int' lvalue Var 0x555744569240 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x555744598b20 <col:54> 'T' lvalue ParmVar 0x55574456a038 'x' 'T &'
| `-CXXMethodDecl 0x5557445c7908 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5557445c7728 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5557445c77f8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x55574456a5a8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55574456a210 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55574456a508 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55574456a2c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456a340 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55574456a3e8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x555744598cc8 <col:54, line:388:5>
|     |-CallExpr 0x555744598c50 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555744598ba0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x555744598be0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555744598bf0 <col:30> 'const char *' lvalue ParmVar 0x55574456a2c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555744598c10 <col:39> 'int' lvalue ParmVar 0x55574456a340 'flags' 'int'
|     | `-DeclRefExpr 0x555744598c30 <col:46> 'T' lvalue ParmVar 0x55574456a3e8 'x' 'T &'
|     `-ReturnStmt 0x555744598cb8 <line:387:9, col:17>
|       `-UnaryOperator 0x555744598ca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555744598c90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55574456aa58 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55574456a618 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55574456a698 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55574456a9b8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55574456a758 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456a7f8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55574456a898 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744598e38 <col:74, line:403:5>
|     `-ReturnStmt 0x555744598e28 <line:402:9, col:56>
|       `-CallExpr 0x555744598de8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744598cf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744598d68 <col:28> 'const char *' lvalue ParmVar 0x55574456a758 'keyword' 'const char *'
|         |-IntegerLiteral 0x555744598d88 <col:37> 'int' 0
|         |-DeclRefExpr 0x555744598da8 <col:40> 'T' lvalue ParmVar 0x55574456a7f8 'x' 'T &'
|         `-DeclRefExpr 0x555744598dc8 <col:43> 'const V' lvalue ParmVar 0x55574456a898 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55574456aec8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55574456aac8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55574456ab48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55574456ae28 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55574456ac08 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456aca8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55574456ad48 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744598fa0 <col:76, line:407:5>
|     `-ReturnStmt 0x555744598f90 <line:406:9, col:65>
|       `-CallExpr 0x555744598f50 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744598e60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744598ed0 <col:28> 'const char *' lvalue ParmVar 0x55574456ac08 'keyword' 'const char *'
|         |-DeclRefExpr 0x555744598ef0 <col:37> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         |-DeclRefExpr 0x555744598f10 <col:49> 'T' lvalue ParmVar 0x55574456aca8 'x' 'T &'
|         `-DeclRefExpr 0x555744598f30 <col:52> 'const V' lvalue ParmVar 0x55574456ad48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55574456b418 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55574456af38 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55574456afb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55574456b378 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55574456b078 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456b0f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55574456b198 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55574456b238 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744599108 <col:85, line:412:5>
|     |-CallExpr 0x555744599088 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555744598fb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555744598ff8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555744599008 <col:37> 'const char *' lvalue ParmVar 0x55574456b078 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555744599028 <col:46> 'int' lvalue ParmVar 0x55574456b0f8 'flags' 'int'
|     | |-DeclRefExpr 0x555744599048 <col:53> 'T' lvalue ParmVar 0x55574456b198 'x' 'T &'
|     | `-DeclRefExpr 0x555744599068 <col:56> 'const V' lvalue ParmVar 0x55574456b238 'default_value' 'const V &'
|     `-ReturnStmt 0x5557445990f8 <line:411:9, col:17>
|       `-UnaryOperator 0x5557445990e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557445990d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55574456b8a8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55574456b490 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456b508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55574456b808 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55574456b5c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456b640 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55574456b6e8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x555744599288 <col:53, line:425:5>
|     `-ReturnStmt 0x555744599278 <line:424:9, col:42>
|       `-CallExpr 0x555744599238 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599138 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557445991b8 <col:21> 'const char *' lvalue ParmVar 0x55574456b5c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557445991d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5557445991f8 <col:33> 'P' lvalue ParmVar 0x55574456b640 'parser' 'P'
|         `-DeclRefExpr 0x555744599218 <col:41> 'T' lvalue ParmVar 0x55574456b6e8 'x' 'T &'
|-FunctionTemplateDecl 0x55574456bcf8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55574456b918 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456b998 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55574456bc58 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55574456ba58 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456bad0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55574456bb78 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555744599400 <col:55, line:429:5>
|     `-ReturnStmt 0x5557445993f0 <line:428:9, col:50>
|       `-CallExpr 0x5557445993b0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557445992b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744599330 <col:21> 'const char *' lvalue ParmVar 0x55574456ba58 'keyword' 'const char *'
|         |-DeclRefExpr 0x555744599350 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int'
|         |-DeclRefExpr 0x555744599370 <col:41> 'P' lvalue ParmVar 0x55574456bad0 'parser' 'P'
|         `-DeclRefExpr 0x555744599390 <col:49> 'T' lvalue ParmVar 0x55574456bb78 'x' 'T &'
|-FunctionTemplateDecl 0x55574456c148 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55574456bd68 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456bde8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55574456c0a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55574456bea8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456bf20 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55574456bfc8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x555744599578 <col:55, line:433:5>
|     `-ReturnStmt 0x555744599568 <line:432:9, col:51>
|       `-CallExpr 0x555744599528 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557445994a8 <col:21> 'const char *' lvalue ParmVar 0x55574456bea8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5557445994c8 <col:30> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         |-DeclRefExpr 0x5557445994e8 <col:42> 'P' lvalue ParmVar 0x55574456bf20 'parser' 'P'
|         `-DeclRefExpr 0x555744599508 <col:50> 'T' lvalue ParmVar 0x55574456bfc8 'x' 'T &'
|-FunctionTemplateDecl 0x55574456c598 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55574456c1b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456c238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55574456c4f8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55574456c2f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456c370 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55574456c418 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5557445997a0 <col:56, line:437:5>
|     `-ReturnStmt 0x555744599790 <line:436:9, col:63>
|       `-CallExpr 0x555744599750 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5557445995a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744599620 <col:21> 'const char *' lvalue ParmVar 0x55574456c2f8 'keyword' 'const char *'
|         |-BinaryOperator 0x5557445996f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5557445996a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x555744599680 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5557445996d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5557445996b8 <col:42> 'const int' lvalue Var 0x555744569240 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x555744599710 <col:54> 'P' lvalue ParmVar 0x55574456c370 'parser' 'P'
|         `-DeclRefExpr 0x555744599730 <col:62> 'T' lvalue ParmVar 0x55574456c418 'x' 'T &'
|-FunctionTemplateDecl 0x55574456cac8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55574456c608 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456c688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55574456ca28 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55574456c748 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456c7c8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55574456c840 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55574456c8e8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x555744599908 <col:64, line:442:5>
|     |-CallExpr 0x555744599888 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5557445997b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5557445997f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x555744599808 <col:30> 'const char *' lvalue ParmVar 0x55574456c748 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555744599828 <col:39> 'int' lvalue ParmVar 0x55574456c7c8 'flags' 'int'
|     | |-DeclRefExpr 0x555744599848 <col:46> 'P' lvalue ParmVar 0x55574456c840 'parser' 'P'
|     | `-DeclRefExpr 0x555744599868 <col:54> 'T' lvalue ParmVar 0x55574456c8e8 'x' 'T &'
|     `-ReturnStmt 0x5557445998f8 <line:441:9, col:17>
|       `-UnaryOperator 0x5557445998e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5557445998d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55574456d0c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55574456cb40 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456cbb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55574456cc38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55574456d028 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55574456cd00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456cd78 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55574456ce18 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55574456cee8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744599aa0 <col:84, line:458:5>
|     `-ReturnStmt 0x555744599a90 <line:457:9, col:64>
|       `-CallExpr 0x555744599a48 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5557445999a8 <col:28> 'const char *' lvalue ParmVar 0x55574456cd00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5557445999c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5557445999e8 <col:40> 'P' lvalue ParmVar 0x55574456cd78 'parser' 'P'
|         |-DeclRefExpr 0x555744599a08 <col:48> 'T' lvalue ParmVar 0x55574456ce18 'x' 'T &'
|         `-DeclRefExpr 0x555744599a28 <col:51> 'const V' lvalue ParmVar 0x55574456cee8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55574456d648 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55574456d140 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456d1b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55574456d238 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55574456d5a8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55574456d300 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456d378 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55574456d418 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55574456d4b8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744599c30 <col:86, line:462:5>
|     `-ReturnStmt 0x555744599c20 <line:461:9, col:73>
|       `-CallExpr 0x555744599bd8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599ac8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744599b38 <col:28> 'const char *' lvalue ParmVar 0x55574456d300 'keyword' 'const char *'
|         |-DeclRefExpr 0x555744599b58 <col:37> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         |-DeclRefExpr 0x555744599b78 <col:49> 'P' lvalue ParmVar 0x55574456d378 'parser' 'P'
|         |-DeclRefExpr 0x555744599b98 <col:57> 'T' lvalue ParmVar 0x55574456d418 'x' 'T &'
|         `-DeclRefExpr 0x555744599bb8 <col:60> 'const V' lvalue ParmVar 0x55574456d4b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55574456dca8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55574456d6c0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456d738 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55574456d7b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55574456dc08 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55574456d880 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456d900 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55574456d978 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55574456da18 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55574456dab8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x555744599dc0 <col:95, line:467:5>
|     |-CallExpr 0x555744599d38 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x555744599c48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x555744599c88 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x555744599c98 <col:37> 'const char *' lvalue ParmVar 0x55574456d880 'keyword' 'const char *'
|     | |-DeclRefExpr 0x555744599cb8 <col:46> 'int' lvalue ParmVar 0x55574456d900 'flags' 'int'
|     | |-DeclRefExpr 0x555744599cd8 <col:53> 'P' lvalue ParmVar 0x55574456d978 'parser' 'P'
|     | |-DeclRefExpr 0x555744599cf8 <col:61> 'T' lvalue ParmVar 0x55574456da18 'x' 'T &'
|     | `-DeclRefExpr 0x555744599d18 <col:64> 'const V' lvalue ParmVar 0x55574456dab8 'default_value' 'const V &'
|     `-ReturnStmt 0x555744599db0 <line:466:9, col:17>
|       `-UnaryOperator 0x555744599d98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x555744599d88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55574456e288 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55574456dd28 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456dda8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55574456de28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55574456e1e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55574456def0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456df68 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55574456e008 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55574456e0a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x555744599f68 <col:63, line:481:5>
|     `-ReturnStmt 0x555744599f58 <line:480:9, col:47>
|       `-CallExpr 0x555744599f10 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599df0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x555744599e70 <col:21> 'const char *' lvalue ParmVar 0x55574456def0 'keyword' 'const char *'
|         |-IntegerLiteral 0x555744599e90 <col:30> 'int' 0
|         |-DeclRefExpr 0x555744599eb0 <col:33> 'P' lvalue ParmVar 0x55574456df68 'parser' 'P'
|         |-DeclRefExpr 0x555744599ed0 <col:41> 'T1' lvalue ParmVar 0x55574456e008 'x1' 'T1 &'
|         `-DeclRefExpr 0x555744599ef0 <col:45> 'T2' lvalue ParmVar 0x55574456e0a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55574456e808 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55574456e300 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456e378 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55574456e3f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55574456e768 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55574456e4c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456e538 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55574456e5d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55574456e678 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55574459a108 <col:65, line:485:5>
|     `-ReturnStmt 0x55574459a0f8 <line:484:9, col:55>
|       `-CallExpr 0x55574459a0b0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x555744599f90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a010 <col:21> 'const char *' lvalue ParmVar 0x55574456e4c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459a030 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int'
|         |-DeclRefExpr 0x55574459a050 <col:41> 'P' lvalue ParmVar 0x55574456e538 'parser' 'P'
|         |-DeclRefExpr 0x55574459a070 <col:49> 'T1' lvalue ParmVar 0x55574456e5d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55574459a090 <col:53> 'T2' lvalue ParmVar 0x55574456e678 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55574456ed88 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55574456e880 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456e8f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55574456e978 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55574456ece8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55574456ea40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456eab8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55574456eb58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55574456ebf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55574459a2a8 <col:65, line:489:5>
|     `-ReturnStmt 0x55574459a298 <line:488:9, col:56>
|       `-CallExpr 0x55574459a250 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459a130 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a1b0 <col:21> 'const char *' lvalue ParmVar 0x55574456ea40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459a1d0 <col:30> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         |-DeclRefExpr 0x55574459a1f0 <col:42> 'P' lvalue ParmVar 0x55574456eab8 'parser' 'P'
|         |-DeclRefExpr 0x55574459a210 <col:50> 'T1' lvalue ParmVar 0x55574456eb58 'x1' 'T1 &'
|         `-DeclRefExpr 0x55574459a230 <col:54> 'T2' lvalue ParmVar 0x55574456ebf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55574456f308 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55574456ee00 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456ee78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55574456eef8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55574456f268 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55574456efc0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456f038 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55574456f0d8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55574456f178 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55574459a4f8 <col:66, line:493:5>
|     `-ReturnStmt 0x55574459a4e8 <line:492:9, col:68>
|       `-CallExpr 0x55574459a4a0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459a2d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a350 <col:21> 'const char *' lvalue ParmVar 0x55574456efc0 'keyword' 'const char *'
|         |-BinaryOperator 0x55574459a420 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55574459a3d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55574459a3b0 <col:30> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55574459a408 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55574459a3e8 <col:42> 'const int' lvalue Var 0x555744569240 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55574459a440 <col:54> 'P' lvalue ParmVar 0x55574456f038 'parser' 'P'
|         |-DeclRefExpr 0x55574459a460 <col:62> 'T1' lvalue ParmVar 0x55574456f0d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55574459a480 <col:66> 'T2' lvalue ParmVar 0x55574456f178 'x2' 'T2 &'
|-FunctionTemplateDecl 0x555744570998 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55574456f380 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55574456f3f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55574456f478 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5557445708f8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55574456f540 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55574456f5c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55574456f638 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x555744570708 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5557445707a8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55574459a688 <col:74, line:498:5>
|     |-CallExpr 0x55574459a600 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55574459a510 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55574459a550 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55574459a560 <col:30> 'const char *' lvalue ParmVar 0x55574456f540 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55574459a580 <col:39> 'int' lvalue ParmVar 0x55574456f5c0 'flags' 'int'
|     | |-DeclRefExpr 0x55574459a5a0 <col:46> 'P' lvalue ParmVar 0x55574456f638 'parser' 'P'
|     | |-DeclRefExpr 0x55574459a5c0 <col:54> 'T1' lvalue ParmVar 0x555744570708 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55574459a5e0 <col:58> 'T2' lvalue ParmVar 0x5557445707a8 'x2' 'T2 &'
|     `-ReturnStmt 0x55574459a678 <line:497:9, col:17>
|       `-UnaryOperator 0x55574459a660 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459a650 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555744570cf8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x555744570a18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744570c58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555744570ad0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744570b48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55574459a7d0 <col:52, line:509:5>
|     `-ReturnStmt 0x55574459a7c0 <line:508:9, col:44>
|       `-CallExpr 0x55574459a788 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459a6b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a728 <col:26> 'const char *' lvalue ParmVar 0x555744570ad0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55574459a748 <col:35> 'int' 0
|         `-DeclRefExpr 0x55574459a768 <col:38> 'P' lvalue ParmVar 0x555744570b48 'parser' 'P'
|-FunctionTemplateDecl 0x555744570ff8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x555744570d60 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744570f58 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555744570e10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744570e88 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55574459a910 <col:54, line:513:5>
|     `-ReturnStmt 0x55574459a900 <line:512:9, col:52>
|       `-CallExpr 0x55574459a8c8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459a7f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a868 <col:26> 'const char *' lvalue ParmVar 0x555744570e10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459a888 <col:35> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int'
|         `-DeclRefExpr 0x55574459a8a8 <col:46> 'P' lvalue ParmVar 0x555744570e88 'parser' 'P'
|-FunctionTemplateDecl 0x5557445712f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x555744571060 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744571258 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555744571110 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744571188 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55574459aa50 <col:54, line:517:5>
|     `-ReturnStmt 0x55574459aa40 <line:516:9, col:53>
|       `-CallExpr 0x55574459aa08 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459a938 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459a9a8 <col:26> 'const char *' lvalue ParmVar 0x555744571110 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459a9c8 <col:35> 'const int' lvalue Var 0x555744569240 'positional' 'const int'
|         `-DeclRefExpr 0x55574459a9e8 <col:47> 'P' lvalue ParmVar 0x555744571188 'parser' 'P'
|-FunctionTemplateDecl 0x5557445715f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x555744571360 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744571558 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555744571410 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744571488 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55574459ac40 <col:55, line:521:5>
|     `-ReturnStmt 0x55574459ac30 <line:520:9, col:65>
|       `-CallExpr 0x55574459abf8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459aa78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459aae8 <col:26> 'const char *' lvalue ParmVar 0x555744571410 'keyword' 'const char *'
|         |-BinaryOperator 0x55574459abb8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55574459ab68 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55574459ab48 <col:35> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55574459aba0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55574459ab80 <col:47> 'const int' lvalue Var 0x555744569240 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55574459abd8 <col:59> 'P' lvalue ParmVar 0x555744571488 'parser' 'P'
|-FunctionTemplateDecl 0x5557445719c8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x555744571660 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744571928 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555744571710 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744571790 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555744571808 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55574459ad80 <col:63, line:526:5>
|     |-CallExpr 0x55574459ad08 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55574459ac58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55574459ac98 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55574459aca8 <col:35> 'const char *' lvalue ParmVar 0x555744571710 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55574459acc8 <col:44> 'int' lvalue ParmVar 0x555744571790 'flags' 'int'
|     | `-DeclRefExpr 0x55574459ace8 <col:51> 'P' lvalue ParmVar 0x555744571808 'parser' 'P'
|     `-ReturnStmt 0x55574459ad70 <line:525:9, col:17>
|       `-UnaryOperator 0x55574459ad58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459ad48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555744571e18 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x555744571a38 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744571ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744571d78 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555744571b78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744571bf0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x555744571c98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55574459aed8 <col:58, line:541:5>
|     `-ReturnStmt 0x55574459aec8 <line:540:9, col:39>
|       `-CallExpr 0x55574459ae90 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459adb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459ae30 <col:21> 'const char *' lvalue ParmVar 0x555744571b78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459ae50 <col:30> 'P' lvalue ParmVar 0x555744571bf0 'parser' 'P'
|         `-DeclRefExpr 0x55574459ae70 <col:38> 'T' lvalue ParmVar 0x555744571c98 'x' 'T &'
|-FunctionTemplateDecl 0x555744572268 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x555744571e88 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744571f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557445721c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555744571fc8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744572040 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5557445720e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55574459b010 <col:60, line:545:5>
|     `-ReturnStmt 0x55574459b000 <line:544:9, col:41>
|       `-CallExpr 0x55574459afc8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459af00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459af68 <col:23> 'const char *' lvalue ParmVar 0x555744571fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459af88 <col:32> 'P' lvalue ParmVar 0x555744572040 'parser' 'P'
|         `-DeclRefExpr 0x55574459afa8 <col:40> 'T' lvalue ParmVar 0x5557445720e8 'x' 'T &'
|-FunctionTemplateDecl 0x5557445726b8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5557445722d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744572358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744572618 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555744572418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744572490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x555744572538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55574459b148 <col:60, line:549:5>
|     `-ReturnStmt 0x55574459b138 <line:548:9, col:41>
|       `-CallExpr 0x55574459b100 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459b038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459b0a0 <col:23> 'const char *' lvalue ParmVar 0x555744572418 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459b0c0 <col:32> 'P' lvalue ParmVar 0x555744572490 'parser' 'P'
|         `-DeclRefExpr 0x55574459b0e0 <col:40> 'T' lvalue ParmVar 0x555744572538 'x' 'T &'
|-FunctionTemplateDecl 0x555744572b08 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x555744572728 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557445727a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744572a68 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555744572868 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445728e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x555744572988 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55574459b280 <col:61, line:553:5>
|     `-ReturnStmt 0x55574459b270 <line:552:9, col:42>
|       `-CallExpr 0x55574459b238 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459b170 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459b1d8 <col:24> 'const char *' lvalue ParmVar 0x555744572868 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459b1f8 <col:33> 'P' lvalue ParmVar 0x5557445728e0 'parser' 'P'
|         `-DeclRefExpr 0x55574459b218 <col:41> 'T' lvalue ParmVar 0x555744572988 'x' 'T &'
|-FunctionTemplateDecl 0x555744572fe8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x555744572b78 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744572bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744572f48 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555744572cb8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744572d38 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x555744572db0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x555744572e58 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55574459b3f8 <col:69, line:557:5>
|     `-ReturnStmt 0x55574459b3e8 <line:556:9, col:46>
|       `-CallExpr 0x55574459b3a8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459b2a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459b328 <col:21> 'const char *' lvalue ParmVar 0x555744572cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459b348 <col:30> 'int' lvalue ParmVar 0x555744572d38 'flags' 'int'
|         |-DeclRefExpr 0x55574459b368 <col:37> 'P' lvalue ParmVar 0x555744572db0 'parser' 'P'
|         `-DeclRefExpr 0x55574459b388 <col:45> 'T' lvalue ParmVar 0x555744572e58 'x' 'T &'
|-FunctionTemplateDecl 0x5557445732f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x555744573060 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744573258 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x555744573110 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744573188 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55574459b538 <col:56, line:571:5>
|     `-ReturnStmt 0x55574459b528 <line:570:9, col:48>
|       `-CallExpr 0x55574459b4f0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459b420 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459b490 <col:30> 'const char *' lvalue ParmVar 0x555744573110 'keyword' 'const char *'
|         |-IntegerLiteral 0x55574459b4b0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55574459b4d0 <col:42> 'P' lvalue ParmVar 0x555744573188 'parser' 'P'
|-FunctionTemplateDecl 0x555744573688 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x555744573360 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5557445735e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x555744573410 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744573490 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555744573508 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55574459b708 <col:67, line:576:5>
|     |-CallExpr 0x55574459b690 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55574459b550 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55574459b590 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55574459b5a0 <col:39> 'const char *' lvalue ParmVar 0x555744573410 'keyword' 'const char *'
|     | |-BinaryOperator 0x55574459b650 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55574459b600 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55574459b5c0 <col:48> 'int' lvalue ParmVar 0x555744573490 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55574459b638 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55574459b618 <col:56> 'const int' lvalue Var 0x555744569430 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55574459b670 <col:68> 'P' lvalue ParmVar 0x555744573508 'parser' 'P'
|     `-ReturnStmt 0x55574459b6f8 <line:575:9, col:17>
|       `-UnaryOperator 0x55574459b6e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459b6d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555744573ad8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5557445736f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744573778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744573a38 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x555744573838 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445738b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x555744573958 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55574459b878 <col:62, line:592:5>
|     `-ReturnStmt 0x55574459b868 <line:591:9, col:51>
|       `-CallExpr 0x55574459b828 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459b738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459b7a8 <col:30> 'const char *' lvalue ParmVar 0x555744573838 'keyword' 'const char *'
|         |-IntegerLiteral 0x55574459b7c8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55574459b7e8 <col:42> 'P' lvalue ParmVar 0x5557445738b0 'parser' 'P'
|         `-DeclRefExpr 0x55574459b808 <col:50> 'T' lvalue ParmVar 0x555744573958 'x' 'T &'
|-FunctionTemplateDecl 0x555744573fb8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x555744573b48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744573bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744573f18 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x555744573c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744573d08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555744573d80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x555744573e28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55574459ba70 <col:73, line:597:5>
|     |-CallExpr 0x55574459b9f0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55574459b890 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55574459b8d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55574459b8e0 <col:39> 'const char *' lvalue ParmVar 0x555744573c88 'keyword' 'const char *'
|     | |-BinaryOperator 0x55574459b990 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55574459b940 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55574459b900 <col:48> 'int' lvalue ParmVar 0x555744573d08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55574459b978 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55574459b958 <col:56> 'const int' lvalue Var 0x555744569430 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55574459b9b0 <col:68> 'P' lvalue ParmVar 0x555744573d80 'parser' 'P'
|     | `-DeclRefExpr 0x55574459b9d0 <col:76> 'T' lvalue ParmVar 0x555744573e28 'x' 'T &'
|     `-ReturnStmt 0x55574459ba60 <line:596:9, col:17>
|       `-UnaryOperator 0x55574459ba48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459ba38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555744574568 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x555744574030 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557445740a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5557445744c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x555744574168 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445741e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5557445743a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55574459bbe0 <col:65, line:614:5>
|     `-ReturnStmt 0x55574459bbd0 <line:613:9, col:46>
|       `-CallExpr 0x55574459bb90 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459baa0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459bb10 <col:25> 'const char *' lvalue ParmVar 0x555744574168 'keyword' 'const char *'
|         |-IntegerLiteral 0x55574459bb30 <col:34> 'int' 0
|         |-DeclRefExpr 0x55574459bb50 <col:37> 'P' lvalue ParmVar 0x5557445741e0 'parser' 'P'
|         `-DeclRefExpr 0x55574459bb70 <col:45> 'Vector<T>' lvalue ParmVar 0x5557445743a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555744574998 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5557445745d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557445748f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x555744574690 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445747e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55574459be00 <col:55, line:618:5>
|     `-ReturnStmt 0x55574459bdf0 <line:617:9, col:55>
|       `-CallExpr 0x55574459bdb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459bc08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459bc78 <col:25> 'const char *' lvalue ParmVar 0x555744574690 'keyword' 'const char *'
|         |-IntegerLiteral 0x55574459bc98 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55574459bd70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55574459bd90 <col:54> 'Vector<T>' lvalue ParmVar 0x5557445747e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x555744574f68 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x555744574a00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744574a78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744574ec8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555744574b38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744574bb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555744574c30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555744574d80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55574459bff8 <col:76, line:623:5>
|     |-CallExpr 0x55574459bf78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55574459be18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55574459be58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55574459be68 <col:34> 'const char *' lvalue ParmVar 0x555744574b38 'keyword' 'const char *'
|     | |-BinaryOperator 0x55574459bf18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55574459bec8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55574459be88 <col:43> 'int' lvalue ParmVar 0x555744574bb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55574459bf00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55574459bee0 <col:51> 'const int' lvalue Var 0x555744569430 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55574459bf38 <col:63> 'P' lvalue ParmVar 0x555744574c30 'parser' 'P'
|     | `-DeclRefExpr 0x55574459bf58 <col:71> 'Vector<T>' lvalue ParmVar 0x555744574d80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55574459bfe8 <line:622:9, col:17>
|       `-UnaryOperator 0x55574459bfd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459bfc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5557445754a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x555744574fe0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744575058 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744575408 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x555744575118 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744575198 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557445752e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55574459c260 <col:66, line:627:5>
|     `-ReturnStmt 0x55574459c250 <line:626:9, col:59>
|       `-CallExpr 0x55574459c210 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55574459c028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55574459c098 <col:25> 'const char *' lvalue ParmVar 0x555744575118 'keyword' 'const char *'
|         |-DeclRefExpr 0x55574459c0b8 <col:34> 'int' lvalue ParmVar 0x555744575198 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55574459c1d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55574459c1f0 <col:58> 'Vector<T>' lvalue ParmVar 0x5557445752e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x555744575538 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55574459c2e0 <col:25, line:633:5>
|   `-ReturnStmt 0x55574459c2d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55574459c2b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55574459c288 <col:16> 'const bool' lvalue ->_status 0x5557445837d8
|         `-CXXThisExpr 0x55574459c278 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5557445756b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5557445755f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55574459c3c8 <col:27, line:639:5>
|   |-BinaryOperator 0x55574459c370 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55574459c2f8 <col:9> 'bool' lvalue ParmVar 0x5557445755f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55574459c358 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55574459c328 <col:13> 'bool' lvalue ->_status 0x5557445837d8
|   |     `-CXXThisExpr 0x55574459c318 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55574459c3b8 <line:638:9, col:17>
|     `-UnaryOperator 0x55574459c3a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55574459c390 <col:17> 'Args *' this
|-CXXMethodDecl 0x555744575838 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555744575778 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55574459c4b8 <col:39, line:644:5>
|   |-BinaryOperator 0x55574459c460 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55574459c3e8 <col:9> 'bool' lvalue ParmVar 0x555744575778 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55574459c448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55574459c418 <col:13> 'const bool' lvalue ->_status 0x5557445837d8
|   |     `-CXXThisExpr 0x55574459c408 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55574459c4a8 <line:643:9, col:17>
|     `-UnaryOperator 0x55574459c490 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55574459c480 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555744575900 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55574459c560 <col:30, line:651:5>
|   `-ReturnStmt 0x55574459c550 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55574459c538 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55574459c508 <col:16> 'bool' lvalue ->_read_status 0x555744478990
|         `-ImplicitCastExpr 0x55574459c4e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55574459c4d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x555744575a48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5557445759b8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55574459c668 <col:32, line:658:5>
|   |-BinaryOperator 0x55574459c610 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55574459c578 <col:9> 'bool' lvalue ParmVar 0x5557445759b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55574459c5f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55574459c5c8 <col:13> 'bool' lvalue ->_read_status 0x555744478990
|   |     `-ImplicitCastExpr 0x55574459c5a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55574459c598 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55574459c658 <line:657:9, col:17>
|     `-UnaryOperator 0x55574459c640 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55574459c630 <col:17> 'Args *' this
|-CXXMethodDecl 0x555744575b98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x555744575b08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55574459c778 <col:44, line:663:5>
|   |-BinaryOperator 0x55574459c720 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55574459c688 <col:9> 'bool' lvalue ParmVar 0x555744575b08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55574459c708 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55574459c6d8 <col:13> 'bool' lvalue ->_read_status 0x555744478990
|   |     `-ImplicitCastExpr 0x55574459c6b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55574459c6a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55574459c768 <line:662:9, col:17>
|     `-UnaryOperator 0x55574459c750 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55574459c740 <col:17> 'const Args *' this
|-CXXMethodDecl 0x555744575c60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x555744575d28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x555744575df0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x555744575eb8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5557445761c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x555744575f58 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555744576128 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x555744576038 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55574459cb30 <col:19, line:706:5>
|     `-IfStmt 0x55574459cb08 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55574459c878 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55574459ca38 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55574459ca08 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55574459c9c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55574459c8d0 <col:42> '<bound member function type>' ->simple_slot 0x555744595c80
|       |     | `-CXXThisExpr 0x55574459c8c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55574459c968 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55574459c920 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x555744302eb8
|       |     | `-DeclRefExpr 0x55574459c900 <col:55> 'T' lvalue ParmVar 0x555744576038 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55574459c9a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55574459caf8 <line:705:13, col:34>
|         `-CallExpr 0x55574459cad0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55574459ca58 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55574459cab0 <col:33> 'T' lvalue ParmVar 0x555744576038 'x' 'T &'
|-FunctionTemplateDecl 0x555744576498 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x555744576228 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5557445763f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x555744576308 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55574459cf10 <col:31, line:717:5>
|     |-DeclStmt 0x55574459cc70 <line:713:9, col:23>
|     | `-VarDecl 0x55574459cb58 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55574459cc48 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55574459cbd0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55574459cc28 <col:21> 'T' lvalue ParmVar 0x555744576308 'x' 'T &'
|     |-IfStmt 0x55574459cec0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55574459cd68 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55574459cea0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55574459ce40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55574459cdd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|     |   | `-DeclRefExpr 0x55574459cdb0 <col:14> 'T *' lvalue Var 0x55574459cb58 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55574459ce80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55574459cef8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55574459ced8 <col:16> 'T *' lvalue Var 0x55574459cb58 's' 'T *'
|-FunctionTemplateDecl 0x5557445768a8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5557445764f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555744576578 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555744576808 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x555744576658 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5557445766f8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55574459d220 <col:37, line:726:5>
|     |-IfStmt 0x55574459d1b0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55574459d1d0 <line:723:13, col:26>
|     | | `-VarDecl 0x55574459cf78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55574459d068 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55574459cff0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55574459d048 <col:25> 'T' lvalue ParmVar 0x555744576658 'x' 'T &'
|     | |-DeclRefExpr 0x55574459d090 <col:16> 'T *' lvalue Var 0x55574459cf78 's' 'T *'
|     | `-BinaryOperator 0x55574459d190 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55574459d140 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55574459d0d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|     |   | `-DeclRefExpr 0x55574459d0b0 <col:14> 'T *' lvalue Var 0x55574459cf78 's' 'T *'
|     |   `-DeclRefExpr 0x55574459d170 <col:18> 'const V' lvalue ParmVar 0x5557445766f8 'value' 'const V &'
|     `-ReturnStmt 0x55574459d210 <line:725:9, col:17>
|       `-UnaryOperator 0x55574459d1f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55574459d1e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x555744576ca8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x555744576910 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x555744576c08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5557445769c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744576a40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x555744576ae8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55574459e040 <col:65, line:737:5>
|     |-DeclStmt 0x55574459d2b8 <line:732:9, col:26>
|     | `-VarDecl 0x55574459d250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55574459e008 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55574459e028 <line:733:13, col:58>
|       | `-VarDecl 0x55574459d2e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55574459d4c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55574459d490 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55574459d478 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55574459d458 <col:26, col:58> 'String' (CXXTemporary 0x55574459d458)
|       |           `-CXXMemberCallExpr 0x55574459d3e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55574459d358 <col:26> '<bound member function type>' ->find 0x555744595298
|       |             | `-CXXThisExpr 0x55574459d348 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55574459d420 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55574459d388 <col:31> 'const char *' lvalue ParmVar 0x5557445769c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55574459d438 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55574459d3a8 <col:40> 'int' lvalue ParmVar 0x555744576a40 'flags' 'int'
|       |             `-DeclRefExpr 0x55574459d3c8 <col:47> 'Args::Slot *' lvalue Var 0x55574459d250 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55574459d578 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55574459d560 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55574459d540 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55574459d510 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |       `-ImplicitCastExpr 0x55574459d4f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55574459d4d8 <col:20> 'String' lvalue Var 0x55574459d2e0 'str' 'String'
|       `-CompoundStmt 0x55574459dfe8 <col:61, line:736:9>
|         |-DeclStmt 0x55574459da30 <line:734:13, col:76>
|         | `-VarDecl 0x55574459d5c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55574459da00 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55574459d970 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55574459d9b8 <col:60> 'T' lvalue ParmVar 0x555744576ae8 'variable' 'T &'
|         |     `-UnaryOperator 0x55574459d9e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55574459d9d8 <col:71> 'Args *' this
|         `-CallExpr 0x55574459dfb8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55574459da58 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|           | `-CXXThisExpr 0x55574459da48 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55574459df78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55574459da88 <col:23> 'T *' lvalue Var 0x55574459d5c8 's' 'T *'
|           | `-CallExpr 0x55574459df38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55574459dd10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55574459de10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55574459de30 <col:86> 'String' lvalue Var 0x55574459d2e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55574459dee0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55574459de70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|           |   | `-DeclRefExpr 0x55574459de50 <col:92> 'T *' lvalue Var 0x55574459d5c8 's' 'T *'
|           |   `-UnaryOperator 0x55574459df20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55574459df10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55574459df98 <col:103> 'Args::Slot *' lvalue Var 0x55574459d250 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557445771f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x555744576d18 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555744576d98 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x555744577158 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x555744576e58 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744576ed8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555744576f78 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x555744577018 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55574459eee0 <col:88, line:745:5>
|     |-DeclStmt 0x55574459e0d8 <line:741:9, col:26>
|     | `-VarDecl 0x55574459e070 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55574459e2f8 <line:742:9, col:55>
|     | `-VarDecl 0x55574459e100 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55574459e2e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55574459e2b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55574459e298 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55574459e278 <col:22, col:54> 'String' (CXXTemporary 0x55574459e278)
|     |           `-CXXMemberCallExpr 0x55574459e208 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55574459e178 <col:22> '<bound member function type>' ->find 0x555744595298
|     |             | `-CXXThisExpr 0x55574459e168 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55574459e240 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55574459e1a8 <col:27> 'const char *' lvalue ParmVar 0x555744576e58 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55574459e258 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55574459e1c8 <col:36> 'int' lvalue ParmVar 0x555744576ed8 'flags' 'int'
|     |             `-DeclRefExpr 0x55574459e1e8 <col:43> 'Args::Slot *' lvalue Var 0x55574459e070 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55574459e6d0 <line:743:9, col:72>
|     | `-VarDecl 0x55574459e348 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55574459e6a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55574459e610 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55574459e658 <col:56> 'T' lvalue ParmVar 0x555744576f78 'variable' 'T &'
|     |     `-UnaryOperator 0x55574459e688 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55574459e678 <col:67> 'Args *' this
|     `-CallExpr 0x55574459eeb0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55574459e6f8 <col:9> '<bound member function type>' ->postparse 0x5557445954a8
|       | `-CXXThisExpr 0x55574459e6e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55574459ee70 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55574459e728 <col:19> 'T *' lvalue Var 0x55574459e348 's' 'T *'
|       | `-ParenExpr 0x55574459ee50 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55574459ee20 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55574459ee08 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55574459edf0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55574459edd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55574459eda0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |     |       `-ImplicitCastExpr 0x55574459ed88 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55574459e748 <col:25> 'String' lvalue Var 0x55574459e100 'str' 'String'
|       |     |-CallExpr 0x55574459ebf8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55574459e9d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55574459ead0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55574459eaf0 <col:89> 'String' lvalue Var 0x55574459e100 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55574459eba0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55574459eb30 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|       |     | | `-DeclRefExpr 0x55574459eb10 <col:95> 'T *' lvalue Var 0x55574459e348 's' 'T *'
|       |     | `-UnaryOperator 0x55574459ebe0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55574459ebd0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55574459ed68 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55574459ed48 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55574459ed18 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55574459ecc8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55574459ec58 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|       |         | | `-DeclRefExpr 0x55574459ec38 <col:109> 'T *' lvalue Var 0x55574459e348 's' 'T *'
|       |         | `-DeclRefExpr 0x55574459ecf8 <col:113> 'const V' lvalue ParmVar 0x555744577018 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55574459ed38 <col:120> 'bool' true
|       `-DeclRefExpr 0x55574459ee90 <col:128> 'Args::Slot *' lvalue Var 0x55574459e070 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555744577728 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x555744577270 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557445772e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744577688 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5557445773a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744577428 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557445774a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x555744577548 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55574459fad8 <col:75, line:754:5>
|     |-DeclStmt 0x55574459ef88 <line:749:9, col:26>
|     | `-VarDecl 0x55574459ef20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55574459faa0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55574459fac0 <line:750:13, col:58>
|       | `-VarDecl 0x55574459efb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55574459f190 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55574459f160 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55574459f148 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55574459f128 <col:26, col:58> 'String' (CXXTemporary 0x55574459f128)
|       |           `-CXXMemberCallExpr 0x55574459f0b8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55574459f028 <col:26> '<bound member function type>' ->find 0x555744595298
|       |             | `-CXXThisExpr 0x55574459f018 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55574459f0f0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55574459f058 <col:31> 'const char *' lvalue ParmVar 0x5557445773a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55574459f108 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55574459f078 <col:40> 'int' lvalue ParmVar 0x555744577428 'flags' 'int'
|       |             `-DeclRefExpr 0x55574459f098 <col:47> 'Args::Slot *' lvalue Var 0x55574459ef20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55574459f248 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55574459f230 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55574459f210 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55574459f1e0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |       `-ImplicitCastExpr 0x55574459f1c8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55574459f1a8 <col:20> 'String' lvalue Var 0x55574459efb0 'str' 'String'
|       `-CompoundStmt 0x55574459fa80 <col:61, line:753:9>
|         |-DeclStmt 0x55574459f620 <line:751:13, col:63>
|         | `-VarDecl 0x55574459f298 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55574459f5f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55574459f560 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55574459f5a8 <col:47> 'T' lvalue ParmVar 0x555744577548 'variable' 'T &'
|         |     `-UnaryOperator 0x55574459f5d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55574459f5c8 <col:58> 'Args *' this
|         `-CallExpr 0x55574459fa50 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55574459f648 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|           | `-CXXThisExpr 0x55574459f638 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55574459fa10 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55574459f678 <col:23> 'T *' lvalue Var 0x55574459f298 's' 'T *'
|           | `-CallExpr 0x55574459f9d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55574459f860 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55574459f8a8 <col:56> 'P' lvalue ParmVar 0x5557445774a0 'parser' 'P'
|           |   |-DeclRefExpr 0x55574459f8c8 <col:64> 'String' lvalue Var 0x55574459efb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55574459f978 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55574459f908 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|           |   | `-DeclRefExpr 0x55574459f8e8 <col:70> 'T *' lvalue Var 0x55574459f298 's' 'T *'
|           |   `-UnaryOperator 0x55574459f9b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55574459f9a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55574459fa30 <col:81> 'Args::Slot *' lvalue Var 0x55574459ef20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555744577d88 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5557445777a0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x555744577818 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x555744577898 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x555744577ce8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x555744577960 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445779e0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x555744577a58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x555744577af8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x555744577b98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5557445a2be0 <col:98, line:762:5>
|     |-DeclStmt 0x55574459fb70 <line:758:9, col:26>
|     | `-VarDecl 0x55574459fb08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55574459fd90 <line:759:9, col:55>
|     | `-VarDecl 0x55574459fb98 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55574459fd78 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55574459fd48 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55574459fd30 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55574459fd10 <col:22, col:54> 'String' (CXXTemporary 0x55574459fd10)
|     |           `-CXXMemberCallExpr 0x55574459fca0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55574459fc10 <col:22> '<bound member function type>' ->find 0x555744595298
|     |             | `-CXXThisExpr 0x55574459fc00 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55574459fcd8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55574459fc40 <col:27> 'const char *' lvalue ParmVar 0x555744577960 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55574459fcf0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55574459fc60 <col:36> 'int' lvalue ParmVar 0x5557445779e0 'flags' 'int'
|     |             `-DeclRefExpr 0x55574459fc80 <col:43> 'Args::Slot *' lvalue Var 0x55574459fb08 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5557445a01b0 <line:760:9, col:59>
|     | `-VarDecl 0x55574459fde8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5557445a0180 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5557445a00f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5557445a0138 <col:43> 'T' lvalue ParmVar 0x555744577af8 'variable' 'T &'
|     |     `-UnaryOperator 0x5557445a0168 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5557445a0158 <col:54> 'Args *' this
|     `-CallExpr 0x5557445a2bb0 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5557445a01d8 <col:9> '<bound member function type>' ->postparse 0x5557445954a8
|       | `-CXXThisExpr 0x5557445a01c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5557445a07f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5557445a0208 <col:19> 'T *' lvalue Var 0x55574459fde8 's' 'T *'
|       | `-ParenExpr 0x5557445a07d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5557445a07a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5557445a0790 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5557445a0778 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5557445a0758 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5557445a0728 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |     |       `-ImplicitCastExpr 0x5557445a0710 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5557445a0228 <col:25> 'String' lvalue Var 0x55574459fb98 'str' 'String'
|       |     |-CallExpr 0x5557445a0580 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5557445a0410 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5557445a0458 <col:59> 'P' lvalue ParmVar 0x555744577a58 'parser' 'P'
|       |     | |-DeclRefExpr 0x5557445a0478 <col:67> 'String' lvalue Var 0x55574459fb98 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5557445a0528 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5557445a04b8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|       |     | | `-DeclRefExpr 0x5557445a0498 <col:73> 'T *' lvalue Var 0x55574459fde8 's' 'T *'
|       |     | `-UnaryOperator 0x5557445a0568 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5557445a0558 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5557445a06f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5557445a06d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5557445a06a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5557445a0650 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5557445a05e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|       |         | | `-DeclRefExpr 0x5557445a05c0 <col:87> 'T *' lvalue Var 0x55574459fde8 's' 'T *'
|       |         | `-DeclRefExpr 0x5557445a0680 <col:91> 'const V' lvalue ParmVar 0x555744577b98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5557445a06c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5557445a0818 <col:106> 'Args::Slot *' lvalue Var 0x55574459fb08 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5557445783f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x555744577e08 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x555744577e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x555744577f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x555744578358 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x555744577fd0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744578050 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5557445780c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x555744578168 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x555744578208 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5557445a3bb8 <col:60, line:773:5>
|     |-DeclStmt 0x5557445a2c88 <line:767:9, col:26>
|     | `-VarDecl 0x5557445a2c20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557445a3b80 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5557445a3ba0 <line:768:13, col:58>
|       | `-VarDecl 0x5557445a2cb0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557445a2e90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557445a2e60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557445a2e48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557445a2e28 <col:26, col:58> 'String' (CXXTemporary 0x5557445a2e28)
|       |           `-CXXMemberCallExpr 0x5557445a2db8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557445a2d28 <col:26> '<bound member function type>' ->find 0x555744595298
|       |             | `-CXXThisExpr 0x5557445a2d18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557445a2df0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557445a2d58 <col:31> 'const char *' lvalue ParmVar 0x555744577fd0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557445a2e08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557445a2d78 <col:40> 'int' lvalue ParmVar 0x555744578050 'flags' 'int'
|       |             `-DeclRefExpr 0x5557445a2d98 <col:47> 'Args::Slot *' lvalue Var 0x5557445a2c20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557445a2f48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557445a2f30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557445a2f10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557445a2ee0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |       `-ImplicitCastExpr 0x5557445a2ec8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557445a2ea8 <col:20> 'String' lvalue Var 0x5557445a2cb0 'str' 'String'
|       `-CompoundStmt 0x5557445a3b58 <col:61, line:772:9>
|         |-DeclStmt 0x5557445a3280 <line:769:13, col:66>
|         | `-VarDecl 0x5557445a2f98 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5557445a3250 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557445a31c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557445a3208 <col:49> 'T1' lvalue ParmVar 0x555744578168 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5557445a3238 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557445a3228 <col:61> 'Args *' this
|         |-DeclStmt 0x5557445a35f0 <line:770:13, col:66>
|         | `-VarDecl 0x5557445a3308 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5557445a35c0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5557445a3530 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5557445a3578 <col:49> 'T2' lvalue ParmVar 0x555744578208 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5557445a35a8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5557445a3598 <col:61> 'Args *' this
|         `-CallExpr 0x5557445a3b28 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5557445a3618 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|           | `-CXXThisExpr 0x5557445a3608 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5557445a3ae8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5557445a3688 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5557445a3648 <col:23> 'T1 *' lvalue Var 0x5557445a2f98 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5557445a3668 <col:29> 'T2 *' lvalue Var 0x5557445a3308 's2' 'T2 *'
|           | `-CallExpr 0x5557445a3aa0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5557445a3870 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5557445a38b8 <col:63> 'P' lvalue ParmVar 0x5557445780c8 'parser' 'P'
|           |   |-DeclRefExpr 0x5557445a38d8 <col:71> 'String' lvalue Var 0x5557445a2cb0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5557445a3988 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557445a3918 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|           |   | `-DeclRefExpr 0x5557445a38f8 <col:77> 'T1 *' lvalue Var 0x5557445a2f98 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5557445a3a48 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5557445a39d8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|           |   | `-DeclRefExpr 0x5557445a39b8 <col:82> 'T2 *' lvalue Var 0x5557445a3308 's2' 'T2 *'
|           |   `-UnaryOperator 0x5557445a3a88 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5557445a3a78 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5557445a3b08 <col:94> 'Args::Slot *' lvalue Var 0x5557445a2c20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555744580c48 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x555744578478 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744580ba8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555744578530 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445785b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x555744578628 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5557445a40d0 <col:67, line:780:5>
|     |-DeclStmt 0x5557445a3c50 <line:777:9, col:26>
|     | `-VarDecl 0x5557445a3be8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5557445a4098 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5557445a40b8 <line:778:13, col:58>
|       | `-VarDecl 0x5557445a3c78 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5557445a3e58 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5557445a3e28 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5557445a3e10 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5557445a3df0 <col:26, col:58> 'String' (CXXTemporary 0x5557445a3df0)
|       |           `-CXXMemberCallExpr 0x5557445a3d80 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5557445a3cf0 <col:26> '<bound member function type>' ->find 0x555744595298
|       |             | `-CXXThisExpr 0x5557445a3ce0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5557445a3db8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557445a3d20 <col:31> 'const char *' lvalue ParmVar 0x555744578530 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5557445a3dd0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5557445a3d40 <col:40> 'int' lvalue ParmVar 0x5557445785b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5557445a3d60 <col:47> 'Args::Slot *' lvalue Var 0x5557445a3be8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5557445a3f10 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5557445a3ef8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5557445a3ed8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5557445a3ea8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|       |       `-ImplicitCastExpr 0x5557445a3e90 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5557445a3e70 <col:20> 'String' lvalue Var 0x5557445a3c78 'str' 'String'
|       `-CallExpr 0x5557445a4068 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5557445a3f38 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|         | `-CXXThisExpr 0x5557445a3f28 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5557445a4018 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5557445a3f88 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5557445a3f68 <col:23> 'P' lvalue ParmVar 0x555744578628 'parser' 'P'
|         | |-DeclRefExpr 0x5557445a3fd0 <col:36> 'String' lvalue Var 0x5557445a3c78 'str' 'String'
|         | `-UnaryOperator 0x5557445a4000 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5557445a3ff0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5557445a4048 <col:49> 'Args::Slot *' lvalue Var 0x5557445a3be8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x555744580fe8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555744580cb8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x555744580f48 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x555744580d70 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744580df0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555744580e68 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5557445a4a40 <col:71, line:792:5>
|     |-DeclStmt 0x5557445a4168 <line:784:9, col:26>
|     | `-VarDecl 0x5557445a4100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557445a4238 <line:785:9, col:29>
|     | `-VarDecl 0x5557445a4198 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557445a4220 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557445a4200 <col:28> 'int' 1
|     |-WhileStmt 0x5557445a48f0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5557445a4910 <line:786:16, col:61>
|     | | `-VarDecl 0x5557445a4260 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557445a4440 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557445a4410 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557445a43f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557445a43d8 <col:29, col:61> 'String' (CXXTemporary 0x5557445a43d8)
|     | |           `-CXXMemberCallExpr 0x5557445a4368 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557445a42d8 <col:29> '<bound member function type>' ->find 0x555744595298
|     | |             | `-CXXThisExpr 0x5557445a42c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557445a43a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a4308 <col:34> 'const char *' lvalue ParmVar 0x555744580d70 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557445a43b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a4328 <col:43> 'int' lvalue ParmVar 0x555744580df0 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557445a4348 <col:50> 'Args::Slot *' lvalue Var 0x5557445a4100 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557445a44f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557445a44e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557445a44c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557445a4490 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|     | |       `-ImplicitCastExpr 0x5557445a4478 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557445a4458 <col:23> 'String' lvalue Var 0x5557445a4260 'str' 'String'
|     | `-CompoundStmt 0x5557445a48c8 <col:64, line:790:9>
|     |   |-CallExpr 0x5557445a4650 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5557445a4520 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|     |   | | `-CXXThisExpr 0x5557445a4510 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5557445a4600 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5557445a4570 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5557445a4550 <col:23> 'P' lvalue ParmVar 0x555744580e68 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5557445a45b8 <col:36> 'String' lvalue Var 0x5557445a4260 'str' 'String'
|     |   | | `-UnaryOperator 0x5557445a45e8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5557445a45d8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5557445a4630 <col:49> 'Args::Slot *' lvalue Var 0x5557445a4100 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5557445a47e8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557445a4680 <col:13> 'int' lvalue Var 0x5557445a4198 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557445a47d0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557445a47b0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557445a4718 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557445a46f8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557445a46e0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557445a46a0 <col:28> 'int' lvalue Var 0x5557445a4198 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557445a46c0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557445a4798 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557445a4768 <col:49> 'bool' lvalue ->_read_status 0x555744478990
|     |   |         `-ImplicitCastExpr 0x5557445a4748 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557445a4738 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557445a4898 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557445a4808 <col:13> 'int' lvalue ParmVar 0x555744580df0 'flags' 'int'
|     |     `-UnaryOperator 0x5557445a4880 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557445a4868 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557445a4848 <col:23> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557445a4a20 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557445a4958 <col:9> 'bool' lvalue ->_read_status 0x555744478990
|       | `-ImplicitCastExpr 0x5557445a4938 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557445a4928 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557445a4a00 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557445a49e0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557445a49c8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557445a4988 <col:25> 'int' lvalue Var 0x5557445a4198 'read_status' 'int'
|           `-IntegerLiteral 0x5557445a49a8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5557445814c8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x555744581058 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557445810d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744581428 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x555744581198 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x555744581218 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x555744581290 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x555744581338 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5557445a59d0 <col:84, line:805:5>
|     |-DeclStmt 0x5557445a4ae8 <line:796:9, col:26>
|     | `-VarDecl 0x5557445a4a80 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557445a4bb8 <line:797:9, col:29>
|     | `-VarDecl 0x5557445a4b18 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557445a4ba0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557445a4b80 <col:28> 'int' 1
|     |-DeclStmt 0x5557445a4ef0 <line:798:9, col:71>
|     | `-VarDecl 0x5557445a4c08 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5557445a4ec0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5557445a4e30 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5557445a4e78 <col:55> 'T' lvalue ParmVar 0x555744581338 'variable' 'T &'
|     |     `-UnaryOperator 0x5557445a4ea8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5557445a4e98 <col:66> 'Args *' this
|     |-WhileStmt 0x5557445a5880 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5557445a58a0 <line:799:16, col:61>
|     | | `-VarDecl 0x5557445a4f18 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557445a50f8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557445a50c8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557445a50b0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557445a5090 <col:29, col:61> 'String' (CXXTemporary 0x5557445a5090)
|     | |           `-CXXMemberCallExpr 0x5557445a5020 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557445a4f90 <col:29> '<bound member function type>' ->find 0x555744595298
|     | |             | `-CXXThisExpr 0x5557445a4f80 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557445a5058 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a4fc0 <col:34> 'const char *' lvalue ParmVar 0x555744581198 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557445a5070 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a4fe0 <col:43> 'int' lvalue ParmVar 0x555744581218 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557445a5000 <col:50> 'Args::Slot *' lvalue Var 0x5557445a4a80 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557445a51b0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557445a5198 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557445a5178 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557445a5148 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|     | |       `-ImplicitCastExpr 0x5557445a5130 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557445a5110 <col:23> 'String' lvalue Var 0x5557445a4f18 'str' 'String'
|     | `-CompoundStmt 0x5557445a5858 <col:64, line:803:9>
|     |   |-CallExpr 0x5557445a55e0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5557445a51d8 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|     |   | | `-CXXThisExpr 0x5557445a51c8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5557445a55a0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5557445a5208 <col:23> 'T *' lvalue Var 0x5557445a4c08 's' 'T *'
|     |   | | `-CallExpr 0x5557445a5560 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5557445a53f0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5557445a5438 <col:56> 'P' lvalue ParmVar 0x555744581290 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5557445a5458 <col:64> 'String' lvalue Var 0x5557445a4f18 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5557445a5508 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5557445a5498 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|     |   | |   | `-DeclRefExpr 0x5557445a5478 <col:70> 'T *' lvalue Var 0x5557445a4c08 's' 'T *'
|     |   | |   `-UnaryOperator 0x5557445a5548 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5557445a5538 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5557445a55c0 <col:81> 'Args::Slot *' lvalue Var 0x5557445a4a80 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5557445a5778 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557445a5610 <col:13> 'int' lvalue Var 0x5557445a4b18 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557445a5760 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557445a5740 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557445a56a8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557445a5688 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557445a5670 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557445a5630 <col:28> 'int' lvalue Var 0x5557445a4b18 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557445a5650 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557445a5728 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557445a56f8 <col:49> 'bool' lvalue ->_read_status 0x555744478990
|     |   |         `-ImplicitCastExpr 0x5557445a56d8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557445a56c8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557445a5828 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557445a5798 <col:13> 'int' lvalue ParmVar 0x555744581218 'flags' 'int'
|     |     `-UnaryOperator 0x5557445a5810 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557445a57f8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557445a57d8 <col:23> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557445a59b0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557445a58e8 <col:9> 'bool' lvalue ->_read_status 0x555744478990
|       | `-ImplicitCastExpr 0x5557445a58c8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557445a58b8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557445a5990 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557445a5970 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557445a5958 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557445a5918 <col:25> 'int' lvalue Var 0x5557445a4b18 'read_status' 'int'
|           `-IntegerLiteral 0x5557445a5938 <col:40> 'int' 1
|-FunctionTemplateDecl 0x555744581aa8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x555744581540 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5557445815b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x555744581a08 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x555744581678 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5557445816f8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x555744581770 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5557445818c0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5557445a67d8 <col:87, line:821:5>
|     |-DeclStmt 0x5557445a5a80 <line:809:9, col:26>
|     | `-VarDecl 0x5557445a5a18 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5557445a5b50 <line:810:9, col:29>
|     | `-VarDecl 0x5557445a5ab0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5557445a5b38 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5557445a5b18 <col:28> 'int' 1
|     |-DeclStmt 0x5557445a5d98 <line:811:9, col:38>
|     | `-VarDecl 0x5557445a5c80 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5557445a5d70 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5557445a5cf8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5557445a5d50 <col:29> 'Vector<T>' lvalue ParmVar 0x5557445818c0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5557445a6688 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5557445a66a8 <line:812:16, col:61>
|     | | `-VarDecl 0x5557445a5dc0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5557445a5fa0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5557445a5f70 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5557445a5f58 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5557445a5f38 <col:29, col:61> 'String' (CXXTemporary 0x5557445a5f38)
|     | |           `-CXXMemberCallExpr 0x5557445a5ec8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5557445a5e38 <col:29> '<bound member function type>' ->find 0x555744595298
|     | |             | `-CXXThisExpr 0x5557445a5e28 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5557445a5f00 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a5e68 <col:34> 'const char *' lvalue ParmVar 0x555744581678 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5557445a5f18 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5557445a5e88 <col:43> 'int' lvalue ParmVar 0x5557445816f8 'flags' 'int'
|     | |             `-DeclRefExpr 0x5557445a5ea8 <col:50> 'Args::Slot *' lvalue Var 0x5557445a5a18 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5557445a6058 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5557445a6040 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5557445a6020 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5557445a5ff0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5557442c5e88
|     | |       `-ImplicitCastExpr 0x5557445a5fd8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5557445a5fb8 <col:23> 'String' lvalue Var 0x5557445a5dc0 'str' 'String'
|     | `-CompoundStmt 0x5557445a6650 <col:64, line:819:9>
|     |   |-DeclStmt 0x5557445a6118 <line:813:13, col:23>
|     |   | `-VarDecl 0x5557445a6080 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5557445a60f8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5557445a6298 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5557445a6140 <col:13> '<bound member function type>' ->postparse 0x5557445954a8
|     |   | | `-CXXThisExpr 0x5557445a6130 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5557445a6240 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5557445a6190 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5557445a6170 <col:23> 'P' lvalue ParmVar 0x555744581770 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5557445a61d8 <col:36> 'String' lvalue Var 0x5557445a5dc0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5557445a61f8 <col:41> 'T' lvalue Var 0x5557445a6080 'sx' 'T'
|     |   | | `-UnaryOperator 0x5557445a6228 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5557445a6218 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5557445a6278 <col:53> 'Args::Slot *' lvalue Var 0x5557445a5a18 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5557445a63f0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5557445a6328 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5557445a62f8 <col:17> 'bool' lvalue ->_read_status 0x555744478990
|     |   | |   `-ImplicitCastExpr 0x5557445a62d8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5557445a62c8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5557445a63c8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5557445a6360 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5557445a6340 <col:17> 'Vector<T> *' lvalue Var 0x5557445a5c80 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5557445a63a8 <col:30> 'T' lvalue Var 0x5557445a6080 'sx' 'T'
|     |   |-BinaryOperator 0x5557445a6570 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5557445a6408 <col:13> 'int' lvalue Var 0x5557445a5ab0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5557445a6558 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5557445a6538 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5557445a64a0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5557445a6480 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5557445a6468 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5557445a6428 <col:28> 'int' lvalue Var 0x5557445a5ab0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5557445a6448 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5557445a6520 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5557445a64f0 <col:49> 'bool' lvalue ->_read_status 0x555744478990
|     |   |         `-ImplicitCastExpr 0x5557445a64d0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5557445a64c0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5557445a6620 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5557445a6590 <col:13> 'int' lvalue ParmVar 0x5557445816f8 'flags' 'int'
|     |     `-UnaryOperator 0x5557445a6608 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5557445a65f0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5557445a65d0 <col:23> 'const int' lvalue Var 0x555744569148 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5557445a67b8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5557445a66f0 <col:9> 'bool' lvalue ->_read_status 0x555744478990
|       | `-ImplicitCastExpr 0x5557445a66d0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5557445a66c0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5557445a6798 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5557445a6778 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5557445a6760 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5557445a6720 <col:25> 'int' lvalue Var 0x5557445a5ab0 'read_status' 'int'
|           `-IntegerLiteral 0x5557445a6740 <col:40> 'int' 1
|-AccessSpecDecl 0x555744581b20 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x555744581b48 prev 0x55574447e1c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x555744581c40 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x555744581d30 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5557445a6810 <col:16, line:828:9>
| |-CXXDestructorDecl 0x555744581e20 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5557445a6820 <col:25, line:830:9>
| |-CXXMethodDecl 0x555744581f20 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x555744581fd0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x555744582078 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x555744582078
| | `-ParmVarDecl 0x555744582188 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x555744582948 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x555744582948
|   `-ParmVarDecl 0x555744582a58 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5557445821f8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x555744582358 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x555744582550 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x555744582400 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x555744582478 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5557445a6a00 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x555744582808 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5557445a6870 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5557445a6830 <col:20> 'void *' lvalue ParmVar 0x555744582400 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x555744582870 '_slot' 'char *'
| | | `-CXXNewExpr 0x5557445a68f8 <col:32, col:45> 'char *' array Function 0x5557440e8af8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5557445a68e0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5557445a68b0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x555744582478 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5557445828d0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5557445a69c0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5557445a6980 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x555744582478 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5557445a6a80 <col:61, line:838:9>
| |-CXXDestructorDecl 0x555744582650 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x555744581e20 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5557445a6b08 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5557445a6ae8 <line:840:13, col:22> 'void' array Function 0x5557440e8e58 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5557445a6ad0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5557445a6aa0 <col:22> 'char *' lvalue ->_slot 0x555744582870
| |         `-CXXThisExpr 0x5557445a6a90 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x555744582750 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x555744581f20 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5557445a6cf8 <col:22, line:844:9>
| |   `-CallExpr 0x5557445a6c60 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5557445a6c48 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5557445a6c28 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5557441f48d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5557445a6c98 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5557445a6b78 <col:20> 'void *' lvalue ->_ptr 0x555744582808
| |     |   `-CXXThisExpr 0x5557445a6b68 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5557445a6cc8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5557445a6cb0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5557445a6bb8 <col:26> 'char *' lvalue ->_slot 0x555744582870
| |     |     `-CXXThisExpr 0x5557445a6ba8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5557445a6ce0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5557445a6bf8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5557445828d0
| |         `-CXXThisExpr 0x5557445a6be8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x555744582808 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x555744582870 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5557445828d0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x555744582ac8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555744582ac8
| | `-ParmVarDecl 0x555744582bd8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x555744582c78 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x555744582c78
|   `-ParmVarDecl 0x555744582d88 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x555744582f28 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x555744582df8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x555744582e98 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5557445831c0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5557445833b8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x555744583288 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x555744583538 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5557445a6d30 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5557445a6d10 <col:20> 'T *' lvalue ParmVar 0x555744583288 'ptr' 'T *'
|   | `-CompoundStmt 0x5557445a6d80 <col:25, line:854:9>
|   |-CXXMethodDecl 0x555744583488 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x555744581f20 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5557445a6f30 <col:22, line:857:9>
|   |   `-CallExpr 0x5557445a6f00 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5557445a6d90 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5557442ad008 0x555744257338
|   |     |-CXXOperatorCallExpr 0x5557445a6e90 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5557445a6e20 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5557444b9fb8 0x5557444b9bd8 0x5557444b9808 0x5557444b9428 0x5557444b9048 0x5557444b8c78
|   |     | `-MemberExpr 0x5557445a6df0 <col:29> 'T *' lvalue ->_ptr 0x555744583538
|   |     |   `-CXXThisExpr 0x5557445a6de0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5557445a6ed0 <col:35> 'T' lvalue ->_slot 0x555744583598
|   |       `-CXXThisExpr 0x5557445a6ec0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x555744583538 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x555744583598 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x555744583600 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x555744583700 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x555744583750 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557445836e0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5557445836c0 <col:31> 'int' 48
|-FieldDecl 0x555744583778 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5557445837d8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x555744583838 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x555744583970 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x555744594b40 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x555744594ba0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x555744594c50 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x555744594e78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x555744594d80 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x555744594fc8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x555744594f38 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x555744595298 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x555744595088 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x555744595108 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5557445951b0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5557445954a8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x555744595360 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5557445953d8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x555744595578 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5557445956c8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x555744595630 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x555744595a58 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x555744595788 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x555744595808 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5557445958b0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x555744595968 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x555744595c80 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x555744595b30 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x555744595ba8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x555744595f98 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x555744595d30 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x555744595ef8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x555744595e08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557442b5d30 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557442b5e48 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5557442b5ed8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5557442b5fa8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5557442b6090 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5557442b62a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557442b6150 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b6458 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5557442b6360 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5557442b65a0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5557442b6510 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5557442b66e8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557442b6658 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b6830 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5557442b67a0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b68f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5557442b6a40 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5557442b69b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5557442b6b08 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5557442b6c50 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5557442b6bc0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5557442b6dc8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5557442b6d08 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b6f10 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5557442b6e80 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b6fd8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5557442b7198 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557442b7088 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557442b7100 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b73e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557442b7258 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557442b72d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557442b7498 <col:86> "" ""
|-CXXMethodDecl 0x5557442b7708 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5557442b7578 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5557442b75f0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b78b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5557442b77c8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5557442b7a68 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5557442b7970 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5557442b7d38 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5557442b7b20 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5557442b7b98 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557442b7c10 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b8018 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5557442b7e00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5557442b7e78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557442b7ef0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557442b80d0 <col:115> "" ""
|-AccessSpecDecl 0x5557442b8140 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5557442b8178 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557442b9690 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5557442b9690
| `-ParmVarDecl 0x5557442b9798 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5557442b9838 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5557442b9838
| `-ParmVarDecl 0x5557442b9948 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5557442eef78 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557444e0d70 <col:7>
|-CXXConstructorDecl 0x5557442ef050 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5557442ef050
| `-ParmVarDecl 0x5557442ef168 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5557442ef1d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5557442ef1d8
| `-ParmVarDecl 0x5557442ef2e8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5557444e3770 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557444cf918 prev 0x5557444c4b20 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557444cfa10 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5557444cfb00 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5557444cfc28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5557444cfda8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5557444cff28 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5557444d00a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5557444e0ed8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557444e1748 <col:11>
|-CXXDestructorDecl 0x5557444e0fb0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5557444e10e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5557444e10e8
| `-ParmVarDecl 0x5557444e11f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5557444e1298 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557444e1298
| `-ParmVarDecl 0x5557444e13a8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5557444e4168 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5557444e4278 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5557444e44f8 <col:11>
|   `-ReturnStmt 0x5557444e44e8 <col:11>
|     `-UnaryOperator 0x5557444e44d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5557444e44c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5557444e42e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557444e42e8
  `-ParmVarDecl 0x5557444e43f8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557444d0110 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557444d0228 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5557444d02c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5557444d0330 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5557444d0398 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5557444d0400 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5557444d0460 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5557444d0520 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5557444d0580 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5557444d05e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5557444e0de8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5557444d02c8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5557444e1758 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5557444e17b0 <col:12>
|-CXXConstructorDecl 0x5557444e1418 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5557444e1418
| `-ParmVarDecl 0x5557444e1528 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5557444e15c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5557444e15c8
| `-ParmVarDecl 0x5557444e16d8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5557444e3850 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557444be230 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5557444be348 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5557444be3d8 <col:16, col:22> col:16 public
|-EnumDecl 0x5557444be400 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5557444be500 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5557444be5e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444be4e0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5557444be4c0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5557444be590 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5557444be5f8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444be570 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5557444be550 <col:22> 'int' 64
|-CXXMethodDecl 0x5557444be938 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5557444be620 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557444be6a0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5557444be718 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557444be790 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444be9f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5557444bebf8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5557444bea70 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5557444beae8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444beca8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5557444bee08 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5557444bed18 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444beeb0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5557444bf210 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5557444bf1a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5557444bf140 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5557444bf100 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x555743f962d0 'void'
|       |-PointerType 0x55574423e5d0 'unsigned char *'
|       | `-BuiltinType 0x555743f963d0 'unsigned char'
|       |-TypedefType 0x55574403ab40 'size_t' sugar
|       | |-Typedef 0x555744006b20 'size_t'
|       | `-BuiltinType 0x555743f96430 'unsigned long'
|       `-PointerType 0x555743f96ad0 'void *'
|         `-BuiltinType 0x555743f962d0 'void'
|-CXXMethodDecl 0x5557444bf688 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5557444bf280 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5557444bf2f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557444bf390 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5557444bf410 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5557444d9d80 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5557444d9d68 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5557444d9d30 <col:58> 'int' 0
| |-ParmVarDecl 0x5557444bf490 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5557444d9da8 <col:76> 'int' 0
| |-ParmVarDecl 0x5557444bf510 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5557444d9dc8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5557444bf758 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5557444bf7d8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5557444bf898 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5557444bf938 <col:20>
| `-OptimizeNoneAttr 0x5557444bf990 <col:30>
|-CXXMethodDecl 0x5557444bfa08 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5557444bfaa8 <col:20>
| `-OptimizeNoneAttr 0x5557444bfb00 <col:30>
|-CXXMethodDecl 0x5557444bfb78 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5557444bfc18 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5557444bfcc8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5557444bfd68 <col:20>
| |-OptimizeNoneAttr 0x5557444bfdc0 <col:30>
| `-WarnUnusedResultAttr 0x5557444bfde8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5557444bfe40 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5557444bfee0 <col:20>
| `-OptimizeNoneAttr 0x5557444bff38 <col:30>
|-CXXMethodDecl 0x5557444bff88 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5557444c0028 <col:20>
| `-OptimizeNoneAttr 0x5557444c0080 <col:30>
|-CXXMethodDecl 0x5557444c00c8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5557444c0168 <col:20>
| `-OptimizeNoneAttr 0x5557444c01c0 <col:30>
|-CXXMethodDecl 0x5557444c0208 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c02c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c0390 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557444c0458 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557444c0518 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c0638 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5557444d9e90 <col:54, line:99:5>
|   `-ReturnStmt 0x5557444d9e80 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5557444d9e68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5557444d9e38 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557444d0918
|         `-CXXThisExpr 0x5557444d9e28 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5557444c07d8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5557444c06e8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5557444d9f40 <col:67, line:103:5>
|   `-BinaryOperator 0x5557444d9f20 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5557444d9eb8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557444d0918
|     | `-CXXThisExpr 0x5557444d9ea8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5557444d9f08 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5557444d9ee8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5557444c06e8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5557444c08d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5557444d9fc0 <col:33, line:107:5>
|   `-ReturnStmt 0x5557444d9fb0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5557444d9f98 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5557444d9f68 <col:16> 'void *' lvalue ->_destructor_argument 0x5557444d0980
|         `-CXXThisExpr 0x5557444d9f58 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5557444c0990 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5557444da5f0 <col:25, line:113:5>
|   |-ParenExpr 0x5557444da338 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5557444da308 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5557444da078 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5557444da050 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5557444da018 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5557444d9fe8 <col:24> '<bound member function type>' ->shared 0x5557444bfa08
|   |   |       `-ImplicitCastExpr 0x5557444da038 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5557444d9fd8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5557444da0d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444da0b8 <col:42> 'int' 0
|   |   `-CallExpr 0x5557444da268 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5557444da250 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444da230 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444da2a8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444da148 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5557444da2c0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444da170 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444da2d8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444da1a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5557444da2f0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444da218 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444da200 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444da1c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5557444da538 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5557444da368 <col:2> 'unsigned char *' lvalue ->_head 0x5557444d0720
|   | | `-CXXThisExpr 0x5557444da358 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5557444da520 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5557444da500 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5557444da3a8 <col:10> 'unsigned char *' lvalue ->_data 0x5557444d0788
|   |     | `-CXXThisExpr 0x5557444da398 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5557444da4e8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5557444da4c8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5557444da3e8 <col:18> 'unsigned char *' lvalue ->_tail 0x5557444d07f0
|   |         | `-CXXThisExpr 0x5557444da3d8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5557444da4b0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5557444da490 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5557444da428 <col:26> 'unsigned char *' lvalue ->_end 0x5557444d0858
|   |             | `-CXXThisExpr 0x5557444da418 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5557444da478 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5557444da458 <col:33> 'int' 0
|   `-BinaryOperator 0x5557444da5d0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5557444da568 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5557444d0918
|     | `-CXXThisExpr 0x5557444da558 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5557444da5b8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5557444da598 <col:16> 'int' 0
|-CXXMethodDecl 0x5557444c0ad0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557444c0a40 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c0b78 <col:20>
| |-OptimizeNoneAttr 0x5557444c0bd0 <col:30>
| `-WarnUnusedResultAttr 0x5557444c0bf8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5557444c0cc8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557444c0c38 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c0d70 <col:20>
| |-OptimizeNoneAttr 0x5557444c0dc8 <col:30>
| `-WarnUnusedResultAttr 0x5557444c0df0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5557444c0f28 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5557444c0e30 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444c0fd0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5557444c10d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5557444c1040 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c1178 <col:20>
| `-OptimizeNoneAttr 0x5557444c11d0 <col:30>
|-CXXMethodDecl 0x5557444c1298 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5557444c1208 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444c1340 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5557444c1440 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5557444c13b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5557444c14e8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5557444c15e8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5557444c1558 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c1690 <col:20>
| `-OptimizeNoneAttr 0x5557444c16e8 <col:30>
|-CXXMethodDecl 0x5557444c1878 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5557444c1728 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5557444c17a0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5557444d9de8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5557444c1928 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5557444c1b28 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557444c19a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5557444c1a18 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444c1d38 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5557444c1be8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557444c1c60 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444c1f48 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5557444c1df8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5557444c1e78 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5557444d9df8 <col:39> 'int' 0
|-CXXMethodDecl 0x5557444c2018 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5557444c20e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5557444c21a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557444c2268 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c2330 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5557444c2478 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5557444c23e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5557444c2648 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557444c2538 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5557444c25b0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444c2718 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5557444c27d8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5557444c2878 <col:20>
| `-OptimizeNoneAttr 0x5557444c28d0 <col:30>
|-CXXMethodDecl 0x5557444c2920 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5557444c29c0 <col:20>
| `-OptimizeNoneAttr 0x5557444c2a18 <col:30>
|-CXXMethodDecl 0x5557444c2a68 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557444c2b28 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c2bf0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5557444c2c90 <col:20>
| `-OptimizeNoneAttr 0x5557444c2ce8 <col:30>
|-CXXMethodDecl 0x5557444c2e38 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5557444c2d28 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5557444c2da0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444c2f88 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5557444c2ef8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444c3060 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5557444c3120 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5557444c31c0 <col:20>
| `-OptimizeNoneAttr 0x5557444c3218 <col:30>
|-CXXMethodDecl 0x5557444c3268 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5557444c3308 <col:20>
| `-OptimizeNoneAttr 0x5557444c3360 <col:30>
|-CXXMethodDecl 0x5557444c33b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557444c3478 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5557444c3518 <col:20>
| `-OptimizeNoneAttr 0x5557444c3570 <col:30>
|-CXXMethodDecl 0x5557444c35b8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5557444c36d8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5557444c3848 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5557444c3788 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5557444c3938 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5557444c39d8 <col:20>
| `-OptimizeNoneAttr 0x5557444c3a30 <col:30>
|-CXXMethodDecl 0x5557444c3a80 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5557444c3b40 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5557444c3d78 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5557444c3bf0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5557444c3c68 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c3e28 <col:20>
| `-OptimizeNoneAttr 0x5557444c3e80 <col:30>
|-CXXMethodDecl 0x5557444c3f28 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5557444c3fc8 <col:20>
| `-OptimizeNoneAttr 0x5557444c4020 <col:30>
|-CXXMethodDecl 0x5557444c4070 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5557444c4110 <col:20>
| `-OptimizeNoneAttr 0x5557444c4168 <col:30>
|-CXXMethodDecl 0x5557444c41b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5557444c4250 <col:20>
| `-OptimizeNoneAttr 0x5557444c42a8 <col:30>
|-CXXMethodDecl 0x5557444c43a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5557444c42e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5557444c4450 <col:20>
| `-OptimizeNoneAttr 0x5557444c44a8 <col:30>
|-CXXMethodDecl 0x5557444c4668 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5557444c44e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5557444c4558 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c4718 <col:20>
| `-OptimizeNoneAttr 0x5557444c4770 <col:30>
|-CXXMethodDecl 0x5557444c4818 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5557444c4938 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5557444c4a58 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5557444c4af8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5557444c4b20 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5557444c4c48 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5557444c4ce8 <col:20>
| `-OptimizeNoneAttr 0x5557444c4d40 <col:30>
|-CXXMethodDecl 0x5557444c4de8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5557444c4e88 <col:20>
| `-OptimizeNoneAttr 0x5557444c4ee0 <col:30>
|-AccessSpecDecl 0x5557444c4f08 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5557444c4f30 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5557444c5030 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5557444c5080 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444c5010 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5557444c4ff0 <col:14> 'int' 48
|-CXXMethodDecl 0x5557444c50e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5557444c5188 <col:20>
| `-OptimizeNoneAttr 0x5557444c51e0 <col:30>
|-CXXMethodDecl 0x5557444c5258 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5557444c52f8 <col:20>
| `-OptimizeNoneAttr 0x5557444c5350 <col:30>
|-CXXMethodDecl 0x5557444c5418 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5557444c5388 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5557444c55b8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5557444c5758 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5557444c5668 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5557444c5800 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5557444c5900 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5cb0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c58e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5557444c58c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5557444c5990 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5cc8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c5970 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5557444c5950 <col:14> 'int' 1
| |-EnumConstantDecl 0x5557444c5a20 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5ce0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c5a00 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5557444c59e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5557444c5ab0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5cf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c5a90 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5557444c5a70 <col:14> 'int' 3
| |-EnumConstantDecl 0x5557444c5b40 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5d10 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c5b20 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5557444c5b00 <col:13> 'int' 4
| |-EnumConstantDecl 0x5557444c5bd0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5557444c5d28 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c5bb0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5557444c5b90 <col:13> 'int' 5
| `-EnumConstantDecl 0x5557444c5c60 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5557444c5d40 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444c5c40 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5557444c5c20 <col:14> 'int' 6
|-CXXMethodDecl 0x5557444c5da8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5557444c5e48 <col:20>
| `-OptimizeNoneAttr 0x5557444c5ea0 <col:30>
|-CXXMethodDecl 0x5557444c5f98 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5557444c5ed8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5557444c6040 <col:20>
| `-OptimizeNoneAttr 0x5557444c6098 <col:30>
|-CXXMethodDecl 0x5557444c6108 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5557444c6230 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5557444c63a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5557444c62e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5557444c6470 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5557444c6538 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5557444c6678 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5557444c65e8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5557444c6720 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5557444c6820 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557444c6a20 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c6800 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5557444c67e0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5557444c68b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557444c6a38 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c6890 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5557444c6870 <col:45> 'int' 4
| |-EnumConstantDecl 0x5557444c6940 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5557444c6a50 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c6920 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5557444c6900 <col:24> 'int' 0
| `-EnumConstantDecl 0x5557444c69d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5557444c6a68 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444c69b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5557444c6990 <col:47> 'int' 16
|-CXXMethodDecl 0x5557444c6ac8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5557444c6c38 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5557444c6b78 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5557444c6ce0 <col:20>
| `-OptimizeNoneAttr 0x5557444c6d38 <col:30>
|-CXXMethodDecl 0x5557444c6d88 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5557444da710 <col:18, col:36>
|   `-ReturnStmt 0x5557444da700 <col:20, col:33>
|     `-ImplicitCastExpr 0x5557444da6e8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5557444da6c8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5557444da698 <col:27> '<bound member function type>' ->xanno 0x5557444c4de8
|           `-CXXThisExpr 0x5557444da688 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5557444c6e80 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5557444da820 <col:30, col:48>
|   `-ReturnStmt 0x5557444da810 <col:32, col:45>
|     `-ImplicitCastExpr 0x5557444da7f8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5557444da7d8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5557444da7a8 <col:39> '<bound member function type>' ->xanno 0x5557444c4c48
|           `-CXXThisExpr 0x5557444da798 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5557444c6f68 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5557444da9b8 <col:24, col:50>
|   `-ReturnStmt 0x5557444da9a8 <col:26, col:47>
|     `-UnaryOperator 0x5557444da990 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557444da970 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557444da958 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557444da908 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5557444cfc28
|         |   `-CXXMemberCallExpr 0x5557444da8e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5557444da8b8 <col:34> '<bound member function type>' ->xanno 0x5557444c4de8
|         |       `-CXXThisExpr 0x5557444da8a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5557444da938 <col:46> 'int' 0
|-CXXMethodDecl 0x5557444c7070 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5557444dab88 <col:36, col:62>
|   `-ReturnStmt 0x5557444dab78 <col:38, col:59>
|     `-UnaryOperator 0x5557444dab60 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557444dab40 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557444dab28 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557444daaa0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5557444cfc28
|         |   `-CXXMemberCallExpr 0x5557444daa80 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557444daa50 <col:46> '<bound member function type>' ->xanno 0x5557444c4c48
|         |       `-CXXThisExpr 0x5557444daa40 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5557444daad0 <col:58> 'int' 0
|-CXXMethodDecl 0x5557444c7188 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5557444dad20 <col:26, col:53>
|   `-ReturnStmt 0x5557444dad10 <col:28, col:50>
|     `-UnaryOperator 0x5557444dacf8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557444dacd8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5557444dacc0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557444dac70 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5557444cff28
|         |   `-CXXMemberCallExpr 0x5557444dac50 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5557444dac20 <col:36> '<bound member function type>' ->xanno 0x5557444c4de8
|         |       `-CXXThisExpr 0x5557444dac10 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5557444daca0 <col:49> 'int' 0
|-CXXMethodDecl 0x5557444c72a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5557444daef8 <col:38, col:65>
|   `-ReturnStmt 0x5557444daee8 <col:40, col:62>
|     `-UnaryOperator 0x5557444daed0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5557444daeb0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5557444dae98 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557444dae08 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5557444cff28
|         |   `-CXXMemberCallExpr 0x5557444dade8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557444dadb8 <col:48> '<bound member function type>' ->xanno 0x5557444c4c48
|         |       `-CXXThisExpr 0x5557444dada8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5557444dae38 <col:61> 'int' 0
|-CXXMethodDecl 0x5557444c7458 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5557444c7360 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5557444db5c8 <col:34, line:463:5>
|   |-ParenExpr 0x5557444db410 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5557444db3e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5557444db048 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444db018 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444daf68 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444daf50 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444daf10 <col:23> 'int' lvalue ParmVar 0x5557444c7360 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444daf30 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444daff8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444dafc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444daf88 <col:33> 'int' lvalue ParmVar 0x5557444c7360 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5557444dafe0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5557444dafa8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5557444db0a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444db088 <col:56> 'int' 0
|   |   `-CallExpr 0x5557444db340 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5557444db328 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444db308 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444db380 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444db198 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5557444db398 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444db1c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444db3b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444db200 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5557444db3c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444db2f0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444db2d8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444db298 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5557444db5b8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5557444db5a0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5557444db580 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5557444db550 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5557444db500 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5557444cfc28
|         |   `-CXXMemberCallExpr 0x5557444db4e0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5557444db4b0 <col:9> '<bound member function type>' ->xanno 0x5557444c4c48
|         |       `-CXXThisExpr 0x5557444db4a0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5557444db568 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5557444db530 <col:21> 'int' lvalue ParmVar 0x5557444c7360 'i' 'int'
|-CXXMethodDecl 0x5557444c76a8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5557444c7518 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5557444c7590 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5557444dbc58 <col:40, line:472:5>
|   |-ParenExpr 0x5557444dba70 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5557444dba40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5557444db720 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444db6f0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444db640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444db628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444db5e8 <col:23> 'int' lvalue ParmVar 0x5557444c7518 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444db608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444db6d0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444db6a0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444db660 <col:33> 'int' lvalue ParmVar 0x5557444c7518 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5557444db6b8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5557444db680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5557444db780 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444db760 <col:56> 'int' 0
|   |   `-CallExpr 0x5557444db9a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5557444db988 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444db968 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444db9e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444db7f0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5557444db9f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444db820 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dba10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444db858 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5557444dba28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444db950 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444db938 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444db8f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5557444dbc38 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5557444dbbe0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5557444dbbb0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5557444dbb60 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5557444cfc28
|     | |   `-CXXMemberCallExpr 0x5557444dbb40 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5557444dbb10 <col:2> '<bound member function type>' ->xanno 0x5557444c4de8
|     | |       `-CXXThisExpr 0x5557444dbb00 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5557444dbbc8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5557444dbb90 <col:14> 'int' lvalue ParmVar 0x5557444c7518 'i' 'int'
|     `-ImplicitCastExpr 0x5557444dbc20 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5557444dbc00 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5557444c7590 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5557444c7868 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5557444c7770 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557444dc3d8 <col:36, line:485:5>
|   |-ParenExpr 0x5557444dc140 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444dc110 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444dbdf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444dbdc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dbcd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dbcb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dbc78 <col:23> 'int' lvalue ParmVar 0x5557444c7770 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dbc98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444dbda0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444dbd88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dbcf0 <col:33> 'int' lvalue ParmVar 0x5557444c7770 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444dbd68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444dbd50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dbd10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444dbd30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557444dbe50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444dbe30 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444dc070 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444dc058 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444dc038 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444dc0b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dbec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557444dc0c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dbef8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dc0e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444dbf30 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5557444dc0f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444dc020 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444dc008 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444dbfc8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5557444dc3c8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5557444dc3b0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5557444dc398 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444dc368 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5557444dc308 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444dc2d8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444dc250 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444dc230 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444dc200 <col:61> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444dc1f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444dc2f0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444dc280 <col:74> 'int' lvalue ParmVar 0x5557444c7770 'i' 'int'
|-CXXMethodDecl 0x5557444c7ab8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5557444c7928 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557444c79a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5557444dcb28 <col:42, line:500:5>
|   |-ParenExpr 0x5557444dc8c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444dc890 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444dc570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444dc540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dc450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dc438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dc3f8 <col:23> 'int' lvalue ParmVar 0x5557444c7928 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dc418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444dc520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444dc508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dc470 <col:33> 'int' lvalue ParmVar 0x5557444c7928 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444dc4e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444dc4d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dc490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444dc4b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557444dc5d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444dc5b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444dc7f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444dc7d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444dc7b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444dc830 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dc640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557444dc848 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dc678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dc860 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444dc6b0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5557444dc878 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444dc7a0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444dc788 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444dc748 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5557444dcb08 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5557444dcab8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557444dca88 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5557444dca30 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557444dca00 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557444dc9b0 <col:48, col:57> 'char [48]' lvalue ->c 0x5557444cfb00
|     |     |   `-CXXMemberCallExpr 0x5557444dc990 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557444dc960 <col:48> '<bound member function type>' ->xanno 0x5557444c4de8
|     |     |       `-CXXThisExpr 0x5557444dc950 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557444dca18 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557444dc9e0 <col:61> 'int' lvalue ParmVar 0x5557444c7928 'i' 'int'
|     `-ImplicitCastExpr 0x5557444dcaf0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5557444dcad0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5557444c79a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5557444c7c78 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5557444c7b80 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5557444dd288 <col:35, line:513:5>
|   |-ParenExpr 0x5557444dcf98 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444dcf68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444dccc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444dcc90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dcba0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dcb88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dcb48 <col:23> 'int' lvalue ParmVar 0x5557444c7b80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dcb68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444dcc70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444dcc58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dcbc0 <col:33> 'int' lvalue ParmVar 0x5557444c7b80 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444dcc38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444dcc20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dcbe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444dcc00 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557444dcd20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444dcd00 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444dcec8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444dceb0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444dce90 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444dcf08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dcd90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557444dcf20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dcdc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dcf38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444dce00 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5557444dcf50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444dce78 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444dce60 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444dce20 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5557444dd278 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5557444dd260 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5557444dd248 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444dd218 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5557444dd190 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444dd160 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444dd110 <col:60, col:69> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444dd0f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444dd0c0 <col:60> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444dd0b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444dd178 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444dd140 <col:73> 'int' lvalue ParmVar 0x5557444c7b80 'i' 'int'
|-CXXMethodDecl 0x5557444c7ec8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5557444c7d38 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557444c7db0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5557444dd9a8 <col:41, line:528:5>
|   |-ParenExpr 0x5557444dd730 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444dd700 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444dd420 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444dd3f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dd300 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dd2e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dd2a8 <col:23> 'int' lvalue ParmVar 0x5557444c7d38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dd2c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444dd3d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444dd3b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dd320 <col:33> 'int' lvalue ParmVar 0x5557444c7d38 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444dd398 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444dd380 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dd340 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444dd360 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5557444dd480 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444dd460 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444dd660 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444dd648 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444dd628 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444dd6a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dd4f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5557444dd6b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dd528 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dd6d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444dd560 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5557444dd6e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444dd610 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444dd5f8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444dd5b8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5557444dd988 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5557444dd938 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557444dd908 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5557444dd8b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557444dd870 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557444dd820 <col:47, col:56> 'char [48]' lvalue ->c 0x5557444cfb00
|     |     |   `-CXXMemberCallExpr 0x5557444dd800 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557444dd7d0 <col:47> '<bound member function type>' ->xanno 0x5557444c4de8
|     |     |       `-CXXThisExpr 0x5557444dd7c0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557444dd888 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557444dd850 <col:60> 'int' lvalue ParmVar 0x5557444c7d38 'i' 'int'
|     `-ImplicitCastExpr 0x5557444dd970 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5557444dd950 <col:65> 'int16_t':'short' lvalue ParmVar 0x5557444c7db0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5557444c8088 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5557444c7f90 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557444de078 <col:36, line:541:5>
|   |-ParenExpr 0x5557444dde18 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444ddde8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444ddb40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444ddb10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dda20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dda08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dd9c8 <col:23> 'int' lvalue ParmVar 0x5557444c7f90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dd9e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444ddaf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444ddad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dda40 <col:33> 'int' lvalue ParmVar 0x5557444c7f90 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444ddab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444ddaa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dda60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444dda80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557444ddba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444ddb80 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444ddd48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444ddd30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444ddd10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444ddd88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444ddc10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557444ddda0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444ddc48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444dddb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444ddc80 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5557444dddd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444ddcf8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444ddce0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444ddca0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5557444de068 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5557444de050 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5557444de038 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444de008 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5557444ddfb0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444ddf80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444ddf30 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444ddf10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444ddee0 <col:61> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444dded0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444ddf98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444ddf60 <col:74> 'int' lvalue ParmVar 0x5557444c7f90 'i' 'int'
|-CXXMethodDecl 0x5557444c8258 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5557444c8148 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5557444c81c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5557444c8308 <col:20>
| `-OptimizeNoneAttr 0x5557444c8360 <col:30>
|-CXXMethodDecl 0x5557444c8498 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5557444c83a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5557444de748 <col:35, line:562:5>
|   |-ParenExpr 0x5557444de4e8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444de4b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444de210 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444de1e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444de0f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444de0d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444de098 <col:23> 'int' lvalue ParmVar 0x5557444c83a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444de0b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444de1c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444de1a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444de110 <col:33> 'int' lvalue ParmVar 0x5557444c83a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444de188 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444de170 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444de130 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444de150 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557444de270 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444de250 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444de418 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444de400 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444de3e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444de458 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444de2e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557444de470 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444de318 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444de488 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444de350 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5557444de4a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444de3c8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444de3b0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444de370 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5557444de738 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5557444de720 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5557444de708 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444de6d8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5557444de680 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444de650 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444de600 <col:60, col:69> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444de5e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444de5b0 <col:60> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444de5a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444de668 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444de630 <col:73> 'int' lvalue ParmVar 0x5557444c83a0 'i' 'int'
|-CXXMethodDecl 0x5557444c86a8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5557444c8558 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557444c85d0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5557444dee28 <col:41, line:577:5>
|   |-ParenExpr 0x5557444debb8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444deb88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444de8e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444de8b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444de7c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444de7a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444de768 <col:23> 'int' lvalue ParmVar 0x5557444c8558 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444de788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444de890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444de878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444de7e0 <col:33> 'int' lvalue ParmVar 0x5557444c8558 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444de858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444de840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444de800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444de820 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5557444de940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444de920 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444deae8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444dead0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444deab0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444deb28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444de9b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5557444deb40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444de9e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444deb58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444dea20 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5557444deb70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444dea98 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444dea80 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444dea40 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5557444dee08 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5557444dedb8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557444ded88 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5557444ded28 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557444decf8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557444deca8 <col:47, col:56> 'char [48]' lvalue ->c 0x5557444cfb00
|     |     |   `-CXXMemberCallExpr 0x5557444dec88 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557444dec58 <col:47> '<bound member function type>' ->xanno 0x5557444c4de8
|     |     |       `-CXXThisExpr 0x5557444dec48 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557444ded10 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557444decd8 <col:60> 'int' lvalue ParmVar 0x5557444c8558 'i' 'int'
|     `-ImplicitCastExpr 0x5557444dedf0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5557444dedd0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5557444c85d0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5557444c8868 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5557444c8770 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5557444df558 <col:36, line:591:5>
|   |-ParenExpr 0x5557444df298 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444df268 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444defc0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444def90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444deea0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dee88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dee48 <col:23> 'int' lvalue ParmVar 0x5557444c8770 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dee68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444def70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444def58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444deec0 <col:33> 'int' lvalue ParmVar 0x5557444c8770 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444def38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444def20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444deee0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444def00 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5557444df020 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444df000 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444df1c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444df1b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444df190 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444df208 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444df090 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5557444df220 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444df0c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444df238 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444df100 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5557444df250 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444df178 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444df160 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444df120 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5557444df548 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5557444df530 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5557444df518 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444df4e8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5557444df460 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444df430 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444df3e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444df3c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444df390 <col:61> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444df380 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444df448 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444df410 <col:74> 'int' lvalue ParmVar 0x5557444c8770 'i' 'int'
|-CXXMethodDecl 0x5557444c8ab8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5557444c8928 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557444c89a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5557444dfc38 <col:42, line:606:5>
|   |-ParenExpr 0x5557444df9c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5557444df998 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5557444df6f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444df6c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444df5d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444df5b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444df578 <col:23> 'int' lvalue ParmVar 0x5557444c8928 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444df598 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444df6a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5557444df688 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444df5f0 <col:33> 'int' lvalue ParmVar 0x5557444c8928 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444df668 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444df650 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444df610 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5557444df630 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5557444df750 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444df730 <col:60> 'int' 0
|   |   `-CallExpr 0x5557444df8f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5557444df8e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444df8c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444df938 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444df7c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5557444df950 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444df7f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444df968 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444df830 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5557444df980 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444df8a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444df890 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444df850 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5557444dfc18 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5557444dfbc8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557444dfb98 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5557444dfb38 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557444dfb08 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557444dfab8 <col:48, col:57> 'char [48]' lvalue ->c 0x5557444cfb00
|     |     |   `-CXXMemberCallExpr 0x5557444dfa98 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557444dfa68 <col:48> '<bound member function type>' ->xanno 0x5557444c4de8
|     |     |       `-CXXThisExpr 0x5557444dfa58 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557444dfb20 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557444dfae8 <col:61> 'int' lvalue ParmVar 0x5557444c8928 'i' 'int'
|     `-ImplicitCastExpr 0x5557444dfc00 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5557444dfbe0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5557444c89a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5557444c8c50 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5557444c8b80 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5557444e04a8 <col:33, line:620:5>
|   |-ParenExpr 0x5557444e0220 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5557444e01f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5557444dfe40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444dfe10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444dfcb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444dfc98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444dfc58 <col:23> 'int' lvalue ParmVar 0x5557444c8b80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444dfc78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444dfdf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5557444dfdd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444dfcd0 <col:33> 'int' lvalue ParmVar 0x5557444c8b80 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444dfdb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444dfda0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444dfcf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5557444dfd78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5557444dfd60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5557444dfd28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5557444dfea0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444dfe80 <col:79> 'int' 0
|   |   `-CallExpr 0x5557444e0150 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5557444e0138 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444e0118 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444e0190 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dff88 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5557444e01a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444dffd0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444e01c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444e0008 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5557444e01d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444e0100 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444e00e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444e00a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5557444e0498 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5557444e0480 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5557444e0468 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5557444e0438 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5557444e03b0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5557444e0380 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5557444e0330 <col:67, col:76> 'char const[48]' lvalue ->c 0x5557444cfb00
|             |   `-CXXMemberCallExpr 0x5557444e0310 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5557444e02e0 <col:67> '<bound member function type>' ->xanno 0x5557444c4c48
|             |       `-CXXThisExpr 0x5557444e02d0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5557444e0398 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5557444e0360 <col:80> 'int' lvalue ParmVar 0x5557444c8b80 'i' 'int'
|-CXXMethodDecl 0x5557444c8e68 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5557444c8d10 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5557444c8d90 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5557444e0cd0 <col:45, line:635:5>
|   |-ParenExpr 0x5557444e0a18 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5557444e09e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5557444e06b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5557444e0680 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5557444e0520 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5557444e0508 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5557444e04c8 <col:23> 'int' lvalue ParmVar 0x5557444c8d10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5557444e04e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5557444e0660 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5557444e0648 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5557444e0540 <col:33> 'int' lvalue ParmVar 0x5557444c8d10 'i' 'int'
|   |   |     `-BinaryOperator 0x5557444e0628 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5557444e0610 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5557444e0560 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5557444c5030 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5557444e05e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5557444e05d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5557444e0598 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5557444e0710 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5557444e06f0 <col:79> 'int' 0
|   |   `-CallExpr 0x5557444e0948 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5557444e0930 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5557444e0910 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x555744031950 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5557444e0988 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444e0780 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5557444e09a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5557444e07c8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5557444e09b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5557444e0800 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5557444e09d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5557444e08f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5557444e08e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5557444e0898 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5557444e0cb0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5557444e0c18 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5557444e0be8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5557444e0b88 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5557444e0b58 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5557444e0b08 <col:54, col:63> 'char [48]' lvalue ->c 0x5557444cfb00
|     |     |   `-CXXMemberCallExpr 0x5557444e0ae8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5557444e0ab8 <col:54> '<bound member function type>' ->xanno 0x5557444c4de8
|     |     |       `-CXXThisExpr 0x5557444e0aa8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5557444e0b70 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5557444e0b38 <col:67> 'int' lvalue ParmVar 0x5557444c8d10 'i' 'int'
|     `-CXXConstCastExpr 0x5557444e0c80 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5557444e0c68 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5557444e0c30 <col:91> 'const void *' lvalue ParmVar 0x5557444c8d90 'x' 'const void *'
|-CXXMethodDecl 0x5557444c8f38 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5557444e0d58 <col:34, line:640:5>
|   `-ReturnStmt 0x5557444e0d48 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5557444e0d30 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5557444e0d00 <col:16> 'Packet *' lvalue ->_data_packet 0x5557444d06b8
|         `-CXXThisExpr 0x5557444e0cf0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5557444c9078 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5557444c8fe8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5557444d9e18 <col:46> 'bool' true
|-CXXMethodDecl 0x5557444c91f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5557444c9130 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5557444c92a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5557444c9a50 <line:660:22> "" ""
| |-EnumConstantDecl 0x5557444c93a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9ac0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9380 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5557444c9360 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5557444be500 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5557444c9430 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9ad8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9410 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5557444c93f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5557444be590 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5557444c94c0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9af0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c94a0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5557444c9480 <col:21> 'int' 0
| |-EnumConstantDecl 0x5557444c9550 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9530 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5557444c9510 <col:19> 'int' 16
| |-EnumConstantDecl 0x5557444c95e0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c95c0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5557444c95a0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5557444c9670 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9650 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5557444c9630 <col:19> 'int' 32
| |-EnumConstantDecl 0x5557444c9700 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b50 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c96e0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5557444c96c0 <col:19> 'int' EnumConstant 0x5557444c9550 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5557444c9790 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9770 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5557444c9750 <col:19> 'int' EnumConstant 0x5557444c9670 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5557444c9860 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b80 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9840 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5557444c9820 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5557444c97e0 <col:23> 'int' EnumConstant 0x5557444c9790 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5557444c9800 <col:40> 'int' 2
| |-EnumConstantDecl 0x5557444c9930 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5557444c9b98 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557444c9910 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5557444c98f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5557444c98b0 <col:23> 'int' EnumConstant 0x5557444c9790 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5557444c98d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5557444c9a00 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5557444c9bb0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5557444c99e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5557444c99c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5557444c9980 <col:23> 'int' EnumConstant 0x5557444c9790 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5557444c99a0 <col:40> 'int' 8
|-CXXMethodDecl 0x5557444c9bf0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5557444c9c90 <col:68> "" ""
|-CXXMethodDecl 0x5557444c9d28 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5557444c9dc8 <col:45> "" ""
|-CXXMethodDecl 0x5557444c9e60 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5557444c9f00 <col:57> "" ""
|-CXXMethodDecl 0x5557444c9f98 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5557444ca038 <col:45> "" ""
|-CXXMethodDecl 0x5557444ca0d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5557444ca170 <col:57> "" ""
|-CXXMethodDecl 0x5557444ca200 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5557444ca2a0 <col:51> "" ""
|-CXXMethodDecl 0x5557444ca330 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5557444ca3d0 <col:63> "" ""
|-CXXMethodDecl 0x5557444ca460 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5557444ca500 <col:53> "" ""
|-CXXMethodDecl 0x5557444ca590 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5557444ca630 <col:65> "" ""
|-CXXMethodDecl 0x5557444ca748 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5557444ca6b8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5557444ca7f0 <col:61> "" ""
|-CXXMethodDecl 0x5557444ca988 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5557444ca878 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5557444ca8f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5557444caa38 <col:67> "" ""
|-CXXMethodDecl 0x5557444cab50 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5557444caac0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557444cabf8 <col:63> "" ""
|-CXXMethodDecl 0x5557444cad90 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5557444cac80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557444cacf8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5557444cae40 <col:69> "" ""
|-CXXMethodDecl 0x5557444caf58 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5557444caec8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557444cb000 <col:63> "" ""
|-CXXMethodDecl 0x5557444cd6d8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5557444cd5c8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557444cd640 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557444cd788 <col:69> "" ""
|-CXXMethodDecl 0x5557444cd8a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5557444cd810 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5557444cd948 <col:62> "" ""
|-CXXMethodDecl 0x5557444cdae0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5557444cd9d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557444cda48 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5557444cdb90 <col:68> "" ""
|-CXXMethodDecl 0x5557444cdca8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5557444cdc18 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5557444cdd50 <col:63> "" ""
|-CXXMethodDecl 0x5557444cdee8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5557444cddd8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5557444cde50 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5557444cdf98 <col:69> "" ""
|-CXXMethodDecl 0x5557444ce028 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5557444ce0c8 <col:64> "" ""
|-CXXMethodDecl 0x5557444ce158 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5557444ce1f8 <col:52> "" ""
|-CXXMethodDecl 0x5557444ce288 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5557444ce328 <col:67> "" ""
|-CXXMethodDecl 0x5557444ce3b8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5557444ce458 <col:55> "" ""
|-CXXMethodDecl 0x5557444ce570 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5557444ce4e0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557444ce618 <col:58> "" ""
|-CXXMethodDecl 0x5557444ce7b0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5557444ce6a0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557444ce718 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5557444ce860 <col:62> "" ""
|-CXXMethodDecl 0x5557444ce978 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5557444ce8e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557444cea20 <col:58> "" ""
|-CXXMethodDecl 0x5557444cebb8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5557444ceaa8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557444ceb20 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5557444cec68 <col:62> "" ""
|-CXXMethodDecl 0x5557444ced80 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5557444cecf0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5557444cee28 <col:60> "" ""
|-CXXMethodDecl 0x5557444cefc0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5557444ceeb0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5557444cef28 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5557444cf070 <col:64> "" ""
|-CXXMethodDecl 0x5557444cf188 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5557444cf0f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5557444cf230 <col:58> "" ""
|-CXXMethodDecl 0x5557444cf3c8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5557444cf2b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557444cf330 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5557444cf478 <col:62> "" ""
|-CXXMethodDecl 0x5557444cf590 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5557444cf500 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5557444cf638 <col:59> "" ""
|-CXXMethodDecl 0x5557444cf7d0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5557444cf6c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5557444cf738 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5557444cf880 <col:63> "" ""
|-AccessSpecDecl 0x5557444cf8f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5557444cf918 prev 0x5557444c4b20 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557444cfa10 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5557444cfb00 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5557444cfc28 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5557444cfda8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5557444cff28 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5557444d00a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5557444e0ed8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5557444e1748 <col:11>
| |-CXXDestructorDecl 0x5557444e0fb0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5557444e10e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5557444e10e8
| | `-ParmVarDecl 0x5557444e11f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5557444e1298 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557444e1298
| | `-ParmVarDecl 0x5557444e13a8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5557444e4168 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5557444e4278 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5557444e44f8 <col:11>
| |   `-ReturnStmt 0x5557444e44e8 <col:11>
| |     `-UnaryOperator 0x5557444e44d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5557444e44c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5557444e42e8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5557444e42e8
|   `-ParmVarDecl 0x5557444e43f8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5557444d0110 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5557444d0228 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5557444d02c8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5557444d0330 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5557444d0398 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5557444d0400 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5557444d0460 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5557444d0520 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5557444d0580 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5557444d05e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5557444e0de8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5557444d02c8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5557444e1758 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5557444e17b0 <col:12>
| |-CXXConstructorDecl 0x5557444e1418 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5557444e1418
| | `-ParmVarDecl 0x5557444e1528 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5557444e15c8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5557444e15c8
| | `-ParmVarDecl 0x5557444e16d8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5557444e3850 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5557444d0658 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5557444d06b8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5557444d0720 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5557444d0788 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5557444d07f0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5557444d0858 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5557444d08b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5557444d0918 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5557444d0980 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5557444d0a08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5557444d0658 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5557444e0d80 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5557444d08b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5557444e17c0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5557444e1820 <col:21, line:755:5>
|-CXXConstructorDecl 0x5557444d0ba8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5557444d0ae8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5557444d0ca0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5557444d0e88 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5557444d0d90 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5557444d1158 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5557444d0f40 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5557444d0fb8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5557444d1030 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444d1378 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5557444d1228 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5557444d12a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5557444d9958 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5557444d1438 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5557444d14b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5557444d1528 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5557444d9ab0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5557444d9a20 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5557444d9bf8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5557444d9b68 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5557444d9cf0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557445b1080 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5557445b1198 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5557445b1228 <col:16, col:22> col:16 public
|-EnumDecl 0x5557445b1250 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5557445b1350 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5557445b15a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557445b1330 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5557445b1310 <col:21> 'int' 0
| |-EnumConstantDecl 0x5557445b13e0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5557445b15b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557445b13c0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5557445b13a0 <col:24> 'int' 22
| |-EnumConstantDecl 0x5557445b1470 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5557445b15d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557445b1450 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5557445b1430 <col:24> 'int' 34
| |-EnumConstantDecl 0x5557445b1500 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5557445b15e8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5557445b14e0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5557445b14c0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5557445b1550 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5557445b2f60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5557445b3398 <col:7>
|-CXXConstructorDecl 0x5557445b3068 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5557445b3068
| `-ParmVarDecl 0x5557445b3178 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5557445b3218 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557445b3328 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5557445fa870 <col:7>
`-CXXDestructorDecl 0x5557445b54a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5557445b1618 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5557445b1778 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5557445b1808 <col:32, col:38> col:32 public
|-TypedefDecl 0x5557445b1840 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5557440eae50 'uint32_t' sugar
|   |-Typedef 0x555743fff408 'uint32_t'
|   `-TypedefType 0x555743fd8440 '__uint32_t' sugar
|     |-Typedef 0x555743fd8038 '__uint32_t'
|     `-BuiltinType 0x555743f96410 'unsigned int'
|-CXXConstructorDecl 0x5557445b1988 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5557445b18b0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5557445b2e68 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5557445b33a8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5557445b2720 'base' 'int'
| | `-ImplicitCastExpr 0x5557445b2f08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5557445b2ec8 <col:16> 'int' lvalue ParmVar 0x5557445b18b0 'b' 'int'
| `-CompoundStmt 0x5557445b3418 <col:19, line:1046:5>
|-CXXMethodDecl 0x5557445b1e80 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5557445b1a50 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5557445b1ad0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5557445b1b48 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5557445b1bc8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5557445b1c88 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5557445b1d08 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5557445b22d8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5557445b1f50 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5557445b2238 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5557445b1ff8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5557445b2098 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5557445b2110 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5557445b2e88 <col:82> 'const ArgContext' lvalue Var 0x5557445a6f58 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5557445b4348 <col:94, line:1067:5>
| |   |-DeclStmt 0x5557445b35a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x5557445b3438 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5557445b3560 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5557445b37c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5557445b35d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5557445b37a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5557445b3780 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5557445b3730 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5557445b3710 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5557445b36b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5557445b3668 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5557445b3698 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5557445b36f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5557445b36d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5557445b3760 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5557445b3928 <line:1056:9, col:27>
| |   | `-VarDecl 0x5557445b38c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5557445b3d70 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5557445b3ca0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5557445b3c20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5557444b4e38 0x5557442fe418 0x5557442fe0f0 0x5557442ef8d0 0x5557442ef580 0x5557442eee70 0x5557442c17e0 0x55574424dca0
| |   | | |-CallExpr 0x5557445b3b60 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5557445b3950 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5557445b3a00 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5557445b39d0 <col:19, col:23> '<bound member function type>' .begin 0x5557442dead8
| |   | | | |   `-DeclRefExpr 0x5557445b39b0 <col:19> 'const String' lvalue ParmVar 0x5557445b1ff8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5557445b3a70 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5557445b3a40 <col:32, col:36> '<bound member function type>' .end 0x5557442decf0
| |   | | | |   `-DeclRefExpr 0x5557445b3a20 <col:32> 'const String' lvalue ParmVar 0x5557445b1ff8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5557445b3a90 <col:43> 'const bool' lvalue Var 0x5557445b3438 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5557445b3af8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5557445b3ad8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5557445b3b20 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5557445b38c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5557445b3b40 <col:73> 'const int' lvalue Var 0x5557445b35d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5557445b3c00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5557445b3bd0 <col:16, col:20> '<bound member function type>' .end 0x5557442decf0
| |   | |     `-DeclRefExpr 0x5557445b3bb0 <col:16> 'const String' lvalue ParmVar 0x5557445b1ff8 'str' 'const String &'
| |   | `-BinaryOperator 0x5557445b3d50 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5557445b3ce8 <col:13> 'int' lvalue ->status 0x5557445b2788
| |   |   | `-CXXThisExpr 0x5557445b3cd8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5557445b3d38 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5557445b3d18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b13e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5557445b3fc0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5557445b3ea8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5557445b3e90 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5557445b3e78 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5557445b3d98 <col:13> 'int' lvalue ->status 0x5557445b2788
| |   | | |     `-CXXThisExpr 0x5557445b3d88 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5557445b3e58 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5557445b3e28 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5557445b3dd8 <col:23> 'int' lvalue ->status 0x5557445b2788
| |   | |   |   `-CXXThisExpr 0x5557445b3dc8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5557445b3e40 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5557445b3e08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5557445b3fa0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5557445b3f40 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5557445b3ee8 <col:13, col:18> '<bound member function type>' .error 0x555744477fa0
| |   |   | | `-DeclRefExpr 0x5557445b3ec8 <col:13> 'const ArgContext' lvalue ParmVar 0x5557445b2110 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5557445b3f68 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5557445b3f18 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5557445b3f90 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5557445b3f80 <col:20> 'bool' false
| |   |-DeclStmt 0x5557445b4198 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5557445b4140 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5557445b40d0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5557445b42f8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5557445b41b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x555744281c68
| |   | |-DeclRefExpr 0x5557445b41f8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5557445b38c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5557445b42c8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5557445b4240 <col:64> 'V' lvalue ParmVar 0x5557445b2098 'result' 'V &'
| |   `-ReturnStmt 0x5557445b4338 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5557445b4328 <col:16> 'bool' true
| `-CXXMethodDecl 0x5557445fe3d8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5557445fe1b0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5557445fe288 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5557445fe2f0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x555744607820 <col:94, line:1067:5>
|     |-DeclStmt 0x5557445febe8 <line:1054:9, col:64>
|     | `-VarDecl 0x5557445fea08 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5557445feb78 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5557445feb48 <col:36, col:55> 'const bool' lvalue Var 0x555744270e80 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x555744606480 <line:1055:9, col:91>
|     | `-VarDecl 0x5557445fec00 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x555744606400 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5557446063e8 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5557446063c8 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5557446063a8 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x555744606388 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5557445fec98 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5557445fec78 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5557445b3698 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x555744606370 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5557445b36d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5557445b3760 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x555744606610 <line:1056:9, col:27>
|     | `-VarDecl 0x5557446065a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x555744606a98 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x555744606a40 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5557446068f8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5557446068c8 <col:13> '<bound member function type>' ->parse 0x5557445b1e80
|     | | | | `-CXXThisExpr 0x5557446068b8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x555744606758 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555744606728 <col:19, col:23> '<bound member function type>' .begin 0x5557442dead8
|     | | | |   `-DeclRefExpr 0x555744606708 <col:19> 'const String' lvalue ParmVar 0x5557445fe1b0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5557446067c8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x555744606798 <col:32, col:36> '<bound member function type>' .end 0x5557442decf0
|     | | | |   `-DeclRefExpr 0x555744606778 <col:32> 'const String' lvalue ParmVar 0x5557445fe1b0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x555744606968 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x555744606948 <col:43> 'const bool' lvalue Var 0x5557445fea08 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x555744606850 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x555744606838 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x555744606818 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x555744606980 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x555744606878 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5557446065a8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5557446069b8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x555744606998 <col:73> 'const int' lvalue Var 0x5557445fec00 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x555744606a20 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5557446069f0 <col:16, col:20> '<bound member function type>' .end 0x5557442decf0
|     | |     `-DeclRefExpr 0x5557446069d0 <col:16> 'const String' lvalue ParmVar 0x5557445fe1b0 'str' 'const String &'
|     | `-BinaryOperator 0x555744606a78 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5557445b3ce8 <col:13> 'int' lvalue ->status 0x5557445b2788
|     |   | `-CXXThisExpr 0x5557445b3cd8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x555744606a60 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5557445b3d18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b13e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x555744606c10 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x555744606b30 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x555744606b18 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x555744606b00 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5557445b3d98 <col:13> 'int' lvalue ->status 0x5557445b2788
|     | | |     `-CXXThisExpr 0x5557445b3d88 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x555744606ae0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x555744606ab0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5557445b3dd8 <col:23> 'int' lvalue ->status 0x5557445b2788
|     | |   |   `-CXXThisExpr 0x5557445b3dc8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x555744606ac8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5557445b3e08 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x555744606bf0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x555744606ba0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x555744606b70 <col:13, col:18> '<bound member function type>' .error 0x555744477fa0
|     |   | | `-DeclRefExpr 0x555744606b50 <col:13> 'const ArgContext' lvalue ParmVar 0x5557445fe2f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x555744606bc8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5557445b3f18 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x555744606be0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5557445b3f80 <col:20> 'bool' false
|     |-DeclStmt 0x555744607158 <line:1064:9, col:64>
|     | `-TypedefDecl 0x555744607100 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5557446070b0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x555744607090 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x555744607020 'type'
|     |       `-ElaboratedType 0x555744606fd0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x555744606fb0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x555744270fd8 'unsigned_type'
|     |           `-BuiltinType 0x555743f96410 'unsigned int'
|     |-CallExpr 0x5557446077b0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x555744607798 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x555744607718 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5557446075f8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x555744281c68 'extract_integer')
|     | |-ImplicitCastExpr 0x5557446077f8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5557446077e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5557446071b8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5557446065a8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x555744607288 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x555744607238 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5557445fe288 'result' 'unsigned int &'
|     `-ReturnStmt 0x555744607810 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5557445b4328 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5557445b2698 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5557445b2348 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5557445b25f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5557445b23f8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5557445b2498 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5557445b2510 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5557445b2ea8 <col:71> 'const ArgContext' lvalue Var 0x5557445a6f58 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5557445b4ac8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5557445b4410 <line:1071:9, col:12>
| |   | `-VarDecl 0x5557445b43a8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5557445b4aa0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5557445b46b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5557445b4528 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5557445b44f0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5557445b4438 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5557445b4490 <col:31> 'const String' lvalue ParmVar 0x5557445b23f8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5557445b44b0 <col:36> 'V' lvalue Var 0x5557445b43a8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5557445b44d0 <col:39> 'const ArgContext' lvalue ParmVar 0x5557445b2510 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5557445b4690 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5557445b4670 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5557445b4658 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5557445b4640 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5557445b4550 <col:17> 'int' lvalue ->status 0x5557445b2788
| |     |     |     `-CXXThisExpr 0x5557445b4540 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5557445b4620 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5557445b45f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5557445b4590 <col:27> 'int' lvalue ->status 0x5557445b2788
| |     |       |   `-CXXThisExpr 0x5557445b4580 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5557445b4608 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5557445b45d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5557445b46e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5557445b46d0 <col:20> 'bool' false
| |     `-IfStmt 0x5557445b4a78 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5557445b4780 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5557445b4750 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5557445b4700 <col:18> 'int' lvalue ->status 0x5557445b2788
| |       | |   `-CXXThisExpr 0x5557445b46f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5557445b4768 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5557445b4730 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5557445b49b8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5557445b4960 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5557445b47b0 <line:1076:13> '<bound member function type>' ->range_error 0x5557445b2d98
| |       | | | `-CXXThisExpr 0x5557445b47a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5557445b47e0 <col:25> 'const ArgContext' lvalue ParmVar 0x5557445b2510 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5557445b48c0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5557445b4938 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5557445b4918 <col:43> 'V' lvalue Var 0x5557445b43a8 'x' 'V'
| |       | `-ReturnStmt 0x5557445b49a8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5557445b4998 <col:20> 'bool' false
| |       `-CompoundStmt 0x5557445b4a58 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5557445b4a18 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5557445b49d8 <col:13> 'V' lvalue ParmVar 0x5557445b2498 'result' 'V &'
| |         | `-DeclRefExpr 0x5557445b49f8 <col:22> 'V' lvalue Var 0x5557445b43a8 'x' 'V'
| |         `-ReturnStmt 0x5557445b4a48 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5557445b4a38 <col:20> 'bool' true
| `-CXXMethodDecl 0x5557445fdd98 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5557445fdb70 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5557445fdc48 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5557445fdcb0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5557445fe9e8 <col:83, line:1083:5>
|     |-DeclStmt 0x5557445fe020 <line:1071:9, col:12>
|     | `-VarDecl 0x5557445fdfb8 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5557445fe9c0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5557445fe650 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5557445fe578 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5557445fe540 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5557445fe4f8 <col:14> '<bound member function type>' ->parse_saturating 0x5557445fe3d8
|       | |   | `-CXXThisExpr 0x5557445fe4e8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5557445fe090 <col:31> 'const String' lvalue ParmVar 0x5557445fdb70 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5557445fe0b0 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5557445fdfb8 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5557445fe0d0 <col:39> 'const ArgContext' lvalue ParmVar 0x5557445fdcb0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5557445fe630 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5557445fe610 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5557445fe5f8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5557445fe5e0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5557445b4550 <col:17> 'int' lvalue ->status 0x5557445b2788
|       |     |     `-CXXThisExpr 0x5557445b4540 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5557445fe5c0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5557445fe590 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5557445b4590 <col:27> 'int' lvalue ->status 0x5557445b2788
|       |       |   `-CXXThisExpr 0x5557445b4580 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5557445fe5a8 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5557445b45d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5557445fe670 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5557445b46d0 <col:20> 'bool' false
|       `-IfStmt 0x5557445fe998 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5557445fe6b0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5557445fe680 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5557445b4700 <col:18> 'int' lvalue ->status 0x5557445b2788
|         | |   `-CXXThisExpr 0x5557445b46f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5557445fe698 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5557445b4730 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5557445b1470 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5557445fe8d0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5557445fe840 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5557445b47b0 <line:1076:13> '<bound member function type>' ->range_error 0x5557445b2d98
|         | | | `-CXXThisExpr 0x5557445b47a0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5557445fe6d0 <col:25> 'const ArgContext' lvalue ParmVar 0x5557445fdcb0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5557445fe8a8 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5557445fe878 <col:31, col:50> 'const bool' lvalue Var 0x555744270e80 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5557445fe818 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5557445fe800 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5557445fe7e8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5557445fe7c8 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5557445fdfb8 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5557445fe8c0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5557445b4998 <col:20> 'bool' false
|         `-CompoundStmt 0x5557445fe978 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5557445fe948 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5557445fe8f0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5557445fdc48 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5557445fe930 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5557445fe910 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5557445fdfb8 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5557445fe968 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5557445b4a38 <col:20> 'bool' true
|-FieldDecl 0x5557445b2720 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5557445b2788 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5557445b27d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5557445b2a90 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5557445b2818 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5557445b2898 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5557445b2910 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5557445b2990 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5557445b2d98 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5557445b2b60 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5557445b2bd8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5557445b2c70 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5557445b5328 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5557445b5328
| `-ParmVarDecl 0x5557445b5438 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5557445b55b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557445b56c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5557445fa880 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5557445fa850 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5557445fa820 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5557445fa7f0 <col:7> 'IntArg' lvalue ParmVar 0x5557445b56c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5557445b2720 'base' 'int'
| | `-ImplicitCastExpr 0x5557445fa978 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557445fa948 <col:7> 'int' xvalue .base 0x5557445b2720
| |     `-CXXStaticCastExpr 0x5557445fa918 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5557445fa8e8 <col:7> 'IntArg' lvalue ParmVar 0x5557445b56c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5557445b2788 'status' 'int'
| | `-ImplicitCastExpr 0x5557445faa48 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5557445faa18 <col:7> 'int' xvalue .status 0x5557445b2788
| |     `-CXXStaticCastExpr 0x5557445fa9e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5557445fa9b8 <col:7> 'IntArg' lvalue ParmVar 0x5557445b56c8 '' 'IntArg &&'
| `-CompoundStmt 0x5557445faaa0 <col:7>
`-CXXDestructorDecl 0x5557445f99e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5557445b98c0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5557445b9b18 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5557445f9908 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5557445f9e80 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5557445f9e60 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5557445f9ef0 <col:19>
|-CXXConstructorDecl 0x5557445f9ae8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5557445f9ae8
| `-ParmVarDecl 0x5557445f9bf8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5557445f9c98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5557445f9da8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5557445faab0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5557445fa7d0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5557445fa7a0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5557445fa770 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5557445f9da8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5557445fab20 <col:19>
`-CXXDestructorDecl 0x5557445f9f30 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
